--
-- PostgreSQL database dump
--

-- Dumped from database version 11.7 (Debian 11.7-0+deb10u1)
-- Dumped by pg_dump version 11.7 (Debian 11.7-0+deb10u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: analytics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.analytics (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json NOT NULL
);


ALTER TABLE public.analytics OWNER TO postgres;

--
-- Name: apiKeys; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."apiKeys" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    key text NOT NULL,
    expiration character varying(255) NOT NULL,
    "isRevoked" boolean DEFAULT false NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL
);


ALTER TABLE public."apiKeys" OWNER TO postgres;

--
-- Name: apiKeys_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."apiKeys_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."apiKeys_id_seq" OWNER TO postgres;

--
-- Name: apiKeys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."apiKeys_id_seq" OWNED BY public."apiKeys".id;


--
-- Name: assetData; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."assetData" (
    id integer NOT NULL,
    data bytea NOT NULL
);


ALTER TABLE public."assetData" OWNER TO postgres;

--
-- Name: assetFolders; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."assetFolders" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    slug character varying(255) NOT NULL,
    "parentId" integer
);


ALTER TABLE public."assetFolders" OWNER TO postgres;

--
-- Name: assetFolders_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."assetFolders_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."assetFolders_id_seq" OWNER TO postgres;

--
-- Name: assetFolders_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."assetFolders_id_seq" OWNED BY public."assetFolders".id;


--
-- Name: assets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.assets (
    id integer NOT NULL,
    filename character varying(255) NOT NULL,
    hash character varying(255) NOT NULL,
    ext character varying(255) NOT NULL,
    kind text DEFAULT 'binary'::text NOT NULL,
    mime character varying(255) DEFAULT 'application/octet-stream'::character varying NOT NULL,
    "fileSize" integer,
    metadata json,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL,
    "folderId" integer,
    "authorId" integer,
    CONSTRAINT assets_kind_check CHECK ((kind = ANY (ARRAY['binary'::text, 'image'::text])))
);


ALTER TABLE public.assets OWNER TO postgres;

--
-- Name: COLUMN assets."fileSize"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.assets."fileSize" IS 'In kilobytes';


--
-- Name: assets_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.assets_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.assets_id_seq OWNER TO postgres;

--
-- Name: assets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.assets_id_seq OWNED BY public.assets.id;


--
-- Name: authentication; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.authentication (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json NOT NULL,
    "selfRegistration" boolean DEFAULT false NOT NULL,
    "domainWhitelist" json NOT NULL,
    "autoEnrollGroups" json NOT NULL,
    "order" integer DEFAULT 0 NOT NULL,
    "strategyKey" character varying(255) DEFAULT ''::character varying NOT NULL,
    "displayName" character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.authentication OWNER TO postgres;

--
-- Name: brute; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.brute (
    key character varying(255),
    "firstRequest" bigint,
    "lastRequest" bigint,
    lifetime bigint,
    count integer
);


ALTER TABLE public.brute OWNER TO postgres;

--
-- Name: commentProviders; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."commentProviders" (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json NOT NULL
);


ALTER TABLE public."commentProviders" OWNER TO postgres;

--
-- Name: comments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.comments (
    id integer NOT NULL,
    content text NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL,
    "pageId" integer,
    "authorId" integer,
    render text DEFAULT ''::text NOT NULL,
    name character varying(255) DEFAULT ''::character varying NOT NULL,
    email character varying(255) DEFAULT ''::character varying NOT NULL,
    ip character varying(255) DEFAULT ''::character varying NOT NULL,
    "replyTo" integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.comments OWNER TO postgres;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.comments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO postgres;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.comments_id_seq OWNED BY public.comments.id;


--
-- Name: editors; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.editors (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json NOT NULL
);


ALTER TABLE public.editors OWNER TO postgres;

--
-- Name: groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.groups (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    permissions json NOT NULL,
    "pageRules" json NOT NULL,
    "isSystem" boolean DEFAULT false NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL,
    "redirectOnLogin" character varying(255) DEFAULT '/'::character varying NOT NULL
);


ALTER TABLE public.groups OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.groups_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.groups_id_seq OWNER TO postgres;

--
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.groups_id_seq OWNED BY public.groups.id;


--
-- Name: locales; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.locales (
    code character varying(5) NOT NULL,
    strings json,
    "isRTL" boolean DEFAULT false NOT NULL,
    name character varying(255) NOT NULL,
    "nativeName" character varying(255) NOT NULL,
    availability integer DEFAULT 0 NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL
);


ALTER TABLE public.locales OWNER TO postgres;

--
-- Name: loggers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.loggers (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    level character varying(255) DEFAULT 'warn'::character varying NOT NULL,
    config json
);


ALTER TABLE public.loggers OWNER TO postgres;

--
-- Name: migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.migrations (
    id integer NOT NULL,
    name character varying(255),
    batch integer,
    migration_time timestamp with time zone
);


ALTER TABLE public.migrations OWNER TO postgres;

--
-- Name: migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.migrations_id_seq OWNER TO postgres;

--
-- Name: migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.migrations_id_seq OWNED BY public.migrations.id;


--
-- Name: migrations_lock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.migrations_lock (
    index integer NOT NULL,
    is_locked integer
);


ALTER TABLE public.migrations_lock OWNER TO postgres;

--
-- Name: migrations_lock_index_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.migrations_lock_index_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.migrations_lock_index_seq OWNER TO postgres;

--
-- Name: migrations_lock_index_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.migrations_lock_index_seq OWNED BY public.migrations_lock.index;


--
-- Name: navigation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.navigation (
    key character varying(255) NOT NULL,
    config json
);


ALTER TABLE public.navigation OWNER TO postgres;

--
-- Name: pageHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pageHistory" (
    id integer NOT NULL,
    path character varying(255) NOT NULL,
    hash character varying(255) NOT NULL,
    title character varying(255) NOT NULL,
    description character varying(255),
    "isPrivate" boolean DEFAULT false NOT NULL,
    "isPublished" boolean DEFAULT false NOT NULL,
    "publishStartDate" character varying(255),
    "publishEndDate" character varying(255),
    action character varying(255) DEFAULT 'updated'::character varying,
    "pageId" integer,
    content text,
    "contentType" character varying(255) NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "editorKey" character varying(255),
    "localeCode" character varying(5),
    "authorId" integer,
    "versionDate" character varying(255) DEFAULT ''::character varying NOT NULL,
    extra json DEFAULT '{}'::json NOT NULL
);


ALTER TABLE public."pageHistory" OWNER TO postgres;

--
-- Name: pageHistoryTags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pageHistoryTags" (
    id integer NOT NULL,
    "pageId" integer,
    "tagId" integer
);


ALTER TABLE public."pageHistoryTags" OWNER TO postgres;

--
-- Name: pageHistoryTags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."pageHistoryTags_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."pageHistoryTags_id_seq" OWNER TO postgres;

--
-- Name: pageHistoryTags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."pageHistoryTags_id_seq" OWNED BY public."pageHistoryTags".id;


--
-- Name: pageHistory_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."pageHistory_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."pageHistory_id_seq" OWNER TO postgres;

--
-- Name: pageHistory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."pageHistory_id_seq" OWNED BY public."pageHistory".id;


--
-- Name: pageLinks; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pageLinks" (
    id integer NOT NULL,
    path character varying(255) NOT NULL,
    "localeCode" character varying(5) NOT NULL,
    "pageId" integer
);


ALTER TABLE public."pageLinks" OWNER TO postgres;

--
-- Name: pageLinks_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."pageLinks_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."pageLinks_id_seq" OWNER TO postgres;

--
-- Name: pageLinks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."pageLinks_id_seq" OWNED BY public."pageLinks".id;


--
-- Name: pageTags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pageTags" (
    id integer NOT NULL,
    "pageId" integer,
    "tagId" integer
);


ALTER TABLE public."pageTags" OWNER TO postgres;

--
-- Name: pageTags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."pageTags_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."pageTags_id_seq" OWNER TO postgres;

--
-- Name: pageTags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."pageTags_id_seq" OWNED BY public."pageTags".id;


--
-- Name: pageTree; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pageTree" (
    id integer NOT NULL,
    path character varying(255) NOT NULL,
    depth integer NOT NULL,
    title character varying(255) NOT NULL,
    "isPrivate" boolean DEFAULT false NOT NULL,
    "isFolder" boolean DEFAULT false NOT NULL,
    "privateNS" character varying(255),
    parent integer,
    "pageId" integer,
    "localeCode" character varying(5),
    ancestors json
);


ALTER TABLE public."pageTree" OWNER TO postgres;

--
-- Name: pages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pages (
    id integer NOT NULL,
    path character varying(255) NOT NULL,
    hash character varying(255) NOT NULL,
    title character varying(255) NOT NULL,
    description character varying(255),
    "isPrivate" boolean DEFAULT false NOT NULL,
    "isPublished" boolean DEFAULT false NOT NULL,
    "privateNS" character varying(255),
    "publishStartDate" character varying(255),
    "publishEndDate" character varying(255),
    content text,
    render text,
    toc json,
    "contentType" character varying(255) NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL,
    "editorKey" character varying(255),
    "localeCode" character varying(5),
    "authorId" integer,
    "creatorId" integer,
    extra json DEFAULT '{}'::json NOT NULL
);


ALTER TABLE public.pages OWNER TO postgres;

--
-- Name: pagesVector; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pagesVector" (
    id integer NOT NULL,
    path character varying(255),
    locale character varying(255),
    title character varying(255),
    description character varying(255),
    tokens tsvector,
    content text
);


ALTER TABLE public."pagesVector" OWNER TO postgres;

--
-- Name: pagesVector_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."pagesVector_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."pagesVector_id_seq" OWNER TO postgres;

--
-- Name: pagesVector_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."pagesVector_id_seq" OWNED BY public."pagesVector".id;


--
-- Name: pagesWords; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."pagesWords" (
    word text
);


ALTER TABLE public."pagesWords" OWNER TO postgres;

--
-- Name: pages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.pages_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pages_id_seq OWNER TO postgres;

--
-- Name: pages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.pages_id_seq OWNED BY public.pages.id;


--
-- Name: renderers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.renderers (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json
);


ALTER TABLE public.renderers OWNER TO postgres;

--
-- Name: searchEngines; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."searchEngines" (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    config json
);


ALTER TABLE public."searchEngines" OWNER TO postgres;

--
-- Name: sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sessions (
    sid character varying(255) NOT NULL,
    sess json NOT NULL,
    expired timestamp with time zone NOT NULL
);


ALTER TABLE public.sessions OWNER TO postgres;

--
-- Name: settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.settings (
    key character varying(255) NOT NULL,
    value json,
    "updatedAt" character varying(255) NOT NULL
);


ALTER TABLE public.settings OWNER TO postgres;

--
-- Name: storage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.storage (
    key character varying(255) NOT NULL,
    "isEnabled" boolean DEFAULT false NOT NULL,
    mode character varying(255) DEFAULT 'push'::character varying NOT NULL,
    config json,
    "syncInterval" character varying(255),
    state json
);


ALTER TABLE public.storage OWNER TO postgres;

--
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    tag character varying(255) NOT NULL,
    title character varying(255),
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tags_id_seq OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: userAvatars; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."userAvatars" (
    id integer NOT NULL,
    data bytea NOT NULL
);


ALTER TABLE public."userAvatars" OWNER TO postgres;

--
-- Name: userGroups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."userGroups" (
    id integer NOT NULL,
    "userId" integer,
    "groupId" integer
);


ALTER TABLE public."userGroups" OWNER TO postgres;

--
-- Name: userGroups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."userGroups_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."userGroups_id_seq" OWNER TO postgres;

--
-- Name: userGroups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."userGroups_id_seq" OWNED BY public."userGroups".id;


--
-- Name: userKeys; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."userKeys" (
    id integer NOT NULL,
    kind character varying(255) NOT NULL,
    token character varying(255) NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "validUntil" character varying(255) NOT NULL,
    "userId" integer
);


ALTER TABLE public."userKeys" OWNER TO postgres;

--
-- Name: userKeys_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."userKeys_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."userKeys_id_seq" OWNER TO postgres;

--
-- Name: userKeys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."userKeys_id_seq" OWNED BY public."userKeys".id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    "providerId" character varying(255),
    password character varying(255),
    "tfaIsActive" boolean DEFAULT false NOT NULL,
    "tfaSecret" character varying(255),
    "jobTitle" character varying(255) DEFAULT ''::character varying,
    location character varying(255) DEFAULT ''::character varying,
    "pictureUrl" character varying(255),
    timezone character varying(255) DEFAULT 'America/New_York'::character varying NOT NULL,
    "isSystem" boolean DEFAULT false NOT NULL,
    "isActive" boolean DEFAULT false NOT NULL,
    "isVerified" boolean DEFAULT false NOT NULL,
    "mustChangePwd" boolean DEFAULT false NOT NULL,
    "createdAt" character varying(255) NOT NULL,
    "updatedAt" character varying(255) NOT NULL,
    "providerKey" character varying(255) DEFAULT 'local'::character varying NOT NULL,
    "localeCode" character varying(5) DEFAULT 'en'::character varying NOT NULL,
    "defaultEditor" character varying(255) DEFAULT 'markdown'::character varying NOT NULL,
    "lastLoginAt" character varying(255),
    "dateFormat" character varying(255) DEFAULT ''::character varying NOT NULL,
    appearance character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: apiKeys id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."apiKeys" ALTER COLUMN id SET DEFAULT nextval('public."apiKeys_id_seq"'::regclass);


--
-- Name: assetFolders id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."assetFolders" ALTER COLUMN id SET DEFAULT nextval('public."assetFolders_id_seq"'::regclass);


--
-- Name: assets id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assets ALTER COLUMN id SET DEFAULT nextval('public.assets_id_seq'::regclass);


--
-- Name: comments id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments ALTER COLUMN id SET DEFAULT nextval('public.comments_id_seq'::regclass);


--
-- Name: groups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups ALTER COLUMN id SET DEFAULT nextval('public.groups_id_seq'::regclass);


--
-- Name: migrations id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations ALTER COLUMN id SET DEFAULT nextval('public.migrations_id_seq'::regclass);


--
-- Name: migrations_lock index; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations_lock ALTER COLUMN index SET DEFAULT nextval('public.migrations_lock_index_seq'::regclass);


--
-- Name: pageHistory id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistory" ALTER COLUMN id SET DEFAULT nextval('public."pageHistory_id_seq"'::regclass);


--
-- Name: pageHistoryTags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistoryTags" ALTER COLUMN id SET DEFAULT nextval('public."pageHistoryTags_id_seq"'::regclass);


--
-- Name: pageLinks id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageLinks" ALTER COLUMN id SET DEFAULT nextval('public."pageLinks_id_seq"'::regclass);


--
-- Name: pageTags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTags" ALTER COLUMN id SET DEFAULT nextval('public."pageTags_id_seq"'::regclass);


--
-- Name: pages id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages ALTER COLUMN id SET DEFAULT nextval('public.pages_id_seq'::regclass);


--
-- Name: pagesVector id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pagesVector" ALTER COLUMN id SET DEFAULT nextval('public."pagesVector_id_seq"'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Name: userGroups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userGroups" ALTER COLUMN id SET DEFAULT nextval('public."userGroups_id_seq"'::regclass);


--
-- Name: userKeys id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userKeys" ALTER COLUMN id SET DEFAULT nextval('public."userKeys_id_seq"'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: analytics; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.analytics (key, "isEnabled", config) FROM stdin;
azureinsights	f	{"instrumentationKey":""}
baidutongji	f	{"propertyTrackingId":""}
countly	f	{"appKey":"","serverUrl":""}
elasticapm	f	{"serverUrl":"http://apm.example.com:8200","serviceName":"wiki-js","environment":""}
fathom	f	{"host":"","siteId":""}
fullstory	f	{"org":""}
google	t	{"propertyTrackingId":"UA-173994065-1"}
gtm	f	{"containerTrackingId":""}
hotjar	f	{"siteId":""}
matomo	f	{"siteId":1,"serverHost":"https://example.matomo.cloud","scriptUrl":"//cdn.matomo.cloud/EXAMPLE.matomo.cloud/matomo.js"}
newrelic	f	{"licenseKey":"","appId":""}
statcounter	f	{"projectId":"","securityToken":""}
yandex	f	{"tagNumber":""}
\.


--
-- Data for Name: apiKeys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."apiKeys" (id, name, key, expiration, "isRevoked", "createdAt", "updatedAt") FROM stdin;
\.


--
-- Data for Name: assetData; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."assetData" (id, data) FROM stdin;
2	\\
3	\\
9	\\
11	\\
\.


--
-- Data for Name: assetFolders; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."assetFolders" (id, name, slug, "parentId") FROM stdin;
1	algorithms	algorithms	\N
2	programming-language	programming-language	\N
3	golang	golang	2
4	runtime	runtime	3
5	context	context	4
\.


--
-- Data for Name: assets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.assets (id, filename, hash, ext, kind, mime, "fileSize", metadata, "createdAt", "updatedAt", "folderId", "authorId") FROM stdin;
2	topological_sort.png	3cb3d3708c8a2f9757a44e028acaf4173521fb32	.png	image	image/png	163256	\N	2020-07-29T14:25:11.069Z	2020-07-29T14:25:11.069Z	\N	1
3	convex_hull.jpg	eccb18045409ebc7c474a62cfcbe3160858d788a	.jpg	image	image/jpeg	98672	\N	2020-07-30T08:08:58.332Z	2020-07-30T08:08:58.333Z	\N	1
9	convex_concave_polygons.png	6f070dece02f1a527f1b04de2de6341509b94bf4	.png	image	image/png	50179	\N	2020-08-05T15:21:53.366Z	2020-08-05T15:21:53.366Z	\N	1
11	context-and-goroutine-tree.png	6e95170701b0d28fe9811be33129ebe5f3224961	.png	image	image/png	79100	\N	2020-09-09T05:04:10.967Z	2020-09-09T05:04:10.967Z	5	1
\.


--
-- Data for Name: authentication; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.authentication (key, "isEnabled", config, "selfRegistration", "domainWhitelist", "autoEnrollGroups", "order", "strategyKey", "displayName") FROM stdin;
local	t	{}	f	{"v":[]}	{"v":[]}	0	local	Local Database
\.


--
-- Data for Name: brute; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.brute (key, "firstRequest", "lastRequest", lifetime, count) FROM stdin;
\.


--
-- Data for Name: commentProviders; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."commentProviders" (key, "isEnabled", config) FROM stdin;
commento	f	{"instanceUrl":"https://cdn.commento.io"}
default	f	{"akismet":"","minDelay":30}
disqus	t	{"accountName":"wiki-liuchao-me"}
\.


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.comments (id, content, "createdAt", "updatedAt", "pageId", "authorId", render, name, email, ip, "replyTo") FROM stdin;
\.


--
-- Data for Name: editors; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.editors (key, "isEnabled", config) FROM stdin;
api	f	{}
ckeditor	f	{}
code	f	{}
markdown	t	{}
redirect	f	{}
wysiwyg	f	{}
\.


--
-- Data for Name: groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.groups (id, name, permissions, "pageRules", "isSystem", "createdAt", "updatedAt", "redirectOnLogin") FROM stdin;
1	Administrators	["manage:system"]	[]	t	2020-07-29T05:58:12.541Z	2020-07-29T05:58:12.541Z	/
2	Guests	["read:pages","read:assets","read:comments"]	[{"id":"guest","roles":["read:pages","read:assets","read:comments"],"match":"START","deny":false,"path":"","locales":[]}]	t	2020-07-29T05:58:12.544Z	2020-07-29T05:58:12.544Z	/
\.


--
-- Data for Name: locales; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.locales (code, strings, "isRTL", name, "nativeName", availability, "createdAt", "updatedAt") FROM stdin;
en	{"common":{"footer":{"poweredBy":"Powered by","copyright":"© {{year}} {{company}}. All rights reserved.","license":"Content is available under the {{license}}, by {{company}}."},"actions":{"save":"Save","cancel":"Cancel","download":"Download","upload":"Upload","discard":"Discard","clear":"Clear","create":"Create","edit":"Edit","delete":"Delete","refresh":"Refresh","saveChanges":"Save Changes","proceed":"Proceed","ok":"OK","add":"Add","apply":"Apply","browse":"Browse...","close":"Close","page":"Page","discardChanges":"Discard Changes","move":"Move","rename":"Rename","optimize":"Optimize","preview":"Preview","properties":"Properties","insert":"Insert","fetch":"Fetch","generate":"Generate","confirm":"Confirm","copy":"Copy","returnToTop":"Return to top","exit":"Exit"},"newpage":{"title":"This page does not exist yet.","subtitle":"Would you like to create it now?","create":"Create Page","goback":"Go back"},"unauthorized":{"title":"Unauthorized","action":{"view":"You cannot view this page.","source":"You cannot view the page source.","history":"You cannot view the page history.","edit":"You cannot edit the page.","create":"You cannot create the page.","download":"You cannot download the page content.","downloadVersion":"You cannot download the content for this page version.","sourceVersion":"You cannot view the source of this version of the page."},"goback":"Go Back","login":"Login As..."},"notfound":{"gohome":"Home","title":"Not Found","subtitle":"This page does not exist."},"welcome":{"title":"Welcome to your wiki!","subtitle":"Let's get started and create the home page.","createhome":"Create Home Page"},"header":{"home":"Home","newPage":"New Page","currentPage":"Current Page","view":"View","edit":"Edit","history":"History","viewSource":"View Source","move":"Move / Rename","delete":"Delete","assets":"Assets","imagesFiles":"Images & Files","search":"Search...","admin":"Administration","account":"Account","myWiki":"My Wiki","profile":"Profile","logout":"Logout","login":"Login","searchHint":"Type at least 2 characters to start searching...","searchLoading":"Searching...","searchNoResult":"No pages matching your query.","searchResultsCount":"Found {{total}} results","searchDidYouMean":"Did you mean...","searchClose":"Close","searchCopyLink":"Copy Search Link","language":"Language","browseTags":"Browse by Tags","siteMap":"Site Map","pageActions":"Page Actions","duplicate":"Duplicate"},"page":{"lastEditedBy":"Last edited by","unpublished":"Unpublished","editPage":"Edit Page","toc":"Table of Contents","bookmark":"Bookmark","share":"Share","printFormat":"Print Format","delete":"Delete Page","deleteTitle":"Are you sure you want to delete page {{title}}?","deleteSubtitle":"The page can be restored from the administration area.","viewingSource":"Viewing source of page {{path}}","returnNormalView":"Return to Normal View","id":"ID {{id}}","published":"Published","private":"Private","global":"Global","loading":"Loading Page...","viewingSourceVersion":"Viewing source as of {{date}} of page {{path}}","versionId":"Version ID {{id}}","unpublishedWarning":"This page is not published.","tags":"Tags","tagsMatching":"Pages matching tags"},"error":{"unexpected":"An unexpected error occurred."},"password":{"veryWeak":"Very Weak","weak":"Weak","average":"Average","strong":"Strong","veryStrong":"Very Strong"},"user":{"search":"Search User","searchPlaceholder":"Search Users..."},"duration":{"every":"Every","minutes":"Minute(s)","hours":"Hour(s)","days":"Day(s)","months":"Month(s)","years":"Year(s)"},"outdatedBrowserWarning":"Your browser is outdated. Upgrade to a {{modernBrowser}}.","modernBrowser":"modern browser","license":{"none":"None","ccby":" Creative Commons Attribution License","ccbysa":"Creative Commons Attribution-ShareAlike License","ccbynd":"Creative Commons Attribution-NoDerivs License","ccbync":"Creative Commons Attribution-NonCommercial License","ccbyncsa":"Creative Commons Attribution-NonCommercial-ShareAlike License","ccbyncnd":"Creative Commons Attribution-NonCommercial-NoDerivs License","cc0":"Public Domain","alr":"All Rights Reserved"},"sidebar":{"browse":"Browse","mainMenu":"Main Menu","currentDirectory":"Current Directory","root":"(root)"},"comments":{"title":"Comments","newPlaceholder":"Write a new comment...","fieldName":"Your Name","fieldEmail":"Your Email Address","markdownFormat":"Markdown Format","postComment":"Post Comment","loading":"Loading comments...","postingAs":"Posting as {{name}}","beFirst":"Be the first to comment.","none":"No comments yet.","updateComment":"Update Comment","deleteConfirmTitle":"Confirm Delete","deleteWarn":"Are you sure you want to permanently delete this comment?","deletePermanentWarn":"This action cannot be undone!","modified":"modified {{reldate}}","postSuccess":"New comment posted successfully.","contentMissingError":"Comment is empty or too short!","updateSuccess":"Comment was updated successfully.","deleteSuccess":"Comment was deleted successfully.","viewDiscussion":"View Discussion","newComment":"New Comment","fieldContent":"Comment Content","sdTitle":"Talk"}},"auth":{"loginRequired":"Login required","fields":{"emailUser":"Email / Username","password":"Password","email":"Email Address","verifyPassword":"Verify Password","name":"Name","username":"Username"},"actions":{"login":"Log In","register":"Register"},"errors":{"invalidLogin":"Invalid Login","invalidLoginMsg":"The email or password is invalid.","invalidUserEmail":"Invalid User Email","loginError":"Login error","notYetAuthorized":"You have not been authorized to login to this site yet.","tooManyAttempts":"Too many attempts!","tooManyAttemptsMsg":"You've made too many failed attempts in a short period of time, please try again {{time}}.","userNotFound":"User not found"},"providers":{"local":"Local","windowslive":"Microsoft Account","azure":"Azure Active Directory","google":"Google ID","facebook":"Facebook","github":"GitHub","slack":"Slack","ldap":"LDAP / Active Directory"},"tfa":{"title":"Two Factor Authentication","subtitle":"Security code required:","placeholder":"XXXXXX","verifyToken":"Verify"},"registerTitle":"Create an account","switchToLogin":{"text":"Already have an account? {{link}}","link":"Login instead"},"loginUsingStrategy":"Login using {{strategy}}","forgotPasswordLink":"Forgot your password?","orLoginUsingStrategy":"or login using...","switchToRegister":{"text":"Don't have an account yet? {{link}}","link":"Create an account"},"invalidEmailUsername":"Enter a valid email / username.","invalidPassword":"Enter a valid password.","loginSuccess":"Login Successful! Redirecting...","signingIn":"Signing In...","genericError":"Authentication is unavailable.","registerSubTitle":"Fill-in the form below to create your account.","pleaseWait":"Please wait","registerSuccess":"Account created successfully!","registering":"Creating account...","missingEmail":"Missing email address.","invalidEmail":"Email address is invalid.","missingPassword":"Missing password.","passwordTooShort":"Password is too short.","passwordNotMatch":"Both passwords do not match.","missingName":"Name is missing.","nameTooShort":"Name is too short.","nameTooLong":"Name is too long.","forgotPasswordCancel":"Cancel","sendResetPassword":"Reset Password","forgotPasswordSubtitle":"Enter your email address to receive the instructions to reset your password:","registerCheckEmail":"Check your emails to activate your account.","changePwd":{"subtitle":"Choose a new password","instructions":"You must choose a new password:","newPasswordPlaceholder":"New Password","newPasswordVerifyPlaceholder":"Verify New Password","proceed":"Change Password","loading":"Changing password..."},"forgotPasswordLoading":"Requesting password reset...","forgotPasswordSuccess":"Check your emails for password reset instructions!"},"admin":{"dashboard":{"title":"Dashboard","subtitle":"Wiki.js","pages":"Pages","users":"Users","groups":"Groups","versionLatest":"You are running the latest version.","versionNew":"A new version is available: {{version}}","contributeSubtitle":"Wiki.js is a free and open source project. There are several ways you can contribute to the project.","contributeHelp":"We need your help!","contributeLearnMore":"Learn More","recentPages":"Recent Pages","mostPopularPages":"Most Popular Pages","lastLogins":"Last Logins"},"general":{"title":"General","subtitle":"Main settings of your wiki","siteInfo":"Site Info","siteBranding":"Site Branding","general":"General","siteUrl":"Site URL","siteUrlHint":"Full URL to your wiki, without the trailing slash. (e.g. https://wiki.example.com)","siteTitle":"Site Title","siteTitleHint":"Displayed in the top bar and appended to all pages meta title.","logo":"Logo","uploadLogo":"Upload Logo","uploadClear":"Clear","uploadSizeHint":"An image of {{size}} pixels is recommended for best results.","uploadTypesHint":"{{typeList}} or {{lastType}} files only","footerCopyright":"Footer Copyright","companyName":"Company / Organization Name","companyNameHint":"Name to use when displaying copyright notice in the footer. Leave empty to hide.","siteDescription":"Site Description","siteDescriptionHint":"Default description when none is provided for a page.","metaRobots":"Meta Robots","metaRobotsHint":"Default: Index, Follow. Can also be set on a per-page basis.","logoUrl":"Logo URL","logoUrlHint":"Specify an image to use as the logo. SVG, PNG, JPG are supported, in a square ratio, 34x34 pixels or larger. Click the button on the right to upload a new image.","contentLicense":"Content License","contentLicenseHint":"License shown in the footer of all content pages.","siteTitleInvalidChars":"Site Title contains invalid characters.","saveSuccess":"Site configuration saved successfully."},"locale":{"title":"Locale","subtitle":"Set localization options for your wiki","settings":"Locale Settings","namespacing":"Multilingual Namespacing","downloadTitle":"Download Locale","base":{"labelWithNS":"Base Locale","hint":"All UI text elements will be displayed in selected language.","label":"Site Locale"},"autoUpdate":{"label":"Update Automatically","hintWithNS":"Automatically download updates to all namespaced locales enabled below.","hint":"Automatically download updates to this locale as they become available."},"namespaces":{"label":"Multilingual Namespaces","hint":"Enables multiple language versions of the same page."},"activeNamespaces":{"label":"Active Namespaces","hint":"List of locales enabled for multilingual namespacing. The base locale defined above will always be included regardless of this selection."},"namespacingPrefixWarning":{"title":"The locale code will be prefixed to all paths. (e.g. /{{langCode}}/page-name)","subtitle":"Paths without a locale code will be automatically redirected to the base locale defined above."},"sideload":"Sideload Locale Package","sideloadHelp":"If you are not connected to the internet or cannot download locale files using the method above, you can instead sideload packages manually by uploading them below.","code":"Code","name":"Name","nativeName":"Native Name","rtl":"RTL","availability":"Availability","download":"Download"},"stats":{"title":"Statistics"},"theme":{"title":"Theme","subtitle":"Modify the look & feel of your wiki","siteTheme":"Site Theme","siteThemeHint":"Themes affect how content pages are displayed. Other site sections (such as the editor or admin area) are not affected.","darkMode":"Dark Mode","darkModeHint":"Not recommended for accessibility. May not be supported by all themes.","codeInjection":"Code Injection","cssOverride":"CSS Override","cssOverrideHint":"CSS code to inject after system default CSS. Consider using custom themes if you have a large amount of css code. Injecting too much CSS code will result in poor page load performance! CSS will automatically be minified.","headHtmlInjection":"Head HTML Injection","headHtmlInjectionHint":"HTML code to be injected just before the closing head tag. Usually for script tags.","bodyHtmlInjection":"Body HTML Injection","bodyHtmlInjectionHint":"HTML code to be injected just before the closing body tag.","downloadThemes":"Download Themes","iconset":"Icon Set","iconsetHint":"Set of icons to use for the sidebar navigation.","downloadName":"Name","downloadAuthor":"Author","downloadDownload":"Download","cssOverrideWarning":"{{caution}} When adding styles for page content, you must scope them to the {{cssClass}} class. Omitting this could break the layout of the editor!","cssOverrideWarningCaution":"CAUTION:","options":"Theme Options"},"groups":{"title":"Groups"},"users":{"title":"Users","active":"Active","inactive":"Inactive","verified":"Verified","unverified":"Unverified","edit":"Edit User","id":"ID {{id}}","basicInfo":"Basic Info","email":"Email","displayName":"Display Name","authentication":"Authentication","authProvider":"Provider","password":"Password","changePassword":"Change Password","newPassword":"New Password","tfa":"Two Factor Authentication (2FA)","toggle2FA":"Toggle 2FA","authProviderId":"Provider Id","groups":"User Groups","noGroupAssigned":"This user is not assigned to any group yet. You must assign at least 1 group to a user.","selectGroup":"Select Group...","groupAssign":"Assign","extendedMetadata":"Extended Metadata","location":"Location","jobTitle":"Job Title","timezone":"Timezone","userUpdateSuccess":"User updated successfully.","userAlreadyAssignedToGroup":"User is already assigned to this group!","deleteConfirmTitle":"Delete User?","deleteConfirmText":"Are you sure you want to delete user {{username}}?","updateUser":"Update User","groupAssignNotice":"Note that you cannot assign users to the Administrators or Guests groups from this panel.","deleteConfirmForeignNotice":"Note that you cannot delete a user that already created content. You must instead either deactivate the user or delete all content that was created by that user.","userVerifySuccess":"User has been verified successfully.","userActivateSuccess":"User has been activated successfully.","userDeactivateSuccess":"User deactivated successfully.","deleteConfirmReplaceWarn":"Any content (pages, uploads, comments, etc.) that was created by this user will be reassigned to the user selected below. It is recommended to create a dummy target user (e.g. Deleted User) if you don't want the content to be reassigned to any current active user.","userTFADisableSuccess":"2FA was disabled successfully.","userTFAEnableSuccess":"2FA was enabled successfully."},"auth":{"title":"Authentication","subtitle":"Configure the authentication settings of your wiki","strategies":"Strategies","globalAdvSettings":"Global Advanced Settings","jwtAudience":"JWT Audience","jwtAudienceHint":"Audience URN used in JWT issued upon login. Usually your domain name. (e.g. urn:your.domain.com)","tokenExpiration":"Token Expiration","tokenExpirationHint":"The expiration period of a token until it must be renewed. (default: 30m)","tokenRenewalPeriod":"Token Renewal Period","tokenRenewalPeriodHint":"The maximum period a token can be renewed when expired. (default: 14d)","strategyState":"This strategy is {{state}} {{locked}}","strategyStateActive":"active","strategyStateInactive":"not active","strategyStateLocked":"and cannot be disabled.","strategyConfiguration":"Strategy Configuration","strategyNoConfiguration":"This strategy has no configuration options you can modify.","registration":"Registration","selfRegistration":"Allow self-registration","selfRegistrationHint":"Allow any user successfully authorized by the strategy to access the wiki.","domainsWhitelist":"Limit to specific email domains","domainsWhitelistHint":"A list of domains authorized to register. The user email address domain must match one of these to gain access.","autoEnrollGroups":"Assign to group","autoEnrollGroupsHint":"Automatically assign new users to these groups.","security":"Security","force2fa":"Force all users to use Two-Factor Authentication (2FA)","force2faHint":"Users will be required to setup 2FA the first time they login and cannot be disabled by the user.","configReference":"Configuration Reference","configReferenceSubtitle":"Some strategies may require some configuration values to be set on your provider. These are provided for reference only and may not be needed by the current strategy.","siteUrlNotSetup":"You must set a valid {{siteUrl}} first! Click on {{general}} in the left sidebar.","allowedWebOrigins":"Allowed Web Origins","callbackUrl":"Callback URL / Redirect URI","loginUrl":"Login URL","logoutUrl":"Logout URL","tokenEndpointAuthMethod":"Token Endpoint Authentication Method","refreshSuccess":"List of strategies has been refreshed.","saveSuccess":"Authentication configuration saved successfully.","activeStrategies":"Active Strategies","addStrategy":"Add Strategy","strategyIsEnabled":"Active","strategyIsEnabledHint":"Are users able to login using this strategy?","displayName":"Display Name","displayNameHint":"The title shown to the end user for this authentication strategy."},"editor":{"title":"Editor"},"logging":{"title":"Logging"},"rendering":{"title":"Rendering","subtitle":"Configure the page rendering pipeline"},"search":{"title":"Search Engine","subtitle":"Configure the search capabilities of your wiki","rebuildIndex":"Rebuild Index","searchEngine":"Search Engine","engineConfig":"Engine Configuration","engineNoConfig":"This engine has no configuration options you can modify.","listRefreshSuccess":"List of search engines has been refreshed.","configSaveSuccess":"Search engine configuration saved successfully.","indexRebuildSuccess":"Index rebuilt successfully."},"storage":{"title":"Storage","subtitle":"Set backup and sync targets for your content","targets":"Targets","status":"Status","lastSync":"Last synchronization {{time}}","lastSyncAttempt":"Last attempt was {{time}}","errorMsg":"Error Message","noTarget":"You don't have any active storage target.","targetConfig":"Target Configuration","noConfigOption":"This storage target has no configuration options you can modify.","syncDirection":"Sync Direction","syncDirectionSubtitle":"Choose how content synchronization is handled for this storage target.","syncDirBi":"Bi-directional","syncDirPush":"Push to target","syncDirPull":"Pull from target","unsupported":"Unsupported","syncDirBiHint":"In bi-directional mode, content is first pulled from the storage target. Any newer content overwrites local content. New content since last sync is then pushed to the storage target, overwriting any content on target if present.","syncDirPushHint":"Content is always pushed to the storage target, overwriting any existing content. This is safest choice for backup scenarios.","syncDirPullHint":"Content is always pulled from the storage target, overwriting any local content which already exists. This choice is usually reserved for single-use content import. Caution with this option as any local content will always be overwritten!","syncSchedule":"Sync Schedule","syncScheduleHint":"For performance reasons, this storage target synchronize changes on an interval-based schedule, instead of on every change. Define at which interval should the synchronization occur.","syncScheduleCurrent":"Currently set to every {{schedule}}.","syncScheduleDefault":"The default is every {{schedule}}.","actions":"Actions","actionRun":"Run","targetState":"This storage target is {{state}}","targetStateActive":"active","targetStateInactive":"inactive","actionsInactiveWarn":"You must enable this storage target and apply changes before you can run actions."},"api":{"title":"API Access","subtitle":"Manage keys to access the API","enabled":"API Enabled","disabled":"API Disabled","enableButton":"Enable API","disableButton":"Disable API","newKeyButton":"New API Key","headerName":"Name","headerKeyEnding":"Key Ending","headerExpiration":"Expiration","headerCreated":"Created","headerLastUpdated":"Last Updated","headerRevoke":"Revoke","noKeyInfo":"No API keys have been generated yet.","revokeConfirm":"Revoke API Key?","revokeConfirmText":"Are you sure you want to revoke key {{name}}? This action cannot be undone!","revoke":"Revoke","refreshSuccess":"List of API keys has been refreshed.","revokeSuccess":"The key has been revoked successfully.","newKeyTitle":"New API Key","newKeySuccess":"API key created successfully.","newKeyNameError":"Name is missing or invalid.","newKeyGroupError":"You must select a group.","newKeyGuestGroupError":"The guests group cannot be used for API keys.","newKeyNameHint":"Purpose of this key","newKeyName":"Name","newKeyExpiration":"Expiration","newKeyExpirationHint":"You can still revoke a key anytime regardless of the expiration.","newKeyPermissionScopes":"Permission Scopes","newKeyFullAccess":"Full Access","newKeyGroupPermissions":"or use group permissions...","newKeyGroup":"Group","newKeyGroupHint":"The API key will have the same permissions as the selected group.","expiration30d":"30 days","expiration90d":"90 days","expiration180d":"180 days","expiration1y":"1 year","expiration3y":"3 years","newKeyCopyWarn":"Copy the key shown below as {{bold}}","newKeyCopyWarnBold":"it will NOT be shown again","toggleStateEnabledSuccess":"API has been enabled successfully.","toggleStateDisabledSuccess":"API has been disabled successfully."},"system":{"title":"System Info","subtitle":"Information about your system","hostInfo":"Host Information","currentVersion":"Current Version","latestVersion":"Latest Version","published":"Published","os":"Operating System","hostname":"Hostname","cpuCores":"CPU Cores","totalRAM":"Total RAM","workingDirectory":"Working Directory","configFile":"Configuration File","ramUsage":"RAM Usage: {{used}} / {{total}}","dbPartialSupport":"Your database version is not fully supported. Some functionality may be limited or not work as expected.","refreshSuccess":"System Info has been refreshed."},"utilities":{"title":"Utilities","subtitle":"Maintenance and miscellaneous tools","tools":"Tools","authTitle":"Authentication","authSubtitle":"Various tools for authentication / users","cacheTitle":"Flush Cache","cacheSubtitle":"Flush cache of various components","graphEndpointTitle":"GraphQL Endpoint","graphEndpointSubtitle":"Change the GraphQL endpoint for Wiki.js","importv1Title":"Import from Wiki.js 1.x","importv1Subtitle":"Migrate data from a previous 1.x installation","telemetryTitle":"Telemetry","telemetrySubtitle":"Enable/Disable telemetry or reset the client ID","contentTitle":"Content","contentSubtitle":"Various tools for pages"},"dev":{"title":"Developer Tools","flags":{"title":"Flags"},"graphiql":{"title":"GraphiQL"},"voyager":{"title":"Voyager"}},"contribute":{"title":"Contribute to Wiki.js","subtitle":"Help support Wiki.js development and operations","fundOurWork":"Fund our work","spreadTheWord":"Spread the word","talkToFriends":"Talk to your friends and colleagues about how awesome Wiki.js is!","followUsOnTwitter":"Follow us on {{0}}.","submitAnIdea":"Submit an idea or vote on a proposed one on the {{0}}.","submitAnIdeaLink":"feature requests board","foundABug":"Found a bug? Submit an issue on {{0}}.","helpTranslate":"Help translate Wiki.js in your language. Let us know on {{0}}.","makeADonation":"Make a donation","contribute":"Contribute","openCollective":"Wiki.js is also part of the Open Collective initiative, a transparent fund that goes toward community resources. You can contribute financially by making a monthly or one-time donation:","needYourHelp":"We need your help to keep improving the software and run the various associated services (e.g. hosting and networking).","openSource":"Wiki.js is a free and open-source software brought to you with {{0}} by {{1}} and {{2}}.","openSourceContributors":"contributors","tshirts":"You can also buy Wiki.js t-shirts to support the project financially:","shop":"Wiki.js Shop","becomeAPatron":"Become a Patron","patreon":"Become a backer or sponsor via Patreon (goes directly into supporting lead developer Nicolas Giard's goal of working full-time on Wiki.js)","paypal":"Make a one-time or recurring donation via Paypal:","ethereum":"We accept donations using Ethereum:","github":"Become a sponsor via GitHub Sponsors (goes directly into supporting lead developer Nicolas Giard's goal of working full-time on Wiki.js)","becomeASponsor":"Become a Sponsor"},"nav":{"site":"Site","users":"Users","modules":"Modules","system":"System"},"pages":{"title":"Pages"},"navigation":{"title":"Navigation","subtitle":"Manage the site navigation","link":"Link","divider":"Divider","header":"Header","label":"Label","icon":"Icon","targetType":"Target Type","target":"Target","noSelectionText":"Select a navigation item on the left.","untitled":"Untitled {{kind}}","navType":{"external":"External Link","home":"Home","page":"Page","searchQuery":"Search Query","externalblank":"External Link (New Window)"},"edit":"Edit {{kind}}","delete":"Delete {{kind}}","saveSuccess":"Navigation saved successfully.","noItemsText":"Click the Add button to add your first navigation item.","emptyList":"Navigation is empty","visibilityMode":{"all":"Visible to everyone","restricted":"Visible to select groups..."},"selectPageButton":"Select Page...","mode":"Navigation Mode","modeSiteTree":{"title":"Site Tree","description":"Classic Tree-based Navigation"},"modeCustom":{"title":"Custom Navigation","description":"Static Navigation Menu + Site Tree Button"},"modeNone":{"title":"None","description":"Disable Site Navigation"},"copyFromLocale":"Copy from locale...","sourceLocale":"Source Locale","sourceLocaleHint":"The locale from which navigation items will be copied from.","copyFromLocaleInfoText":"Select the locale from which items will be copied from. Items will be appended to the current list of items in the active locale.","modeStatic":{"title":"Static Navigation","description":"Static Navigation Menu Only"}},"mail":{"title":"Mail","subtitle":"Configure mail settings","configuration":"Configuration","dkim":"DKIM (optional)","test":"Send a test email","testRecipient":"Recipient Email Address","testSend":"Send Email","sender":"Sender","senderName":"Sender Name","senderEmail":"Sender Email","smtp":"SMTP Settings","smtpHost":"Host","smtpPort":"Port","smtpPortHint":"Usually 465 (recommended), 587 or 25.","smtpTLS":"Secure (TLS)","smtpTLSHint":"Should be enabled when using port 465, otherwise turned off (587 or 25).","smtpUser":"Username","smtpPwd":"Password","dkimHint":"DKIM (DomainKeys Identified Mail) provides a layer of security on all emails sent from Wiki.js by providing the means for recipients to validate the domain name and ensure the message authenticity.","dkimUse":"Use DKIM","dkimDomainName":"Domain Name","dkimKeySelector":"Key Selector","dkimPrivateKey":"Private Key","dkimPrivateKeyHint":"Private key for the selector in PEM format","testHint":"Send a test email to ensure your SMTP configuration is working.","saveSuccess":"Configuration saved successfully.","sendTestSuccess":"A test email was sent successfully.","smtpVerifySSL":"Verify SSL Certificate","smtpVerifySSLHint":"Some hosts requires SSL certificate checking to be disabled. Leave enabled for proper security."},"webhooks":{"title":"Webhooks","subtitle":"Manage webhooks to external services"},"adminArea":"Administration Area","analytics":{"title":"Analytics","subtitle":"Add analytics and tracking tools to your wiki","providers":"Providers","providerConfiguration":"Provider Configuration","providerNoConfiguration":"This provider has no configuration options you can modify.","refreshSuccess":"List of providers refreshed successfully.","saveSuccess":"Analytics configuration saved successfully"},"comments":{"title":"Comments","provider":"Provider","subtitle":"Add discussions to your wiki pages","providerConfig":"Provider Configuration","providerNoConfig":"This provider has no configuration options you can modify."},"tags":{"title":"Tags","subtitle":"Manage page tags","emptyList":"No tags to display.","edit":"Edit Tag","tag":"Tag","label":"Label","date":"Created {{created}} and last updated {{updated}}.","delete":"Delete this tag","noSelectionText":"Select a tag from the list on the left.","noItemsText":"Add a tag to a page to get started.","refreshSuccess":"Tags have been refreshed.","deleteSuccess":"Tag deleted successfully.","saveSuccess":"Tag has been saved successfully.","filter":"Filter...","viewLinkedPages":"View Linked Pages","deleteConfirm":"Delete Tag?","deleteConfirmText":"Are you sure you want to delete tag {{tag}}? The tag will also be unlinked from all pages."},"ssl":{"title":"SSL","subtitle":"Manage SSL configuration","provider":"Provider","providerHint":"Select Custom Certificate if you have your own certificate already.","domain":"Domain","domainHint":"Enter the fully qualified domain pointing to your wiki. (e.g. wiki.example.com)","providerOptions":"Provider Options","providerDisabled":"Disabled","providerLetsEncrypt":"Let's Encrypt","providerCustomCertificate":"Custom Certificate","ports":"Ports","httpPort":"HTTP Port","httpPortHint":"Non-SSL port the server will listen to for HTTP requests. Usually 80 or 3000.","httpsPort":"HTTPS Port","httpsPortHint":"SSL port the server will listen to for HTTPS requests. Usually 443.","httpPortRedirect":"Redirect HTTP requests to HTTPS","httpPortRedirectHint":"Will automatically redirect any requests on the HTTP port to HTTPS.","writableConfigFileWarning":"Note that your config file must be writable in order to persist ports configuration.","renewCertificate":"Renew Certificate","status":"Certificate Status","expiration":"Certificate Expiration","subscriberEmail":"Subscriber Email","currentState":"Current State","httpPortRedirectTurnOn":"Turn On","httpPortRedirectTurnOff":"Turn Off","renewCertificateLoadingTitle":"Renewing Certificate...","renewCertificateLoadingSubtitle":"Do not leave this page.","renewCertificateSuccess":"Certificate renewed successfully.","httpPortRedirectSaveSuccess":"HTTP Redirection changed successfully."},"security":{"title":"Security","maxUploadSize":"Max Upload Size","maxUploadBatch":"Max Files per Upload","maxUploadBatchHint":"How many files can be uploaded in a single batch?","maxUploadSizeHint":"The maximum size for a single file.","maxUploadSizeSuffix":"bytes","maxUploadBatchSuffix":"files","uploads":"Uploads","uploadsInfo":"These settings only affect Wiki.js. If you're using a reverse-proxy (e.g. nginx, apache, Cloudflare), you must also change its settings to match.","subtitle":"Configure security settings","login":"Login","loginScreen":"Login Screen","jwt":"JWT Configuration","bypassLogin":"Bypass Login Screen","bypassLoginHint":"Should the user be redirected automatically to the first authentication provider.","loginBgUrl":"Login Background Image URL","loginBgUrlHint":"Specify an image to use as the login background. PNG and JPG are supported, 1920x1080 recommended. Leave empty for default. Click the button on the right to upload a new image. Note that the Guests group must have read-access to the selected image!","hideLocalLogin":"Hide Local Authentication Provider","hideLocalLoginHint":"Don't show the local authentication provider on the login screen. Add ?all to the URL to temporarily use it.","loginSecurity":"Security","enforce2fa":"Enforce 2FA","enforce2faHint":"Force all users to use Two-Factor Authentication when using an authentication provider with a user / password form."},"extensions":{"title":"Extensions","subtitle":"Install extensions for extra functionality"}},"editor":{"page":"Page","save":{"processing":"Rendering","pleaseWait":"Please wait...","createSuccess":"Page created successfully.","error":"An error occurred while creating the page","updateSuccess":"Page updated successfully.","saved":"Saved"},"props":{"pageProperties":"Page Properties","pageInfo":"Page Info","title":"Title","shortDescription":"Short Description","shortDescriptionHint":"Shown below the title","pathCategorization":"Path & Categorization","locale":"Locale","path":"Path","pathHint":"Do not include any leading or trailing slashes.","tags":"Tags","tagsHint":"Use tags to categorize your pages and make them easier to find.","publishState":"Publishing State","publishToggle":"Published","publishToggleHint":"Unpublished pages can still be seen by users having write permissions on this page.","publishStart":"Publish starting on...","publishStartHint":"Leave empty for no start date","publishEnd":"Publish ending on...","publishEndHint":"Leave empty for no end date","info":"Info","scheduling":"Scheduling","social":"Social","categorization":"Categorization","socialFeatures":"Social Features","allowComments":"Allow Comments","allowCommentsHint":"Enable commenting abilities on this page.","allowRatings":"Allow Ratings","displayAuthor":"Display Author Info","displaySharingBar":"Display Sharing Toolbar","displaySharingBarHint":"Show a toolbar with buttons to share and print this page","displayAuthorHint":"Show the page author along with the last edition time.","allowRatingsHint":"Enable rating capabilities on this page.","scripts":"Scripts","css":"CSS","cssHint":"CSS will automatically be minified upon saving. Do not include surrounding style tags, only the actual CSS code.","styles":"Styles","html":"HTML","htmlHint":"You must surround your javascript code with HTML script tags."},"unsaved":{"title":"Discard Unsaved Changes?","body":"You have unsaved changes. Are you sure you want to leave the editor and discard any modifications you made since the last save?"},"select":{"title":"Which editor do you want to use for this page?","cannotChange":"This cannot be changed once the page is created.","customView":"or create a custom view?"},"assets":{"title":"Assets","newFolder":"New Folder","folderName":"Folder Name","folderNameNamingRules":"Must follow the asset folder {{namingRules}}.","folderNameNamingRulesLink":"naming rules","folderEmpty":"This asset folder is empty.","fileCount":"{{count}} files","headerId":"ID","headerFilename":"Filename","headerType":"Type","headerFileSize":"File Size","headerAdded":"Added","headerActions":"Actions","uploadAssets":"Upload Assets","uploadAssetsDropZone":"Browse or Drop files here...","fetchImage":"Fetch Remote Image","imageAlign":"Image Alignment","renameAsset":"Rename Asset","renameAssetSubtitle":"Enter the new name for this asset:","deleteAsset":"Delete Asset","deleteAssetConfirm":"Are you sure you want to delete asset","deleteAssetWarn":"This action cannot be undone!","refreshSuccess":"List of assets refreshed successfully.","uploadFailed":"File upload failed.","folderCreateSuccess":"Asset folder created successfully.","renameSuccess":"Asset renamed successfully.","deleteSuccess":"Asset deleted successfully.","noUploadError":"You must choose a file to upload first!"},"backToEditor":"Back to Editor","markup":{"bold":"Bold","italic":"Italic","strikethrough":"Strikethrough","heading":"Heading {{level}}","subscript":"Subscript","superscript":"Superscript","blockquote":"Blockquote","blockquoteInfo":"Info Blockquote","blockquoteSuccess":"Success Blockquote","blockquoteWarning":"Warning Blockquote","blockquoteError":"Error Blockquote","unorderedList":"Unordered List","orderedList":"Ordered List","inlineCode":"Inline Code","keyboardKey":"Keyboard Key","horizontalBar":"Horizontal Bar","togglePreviewPane":"Hide / Show Preview Pane","insertLink":"Insert Link","insertAssets":"Insert Assets","insertBlock":"Insert Block","insertCodeBlock":"Insert Code Block","insertVideoAudio":"Insert Video / Audio","insertDiagram":"Insert Diagram","insertMathExpression":"Insert Math Expression","tableHelper":"Table Helper","distractionFreeMode":"Distraction Free Mode","markdownFormattingHelp":"Markdown Formatting Help","noSelectionError":"Text must be selected first!","toggleSpellcheck":"Toggle Spellcheck"},"ckeditor":{"stats":"{{chars}} chars, {{words}} words"},"conflict":{"title":"Resolve Save Conflict","useLocal":"Use Local","useRemote":"Use Remote","useRemoteHint":"Discard local changes and use latest version","useLocalHint":"Use content in the left panel","viewLatestVersion":"View Latest Version","infoGeneric":"A more recent version of this page was saved by {{authorName}}, {{date}}","whatToDo":"What do you want to do?","whatToDoLocal":"Use your current local version and ignore the latest changes.","whatToDoRemote":"Use the remote version (latest) and discard your changes.","overwrite":{"title":"Overwrite with Remote Version?","description":"Are you sure you want to replace your current version with the latest remote content? {{refEditsLost}}","editsLost":"Your current edits will be lost."},"localVersion":"Local Version {{refEditable}}","editable":"(editable)","readonly":"(read-only)","remoteVersion":"Remote Version {{refReadOnly}}","leftPanelInfo":"Your current edit, based on page version from {{date}}","rightPanelInfo":"Last edited by {{authorName}}, {{date}}","pageTitle":"Title:","pageDescription":"Description:","warning":"Save conflict! Another user has already modified this page."},"unsavedWarning":"You have unsaved edits. Are you sure you want to leave the editor?"},"tags":{"currentSelection":"Current Selection","clearSelection":"Clear Selection","selectOneMoreTags":"Select one or more tags","searchWithinResultsPlaceholder":"Search within results...","locale":"Locale","orderBy":"Order By","selectOneMoreTagsHint":"Select one or more tags on the left.","retrievingResultsLoading":"Retrieving page results...","noResults":"Couldn't find any page with the selected tags.","noResultsWithFilter":"Couldn't find any page matching the current filtering options.","pageLastUpdated":"Last Updated {{date}}","orderByField":{"creationDate":"Creation Date","ID":"ID","lastModified":"Last Modified","path":"Path","title":"Title"},"localeAny":"Any"},"history":{"restore":{"confirmTitle":"Restore page version?","confirmText":"Are you sure you want to restore this page content as it was on {{date}}? This version will be copied on top of the current history. As such, newer versions will still be preserved.","confirmButton":"Restore","success":"Page version restored succesfully!"}},"profile":{"displayName":"Display Name","location":"Location","jobTitle":"Job Title","timezone":"Timezone","title":"Profile","subtitle":"My personal info","myInfo":"My Info","viewPublicProfile":"View Public Profile","auth":{"title":"Authentication","provider":"Provider","changePassword":"Change Password","currentPassword":"Current Password","newPassword":"New Password","verifyPassword":"Confirm New Password","changePassSuccess":"Password changed successfully."},"groups":{"title":"Groups"},"activity":{"title":"Activity","joinedOn":"Joined on","lastUpdatedOn":"Profile last updated on","lastLoginOn":"Last login on","pagesCreated":"Pages created","commentsPosted":"Comments posted"},"save":{"success":"Profile saved successfully."},"pages":{"title":"Pages","subtitle":"List of pages I created or last modified","emptyList":"No pages to display.","refreshSuccess":"Page list has been refreshed.","headerTitle":"Title","headerPath":"Path","headerCreatedAt":"Created","headerUpdatedAt":"Last Updated"},"comments":{"title":"Comments"},"preferences":"Preferences","dateFormat":"Date Format","localeDefault":"Locale Default","appearance":"Appearance","appearanceDefault":"Site Default","appearanceLight":"Light","appearanceDark":"Dark"}}	f	English	English	100	2020-07-29T05:58:12.535Z	2020-09-10T05:35:55.547Z
\.


--
-- Data for Name: loggers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.loggers (key, "isEnabled", level, config) FROM stdin;
airbrake	f	warn	{}
bugsnag	f	warn	{"key":""}
disk	f	info	{}
eventlog	f	warn	{}
loggly	f	warn	{"token":"","subdomain":""}
logstash	f	warn	{}
newrelic	f	warn	{}
papertrail	f	warn	{"host":"","port":0}
raygun	f	warn	{}
rollbar	f	warn	{"key":""}
sentry	f	warn	{"key":""}
syslog	f	warn	{}
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.migrations (id, name, batch, migration_time) FROM stdin;
1	2.0.0.js	1	2020-07-29 05:55:55.183+00
2	2.1.85.js	1	2020-07-29 05:55:55.188+00
3	2.2.3.js	1	2020-07-29 05:55:55.198+00
4	2.2.17.js	1	2020-07-29 05:55:55.201+00
5	2.3.10.js	1	2020-07-29 05:55:55.204+00
6	2.3.23.js	1	2020-07-29 05:55:55.209+00
7	2.4.13.js	1	2020-07-29 05:55:55.213+00
8	2.4.14.js	1	2020-07-29 05:55:55.219+00
9	2.4.36.js	1	2020-07-29 05:55:55.222+00
10	2.4.61.js	1	2020-07-29 05:55:55.226+00
11	2.5.1.js	2	2020-09-10 05:32:21.455+00
12	2.5.12.js	2	2020-09-10 05:32:21.458+00
13	2.5.108.js	2	2020-09-10 05:32:21.459+00
14	2.5.118.js	2	2020-09-10 05:32:21.461+00
15	2.5.122.js	2	2020-09-10 05:32:21.469+00
\.


--
-- Data for Name: migrations_lock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.migrations_lock (index, is_locked) FROM stdin;
1	0
\.


--
-- Data for Name: navigation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.navigation (key, config) FROM stdin;
site	[{"locale":"en","items":[{"id":"4a7363ed-268e-4edd-a39d-3b5cea938227","kind":"link","label":"Home","icon":"mdi-home","targetType":"home","target":"/","visibilityMode":"all","visibilityGroups":null}]}]
\.


--
-- Data for Name: pageHistory; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pageHistory" (id, path, hash, title, description, "isPrivate", "isPublished", "publishStartDate", "publishEndDate", action, "pageId", content, "contentType", "createdAt", "editorKey", "localeCode", "authorId", "versionDate", extra) FROM stdin;
1	algorithms/graph/topological-sorting	1136af3abd10e9f0cde56323c8745ce6229db6e5	Topological Sorting		f	t			updated	1	<p>q</p>\n	html	2020-07-29T14:14:37.205Z	ckeditor	en	1	2020-07-29T06:21:14.368Z	{}
2	algorithms/graph/topological-sorting	1136af3abd10e9f0cde56323c8745ce6229db6e5	Topological Sorting		f	t			deleted	1	<p>A&nbsp;<a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a>&nbsp;(DAG) is not only necessary but also sufficient&nbsp;for topological sorting to be possible.</p>\n<h2>DFS</h2>\n<p>Perform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a DAG, and topological sorting of its vertices is impossible.</p>\n<h2>BFS</h2>\n<p>Repeatedly, identify in a remaining digraph a <i><strong>source</strong></i>, which is a vertex with no <strong>incoming</strong> edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.</p>\n<p>&nbsp;</p>\n	html	2020-07-29T14:15:01.533Z	ckeditor	en	1	2020-07-29T14:14:39.050Z	{}
3	algorithms/graph/topological-sorting	1136af3abd10e9f0cde56323c8745ce6229db6e5	Topological Sort		f	t			moved	3	A topological sort is an ordering of nodes for a directed acyclic graph (DAG) such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering.\n\n> A directed acyclic graph (DAG) is not only necessary but also sufficient for topological sorting to be possible.\n> {.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T14:22:26.204Z	markdown	en	1	2020-07-29T14:22:00.096Z	{}
4	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a directed acyclic graph (DAG) such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering.\n\n> A directed acyclic graph (DAG) is not only necessary but also sufficient for topological sorting to be possible.\n> {.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T14:27:22.524Z	markdown	en	1	2020-07-29T14:22:26.209Z	{}
5	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge *uv* from vertex *u* to vertex *v*, *u* comes before *v* in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T14:36:58.617Z	markdown	en	1	2020-07-29T14:27:24.627Z	{}
6	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge *uv* from vertex *u* to vertex *v*, *u* comes before *v* in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T14:37:52.657Z	markdown	en	1	2020-07-29T14:37:00.778Z	{}
19	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $p_{0}$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $p_{0}$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the rightturn (or orientation test). Here we can prove that: for three points $\\left ( p_{x}, p_{y} \\right ), \\left ( q_{x}, q_{y} \\right ), \\left ( r_{x}, r_{y} \\right ) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\n![jarvis_march.png](/jarvis_march.png)\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.	markdown	2020-08-01T10:13:51.758Z	markdown	en	1	2020-08-01T10:12:41.824Z	{}
20	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $p_{0}$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $p_{0}$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the rightturn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\n![jarvis_march.png](/jarvis_march.png)\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.	markdown	2020-08-01T10:33:20.792Z	markdown	en	1	2020-08-01T10:13:55.359Z	{}
21	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $p_{0}$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $p_{0}$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the rightturn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\n![jarvis_march.png](/jarvis_march.png)\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\nA Java implementation of Jarvis March can be found [here](https://www.geeksforgeeks.org/convex-hull-set-1-jarviss-algorithm-or-wrapping/).\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\nA C++ implementation of Graham Scan can be found [here](https://www.geeksforgeeks.org/convex-hull-set-2-graham-scan/).\n\nAn animation of Graham Scan can be found [here](http://www.algomation.com/player?algorithm=5958ccbb362cb20400f5ecc4).\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.	markdown	2020-08-01T15:42:04.608Z	markdown	en	1	2020-08-01T10:33:24.895Z	{}
7	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge *uv* from vertex *u* to vertex *v*, *u* comes before *v* in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T14:53:08.789Z	markdown	en	1	2020-07-29T14:37:54.686Z	{}
8	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge $(u, v)$ from vertex $u$ to vertex $v$, $u$ comes before $v$ in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a dag, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly, identify in a remaining digraph a source, which is a vertex with no incoming edges, and delete it along with all the edges outgoing from it. (If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved.) The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T15:00:33.010Z	markdown	en	1	2020-07-29T14:53:10.914Z	{}
9	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t			updated	3	A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge $(u, v)$ from vertex $u$ to vertex $v$, $u$ comes before $v$ in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a DAG, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly find a vertex in the remaining digraph with no incoming edges, and delete it along with all the edges outgoing from it. If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved. The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	markdown	2020-07-29T15:00:58.106Z	markdown	en	1	2020-07-29T15:00:35.169Z	{}
10	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$lin(P) := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $lin(P)$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$aff(P) := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $aff(P)$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{vector subspace} & \\text{simplex}\n\\end{array}$$\n	markdown	2020-07-30T09:27:06.710Z	markdown	en	1	2020-07-30T09:13:51.178Z	{}
11	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$lin(P) := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $lin(P)$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$aff(P) := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $aff(P)$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{vector subspace} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$conv(P) = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $conv(P)$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a convex polytope. Each $p \\in P$ for which $p \\notin conv(P \\setminus \\left \\{ p \\right \\})$ is called a vertex of conv(P). A vertex of conv(P) is also called an extreme point of P. A convex polytope in $\\mathbb{R}^{2}$ is called a convex polygon.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-30T09:35:42.236Z	markdown	en	1	2020-07-30T09:27:10.072Z	{}
12	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $lin(P)$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $aff(P)$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{vector subspace} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $conv(P)$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a convex polytope. Each $p \\in P$ for which $p \\notin conv(P \\setminus \\left \\{ p \\right \\})$ is called a vertex of conv(P). A vertex of conv(P) is also called an extreme point of P. A convex polytope in $\\mathbb{R}^{2}$ is called a convex polygon.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-30T09:37:30.653Z	markdown	en	1	2020-07-30T09:35:45.830Z	{}
13	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{vector subspace} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a convex polytope. Each $p \\in P$ for which $p \\notin conv(P \\setminus \\left \\{ p \\right \\})$ is called a vertex of conv(P). A vertex of conv(P) is also called an extreme point of P. A convex polytope in $\\mathbb{R}^{2}$ is called a convex polygon.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-30T09:39:57.716Z	markdown	en	1	2020-07-30T09:37:33.965Z	{}
14	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a convex polytope. Each $p \\in P$ for which $p \\notin conv(P \\setminus \\left \\{ p \\right \\})$ is called a vertex of conv(P). A vertex of conv(P) is also called an extreme point of P. A convex polytope in $\\mathbb{R}^{2}$ is called a convex polygon.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-30T09:46:34.609Z	markdown	en	1	2020-07-30T09:40:01.243Z	{}
15	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-30T09:51:02.437Z	markdown	en	1	2020-07-30T09:46:37.936Z	{}
16	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms	markdown	2020-07-31T05:46:00.147Z	markdown	en	1	2020-07-30T09:51:05.871Z	{}
17	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $p_{0}$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $p_{0}$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the rightturn (or orientation test). Here we can prove that: for three points $\\left ( p_{x}, p_{y} \\right ), \\left ( q_{x}, q_{y} \\right ), \\left ( r_{x}, r_{y} \\right ) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $\\left ( r_{x}, r_{y} \\right )$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\n![](https://upload.wikimedia.org/wikipedia/commons/e/e7/Jarvis_algorithm.svg)	markdown	2020-07-31T05:54:29.555Z	markdown	en	1	2020-07-31T05:46:03.816Z	{}
18	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $p_{0}$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $p_{0}$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the rightturn (or orientation test). Here we can prove that: for three points $\\left ( p_{x}, p_{y} \\right ), \\left ( q_{x}, q_{y} \\right ), \\left ( r_{x}, r_{y} \\right ) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $\\left ( r_{x}, r_{y} \\right )$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\n![](https://upload.wikimedia.org/wikipedia/commons/e/e7/Jarvis_algorithm.svg)	markdown	2020-08-01T10:12:38.200Z	markdown	en	1	2020-07-31T05:54:33.003Z	{}
22	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x₀, y₀), (x₁, y₁), (x₂, y₂), ... , (x<sub>subscript</sub>an, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 1 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\nA C++ implementation of Graham Scan can be found [here](https://www.geeksforgeeks.org/convex-hull-set-2-graham-scan/).\n\nAn animation of Graham Scan can be found [here](http://www.algomation.com/player?algorithm=5958ccbb362cb20400f5ecc4).\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.	markdown	2020-08-01T15:45:41.820Z	markdown	en	1	2020-08-01T15:42:08.675Z	{}
23	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\nJarvisMarch(P[(x₀, y₀), (x₁, y₁), (x₂, y₂), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\nA C++ implementation of Graham Scan can be found [here](https://www.geeksforgeeks.org/convex-hull-set-2-graham-scan/).\n\nAn animation of Graham Scan can be found [here](http://www.algomation.com/player?algorithm=5958ccbb362cb20400f5ecc4).\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.	markdown	2020-08-01T15:54:12.670Z	markdown	en	1	2020-08-01T15:45:45.674Z	{}
24	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\nA C++ implementation of Graham Scan can be found [here](https://www.geeksforgeeks.org/convex-hull-set-2-graham-scan/).\n\nAn animation of Graham Scan can be found [here](http://www.algomation.com/player?algorithm=5958ccbb362cb20400f5ecc4).\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.	markdown	2020-08-03T04:58:38.186Z	markdown	en	1	2020-08-01T15:54:16.934Z	{}
29	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### Incremental Algorithm — O(nlogn)\n\nChoose three random points which are not colinear as the initial convex hull [latex]S[/latex]. Find the leftmost point [latex]L[/latex] in [latex]S[/latex] and the rightmost point [latex]R[/latex] in [latex]S[/latex], [latex]\\vec{LR}[/latex] separates [latex]S[/latex] into two hulls: the upper hull and the lower hull.\n\nHere we use two balanced binary search trees(say [latex]T_{u}[/latex] and [latex]T_{l} [/latex]) to represent the upper hull and the lower hull. The internal nodes store the x-coordinate of the point and the point itself, as follows:\n\nThe incremental algorithm consists of two operations: locate(q) and insert(q):\n\nlocate(q) determines if [latex]q[/latex] lies inside, outside or on [latex]S[/latex]. To perform locate(q), we search for point [latex]q[/latex] in [latex]T_{u}[/latex] and [latex]T_{l}[/latex] to find edge or vertex on the upper/lower hull whose horizontal span includes [latex]q[/latex]. Here are four cases:\n\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].	markdown	2020-08-05T06:03:21.765Z	markdown	en	1	2020-08-04T09:15:46.132Z	{}
25	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\nAn animation of Graham Scan can be found [here](http://www.algomation.com/player?algorithm=5958ccbb362cb20400f5ecc4).\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.	markdown	2020-08-03T05:41:59.821Z	markdown	en	1	2020-08-03T04:58:42.096Z	{}
26	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.	markdown	2020-08-03T05:46:17.303Z	markdown	en	1	2020-08-03T05:42:03.837Z	{}
27	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set [latex]S[/latex] can be divided into two sets [latex]L[/latex] and [latex]R[/latex]: [latex]L[/latex] containing the leftmost [latex]\\left \\lceil n/2 \\right \\rceil[/latex] points and [latex]R[/latex] containing the rightmost [latex]\\left \\lfloor n/2 \\right \\rfloor[/latex] points. Compute the convex hulls of the subsets [latex]L[/latex] and [latex]R[/latex] recursively, say [latex]CH(L)[/latex] and [latex]CH(R)[/latex]. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\n	markdown	2020-08-04T08:36:55.236Z	markdown	en	1	2020-08-03T05:46:21.548Z	{}
28	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.	markdown	2020-08-04T09:15:41.661Z	markdown	en	1	2020-08-04T08:36:59.993Z	{}
30	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### Incremental Algorithm — O(nlogn)\n\nChoose three random points which are not colinear as the initial convex hull $S$. Find the leftmost point $L$ in $S$ and the rightmost point $R$ in $S$, $\\vec{LR}$ separates $S$ into two hulls: the upper hull and the lower hull.\n\nHere we use two balanced binary search trees(say [latex]T_{u}[/latex] and [latex]T_{l} [/latex]) to represent the upper hull and the lower hull. The internal nodes store the x-coordinate of the point and the point itself, as follows:\n\nThe incremental algorithm consists of two operations: locate(q) and insert(q):\n\nlocate(q) determines if [latex]q[/latex] lies inside, outside or on [latex]S[/latex]. To perform locate(q), we search for point [latex]q[/latex] in [latex]T_{u}[/latex] and [latex]T_{l}[/latex] to find edge or vertex on the upper/lower hull whose horizontal span includes [latex]q[/latex]. Here are four cases:\n\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].	markdown	2020-08-05T06:24:57.454Z	markdown	en	1	2020-08-05T06:03:26.248Z	{}
31	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {p0, p1}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], pi) do\n        S.pop()\n    end\n    S.push(pi)\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### Incremental Algorithm — O(nlogn)\n\nChoose three random points which are not colinear as the initial convex hull $S$. Find the leftmost point $L$ in $S$ and the rightmost point $R$ in $S$, $\\vec{LR}$ separates $S$ into two hulls: the upper hull and the lower hull.\n\nHere we use two balanced binary search trees(say $T_{u}$ and $T_{l}$) to represent the upper hull and the lower hull. The internal nodes store the x-coordinate of the point and the point itself, as follows:\n\nThe incremental algorithm consists of two operations: locate(q) and insert(q):\n\nlocate(q) determines if $q$ lies inside, outside or on $S$. To perform locate(q), we search for point $q$ in $T_{u}$ and $T_{l}$ to find edge or vertex on the upper/lower hull whose horizontal span includes $q$. Here are four cases:\n\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T07:17:52.714Z	markdown	en	1	2020-08-05T06:25:03.288Z	{}
32	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and not CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and not CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### Incremental Algorithm — O(nlogn)\n\nChoose three random points which are not colinear as the initial convex hull $S$. Find the leftmost point $L$ in $S$ and the rightmost point $R$ in $S$, $\\vec{LR}$ separates $S$ into two hulls: the upper hull and the lower hull.\n\nHere we use two balanced binary search trees(say $T_{u}$ and $T_{l}$) to represent the upper hull and the lower hull. The internal nodes store the x-coordinate of the point and the point itself, as follows:\n\nThe incremental algorithm consists of two operations: locate(q) and insert(q):\n\nlocate(q) determines if $q$ lies inside, outside or on $S$. To perform locate(q), we search for point $q$ in $T_{u}$ and $T_{l}$ to find edge or vertex on the upper/lower hull whose horizontal span includes $q$. Here are four cases:\n\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T07:24:12.717Z	markdown	en	1	2020-08-05T07:17:57.353Z	{}
33	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and not CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and not CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### Incremental Algorithm — O(nlogn)\n\nChoose three random points which are not colinear as the initial convex hull $S$. Find the leftmost point $L$ in $S$ and the rightmost point $R$ in $S$, $\\vec{LR}$ separates $S$ into two hulls: the upper hull and the lower hull.\n\nHere we use two balanced binary search trees(say $T_{u}$ and $T_{l}$) to represent the upper hull and the lower hull. The internal nodes store the x-coordinate of the point and the point itself, as follows:\n\nThe incremental algorithm consists of two operations: locate(q) and insert(q):\n\nlocate(q) determines if $q$ lies inside, outside or on $S$. To perform locate(q), we search for point $q$ in $T_{u}$ and $T_{l}$ to find edge or vertex on the upper/lower hull whose horizontal span includes $q$. Here are four cases:\n\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T09:40:01.829Z	markdown	en	1	2020-08-05T07:24:17.578Z	{}
34	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and not CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and not CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike [Monotone Chain](), our algorithm begins by sorting the points by their x-coordinates.\n\n### Divide and Conquer — O(nlogn)\n\nLike Monotone Chain, we need to sort the points lexicographically, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:09:45.687Z	markdown	en	1	2020-08-05T09:40:06.316Z	{}
35	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) constructs a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:11:43.358Z	markdown	en	1	2020-08-05T10:09:50.148Z	{}
36	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:25:24.508Z	markdown	en	1	2020-08-05T10:11:47.827Z	{}
37	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n<iframe allowfullscreen src="http://www.algomation.com/embeddedplayer?embedded=true&algorithm=5958cce8362cb20400f5ecc6" width="900" height="556" seamless="seamless" frameborder="0" style="border:1px solid lightgray" scrolling="no"></iframe>\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:26:06.328Z	markdown	en	1	2020-08-05T10:25:29.301Z	{}
38	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet [latex]S[/latex] be a set of [latex]n > 1[/latex] points [latex]p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )[/latex] in the Cartesian plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point [latex]p_{1}[/latex] and the rightmost point [latex]p_{n}[/latex] are two distinct extreme points of the set’s convex hull.\n\nLet [latex]\\vec{p_{1}p_{n}}[/latex] be the straight line through points [latex]p_{1}[/latex] and [latex]p_{n}[/latex] directed from [latex]p_{1}[/latex] to [latex]p_{n}[/latex]. This line separates the points of [latex]S[/latex] into two parts: the left part [latex]S_{1}[/latex] and the right part [latex]S_{2}[/latex], while the points of [latex]S[/latex] on the line [latex]\\vec{p_{1}p_{n}}[/latex] other than [latex]p_{1}[/latex] and [latex]p_{n}[/latex] cannot be extreme points of the convex hull.\n\nIf [latex]S_{1}[/latex] is empty, the upper hull is simply the line segment with the endpoints at [latex]p_{1}[/latex] and [latex]p_{n}[/latex]. For points in [latex]S_{1}[/latex] which is not empty, we can find a point [latex]p_{max}[/latex] which is the furthest from line [latex]\\vec{p_{1}p_{n}}[/latex], and if there is a tie, select the point that maximizes the angle [latex]\\angle p_{max}p_{1}p_{n}[/latex]. Then the algorithm identifies all the points of set [latex]S_{1}[/latex] that are to the left of the line [latex]\\vec{p_{1}p_{max}}[/latex] as [latex]S_{1,1}[/latex], and the points of [latex]S_{1}[/latex] to the left of the line [latex]\\vec{p_{max}p_{n}}[/latex] will make up the set [latex]S_{1,2}[/latex]. We can prove that:\n\n- [latex]p_{max}[/latex] is a vertex of the upper hull.\n- The points inside [latex]\\bigtriangleup p_{1}p_{max}p_{n}[/latex] cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines [latex]\\vec{p_{1}p_{max}}[/latex] and [latex]\\vec{p_{max}p_{n}}[/latex].\n\nTherefore, the algorithm can continue constructing the upper hulls of [latex]p_{1} \\cup S_{1,1} \\cup p_{max}[/latex] and [latex]p_{max} \\cup S_{1,2} \\cup p_{n}[/latex] recursively and then simply concatenate them to get the upper hull of the entire set [latex]p_{1} \\cup S_{1} \\cup p_{n}[/latex].\n\n<iframe allowfullscreen src="http://www.algomation.com/embeddedplayer?embedded=true&algorithm=5958cce8362cb20400f5ecc6" width="900" height="556" seamless="seamless" frameborder="0" style="border:1px solid lightgray" scrolling="no"></iframe>\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:35:45.093Z	markdown	en	1	2020-08-05T10:26:11.070Z	{}
39	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\vec{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\vec{pq}$, $\\vec{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\vec{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\vec{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\vec{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\vec{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\vec{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\vec{p_{1}p_{max}}$ and $\\vec{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T10:47:35.824Z	markdown	en	1	2020-08-05T10:35:50.193Z	{}
40	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    U.push(P[i])\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T12:09:41.761Z	markdown	en	1	2020-08-05T10:47:40.974Z	{}
41	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - O(nh)\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — O(nlogn)\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — O(nlogn)\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — O(nlogn)\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — O(nlogn)\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### Kirkpatrick–Seidel algorithm - O(nlogh)\n\n### Chan's Algorithm - O(nlogh)\n\n	markdown	2020-08-05T14:28:28.419Z	markdown	en	1	2020-08-05T12:09:46.871Z	{}
42	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - $O(n \\cdot h)$\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — $O(n \\cdot \\log n)$\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — $O(n \\cdot \\log n)$\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — $O(n \\cdot \\log n)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### Kirkpatrick–Seidel algorithm - $O(n \\cdot \\log h)$\n\n### Chan's Algorithm - $O(n \\cdot \\log h)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/48/ChanAlgDemo.gif)\n\nChan’s algorithm starts by shattering the input points into $\\dfrac{n}{h}$ arbitrary subsets, each of size $h$, and computing the convex hull of each subset using (say) Graham’s scan. This much of the algorithm requires $O(\\dfrac{n}{h} \\cdot h \\cdot \\log h) = O(n \\cdot \\log h)$ time.\n\nOnce we have the $\\dfrac{n}{h}$ subhulls, we follow the general outline of Jarvis march, wrapping a string around the $\\dfrac{n}{h}$ subhulls. Starting with $p = \\ell$, where $\\ell$ is the leftmost input point, we successively find the convex hull vertex the follows $p$ and counterclockwise order until we return back to $\\ell$ again.\n\nThe vertex that follows $p$ is the point that appears to be furthest to the right to someone standing at $p$. This means that the successor of $p$ must lie on a right tangent line between $p$ and one of the subhulls–a line from $p$ through a vertex of the subhull, such that the subhull lies completely on the right side of the line from $p$’s point of view. We can find the right tangent line between $p$ and any subhull in $O(\\log h)$ time using a variant of binary search. Since there are $\\dfrac{n}{h}$ subhulls, finding the successor of $p$ takes $O(\\dfrac{n}{h} \\cdot \\log h)$ time altogether.\n\nSince there are $h$ convex hull edges, and we ﬁnd each edge in $O(\\dfrac{n}{h} \\cdot \\log h)$ time, the overall running time of the algorithm is $O(n \\cdot \\log h)$.\n	markdown	2020-08-05T14:42:03.035Z	markdown	en	1	2020-08-05T14:28:33.691Z	{}
43	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\n![convex_hull_rubber_band.png](/convex_hull_rubber_band.png)\n\nIntuitively, the convex hull of a set of n points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - $O(n \\cdot h)$\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — $O(n \\cdot \\log n)$\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — $O(n \\cdot \\log n)$\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — $O(n \\cdot \\log n)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### [Chan's Algorithm](https://en.wikipedia.org/wiki/Chan%27s_algorithm) - $O(n \\cdot \\log h)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/48/ChanAlgDemo.gif)\n\nChan’s algorithm starts by shattering the input points into $\\dfrac{n}{h}$ arbitrary subsets, each of size $h$, and computing the convex hull of each subset using (say) Graham’s scan. This much of the algorithm requires $O(\\dfrac{n}{h} \\cdot h \\cdot \\log h) = O(n \\cdot \\log h)$ time.\n\nOnce we have the $\\dfrac{n}{h}$ subhulls, we follow the general outline of Jarvis march, wrapping a string around the $\\dfrac{n}{h}$ subhulls. Starting with $p = \\ell$, where $\\ell$ is the leftmost input point, we successively find the convex hull vertex the follows $p$ and counterclockwise order until we return back to $\\ell$ again.\n\nThe vertex that follows $p$ is the point that appears to be furthest to the right to someone standing at $p$. This means that the successor of $p$ must lie on a right tangent line between $p$ and one of the subhulls–a line from $p$ through a vertex of the subhull, such that the subhull lies completely on the right side of the line from $p$’s point of view. We can find the right tangent line between $p$ and any subhull in $O(\\log h)$ time using a variant of binary search. Since there are $\\dfrac{n}{h}$ subhulls, finding the successor of $p$ takes $O(\\dfrac{n}{h} \\cdot \\log h)$ time altogether.\n\nSince there are $h$ convex hull edges, and we ﬁnd each edge in $O(\\dfrac{n}{h} \\cdot \\log h)$ time, the overall running time of the algorithm is $O(n \\cdot \\log h)$.\n	markdown	2020-08-05T14:49:19.682Z	markdown	en	1	2020-08-05T14:42:08.783Z	{}
44	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t			updated	4	![convex_hull.jpg](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{p q} \\subseteq P$, for any $p, q \\in P$.\n\n![convex_concave_polygons.jpg](/convex_concave_polygons.jpg)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of $n$ points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - $O(n \\cdot h)$\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — $O(n \\cdot \\log n)$\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — $O(n \\cdot \\log n)$\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — $O(n \\cdot \\log n)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### [Chan's Algorithm](https://en.wikipedia.org/wiki/Chan%27s_algorithm) - $O(n \\cdot \\log h)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/48/ChanAlgDemo.gif)\n\nChan’s algorithm starts by shattering the input points into $\\dfrac{n}{h}$ arbitrary subsets, each of size $h$, and computing the convex hull of each subset using (say) Graham’s scan. This much of the algorithm requires $O(\\dfrac{n}{h} \\cdot h \\cdot \\log h) = O(n \\cdot \\log h)$ time.\n\nOnce we have the $\\dfrac{n}{h}$ subhulls, we follow the general outline of Jarvis march, wrapping a string around the $\\dfrac{n}{h}$ subhulls. Starting with $p = \\ell$, where $\\ell$ is the leftmost input point, we successively find the convex hull vertex the follows $p$ and counterclockwise order until we return back to $\\ell$ again.\n\nThe vertex that follows $p$ is the point that appears to be furthest to the right to someone standing at $p$. This means that the successor of $p$ must lie on a right tangent line between $p$ and one of the subhulls–a line from $p$ through a vertex of the subhull, such that the subhull lies completely on the right side of the line from $p$’s point of view. We can find the right tangent line between $p$ and any subhull in $O(\\log h)$ time using a variant of binary search. Since there are $\\dfrac{n}{h}$ subhulls, finding the successor of $p$ takes $O(\\dfrac{n}{h} \\cdot \\log h)$ time altogether.\n\nSince there are $h$ convex hull edges, and we ﬁnd each edge in $O(\\dfrac{n}{h} \\cdot \\log h)$ time, the overall running time of the algorithm is $O(n \\cdot \\log h)$.\n	markdown	2020-08-05T15:22:51.037Z	markdown	en	1	2020-08-05T14:49:25.091Z	{}
45	algorithms/computational-geometry/lowest-common-ancestor	1fe4cd23af0d9640d57281faef20ac9d22d4072b	Lowest Common Ancestor		f	t			moved	5	# Header\nYour content here	markdown	2020-08-17T06:30:49.663Z	markdown	en	1	2020-08-17T06:30:10.771Z	{}
46	programming-language/golang/context	2874456a9d4927d998f159312062964a465fec76	Context		f	t			moved	6	# Header\nYour content here\n\n## Default Context\n\n## Cancel Context\n\n## \n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-09T02:51:36.890Z	markdown	en	1	2020-09-09T02:50:53.470Z	{}
47	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Header\nYour content here\n\n## Default Context\n\n## Cancel Context\n\n## \n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-09T05:31:04.051Z	markdown	en	1	2020-09-09T02:51:36.893Z	{}
48	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nSo our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\n## Cancel Context\n\n## WithValue Context\n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-09T06:44:31.266Z	markdown	en	1	2020-09-09T05:31:06.082Z	{}
49	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n\n## WithValue Context\n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-09T09:13:36.335Z	markdown	en	1	2020-09-09T06:44:33.181Z	{}
50	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n### WithCancel\n\n`WithCancel(parent Context) (ctx Context, cancel CancelFunc)` takes a parent `Context` and returns a cancelable `Context`(by invoking `CancelFunc`):\n\n```go\n// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &c)\n    return &c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### cancelCtx\n\n`newCancelCtx` returns an initialized `cancelCtx` by simply wrapping parent `Context`:\n\n```go\nfunc newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n```\n\n### propagateCancel\n\n`propagateCancel` arranges for child to be canceled when parent is canceld:\n\n1. Check if the parent’s `Done` returns `nil`, this means parent `context` can never be canceled(like `emptyCtx`), and the propagation should stop here.\n\n```go\ndone := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n```\n\n2. Check if the parent channel is closed. If so, we cancel the child using the `cancel` method.\n\n```go\nselect {\ncase <-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n```\n\n3. `parentCancelCtx` checks if parent `Context` has a valid `cancelCtx`:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n```\n\n4. If parent `Context` is already canceled, we shall cancel the left part of the context tree; or we simply add child `canceler` to parent `Context`'s `children` field:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n```\n\n5. If parent `Context` does not have a valid `cancelCtx`, we just spin up a goroutine that listens for either of the parent or child to close its `Done` channel. The count of goroutines is for testing memory leak.\n\n```go\nelse {\n    atomic.AddInt32(&goroutines, +1)\n    go func() {\n        select {\n        case <-parent.Done():\n            child.cancel(false, parent.Err())\n        case <-child.Done():\n        }\n    }()\n}\n```\n\n6. If the `removeChild` in `cancel` function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.\n\n```go\n// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n```\n\n## WithValue Context\n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-09T15:06:57.792Z	markdown	en	1	2020-09-09T09:13:38.406Z	{}
51	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n### WithCancel\n\n`WithCancel(parent Context) (ctx Context, cancel CancelFunc)` takes a parent `Context` and returns a cancelable `Context`(by invoking `CancelFunc`):\n\n```go\n// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &c)\n    return &c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### cancelCtx\n\n`newCancelCtx` returns an initialized `cancelCtx` by simply wrapping parent `Context`:\n\n```go\nfunc newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n```\n\n### propagateCancel\n\n`propagateCancel` arranges for child to be canceled when parent is canceld:\n\n1. Check if the parent’s `Done` returns `nil`, this means parent `context` can never be canceled(like `emptyCtx`), and the propagation should stop here.\n\n```go\ndone := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n```\n\n2. Check if the parent channel is closed. If so, we cancel the child using the `cancel` method.\n\n```go\nselect {\ncase <-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n```\n\n3. `parentCancelCtx` checks if parent `Context` has a valid `cancelCtx`:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n```\n\n4. If parent `Context` is already canceled, we shall cancel the left part of the context tree; or we simply add child `canceler` to parent `Context`'s `children` field:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n```\n\n5. If parent `Context` does not have a valid `cancelCtx`, we just spin up a goroutine that listens for either of the parent or child to close its `Done` channel. The count of goroutines is for testing memory leak.\n\n```go\nelse {\n    atomic.AddInt32(&goroutines, +1)\n    go func() {\n        select {\n        case <-parent.Done():\n            child.cancel(false, parent.Err())\n        case <-child.Done():\n        }\n    }()\n}\n```\n\n6. If the `removeChild` in `cancel` function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.\n\n```go\n// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println("Gracefully exit")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}\n```\n\n## WithValue Context\n\n\n# Patterns\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tvar a, b, c string\n\n\tgo func() {\n\t\ta, _ = getA(ctx)\n\t}()\n\n\tgo func() {\n\t\tb, _ = getB(ctx)\n\t}()\n\n\tgo func() {\n\t\tc, _ = getC(ctx)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf("err: %s\\n", ctx.Err())\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tif a != "" && b != "" && c != "" {\n\t\t\tfmt.Printf("a:%s, b:%s, c: %s", a, b, c)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc getA(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\treturn "A"\n\t})\n}\n\nfunc getB(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(800 * time.Millisecond)\n\t\treturn "B"\n\t})\n}\n\nfunc getC(ctx context.Context) (string, error) {\n\tctx, cancel := context.WithTimeout(ctx, time.Millisecond*580)\n\tdefer cancel()\n\n\treturn checkTO(ctx, func() string {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\treturn "C"\n\t})\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tdefault:\n\t}\n\n\tstr := make(chan string)\n\tgo func() {\n\t\tstr <- f()\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn "", ctx.Err()\n\tcase ret := <-str:\n\t\treturn ret, nil\n\t}\n}\n```	markdown	2020-09-10T04:58:24.173Z	markdown	en	1	2020-09-09T15:06:59.955Z	{}
52	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n### WithCancel\n\n`WithCancel(parent Context) (ctx Context, cancel CancelFunc)` takes a parent `Context` and returns a cancelable `Context`(by invoking `CancelFunc`):\n\n```go\n// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &c)\n    return &c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### cancelCtx\n\n`newCancelCtx` returns an initialized `cancelCtx` by simply wrapping parent `Context`:\n\n```go\nfunc newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n```\n\n### propagateCancel\n\n`propagateCancel` arranges for child to be canceled when parent is canceld:\n\n1. Check if the parent’s `Done` returns `nil`, this means parent `context` can never be canceled(like `emptyCtx`), and the propagation should stop here.\n\n```go\ndone := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n```\n\n2. Check if the parent channel is closed. If so, we cancel the child using the `cancel` method.\n\n```go\nselect {\ncase <-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n```\n\n3. `parentCancelCtx` checks if parent `Context` has a valid `cancelCtx`:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n```\n\n4. If parent `Context` is already canceled, we shall cancel the left part of the context tree; or we simply add child `canceler` to parent `Context`'s `children` field:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n```\n\n5. If parent `Context` does not have a valid `cancelCtx`, we just spin up a goroutine that listens for either of the parent or child to close its `Done` channel. The count of goroutines is for testing memory leak.\n\n```go\nelse {\n    atomic.AddInt32(&goroutines, +1)\n    go func() {\n        select {\n        case <-parent.Done():\n            child.cancel(false, parent.Err())\n        case <-child.Done():\n        }\n    }()\n}\n```\n\n6. If the `removeChild` in `cancel` function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.\n\n```go\n// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println("Gracefully exit")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}\n```\n\n## WithDeadline Context\n\n`WithDeadline(parent Context, d time.Time) (Context, CancelFunc)` is built on top of `cancelCtx` and a Timer.\n\n1. Panic if parent `Context` is not cancelable:\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    ......\n}\n```\n\n2. If the parent `Context` has a valid deadline and the parent `Context`'s deadline is before the derived `Context`'s deadline, the parent would expire first, `WithDeadline` could degrade to `WithCancel`:\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ......\n    if cur, ok := parent.Deadline(); ok && cur.Before(d) {\n        // The current deadline is already sooner than the new one.\n        return WithCancel(parent)\n    }\n    ......\n}\n```\n\n3. If the deadline is gone, we immediately cancel the context and return.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c := &timerCtx{\n        cancelCtx: newCancelCtx(parent),\n        deadline:  d,\n    }\n    propagateCancel(parent, c)\n    dur := time.Until(d)\n    if dur <= 0 {\n        c.cancel(true, DeadlineExceeded) // deadline has already passed\n        return c, func() { c.cancel(false, Canceled) }\n    }\n    ....\n}\n```\n\n4.  If there is a valid duration, we will cancel the current context after the given duration.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    if c.err == nil {\n        c.timer = time.AfterFunc(dur, func() {\n            c.cancel(true, DeadlineExceeded)\n        })\n    }\n    return c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### Example\n\n## WithTimeout Context\n\n`WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)` is simply a wrapper of `WithDeadline`:\n\n```go\n// WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete:\n//\n// \tfunc slowOperationWithTimeout(ctx context.Context) (Result, error) {\n// \t\tctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\n// \t\tdefer cancel()  // releases resources if slowOperation completes before timeout elapses\n// \t\treturn slowOperation(ctx)\n// \t}\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n    return WithDeadline(parent, time.Now().Add(timeout))\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n    defer cancel()\n\n    var a, b string\n\n    go func() { a, _ = getA(ctx) }()\n    go func() { b, _ = getB(ctx) }()\n\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf("err: %s\\n", ctx.Err())\n            return\n        default:\n        }\n\n        if a != "" && b != "" {\n            fmt.Printf("a:[%s], b:[%s]", a, b)\n            return\n        }\n    }\n}\n\nfunc getA(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(200 * time.Millisecond)\n        return "A"\n    })\n}\n\nfunc getB(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(800 * time.Millisecond)\n        return "B"\n    })\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    default:\n    }\n\n    str := make(chan string)\n    go func() { str <- f() }()\n\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    case ret := <-str:\n        return ret, nil\n    }\n}\n```\n\n## WithValue Context\n\n### Example\n	markdown	2020-09-10T05:03:01.395Z	markdown	en	1	2020-09-10T04:58:26.351Z	{}
53	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t			updated	6	# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n### WithCancel\n\n`WithCancel(parent Context) (ctx Context, cancel CancelFunc)` takes a parent `Context` and returns a cancelable `Context`(by invoking `CancelFunc`):\n\n```go\n// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &c)\n    return &c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### cancelCtx\n\n`newCancelCtx` returns an initialized `cancelCtx` by simply wrapping parent `Context`:\n\n```go\nfunc newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n```\n\n### propagateCancel\n\n`propagateCancel` arranges for child to be canceled when parent is canceld:\n\n1. Check if the parent’s `Done` returns `nil`, this means parent `context` can never be canceled(like `emptyCtx`), and the propagation should stop here.\n\n```go\ndone := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n```\n\n2. Check if the parent channel is closed. If so, we cancel the child using the `cancel` method.\n\n```go\nselect {\ncase <-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n```\n\n3. `parentCancelCtx` checks if parent `Context` has a valid `cancelCtx`:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n```\n\n4. If parent `Context` is already canceled, we shall cancel the left part of the context tree; or we simply add child `canceler` to parent `Context`'s `children` field:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n```\n\n5. If parent `Context` does not have a valid `cancelCtx`, we just spin up a goroutine that listens for either of the parent or child to close its `Done` channel. The count of goroutines is for testing memory leak.\n\n```go\nelse {\n    atomic.AddInt32(&goroutines, +1)\n    go func() {\n        select {\n        case <-parent.Done():\n            child.cancel(false, parent.Err())\n        case <-child.Done():\n        }\n    }()\n}\n```\n\n6. If the `removeChild` in `cancel` function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.\n\n```go\n// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println("Gracefully exit")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}\n```\n\n## WithDeadline Context\n\n`WithDeadline(parent Context, d time.Time) (Context, CancelFunc)` is built on top of `cancelCtx` and a Timer.\n\n1. Panic if parent `Context` is not cancelable:\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    ......\n}\n```\n\n2. If the parent `Context` has a valid deadline and the parent `Context`'s deadline is before the derived `Context`'s deadline, the parent would expire first, `WithDeadline` could degrade to `WithCancel`:\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ......\n    if cur, ok := parent.Deadline(); ok && cur.Before(d) {\n        // The current deadline is already sooner than the new one.\n        return WithCancel(parent)\n    }\n    ......\n}\n```\n\n3. If the deadline is gone, we immediately cancel the context and return.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c := &timerCtx{\n        cancelCtx: newCancelCtx(parent),\n        deadline:  d,\n    }\n    propagateCancel(parent, c)\n    dur := time.Until(d)\n    if dur <= 0 {\n        c.cancel(true, DeadlineExceeded) // deadline has already passed\n        return c, func() { c.cancel(false, Canceled) }\n    }\n    ....\n}\n```\n\n4.  If there is a valid duration, we will cancel the current context after the given duration.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    if c.err == nil {\n        c.timer = time.AfterFunc(dur, func() {\n            c.cancel(true, DeadlineExceeded)\n        })\n    }\n    return c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    d := time.Now().Add(5000 * time.Millisecond)\n    ctx, cancel := context.WithDeadline(context.Background(), d)\n    defer cancel()\n\n    select {\n    case <-time.After(1 * time.Second):\n        fmt.Println("overslept")\n    case <-ctx.Done():\n        fmt.Println(ctx.Err())\n    }\n}\n```\n\n## WithTimeout Context\n\n`WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)` is simply a wrapper of `WithDeadline`:\n\n```go\n// WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete:\n//\n// \tfunc slowOperationWithTimeout(ctx context.Context) (Result, error) {\n// \t\tctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\n// \t\tdefer cancel()  // releases resources if slowOperation completes before timeout elapses\n// \t\treturn slowOperation(ctx)\n// \t}\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n    return WithDeadline(parent, time.Now().Add(timeout))\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n    defer cancel()\n\n    var a, b string\n\n    go func() { a, _ = getA(ctx) }()\n    go func() { b, _ = getB(ctx) }()\n\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf("err: %s\\n", ctx.Err())\n            return\n        default:\n        }\n\n        if a != "" && b != "" {\n            fmt.Printf("a:[%s], b:[%s]", a, b)\n            return\n        }\n    }\n}\n\nfunc getA(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(200 * time.Millisecond)\n        return "A"\n    })\n}\n\nfunc getB(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(800 * time.Millisecond)\n        return "B"\n    })\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    default:\n    }\n\n    str := make(chan string)\n    go func() { str <- f() }()\n\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    case ret := <-str:\n        return ret, nil\n    }\n}\n```\n\n## WithValue Context\n\n### Example\n	markdown	2020-09-10T05:21:54.250Z	markdown	en	1	2020-09-10T05:03:03.561Z	{}
\.


--
-- Data for Name: pageHistoryTags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pageHistoryTags" (id, "pageId", "tagId") FROM stdin;
\.


--
-- Data for Name: pageLinks; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pageLinks" (id, path, "localeCode", "pageId") FROM stdin;
\.


--
-- Data for Name: pageTags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pageTags" (id, "pageId", "tagId") FROM stdin;
3	3	2
4	3	3
5	4	2
6	6	4
\.


--
-- Data for Name: pageTree; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pageTree" (id, path, depth, title, "isPrivate", "isFolder", "privateNS", parent, "pageId", "localeCode", ancestors) FROM stdin;
1	algorithms	1	algorithms	f	t	\N	\N	\N	en	[]
2	algorithms/computational-geometry	2	computational-geometry	f	t	\N	1	\N	en	[1]
3	algorithms/computational-geometry/convex-hull	3	Convex Hull	f	f	\N	2	4	en	[1,2]
4	algorithms/graph	2	graph	f	t	\N	1	\N	en	[1]
5	algorithms/graph/lowest-common-ancestor	3	Lowest Common Ancestor	f	f	\N	4	5	en	[1,4]
6	algorithms/graph/topological-sort	3	Topological Sort	f	f	\N	4	3	en	[1,4]
7	home	1	Home	f	f	\N	\N	2	en	[]
8	programming-language	1	programming-language	f	t	\N	\N	\N	en	[]
9	programming-language/golang	2	golang	f	t	\N	8	\N	en	[8]
10	programming-language/golang/runtime	3	runtime	f	t	\N	9	\N	en	[8,9]
11	programming-language/golang/runtime/context	4	Context	f	f	\N	10	6	en	[8,9,10]
\.


--
-- Data for Name: pages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.pages (id, path, hash, title, description, "isPrivate", "isPublished", "privateNS", "publishStartDate", "publishEndDate", content, render, toc, "contentType", "createdAt", "updatedAt", "editorKey", "localeCode", "authorId", "creatorId", extra) FROM stdin;
2	home	b29b5d2ce62e55412776ab98f05631e0aa96597b	Home		f	t	\N			<p>Home Page</p>\n	<p>Home Page</p><div>\n</div>	[]	html	2020-07-29T13:43:39.690Z	2020-07-29T13:43:41.655Z	ckeditor	en	1	1	{}
3	algorithms/graph/topological-sort	07882cf3641fabf6473092cf9d78fc5b26be440e	Topological Sort		f	t	\N			A topological sort is an ordering of nodes for a [directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (DAG) such that for every directed edge $(u, v)$ from vertex $u$ to vertex $v$, $u$ comes before $v$ in the ordering.\n\n![topological_sort.png](/topological_sort.png){.align-center}\n\n> DAG is not only necessary but also sufficient for topological sorting to be possible.\n{.is-info}\n\n# DFS\n\nPerform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a DAG, and topological sorting of its vertices is impossible.\n\n```\nL ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n```\n\n# BFS\n\nRepeatedly find a vertex in the remaining digraph with no incoming edges, and delete it along with all the edges outgoing from it. If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved. The order in which the vertices are deleted yields a solution to the topological sorting problem.\n\n```\nL ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n```	<p>A topological sort is an ordering of nodes for a <a class="is-external-link" href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a> (DAG) such that for every directed edge <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow>(u, v)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">v</span><span class="mclose">)</span></span></span></span> from vertex <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>u</mi></mrow>u</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">u</span></span></span></span> to vertex <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>v</mi></mrow>v</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">v</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>u</mi></mrow>u</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">u</span></span></span></span> comes before <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>v</mi></mrow>v</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">v</span></span></span></span> in the ordering.</p><div>\n</div><p><img class="align-center" alt="topological_sort.png" src="/topological_sort.png"></p><div>\n</div><blockquote class="is-info">\n<p>DAG is not only necessary but also sufficient for topological sorting to be possible.</p>\n</blockquote><div>\n</div><h1 class="toc-header" id="dfs"><a href="#dfs" class="toc-anchor">¶</a> DFS</h1><div>\n</div><p>Perform a DFS traversal and note the order in which vertices become dead-ends (i.e., popped off the traversal stack). Reversing this order yields a solution to the topological sorting problem, provided, of course, no back edge has been encountered during the traversal. If a back edge has been encountered, the digraph is not a DAG, and topological sorting of its vertices is impossible.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">L ← Empty list that will contain the sorted elements\nS ← Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error (graph has at least one cycle)\nelse\n    return L (a topologically sorted order)\n</code></pre><div>\n</div><h1 class="toc-header" id="bfs"><a href="#bfs" class="toc-anchor">¶</a> BFS</h1><div>\n</div><p>Repeatedly find a vertex in the remaining digraph with no incoming edges, and delete it along with all the edges outgoing from it. If there are several sources, break the tie arbitrarily. If there are none, stop because the problem cannot be solved. The order in which the vertices are deleted yields a solution to the topological sorting problem.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">L ← Empty list that will contain the sorted nodes\n\nwhile there are unmarked nodes do\n    select an unmarked node n\n    visit(n) \n \nfunction visit(node n)\n    if n has a permanent mark then return\n    if n has a temporary mark then stop (not a DAG)\n    mark n temporarily\n    for each node m with an edge from n to m do\n        visit(m)\n    mark n permanently\n    add n to head of L\n</code></pre><div>\n</div>	[{"title":"DFS","anchor":"#dfs","children":[]},{"title":"BFS","anchor":"#bfs","children":[]}]	markdown	2020-07-29T14:21:58.028Z	2020-07-29T15:01:00.238Z	markdown	en	1	1	{}
5	algorithms/graph/lowest-common-ancestor	e7bb84b4cf287df4c51ed0a4a2a7e9ce17438029	Lowest Common Ancestor		f	t	\N			# Header\nYour content here	<h1 class="toc-header" id="header"><a href="#header" class="toc-anchor">¶</a> Header</h1><div>\n</div><p>Your content here</p><div>\n</div>	[{"title":"Header","anchor":"#header","children":[]}]	markdown	2020-08-17T06:30:08.169Z	2020-08-17T06:30:49.666Z	markdown	en	1	1	{}
6	programming-language/golang/runtime/context	95f79e9c15681acc3af8a747428c7d50399e5a33	Context		f	t	\N			# Context\n\n> Package `context` defines the `Context` type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n```go\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() <-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n```\n\n## Context Tree\n\nWe can propagate a request's state by setting `context.Context` as the first argument of any function call getting invoked:\n\n```go\nfunc DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n```\n\nDeriving a context with `context.WithXXX()` creates a double linked list between the parent context and the deriving context:\n\n```go\ntype cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n```\n\nThe field `children` keeps track of all children created from the deriving context, while  field `Context` points to the parent context. So our functions now are capable of [ThreadLocal](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html), and all the goroutines sharing the same (or derived) `context.Context` can be signal-aware.\n\n![Context and goroutine tree](/programming-language/golang/runtime/context/context-and-goroutine-tree.png)\n\n## Default Context\n\nTwo default `Context`s lie in package `context`: `Background()` and `TODO()`:\n\n```go\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n```\n\n## Cancel Context\n\n### WithCancel\n\n`WithCancel(parent Context) (ctx Context, cancel CancelFunc)` takes a parent `Context` and returns a cancelable `Context`(by invoking `CancelFunc`):\n\n```go\n// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &c)\n    return &c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### cancelCtx\n\n`newCancelCtx` returns an initialized `cancelCtx` by simply wrapping parent `Context`:\n\n```go\nfunc newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n```\n\n### propagateCancel\n\n`propagateCancel` arranges for child to be canceled when parent is canceld:\n\n1. Check if the parent’s `Done` returns `nil`, this means parent `context` can never be canceled(like `emptyCtx`), and the propagation should stop here.\n\n```go\ndone := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n```\n\n2. Check if the parent channel is closed. If so, we cancel the child using the `cancel` method.\n\n```go\nselect {\ncase <-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n```\n\n3. `parentCancelCtx` checks if parent `Context` has a valid `cancelCtx`:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n```\n\n4. If parent `Context` is already canceled, we shall cancel the left part of the context tree; or we simply add child `canceler` to parent `Context`'s `children` field:\n\n```go\nif p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n```\n\n5. If parent `Context` does not have a valid `cancelCtx`, we just spin up a goroutine that listens for either of the parent or child to close its `Done` channel. The count of goroutines is for testing memory leak.\n\n```go\nelse {\n    atomic.AddInt32(&goroutines, +1)\n    go func() {\n        select {\n        case <-parent.Done():\n            child.cancel(false, parent.Err())\n        case <-child.Done():\n        }\n    }()\n}\n```\n\n6. If the `removeChild` in `cancel` function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.\n\n```go\n// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println("Gracefully exit")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}\n```\n\n## WithDeadline Context\n\n`WithDeadline(parent Context, d time.Time) (Context, CancelFunc)` is built on top of `cancelCtx` and a Timer.\n\n1. Panic if parent `Context` is not cancelable:\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    ......\n}\n```\n\n2. If the parent `Context` has a valid deadline and the parent `Context`'s deadline is before the derived `Context`'s deadline, the parent would expire first, `WithDeadline` could degrade to `WithCancel`:\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ......\n    if cur, ok := parent.Deadline(); ok && cur.Before(d) {\n        // The current deadline is already sooner than the new one.\n        return WithCancel(parent)\n    }\n    ......\n}\n```\n\n3. If the deadline is gone, we immediately cancel the context and return.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c := &timerCtx{\n        cancelCtx: newCancelCtx(parent),\n        deadline:  d,\n    }\n    propagateCancel(parent, c)\n    dur := time.Until(d)\n    if dur <= 0 {\n        c.cancel(true, DeadlineExceeded) // deadline has already passed\n        return c, func() { c.cancel(false, Canceled) }\n    }\n    ....\n}\n```\n\n4.  If there is a valid duration, we will cancel the current context after the given duration.\n\n```go\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    if c.err == nil {\n        c.timer = time.AfterFunc(dur, func() {\n            c.cancel(true, DeadlineExceeded)\n        })\n    }\n    return c, func() { c.cancel(true, Canceled) }\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    d := time.Now().Add(5000 * time.Millisecond)\n    ctx, cancel := context.WithDeadline(context.Background(), d)\n    defer cancel()\n\n    select {\n    case <-time.After(1 * time.Second):\n        fmt.Println("overslept")\n    case <-ctx.Done():\n        fmt.Println(ctx.Err())\n    }\n}\n```\n\n## WithTimeout Context\n\n`WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)` is simply a wrapper of `WithDeadline`:\n\n```go\n// WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete:\n//\n// \tfunc slowOperationWithTimeout(ctx context.Context) (Result, error) {\n// \t\tctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\n// \t\tdefer cancel()  // releases resources if slowOperation completes before timeout elapses\n// \t\treturn slowOperation(ctx)\n// \t}\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n    return WithDeadline(parent, time.Now().Add(timeout))\n}\n```\n\n### Example\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n    defer cancel()\n\n    var a, b string\n\n    go func() { a, _ = getA(ctx) }()\n    go func() { b, _ = getB(ctx) }()\n\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf("err: %s\\n", ctx.Err())\n            return\n        default:\n        }\n\n        if a != "" && b != "" {\n            fmt.Printf("a:[%s], b:[%s]", a, b)\n            return\n        }\n    }\n}\n\nfunc getA(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(200 * time.Millisecond)\n        return "A"\n    })\n}\n\nfunc getB(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(800 * time.Millisecond)\n        return "B"\n    })\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    default:\n    }\n\n    str := make(chan string)\n    go func() { str <- f() }()\n\n    select {\n    case <-ctx.Done():\n        return "", ctx.Err()\n    case ret := <-str:\n        return ret, nil\n    }\n}\n```\n\n## WithValue Context\n\n`WithValue(parent Context, key, val interface{}) Context` wraps parent `Context` with a new k-v pair:\n\n```go\n// WithValue returns a copy of parent in which the value associated with key is\n// val.\n//\n// Use context Values only for request-scoped data that transits processes and\n// APIs, not for passing optional parameters to functions.\n//\n// The provided key must be comparable and should not be of type\n// string or any other built-in type to avoid collisions between\n// packages using context. Users of WithValue should define their own\n// types for keys. To avoid allocating when assigning to an\n// interface{}, context keys often have concrete type\n// struct{}. Alternatively, exported context key variables' static\n// type should be a pointer or interface.\nfunc WithValue(parent Context, key, val interface{}) Context {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    if key == nil {\n        panic("nil key")\n    }\n    if !reflectlite.TypeOf(key).Comparable() {\n        panic("key is not comparable")\n    }\n    return &valueCtx{parent, key, val}\n}\n\n// A valueCtx carries a key-value pair. It implements Value for that key and\n// delegates all other calls to the embedded Context.\ntype valueCtx struct {\n    Context\n    key, val interface{}\n}\n```\n\nThis indicates that every time we fetch a value from `Context`, `Value()` has to travel the whole link list to find the specific key.\n\n```go\nfunc (c *valueCtx) Value(key interface{}) interface{} {\n\tif c.key == key {\n\t\treturn c.val\n\t}\n\treturn c.Context.Value(key)\n}\n```	<h1 class="toc-header" id="context"><a href="#context" class="toc-anchor">¶</a> Context</h1><div>\n</div><blockquote>\n<p>Package <code>context</code> defines the <code>Context</code> type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">type Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() &lt;-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\n</code></pre><div>\n</div><h2 class="toc-header" id="context-tree"><a href="#context-tree" class="toc-anchor">¶</a> Context Tree</h2><div>\n</div><p>We can propagate a request's state by setting <code>context.Context</code> as the first argument of any function call getting invoked:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func DoSomething(ctx context.Context, arg Arg) error {\n    // ... use ctx ...\n}\n</code></pre><div>\n</div><p>Deriving a context with <code>context.WithXXX()</code> creates a double linked list between the parent context and the deriving context:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">type cancelCtx struct {\n   Context\n\n   mu       sync.Mutex\n   done     chan struct{}\n   children map[canceler]struct{}\n   err      error\n}\n</code></pre><div>\n</div><p>The field <code>children</code> keeps track of all children created from the deriving context, while  field <code>Context</code> points to the parent context. So our functions now are capable of <a class="is-external-link" href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/ThreadLocal.html">ThreadLocal</a>, and all the goroutines sharing the same (or derived) <code>context.Context</code> can be signal-aware.</p><div>\n</div><p><img alt="Context and goroutine tree" src="/programming-language/golang/runtime/context/context-and-goroutine-tree.png"></p><div>\n</div><h2 class="toc-header" id="default-context"><a href="#default-context" class="toc-anchor">¶</a> Default Context</h2><div>\n</div><p>Two default <code>Context</code>s lie in package <code>context</code>: <code>Background()</code> and <code>TODO()</code>:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">var (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter).\nfunc TODO() Context {\n    return todo\n}\n</code></pre><div>\n</div><h2 class="toc-header" id="cancel-context"><a href="#cancel-context" class="toc-anchor">¶</a> Cancel Context</h2><div>\n</div><h3 class="toc-header" id="withcancel"><a href="#withcancel" class="toc-anchor">¶</a> WithCancel</h3><div>\n</div><p><code>WithCancel(parent Context) (ctx Context, cancel CancelFunc)</code> takes a parent <code>Context</code> and returns a cancelable <code>Context</code>(by invoking <code>CancelFunc</code>):</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">// A CancelFunc tells an operation to abandon its work.\n// A CancelFunc does not wait for the work to stop.\n// A CancelFunc may be called by multiple goroutines simultaneously.\n// After the first call, subsequent calls to a CancelFunc do nothing.\ntype CancelFunc func()\n\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    c := newCancelCtx(parent)\n    propagateCancel(parent, &amp;c)\n    return &amp;c, func() { c.cancel(true, Canceled) }\n}\n</code></pre><div>\n</div><h3 class="toc-header" id="cancelctx"><a href="#cancelctx" class="toc-anchor">¶</a> cancelCtx</h3><div>\n</div><p><code>newCancelCtx</code> returns an initialized <code>cancelCtx</code> by simply wrapping parent <code>Context</code>:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func newCancelCtx(parent Context) cancelCtx {\n    return cancelCtx{Context: parent}\n}\n\n// A cancelCtx can be canceled. When canceled, it also cancels any children\n// that implement canceler.\ntype cancelCtx struct {\n    Context\n\n    mu       sync.Mutex            // protects following fields\n    done     chan struct{}         // created lazily, closed by first cancel call\n    children map[canceler]struct{} // set to nil by the first cancel call\n    err      error                 // set to non-nil by the first cancel call\n}\n</code></pre><div>\n</div><h3 class="toc-header" id="propagatecancel"><a href="#propagatecancel" class="toc-anchor">¶</a> propagateCancel</h3><div>\n</div><p><code>propagateCancel</code> arranges for child to be canceled when parent is canceld:</p><div>\n</div><ol>\n<li>Check if the parent’s <code>Done</code> returns <code>nil</code>, this means parent <code>context</code> can never be canceled(like <code>emptyCtx</code>), and the propagation should stop here.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">done := parent.Done()\nif done == nil {\n    return // parent is never canceled\n}\n</code></pre><div>\n</div><ol start="2">\n<li>Check if the parent channel is closed. If so, we cancel the child using the <code>cancel</code> method.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">select {\ncase &lt;-done:\n    // parent is already canceled\n    child.cancel(false, parent.Err())\n    return\ndefault:\n}\n</code></pre><div>\n</div><ol start="3">\n<li><code>parentCancelCtx</code> checks if parent <code>Context</code> has a valid <code>cancelCtx</code>:</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">if p, ok := parentCancelCtx(parent); ok {\n    ...\n} else {\n    ...\n}\n\n// parentCancelCtx returns the underlying *cancelCtx for parent.\n// It does this by looking up parent.Value(&amp;cancelCtxKey) to find\n// the innermost enclosing *cancelCtx and then checking whether\n// parent.Done() matches that *cancelCtx. (If not, the *cancelCtx\n// has been wrapped in a custom implementation providing a\n// different done channel, in which case we should not bypass it.)\nfunc parentCancelCtx(parent Context) (*cancelCtx, bool) {\n    done := parent.Done()\n    if done == closedchan || done == nil {\n        return nil, false\n    }\n    p, ok := parent.Value(&amp;cancelCtxKey).(*cancelCtx)\n    if !ok {\n        return nil, false\n    }\n    p.mu.Lock()\n    ok = p.done == done\n    p.mu.Unlock()\n    if !ok {\n        return nil, false\n    }\n    return p, true\n}\n</code></pre><div>\n</div><ol start="4">\n<li>If parent <code>Context</code> is already canceled, we shall cancel the left part of the context tree; or we simply add child <code>canceler</code> to parent <code>Context</code>'s <code>children</code> field:</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">if p, ok := parentCancelCtx(parent); ok {\n    p.mu.Lock()\n    if p.err != nil {\n        // parent has already been canceled\n        child.cancel(false, p.err)\n    } else {\n        if p.children == nil {\n            p.children = make(map[canceler]struct{})\n        }\n        p.children[child] = struct{}{}\n    }\n    p.mu.Unlock()\n}\n</code></pre><div>\n</div><ol start="5">\n<li>If parent <code>Context</code> does not have a valid <code>cancelCtx</code>, we just spin up a goroutine that listens for either of the parent or child to close its <code>Done</code> channel. The count of goroutines is for testing memory leak.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">else {\n    atomic.AddInt32(&amp;goroutines, +1)\n    go func() {\n        select {\n        case &lt;-parent.Done():\n            child.cancel(false, parent.Err())\n        case &lt;-child.Done():\n        }\n    }()\n}\n</code></pre><div>\n</div><ol start="6">\n<li>If the <code>removeChild</code> in <code>cancel</code> function is not called, the parent context will always keep a link to the derived context, leading to possible memory leak.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">// cancel closes c.done, cancels each of c's children, and, if\n// removeFromParent is true, removes c from its parent's children.\nfunc (c *cancelCtx) cancel(removeFromParent bool, err error) {\n    if err == nil {\n        panic("context: internal error: missing cancel error")\n    }\n    c.mu.Lock()\n    if c.err != nil {\n        c.mu.Unlock()\n        return // already canceled\n    }\n    c.err = err\n    if c.done == nil {\n        c.done = closedchan\n    } else {\n        close(c.done)\n    }\n    for child := range c.children {\n        // NOTE: acquiring the child's lock while holding parent's lock.\n        child.cancel(false, err)\n    }\n    c.children = nil\n    c.mu.Unlock()\n\n    if removeFromParent {\n        removeChild(c.Context, c)\n    }\n}\n</code></pre><div>\n</div><h3 class="toc-header" id="example"><a href="#example" class="toc-anchor">¶</a> Example</h3><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cancelCtx, cancelFunc := context.WithCancel(ctx)\n    go task(cancelCtx)\n    time.Sleep(time.Second * 3)\n    cancelFunc()\n    time.Sleep(time.Second * 1)\n}\n\nfunc task(ctx context.Context) {\n    i := 1\n    for {\n        select {\n        case &lt;-ctx.Done():\n            fmt.Println("Gracefully exit")\n            fmt.Println(ctx.Err())\n            return\n        default:\n            fmt.Println(i)\n            time.Sleep(time.Second * 1)\n            i++\n        }\n    }\n}\n</code></pre><div>\n</div><h2 class="toc-header" id="withdeadline-context"><a href="#withdeadline-context" class="toc-anchor">¶</a> WithDeadline Context</h2><div>\n</div><p><code>WithDeadline(parent Context, d time.Time) (Context, CancelFunc)</code> is built on top of <code>cancelCtx</code> and a Timer.</p><div>\n</div><ol>\n<li>Panic if parent <code>Context</code> is not cancelable:</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    ......\n}\n</code></pre><div>\n</div><ol start="2">\n<li>If the parent <code>Context</code> has a valid deadline and the parent <code>Context</code>'s deadline is before the derived <code>Context</code>'s deadline, the parent would expire first, <code>WithDeadline</code> could degrade to <code>WithCancel</code>:</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ......\n    if cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(d) {\n        // The current deadline is already sooner than the new one.\n        return WithCancel(parent)\n    }\n    ......\n}\n</code></pre><div>\n</div><ol start="3">\n<li>If the deadline is gone, we immediately cancel the context and return.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c := &amp;timerCtx{\n        cancelCtx: newCancelCtx(parent),\n        deadline:  d,\n    }\n    propagateCancel(parent, c)\n    dur := time.Until(d)\n    if dur &lt;= 0 {\n        c.cancel(true, DeadlineExceeded) // deadline has already passed\n        return c, func() { c.cancel(false, Canceled) }\n    }\n    ....\n}\n</code></pre><div>\n</div><ol start="4">\n<li>If there is a valid duration, we will cancel the current context after the given duration.</li>\n</ol><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {\n    ....\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    if c.err == nil {\n        c.timer = time.AfterFunc(dur, func() {\n            c.cancel(true, DeadlineExceeded)\n        })\n    }\n    return c, func() { c.cancel(true, Canceled) }\n}\n</code></pre><div>\n</div><h3 class="toc-header" id="example-1"><a href="#example-1" class="toc-anchor">¶</a> Example</h3><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    d := time.Now().Add(5000 * time.Millisecond)\n    ctx, cancel := context.WithDeadline(context.Background(), d)\n    defer cancel()\n\n    select {\n    case &lt;-time.After(1 * time.Second):\n        fmt.Println("overslept")\n    case &lt;-ctx.Done():\n        fmt.Println(ctx.Err())\n    }\n}\n</code></pre><div>\n</div><h2 class="toc-header" id="withtimeout-context"><a href="#withtimeout-context" class="toc-anchor">¶</a> WithTimeout Context</h2><div>\n</div><p><code>WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</code> is simply a wrapper of <code>WithDeadline</code>:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">// WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete:\n//\n// \tfunc slowOperationWithTimeout(ctx context.Context) (Result, error) {\n// \t\tctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\n// \t\tdefer cancel()  // releases resources if slowOperation completes before timeout elapses\n// \t\treturn slowOperation(ctx)\n// \t}\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {\n    return WithDeadline(parent, time.Now().Add(timeout))\n}\n</code></pre><div>\n</div><h3 class="toc-header" id="example-2"><a href="#example-2" class="toc-anchor">¶</a> Example</h3><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n    defer cancel()\n\n    var a, b string\n\n    go func() { a, _ = getA(ctx) }()\n    go func() { b, _ = getB(ctx) }()\n\n    for {\n        select {\n        case &lt;-ctx.Done():\n            fmt.Printf("err: %s\\n", ctx.Err())\n            return\n        default:\n        }\n\n        if a != "" &amp;&amp; b != "" {\n            fmt.Printf("a:[%s], b:[%s]", a, b)\n            return\n        }\n    }\n}\n\nfunc getA(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*500)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(200 * time.Millisecond)\n        return "A"\n    })\n}\n\nfunc getB(ctx context.Context) (string, error) {\n    ctx, cancel := context.WithTimeout(ctx, time.Millisecond*400)\n    defer cancel()\n\n    return checkTO(ctx, func() string {\n        time.Sleep(800 * time.Millisecond)\n        return "B"\n    })\n}\n\nfunc checkTO(ctx context.Context, f func() string) (string, error) {\n    select {\n    case &lt;-ctx.Done():\n        return "", ctx.Err()\n    default:\n    }\n\n    str := make(chan string)\n    go func() { str &lt;- f() }()\n\n    select {\n    case &lt;-ctx.Done():\n        return "", ctx.Err()\n    case ret := &lt;-str:\n        return ret, nil\n    }\n}\n</code></pre><div>\n</div><h2 class="toc-header" id="withvalue-context"><a href="#withvalue-context" class="toc-anchor">¶</a> WithValue Context</h2><div>\n</div><p><code>WithValue(parent Context, key, val interface{}) Context</code> wraps parent <code>Context</code> with a new k-v pair:</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">// WithValue returns a copy of parent in which the value associated with key is\n// val.\n//\n// Use context Values only for request-scoped data that transits processes and\n// APIs, not for passing optional parameters to functions.\n//\n// The provided key must be comparable and should not be of type\n// string or any other built-in type to avoid collisions between\n// packages using context. Users of WithValue should define their own\n// types for keys. To avoid allocating when assigning to an\n// interface{}, context keys often have concrete type\n// struct{}. Alternatively, exported context key variables' static\n// type should be a pointer or interface.\nfunc WithValue(parent Context, key, val interface{}) Context {\n    if parent == nil {\n        panic("cannot create context from nil parent")\n    }\n    if key == nil {\n        panic("nil key")\n    }\n    if !reflectlite.TypeOf(key).Comparable() {\n        panic("key is not comparable")\n    }\n    return &amp;valueCtx{parent, key, val}\n}\n\n// A valueCtx carries a key-value pair. It implements Value for that key and\n// delegates all other calls to the embedded Context.\ntype valueCtx struct {\n    Context\n    key, val interface{}\n}\n</code></pre><div>\n</div><p>This indicates that every time we fetch a value from <code>Context</code>, <code>Value()</code> has to travel the whole link list to find the specific key.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-go">func (c *valueCtx) Value(key interface{}) interface{} {\n    if c.key == key {\n        return c.val\n    }\n    return c.Context.Value(key)\n}\n</code></pre><div>\n</div>	[{"title":"Context","anchor":"#context","children":[{"title":"Context Tree","anchor":"#context-tree","children":[]},{"title":"Default Context","anchor":"#default-context","children":[]},{"title":"Cancel Context","anchor":"#cancel-context","children":[{"title":"WithCancel","anchor":"#withcancel","children":[]},{"title":"cancelCtx","anchor":"#cancelctx","children":[]},{"title":"propagateCancel","anchor":"#propagatecancel","children":[]},{"title":"Example","anchor":"#example","children":[]}]},{"title":"WithDeadline Context","anchor":"#withdeadline-context","children":[{"title":"Example","anchor":"#example-1","children":[]}]},{"title":"WithTimeout Context","anchor":"#withtimeout-context","children":[{"title":"Example","anchor":"#example-2","children":[]}]},{"title":"WithValue Context","anchor":"#withvalue-context","children":[]}]}]	markdown	2020-09-09T02:50:51.145Z	2020-09-10T05:21:56.329Z	markdown	en	1	1	{}
4	algorithms/computational-geometry/convex-hull	0307c41cc047631572e97c459feeb3979b554735	Convex Hull		f	t	\N			![Convex Hull](/convex_hull.jpg)\n\nWe start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under [convex combinations](https://en.wikipedia.org/wiki/Convex_combination). More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.\n\n#### Definition 1\n\nA set $P \\subset \\mathbb{R^d}$ is **convex** if $\\overline{pq} \\subseteq P$, for any $p, q \\in P$.\n\n![Convex Concave Polygons](/convex_concave_polygons.png)\n\nThe left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:\n\n#### Observation 2\n\nFor any family $\\left ( P_{i} \\right )_{i \\in I}$ of convex sets, the intersection $\\cap _{i \\in I} P_{i}$ is convex.\n\n## Convexity\n\nConsider $P \\subseteq \\mathbb{R^d}$, [The linear hull](https://en.wikipedia.org/wiki/Linear_span)\n\n$$\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all [linear combinations](https://en.wikipedia.org/wiki/Linear_combination) of $P$ (smallest linear subspace containing $P$). For instance, if $P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}$ then $\\textbf{lin(P)}$ is the line through $p$ and the origin. Similarly, the [affine hull](https://en.wikipedia.org/wiki/Affine_hull)\n\n$$\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}$$\n\nis the set of all affine combinations of $P$ (smallest affine subspace containing $P$). For instance, if $P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}$ and $p \\neq q$ then $\\textbf{aff(P)}$ is the line through $p$ and $q$.\n\nBy restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:\n\n$$\\begin{array}{cc}\n   \\textbf{Type of Combination} & \\textbf{Restrictions on Coefficients} & \\textbf{Name of Set} & \\textbf{Model Space} \\\\\n   & & & & \\\\\n   \\text{linear combination} & \\text{none} & \\text{vector subspace} & \\mathbb{R}^{n} \\\\\n   \\text{affine combination} & \\sum a_{i} = 1 & \\text{affine subspace} & \\text{affine hyperplane} \\\\\n   \\text{conical combination} & a_{i} \\ge 0 & \\text{convex cone} & \\text{quadrant/octant} \\\\\n   \\text{convex combination} & \\sum a_{i} = 1 \\land a_{i} \\ge 0 & \\text{convex set} & \\text{simplex}\n\\end{array}$$\n\nConvexity can also be described in a very similar way algebraically:\n\n#### Proposition 3\n\nFor any $P \\subseteq \\mathbb{R}^{d}$ we have\n\n$$\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}$$\n\nWith **Proposition 3** and **Observation 2**, we can define convex hull as:\n\n#### Definition 4\n\nThe **convex hull** $\\textbf{conv(P)}$ of a set $P \\subseteq \\mathbb{R^d}$ is the intersection of all convex supersets of $P$.\n\nIn a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.\n\n#### Definition 5\n\nThe convex hull of a finite point set $P \\subset \\mathbb{R}^{d}$ forms a **convex polytope**. Each $p \\in P$ for which $p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}$ is called a **vertex** of $\\textbf{conv(P)}$. A vertex of $\\textbf{conv(P)}$ is also called an extreme point of $P$. A convex polytope in $\\mathbb{R}^{2}$ is called a **convex polygon**.\n\nEssentially, the following proposition shows that the term vertex above is well defined.\n\n#### Proposition 6\n\nA convex polytope in $\\mathbb{R}^{d}$ is the convex hull of its vertices.\n\nIntuitively, the convex hull of a set of $n$ points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:\n\n#### Definition 7\n\nThe **convex hull** of a set $S$ of points is the smallest convex set containing $S$.\n\n## Algorithms\n\nThe following algorithms construct the convex hull of a finite point set $P \\subseteq \\mathbb{R}^{2}$. Time complexity of each algorithm is stated in terms of the number of inputs points $n$ and the number of points on the hull $h$. Note that in the worst case $h$ may be as large as $n$.\n\n### [Jarvis march](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) - $O(n \\cdot h)$\n\n![jarvis_march.gif](https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif)\n\nFind a point $\\ell$ that is a vertex of $\\textbf{conv(P)}$ (e.g., the one with smallest x-coordinate). "Wrap" $P$ starting from $\\ell$, i.e., always find the next vertex of $\\textbf{conv(P)}$ as the one that is leftmost with respect to the direction given by the previous two vertices.\n\nBesides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that: for three points $(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}$, the sign of the determinant\n\n$$\\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix}$$\n\ndetermines if $r$ lies to the right, to the left or on the directed line $\\vec{pq}$ (point $r$ is to the left of the line $\\vec{pq}$ directed from point $p$ to point $q$ if $pqr$ forms a counterclockwise cycle). The sign of this expression is positive if and only if the point $(r_{x}, r_{y})$ is to the left of the line $\\vec{pq}$. Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.\n\nFor every output point the above algorithm spends $n$ right turn tests, which is $\\Rightarrow O(nh)$ in total. In the worst case we have $h = n$, that is, $O(n^{2})$ right turn tests.\n\nThe algorithm may have to cope with various degeneracies:\n\n- Several points have smallest x-coordinate $\\Rightarrow$ lexicographic order:\n\n$$(p_{x}, p_{y}) < (q_{x}, q_{y}) \\Leftrightarrow p_{x} < q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} < q_{y}$$\n\n- Three or more points collinear $\\Rightarrow$ choose the point that is farthest among those that are leftmost.\n\nJarvis March has a remarkable property that is called **output sensitivity**: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.\n\n```\nInput: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] < P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n```\n\n### [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan) — $O(n \\cdot \\log n)$\n\n![Graham Scan](https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif)\n\nThis algorithm for computing the convex hull of a set $P$ of $n$ points in the plane consists of the following three parts:\n\n1. Select a base point $p_{0} \\in P$, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.\n2. Sort the remaining points of $P$ (that is, $P \\setminus \\left \\{ p_{0} \\right \\}$) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point $p_{0}$. The result is a simple polygon.\n3. After pushing the anchor point $p_{0}$ onto the stack $S$, we scan through the points in counterclockwise order, maintaining at each step a stack $S$ containing a convex chain surrounding the points scanned so far. Each time we consider the new point $p_{i}$, we perform the following tereest: if $p_{i}$ forms a left turn with the last two points in the stack $S$, or if $S$ contains fewer than two points, then push $p_{i}$ onto the stack $S$; Otherwise, pop the last point from the stack $S$ and repeat the test for $p_{i}$.\n\nWhen we return to the base point $p_{0}$, at which point stack $S$ stores the vertices of the convex hull of $P$ in counterclockwise order.\n\n```\nInput: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| > 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n```\n\n### [Monotone Chain](https://algorithmist.com/wiki/Monotone_chain_convex_hull) — $O(n \\cdot \\log n)$\n\n![Monotone Chain](https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif)\n\nThis algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in $O(n)$ time.\n\nAn upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| >= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Incremental Algorithm — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set $S$, the convex hull is updated to include that new point.\n\nTo merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in $O(1)$ time.\n\n```\nInput: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| >= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| >= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n```\n\n### Divide and Conquer — $O(n \\cdot \\log n)$\n\nLike **Monotone Chain**, our algorithm begins by sorting the points by their x-coordinates, then the original set $S$ can be divided into two sets $L$ and $R$: $L$ containing the leftmost $\\left \\lceil n/2 \\right \\rceil$ points and $R$ containing the rightmost $\\left \\lfloor n/2 \\right \\rfloor$ points. Compute the convex hulls of the subsets $L$ and $R$ recursively, say $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.\n\nMerge $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ by computing the upper and lower tangents of $\\textbf{CH(L)}$ and $\\textbf{CH(R)}$ and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:\n\n$$\\left \\{ \\begin{vmatrix} p_{x} & p_{y} & 1 \\\\ q_{x} & q_{y} & 1 \\\\ r_{x} & r_{y} & 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}$$\n\nLet $p$ to be the rightmost point of $\\textbf{CH(L)}$ and $q$ to be the leftmost point of $\\textbf{CH(R)}$, we now move point $p$ and $q$ as follows:\n\n1. As long as there is a point in $\\textbf{CH(L)}$ lies to the right of $\\overrightarrow{pq}$, move $p$ to the next clockwise point of $\\textbf{CH(L)}$;\n\n2. As long as there is a point in $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, move $q$ to the next counterclockwise point of $\\textbf{CH(R)}$;\n\n3. Repeat (1) and (2) until there isn't any point in $\\textbf{CH(L)}$ or $\\textbf{CH(R)}$ lies to the right of $\\overrightarrow{pq}$, $\\overrightarrow{pq}$ is the lower tangent.\n\n### [Quick Hull](https://en.wikipedia.org/wiki/Quickhull) — $O(n \\cdot \\log n)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif)\n\nLet $S$ be a set of $n > 1$ points $p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )$ in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point $p_{1}$ and the rightmost point $p_{n}$ are two distinct extreme points of the set’s convex hull.\n\nLet $\\overrightarrow{p_{1}p_{n}}$ be the straight line through points $p_{1}$ and $p_{n}$ directed from $p_{1}$ to $p_{n}$. This line separates the points of $S$ into two parts: the left part $S_{1}$ and the right part $S_{2}$, while the points of $S$ on the line $\\overrightarrow{p_{1}p_{n}}$ other than $p_{1}$ and $p_{n}$ cannot be extreme points of the convex hull.\n\nIf $S_{1}$ is empty, the upper hull is simply the line segment with the endpoints at $p_{1}$ and $p_{n}$. For points in $S_{1}$ which is not empty, we can find a point $p_{max}$ which is the furthest from line $\\overrightarrow{p_{1}p_{n}}$, and if there is a tie, select the point that maximizes the angle $\\angle p_{max}p_{1}p_{n}$. Then the algorithm identifies all the points of set $S_{1}$ that are to the left of the line $\\overrightarrow{p_{1}p_{max}}$ as $S_{1,1}$, and the points of $S_{1}$ to the left of the line $\\overrightarrow{p_{max}p_{n}}$ will make up the set $S_{1,2}$. We can prove that:\n\n- $p_{max}$ is a vertex of the upper hull.\n- The points inside $\\bigtriangleup p_{1}p_{max}p_{n}$ cannot be vertices of the upper hull (and hence can be eliminated).\n- There are no points to the left of both lines $\\overrightarrow{p_{1}p_{max}}$ and $\\overrightarrow{p_{max}p_{n}}$.\n\nTherefore, the algorithm can continue constructing the upper hulls of $p_{1} \\cup S_{1,1} \\cup p_{max}$ and $p_{max} \\cup S_{1,2} \\cup p_{n}$ recursively and then simply concatenate them to get the upper hull of the entire set $p_{1} \\cup S_{1} \\cup p_{n}$.\n\n### [Chan's Algorithm](https://en.wikipedia.org/wiki/Chan%27s_algorithm) - $O(n \\cdot \\log h)$\n\n![](https://upload.wikimedia.org/wikipedia/commons/4/48/ChanAlgDemo.gif)\n\nChan’s algorithm starts by shattering the input points into $\\dfrac{n}{h}$ arbitrary subsets, each of size $h$, and computing the convex hull of each subset using (say) Graham’s scan. This much of the algorithm requires $O(\\dfrac{n}{h} \\cdot h \\cdot \\log h) = O(n \\cdot \\log h)$ time.\n\nOnce we have the $\\dfrac{n}{h}$ subhulls, we follow the general outline of Jarvis march, wrapping a string around the $\\dfrac{n}{h}$ subhulls. Starting with $p = \\ell$, where $\\ell$ is the leftmost input point, we successively find the convex hull vertex the follows $p$ and counterclockwise order until we return back to $\\ell$ again.\n\nThe vertex that follows $p$ is the point that appears to be furthest to the right to someone standing at $p$. This means that the successor of $p$ must lie on a right tangent line between $p$ and one of the subhulls–a line from $p$ through a vertex of the subhull, such that the subhull lies completely on the right side of the line from $p$’s point of view. We can find the right tangent line between $p$ and any subhull in $O(\\log h)$ time using a variant of binary search. Since there are $\\dfrac{n}{h}$ subhulls, finding the successor of $p$ takes $O(\\dfrac{n}{h} \\cdot \\log h)$ time altogether.\n\nSince there are $h$ convex hull edges, and we ﬁnd each edge in $O(\\dfrac{n}{h} \\cdot \\log h)$ time, the overall running time of the algorithm is $O(n \\cdot \\log h)$.\n	<p><img alt="Convex Hull" src="/convex_hull.jpg"></p><div>\n</div><p>We start with the definition of a convex set: in convex geometry, a convex set is a subset of an affine space that is closed under <a class="is-external-link" href="https://en.wikipedia.org/wiki/Convex_combination">convex combinations</a>. More specifically, in Euclidean spaces, a convex region is a region where, for every pair of points within the region, every point on the straight line segment that joins the pair of points is also within the region.</p><div>\n</div><h4 class="toc-header" id="definition-1"><a href="#definition-1" class="toc-anchor">¶</a> Definition 1</h4><div>\n</div><p>A set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊂</mo><msup><mi mathvariant="double-struck">R</mi><mi mathvariant="double-struck">d</mi></msup></mrow>P \\subset \\mathbb{R^d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.72243em;vertical-align:-0.0391em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊂</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> is <strong>convex</strong> if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">‾</mo></mover><mo>⊆</mo><mi>P</mi></mrow>\\overline{pq} \\subseteq P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8304100000000001em;vertical-align:-0.19444em;" class="strut"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.63056em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3.55056em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="overline-line"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊆</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>, for any <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo>∈</mo><mi>P</mi></mrow>p, q \\in P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.7335400000000001em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>.</p><div>\n</div><p><img alt="Convex Concave Polygons" src="/convex_concave_polygons.png"></p><div>\n</div><p>The left polygon is convex, and so are a straight line, a triangle, a rectangle, and more generally, any convex polygon, a circle, and the entire plane. On the other hand, the right polygon is not convex because there are some pairs of points for which the connecting line segment is not completely contained within the polygon. An immediate consequence of the definition follows:</p><div>\n</div><h4 class="toc-header" id="observation-2"><a href="#observation-2" class="toc-anchor">¶</a> Observation 2</h4><div>\n</div><p>For any family <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mrow><mo fence="true">(</mo><msub><mi>P</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></mrow>\\left ( P_{i} \\right )_{i \\in I}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.07707em;vertical-align:-0.32706999999999997em;" class="strut"></span><span class="minner"><span class="minner"><span style="top:0em;" class="mopen delimcenter">(</span><span class="mord"><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="top:0em;" class="mclose delimcenter">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.17863099999999998em;" class="vlist"><span style="top:-2.4003em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">∈</span><span style="margin-right:0.07847em;" class="mord mathdefault mtight">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.32706999999999997em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> of convex sets, the intersection <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mo>∩</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><msub><mi>P</mi><mi>i</mi></msub></mrow>\\cap _{i \\in I} P_{i}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8607em;vertical-align:-0.17737em;" class="strut"></span><span class="mord"><span class="mbin">∩</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.32833099999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">∈</span><span style="margin-right:0.07847em;" class="mord mathdefault mtight">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.17737em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> is convex.</p><div>\n</div><h2 class="toc-header" id="convexity"><a href="#convexity" class="toc-anchor">¶</a> Convexity</h2><div>\n</div><p>Consider <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊆</mo><msup><mi mathvariant="double-struck">R</mi><mi mathvariant="double-struck">d</mi></msup></mrow>P \\subseteq \\mathbb{R^d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8193em;vertical-align:-0.13597em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊆</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>,&nbsp;<a class="is-external-link" href="https://en.wikipedia.org/wiki/Linear_span">The linear hull</a></p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">lin(P)</mtext><mo>:</mo><mo>=</mo><mrow><mo fence="true">{</mo><mi>q</mi><mo>∣</mo><mi>q</mi><mo>=</mo><mo>∑</mo><msub><mi>λ</mi><mi>i</mi></msub><msub><mi>p</mi><mi>i</mi></msub><mo>∧</mo><mi mathvariant="normal">∀</mi><mi>i</mi><mo>:</mo><msub><mi>p</mi><mi>i</mi></msub><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>λ</mi><mi>i</mi></msub><mo>∈</mo><mi mathvariant="double-struck">R</mi><mo fence="true">}</mo></mrow></mrow>\\textbf{lin(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">lin(P)</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">:</span></span><span class="base"><span style="height:0.36687em;vertical-align:0em;" class="strut"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1.80002em;vertical-align:-0.65002em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing size2">{</span></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∣</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="position:relative;top:-0.000004999999999977245em;" class="mop op-symbol large-op">∑</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord">∀</span><span class="mord mathdefault">i</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">:</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathbb">R</span></span><span style="top:0em;" class="mclose delimcenter"><span class="delimsizing size2">}</span></span></span></span></span></span></span></p><p>is the set of all <a class="is-external-link" href="https://en.wikipedia.org/wiki/Linear_combination">linear combinations</a> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span> (smallest linear subspace containing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>). For instance, if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">{</mo><mi>p</mi><mo fence="true">}</mo></mrow><mo>⊂</mo><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup><mo>∖</mo><mrow><mo fence="true">{</mo><mn>0</mn><mo fence="true">}</mo></mrow></mrow>P = \\left \\{ p \\right \\} \\subset \\mathbb{R}^{2} \\setminus \\left \\{ 0 \\right \\}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord mathdefault">p</span><span style="top:0em;" class="mclose delimcenter">}</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊂</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1.064108em;vertical-align:-0.25em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∖</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord">0</span><span style="top:0em;" class="mclose delimcenter">}</span></span></span></span></span>&nbsp;then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">lin(P)</mtext></mrow>\\textbf{lin(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">lin(P)</span></span></span></span></span> is the line through&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and the origin. Similarly, the <a class="is-external-link" href="https://en.wikipedia.org/wiki/Affine_hull">affine hull</a></p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">aff(P)</mtext><mo>:</mo><mo>=</mo><mrow><mo fence="true">{</mo><mi>q</mi><mo>∣</mo><mi>q</mi><mo>=</mo><mo>∑</mo><msub><mi>λ</mi><mi>i</mi></msub><msub><mi>p</mi><mi>i</mi></msub><mo>∧</mo><mo>∑</mo><msub><mi>λ</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo>∧</mo><mi mathvariant="normal">∀</mi><mi>i</mi><mo>:</mo><msub><mi>p</mi><mi>i</mi></msub><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>λ</mi><mi>i</mi></msub><mo>∈</mo><mi mathvariant="double-struck">R</mi><mo fence="true">}</mo></mrow></mrow>\\textbf{aff(P)} := \\left \\{ q \\mid q = \\sum \\lambda_{i}p_{i} \\wedge \\sum \\lambda_{i} = 1 \\wedge \\forall i: p_{i}\\in P, \\lambda_{i} \\in \\mathbb{R} \\right \\}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">aff(P)</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">:</span></span><span class="base"><span style="height:0.36687em;vertical-align:0em;" class="strut"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1.80002em;vertical-align:-0.65002em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing size2">{</span></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∣</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="position:relative;top:-0.000004999999999977245em;" class="mop op-symbol large-op">∑</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span style="position:relative;top:-0.000004999999999977245em;" class="mop op-symbol large-op">∑</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">1</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord">∀</span><span class="mord mathdefault">i</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">:</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathbb">R</span></span><span style="top:0em;" class="mclose delimcenter"><span class="delimsizing size2">}</span></span></span></span></span></span></span></p><p>is the set of all affine combinations of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span> (smallest affine subspace containing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>). For instance, if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">{</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo fence="true">}</mo></mrow><mo>⊂</mo><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow>P = \\left \\{ p, q \\right \\} \\subset \\mathbb{R}^{2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="top:0em;" class="mclose delimcenter">}</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊂</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.8141079999999999em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mo mathvariant="normal">≠</mo><mi>q</mi></mrow>p \\neq q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8888799999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.69444em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="rlap"><span style="height:0.8888799999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span> then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">aff(P)</mtext></mrow>\\textbf{aff(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">aff(P)</span></span></span></span></span> is the line through <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>q</mi></mrow>q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span>.</p><div>\n</div><p>By restricting the coefficients used in linear combinations, we can define the related concepts of affine combination, conical combination, and convex combination, and the associated notions of sets closed under these operations:</p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mtable rowspacing="0.15999999999999992em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext mathvariant="bold">Type</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">of</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">Combination</mtext></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext mathvariant="bold">Restrictions</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">on</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">Coefficients</mtext></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext mathvariant="bold">Name</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">of</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">Set</mtext></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mtext mathvariant="bold">Model</mtext><mtext>&nbsp;</mtext><mtext mathvariant="bold">Space</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>linear&nbsp;combination</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>none</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>vector&nbsp;subspace</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>affine&nbsp;combination</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo>∑</mo><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>affine&nbsp;subspace</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>affine&nbsp;hyperplane</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>conical&nbsp;combination</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>convex&nbsp;cone</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>quadrant/octant</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>convex&nbsp;combination</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mrow><mo>∑</mo><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo>∧</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>convex&nbsp;set</mtext></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mtext>simplex</mtext></mstyle></mtd></mtr></mtable>\\begin{array}{cc}\n   \\textbf{Type of Combination} &amp; \\textbf{Restrictions on Coefficients} &amp; \\textbf{Name of Set} &amp; \\textbf{Model Space} \\\\\n   &amp; &amp; &amp; &amp; \\\\\n   \\text{linear combination} &amp; \\text{none} &amp; \\text{vector subspace} &amp; \\mathbb{R}^{n} \\\\\n   \\text{affine combination} &amp; \\sum a_{i} = 1 &amp; \\text{affine subspace} &amp; \\text{affine hyperplane} \\\\\n   \\text{conical combination} &amp; a_{i} \\ge 0 &amp; \\text{convex cone} &amp; \\text{quadrant/octant} \\\\\n   \\text{convex combination} &amp; \\sum a_{i} = 1 \\land a_{i} \\ge 0 &amp; \\text{convex set} &amp; \\text{simplex}\n\\end{array}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:7.200000000000001em;vertical-align:-3.35em;" class="strut"></span><span class="mord"><span class="mtable"><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:3.850000000000001em;" class="vlist"><span style="top:-6.010000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord textbf">Type&nbsp;of&nbsp;Combination</span></span></span></span><span style="top:-4.810000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"></span></span><span style="top:-3.6100000000000003em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">linear&nbsp;combination</span></span></span></span><span style="top:-2.41em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">affine&nbsp;combination</span></span></span></span><span style="top:-1.2100000000000002em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">conical&nbsp;combination</span></span></span></span><span style="top:-0.009999999999999953em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">convex&nbsp;combination</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:3.35em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:3.850000000000001em;" class="vlist"><span style="top:-6.010000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord textbf">Restrictions&nbsp;on&nbsp;Coefficients</span></span></span></span><span style="top:-4.810000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"></span></span><span style="top:-3.6100000000000003em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">none</span></span></span></span><span style="top:-2.41em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span style="position:relative;top:-0.0000050000000000050004em;" class="mop op-symbol small-op">∑</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">1</span></span></span><span style="top:-1.2100000000000002em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">≥</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span style="position:relative;top:-0.0000050000000000050004em;" class="mop op-symbol small-op">∑</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">1</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">≥</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:3.35em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:3.850000000000001em;" class="vlist"><span style="top:-6.010000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord textbf">Name&nbsp;of&nbsp;Set</span></span></span></span><span style="top:-4.810000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"></span></span><span style="top:-3.6100000000000003em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">vector&nbsp;subspace</span></span></span></span><span style="top:-2.41em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">affine&nbsp;subspace</span></span></span></span><span style="top:-1.2100000000000002em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">convex&nbsp;cone</span></span></span></span><span style="top:-0.009999999999999953em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">convex&nbsp;set</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:3.35em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:3.850000000000001em;" class="vlist"><span style="top:-6.010000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord textbf">Model&nbsp;Space</span></span></span></span><span style="top:-4.810000000000001em;"><span style="height:3em;" class="pstrut"></span><span class="mord"></span></span><span style="top:-3.6100000000000003em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.664392em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">affine&nbsp;hyperplane</span></span></span></span><span style="top:-1.2100000000000002em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">quadrant/octant</span></span></span></span><span style="top:-0.009999999999999953em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord text"><span class="mord">simplex</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:3.35em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t"><span class="vlist-r"><span style="height:2.6500000000000004em;" class="vlist"><span style="top:-4.65em;"><span style="height:2.84em;" class="pstrut"></span><span class="mord"></span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span></span></span></span></span></span></span></p><p>Convexity can also be described in a very similar way algebraically:</p><div>\n</div><h4 class="toc-header" id="proposition-3"><a href="#proposition-3" class="toc-anchor">¶</a> Proposition 3</h4><div>\n</div><p>For any <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊆</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow>P \\subseteq \\mathbb{R}^{d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8193em;vertical-align:-0.13597em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊆</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> we have</p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext><mo>=</mo><mrow><mo fence="true">{</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>λ</mi><mi>i</mi></msub><msub><mi>p</mi><mi>i</mi></msub><mo>∣</mo><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi><mo>∧</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>λ</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo>∧</mo><mi mathvariant="normal">∀</mi><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi><mo stretchy="false">}</mo><mo>:</mo><msub><mi>λ</mi><mi>i</mi></msub><mo>≥</mo><mn>0</mn><mo>∧</mo><msub><mi>p</mi><mi>i</mi></msub><mo>∈</mo><mi>P</mi><mo fence="true">}</mo></mrow></mrow>\\textbf{conv(P)} = \\left \\{ \\sum_{i = 1}^{n} \\lambda_{i}p_{i} \\mid n \\in \\mathbb{N} \\wedge \\sum_{i = 1}^{n} \\lambda_{i} = 1 \\wedge \\forall i \\in \\{1,...n\\} : \\lambda_{i} \\geq 0 \\wedge p_{i} \\in P \\right \\}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:3.027669em;vertical-align:-1.277669em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter"><span class="delimsizing size4">{</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.6513970000000002em;" class="vlist"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;" class="pstrut"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.277669em;" class="vlist"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∣</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord mathdefault">n</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathbb">N</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.6513970000000002em;" class="vlist"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;" class="pstrut"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.277669em;" class="vlist"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">1</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord">∀</span><span class="mord mathdefault">i</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">n</span><span class="mclose">}</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">:</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">≥</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">0</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="top:0em;" class="mclose delimcenter"><span class="delimsizing size4">}</span></span></span></span></span></span></span></p><p>With <strong>Proposition 3</strong> and <strong>Observation 2</strong>, we can define convex hull as:</p><div>\n</div><h4 class="toc-header" id="definition-4"><a href="#definition-4" class="toc-anchor">¶</a> Definition 4</h4><div>\n</div><p>The <strong>convex hull</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext></mrow>\\textbf{conv(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span></span></span></span> of a set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊆</mo><msup><mi mathvariant="double-struck">R</mi><mi mathvariant="double-struck">d</mi></msup></mrow>P \\subseteq \\mathbb{R^d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8193em;vertical-align:-0.13597em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊆</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> is the intersection of all convex supersets of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>.</p><div>\n</div><p>In a similar way we want to describe convex sets using as few entities as possible, which leads to the notion of extreme point, as defined below.</p><div>\n</div><h4 class="toc-header" id="definition-5"><a href="#definition-5" class="toc-anchor">¶</a> Definition 5</h4><div>\n</div><p>The convex hull of a finite point set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊂</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow>P \\subset \\mathbb{R}^{d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.72243em;vertical-align:-0.0391em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊂</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>&nbsp;forms a <strong>convex polytope</strong>. Each <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mo>∈</mo><mi>P</mi></mrow>p \\in P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.7335400000000001em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>&nbsp;for which <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mo mathvariant="normal">∉</mo><mtext mathvariant="bold">conv(P</mtext><mo>∖</mo><mrow><mo fence="true">{</mo><mi>p</mi><mo fence="true">}</mo></mrow><mtext mathvariant="bold">)</mtext></mrow>p \\notin \\textbf{conv(P} \\setminus \\left \\{ p \\right \\} \\textbf{)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord mathdefault">p</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.75em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="llap"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="inner"><span class="mord"><span class="mord">/</span><span style="margin-right:0.05555555555555555em;" class="mspace"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.25em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∖</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord mathdefault">p</span><span style="top:0em;" class="mclose delimcenter">}</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord text"><span class="mord textbf">)</span></span></span></span></span>&nbsp;is called a <strong>vertex</strong> of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext></mrow>\\textbf{conv(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span></span></span></span>. A vertex of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext></mrow>\\textbf{conv(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span></span></span></span> is also called an extreme point of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>. A convex polytope in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow>\\mathbb{R}^{2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8141079999999999em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>&nbsp;is called a <strong>convex polygon</strong>.</p><div>\n</div><p>Essentially, the following proposition shows that the term vertex above is well defined.</p><div>\n</div><h4 class="toc-header" id="proposition-6"><a href="#proposition-6" class="toc-anchor">¶</a> Proposition 6</h4><div>\n</div><p>A convex polytope in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow>\\mathbb{R}^{d}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.849108em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.849108em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> is the convex hull of its vertices.</p><div>\n</div><p>Intuitively, the convex hull of a set of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi></mrow>n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span> points in the plane is the smallest convex polygon that contains all of them either inside or on its boundary. A formal definition of the convex hull that is applicable to arbitrary sets, including sets of points that happen to lie on the same line, follows:</p><div>\n</div><h4 class="toc-header" id="definition-7"><a href="#definition-7" class="toc-anchor">¶</a> Definition 7</h4><div>\n</div><p>The <strong>convex hull</strong> of a set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span> of points is the smallest convex set containing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>.</p><div>\n</div><h2 class="toc-header" id="algorithms"><a href="#algorithms" class="toc-anchor">¶</a> Algorithms</h2><div>\n</div><p>The following algorithms construct the convex hull of a finite point set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>⊆</mo><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow>P \\subseteq \\mathbb{R}^{2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8193em;vertical-align:-0.13597em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⊆</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.8141079999999999em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>. Time complexity of each algorithm is stated in terms of the number of inputs points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi></mrow>n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span> and the number of points on the hull <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>h</mi></mrow>h</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span></span></span></span>.&nbsp;Note that in the worst case <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>h</mi></mrow>h</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span></span></span></span> may be as large as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi></mrow>n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span>.</p><div>\n</div><h3 class="toc-header" id="jarvis-march-onhon-cdot-honh"><a href="#jarvis-march-onhon-cdot-honh" class="toc-anchor">¶</a> <a class="is-external-link" href="https://en.wikipedia.org/wiki/Gift_wrapping_algorithm">Jarvis march</a> - <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p><img alt="jarvis_march.gif" src="https://upload.wikimedia.org/wikipedia/commons/9/9c/Animation_depicting_the_gift_wrapping_algorithm.gif"></p><div>\n</div><p>Find a point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi mathvariant="normal">ℓ</mi></mrow>\\ell</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord">ℓ</span></span></span></span> that is a vertex of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext></mrow>\\textbf{conv(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span></span></span></span> (e.g., the one with smallest x-coordinate). "Wrap" <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span> starting from&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi mathvariant="normal">ℓ</mi></mrow>\\ell</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord">ℓ</span></span></span></span>, i.e., always find the next vertex of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">conv(P)</mtext></mrow>\\textbf{conv(P)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">conv(P)</span></span></span></span></span> as the one that is leftmost with respect to the direction given by the previous two vertices.</p><div>\n</div><p>Besides the lexicographic comparison mentioned above, Jarvis March needs one more geometric predicate: the right turn (or orientation test). Here we can prove that:&nbsp;for three points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>q</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>q</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>r</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow>(p_{x}, p_{y}), (q_{x}, q_{y}), (r_{x}, r_{y}) \\in \\mathbb{R}^{2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.036108em;vertical-align:-0.286108em;" class="strut"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mopen">(</span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mopen">(</span><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.8141079999999999em;vertical-align:0em;" class="strut"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>,&nbsp;the sign of the determinant</p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>p</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>p</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>q</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>q</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow>\\begin{vmatrix} p_{x} &amp; p_{y} &amp; 1 \\\\ q_{x} &amp; q_{y} &amp; 1 \\\\ r_{x} &amp; r_{y} &amp; 1 \\end{vmatrix}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:3.64199em;vertical-align:-1.5500299999999998em;" class="strut"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.0919600000000003em;" class="vlist"><span style="top:-1.05597em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500299999999998em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.0919600000000003em;" class="vlist"><span style="top:-1.05597em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500299999999998em;" class="vlist"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>determines if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi></mrow>r</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">r</span></span></span></span> lies to the right, to the left or on the directed line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo>⃗</mo></mover></mrow>\\vec{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.9084399999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.714em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span style="left:-0.2355em;" class="accent-body"><span style="height:0.714em;width:0.471em;" class="overlay"><svg preserveAspectRatio="xMinYMin" viewBox="0 0 471 714" style="width:0.471em" height="0.714em" width="0.471em"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"></path></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> (point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi></mrow>r</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">r</span></span></span></span> is to the left of the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo>⃗</mo></mover></mrow>\\vec{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.9084399999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.714em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span style="left:-0.2355em;" class="accent-body"><span style="height:0.714em;width:0.471em;" class="overlay"><svg preserveAspectRatio="xMinYMin" viewBox="0 0 471 714" style="width:0.471em" height="0.714em" width="0.471em"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"></path></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> directed from point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> to point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>q</mi></mrow>q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span> if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mi>q</mi><mi>r</mi></mrow>pqr</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.02778em;" class="mord mathdefault">r</span></span></span></span> forms a counterclockwise cycle). The sign of this expression is positive if and only if the point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">(</mo><msub><mi>r</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow>(r_{x}, r_{y})</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.036108em;vertical-align:-0.286108em;" class="strut"></span><span class="mopen">(</span><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is to the left of the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo>⃗</mo></mover></mrow>\\vec{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.9084399999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.714em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span style="left:-0.2355em;" class="accent-body"><span style="height:0.714em;width:0.471em;" class="overlay"><svg preserveAspectRatio="xMinYMin" viewBox="0 0 471 714" style="width:0.471em" height="0.714em" width="0.471em"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"></path></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>.&nbsp;Using this formula, we can check in constant time whether a point lies to the left of the line determined by two other points as well as find the distance from the point to the line.</p><div>\n</div><p>For every output point the above algorithm spends <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi></mrow>n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span> right turn tests, which is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>⇒</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>h</mi><mo stretchy="false">)</mo></mrow>\\Rightarrow O(nh)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.36687em;vertical-align:0em;" class="strut"></span><span class="mrel">⇒</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> in total.&nbsp;In the worst case we have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>h</mi><mo>=</mo><mi>n</mi></mrow>h = n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span>, that is, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow>O(n^{2})</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.064108em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span style="height:0.8141079999999999em;" class="vlist"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> right turn tests.</p><div>\n</div><p>The algorithm may have to cope with various degeneracies:</p><div>\n</div><ul>\n<li>Several points have smallest x-coordinate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>⇒</mo></mrow>\\Rightarrow</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.36687em;vertical-align:0em;" class="strut"></span><span class="mrel">⇒</span></span></span></span>&nbsp;lexicographic order:</li>\n</ul><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">(</mo><msub><mi>p</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mo stretchy="false">(</mo><msub><mi>q</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>q</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>⇔</mo><msub><mi>p</mi><mi>x</mi></msub><mo>&lt;</mo><msub><mi>q</mi><mi>x</mi></msub><mo>∨</mo><msub><mi>p</mi><mi>x</mi></msub><mo>=</mo><msub><mi>q</mi><mi>x</mi></msub><mo>∧</mo><msub><mi>p</mi><mi>y</mi></msub><mo>&lt;</mo><msub><mi>q</mi><mi>y</mi></msub></mrow>(p_{x}, p_{y}) &lt; (q_{x}, q_{y}) \\Leftrightarrow p_{x} &lt; q_{x} \\vee p_{x} = q_{x} \\wedge p_{y} &lt; q_{y}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.036108em;vertical-align:-0.286108em;" class="strut"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">&lt;</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1.036108em;vertical-align:-0.286108em;" class="strut"></span><span class="mopen">(</span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span class="mclose">)</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">⇔</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.7335400000000001em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">&lt;</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.75em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∨</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.75em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.8252079999999999em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">&lt;</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.716668em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span></span></span></p><ul>\n<li>Three or more points collinear&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>⇒</mo></mrow>\\Rightarrow</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.36687em;vertical-align:0em;" class="strut"></span><span class="mrel">⇒</span></span></span></span> choose the point that is farthest among those&nbsp;that are leftmost.</li>\n</ul><div>\n</div><p>Jarvis March has a remarkable property that is called <strong>output sensitivity</strong>: the runtime depends not only on the size of the input but also on the size of the output. For a huge point set it constructs the convex hull in optimal linear time, if the convex hull consists of a constant number of vertices only, but the worst case performance of Jarvis March is suboptimal.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">Input: Pairs of coordinates.\nOutput: The vertices of the convex hull, starting from the left most point.\n\nJarvisMarch(P[(x0, y0), (x1, y1), ... , (xn, yn)]):\nℓ ← 0\nfor i ← 1 to n do\n    if P[i][0] &lt; P[ℓ][0] then\n        ℓ ← i\n    end\nend\n\np ← ℓ\ndo\n    Output(p)\n    q ← p + 1\n    for i ← 0 to n do\n        if ClockWise(p, i, q) then\n            q ← i\n        end\n    end\n    p ← q\nwhile p ≠ ℓ\n</code></pre><div>\n</div><h3 class="toc-header" id="graham-scan-onlognon-cdot-log-nonlogn"><a href="#graham-scan-onlognon-cdot-log-nonlogn" class="toc-anchor">¶</a> <a class="is-external-link" href="https://en.wikipedia.org/wiki/Graham_scan">Graham Scan</a> — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p><img alt="Graham Scan" src="https://upload.wikimedia.org/wikipedia/commons/7/71/GrahamScanDemo.gif"></p><div>\n</div><p>This algorithm for computing the convex hull of a set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span> of&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi></mrow>n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.43056em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">n</span></span></span></span> points in the plane consists of the following three parts:</p><div>\n</div><ol>\n<li>Select a&nbsp;base point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>0</mn></msub><mo>∈</mo><mi>P</mi></mrow>p_{0} \\in P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.7335400000000001em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>, normally this is the point with minimum y-coordinate. In case of the tie, we select leftmost point (minimum x-coordinate) in the set.</li>\n<li>Sort the remaining points of&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span>&nbsp;(that is, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi><mo>∖</mo><mrow><mo fence="true">{</mo><msub><mi>p</mi><mn>0</mn></msub><mo fence="true">}</mo></mrow></mrow>P \\setminus \\left \\{ p_{0} \\right \\}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∖</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="top:0em;" class="mclose delimcenter">}</span></span></span></span></span>) in lexicographical order by polar angle, measured in radian. Interior points on the ray cannot be a convex hull points and remove these points during sort. Once the points are sorted, we connected them in counterclockwise order with respect to the anchor point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow>p_{0}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>. The result is a simple polygon.</li>\n<li>After pushing the anchor point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow>p_{0}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>&nbsp;onto the stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>, we scan through the points in counterclockwise order, maintaining at each step a stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;containing a convex chain surrounding the points scanned so far. Each time we consider the new point&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow>p_{i}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>, we perform the following tereest: if&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow>p_{i}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>&nbsp;forms a left turn with the last two points in the stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>, or if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;contains fewer than two points, then push&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow>p_{i}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> onto the stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>; Otherwise, pop the last point from the stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;and repeat the test for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow>p_{i}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.31166399999999994em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>.</li>\n</ol><div>\n</div><p>When we return to the&nbsp;base point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow>p_{0}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>, at which point stack <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;stores the vertices of the convex hull of&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>P</mi></mrow>P</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.13889em;" class="mord mathdefault">P</span></span></span></span> in counterclockwise order.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">Input: A list P of points in the plane.\nOutput: A list contains the vertices of the convex hull, starting from the bottom point.\n\nSelect the point with minimum y-coordinate.\nSort all points in polar angle order.\nS = {P[0], P[1]}\n\nfor i = 2 to n do\n    while |S| &gt; 2 and ClockWise(S[-2], S[-1], P[i]) do\n        S.pop()\n    end\n    S.push(P[i])\nend\n</code></pre><div>\n</div><h3 class="toc-header" id="monotone-chain-onlognon-cdot-log-nonlogn"><a href="#monotone-chain-onlognon-cdot-log-nonlogn" class="toc-anchor">¶</a> <a class="is-external-link" href="https://algorithmist.com/wiki/Monotone_chain_convex_hull">Monotone Chain</a> — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p><img alt="Monotone Chain" src="https://upload.wikimedia.org/wikipedia/commons/9/9a/Animation_depicting_the_Monotone_algorithm.gif"></p><div>\n</div><p>This algorithm first sorts the points lexicographically (first by x-coordinate, and in case of a tie, by y-coordinate), and then constructs the upper and the lower hulls of the points in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>&nbsp;time.</p><div>\n</div><p>An upper hull is the part of the convex hull, which is visible from the above. It runs from its rightmost point to the leftmost point in counterclockwise order. Lower hull is the remaining part of the convex hull.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">Input: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i = 1 to n do:\n    while |L| &gt;= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\nend\n\nfor i = n to 1 do:\n    while |U| &gt;= 2 and CounterClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n</code></pre><div>\n</div><h3 class="toc-header" id="incremental-algorithm-onlognon-cdot-log-nonlogn"><a href="#incremental-algorithm-onlognon-cdot-log-nonlogn" class="toc-anchor">¶</a> Incremental Algorithm — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p>Like <strong>Monotone Chain</strong>, our algorithm begins by sorting the points by their x-coordinates, and the three leftmost points(assume they are not collinear) construct a convex hull. As we loop over the original set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>, the convex hull is updated to include that new point.</p><div>\n</div><p>To merge a new point to an existing convex hull, we first connect it to the rightmost point of the convex hull, then repeatedly remove concave corners from this polygon. The way we construct the polygon guarantees that any concave vertices are adjacent to the newly added point, which implies that we can find and remove each concave vertex in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow>O(1)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> time.</p><div>\n</div><pre class="prismjs line-numbers"><code class="language-">Input: A list P of points in the plane.\nOutput: Two lists U and L hold the vertices of upper and lower hulls respectively.\n\nSort all points by x-coordinate (in case of a tie, sort by y-coordinate).\n\nU = {}\nL = {}\n\nfor i ← 3 to n do:\n    while |L| &gt;= 2 and CounterClockWise(L[-2], L[-1], P[i]) do:\n        L.pop()\n    end\n    L.push(P[i])\n\n    while |U| &gt;= 2 and ClockWise(U[-2], U[-1], P[i]) do:\n        U.pop()\n    end\n    U.push(P[i])\nend\n\nRemove the last point of each list (it's the same as the first point of the other list).\nConcatenate L and U to obtain the convex hull of P.\nPoints in the result will be listed in counter-clockwise order.\n</code></pre><div>\n</div><h3 class="toc-header" id="divide-and-conquer-onlognon-cdot-log-nonlogn"><a href="#divide-and-conquer-onlognon-cdot-log-nonlogn" class="toc-anchor">¶</a> Divide and Conquer — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p>Like <strong>Monotone Chain</strong>, our algorithm begins by sorting the points by their x-coordinates, then the original set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span> can be divided into two sets <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>L</mi></mrow>L</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">L</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi></mrow>R</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.00773em;" class="mord mathdefault">R</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>L</mi></mrow>L</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">L</span></span></span></span> containing the leftmost <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo fence="true">⌈</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo fence="true">⌉</mo></mrow>\\left \\lceil n/2 \\right \\rceil</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">⌈</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span style="top:0em;" class="mclose delimcenter">⌉</span></span></span></span></span> points and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi></mrow>R</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.00773em;" class="mord mathdefault">R</span></span></span></span> containing the rightmost <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo fence="true">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo fence="true">⌋</mo></mrow>\\left \\lfloor n/2 \\right \\rfloor</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span style="top:0em;" class="mclose delimcenter">⌋</span></span></span></span></span> points. Compute the convex hulls of the subsets <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>L</mi></mrow>L</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">L</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi></mrow>R</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.00773em;" class="mord mathdefault">R</span></span></span></span> recursively, say <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span>. For the convex hull of a set contains 3 or less points is the set itself, we can return them immediately.</p><div>\n</div><p>Merge <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span> by computing the upper and lower tangents of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span> and discarding all the points lying between these two tangents. Let's concentrate on the lower tangent -- since the upper tangent is symmetric -- which meets the following requirement:</p><div>\n</div><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo fence="true">{</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em"><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>p</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>p</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>q</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>q</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle displaystyle="false" scriptlevel="0"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><mo>≥</mo><mn>0</mn><mo>∣</mo><mi>p</mi><mo>∈</mo><mtext mathvariant="bold">CH(L)</mtext><mo>∧</mo><mi>q</mi><mo>∈</mo><mtext mathvariant="bold">CH(R)</mtext><mo>∧</mo><mi mathvariant="normal">∀</mi><mi>r</mi><mo>∈</mo><mtext mathvariant="bold">CH(L)</mtext><mo>∪</mo><mtext mathvariant="bold">CH(R)</mtext><mo>∖</mo><mrow><mo fence="true">{</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo fence="true">}</mo></mrow><mo fence="true">}</mo></mrow>\\left \\{ \\begin{vmatrix} p_{x} &amp; p_{y} &amp; 1 \\\\ q_{x} &amp; q_{y} &amp; 1 \\\\ r_{x} &amp; r_{y} &amp; 1 \\end{vmatrix} \\geq 0 \\mid p \\in \\textbf{CH(L)} \\wedge q \\in \\textbf{CH(R)} \\wedge \\forall r \\in \\textbf{CH(L)} \\cup \\textbf{CH(R)} \\setminus \\left \\{ p, q \\right \\} \\right \\}\n</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:3.64199em;vertical-align:-1.5500299999999998em;" class="strut"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05002em;" class="vlist"><span style="top:-2.49999em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.20499em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.00501em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.55002em;" class="vlist"><span></span></span></span></span></span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.0919600000000003em;" class="vlist"><span style="top:-1.05597em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500299999999998em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.15139200000000003em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:0.03588em;" class="mord mathdefault mtight">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span><span style="width:0.5em;" class="arraycolsep"></span><span style="width:0.5em;" class="arraycolsep"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05em;" class="vlist"><span style="top:-4.21em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500000000000007em;" class="vlist"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.0919600000000003em;" class="vlist"><span style="top:-1.05597em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span style="height:2.606em;" class="pstrut"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.5500299999999998em;" class="vlist"><span></span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">≥</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord">0</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∣</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord mathdefault">p</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∧</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord">∀</span><span style="margin-right:0.02778em;" class="mord mathdefault">r</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">∈</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∖</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">{</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span><span style="top:0em;" class="mclose delimcenter">}</span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:2.05002em;" class="vlist"><span style="top:-2.49999em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎭</span></span></span><span style="top:-2.20499em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎬</span></span></span><span style="top:-4.00501em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30002em;"><span style="height:3.15em;" class="pstrut"></span><span class="delimsizinginner delim-size4"><span>⎫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:1.55002em;" class="vlist"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> to be the rightmost point of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>q</mi></mrow>q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span> to be the leftmost point of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span>, we now move point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>q</mi></mrow>q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span> as follows:</p><div>\n</div><ol>\n<li>\n<p>As long as there is a point in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> lies to the right of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>, move <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> to the next clockwise point of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span>;</p>\n</li>\n<li>\n<p>As long as there is a point in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span> lies to the right of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>, move <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>q</mi></mrow>q</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span></span> to the next counterclockwise point of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span>;</p>\n</li>\n<li>\n<p>Repeat (1) and (2) until there isn't any point in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(L)</mtext></mrow>\\textbf{CH(L)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(L)</span></span></span></span></span> or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="bold">CH(R)</mtext></mrow>\\textbf{CH(R)}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord text"><span class="mord textbf">CH(R)</span></span></span></span></span> lies to the right of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{pq}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">p</span><span style="margin-right:0.03588em;" class="mord mathdefault">q</span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> is the lower tangent.</p>\n</li>\n</ol><div>\n</div><h3 class="toc-header" id="quick-hull-onlognon-cdot-log-nonlogn"><a href="#quick-hull-onlognon-cdot-log-nonlogn" class="toc-anchor">¶</a> <a class="is-external-link" href="https://en.wikipedia.org/wiki/Quickhull">Quick Hull</a> — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log n)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p><img alt="" src="https://upload.wikimedia.org/wikipedia/commons/4/42/Animation_depicting_the_quickhull_algorithm.gif"></p><div>\n</div><p>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span> be&nbsp;a set of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow>n &gt; 1</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.5782em;vertical-align:-0.0391em;" class="strut"></span><span class="mord mathdefault">n</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">&gt;</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.64444em;vertical-align:0em;" class="strut"></span><span class="mord">1</span></span></span></span> points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>p</mi><mi>n</mi></msub><mrow><mo fence="true">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow></mrow>p_{1}\\left ( x_{1}, y_{1} \\right ),...p_{n}\\left ( x_{n}, y_{n} \\right )</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="top:0em;" class="mclose delimcenter">)</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="minner"><span style="top:0em;" class="mopen delimcenter">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mpunct">,</span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord"><span style="margin-right:0.03588em;" class="mord mathdefault">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="top:0em;" class="mclose delimcenter">)</span></span></span></span></span> in the plane. We assume that the points are sorted in nondecreasing order of their x coordinates, with ties resolved by increasing order of the y coordinates of the points involved. The leftmost point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow>p_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> and the rightmost point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> are two distinct extreme points of the set’s convex hull.</p><div>\n</div><p>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mi>n</mi></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{1}p_{n}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>&nbsp;be the straight line through points&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow>p_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> and&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> directed from&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow>p_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> to&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>. This line separates the points of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;into two parts: the left part&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow>S_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> and the right part&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow>S_{2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>, while the points of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>S</mi></mrow>S</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.68333em;vertical-align:0em;" class="strut"></span><span style="margin-right:0.05764em;" class="mord mathdefault">S</span></span></span></span>&nbsp;on&nbsp;the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mi>n</mi></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{1}p_{n}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> other than&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow>p_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> and&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> cannot be extreme points of the convex hull.</p><div>\n</div><p>If&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow>S_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> is empty, the upper hull is simply the line segment with the endpoints at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow>p_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>&nbsp;and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>. For points in&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow>S_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> which is not empty, we can find a point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow>p_{max}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> which is the furthest from line&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mi>n</mi></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{1}p_{n}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>, and if there is a tie, select the point that maximizes the angle <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi mathvariant="normal">∠</mi><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mi>n</mi></msub></mrow>\\angle p_{max}p_{1}p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8866799999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord">∠</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>.&nbsp;Then the algorithm identifies all the points of set&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow>S_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> that are to the left of the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{1}p_{max}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> as&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow>S_{1,1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.969438em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.301108em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>, and the points of&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow>S_{1}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> to the left of the line <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msub><mi>p</mi><mi>n</mi></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{max}p_{n}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> will make up the set&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow>S_{1,2}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.969438em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.301108em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>.&nbsp;We can prove that:</p><div>\n</div><ul>\n<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow>p_{max}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>&nbsp;is a vertex of the upper hull.</li>\n<li>The points inside <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>△</mo><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msub><mi>p</mi><mi>n</mi></msub></mrow>\\bigtriangleup p_{1}p_{max}p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.8888799999999999em;vertical-align:-0.19444em;" class="strut"></span><span class="mord">△</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> cannot be vertices of the upper hull (and hence can be eliminated).</li>\n<li>There are no points to the left of both lines&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{1}p_{max}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span> and&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover accent="true"><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msub><mi>p</mi><mi>n</mi></msub></mrow><mo stretchy="true">→</mo></mover></mrow>\\overrightarrow{p_{max}p_{n}}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.147em;vertical-align:-0.19444em;" class="strut"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.9525600000000001em;" class="vlist"><span style="top:-3em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span><span style="top:-3.43056em;" class="svg-align"><span style="height:3em;" class="pstrut"></span><span style="height:0.522em;min-width:0.888em;" class="hide-tail"><svg preserveAspectRatio="xMaxYMin slice" viewBox="0 0 400000 522" height="0.522em" width="400em"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.19444em;" class="vlist"><span></span></span></span></span></span></span></span></span>.</li>\n</ul><div>\n</div><p>Therefore, the algorithm can continue constructing the upper hulls of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo>∪</mo><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow>p_{1} \\cup S_{1,1} \\cup p_{max}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.75em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.969438em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.301108em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span> and&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>∪</mo><msub><mi>S</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>∪</mo><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{max} \\cup S_{1,2} \\cup p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.75em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.969438em;vertical-align:-0.286108em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.301108em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.286108em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>&nbsp;recursively and then simply concatenate them to get the upper hull of the entire set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>S</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>p</mi><mi>n</mi></msub></mrow>p_{1} \\cup S_{1} \\cup p_{n}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.75em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.83333em;vertical-align:-0.15em;" class="strut"></span><span class="mord"><span style="margin-right:0.05764em;" class="mord mathdefault">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.30110799999999993em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">∪</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:0.151392em;" class="vlist"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;" class="pstrut"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.15em;" class="vlist"><span></span></span></span></span></span></span></span></span></span>.</p><div>\n</div><h3 class="toc-header" id="chans-algorithm-onloghon-cdot-log-honlogh"><a href="#chans-algorithm-onloghon-cdot-log-honlogh" class="toc-anchor">¶</a> <a class="is-external-link" href="https://en.wikipedia.org/wiki/Chan%27s_algorithm">Chan's Algorithm</a> - <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span></h3><div>\n</div><p><img alt="" src="https://upload.wikimedia.org/wikipedia/commons/4/48/ChanAlgDemo.gif"></p><div>\n</div><p>Chan’s algorithm starts by shattering the input points into <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle></mrow>\\dfrac{n}{h}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> arbitrary subsets, each of size <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>h</mi></mrow>h</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span></span></span></span>, and computing the convex hull of each subset using (say) Graham’s scan. This much of the algorithm requires <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle><mo>⋅</mo><mi>h</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(\\dfrac{n}{h} \\cdot h \\cdot \\log h) = O(n \\cdot \\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> time.</p><div>\n</div><p>Once we have the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle></mrow>\\dfrac{n}{h}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> subhulls, we follow the general outline of Jarvis march, wrapping a string around the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle></mrow>\\dfrac{n}{h}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> subhulls. Starting with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mo>=</mo><mi mathvariant="normal">ℓ</mi></mrow>p = \\ell</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span><span class="mrel">=</span><span style="margin-right:0.2777777777777778em;" class="mspace"></span></span><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord">ℓ</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi mathvariant="normal">ℓ</mi></mrow>\\ell</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord">ℓ</span></span></span></span> is the leftmost input point, we successively find the convex hull vertex the follows <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and counterclockwise order until we return back to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi mathvariant="normal">ℓ</mi></mrow>\\ell</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord">ℓ</span></span></span></span> again.</p><div>\n</div><p>The vertex that follows <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> is the point that appears to be furthest to the right to someone standing at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span>. This means that the successor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> must lie on a right tangent line between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and one of the subhulls–a line from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> through a vertex of the subhull, such that the subhull lies completely on the right side of the line from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span>’s point of view. We can find the right tangent line between <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> and any subhull in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(\\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> time using a variant of binary search. Since there are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle></mrow>\\dfrac{n}{h}</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> subhulls, finding the successor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi></mrow>p</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.625em;vertical-align:-0.19444em;" class="strut"></span><span class="mord mathdefault">p</span></span></span></span> takes <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(\\dfrac{n}{h} \\cdot \\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> time altogether.</p><div>\n</div><p>Since there are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>h</mi></mrow>h</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:0.69444em;vertical-align:0em;" class="strut"></span><span class="mord mathdefault">h</span></span></span></span> convex hull edges, and we ﬁnd each edge in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>n</mi><mi>h</mi></mfrac></mstyle><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(\\dfrac{n}{h} \\cdot \\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1.7935600000000003em;vertical-align:-0.686em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span style="height:1.10756em;" class="vlist"><span style="top:-2.314em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span style="height:3em;" class="pstrut"></span><span style="border-bottom-width:0.04em;" class="frac-line"></span></span><span style="top:-3.677em;"><span style="height:3em;" class="pstrut"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span style="height:0.686em;" class="vlist"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span> time, the overall running time of the algorithm is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>h</mi><mo stretchy="false">)</mo></mrow>O(n \\cdot \\log h)</math></span><span aria-hidden="true" class="katex-html"><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span style="margin-right:0.02778em;" class="mord mathdefault">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span><span class="mbin">⋅</span><span style="margin-right:0.2222222222222222em;" class="mspace"></span></span><span class="base"><span style="height:1em;vertical-align:-0.25em;" class="strut"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.16666666666666666em;" class="mspace"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>.</p><div>\n</div>	[{"title":"Convexity","anchor":"#convexity","children":[]},{"title":"Algorithms","anchor":"#algorithms","children":[{"title":"Jarvis march - O(n⋅h)O(n \\\\cdot h)O(n⋅h)","anchor":"#jarvis-march-onhon-cdot-honh","children":[]},{"title":"Graham Scan — O(n⋅log⁡n)O(n \\\\cdot \\\\log n)O(n⋅logn)","anchor":"#graham-scan-onlognon-cdot-log-nonlogn","children":[]},{"title":"Monotone Chain — O(n⋅log⁡n)O(n \\\\cdot \\\\log n)O(n⋅logn)","anchor":"#monotone-chain-onlognon-cdot-log-nonlogn","children":[]},{"title":"Incremental Algorithm — O(n⋅log⁡n)O(n \\\\cdot \\\\log n)O(n⋅logn)","anchor":"#incremental-algorithm-onlognon-cdot-log-nonlogn","children":[]},{"title":"Divide and Conquer — O(n⋅log⁡n)O(n \\\\cdot \\\\log n)O(n⋅logn)","anchor":"#divide-and-conquer-onlognon-cdot-log-nonlogn","children":[]},{"title":"Quick Hull — O(n⋅log⁡n)O(n \\\\cdot \\\\log n)O(n⋅logn)","anchor":"#quick-hull-onlognon-cdot-log-nonlogn","children":[]},{"title":"Chan's Algorithm - O(n⋅log⁡h)O(n \\\\cdot \\\\log h)O(n⋅logh)","anchor":"#chans-algorithm-onloghon-cdot-log-honlogh","children":[]}]}]	markdown	2020-07-30T09:13:47.796Z	2020-08-05T15:22:56.188Z	markdown	en	1	1	{}
\.


--
-- Data for Name: pagesVector; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pagesVector" (id, path, locale, title, description, tokens, content) FROM stdin;
1	home	en	Home		'home':1A,2C 'page':3C	\N
2	algorithms/graph/topological-sort	en	Topological Sort		'acycl':12C 'add':129C,282C 'along':189C 'also':36C 'arbitrarili':205C 'back':78C,87C 'becom':55C 'bfs':174C 'break':202C 'cannot':214C 'come':25C 'contain':109C,236C 'cours':76C 'cycl':168C 'dag':14C,30C,96C,267C 'dead':56C 'delet':187C,224C 'dfs':44C,46C 'digraph':93C,181C 'direct':11C,19C 'edg':20C,79C,88C,120C,138C,143C,152C,159C,185C,193C,275C 'element':112C 'els':169C 'empti':105C,124C,232C 'encount':82C,91C 'end':57C 'error':162C 'everi':18C 'find':176C 'function':251C 'graph':13C,146C,157C,163C 'head':284C 'i.e':58C 'imposs':104C 'incom':119C,151C,184C 'insert':154C 'least':166C 'list':106C,233C 'mark':257C,263C,268C,280C 'necessari':34C 'node':9C,116C,127C,135C,239C,244C,249C,253C,272C 'non':123C 'none':209C 'note':49C 'one':167C 'order':7C,29C,51C,66C,173C,218C 'outgo':194C 'perform':45C 'perman':256C,281C 'pop':59C 'possibl':43C 'problem':73C,213C,231C 'provid':74C 'remain':180C 'remov':126C,142C 'repeat':175C 'return':161C,170C,259C 'revers':64C 'select':246C 'set':113C 'sever':200C 'solut':68C,226C 'solv':216C 'sort':2A,4C,40C,72C,99C,111C,172C,230C,238C 'sourc':201C 'stack':63C 'stop':210C,265C 'suffici':37C 'tail':131C 'temporari':262C 'temporarili':269C 'tie':204C 'topolog':1A,3C,39C,71C,98C,171C,229C 'travers':47C,62C,85C 'unmark':243C,248C 'vertex':22C,24C,177C 'vertic':54C,102C,222C 'visit':250C,252C,279C 'yield':67C,225C	\N
5	programming-language/golang/runtime/context	en	Context		'100':1149C '200':1236C '400':1250C '500':1227C '5000':1077C '800':1259C 'abandon':272C 'accept':239C 'acquir':831C 'across':19C 'add':662C,1076C,1114C,1176C 'alloc':1381C 'alreadi':534C,647C,681C,814C,975C,1019C 'also':417C 'altern':1394C 'alway':762C 'api':20C,1335C 'arg':66C,67C 'argument':55C 'arrang':468C 'assign':1383C 'associ':345C,1121C,1318C 'atomic.addint32':737C 'avail':228C 'avoid':1363C,1380C 'awar':144C 'background':154C,158C,164C,202C,205C 'bool':32C,611C,795C 'boundari':21C 'built':899C,1359C 'bypass':604C 'c.cancel':387C,1014C,1023C,1058C,1063C 'c.children':829C,842C 'c.context':848C 'c.context.value':1506C 'c.done':776C,819C,821C,825C 'c.err':810C,816C,1052C 'c.key':1501C 'c.mu.lock':808C,1048C 'c.mu.unlock':812C,844C,1050C 'c.timer':1054C 'c.val':1504C 'call':59C,287C,295C,297C,327C,351C,442C,454C,465C,757C,1127C,1459C 'cancel':12C,98C,173C,247C,255C,262C,324C,340C,352C,369C,389C,413C,415C,418C,423C,441C,445C,453C,464C,473C,493C,511C,522C,527C,535C,648C,651C,664C,683C,694C,753C,774C,777C,793C,806C,815C,912C,991C,1025C,1033C,1065C,1080C,1084C,1116C,1128C,1146C,1152C,1188C,1193C,1223C,1229C,1246C,1252C 'cancelctx':88C,390C,395C,405C,407C,410C,425C,548C,559C,575C,583C,587C,610C,625C,707C,792C,860C,866C,903C,1004C 'cancelctxkey':569C,624C 'canceld':477C 'cancelfunc':256C,266C,267C,275C,284C,299C,303C,370C,861C,869C,897C,919C,964C,1002C,1047C,1103C,1171C 'cannot':375C,924C,1418C 'capabl':128C 'carri':10C,1445C 'case':530C,600C,742C,747C,878C,1086C,1091C,1206C,1271C,1284C,1288C 'chan':34C,94C,434C,1278C 'channel':313C,318C,334C,516C,597C,726C 'check':478C,512C,542C,578C 'checkto':1231C,1254C,1263C 'child':470C,524C,663C,697C,721C,827C,833C 'child.cancel':536C,684C,744C,839C 'child.done':748C 'children':96C,104C,109C,420C,443C,668C,780C,790C 'close':320C,336C,438C,518C,723C,775C,824C 'closedchan':616C,822C 'code':212C,349C,1125C 'collis':1364C 'compar':1348C,1433C,1438C 'complet':362C,1138C,1157C 'concret':1391C 'context':1A,2C,4C,7C,26C,42C,72C,82C,86C,90C,114C,117C,122C,146C,149C,153C,169C,197C,203C,211C,220C,240C,244C,248C,252C,254C,259C,263C,316C,332C,342C,361C,366C,368C,377C,400C,404C,408C,427C,489C,545C,609C,645C,657C,667C,702C,760C,768C,802C,853C,891C,894C,896C,909C,916C,918C,926C,933C,940C,946C,961C,963C,993C,999C,1001C,1036C,1044C,1046C,1070C,1096C,1099C,1102C,1118C,1137C,1167C,1170C,1182C,1295C,1298C,1302C,1305C,1324C,1368C,1387C,1396C,1409C,1413C,1420C,1463C,1467C,1480C 'context.background':859C,1082C,1190C 'context.context':51C,65C,140C,875C,1142C,1219C,1242C,1265C 'context.todo':215C 'context.withcancel':862C 'context.withdeadline':1081C 'context.withtimeout':1147C,1189C,1224C,1247C 'context.withxxx':74C 'copi':307C,1311C 'could':954C 'count':728C 'creat':75C,110C,376C,436C,925C,1419C 'ctx':64C,70C,253C,367C,858C,863C,874C,1079C,1141C,1145C,1148C,1163C,1187C,1199C,1203C,1218C,1222C,1225C,1232C,1241C,1245C,1248C,1255C,1264C 'ctx.done':879C,1092C,1207C,1272C,1285C 'ctx.err':884C,1094C,1210C,1274C,1287C 'cur':966C 'cur.before':970C 'current':972C,1035C 'custom':592C 'data':1330C 'deadlin':11C,28C,29C,180C,936C,941C,947C,973C,986C,1007C,1017C 'deadlineexceed':1016C,1060C 'default':145C,148C,540C,886C,1212C,1275C 'defer':1049C,1083C,1151C,1192C,1228C,1251C 'defin':5C,1373C 'degrad':955C 'deleg':1456C 'deriv':71C,85C,113C,139C,767C,945C 'differ':595C 'done':33C,93C,312C,317C,333C,433C,483C,502C,505C,531C,596C,612C,615C,617C,634C,725C 'dosometh':63C 'doubl':76C 'dur':1010C,1013C,1056C 'durat':1030C,1040C 'either':716C 'elaps':1160C 'els':554C,687C,736C,823C 'embed':1462C 'empti':168C,210C 'emptyctx':160C,163C,495C 'enclos':574C 'err':36C,100C,455C,796C,799C,817C,841C,1209C 'error':37C,68C,101C,456C,797C,804C,807C,1144C,1221C,1244C,1269C 'everi':1474C 'exampl':849C,1066C,1178C 'exit':882C 'expir':951C 'export':1395C 'extend':237C 'fals':537C,621C,630C,640C,685C,745C,840C,1024C 'fetch':1477C 'field':103C,116C,432C,669C 'find':571C,1490C 'first':54C,294C,339C,440C,452C,463C,952C 'fmt':854C,1071C,1183C 'fmt.printf':1208C,1214C 'fmt.println':880C,883C,887C,1089C,1093C 'follow':431C 'func':62C,201C,242C,304C,363C,386C,401C,606C,740C,791C,856C,872C,913C,958C,996C,1022C,1041C,1057C,1062C,1073C,1139C,1164C,1185C,1197C,1201C,1216C,1233C,1239C,1256C,1262C,1266C,1281C,1406C,1494C 'function':58C,125C,188C,232C,325C,754C,1342C 'get':60C 'geta':1198C,1217C 'getb':1202C,1240C 'given':1039C 'go':739C,864C,1196C,1200C,1280C 'gone':988C 'goroutin':134C,290C,712C,730C,738C 'grace':881C 'happen':338C 'hold':836C 'immedi':990C 'implement':422C,593C,1450C 'import':852C,1069C,1181C 'incom':199C 'indic':1472C 'initi':189C,394C 'innermost':573C 'interfac':27C,40C,41C,1301C,1386C,1405C,1412C,1470C,1498C,1499C 'intern':803C 'invok':61C,265C 'keep':105C,763C 'key':39C,1299C,1320C,1345C,1378C,1388C,1397C,1410C,1425C,1429C,1432C,1435C,1442C,1446C,1454C,1468C,1493C,1497C,1502C,1507C 'lazili':437C 'lead':769C 'leak':735C,773C 'left':653C 'level':196C 'lie':150C 'like':494C 'link':77C,764C,1487C 'list':78C,1488C 'listen':714C 'lock':834C,838C 'look':566C 'main':187C,851C,857C,1068C,1074C,1180C,1186C 'make':692C,1277C 'map':97C,444C,693C 'match':581C 'may':285C 'mean':487C 'memori':734C,772C 'method':528C 'miss':805C 'mu':91C,428C 'multipl':289C 'must':1346C 'never':172C,491C,510C 'new':159C,162C,311C,979C,1307C 'newcancelctx':381C,391C,402C,1005C 'nil':167C,209C,373C,379C,449C,460C,485C,506C,618C,620C,629C,639C,678C,690C,800C,811C,820C,843C,922C,928C,1053C,1293C,1416C,1422C,1426C,1428C 'non':166C,208C,459C 'note':830C 'noth':301C 'often':1389C 'ok':31C,550C,553C,622C,627C,632C,637C,671C,674C,967C,969C 'one':980C 'oper':270C,357C,1133C 'option':1339C 'overslept':1090C 'p.children':689C,691C,696C 'p.done':633C 'p.err':677C,686C 'p.mu.lock':631C,675C 'p.mu.unlock':635C,699C 'packag':3C,152C,850C,1067C,1179C,1366C 'pair':1308C,1448C 'panic':374C,801C,906C,923C,1417C,1427C,1434C 'paramet':241C,1340C 'parent':81C,121C,251C,258C,309C,331C,365C,372C,380C,382C,384C,399C,403C,409C,475C,481C,488C,508C,515C,532C,544C,552C,561C,608C,644C,666C,673C,679C,701C,719C,759C,789C,837C,893C,908C,915C,921C,929C,932C,939C,949C,960C,983C,998C,1006C,1009C,1043C,1098C,1112C,1166C,1174C,1297C,1304C,1313C,1408C,1415C,1423C,1441C 'parent.deadline':968C 'parent.done':503C,580C,613C,743C 'parent.err':538C,746C 'parent.value':568C,623C 'parentcancelctx':541C,551C,555C,607C,672C 'part':654C 'pass':1020C,1338C 'point':118C 'pointer':1403C 'possibl':771C 'process':24C,1333C 'propag':46C,498C 'propagatecancel':383C,466C,467C,1008C 'protect':430C 'provid':594C,1344C 'rang':828C 'reflectlite.typeof':1431C 'releas':343C,1119C,1153C 'remov':786C 'removechild':751C,847C 'removefrompar':783C,794C,846C 'request':16C,47C,200C,1328C 'resourc':344C,1120C,1154C 'result':1143C 'ret':1289C,1292C 'return':165C,204C,207C,245C,261C,306C,315C,323C,385C,392C,406C,484C,507C,539C,556C,619C,628C,638C,641C,813C,885C,981C,995C,1021C,1061C,1110C,1161C,1172C,1211C,1215C,1230C,1238C,1253C,1261C,1273C,1286C,1291C,1310C,1439C,1503C,1505C 'run':358C,1134C 'scope':17C,1329C 'select':529C,741C,877C,1085C,1205C,1270C,1283C 'set':50C,447C,457C 'shall':650C 'share':135C 'signal':13C,143C 'simpli':397C,661C,1105C 'simultan':291C 'slowoper':1156C,1162C 'slowoperationwithtimeout':1140C 'soon':354C,1130C 'sooner':976C 'specif':1492C 'spin':710C 'state':48C 'static':1399C 'stop':283C,500C 'str':1276C,1282C,1290C 'string':1195C,1220C,1234C,1243C,1257C,1267C,1268C,1279C,1355C 'struct':35C,89C,95C,99C,426C,435C,446C,695C,698C,1393C,1466C 'subsequ':296C 'surround':231C 'sync.mutex':92C,429C 'take':257C 'task':865C,873C 'tell':268C 'test':191C,733C 'threadloc':130C 'time':855C,1072C,1184C,1475C 'time.after':1087C 'time.afterfunc':1055C 'time.duration':1101C,1169C 'time.millisecond':1078C,1150C,1226C,1237C,1249C,1260C 'time.now':1075C,1113C,1175C 'time.second':868C,871C,889C,1088C,1191C 'time.sleep':867C,870C,888C,1235C,1258C 'time.time':30C,895C,917C,962C,1000C,1045C 'time.until':1011C 'timeout':1100C,1115C,1159C,1168C,1177C 'timer':905C 'timerctx':1003C 'todo':156C,161C,206C,243C,246C 'top':195C,901C 'track':106C 'transit':1332C 'travel':1484C 'tree':43C,658C 'true':388C,642C,785C,1015C,1059C,1064C 'two':147C 'type':8C,25C,87C,302C,424C,1354C,1361C,1376C,1392C,1400C,1464C 'typic':183C 'unclear':218C 'under':558C 'use':69C,184C,214C,222C,525C,1323C,1367C 'user':1369C 'val':1300C,1322C,1411C,1443C,1469C 'valid':547C,706C,935C,1029C 'valu':18C,38C,176C,1317C,1325C,1447C,1451C,1478C,1481C,1496C 'valuectx':1440C,1444C,1465C,1495C 'var':157C,1194C 'variabl':1398C 'wait':278C 'whether':579C 'whichev':337C 'whole':1486C 'withcancel':249C,250C,305C,364C,957C,982C 'withdeadlin':890C,892C,914C,953C,959C,997C,1042C,1108C,1111C,1173C 'withtimeout':1095C,1097C,1109C,1165C 'withvalu':1294C,1296C,1309C,1371C,1407C 'work':274C,281C 'would':950C 'wrap':398C,590C,1303C 'wrapper':1106C 'yet':227C,235C	\N
3	algorithms/computational-geometry/convex-hull	en	Convex Hull		'ad':1579C 'adjac':1575C 'aff':213C,215C,230C,253C,255C,256C 'affin':20C,211C,236C,240C,277C,310C,312C,314C,355C,359C,362C,392C,407C,415C 'algebra':429C 'algorithm':661C,664C,679C,898C,921C,1069C,1325C,1486C,1495C,1692C,2134C,2214C,2247C,2254C,2285C,2472C 'also':60C,422C,556C,979C 'altogeth':2447C 'alway':734C 'among':952C 'anchor':1165C,1175C 'angl':1130C,1305C,2129C,2130C 'appear':2355C 'applic':630C 'arbitrari':632C,2263C 'around':2314C 'array':328C,386C 'associ':286C 'assum':1509C,1993C 'back':2343C 'base':1090C,1256C 'begin':327C,795C,1496C,1693C,1826C 'besid':761C 'bigtriangleup':2183C 'binari':2429C 'bottom':1292C 'boundari':621C 'call':542C,557C,567C,964C 'cannot':1139C,2075C,2185C 'cap':149C 'case':703C,912C,1013C,1102C,1336C,1420C,1620C 'cc':329C 'cdot':711C,1065C,1321C,1488C,1685C,1975C,2249C,2290C,2291C,2293C,2443C,2462C,2475C 'ch':1739C,1741C,1742C,1744C,1746C,1747C,1768C,1770C,1771C,1773C,1775C,1776C,1785C,1787C,1788C,1790C,1792C,1793C,1821C,1822C,1823C,1824C,1834C,1838C,1843C,1846C,1851C,1852C,1853C,1854C,1862C,1864C,1865C,1873C,1875C,1876C,1891C,1893C,1894C,1909C,1911C,1912C,1920C,1922C,1923C,1938C,1940C,1941C,1950C,1952C,1953C,1955C,1957C,1958C 'chain':1195C,1319C,1493C,1690C 'chan':2246C,2252C 'check':862C 'choos':946C 'circl':95C 'clockwis':1057C,1312C,1483C,1638C,1679C,1906C 'close':24C,290C 'coeffici':265C,299C,337C,400C 'collinear':944C,1513C 'combin':27C,181C,237C,269C,278C,280C,283C,296C,306C,311C,317C,323C,333C,347C,356C,366C,376C,389C,391C,393C,395C,397C 'comparison':764C 'complet':125C,2397C 'complex':676C 'comput':1071C,1729C,1778C,2269C 'concaten':1466C,1662C,2233C 'concav':1558C,1572C,1590C 'concentr':1805C 'concept':275C 'cone':319C,370C,410C 'conic':279C,316C,365C,394C 'connect':120C,1156C,1545C 'conquer':1683C 'consequ':132C 'consid':154C,1205C 'consist':1003C,1082C 'constant':864C,1005C 'construct':665C,991C,1343C,1514C,1566C,2217C 'contain':126C,186C,242C,612C,660C,1193C,1228C,1282C,1712C,1721C,1754C 'continu':2216C 'conv':437C,439C,458C,473C,475C,476C,532C,535C,540C,545C,547C,548C,551C,553C,554C,719C,721C,722C,740C,742C,743C 'convex':1A,9C,12C,14C,26C,33C,69C,81C,93C,109C,145C,152C,153C,282C,318C,322C,324C,369C,375C,381C,396C,409C,411C,420C,466C,471C,486C,496C,517C,526C,562C,568C,584C,590C,597C,609C,626C,649C,658C,667C,993C,1001C,1029C,1073C,1141C,1194C,1267C,1287C,1363C,1392C,1471C,1515C,1525C,1541C,1553C,1667C,1731C,1750C,2034C,2081C,2271C,2332C,2451C 'coordin':728C,933C,1023C,1100C,1111C,1299C,1333C,1340C,1418C,1425C,1503C,1618C,1625C,1700C,2004C,2013C 'cope':925C 'corner':1559C 'counter':1482C,1678C 'counterclockwis':833C,1159C,1186C,1271C,1382C,1431C,1442C,1631C,1935C,2338C 'cup':1844C,2222C,2223C,2227C,2228C,2244C,2245C 'cycl':834C 'defin':272C,465C,513C,582C 'definit':7C,64C,135C,469C,515C,623C,647C 'degeneraci':928C 'depend':969C 'describ':424C,495C 'determin':794C,799C,875C 'dfrac':2262C,2289C,2302C,2316C,2434C,2442C,2461C 'direct':754C,811C,825C,2045C 'discard':1795C 'distanc':885C 'distinct':2027C 'divid':1681C,1707C 'e.g':723C 'edg':2453C,2458C 'either':616C 'elimin':2196C 'ell':714C,732C,2320C,2322C,2345C 'empti':2085C,2105C 'end':385C,797C,1049C,1050C,1059C,1060C,1315C,1317C,1434C,1436C,1445C,1447C,1634C,1641C,1643C,1828C 'endpoint':2096C 'entir':98C,2242C 'entiti':501C 'essenti':570C 'euclidean':31C 'everi':39C,46C,893C 'exist':1540C 'express':839C 'extrem':510C,559C,2028C,2077C 'famili':140C 'far':1201C 'farthest':951C 'fewer':1229C 'find':712C,735C,883C,1586C,2108C,2330C,2412C,2436C 'finit':520C,670C 'first':1326C,1331C,1460C,1544C,1656C 'follow':136C,572C,646C,663C,1085C,1212C,1819C,1883C,2305C,2336C,2350C 'foral':168C,224C,450C,1840C 'form':525C,832C,1215C 'formal':622C 'formula':859C 'furthest':2114C,2358C 'ge':367C,379C 'general':91C,2307C 'geometr':772C 'geometri':13C 'geq':454C,1830C 'get':2236C 'given':755C 'graham':1062C,2278C 'guarante':1569C 'hand':103C 'happen':639C 'henc':2193C 'hold':1405C,1605C 'huge':987C 'hull':2A,159C,212C,467C,472C,518C,591C,598C,627C,650C,668C,697C,994C,1002C,1030C,1074C,1142C,1268C,1288C,1349C,1357C,1364C,1385C,1393C,1412C,1472C,1516C,1526C,1542C,1554C,1612C,1668C,1732C,1751C,1973C,2035C,2082C,2088C,2179C,2191C,2220C,2239C,2272C,2333C,2452C 'hyperplan':315C,363C,416C 'i.e':733C 'identifi':2135C 'immedi':131C,1766C 'impli':1582C 'includ':634C,1530C 'increas':2009C 'increment':1485C 'input':688C,977C,1020C,1273C,1394C,1594C,2259C,2326C 'insid':617C,2182C 'instanc':188C,244C 'interior':1134C 'intersect':148C,483C 'intuit':595C 'involv':2017C 'isn':1946C 'jarvi':709C,767C,957C,1016C,2310C 'jarvismarch':1037C 'join':54C 'l.pop':1433C,1633C 'l.push':1435C,1635C 'lambda':166C,170C,219C,222C,226C,442C,448C,453C 'land':378C 'larg':707C 'last':1220C,1241C,1450C,1646C 'lceil':1716C 'lead':505C 'left':78C,141C,163C,190C,195C,216C,246C,440C,537C,807C,819C,851C,871C,1034C,1123C,1216C,1715C,1724C,1825C,1848C,1984C,1987C,2058C,2145C,2158C,2203C 'leftmost':749C,956C,1108C,1379C,1507C,1714C,1870C,2019C,2325C 'leftrightarrow':937C 'less':1756C 'let':1804C,1855C,1978C,2036C 'lexicograph':763C,935C,1126C,1330C 'lfloor':1725C 'lie':641C,801C,868C,1799C,1895C,1924C,1959C,2373C,2396C 'like':1491C,1688C 'lin':160C,162C,174C,198C,200C,201C 'line':51C,86C,121C,204C,259C,645C,812C,822C,854C,874C,891C,2041C,2049C,2070C,2092C,2116C,2148C,2161C,2206C,2377C,2385C,2404C,2416C 'linear':158C,180C,184C,268C,305C,346C,390C,997C 'list':1274C,1281C,1395C,1403C,1454C,1465C,1480C,1595C,1603C,1650C,1661C,1676C 'lo':1067C,1323C,1490C,1687C,1977C,2251C,2295C,2296C,2424C,2445C,2464C,2477C 'log':1064C,1066C,1320C,1322C,1487C,1489C,1684C,1686C,1974C,1976C,2248C,2250C,2287C,2288C,2292C,2294C,2422C,2423C,2441C,2444C,2460C,2463C,2474C,2476C 'long':1885C,1914C 'loop':1519C 'lower':1348C,1384C,1411C,1611C,1782C,1808C,1970C 'maintain':1188C 'make':2165C 'march':710C,768C,958C,1017C,2311C 'mathbb':67C,156C,172C,193C,228C,249C,353C,434C,445C,480C,524C,565C,587C,674C,789C 'max':2110C,2131C,2150C,2163C,2173C,2184C,2208C,2211C,2224C,2226C 'maxim':2127C 'may':704C,922C 'mean':2367C 'measur':1131C 'meet':1817C 'mention':765C 'merg':1535C,1767C 'mid':164C,217C,443C,1831C 'minimum':1099C,1110C,1298C 'model':303C,343C,413C 'monoton':1318C,1492C,1689C 'move':1879C,1902C,1931C 'much':2282C 'must':2372C 'n':452C 'name':300C,339C,402C 'need':769C 'neq':251C 'new':1207C,1532C,1536C 'newli':1578C 'next':737C,1905C,1934C 'nh':906C 'nondecreas':2000C 'none':307C,349C,401C 'normal':1093C 'note':698C 'notin':533C 'notion':287C,508C 'number':686C,692C,1006C 'observ':137C,462C 'obtain':1469C,1665C 'octant':321C,373C,418C 'one':725C,746C,770C,2380C 'onto':1177C,1235C 'oper':293C 'optim':996C 'order':936C,1127C,1160C,1187C,1272C,1306C,1383C,1484C,1680C,2001C,2010C,2339C 'orient':778C 'origin':208C,1522C,1703C 'otherwis':1238C 'outlin':2308C 'output':894C,965C,985C,1024C,1052C,1280C,1401C,1601C 'overal':2467C 'overlin':71C 'overrightarrow':1900C,1929C,1964C,1966C,2037C,2071C,2117C,2149C,2162C,2207C,2210C 'p':1986C 'pair':40C,56C,114C,1021C 'part':1087C,1360C,1389C,2056C,2059C,2063C 'perform':1014C,1210C 'plane':99C,605C,1081C,1279C,1400C,1600C,1991C 'point':42C,47C,58C,116C,511C,521C,560C,602C,637C,654C,671C,689C,694C,713C,787C,815C,827C,829C,847C,867C,879C,888C,895C,930C,943C,948C,988C,1036C,1078C,1091C,1097C,1109C,1118C,1135C,1143C,1147C,1152C,1166C,1176C,1184C,1198C,1208C,1222C,1232C,1242C,1257C,1260C,1276C,1293C,1296C,1302C,1329C,1352C,1376C,1380C,1397C,1416C,1451C,1461C,1474C,1500C,1508C,1533C,1537C,1550C,1580C,1597C,1616C,1647C,1657C,1670C,1697C,1719C,1728C,1757C,1798C,1860C,1871C,1880C,1889C,1907C,1918C,1936C,1948C,1983C,1996C,2016C,2020C,2024C,2029C,2043C,2052C,2066C,2078C,2100C,2109C,2125C,2138C,2154C,2181C,2200C,2260C,2327C,2353C,2407C 'polar':1129C,1304C 'polygon':79C,94C,106C,129C,569C,610C,1171C,1562C,1568C 'polytop':527C,563C,585C 'pop':1239C 'posit':841C 'possibl':503C 'pq':72C,814C,824C,856C,1901C,1930C,1965C,1967C 'pqr':831C 'predic':773C 'previous':758C 'properti':961C 'proposit':430C,460C,573C,583C 'prove':783C,2171C 'push':1173C,1234C 'quadrant':320C,372C,417C 'quick':1972C 'radian':1133C 'ray':1138C 'rceil':1718C 'rectangl':88C 'recurs':1737C,2229C 'region':34C,36C,45C,63C 'relat':274C 'remain':1117C,1388C 'remark':960C 'remov':1145C,1448C,1557C,1588C,1644C 'repeat':1247C,1556C,1942C 'requir':1820C,2286C 'resolv':2007C 'respect':751C,1162C,1413C,1613C 'restrict':263C,297C,335C,398C 'result':1168C,1477C,1673C 'return':1253C,1764C,2342C 'rfloor':1727C 'right':105C,142C,173C,191C,196C,229C,247C,457C,538C,775C,804C,900C,917C,1124C,1717C,1726C,1849C,1850C,1898C,1927C,1962C,1985C,1988C,2062C,2361C,2375C,2400C,2414C 'rightarrow':905C,934C,945C 'rightmost':1375C,1549C,1723C,1859C,2023C 'run':1372C,2468C 'runtim':968C 's.pop':1314C 's.push':1316C 'say':1738C,2277C 'scan':1063C,1181C,1199C,2280C 'search':2430C 'segment':52C,122C,2093C 'select':1088C,1107C,1294C,2123C 'sensit':966C 'separ':2050C 'set':10C,15C,65C,146C,177C,233C,289C,302C,325C,341C,382C,404C,412C,478C,497C,522C,600C,633C,635C,652C,659C,672C,989C,1076C,1114C,1523C,1704C,1710C,1753C,1760C,1981C,2032C,2140C,2168C,2243C 'setminus':194C,536C,1122C,1847C 'sever':929C 'shatter':2257C 'show':574C 'side':2401C 'sign':791C,836C 'similar':209C,427C,490C 'simpl':1170C 'simplex':326C,384C,419C 'simpli':2090C,2232C 'sinc':1810C,2431C,2448C 'size':974C,982C,2267C 'smallest':183C,239C,608C,657C,727C,932C 'someon':2363C 'sort':1115C,1149C,1154C,1300C,1327C,1414C,1423C,1498C,1614C,1623C,1695C,1998C 'space':21C,32C,304C,344C,414C 'specif':29C 'spend':899C 'stack':1179C,1192C,1225C,1237C,1245C,1261C 'stand':2364C 'start':4C,730C,1031C,1289C,2255C,2318C 'state':681C 'step':1191C 'store':1262C 'straight':50C,85C,2040C 'string':2313C 'subhul':2303C,2317C,2383C,2391C,2395C,2420C,2435C 'suboptim':1019C 'subset':17C,66C,192C,248C,523C,1735C,2264C,2275C 'subseteq':73C,155C,433C,479C,673C 'subspac':185C,241C,309C,313C,352C,360C,406C,408C 'success':2329C 'successor':2370C,2438C 'sum':165C,218C,221C,357C,377C,441C,447C 'superset':487C 'surround':1196C 'symmetr':1815C 'take':2440C 'tangent':1783C,1803C,1809C,1813C,1971C,2376C,2415C 'tereest':1213C 'term':577C,683C 'test':779C,902C,919C,1249C 'text':345C,348C,350C,354C,358C,361C,364C,368C,371C,374C,380C,383C 'textbf':161C,199C,214C,254C,330C,334C,338C,342C,438C,474C,534C,539C,546C,552C,720C,741C,1740C,1745C,1769C,1774C,1786C,1791C,1833C,1837C,1842C,1845C,1863C,1874C,1892C,1910C,1921C,1939C,1951C,1956C 'therefor':2212C 'three':786C,940C,1086C,1506C 'tie':1105C,1338C,1422C,1622C,2006C,2122C 'time':675C,865C,998C,1203C,1354C,1593C,2297C,2425C,2446C,2465C,2469C 'total':908C 'triangl':87C 'turn':776C,901C,918C,1217C 'two':759C,877C,1221C,1231C,1402C,1602C,1709C,1802C,2026C,2055C 'type':294C,331C,387C 'u.pop':1444C,1640C 'u.push':1446C,1642C 'updat':1528C 'upper':1345C,1356C,1409C,1609C,1780C,1812C,2087C,2178C,2190C,2219C,2238C 'use':266C,498C,857C,2276C,2426C 'variant':2427C 'various':927C 'vec':813C,823C,855C 'vector':308C,351C,405C 'vee':938C 'vertex':543C,549C,578C,717C,738C,1591C,2175C,2334C,2348C,2388C 'vertic':594C,760C,1008C,1026C,1264C,1284C,1407C,1573C,1607C,2187C 'view':2409C 'visibl':1367C 'vmatrix':796C,798C,1827C,1829C 'want':493C 'way':428C,491C,1564C 'wedg':167C,220C,223C,446C,449C,455C,939C,1835C,1839C 'well':581C,881C 'whether':866C 'within':43C,61C,127C 'worst':702C,911C,1012C 'wrap':729C,2312C 'x0':1038C 'x1':1040C 'xn':1042C 'y0':1039C 'y1':1041C 'yn':1043C 'ﬁnd':2456C	\N
4	algorithms/graph/lowest-common-ancestor	en	Lowest Common Ancestor		'ancestor':3A 'common':2A 'content':6C 'header':4C 'lowest':1A	\N
\.


--
-- Data for Name: pagesWords; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."pagesWords" (word) FROM stdin;
\.


--
-- Data for Name: renderers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.renderers (key, "isEnabled", config) FROM stdin;
htmlAsciinema	f	{}
htmlBlockquotes	t	{}
htmlCodehighlighter	t	{}
htmlCore	t	{"absoluteLinks":false,"openExternalLinkNewTab":false,"relAttributeExternalLink":"noreferrer"}
htmlDiagram	t	{}
htmlImagePrefetch	f	{}
htmlMediaplayers	t	{}
htmlMermaid	t	{}
htmlSecurity	t	{"safeHTML":true,"allowIFrames":false}
htmlTabset	t	{}
htmlTwemoji	t	{}
markdownAbbr	t	{}
markdownCore	t	{"allowHTML":true,"linkify":true,"linebreaks":true,"typographer":false,"quotes":"English","underline":false}
markdownEmoji	t	{}
markdownExpandtabs	t	{"tabWidth":4}
markdownFootnotes	t	{}
markdownImsize	t	{}
markdownKatex	t	{"useInline":true,"useBlocks":true}
markdownKroki	f	{"server":"https://kroki.io","openMarker":"```kroki","closeMarker":"```"}
markdownMathjax	f	{"useInline":true,"useBlocks":true}
markdownMultiTable	f	{"multilineEnabled":true,"headerlessEnabled":true,"rowspanEnabled":true}
markdownPlantuml	t	{"server":"https://plantuml.requarks.io","openMarker":"```plantuml","closeMarker":"```","imageFormat":"svg"}
markdownSupsub	t	{"subEnabled":true,"supEnabled":true}
markdownTasklists	t	{}
openapiCore	t	{}
\.


--
-- Data for Name: searchEngines; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."searchEngines" (key, "isEnabled", config) FROM stdin;
algolia	f	{"appId":"","apiKey":"","indexName":"wiki"}
aws	f	{"domain":"","endpoint":"","region":"us-east-1","accessKeyId":"","secretAccessKey":"","AnalysisSchemeLang":"en"}
azure	f	{"serviceName":"","adminKey":"","indexName":"wiki"}
db	f	{}
elasticsearch	f	{"apiVersion":"6.x","hosts":"","indexName":"wiki","sniffOnStart":false,"sniffInterval":0}
manticore	f	{}
postgres	t	{"dictLanguage":"english"}
solr	f	{"host":"solr","port":8983,"core":"wiki","protocol":"http"}
sphinx	f	{}
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sessions (sid, sess, expired) FROM stdin;
\.


--
-- Data for Name: settings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.settings (key, value, "updatedAt") FROM stdin;
auth	{"audience":"urn:wiki.js","tokenExpiration":"30m","tokenRenewal":"14d"}	2020-07-29T05:58:12.460Z
certs	{"jwk":{"kty":"RSA","n":"0EjJS5m9QmyUXc9I5TJ8E87vMxQMr1y0o6QNflbx56EP_RztGJE2RD257J5EZ1AYRUnAb5QTOtqpyN1nNwNtG1O3h65nZcC3FMXjandDm_zgcdMqlLKNoFv3K0H_ICfu_eX22BSq0iXftun98AIxNhXwGnD3LC55Lr0Xbo3ZoDTVg64kloHGryg4sWkrDfedtepNeb6XmHNunBQRbGSwOUj5vE8_G_hWs0qVvyP6VErJxu0QP31Lh_cgSBb84qPdemyoZ0HNsQ4EK7W7IqjREeRVTDPUPuzb-XumxqxraCwufYt7uN3-3vHxNGNqlqN6mxsZXb0Sv2sqm_A7TPFRaw","e":"AQAB"},"public":"-----BEGIN RSA PUBLIC KEY-----\\nMIIBCgKCAQEA0EjJS5m9QmyUXc9I5TJ8E87vMxQMr1y0o6QNflbx56EP/RztGJE2\\nRD257J5EZ1AYRUnAb5QTOtqpyN1nNwNtG1O3h65nZcC3FMXjandDm/zgcdMqlLKN\\noFv3K0H/ICfu/eX22BSq0iXftun98AIxNhXwGnD3LC55Lr0Xbo3ZoDTVg64kloHG\\nryg4sWkrDfedtepNeb6XmHNunBQRbGSwOUj5vE8/G/hWs0qVvyP6VErJxu0QP31L\\nh/cgSBb84qPdemyoZ0HNsQ4EK7W7IqjREeRVTDPUPuzb+XumxqxraCwufYt7uN3+\\n3vHxNGNqlqN6mxsZXb0Sv2sqm/A7TPFRawIDAQAB\\n-----END RSA PUBLIC KEY-----\\n","private":"-----BEGIN RSA PRIVATE KEY-----\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: AES-256-CBC,09047BF21032C82D9E1D5FD2F44866F0\\n\\nlO5khMU4JFA+UNB7hZmGgFRvxfzsLTjiXitOaVGOKL74gWpZdXEpC+ud6KTKjarK\\n7975XVjQCOqQnbEGcszs2UThgZ84rEFPF6Ota4fbvfh1Mnieah7UJhsfzWSPw0oO\\nHR1h+oDzWXXt1K5wvQtPFnBnhjh0AnJaaLwBbVs+FaucEYZpPFwl7dhV3jQIQZCW\\nUb36lF4I1r6rRKZb0Dn+FrsTs2oYg7NQWCdTLvsaE1ZflTuWBbWk8NBjxUhn5TbV\\n6k/W0DToA9niIM/ziRbDK5n2lXSLyzPYqXfpVmnxNwMJVa6K7Ueki9oOJS+C8Gh6\\nbXQByjNbjtSOOq4vFCA3vdXW/oaQecYgtZ8IexUUH3S4h94YTCRYRyGVSjJhpGCs\\nHjumsXsAp3/1toLr3giOvyVx29sB+OiVAXIIPo5JpjwURxxa8YW0rthX9SSIvWeM\\nmitA+I/ggcNkIPCm7InSvPkwp1/f6hAKmZa+hXRKY2TM/J85/2ku5LR1jHDB/9Vq\\n8xWaMjqrvZSI4GK7tieTDpsaUPZI+utaqmMildhvPX+7NgegnLSqge/NP37lXY0T\\nJ9HmHZW9rc650Vfz1sdI0W7zCxlRQymEGT3YyvSmwDzdb6Uc1Zl2juG196qUr1Ul\\nYDKauDUdDtkFcxZQle+FY4y6Y2KaWvPoy98izxKpAFO4MyCEzMEkCrqyGyKbPgCt\\ntRB4TtfbuOmWgi2lJ24AbPiYWMT3WiDJVtIE6x1Zs0LYDsjuAQJELMKq9CZ66cg7\\nuYD/CB6rDay6/FiImhQypk82tR1uYShsoMwY6MQ+LrlgtlNTuHyVOQvEUTU0y6ni\\n7P0Xo9PEwkhQsPU7off3Lr5WCNZNWHqNGmvgvqZY5OjlhdlTGLlN7+s1O3hbXk4Z\\n2TVyIQCFmo7co14NCSj6OD3VmVqd+VhgqWY9TDDAjr6+2+uGdxMNd3twAgRjCVIl\\nup4suFIZhuh6Yp39EhRNJXdGChLM3SrfWGKybrePPH9pQwdVFCk29S+H1QxdiykD\\np7iarlHbGO7OkUaL+GJhApecjTjMht3Rt7D2PoiaVbLvdC9Wq45A7ug++Lo9N7AE\\n+bb6aC6XANHoRkC8JFoCMMpxKHZATF6g/RlwejZWokZbVCMnKW/rVeh3CPJ9nDZ2\\nxnNXeC/XbR/n3tO7SIQPKX9P9L/jKkLw2s9Xq+ElyjnZd54n1L1lr+mmUH1cRR4R\\nMZd1YvwNx8M+XZaGW02f4qSmII9+5OwH8mrDR0sIiEzTbIETbxc719QRM70myN6A\\nFLr1JLbhJCPGBpZXHb7oJ77XDBguTpQLlUVk+QN2S/z9Mc2e/PCzdykKDsa/KnjD\\nUZ+bc9cYkjt80dFTYfvYe8PgsCu09k3hiRA3HJ8d3oVd1lJME+tlrkLVXaBWSENV\\nb2uBYxPaW5Ves4MkzygnChP0eiVKNy1RidhvrcSagNEO0qP/xMF7C0gch2pXWg9y\\nzkjtHpGCjzvdXLLzKDqidTNdzV9/CPbJuzq7rpvAQ88sPTU62ZBEQN0GcJpTTvN8\\nUbzNv/OtkLFCjDW+V59ixXya76rt21yY7hnt6Zt8fYmULol5Pbzk8BJws7kPNzJL\\n-----END RSA PRIVATE KEY-----\\n"}	2020-07-29T05:58:12.467Z
graphEndpoint	{"v":"https://graph.requarks.io"}	2020-07-29T05:58:12.476Z
lang	{"code":"en","autoUpdate":true,"namespacing":false,"namespaces":[]}	2020-07-29T05:58:12.483Z
logo	{"hasLogo":false,"logoIsSquare":false}	2020-07-29T05:58:12.485Z
mail	{"senderName":"","senderEmail":"","host":"","port":465,"secure":true,"verifySSL":true,"user":"","pass":"","useDKIM":false,"dkimDomainName":"","dkimKeySelector":"","dkimPrivateKey":""}	2020-07-29T05:58:12.488Z
sessionSecret	{"v":"e776432be942d6438f2958ccbe7f77f02d7e1dfd6c51fc1cd388aabde1f13b3a"}	2020-07-29T05:58:12.493Z
telemetry	{"isEnabled":false,"clientId":"65a80367-5d93-4585-af7b-2f1042aa740f"}	2020-07-29T05:58:12.495Z
nav	{"mode":"MIXED"}	2020-07-29T13:25:39.443Z
theming	{"theme":"default","darkMode":true,"iconset":"fa","injectCSS":"","injectHead":"","injectBody":""}	2020-07-29T13:26:12.446Z
host	{"v":"https://wiki.liuchao.me"}	2020-08-05T10:26:45.202Z
title	{"v":"Today I Learned"}	2020-08-05T10:26:45.207Z
company	{"v":""}	2020-08-05T10:26:45.209Z
contentLicense	{"v":""}	2020-08-05T10:26:45.210Z
seo	{"description":"","robots":["index","follow"],"analyticsService":"","analyticsId":""}	2020-08-05T10:26:45.212Z
logoUrl	{"v":"https://static.requarks.io/logo/wikijs-butterfly.svg"}	2020-08-05T10:26:45.213Z
features	{"featurePageRatings":true,"featurePageComments":true,"featurePersonalWikis":true}	2020-08-05T10:26:45.214Z
security	{"securityOpenRedirect":true,"securityIframe":false,"securityReferrerPolicy":true,"securityTrustProxy":true,"securitySRI":true,"securityHSTS":false,"securityHSTSDuration":300,"securityCSP":false,"securityCSPDirectives":""}	2020-08-05T10:26:45.215Z
uploads	{"maxFileSize":5242880,"maxFiles":10}	2020-08-05T10:26:45.217Z
\.


--
-- Data for Name: storage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.storage (key, "isEnabled", mode, config, "syncInterval", state) FROM stdin;
azure	f	push	{"accountName":"","accountKey":"","containerName":"wiki","storageTier":"Cool"}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
box	f	push	{"clientId":"","clientSecret":"","rootFolder":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
digitalocean	f	push	{"endpoint":"nyc3.digitaloceanspaces.com","bucket":"","accessKeyId":"","secretAccessKey":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
dropbox	f	push	{"appKey":"","appSecret":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
gdrive	f	push	{"clientId":"","clientSecret":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
git	f	sync	{"authType":"ssh","repoUrl":"","branch":"master","sshPrivateKeyMode":"path","sshPrivateKeyPath":"","sshPrivateKeyContent":"","verifySSL":true,"basicUsername":"","basicPassword":"","defaultEmail":"name@company.com","defaultName":"John Smith","localRepoPath":"./data/repo","gitBinaryPath":""}	PT5M	{"status":"pending","message":"Initializing...","lastAttempt":null}
onedrive	f	push	{"clientId":"","clientSecret":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
s3	f	push	{"region":"","bucket":"","accessKeyId":"","secretAccessKey":""}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
s3generic	f	push	{"endpoint":"https://service.region.example.com","bucket":"","accessKeyId":"","secretAccessKey":"","sslEnabled":true,"s3ForcePathStyle":false,"s3BucketEndpoint":false}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
sftp	f	push	{"host":"","port":22,"authMode":"privateKey","username":"","privateKey":"","passphrase":"","password":"","basePath":"/root/wiki"}	P0D	{"status":"pending","message":"Initializing...","lastAttempt":null}
disk	t	push	{"path":"/opt/backup","createDailyBackups":true}	P0D	{"status":"operational","message":"","lastAttempt":"2020-09-10T05:35:52.748Z"}
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tags (id, tag, title, "createdAt", "updatedAt") FROM stdin;
2	algorithm	algorithm	2020-07-29T14:37:52.667Z	2020-07-29T14:37:52.667Z
3	graph	graph	2020-07-29T14:37:52.667Z	2020-07-29T14:37:52.667Z
4	golang	golang	2020-09-09T02:50:51.157Z	2020-09-09T02:50:51.157Z
\.


--
-- Data for Name: userAvatars; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."userAvatars" (id, data) FROM stdin;
\.


--
-- Data for Name: userGroups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."userGroups" (id, "userId", "groupId") FROM stdin;
1	1	1
2	2	2
\.


--
-- Data for Name: userKeys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."userKeys" (id, kind, token, "createdAt", "validUntil", "userId") FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, email, name, "providerId", password, "tfaIsActive", "tfaSecret", "jobTitle", location, "pictureUrl", timezone, "isSystem", "isActive", "isVerified", "mustChangePwd", "createdAt", "updatedAt", "providerKey", "localeCode", "defaultEditor", "lastLoginAt", "dateFormat", appearance) FROM stdin;
2	guest@example.com	Guest	\N		f	\N			\N	America/New_York	t	t	t	f	2020-07-29T05:58:13.237Z	2020-07-29T05:58:13.237Z	local	en	markdown	\N		
1	thesedays@126.com	Administrator	\N	$2a$12$LMfDR67.Chvw07nv5AwtqutkYof3u/HPN79Zh496nhAyEhzwGNAI6	f	\N			\N	Asia/Hong_Kong	f	t	t	f	2020-07-29T05:58:12.859Z	2020-07-29T06:25:41.296Z	local	en	markdown	2020-09-10T05:38:18.017Z	YYYY-MM-DD	dark
\.


--
-- Name: apiKeys_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."apiKeys_id_seq"', 1, false);


--
-- Name: assetFolders_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."assetFolders_id_seq"', 5, true);


--
-- Name: assets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.assets_id_seq', 11, true);


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.comments_id_seq', 1, false);


--
-- Name: groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.groups_id_seq', 2, true);


--
-- Name: migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.migrations_id_seq', 15, true);


--
-- Name: migrations_lock_index_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.migrations_lock_index_seq', 1, true);


--
-- Name: pageHistoryTags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."pageHistoryTags_id_seq"', 1, false);


--
-- Name: pageHistory_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."pageHistory_id_seq"', 53, true);


--
-- Name: pageLinks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."pageLinks_id_seq"', 1, false);


--
-- Name: pageTags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."pageTags_id_seq"', 6, true);


--
-- Name: pagesVector_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."pagesVector_id_seq"', 5, true);


--
-- Name: pages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.pages_id_seq', 6, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_id_seq', 4, true);


--
-- Name: userGroups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."userGroups_id_seq"', 2, true);


--
-- Name: userKeys_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."userKeys_id_seq"', 1, false);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 2, true);


--
-- Name: analytics analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.analytics
    ADD CONSTRAINT analytics_pkey PRIMARY KEY (key);


--
-- Name: apiKeys apiKeys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."apiKeys"
    ADD CONSTRAINT "apiKeys_pkey" PRIMARY KEY (id);


--
-- Name: assetData assetData_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."assetData"
    ADD CONSTRAINT "assetData_pkey" PRIMARY KEY (id);


--
-- Name: assetFolders assetFolders_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."assetFolders"
    ADD CONSTRAINT "assetFolders_pkey" PRIMARY KEY (id);


--
-- Name: assets assets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assets
    ADD CONSTRAINT assets_pkey PRIMARY KEY (id);


--
-- Name: authentication authentication_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.authentication
    ADD CONSTRAINT authentication_pkey PRIMARY KEY (key);


--
-- Name: commentProviders commentProviders_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."commentProviders"
    ADD CONSTRAINT "commentProviders_pkey" PRIMARY KEY (key);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: editors editors_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.editors
    ADD CONSTRAINT editors_pkey PRIMARY KEY (key);


--
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- Name: locales locales_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.locales
    ADD CONSTRAINT locales_pkey PRIMARY KEY (code);


--
-- Name: loggers loggers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.loggers
    ADD CONSTRAINT loggers_pkey PRIMARY KEY (key);


--
-- Name: migrations_lock migrations_lock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations_lock
    ADD CONSTRAINT migrations_lock_pkey PRIMARY KEY (index);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: navigation navigation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.navigation
    ADD CONSTRAINT navigation_pkey PRIMARY KEY (key);


--
-- Name: pageHistoryTags pageHistoryTags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistoryTags"
    ADD CONSTRAINT "pageHistoryTags_pkey" PRIMARY KEY (id);


--
-- Name: pageHistory pageHistory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistory"
    ADD CONSTRAINT "pageHistory_pkey" PRIMARY KEY (id);


--
-- Name: pageLinks pageLinks_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageLinks"
    ADD CONSTRAINT "pageLinks_pkey" PRIMARY KEY (id);


--
-- Name: pageTags pageTags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTags"
    ADD CONSTRAINT "pageTags_pkey" PRIMARY KEY (id);


--
-- Name: pageTree pageTree_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTree"
    ADD CONSTRAINT "pageTree_pkey" PRIMARY KEY (id);


--
-- Name: pagesVector pagesVector_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pagesVector"
    ADD CONSTRAINT "pagesVector_pkey" PRIMARY KEY (id);


--
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- Name: renderers renderers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.renderers
    ADD CONSTRAINT renderers_pkey PRIMARY KEY (key);


--
-- Name: searchEngines searchEngines_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."searchEngines"
    ADD CONSTRAINT "searchEngines_pkey" PRIMARY KEY (key);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (sid);


--
-- Name: settings settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.settings
    ADD CONSTRAINT settings_pkey PRIMARY KEY (key);


--
-- Name: storage storage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.storage
    ADD CONSTRAINT storage_pkey PRIMARY KEY (key);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: tags tags_tag_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_tag_unique UNIQUE (tag);


--
-- Name: userAvatars userAvatars_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userAvatars"
    ADD CONSTRAINT "userAvatars_pkey" PRIMARY KEY (id);


--
-- Name: userGroups userGroups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userGroups"
    ADD CONSTRAINT "userGroups_pkey" PRIMARY KEY (id);


--
-- Name: userKeys userKeys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userKeys"
    ADD CONSTRAINT "userKeys_pkey" PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: users users_providerkey_email_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_providerkey_email_unique UNIQUE ("providerKey", email);


--
-- Name: pageWords_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "pageWords_idx" ON public."pagesWords" USING gin (word public.gin_trgm_ops);


--
-- Name: pagelinks_path_localecode_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pagelinks_path_localecode_index ON public."pageLinks" USING btree (path, "localeCode");


--
-- Name: sessions_expired_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX sessions_expired_index ON public.sessions USING btree (expired);


--
-- Name: assetFolders assetfolders_parentid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."assetFolders"
    ADD CONSTRAINT assetfolders_parentid_foreign FOREIGN KEY ("parentId") REFERENCES public."assetFolders"(id);


--
-- Name: assets assets_authorid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assets
    ADD CONSTRAINT assets_authorid_foreign FOREIGN KEY ("authorId") REFERENCES public.users(id);


--
-- Name: assets assets_folderid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.assets
    ADD CONSTRAINT assets_folderid_foreign FOREIGN KEY ("folderId") REFERENCES public."assetFolders"(id);


--
-- Name: comments comments_authorid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_authorid_foreign FOREIGN KEY ("authorId") REFERENCES public.users(id);


--
-- Name: comments comments_pageid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_pageid_foreign FOREIGN KEY ("pageId") REFERENCES public.pages(id);


--
-- Name: pageHistory pagehistory_authorid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistory"
    ADD CONSTRAINT pagehistory_authorid_foreign FOREIGN KEY ("authorId") REFERENCES public.users(id);


--
-- Name: pageHistory pagehistory_editorkey_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistory"
    ADD CONSTRAINT pagehistory_editorkey_foreign FOREIGN KEY ("editorKey") REFERENCES public.editors(key);


--
-- Name: pageHistory pagehistory_localecode_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistory"
    ADD CONSTRAINT pagehistory_localecode_foreign FOREIGN KEY ("localeCode") REFERENCES public.locales(code);


--
-- Name: pageHistoryTags pagehistorytags_pageid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistoryTags"
    ADD CONSTRAINT pagehistorytags_pageid_foreign FOREIGN KEY ("pageId") REFERENCES public."pageHistory"(id) ON DELETE CASCADE;


--
-- Name: pageHistoryTags pagehistorytags_tagid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageHistoryTags"
    ADD CONSTRAINT pagehistorytags_tagid_foreign FOREIGN KEY ("tagId") REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: pageLinks pagelinks_pageid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageLinks"
    ADD CONSTRAINT pagelinks_pageid_foreign FOREIGN KEY ("pageId") REFERENCES public.pages(id) ON DELETE CASCADE;


--
-- Name: pages pages_authorid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_authorid_foreign FOREIGN KEY ("authorId") REFERENCES public.users(id);


--
-- Name: pages pages_creatorid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_creatorid_foreign FOREIGN KEY ("creatorId") REFERENCES public.users(id);


--
-- Name: pages pages_editorkey_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_editorkey_foreign FOREIGN KEY ("editorKey") REFERENCES public.editors(key);


--
-- Name: pages pages_localecode_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pages
    ADD CONSTRAINT pages_localecode_foreign FOREIGN KEY ("localeCode") REFERENCES public.locales(code);


--
-- Name: pageTags pagetags_pageid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTags"
    ADD CONSTRAINT pagetags_pageid_foreign FOREIGN KEY ("pageId") REFERENCES public.pages(id) ON DELETE CASCADE;


--
-- Name: pageTags pagetags_tagid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTags"
    ADD CONSTRAINT pagetags_tagid_foreign FOREIGN KEY ("tagId") REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: pageTree pagetree_localecode_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTree"
    ADD CONSTRAINT pagetree_localecode_foreign FOREIGN KEY ("localeCode") REFERENCES public.locales(code);


--
-- Name: pageTree pagetree_pageid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTree"
    ADD CONSTRAINT pagetree_pageid_foreign FOREIGN KEY ("pageId") REFERENCES public.pages(id) ON DELETE CASCADE;


--
-- Name: pageTree pagetree_parent_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."pageTree"
    ADD CONSTRAINT pagetree_parent_foreign FOREIGN KEY (parent) REFERENCES public."pageTree"(id) ON DELETE CASCADE;


--
-- Name: userGroups usergroups_groupid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userGroups"
    ADD CONSTRAINT usergroups_groupid_foreign FOREIGN KEY ("groupId") REFERENCES public.groups(id) ON DELETE CASCADE;


--
-- Name: userGroups usergroups_userid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userGroups"
    ADD CONSTRAINT usergroups_userid_foreign FOREIGN KEY ("userId") REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: userKeys userkeys_userid_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."userKeys"
    ADD CONSTRAINT userkeys_userid_foreign FOREIGN KEY ("userId") REFERENCES public.users(id);


--
-- Name: users users_defaulteditor_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_defaulteditor_foreign FOREIGN KEY ("defaultEditor") REFERENCES public.editors(key);


--
-- Name: users users_localecode_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_localecode_foreign FOREIGN KEY ("localeCode") REFERENCES public.locales(code);


--
-- Name: users users_providerkey_foreign; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_providerkey_foreign FOREIGN KEY ("providerKey") REFERENCES public.authentication(key);


--
-- PostgreSQL database dump complete
--

