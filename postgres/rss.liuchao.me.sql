--
-- PostgreSQL database dump
--

-- Dumped from database version 11.7 (Debian 11.7-0+deb10u1)
-- Dumped by pg_dump version 11.7 (Debian 11.7-0+deb10u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: substring_for_date(timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.substring_for_date(timestamp without time zone, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT SUBSTRING(CAST($1 AS text), $2, $3)$_$;


ALTER FUNCTION public.substring_for_date(timestamp without time zone, integer, integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ttrss_access_keys; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_access_keys (
    id integer NOT NULL,
    access_key character varying(250) NOT NULL,
    feed_id character varying(250) NOT NULL,
    is_cat boolean DEFAULT false NOT NULL,
    owner_uid integer NOT NULL
);


ALTER TABLE public.ttrss_access_keys OWNER TO postgres;

--
-- Name: ttrss_access_keys_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_access_keys_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_access_keys_id_seq OWNER TO postgres;

--
-- Name: ttrss_access_keys_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_access_keys_id_seq OWNED BY public.ttrss_access_keys.id;


--
-- Name: ttrss_app_passwords; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_app_passwords (
    id integer NOT NULL,
    title character varying(250) NOT NULL,
    pwd_hash text NOT NULL,
    service character varying(100) NOT NULL,
    created timestamp without time zone NOT NULL,
    last_used timestamp without time zone,
    owner_uid integer NOT NULL
);


ALTER TABLE public.ttrss_app_passwords OWNER TO postgres;

--
-- Name: ttrss_app_passwords_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_app_passwords_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_app_passwords_id_seq OWNER TO postgres;

--
-- Name: ttrss_app_passwords_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_app_passwords_id_seq OWNED BY public.ttrss_app_passwords.id;


--
-- Name: ttrss_archived_feeds; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_archived_feeds (
    id integer NOT NULL,
    owner_uid integer NOT NULL,
    created timestamp without time zone NOT NULL,
    title character varying(200) NOT NULL,
    feed_url text NOT NULL,
    site_url character varying(250) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.ttrss_archived_feeds OWNER TO postgres;

--
-- Name: ttrss_cat_counters_cache; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_cat_counters_cache (
    feed_id integer NOT NULL,
    owner_uid integer NOT NULL,
    updated timestamp without time zone NOT NULL,
    value integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.ttrss_cat_counters_cache OWNER TO postgres;

--
-- Name: ttrss_counters_cache; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_counters_cache (
    feed_id integer NOT NULL,
    owner_uid integer NOT NULL,
    updated timestamp without time zone NOT NULL,
    value integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.ttrss_counters_cache OWNER TO postgres;

--
-- Name: ttrss_enclosures; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_enclosures (
    id integer NOT NULL,
    content_url text NOT NULL,
    content_type character varying(250) NOT NULL,
    title text NOT NULL,
    duration text NOT NULL,
    width integer DEFAULT 0 NOT NULL,
    height integer DEFAULT 0 NOT NULL,
    post_id integer NOT NULL
);


ALTER TABLE public.ttrss_enclosures OWNER TO postgres;

--
-- Name: ttrss_enclosures_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_enclosures_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_enclosures_id_seq OWNER TO postgres;

--
-- Name: ttrss_enclosures_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_enclosures_id_seq OWNED BY public.ttrss_enclosures.id;


--
-- Name: ttrss_entries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_entries (
    id integer NOT NULL,
    title text NOT NULL,
    guid text NOT NULL,
    link text NOT NULL,
    updated timestamp without time zone NOT NULL,
    content text NOT NULL,
    content_hash character varying(250) NOT NULL,
    cached_content text,
    no_orig_date boolean DEFAULT false NOT NULL,
    date_entered timestamp without time zone NOT NULL,
    date_updated timestamp without time zone NOT NULL,
    num_comments integer DEFAULT 0 NOT NULL,
    comments character varying(250) DEFAULT ''::character varying NOT NULL,
    plugin_data text,
    tsvector_combined tsvector,
    lang character varying(2),
    author character varying(250) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.ttrss_entries OWNER TO postgres;

--
-- Name: ttrss_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_entries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_entries_id_seq OWNER TO postgres;

--
-- Name: ttrss_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_entries_id_seq OWNED BY public.ttrss_entries.id;


--
-- Name: ttrss_entry_comments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_entry_comments (
    id integer NOT NULL,
    ref_id integer NOT NULL,
    owner_uid integer NOT NULL,
    private boolean DEFAULT false NOT NULL,
    date_entered timestamp without time zone NOT NULL
);


ALTER TABLE public.ttrss_entry_comments OWNER TO postgres;

--
-- Name: ttrss_entry_comments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_entry_comments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_entry_comments_id_seq OWNER TO postgres;

--
-- Name: ttrss_entry_comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_entry_comments_id_seq OWNED BY public.ttrss_entry_comments.id;


--
-- Name: ttrss_error_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_error_log (
    id integer NOT NULL,
    owner_uid integer,
    errno integer NOT NULL,
    errstr text NOT NULL,
    filename text NOT NULL,
    lineno integer NOT NULL,
    context text NOT NULL,
    created_at timestamp without time zone NOT NULL
);


ALTER TABLE public.ttrss_error_log OWNER TO postgres;

--
-- Name: ttrss_error_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_error_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_error_log_id_seq OWNER TO postgres;

--
-- Name: ttrss_error_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_error_log_id_seq OWNED BY public.ttrss_error_log.id;


--
-- Name: ttrss_feed_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_feed_categories (
    id integer NOT NULL,
    owner_uid integer NOT NULL,
    collapsed boolean DEFAULT false NOT NULL,
    order_id integer DEFAULT 0 NOT NULL,
    view_settings character varying(250) DEFAULT ''::character varying NOT NULL,
    parent_cat integer,
    title character varying(200) NOT NULL
);


ALTER TABLE public.ttrss_feed_categories OWNER TO postgres;

--
-- Name: ttrss_feed_categories_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_feed_categories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_feed_categories_id_seq OWNER TO postgres;

--
-- Name: ttrss_feed_categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_feed_categories_id_seq OWNED BY public.ttrss_feed_categories.id;


--
-- Name: ttrss_feedbrowser_cache; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_feedbrowser_cache (
    feed_url text NOT NULL,
    title text NOT NULL,
    site_url text NOT NULL,
    subscribers integer NOT NULL
);


ALTER TABLE public.ttrss_feedbrowser_cache OWNER TO postgres;

--
-- Name: ttrss_feeds; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_feeds (
    id integer NOT NULL,
    owner_uid integer NOT NULL,
    title character varying(200) NOT NULL,
    cat_id integer,
    feed_url text NOT NULL,
    icon_url character varying(250) DEFAULT ''::character varying NOT NULL,
    update_interval integer DEFAULT 0 NOT NULL,
    purge_interval integer DEFAULT 0 NOT NULL,
    last_updated timestamp without time zone,
    last_unconditional timestamp without time zone,
    last_error text DEFAULT ''::text NOT NULL,
    last_modified text DEFAULT ''::text NOT NULL,
    favicon_avg_color character varying(11) DEFAULT NULL::character varying,
    site_url character varying(250) DEFAULT ''::character varying NOT NULL,
    auth_login character varying(250) DEFAULT ''::character varying NOT NULL,
    parent_feed integer,
    private boolean DEFAULT false NOT NULL,
    auth_pass character varying(250) DEFAULT ''::character varying NOT NULL,
    hidden boolean DEFAULT false NOT NULL,
    include_in_digest boolean DEFAULT true NOT NULL,
    rtl_content boolean DEFAULT false NOT NULL,
    cache_images boolean DEFAULT false NOT NULL,
    hide_images boolean DEFAULT false NOT NULL,
    cache_content boolean DEFAULT false NOT NULL,
    last_viewed timestamp without time zone,
    last_update_started timestamp without time zone,
    update_method integer DEFAULT 0 NOT NULL,
    always_display_enclosures boolean DEFAULT false NOT NULL,
    order_id integer DEFAULT 0 NOT NULL,
    mark_unread_on_update boolean DEFAULT false NOT NULL,
    update_on_checksum_change boolean DEFAULT false NOT NULL,
    strip_images boolean DEFAULT false NOT NULL,
    view_settings character varying(250) DEFAULT ''::character varying NOT NULL,
    pubsub_state integer DEFAULT 0 NOT NULL,
    favicon_last_checked timestamp without time zone,
    feed_language character varying(100) DEFAULT ''::character varying NOT NULL,
    auth_pass_encrypted boolean DEFAULT false NOT NULL
);


ALTER TABLE public.ttrss_feeds OWNER TO postgres;

--
-- Name: ttrss_feeds_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_feeds_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_feeds_id_seq OWNER TO postgres;

--
-- Name: ttrss_feeds_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_feeds_id_seq OWNED BY public.ttrss_feeds.id;


--
-- Name: ttrss_filter_actions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_filter_actions (
    id integer NOT NULL,
    name character varying(120) NOT NULL,
    description character varying(250) NOT NULL
);


ALTER TABLE public.ttrss_filter_actions OWNER TO postgres;

--
-- Name: ttrss_filter_types; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_filter_types (
    id integer NOT NULL,
    name character varying(120) NOT NULL,
    description character varying(250) NOT NULL
);


ALTER TABLE public.ttrss_filter_types OWNER TO postgres;

--
-- Name: ttrss_filters2; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_filters2 (
    id integer NOT NULL,
    owner_uid integer NOT NULL,
    match_any_rule boolean DEFAULT false NOT NULL,
    inverse boolean DEFAULT false NOT NULL,
    title character varying(250) DEFAULT ''::character varying NOT NULL,
    order_id integer DEFAULT 0 NOT NULL,
    last_triggered timestamp without time zone,
    enabled boolean DEFAULT true NOT NULL
);


ALTER TABLE public.ttrss_filters2 OWNER TO postgres;

--
-- Name: ttrss_filters2_actions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_filters2_actions (
    id integer NOT NULL,
    filter_id integer NOT NULL,
    action_id integer DEFAULT 1 NOT NULL,
    action_param character varying(250) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE public.ttrss_filters2_actions OWNER TO postgres;

--
-- Name: ttrss_filters2_actions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_filters2_actions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_filters2_actions_id_seq OWNER TO postgres;

--
-- Name: ttrss_filters2_actions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_filters2_actions_id_seq OWNED BY public.ttrss_filters2_actions.id;


--
-- Name: ttrss_filters2_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_filters2_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_filters2_id_seq OWNER TO postgres;

--
-- Name: ttrss_filters2_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_filters2_id_seq OWNED BY public.ttrss_filters2.id;


--
-- Name: ttrss_filters2_rules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_filters2_rules (
    id integer NOT NULL,
    filter_id integer NOT NULL,
    reg_exp text NOT NULL,
    inverse boolean DEFAULT false NOT NULL,
    filter_type integer NOT NULL,
    feed_id integer,
    cat_id integer,
    match_on text,
    cat_filter boolean DEFAULT false NOT NULL
);


ALTER TABLE public.ttrss_filters2_rules OWNER TO postgres;

--
-- Name: ttrss_filters2_rules_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_filters2_rules_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_filters2_rules_id_seq OWNER TO postgres;

--
-- Name: ttrss_filters2_rules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_filters2_rules_id_seq OWNED BY public.ttrss_filters2_rules.id;


--
-- Name: ttrss_labels2; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_labels2 (
    id integer NOT NULL,
    owner_uid integer NOT NULL,
    fg_color character varying(15) DEFAULT ''::character varying NOT NULL,
    bg_color character varying(15) DEFAULT ''::character varying NOT NULL,
    caption character varying(250) NOT NULL
);


ALTER TABLE public.ttrss_labels2 OWNER TO postgres;

--
-- Name: ttrss_labels2_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_labels2_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_labels2_id_seq OWNER TO postgres;

--
-- Name: ttrss_labels2_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_labels2_id_seq OWNED BY public.ttrss_labels2.id;


--
-- Name: ttrss_linked_feeds; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_linked_feeds (
    feed_url text NOT NULL,
    site_url text NOT NULL,
    title text NOT NULL,
    created timestamp without time zone NOT NULL,
    updated timestamp without time zone NOT NULL,
    instance_id integer NOT NULL,
    subscribers integer NOT NULL
);


ALTER TABLE public.ttrss_linked_feeds OWNER TO postgres;

--
-- Name: ttrss_linked_instances; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_linked_instances (
    id integer NOT NULL,
    last_connected timestamp without time zone NOT NULL,
    last_status_in integer NOT NULL,
    last_status_out integer NOT NULL,
    access_key character varying(250) NOT NULL,
    access_url text NOT NULL
);


ALTER TABLE public.ttrss_linked_instances OWNER TO postgres;

--
-- Name: ttrss_linked_instances_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_linked_instances_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_linked_instances_id_seq OWNER TO postgres;

--
-- Name: ttrss_linked_instances_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_linked_instances_id_seq OWNED BY public.ttrss_linked_instances.id;


--
-- Name: ttrss_plugin_storage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_plugin_storage (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    owner_uid integer NOT NULL,
    content text NOT NULL
);


ALTER TABLE public.ttrss_plugin_storage OWNER TO postgres;

--
-- Name: ttrss_plugin_storage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_plugin_storage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_plugin_storage_id_seq OWNER TO postgres;

--
-- Name: ttrss_plugin_storage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_plugin_storage_id_seq OWNED BY public.ttrss_plugin_storage.id;


--
-- Name: ttrss_prefs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_prefs (
    pref_name character varying(250) NOT NULL,
    type_id integer NOT NULL,
    section_id integer DEFAULT 1 NOT NULL,
    access_level integer DEFAULT 0 NOT NULL,
    def_value text NOT NULL
);


ALTER TABLE public.ttrss_prefs OWNER TO postgres;

--
-- Name: ttrss_prefs_sections; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_prefs_sections (
    id integer NOT NULL,
    order_id integer NOT NULL,
    section_name character varying(100) NOT NULL
);


ALTER TABLE public.ttrss_prefs_sections OWNER TO postgres;

--
-- Name: ttrss_prefs_types; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_prefs_types (
    id integer NOT NULL,
    type_name character varying(100) NOT NULL
);


ALTER TABLE public.ttrss_prefs_types OWNER TO postgres;

--
-- Name: ttrss_sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_sessions (
    id character varying(250) NOT NULL,
    data text,
    expire integer NOT NULL
);


ALTER TABLE public.ttrss_sessions OWNER TO postgres;

--
-- Name: ttrss_settings_profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_settings_profiles (
    id integer NOT NULL,
    title character varying(250) NOT NULL,
    owner_uid integer NOT NULL
);


ALTER TABLE public.ttrss_settings_profiles OWNER TO postgres;

--
-- Name: ttrss_settings_profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_settings_profiles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_settings_profiles_id_seq OWNER TO postgres;

--
-- Name: ttrss_settings_profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_settings_profiles_id_seq OWNED BY public.ttrss_settings_profiles.id;


--
-- Name: ttrss_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_tags (
    id integer NOT NULL,
    tag_name character varying(250) NOT NULL,
    owner_uid integer NOT NULL,
    post_int_id integer NOT NULL
);


ALTER TABLE public.ttrss_tags OWNER TO postgres;

--
-- Name: ttrss_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_tags_id_seq OWNER TO postgres;

--
-- Name: ttrss_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_tags_id_seq OWNED BY public.ttrss_tags.id;


--
-- Name: ttrss_user_entries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_user_entries (
    int_id integer NOT NULL,
    ref_id integer NOT NULL,
    uuid character varying(200) NOT NULL,
    feed_id integer,
    orig_feed_id integer,
    owner_uid integer NOT NULL,
    marked boolean DEFAULT false NOT NULL,
    published boolean DEFAULT false NOT NULL,
    tag_cache text NOT NULL,
    label_cache text NOT NULL,
    last_read timestamp without time zone,
    score integer DEFAULT 0 NOT NULL,
    last_marked timestamp without time zone,
    last_published timestamp without time zone,
    note text,
    unread boolean DEFAULT true NOT NULL
);


ALTER TABLE public.ttrss_user_entries OWNER TO postgres;

--
-- Name: ttrss_user_entries_int_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_user_entries_int_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_user_entries_int_id_seq OWNER TO postgres;

--
-- Name: ttrss_user_entries_int_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_user_entries_int_id_seq OWNED BY public.ttrss_user_entries.int_id;


--
-- Name: ttrss_user_labels2; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_user_labels2 (
    label_id integer NOT NULL,
    article_id integer NOT NULL
);


ALTER TABLE public.ttrss_user_labels2 OWNER TO postgres;

--
-- Name: ttrss_user_prefs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_user_prefs (
    owner_uid integer NOT NULL,
    pref_name character varying(250) NOT NULL,
    profile integer,
    value text NOT NULL
);


ALTER TABLE public.ttrss_user_prefs OWNER TO postgres;

--
-- Name: ttrss_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_users (
    id integer NOT NULL,
    login character varying(120) NOT NULL,
    pwd_hash character varying(250) NOT NULL,
    last_login timestamp without time zone,
    access_level integer DEFAULT 0 NOT NULL,
    email character varying(250) DEFAULT ''::character varying NOT NULL,
    full_name character varying(250) DEFAULT ''::character varying NOT NULL,
    email_digest boolean DEFAULT false NOT NULL,
    last_digest_sent timestamp without time zone,
    salt character varying(250) DEFAULT ''::character varying NOT NULL,
    twitter_oauth text,
    otp_enabled boolean DEFAULT false NOT NULL,
    resetpass_token character varying(250) DEFAULT NULL::character varying,
    created timestamp without time zone
);


ALTER TABLE public.ttrss_users OWNER TO postgres;

--
-- Name: ttrss_users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ttrss_users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ttrss_users_id_seq OWNER TO postgres;

--
-- Name: ttrss_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ttrss_users_id_seq OWNED BY public.ttrss_users.id;


--
-- Name: ttrss_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ttrss_version (
    schema_version integer NOT NULL
);


ALTER TABLE public.ttrss_version OWNER TO postgres;

--
-- Name: ttrss_access_keys id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_access_keys ALTER COLUMN id SET DEFAULT nextval('public.ttrss_access_keys_id_seq'::regclass);


--
-- Name: ttrss_app_passwords id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_app_passwords ALTER COLUMN id SET DEFAULT nextval('public.ttrss_app_passwords_id_seq'::regclass);


--
-- Name: ttrss_enclosures id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_enclosures ALTER COLUMN id SET DEFAULT nextval('public.ttrss_enclosures_id_seq'::regclass);


--
-- Name: ttrss_entries id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entries ALTER COLUMN id SET DEFAULT nextval('public.ttrss_entries_id_seq'::regclass);


--
-- Name: ttrss_entry_comments id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entry_comments ALTER COLUMN id SET DEFAULT nextval('public.ttrss_entry_comments_id_seq'::regclass);


--
-- Name: ttrss_error_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_error_log ALTER COLUMN id SET DEFAULT nextval('public.ttrss_error_log_id_seq'::regclass);


--
-- Name: ttrss_feed_categories id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feed_categories ALTER COLUMN id SET DEFAULT nextval('public.ttrss_feed_categories_id_seq'::regclass);


--
-- Name: ttrss_feeds id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds ALTER COLUMN id SET DEFAULT nextval('public.ttrss_feeds_id_seq'::regclass);


--
-- Name: ttrss_filters2 id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2 ALTER COLUMN id SET DEFAULT nextval('public.ttrss_filters2_id_seq'::regclass);


--
-- Name: ttrss_filters2_actions id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_actions ALTER COLUMN id SET DEFAULT nextval('public.ttrss_filters2_actions_id_seq'::regclass);


--
-- Name: ttrss_filters2_rules id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules ALTER COLUMN id SET DEFAULT nextval('public.ttrss_filters2_rules_id_seq'::regclass);


--
-- Name: ttrss_labels2 id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_labels2 ALTER COLUMN id SET DEFAULT nextval('public.ttrss_labels2_id_seq'::regclass);


--
-- Name: ttrss_linked_instances id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_linked_instances ALTER COLUMN id SET DEFAULT nextval('public.ttrss_linked_instances_id_seq'::regclass);


--
-- Name: ttrss_plugin_storage id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_plugin_storage ALTER COLUMN id SET DEFAULT nextval('public.ttrss_plugin_storage_id_seq'::regclass);


--
-- Name: ttrss_settings_profiles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_settings_profiles ALTER COLUMN id SET DEFAULT nextval('public.ttrss_settings_profiles_id_seq'::regclass);


--
-- Name: ttrss_tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_tags ALTER COLUMN id SET DEFAULT nextval('public.ttrss_tags_id_seq'::regclass);


--
-- Name: ttrss_user_entries int_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries ALTER COLUMN int_id SET DEFAULT nextval('public.ttrss_user_entries_int_id_seq'::regclass);


--
-- Name: ttrss_users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_users ALTER COLUMN id SET DEFAULT nextval('public.ttrss_users_id_seq'::regclass);


--
-- Data for Name: ttrss_access_keys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_access_keys (id, access_key, feed_id, is_cat, owner_uid) FROM stdin;
1	1pkqtb5f361b1d87f52	-3	f	1
3	4hu06v5f361c2c742e0	-4	f	1
4	qsuu3k5f47c43b50b8d	-2	f	1
\.


--
-- Data for Name: ttrss_app_passwords; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_app_passwords (id, title, pwd_hash, service, created, last_used, owner_uid) FROM stdin;
\.


--
-- Data for Name: ttrss_archived_feeds; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_archived_feeds (id, owner_uid, created, title, feed_url, site_url) FROM stdin;
1	1	2020-08-14 05:00:58.952577	Tiny Tiny RSS: Forum	https://tt-rss.org/forum/rss.php	
\.


--
-- Data for Name: ttrss_cat_counters_cache; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_cat_counters_cache (feed_id, owner_uid, updated, value) FROM stdin;
\.


--
-- Data for Name: ttrss_counters_cache; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_counters_cache (feed_id, owner_uid, updated, value) FROM stdin;
\.


--
-- Data for Name: ttrss_enclosures; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_enclosures (id, content_url, content_type, title, duration, width, height, post_id) FROM stdin;
1	http://www.matrix67.com/blogimage_2016/2016092001.mp4	video/mp4		3149801	0	0	245
2	http://www.matrix67.com/blogimage_2016/2016092002.mp4	video/mp4		4274800	0	0	245
3	http://www.matrix67.com/blogimage_2016/2016092003.mp4	video/mp4		1154276	0	0	245
4	http://www.matrix67.com/blogimage_2016/2016092041.mp4	video/mp4		18197502	0	0	245
\.


--
-- Data for Name: ttrss_entries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_entries (id, title, guid, link, updated, content, content_hash, cached_content, no_orig_date, date_entered, date_updated, num_comments, comments, plugin_data, tsvector_combined, lang, author) FROM stdin;
353	Death Valley soars to 130 degrees, Earth’s highest temperature since 1931	{"ver":2,"uid":1,"hash":"SHA1:45378df8d1797a360663b24d761732b07f7c5927"}	https://www.washingtonpost.com/weather/2020/08/16/death-valley-heat-record/	2020-08-17 17:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24183215"> https://news.ycombinator.com/item?id=24183215 </a>	5d99072df9a3bd4de0465de137987346519d5fbf	\N	f	2020-08-17 17:10:00	2020-08-19 17:10:08.903498	0			'/item?id=24183215':16 '130':5 '1931':12 'comment':13 'death':1 'degre':6 'earth':7 'highest':9 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24183215':14 'sinc':11 'soar':3 'temperatur':10 'valley':2	zh	jbegley
13	Fatih&#8217;s question	{"ver":2,"uid":1,"hash":"SHA1:b808b6da25ef679861425df7b054a099268fe02f"}	https://dave.cheney.net/2020/05/16/fatihs-question	2020-05-16 13:19:20	\n<p>A few days ago Fatih posted <a href="https://twitter.com/fatih/status/1260683136842608640">this question</a> on twitter.</p>\n\n\n\n<p>I’m going to attempt to give my answer, however to do that I need to apply some simplifications as my previous attempts to answer it involved a lot of phrases like <em>a pointer to a pointer</em>, and other unhelpful waffling. Hopefully my simplified answer can be useful in building a mental framework to answer Fatih’s original question.</p>\n\n\n\n<h2>Restating the question</h2>\n\n\n\n<p>Fatih&#8217;s original tweet showed <a href="https://play.golang.org/p/g2yUIYrV67F">four different variations</a> of <code>json.Unmarshal</code>. I&#8217;m going to focus on the last two, which I&#8217;ll rewrite a little:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "encoding/json"\n    "fmt"\n)\n\ntype Result struct {\n    Foo string `json:"foo"`\n}\n\nfunc main() {\n    content := &#091;]byte(`{"foo": "bar"}`)\n    var result1, result2 *Result\n\n    err := json.Unmarshal(content, &amp;result1)\n    fmt.Println(result1, err) // &amp;{bar} &lt;nil>\n\n    err = json.Unmarshal(content, result2)\n    fmt.Println(result2, err) // &lt;nil> json: Unmarshal(nil *main.Result)\n}</code></pre>\n\n\n\n<p>Restated in words, <code>result1</code> and <code>result2</code> are the same type; <code>*Result</code>. Decoding into <code>result1</code> works as expected, whereas decoding into <code>result2</code> causes the <code>json</code> package to complain that the value passed to <code>Unmarshal</code> is <code>nil</code>. However, both values were declared without an initialiser so both would have taken on the type&#8217;s zero value, <code>nil</code>.</p>\n\n\n\n<p>Eagle eyed readers will have spotted that the reason for the difference is the first<code> </code>invocation is passed <code>&amp;result1</code>, while the second is passed <code>result2</code>, but this explanation is unsatisfactory because the documentation for <code>json.Unmarshal</code> states:</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Unmarshal parses the JSON-encoded data and stores the result in the value pointed to by v. <strong>If v is nil or not a pointer</strong>, Unmarshal returns an InvalidUnmarshalError.</p></blockquote>\n\n\n\n<p>Which is confusing because <code>result1</code> and <code>result2</code> <em>are</em> pointers. Furthermore, without initialisation, both <em>are</em> <code>nil</code>. Now, the documentation is correct (as you&#8217;d expect from a package that has been hammered on for a decade), but explaining <em>why</em> takes a little more investigation.</p>\n\n\n\n<h2>Functions receive a copy of their arguments</h2>\n\n\n\n<p>Every assignment in Go is a copy, this includes function arguments and return values.</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "fmt"\n)\n\nfunc increment(v int) {\n    v++\n}\n\nfunc main() {\n    v := 1\n    increment(v)\n    fmt.Println(v) // 1\n}</code></pre>\n\n\n\n<p>In this example, <code>increment</code> is operating on a <em>copy</em> of <code>main</code>&#8216;s <code>v</code>. This is because the <code>v</code> declared in <code>main</code> and <code>increment</code>&#8216;s <code>v</code> parameter have different addresses in memory. Thus changes to <code>increment</code>&#8216;s <code>v</code> cannot affect the contents of <code>main</code>&#8216;s <code>v</code>.</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "fmt"\n)\n\nfunc increment(v *int) {\n    *v++\n}\n\nfunc main() {\n    v := 1\n    increment(&amp;v)\n    fmt.Println(v) // 2\n}</code></pre>\n\n\n\n<p>If we wanted to write <code>increment</code> in a way that it could affect the contents of its caller we would need to pass a reference, a pointer, to <code>main.v</code>.<span id='easy-footnote-1-4153' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/16/fatihs-question#easy-footnote-bottom-1-4153' title='This does not violate the &lt;em&gt;everything is a copy&lt;/em&gt; rule, a copy of a pointer to &lt;code&gt;main.v&lt;/code&gt; still points to &lt;code&gt;main.v&lt;/code&gt;.'><sup>1</sup></a></span> This example demonstrates why <code>json.Unmarshal</code> needs a pointer to the value to decode JSON into.</p>\n\n\n\n<h2>Pointers to pointers</h2>\n\n\n\n<p>Returning to the original question, both <code>result1</code> and <code>result2</code> are declared as <code>*Result</code>, that is, pointers to a <code>Result</code> value. We established that you have to pass the address of caller&#8217;s value to <code>json.Unmarshal</code> otherwise it won&#8217;t be able to alter the contents of the caller&#8217;s value. Why then must we pass the address of <code>result1</code>, a <code>**Result</code>, a pointer to a pointer to a <code>Result</code>, for the operation to succeed.</p>\n\n\n\n<p>To explain this another detour is required. Consider this code:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "encoding/json"\n    "fmt"\n)\n\ntype Result struct {\n    Foo *string `json:"foo"`\n}\n\nfunc main() {\n    content := &#091;]byte(`{"foo": "bar"}`)\n    var result1 *Result\n\n    err := json.Unmarshal(content, &amp;result1)\n    fmt.Printf("%#v %v", result1, err) // &amp;main.Result{Foo:(*string)(0xc0000102f0)} &lt;nil>\n}</code></pre>\n\n\n\n<p>In this example <code>Result</code> contains a pointer typed field, <code>Foo *string</code>. During JSON decoding <code>Unmarshal</code> allocated a new <code>string</code> value, stored the value <code>bar</code> in it, then placed the address of the string in <code>Result.Foo</code>. This behaviour is quite handy as it frees the caller from having to initialise <code>Result.Foo</code> and makes it easier to detect when a field was not initialised because the JSON did not contain a value. Beyond the convenience this offers for simple examples it would be prohibitively difficult for the caller to properly initialise all the reference type fields in a structure before decoding unknown JSON without first inspecting the incoming JSON which itself may be problematic if the input is coming from an <code>io.Reader</code> without the ability to rewind the input.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>To unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON being the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into the value pointed at by the pointer. <strong>If the pointer is nil, Unmarshal allocates a new value for it to point to</strong>.</p></blockquote>\n\n\n\n<p><code>json.Unmarshal</code>&#8216;s handling of pointer fields is clearly documented, and works as you would expect, allocating a new value whenever there is a need to decode into a pointer shaped field. It is this behaviour that gives us a hint to what is happening in the original example.</p>\n\n\n\n<p>We&#8217;ve seen that when <code>json.Unmarshal</code> encounters a field which points to <code>nil</code> it will allocate a new value of the correct type and assign its address the field before proceeding. Not only is does behaviour is applied recursively&#8211;for example in the case of a complex structure which contains pointers to other structures&#8211;but it also applies to the <em>value passed to <code>Unmarshal</code>.</em></p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "encoding/json"\n    "fmt"\n)\n\nfunc main() {\n    content := &#091;]byte(`1`)\n    var result *int\n\n    err := json.Unmarshal(content, &amp;result)\n    fmt.Println(*result, err) // 1 &lt;nil>\n}</code></pre>\n\n\n\n<p>In this example <code>result</code> is not a struct, but a simple <code>*int</code> which, lacking an initialiser, defaults to <code>nil</code>. After JSON decoding, <code>result</code> now points to an <code>int</code> with the value <code>1</code>.</p>\n\n\n\n<h2>Putting the pieces together</h2>\n\n\n\n<p>Now I think I&#8217;m ready to take a shot at answering Fatih&#8217;s question.</p>\n\n\n\n<p><code>json.Unmarshal</code> requires the address of the variable you want to decode into, otherwise it would decode into a temporary copy which would be discard on return. Normally this is done by declaring a value, then passing its address, or explicitly initialising the the value</p>\n\n\n\n<pre class="wp-block-code"><code>var result1 Result\nerr := json.Unmarshal(content, &amp;result1) // this is fine\n\nvar result2 = new(Result)\nerr = json.Unmarshal(content, result2) // and this\n\nvar result3 = &amp;Result{}\nerr = json.Unmarshal(content, result3) // this is also fine</code></pre>\n\n\n\n<p>In all three cases the address that the <code>*Result</code> points too is not <code>nil</code>, it points to initialised memory that <code>json.Unmarshal</code> decodes into.</p>\n\n\n\n<p>Now consider what happens when <code>json.Unmarshal</code> encounters this</p>\n\n\n\n<pre class="wp-block-code"><code>var result4 *Result\nerr = json.Unmarshal(content, result4) // err json: Unmarshal(nil *main.Result)</code></pre>\n\n\n\n<p><code>result2</code>, <code>result3</code>, and the expression <code>&amp;result1</code> point to a <code>Result</code>. However <code>result4</code>, even though it has the same type as the previous three, does not point to initialised memory, it points to <code>nil</code>. Thus, according to the examples we saw previously, before <code>json.Unmarshal</code> can decode into it, the memory <code>result4</code> points too must be initialised. </p>\n\n\n\n<p>However, because each function receives a copy of its arguments, the caller&#8217;s <code>result4</code> variable and the copy inside <code>json.Unmarshal</code> are unique. <code>json.Unmarshal</code> can allocate a new <code>Result</code> value and decode into it, but it cannot alter <code>result4</code> to point to this new value because it was not provided with a reference to <code>result4</code>, only a copy of its contents.</p>\n	a7dfde2eb446603b4d5b9daa43b860d3ea39226d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.213436	0			'0xc0000102f0':574 '1':341,346,404,880,891,924 '2':409 'a':4,41,46,49,64,99,259,290,298,304,310,320,354,417,433,435,445,474,516,518,521,524,581,592,633,644,671,707,751,775,781,786,797,814,823,852,899,902,937,961,976,1070,1122,1142,1167,1172 'ability':698 'able':497 'according':1096 'address':485,513,605,833,947,981,1024 'addresses':375 'affect':385,422 'after':912 'ago':7 'all':665,1020 'allocate':822,1141 'allocated':591 'allocates':750 'allocating':774 'also':863,1017 'alter':499,1153 'an':185,263,694,907,919 'and':51,148,242,270,326,368,464,626,768,830,1006,1064,1132,1146 'another':534 'answer':22,38,58,68 'answering':940 'applied':844 'applies':864 'apply':30 'are':150,272,278,466,1137 'arguments':314,325,1126 'as':33,159,285,468,616,770,1081 'assign':831 'assignment':316 'at':740,939 'attempt':18 'attempts':36 'bar':118,130,558,599 'be':60,496,656,686,966,1115 'because':229,268,362,638,1118,1161 'been':294 'before':673,836,1103 'behaviour':612,793,842 'being':717 'beyond':646 'both':180,188,277,462 'building':63 'but':224,300,861,901,1150 'by':251,741,974 'byte':116,556,879 'caller':427,487,504,620,661,1128 'can':59,1105,1140 'cannot':384,1152 'case':713,724,850 'cases':1022 'causes':165 'changes':379 'clearly':766 'code':540 'coming':692 'complain':170 'complex':853 'confusing':267 'consider':538,1043 'contain':643 'contains':580,856 'content':115,125,134,555,564,878,886,993,1004,1013,1055 'contents':387,424,501,1176 'convenience':648 'copy':311,321,355,963,1123,1134,1173 'correct':284,828 'could':421 'd':287 'data':241 'days':6 'decade':299 'declared':183,365,467 'declaring':975 'decode':451,784,954,959,1106,1147 'decodes':1040 'decoding':155,162,589,674,914 'defaults':909 'demonstrates':441 'detect':631 'detour':535 'did':641 'difference':210 'different':82,374 'difficult':658 'discard':967 'do':25 'documentation':231,282 'documented':767 'does':841,1085 'done':973 'during':587 'each':1119 'eagle':199 'easier':629 'encoded':240 'encoding/json':104,544,874 'encounters':813,1048 'err':123,129,132,138,562,570,884,890,991,1002,1011,1053,1057 'established':478 'even':1074 'every':315 'example':349,440,578,806,847,895 'examples':653,1099 'expect':288,773 'expected':160 'explain':532 'explaining':301 'explanation':226 'explicitly':983 'expression':1066 'eyed':200 'fatih':1,8,69,76,941 'few':5 'field':584,634,789,815,835 'fields':669,764 'fine':997,1018 'first':213,678,710 'fmt':105,332,395,545,875 'fmt.printf':566 'fmt.println':127,136,344,407,888 'focus':90 'foo':109,112,117,549,552,557,572,585 'for':208,232,297,526,651,659,754,846 'four':81 'framework':66 'frees':618 'from':289,621,693 'func':113,333,338,396,401,553,876 'function':324,1120 'functions':308 'furthermore':274 'give':20 'gives':795 'go':318 'going':16,88 'hammered':295 'handles':711 'handling':761 'handy':615 'happening':802 'happens':1045 'has':293,1077 'have':190,203,373,481 'having':622 'hint':798 'hopefully':55 'however':23,179,1072,1117 'i':14,27,86,96,930,932 'if':253,410,688,744 'import':103,331,394,543,873 'in':62,145,246,317,347,366,376,416,576,600,609,670,722,803,848,893,1019 'includes':323 'incoming':681 'increment':334,342,350,369,381,397,405,415 'initialisation':276 'initialise':624,664 'initialised':637,1036,1089,1116 'initialiser':186,908 'initialising':984 'input':690,702 'inside':1135 'inspecting':679 'int':336,399,883,904,920 'into':156,163,453,706,736,785,955,960,1041,1107,1148 'invalidunmarshalerror':264 'investigation':307 'invocation':214 'involved':40 'io.reader':695 'is':177,211,215,221,227,255,266,283,319,351,361,471,536,613,691,747,765,780,791,801,840,843,897,972,996,1016,1030 'it':39,420,493,601,617,628,654,755,790,820,862,957,1033,1076,1091,1108,1149,1151,1162 'its':426,832,980,1125,1175 'itself':684 'json':111,140,167,239,452,551,588,640,676,682,705,716,719,735,913,1058 'json-encoded':238 'json.unmarshal':85,124,133,233,443,491,563,759,812,885,944,992,1003,1012,1039,1047,1054,1104,1136,1139 'lacking':906 'last':93 'like':45 'literal':720 'little':100,305 'll':97 'lot':42 'm':15,87,933 'main':102,114,330,339,357,367,389,393,402,542,554,872,877 'main.result':143,571,1061 'main.v.1':438 'makes':627 'may':685 'memory':377,1037,1090,1110 'mental':65 'more':306 'must':509,1114 'my':21,34,56 'need':28,430,782 'needs':444 'new':593,752,776,824,1000,1143,1159 'nil':131,139,142,178,198,256,279,575,730,748,819,892,911,1032,1060,1094 'normally':970 'not':258,636,642,838,898,1031,1086,1164 'now':280,916,929,1042 'null':721 'of':43,84,312,356,388,425,486,502,514,606,714,762,826,851,948,1124,1174 'offers':650 'on':12,91,192,296,353,968 'only':839,1171 'operating':352 'operation':528 'or':257,982 'original':71,78,460,805 'other':52,859 'otherwise':492,731,956 'package':101,168,291,329,392,541,871 'parameter':372 'parses':236 'pass':432,483,511 'passed':174,216,222,868 'passing':979 'phrases':44 'pieces':927 'placed':603 'point':757,1068,1087,1156 'pointed':249,739 'pointer':47,50,260,436,446,519,522,582,708,728,743,746,763,787 'pointers':273,454,456,472,857 'points':817,917,1028,1034,1092,1112 'posted':9 'previous':35,1083 'previously':1102 'problematic':687 'proceeding':837 'prohibitively':657 'properly':663 'provided':1165 'putting':925 'question':3,11,72,75,461,943 'quite':614 'readers':201 'ready':934 'reason':207 'receive':309 'receives':1121 'recursively':845 'reference':434,667,1168 'required':537 'requires':945 'restated':144 'restating':73 'result':107,122,154,245,469,475,517,525,547,561,579,882,887,889,896,915,990,1001,1010,1027,1052,1071,1144 'result.foo':610,625 'result1':120,126,128,147,157,217,269,463,515,560,565,569,989,994,1067 'result2':121,135,137,149,164,223,271,465,999,1005,1062 'result3':1009,1014,1063 'result4':1051,1056,1073,1111,1130,1154,1170 'return':327,969 'returning':457 'returns':262 'rewind':700 'rewrite':98 's':2,70,77,195,358,370,382,390,488,505,760,942,1129 'same':152,1079 'saw':1101 'second':220 'seen':809 'sets':726 'shaped':788 'shot':938 'showed':80 'simple':652,903 'simplifications':32 'simplified':57 'so':187 'some':31 'spotted':204 'states':234 'stored':596 'stores':243 'string':110,550,573,586,594,608 'struct':108,548,900 'structure':672,854 'structures':860 'succeed':530 't':495 'take':936 'taken':191 'takes':303 'temporary':962 'that':26,171,205,292,419,470,479,723,794,810,1025,1038 'the':74,92,151,166,172,193,206,209,212,219,230,237,244,247,281,363,386,423,448,459,484,500,503,512,527,597,604,607,619,639,647,660,666,680,689,697,701,712,715,718,727,734,737,742,745,804,827,834,849,866,922,926,946,949,985,986,1023,1026,1065,1078,1082,1098,1109,1127,1133 'their':313 'then':508,602,978 'there':779 'think':931 'this':10,225,322,348,360,439,533,539,577,611,649,792,894,971,995,1007,1015,1049,1158 'though':1075 'three':1021,1084 'thus':378,1095 'to':17,19,24,29,37,48,67,89,169,175,250,380,413,431,437,447,450,455,458,473,482,490,498,520,523,529,531,623,630,662,699,703,729,756,758,783,799,818,858,865,869,910,918,935,953,1035,1069,1088,1093,1097,1155,1157,1169 'together':928 'too':1029,1113 'tweet':79 'twitter':13 'two':94 'type':106,153,194,546,668,829,1080 'typed':583 'unhelpful':53 'unique':1138 'unknown':675 'unmarshal':141,176,235,261,590,704,709,725,732,749,870,1059 'unmarshals':733 'unsatisfactory':228 'us':796 'useful':61 'v':252,254,335,337,340,343,345,359,364,371,383,391,398,400,403,406,408,567,568 'value':173,197,248,449,476,489,506,595,598,645,738,753,777,825,867,923,977,987,1145,1160 'values':181,328 'var':119,559,881,988,998,1008,1050 'variable':950,1131 'variations':83 've':808 'waffling':54 'want':952 'wanted':412 'was':635,1163 'way':418 'we':411,428,477,510,807,1100 'were':182 'what':800,1044 'when':632,811,1046 'whenever':778 'whereas':161 'which':95,265,683,816,855,905,964 'while':218 'why':302,442,507 'will':202,821 'with':921,1166 'without':184,275,677,696 'won':494 'words':146 'works':158,769 'would':189,429,655,772,958,965 'write':414 'you':286,480,771,951 'zero':196	en	Dave Cheney
12	Diamond interface composition in Go 1.14	{"ver":2,"uid":1,"hash":"SHA1:5f57731d02e36765673614f71c835cc85cc30325"}	https://dave.cheney.net/2020/05/24/diamond-interface-composition-in-go-1-14	2020-05-24 08:49:02	\n<p>Per the <a href="https://github.com/golang/proposal/blob/master/design/6977-overlapping-interfaces.md">overlapping interfaces proposal</a>, Go 1.14 now permits embedding of interfaces with overlapping method sets. This is a brief post explain what this change means:</p>\n\n\n\n<p>Let&#8217;s start with the definition of the three key interfaces from the <code>io</code> package; <code>io.Reader</code>, <code>io.Writer</code>, and <code>io.Closer</code>:</p>\n\n\n\n<pre class="wp-block-code"><code>package io\n\ntype Reader interface {\n    Read(&#091;]byte) (int, error)\n}\n\ntype Writer interface {\n    Write(&#091;]byte) (int, error)\n}\n\ntype Closer interface {\n    Close() error\n}    </code></pre>\n\n\n\n<p>Just as embedding a type inside a struct allows the embedded type&#8217;s fields and methods to be accessed as if it were declared on the embedding type<span id='easy-footnote-1-4179' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/24/diamond-interface-composition-in-go-1-14#easy-footnote-bottom-1-4179' title='It is said that embedding promotes the type&amp;#8217;s fields and methods.'><sup>1</sup></a></span>, the process is true for interfaces. Thus there is no difference between explicitly declaring</p>\n\n\n\n<pre class="wp-block-code"><code>type ReadCloser interface {\n    Read(&#091;]byte) (int, error)\n    Close() error\n}</code></pre>\n\n\n\n<p>and using embedding to compose the interface</p>\n\n\n\n<pre class="wp-block-code"><code>type ReadCloser interface {\n    Reader\n    Closer\n}</code></pre>\n\n\n\n<p>You can even mix and match </p>\n\n\n\n<pre class="wp-block-code"><code>type WriteCloser interface {\n    Write(&#091;]byte) (int, error)\n    Closer\n}</code></pre>\n\n\n\n<p>However, prior to Go 1.14, if you continued to compose interface declarations in this manner you would likely find that something like this,</p>\n\n\n\n<pre class="wp-block-code"><code>type ReadWriteCloser interface {\n    ReadCloser\n    WriterCloser\n}</code></pre>\n\n\n\n<p>would fail to compile</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go build interfaces.go</strong>\ncommand-line-arguments\n./interfaces.go:27:2: duplicate method Close</pre>\n\n\n\n<p>Fortunately, with Go 1.14 this is no longer a limitation, thus solving problems that typically occur with diamond-shaped embedding graphs.</p>\n\n\n\n<p>However, there is a catch that I ran into attempting to demonstrate this feature to the local user group&#8211;this feature is only enabled when the Go compiler uses the 1.14 (or later) spec.</p>\n\n\n\n<p>As near as I can make out the rules for which version of the Go spec is used during compilation appear to be:</p>\n\n\n\n<ol><li>If your source code is stored inside <code>GOPATH</code> (or you have <em>disabled</em> modules with <code>GO111MODULE=off</code>) then the version of the Go spec used to compile with matches the version of the compiler you are using. Said another way, if  you have Go 1.13 installed, your Go version is 1.13. If you have Go 1.14 installed, your version is 1.14. No surprises here.</li><li>If your source code is stored outside <code>GOPATH</code> (or you have forced modules on with <code>GO111MODULE=on</code>) then the <code>go</code> tool will take the Go version from the <code>go.mod</code> file.</li><li> If there is no Go version listed in <code>go.mod</code> then the version of the spec will be the version of Go installed. This is identical to point 1.</li><li>If you are in module mode, either by being outside <code>GOPATH</code> or with <code>GO111MODULE=on</code>, but there is no <code>go.mod</code> file in the current, or any parent, directory then the version of the Go spec used to compile your code defaults to Go 1.13.</li></ol>\n\n\n\n<p>The last point caught me out.</p>\n	1e359a7396add416731b39ab46120da23a92ebc6	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.211476	0			'/interfaces.go':189 '1.13':317,323,436 '1.14':6,13,154,198,247,328,333 '1.if':393 '2':191 '27':190 'a':25,76,79,203,220 'accessed':91 'allows':81 'and':50,87,124,140 'another':311 'any':418 'appear':271 'are':308,395 'arguments':188 'as':74,92,251,253 'attempting':226 'be':90,273,382 'being':401 'between':112 'brief':26 'build':183 'but':408 'by':400 'byte':58,65,119,146 'can':137,255 'catch':221 'caught':440 'change':31 'close':71,122,194 'closer':69,135,149 'code':277,339,432 'command':186 'command-line-arguments':185 'compilation':270 'compile':181,299,430 'compiler':244,306 'compose':128,159 'composition':3 'continued':157 'current':416 'declarations':161 'declared':96 'declaring':114 'defaults':433 'definition':38 'demonstrate':228 'diamond':1,213 'diamond-shaped':212 'difference':111 'directory':420 'disabled':285 'duplicate':192 'during':269 'either':399 'embedded':83 'embedding':16,75,99,126,215 'enabled':240 'error':60,67,72,121,123,148 'even':138 'explain':28 'explicitly':113 'fail':179 'feature':230,237 'fields':86 'file':365,413 'find':168 'for':105,260 'forced':347 'fortunately':195 'from':44,362 'go':5,12,153,182,197,243,265,295,316,320,327,355,360,370,386,426,435 'go.mod':364,374,412 'go111module':288,351,406 'gopath':281,343,403 'graphs':216 'group':235 'have':284,315,326,346 'here.if':336 'however':150,217 'i':223,254 'identical':390 'if':93,155,274,313,324,366 'in':4,162,373,396,414 'inside':78,280 'installed':318,329,387 'int':59,66,120,147 'interface':2,56,63,70,117,130,133,144,160,175 'interfaces':10,18,43,106 'interfaces.go':184 'into':225 'io':46,53 'io.closer':51 'io.reader':48 'io.writer':49 'is':24,103,109,200,219,238,267,278,322,332,340,368,389,410 'it':94 'just':73 'key':42 'last':438 'later':249 'let':33 'like':171 'likely':167 'limitation':204 'line':187 'listed':372 'local':233 'longer':202 'make':256 'manner':164 'match':141 'matches':301 'me':441 'means':32 'method':21,193 'methods':88 'mix':139 'mode':398 'module':397 'modules':286,348 'near':252 'no':110,201,334,369,411 'now':14 'occur':210 'of':17,39,263,293,304,378,385,424 'off':289 'on':97,349,352,407 'only':239 'or':248,282,344,404,417 'out':257,442 'outside':342,402 'overlapping':9,20 'package':47,52 'parent':419 'per':7 'permits':15 'point':392,439 'post':27 'prior':151 'problems':207 'process':102 'proposal':11 'ran':224 'read':57,118 'readcloser':116,132,176 'reader':55,134 'readwritecloser':174 'rules':259 's':34,85 'said':310 'sets':22 'shaped':214 'solving':206 'something':170 'source':276,338 'spec':250,266,296,380,427 'start':35 'stored':279,341 'struct':80 'surprises':335 'take':358 'that':169,208,222 'the':8,37,40,45,82,98,101,129,232,242,246,258,264,291,294,302,305,354,359,363,376,379,383,415,422,425,437 'then':290,353,375,421 'there':108,218,367,409 'this':23,30,163,172,199,229,236,388 'three':41 'thus':107,205 'to':89,127,152,158,180,227,231,272,298,391,429,434 'tool':356 'true':104 'type':54,61,68,77,84,115,131,142,173 'type1':100 'typically':209 'used':268,297,428 'user':234 'uses':245 'using':125,309 'version':262,292,303,321,331,361,371,377,384,423 'way':312 'were':95 'what':29 'when':241 'which':261 'will':357,381 'with':19,36,196,211,287,300,350,405 'would':166,178 'write':64,145 'writecloser':143 'writer':62 'writercloser':177 'you':136,156,165,283,307,314,325,345,394 'your':275,319,330,337,431	en	Dave Cheney
1039	Professor suspended for saying 那个 nà ge	{"ver":2,"uid":1,"hash":"SHA1:280733c4de2874b5e8048a225b570bde9de7a076"}	https://languagelog.ldc.upenn.edu/nll/?p=48302	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24397574"> https://news.ycombinator.com/item?id=24397574 </a>	360758e183d8f9f3561b70ad4ef6b09f82bbb6ba	\N	f	2020-09-07 19:10:00	2020-09-10 05:10:14.179802	0			'/item?id=24397574':11 'comment':8 'ge':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24397574':9 'nà':6 'professor':1 'say':4 'suspend':2 '那个':5	zh	nojs
602	性能优化是权衡的哲学	{"ver":2,"uid":1,"hash":"SHA1:d6169b50d645c6fd9b41177283c0ee71fb104d4d"}	https://toutiao.io/k/0vo4i5m	2020-08-25 05:10:10	性能优化是权衡的哲学	95848bdc403573401c853b8442a513f01bb59684	\N	f	2020-08-25 05:10:00	2020-08-26 00:10:09.793729	0			'性能优化是权衡的哲学':1,2	zh	
14	Ensmallening Go binaries by prohibiting comparisons	{"ver":2,"uid":1,"hash":"SHA1:dcf43f75adc0e4885c0b6493063f6b43058e0516"}	https://dave.cheney.net/2020/05/09/ensmallening-go-binaries-by-prohibiting-comparisons	2020-05-09 13:27:39	\n<p>Conventional wisdom dictates that the larger the number of types declared in a Go program, the larger the resulting binary. Intuitively this makes sense, after all, what&#8217;s the point in defining a bunch of types if you&#8217;re not going to write code that operates on them. However, part of the job of a linker is to detect functions which are not referenced by a program&#8211;say they are part of a library of which only a subset of functionality is used&#8211;and remove them from the final output. Yet, the adage mo&#8217; types, mo&#8217; binary holds true for the majority of Go programs.</p>\n\n\n\n<p>In this post I&#8217;ll dig into what equality, in the context of a Go program, means and why changes <a href="https://github.com/golang/net/commit/e0ff5e5a1de5b859e2d48a2830d7933b3ab5b75f">like this</a> have a measurable impact on the size of a Go program.</p>\n\n\n\n<h2>Defining equality between two values</h2>\n\n\n\n<p>The Go spec defines the concepts of assignability and equality. Assignabiity is the act of assigning a value to an identifier. Not everything which is declared can be assigned, for example constants and functions. Equality is the act of comparing two identifies by asking <em>are their contents the same?</em></p>\n\n\n\n<p>Being a strongly typed language, the notion of sameness is fundamentally rooted in the identifier&#8217;s type. Two things can only be the same if they are of the same type. Beyond that, the type of the values defines how they are compared.</p>\n\n\n\n<p>For example, integers are compared arithmetically. For pointer types, equality is determining if the addresses they point too are the same. Reference types like maps and channels, like pointers, are considered to be the same if they have the same address.</p>\n\n\n\n<p>These are all examples of bitwise equality, that is, if the bit patterns of the memory that value occupies are the same, those values are equal. This is known as memcmp, short for memory comparison, as equality is defined by comparing the contents of two areas of memory.</p>\n\n\n\n<p>Hold on to this idea, I&#8217;ll come back to in a second.</p>\n\n\n\n<h2>Struct equality</h2>\n\n\n\n<p>Beyond scalar types like integers, floats, and pointers is the realm of compound types; structs. All structs are laid out in memory in program order, thus this declaration:</p>\n\n\n\n<pre class="wp-block-code"><code>type S struct {\n    a, b, c, d int64\n}</code></pre>\n\n\n\n<p>will consume 32 bytes of memory; 8 bytes for <code>a</code>, then 8 bytes for <code>b</code>, and so on. The spec says that <em>struct values are comparable if all their fields are comparable</em>. Thus two structs are equal iff each of their fields are equal.</p>\n\n\n\n<pre class="wp-block-code"><code>a := S{1, 2, 3, 4}\nb := S{1, 2, 3, 4}\nfmt.Println(a == b) // prints true</code></pre>\n\n\n\n<p>Under the hood the compiler uses memcmp to compare the 32 bytes of <code>a</code> and <code>b</code>.</p>\n\n\n\n<h2>Padding and alignment</h2>\n\n\n\n<p>However the simplistic bitwise comparison strategy will fail in situations like this:</p>\n\n\n\n<pre class="wp-block-code"><code>type S struct {\n    a byte\n    b uint64\n    c int16\n    d uint32\n}\n\nfunc main()\n    a := S{1, 2, 3, 4}\n    b := S{1, 2, 3, 4}\n    fmt.Println(a == b) // prints true\n}</code></pre>\n\n\n\n<p>The code compiles, the comparison is still true, but under the hood the compiler cannot rely on comparing the bit patterns of <code>a</code> and <code>b</code> because the structure contains <em>padding</em>.</p>\n\n\n\n<p>Go requires each field in a struct to be naturally aligned. 2 byte values must start on an even address, four byte values on an address divisible by 4, and so on<span id='easy-footnote-1-4116' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/09/ensmallening-go-binaries-by-prohibiting-comparisons#easy-footnote-bottom-1-4116' title='On 32bit platforms &lt;code&gt;int64&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; values may not be 8 byte aligned as the natural alignment of the platform is 4 bytes. See &lt;a href=&quot;https://github.com/golang/go/issues/599&quot;&gt;issue 599&lt;/a&gt; for the gory details.'><sup>1</sup></a></span>. The compiler inserts padding to ensure the fields are <em>aligned</em> to according to their type and the underlying platform. In effect, after padding, this is what the compiler sees<span id='easy-footnote-2-4116' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/09/ensmallening-go-binaries-by-prohibiting-comparisons#easy-footnote-bottom-2-4116' title='32 bit platforms would see &lt;code&gt;_ [3]byte&lt;/code&gt; padding between the declaration of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. See previous.'><sup>2</sup></a></span>:</p>\n\n\n\n<pre class="wp-block-code"><code>type S struct {\n    a byte\n    _ &#091;7]byte // padding\n    b uint64\n    c int16\n    _ &#091;2]int16 // padding\n    d uint32\n}</code></pre>\n\n\n\n<p>Padding exists to ensure the correct field alignments, and while it does take up space in memory, the contents of those padding bytes are unknown. You might assume that, being Go, the padding bytes are always zero, but it turns out that&#8217;s not the case&#8211;the contents of padding bytes are simply not defined. Because they&#8217;re not defined to always be a certain value, doing a bitwise comparison may return false because the nine bytes of padding spread throughout the 24 bytes of <code>S</code> are may not be the same.</p>\n\n\n\n<p>The Go compiler solves this problem by generating what is known as an equality function. In this case <code>S</code>&#8216;s equality function knows how to compare two values of type <code>S</code> by comparing only the fields in the function while skipping over the padding.</p>\n\n\n\n<h2>Type algorithms</h2>\n\n\n\n<p>Phew, that was a lot of setup to illustrate why, for each type defined in a Go program, the compiler may generate several supporting functions, known inside the compiler as the type&#8217;s algorithms. In addition to the equality function the compiler will generate a hash function if the type is used as a map key. Like the equality function, the hash function must consider factors like padding when computing its result to ensure it remains stable. </p>\n\n\n\n<p>It turns out that it can be hard, and sometimes non obvious, to intuit when the compiler will generate these functions&#8211;it&#8217;s more than you’d expect&#8211;and it can be hard for the linker to eliminate the ones that are not needed as reflection often causes the linker to be more conservative when trimming types.</p>\n\n\n\n<h2>Reducing binary size by prohibiting comparisons</h2>\n\n\n\n<p>Now we&#8217;re at a point to explain Brad&#8217;s change. By adding an incomparable field <span id='easy-footnote-3-4116' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/09/ensmallening-go-binaries-by-prohibiting-comparisons#easy-footnote-bottom-3-4116' title='Brad used &lt;code&gt;[0]func()&lt;/code&gt;, but any type that the spec limits or prohibits comparisons on will do. By declaring the array has zero elements the type has no impact on the size or alignment of the struct.'><sup>3</sup></a></span> to the type, the resulting struct is by extension incomparable, thus forcing the compiler to elide the generation of eq and hash algorithms, short circuiting the linkers elimination of those types and, in practice, reducing the size of the final binary. As an example of this technique, this program:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport "fmt"\n\nfunc main() {\n    type t struct {\n        // _ &#091;0]&#091;]byte uncomment to prevent comparison\n        a byte\n        b uint16\n        c int32\n        d uint64\n    }\n    var a t\n    fmt.Println(a)\n}</code></pre>\n\n\n\n<p>when compiled with Go 1.14.2 (darwin/amd64), decreased from 2174088 to 2174056, a saving of 32 bytes. In isolation this 32 byte saving may seem like small beer, but consider that equality and hash functions can be generated for every type in the transitive closure of your program and all its dependencies, and the size of these functions varies depending on the size of the type and its complexity, prohibiting them can have a sizeable impact on the final binary over and above the old saw of <code>-ldflags="-s -w"</code>.</p>\n\n\n\n<p>The bottom line, if you don’t wish to make your types comparable, a hack like this enforces it at the source level while contributing to a small reduction in the size of your binary.</p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<p>Addendum: thanks to Brad’s prodding, Go 1.15 already has a bunch of improvements by <a href="https://go-review.googlesource.com/c/go/+/231397">Cherry Zhang</a> and <a href="https://go-review.googlesource.com/c/go/+/191198">Keith Randall</a> that fix the most egregious of the failures to eliminate unnecessary equality and hash functions (although I suspect it was also to avoid the proliferation of this class of CLs).</p>\n	cf040b5f473133e22be965c7d1ca1e136099e8ee	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.215238	0			'0':965 '1':428,434,489,495 '1.14.2':988 '1.15':1115 '2':429,435,490,496,545,607 '2174056':994 '2174088':992 '24':694 '3':430,436,491,497,906 '32':384,453,998,1003 '4':431,437,492,498,562 '7':600 '8':388,393 'a':19,39,61,72,79,84,125,135,142,166,200,342,377,391,426,439,456,477,487,500,526,539,598,675,679,753,765,794,803,894,971,980,983,995,1056,1086,1099,1118 'above':1065 'according':577 'act':163,187 'adage':99 'addendum':1108 'adding':902 'addition':785 'address':282,553,559 'addresses':256 'after':31,587 'algorithms':749,783,929 'aligned':544,575 'alignment':461 'alignments':619 'all':32,285,361,409,1032 'already':1116 'also':1148 'although':1143 'always':647,673 'an':169,551,558,716,903,949 'and':90,129,158,182,267,352,397,457,460,527,563,581,620,835,855,927,938,1015,1031,1035,1049,1064,1125,1140 'are':68,76,194,225,240,245,260,271,284,302,307,363,406,412,417,424,574,635,646,663,698,868 'areas':328 'arithmetically':247 'as':312,318,715,779,802,871,948 'asking':193 'assignabiity':160 'assignability':157 'assigned':178 'assigning':165 'assume':639 'at':893,1092 'avoid':1150 'b':378,396,432,440,458,479,493,501,528,603,973 'back':339 'be':177,220,274,542,674,701,833,858,878,1019 'because':529,667,685 'beer':1010 'being':199,641 'between':147 'beyond':230,346 'binaries':3 'binary':26,103,885,947,1062,1107 'bit':294,523 'bitwise':288,465,680 'bottom':1074 'brad':898,1111 'bunch':40,1119 'but':512,649,1011 'by':4,71,192,322,561,710,735,887,901,914,1122 'byte':478,546,555,599,601,966,972,1004 'bytes':385,389,394,454,634,645,662,688,695,999 'c':379,481,605,975 'can':176,218,832,857,1018,1054 'cannot':518 'case':657,721 'causes':874 'certain':676 'change':900 'changes':131 'channels':268 'cherry':1123 'circuiting':931 'class':1155 'closure':1027 'cls':1157 'code':50,505 'come':338 'comparable':407,413,1085 'compare':451,729 'compared':241,246 'comparing':189,323,521,736 'comparison':317,466,508,681,970 'comparisons':6,889 'compiled':985 'compiler':447,517,567,593,706,769,778,791,843,920 'compiles':506 'complexity':1051 'compound':358 'computing':819 'concepts':155 'conservative':880 'consider':814,1012 'considered':272 'constants':181 'consume':383 'contains':532 'contents':196,325,630,659 'context':123 'contributing':1097 'conventional':7 'correct':617 'd':380,483,610,853,977 'darwin/amd64':989 'declaration':373 'declared':17,175 'decreased':990 'defined':321,666,671,763 'defines':153,237 'defining':38,145 'dependencies':1034 'depending':1042 'detect':65 'determining':253 'dictates':9 'dig':117 'divisible':560 'does':623 'doing':678 'don':1078 'each':420,536,761 'effect':586 'egregious':1132 'elide':922 'eliminate':864,1137 'elimination':934 'enforces':1090 'ensmallening':1 'ensure':571,615,823 'eq':926 'equal':308,418,425 'equality':120,146,159,184,251,289,319,345,717,724,788,808,1014,1139 'even':552 'every':1022 'everything':172 'example':180,243,950 'examples':286 'exists':613 'expect':854 'explain':897 'extension':915 'factors':815 'fail':469 'failures':1135 'false':684 'field':537,618,905 'fields':411,423,573,739 'final':95,946,1061 'fix':1129 'floats':351 'fmt':959 'fmt.println':438,499,982 'for':106,179,242,248,315,390,395,760,860,1021 'forcing':918 'four':554 'from':93,991 'func':485,960 'function':718,725,742,789,796,809,812 'functionality':87 'functions':66,183,774,847,1017,1040,1142 'fundamentally':209 'generate':771,793,845 'generated':1020 'generating':711 'generation':924 'go':2,20,110,126,143,151,534,642,705,766,987,1114 'going':47 'hack':1087 'hard':834,859 'has':1117 'hash':795,811,928,1016,1141 'have':134,279,1055 'hold':331 'holds':104 'hood':445,515 'how':238,727 'however':55,462 'i':115,336,1144 'idea':335 'identifier':170,213 'identifies':191 'if':43,223,254,277,292,408,797,1076 'iff':419 'illustrate':758 'impact':137,1058 'import':958 'improvements':1121 'in':18,37,112,121,211,341,366,368,470,538,585,627,719,740,764,784,939,1000,1024,1102 'incomparable':904,916 'inserts':568 'inside':776 'int16':482,606,608 'int32':976 'int64':381 'integers':244,350 'into':118 'intuit':840 'intuitively':27 'is':63,88,161,174,185,208,252,291,310,320,354,509,590,713,800,913 'isolation':1001 'it':622,650,824,827,831,848,856,1091,1146 'its':820,1033,1050 'job':59 'keith':1126 'key':805 'known':311,714,775 'knows':726 'laid':364 'language':203 'larger':12,23 'ldflags':1070 'level':1095 'library':80 'like':132,265,269,349,472,806,816,1008,1088 'line':1075 'linker':62,862,876 'linkers':933 'll':116,337 'lot':754 'main':486,957,961 'majority':108 'make':1082 'makes':29 'map':804 'maps':266 'may':682,699,770,1006 'means':128 'measurable':136 'memcmp':313,449 'memory':298,316,330,367,387,628 'might':638 'mo':100,102 'more':850,879 'most':1131 'must':548,813 'naturally':543 'needed':870 'nine':687 'non':837 'not':46,69,171,655,665,670,700,869 'notion':205 'now':890 'number':14 'obvious':838 'occupies':301 'of':15,41,57,60,78,81,86,109,124,141,156,164,188,206,226,234,287,296,326,329,357,386,421,455,525,631,660,689,696,732,755,925,935,944,951,997,1028,1038,1046,1069,1105,1120,1133,1153,1156 'often':873 'old':1067 'on':53,138,332,399,520,550,557,1043,1059 'on1':565 'ones':866 'only':83,219,737 'operates':52 'order':370 'out':365,652,829 'output':96 'over':745,1063 'package':956 'padding':459,533,569,588,602,609,612,633,644,661,690,747,817 'part':56,77 'patterns':295,524 'phew':750 'platform':584 'point':36,258,895 'pointer':249 'pointers':270,353 'post':114 'practice':940 'prevent':969 'prints':441,502 'problem':709 'prodding':1113 'program':21,73,127,144,369,767,955,1030 'programs':111 'prohibiting':5,888,1052 'proliferation':1152 'randall':1127 're':45,669,892 'realm':356 'reducing':884,941 'reduction':1101 'reference':263 'referenced':70 'reflection':872 'rely':519 'remains':825 'remove':91 'requires':535 'result':821 'resulting':25,911 'return':683 'rooted':210 's':34,214,375,427,433,475,488,494,596,654,697,722,723,734,782,849,899,1071,1112 'same':198,222,228,262,276,281,304,703 'sameness':207 'saving':996,1005 'saw':1068 'say':74 'says':402 'scalar':347 'second':343 'seem':1007 'sees2':594 'sense':30 'setup':756 'several':772 'short':314,930 'simplistic':464 'simply':664 'situations':471 'size':140,886,943,1037,1045,1104 'sizeable':1057 'skipping':744 'small':1009,1100 'so':398,564 'solves':707 'sometimes':836 'source':1094 'space':626 'spec':152,401 'spread':691 'stable':826 'start':549 'still':510 'strategy':467 'strongly':201 'struct':344,376,404,476,540,597,912,964 'structs':360,362,416 'structure':531 'subset':85 'supporting':773 'suspect':1145 't':963,981,1079 'take':624 'technique':953 'than':851 'thanks':1109 'that':10,51,231,290,299,403,640,653,751,830,867,1013,1128 'the':11,13,22,24,35,58,94,98,107,122,139,150,154,162,186,197,204,212,221,227,232,235,255,261,275,280,293,297,303,324,355,400,444,446,452,463,504,507,514,516,522,530,566,572,582,592,616,629,643,656,658,686,693,702,704,738,741,746,768,777,780,787,790,798,807,810,842,861,865,875,908,910,919,923,932,942,945,1025,1036,1044,1047,1060,1066,1073,1093,1103,1130,1134,1151 'their':195,410,422,579 'them':54,92,1053 'then':392 'these':283,846,1039 'they':75,224,239,257,278,668 'things':217 'this':28,113,133,309,334,372,473,589,708,720,952,954,1002,1089,1154 'those':305,632,936 'throughout':692 'thus':371,414,917 'to':48,64,168,273,333,340,450,541,570,576,578,614,672,728,757,786,822,839,863,877,896,907,921,968,993,1081,1098,1110,1136,1149 'too':259 'transitive':1026 'trimming':882 'true':105,442,503,511 'turns':651,828 'two':148,190,216,327,415,730 'type':215,229,233,374,474,580,595,733,748,762,781,799,909,962,1023,1048 'typed':202 'types':16,42,101,250,264,348,359,883,937,1084 'uint16':974 'uint32':484,611 'uint64':480,604,978 'uncomment':967 'under':443,513 'underlying':583 'unknown':636 'unnecessary':1138 'up':625 'used':89,801 'uses':448 'value':167,300,677 'values':149,236,306,405,547,556,731 'var':979 'varies':1041 'w':1072 'was':752,1147 'we':891 'what':33,119,591,712 'when':818,841,881,984 'which':67,82,173 'while':621,743,1096 'why':130,759 'will':382,468,792,844 'wisdom':8 'wish':1080 'with':986 'write':49 'yet':97 'you':44,637,852,1077 'your':1029,1083,1106 'zero':648 'zhang':1124	en	Dave Cheney
16	Inlining optimisations in Go	{"ver":2,"uid":1,"hash":"SHA1:f063efa5727bab8b3bbdd4ebd37ed4043544a03d"}	https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go	2020-04-28 07:36:45	\n<p>This is a post about how the Go compiler implements inlining and how this optimisation  affects your Go code. </p>\n\n\n\n<p><em>n.b.</em> This article focuses on <em>gc</em>, the de facto Go compiler from <a href="https://github.com/golang/go">golang.org</a>. The concepts discussed apply broadly to other Go compilers like gccgo and tinygo but may differ in implementation and efficacy.</p>\n\n\n\n<h2>What is inlining?</h2>\n\n\n\n<p>Inlining is the act of combining smaller functions into their respective callers. In the early days of computing this optimisation was typically performed by hand. Nowadays inlining is one of a class of fundamental optimisations performed automatically during the compilation process.</p>\n\n\n\n<h2>Why is inlining important?</h2>\n\n\n\n<p>Inlining is important for two reasons. The first is it removes the overhead of the function call itself. The second is it permits the compiler to more effectively apply other optimisation strategies.</p>\n\n\n\n<h3>Function call overhead</h3>\n\n\n\n<p>Calling a function<span id='easy-footnote-1-4053' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go#easy-footnote-bottom-1-4053' title='In Go, a method is just a function with a predefined formal parameter, the receiver. The relative costs of calling a free function vs a invoking a method, assuming that method is not called through an interface, are the same.'><sup>1</sup></a></span> in any language carries a cost. There are the overheads of marshalling parameters into registers or onto the stack (depending on the ABI) and reversing the process on return. Invoking a function call involves jumping the program counter from one point in the instruction stream to another which can cause a pipeline stall. Once inside the function there is usually some preamble required to prepare a new stack frame for the function to execute and a similar epilogue needed to retire the frame before returning to the caller.</p>\n\n\n\n<p>In Go a function call carries additional costs to support dynamic stack growth. On entry the amount of stack space available to the goroutine is compared to the amount required for the function. If insufficient stack space is available, the preamble jumps into the runtime logic that grows the stack by copying it to a new, larger, location. Once this is done the runtime jumps back to the start of the original function, the stack check is performed again, which now passes, and the call continues. In this way goroutines can start with a small stack allocation which grows only when needed.<span id='easy-footnote-2-4053' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go#easy-footnote-bottom-2-4053' title='Up until Go 1.14 the stack check preamble was also used by the garbage collector to stop the world by setting all active goroutine&amp;#8217;s stacks to zero, forcing them to trap into the runtime the next time they made a function call. This system was &lt;a href=&quot;https://github.com/golang/proposal/blob/master/design/24543-non-cooperative-preemption.md&quot;&gt;recently replaced&lt;/a&gt; with a mechanism which allowed the runtime to pause an goroutine without waiting for it to make a function call.'><sup>2</sup></a></span></p>\n\n\n\n<p>This check is cheap&#8211;only a few instructions&#8211;and because goroutine stacks grows geometrically the check rarely fails. Thus, the branch prediction unit inside a modern processor can hide the cost of the stack check by assuming it will always be successful. In the case where the processor mis-predicts the stack check and has to discard the work done while it was executing speculatively, the cost of the pipeline stall is relatively small compared to the cost of the work needed for the runtime to grow a goroutines stack.</p>\n\n\n\n<p>While the overhead of the generic and Go specific components of each function call are well optimised by modern processors using speculative execution techniques, those overheads cannot be entirely eliminated, thus each function call carries with it a performance cost over and above the time it takes to perform useful work. As a function call&#8217;s overhead is fixed, smaller functions pay a larger cost relative to larger ones because they tend to do less useful work per invocation.</p>\n\n\n\n<p>The solution to eliminating these overheads must therefore be to eliminate the function call itself, which the Go compiler does, under certain conditions, by replacing the call to a function with the contents of the function. This is known as <em>inlining</em> because it brings the body of the function in line with its caller.</p>\n\n\n\n<h3>Improved optimisation opportunities</h3>\n\n\n\n<p>Dr. Cliff Click describes inlining as <em>the</em> optimisation performed by modern compilers as it forms the basis for optimisations like constant propagation and dead code elimination. In effect, inlining allows the compiler to <em>see </em><i>furthe</i>r, allowing it to observe, in the context that a particular function is being called, logic that can be further simplified or eliminated entirely. As inlining can be applied recursively optimisation decisions can be made not only in the context of each individual function, but also applied to the chain of functions in a call path.</p>\n\n\n\n<h2>Inlining in action</h2>\n\n\n\n<p>The effects of inlining can be demonstrated with this small example</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport "testing"\n\n//go:noinline\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nvar Result int\n\nfunc BenchmarkMax(b *testing.B) {\n    var r int\n    for i := 0; i &lt; b.N; i++ {\n        r = max(-1, i)\n    }\n    Result = r\n}</code></pre>\n\n\n\n<p>Running this benchmark gives the following result:<span id='easy-footnote-3-4053' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go#easy-footnote-bottom-3-4053' title='I&amp;#8217;m using the &lt;code&gt;//go:noinline&lt;/code&gt; pragma to prevent the compiler from inlining &lt;code&gt;max&lt;/code&gt;. This is because I want to isolate the effects of inlining on &lt;code&gt;max&lt;/code&gt; rather than disabling optimisations globally with &lt;code&gt;-gcflags=&#039;-l -N&#039;&lt;/code&gt;. I go into detail about the &lt;code&gt;//go:&lt;/code&gt; comments in &lt;a href=&quot;https://dave.cheney.net/2018/01/08/gos-hidden-pragmas&quot;&gt;this presentation&lt;/a&gt;.'><sup>3</sup></a></span></p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go test -bench=.&nbsp;</strong>\nBenchmarkMax-4 &nbsp; 530687617 &nbsp; &nbsp; &nbsp; &nbsp; 2.24 ns/op</pre>\n\n\n\n<p>The cost of <code>max(-1, i)</code> is around 2.24 nanoseconds on my 2015 MacBook Air. Now let&#8217;s remove the <code>//go:noinline</code> pragma and see the result:</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go test -bench=.&nbsp;</strong>\nBenchmarkMax-4 &nbsp; 1000000000 &nbsp; &nbsp; &nbsp; &nbsp; 0.514 ns/op</pre>\n\n\n\n<p>From 2.24 ns to 0.51 ns, or according to <code>benchstat</code>, a 78% improvement.</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>benchstat {old,new}.txt</strong>\nname &nbsp; old time/op&nbsp; new time/op&nbsp; delta\nMax-4&nbsp; 2.21ns ± 1%&nbsp; 0.49ns ± 6%&nbsp; -77.96%&nbsp; (p=0.000 n=18+19)</pre>\n\n\n\n<p>Where did these improvements come from? </p>\n\n\n\n<p>First, the removal of the function call and associated preamble<span id='easy-footnote-4-4053' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go#easy-footnote-bottom-4-4053' title='You can check this for yourself by comparing the output of &lt;code&gt;go test -bench=. -gcflags=-S&lt;/code&gt; with and without the &lt;code&gt;//go:noinline&lt;/code&gt; annotation.'><sup>4</sup></a></span> was a major contributor. Pulling the contents of <code>max</code> into its caller reduced the number of instructions executed by the processor and eliminated several branches.</p>\n\n\n\n<p>Now the contents of <code>max</code> are visible to the compiler as it optimises <code>BenchmarkMax</code> it can make some additional improvements. Consider that once <code>max</code> is inlined, this is what the body of <code>BenchmarkMax</code> looks like to the compiler:</p>\n\n\n\n<pre class="wp-block-code"><code>func BenchmarkMax(b *testing.B) {\n    var r int\n    for i := 0; i &lt; b.N; i++ {\n        if -1 > i {\n            r = -1\n        } else {\n            r = i\n        }\n    }\n    Result = r\n}</code></pre>\n\n\n\n<p>Running the benchmark again we see our manually inlined version performs as well as the version inlined by the compiler</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>benchstat {old,new}.txt</strong>\nname &nbsp; old time/op&nbsp; new time/op&nbsp; delta\nMax-4&nbsp; 2.21ns ± 1%&nbsp; 0.48ns ± 3%&nbsp; -78.14%&nbsp; (p=0.000 n=18+18)</pre>\n\n\n\n<p>Now the compiler has access to the result of inlining <code>max</code> into <code>BenchmarkMax</code> it can apply optimisation passes which were not possible before. For example, the compiler has noted that <code>i</code> is initialised to <code>0</code> and only incremented so any comparison with <code>i</code> can assume <code>i</code> will never be negative. Thus, the condition <code>-1 &gt; i</code> will never be true.<span id='easy-footnote-5-4053' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go#easy-footnote-bottom-5-4053' title='You can check this yourself with the &lt;code&gt;-gcflags=-d=ssa/prove/debug=on&lt;/code&gt; flag.'><sup>5</sup></a></span></p>\n\n\n\n<p>Having proved that <code>-1 &gt; i</code> will never be true, the compiler can simplify the code to</p>\n\n\n\n<pre class="wp-block-code"><code>func BenchmarkMax(b *testing.B) {\n    var r int\n    for i := 0; i &lt; b.N; i++ {\n        if false {\n            r = -1\n        } else {\n            r = i\n        }\n    }\n    Result = r\n}</code></pre>\n\n\n\n<p>and because the branch is now a constant, the compiler can eliminate the unreachable path leaving it with</p>\n\n\n\n<pre class="wp-block-code"><code>func BenchmarkMax(b *testing.B) {\n    var r int\n    for i := 0; i &lt; b.N; i++ {\n        r = i\n    }\n    Result = r\n}</code></pre>\n\n\n\n<p>Thus, through inlining and the optimisations it unlocks, the compiler has reduced the expression <code>r = max(-1, i)</code> to simply <code>r = i</code>.</p>\n\n\n\n<h2>The limits of inlining</h2>\n\n\n\n<p>In this article I&#8217;ve discussed, so called, <em>leaf</em> inlining; the act of inlining a function at the bottom of a call stack into its direct caller. Inlining is a recursive process, once a function has been inlined into its caller, the compiler may inline the resulting code into <em>its</em> caller, as so on. For example, this code </p>\n\n\n\n<pre class="wp-block-code"><code>func BenchmarkMaxMaxMax(b *testing.B) {\n    var r int\n    for i := 0; i &lt; b.N; i++ {\n        r = max(max(-1, i), max(0, i))\n    }\n    Result = r\n}</code></pre>\n\n\n\n<p>runs as fast as the previous example as the compiler is able to repeatedly apply the optimisations outlined above to reduce the code to the same <code>r = i</code> expression.</p>\n\n\n\n<p>In the next article I&#8217;ll discuss an alternative inlining strategy when the Go compiler wishes to inline a function in the middle of a call stack. Finally I&#8217;ll discuss the limits that the compiler is prepared to go to to inline code, and which Go constructs are currently beyond its capability.</p>\n	2bcf778e84ec12748ff73ab3a06cd8e5af0b7224	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.219438	0			'+18':938 '+19':792 '-1':701,725,886,889,992,1001,1030,1087,1171 '-4':717,752,780,926 '-77.96':787 '-78.14':933 '/go':668,741 '0':695,881,973,1023,1063,1164,1174 '0.000':789,935 '0.48':930 '0.49':784 '0.51':760 '0.514':754 '1':783,929 '1000000000':753 '18':791,937 '2.21':781,927 '2.24':719,729,757 '2015':733 '3':712,932 '530687617':718 '6':786 '78':767 'a':7,90,141,147,173,193,208,218,233,285,324,338,357,421,461,476,486,531,603,647,672,677,680,766,810,1042,1111,1117,1126,1130,1225,1231 'abi':165 'able':1189 'about':9 'above':466,1196 'access':943 'according':763 'act':63,1108 'action':652 'additional':237,852 'affects':20 'again':309,898 'air':735 'allocation':327 'allowing':595 'allows':589 'also':639 'alternative':1215 'always':372 'amount':247,259 'an':1214 'and':16,48,55,166,217,313,341,387,430,465,582,744,806,830,974,1036,1074,1251 'another':189 'any':144,978 'applied':622,640 'apply':40,133,954,1192 'are':150,438,839,1255 'around':728 'article':26,1099,1210 'as':475,542,565,572,618,844,906,908,1148,1179,1181,1185 'associated':807 'assume':983 'assuming':369 'at':1113 'automatically':96 'available':251,269 'b':673,678,682,688,874,1016,1056,1157 'b.n':697,883,1025,1065,1166 'back':296 'basis':576 'be':373,451,511,612,621,627,658,987,996,1005 'because':342,493,544,1037 'been':1133 'before':226,961 'being':607 'bench':715,750 'benchmark':707,897 'benchmarkmax':687,716,751,847,866,873,951,1015,1055 'benchmarkmaxmaxmax':1156 'benchstat':765,769,915 'beyond':1257 'body':548,864 'bottom':1115 'branch':353,1039 'branches':833 'brings':546 'broadly':41 'but':50,638 'by':83,281,368,441,526,569,827,912 'call':121,138,175,235,315,437,457,478,516,529,648,805,1118,1232 'called':608,1104 'caller':230,556,820,1123,1137,1147 'callers':71 'calling':140 'can':191,321,360,611,620,626,657,849,953,982,1009,1046 'cannot':450 'capability':1259 'carries':146,236,458 'case':377 'cause':192 'certain':524 'chain':643 'cheap':336 'check':306,334,348,367,386 'class':91 'click':562 'cliff':561 'code':23,584,1012,1144,1154,1200,1250 'combining':65 'come':797 'compared':256,408 'comparison':979 'compilation':99 'compiler':13,34,129,521,591,843,871,914,941,965,1008,1045,1080,1139,1187,1221,1242 'compilers':45,571 'components':433 'computing':77 'concepts':38 'condition':991 'conditions':525 'consider':854 'constant':580,1043 'constructs':1254 'contents':535,815,836 'context':601,633 'continues':316 'contributor':812 'copying':282 'cost':148,363,400,411,463,488,722 'costs':238 'counter':180 'currently':1256 'days':75 'de':31 'dead':583 'decisions':625 'delta':778,924 'demonstrated':659 'depending':162 'describes':563 'did':794 'differ':52 'direct':1122 'discard':390 'discuss':1213,1237 'discussed':39,1102 'do':497 'does':522 'done':292,393 'dr':560 'during':97 'dynamic':241 'each':435,455,635 'early':74 'effect':587 'effectively':132 'effects':654 'efficacy':56 'eliminate':513,1047 'eliminated':453,616,831 'eliminating':506 'elimination':585 'else':890,1031 'entirely':452,617 'entry':245 'epilogue':220 'example':663,963,1152,1184 'execute':216 'executed':826 'executing':397 'execution':446 'expression':1084,1206 'facto':32 'fails':350 'false':1028 'fast':1180 'few':339 'finally':1234 'first':112,799 'fixed':482 'focuses':27 'following':710 'for':108,212,261,416,577,693,879,962,1021,1061,1151,1162 'forms':574 'frame':211,225 'from':35,181,756,798 'func':670,686,872,1014,1054,1155 'function':120,137,174,199,214,234,263,303,436,456,477,515,532,538,551,605,637,804,1112,1131,1226 'function1':142 'functions':67,484,645 'fundamental':93 'further':594,613 'gc':29 'gccgo':47 'generic':429 'geometrically':346 'gives':708 'go':4,12,22,33,44,232,431,520,713,748,1220,1246,1253 'golang.org':36 'goroutine':254,343 'goroutines':320,422 'grow':420 'grows':278,329,345 'growth':243 'hand':84 'has':388,942,966,1081,1132 'having':998 'hide':361 'how':10,17 'i':694,696,698,702,726,880,882,884,887,892,969,981,984,993,1002,1022,1024,1026,1033,1062,1064,1066,1068,1088,1092,1100,1163,1165,1167,1172,1175,1205,1211,1235 'if':264,676,885,1027 'implementation':54 'implements':14 'import':666 'important':104,107 'improved':557 'improvement':768 'improvements':796,853 'in':3,53,72,143,184,231,317,375,552,586,599,631,646,651,1097,1207,1227 'incremented':976 'individual':636 'initialised':971 'inline':1141,1224,1249 'inlined':859,903,911,1134 'inlining':1,15,59,60,86,103,105,543,564,588,619,650,656,948,1073,1096,1106,1110,1124,1216 'inside':197,356 'instruction':186 'instructions':340,825 'insufficient':265 'int':674,675,685,692,878,1020,1060,1161 'into':68,156,273,818,950,1120,1135,1145 'invocation':502 'invoking':172 'involves':176 'is':6,58,61,87,102,106,113,125,201,255,268,291,307,335,405,481,540,606,727,858,861,970,1040,1125,1188,1243 'it':114,126,283,370,395,460,469,545,573,596,845,848,952,1052,1077 'its':555,819,1121,1136,1146,1258 'itself':122,517 'jumping':177 'jumps':272,295 'known':541 'language':145 'larger':287,487,491 'leaf':1105 'leaving':1051 'less':498 'let':737 'like':46,579,868 'limits':1094,1239 'line':553 'll':1212,1236 'location':288 'logic':276,609 'looks':867 'macbook':734 'made':628 'main':665 'major':811 'make':850 'manually':902 'marshalling':154 'max':671,700,724,779,817,838,857,925,949,1086,1169,1170,1173 'may':51,1140 'middle':1229 'mis':382 'mis-predicts':381 'modern':358,442,570 'more':131 'must':509 'my':732 'n':790,936 'n.b':24 'name':773,919 'nanoseconds':730 'needed':221,415 'needed.2':332 'negative':988 'never':986,995,1004 'new':209,286,771,776,917,922 'next':1209 'noinline':669,742 'not':629,959 'noted':967 'now':311,736,834,939,1041 'nowadays':85 'ns':758,761,782,785,928,931 'ns/op':720,755 'number':823 'observe':598 'of':64,76,89,92,118,153,248,300,364,401,412,427,434,536,549,634,644,655,723,802,816,824,837,865,947,1095,1109,1116,1230 'old':770,774,916,920 'on':28,163,170,244,731,1150 'once':196,289,856,1129 'one':88,182 'ones':492 'only':330,337,630,975 'onto':159 'opportunities':559 'optimisation':19,79,135,558,567,624,955 'optimisations':2,94,578,1076,1194 'optimised':440 'optimises':846 'or':158,615,762 'original':302 'other':43,134 'our':901 'outlined':1195 'over':464 'overhead':117,139,426,480 'overheads':152,449,508 'p':788,934 'package':664 'parameters':155 'particular':604 'passes':312,956 'path':649,1050 'pay':485 'per':501 'perform':472 'performance':462 'performed':82,95,308,568 'performs':905 'permits':127 'pipeline':194,403 'point':183 'possible':960 'post':8 'pragma':743 'preamble':204,271 'preamble4':808 'prediction':354 'predicts':383 'prepare':207 'prepared':1244 'previous':1183 'process':100,169,1128 'processor':359,380,829 'processors':443 'program':179 'propagation':581 'proved':999 'pulling':813 'r':691,699,704,877,888,891,894,1019,1029,1032,1035,1059,1067,1070,1085,1091,1160,1168,1177,1204 'rarely':349 'reasons':110 'recursive':1127 'recursively':623 'reduce':1198 'reduced':821,1082 'registers':157 'relative':489 'relatively':406 'removal':801 'remove':739 'removes':115 'repeatedly':1191 'replacing':527 'required':205,260 'respective':70 'result':684,703,711,747,893,946,1034,1069,1176 'resulting':1143 'retire':223 'return':171,679,681 'returning':227 'reversing':167 'running':705,895 'runs':1178 'runtime':275,294,418 's':479,738 'same':1203 'second':124 'see':593,745,900 'several':832 'similar':219 'simplified':614 'simplify':1010 'simply':1090 'small':325,407,662 'smaller':66,483 'so':977,1103,1149 'solution':504 'some':203,851 'space':250,267 'specific':432 'speculative':445 'speculatively':398 'stack':161,210,242,249,266,280,305,326,366,385,423,1119,1233 'stacks':344 'stall':195,404 'start':299,322 'strategies':136 'strategy':1217 'stream':187 'successful':374 'support':240 'takes':470 'techniques':447 'tend':495 'test':714,749 'testing':667 'testing.b':689,875,1017,1057,1158 'that':277,602,610,855,968,1000,1240 'the':11,30,37,62,73,98,111,116,119,123,128,151,160,164,168,178,185,198,213,224,229,246,253,258,262,270,274,279,293,298,301,304,314,347,352,362,365,376,379,384,391,399,402,410,413,417,425,428,467,503,514,519,528,534,537,547,550,566,575,590,600,632,642,653,709,721,740,746,800,803,814,822,828,835,842,863,870,896,909,913,940,945,964,990,1007,1011,1038,1044,1048,1075,1079,1083,1093,1107,1114,1138,1142,1182,1186,1193,1199,1202,1208,1219,1228,1238,1241 'their':69 'there':149,200 'therefore':510 'these':507,795 'they':494 'this':5,18,25,78,290,318,333,539,661,706,860,1098,1153 'those':448 'through':1072 'thus':351,454,989,1071 'time':468 'time/op':775,777,921,923 'tinygo':49 'to':42,130,188,206,215,222,228,239,252,257,284,297,389,409,419,471,490,496,505,512,530,592,597,641,759,764,841,869,944,972,1013,1089,1190,1197,1201,1223,1245,1247,1248 'true':1006 'true.5':997 'two':109 'txt':772,918 'typically':81 'under':523 'unit':355 'unlocks':1078 'unreachable':1049 'useful':473,499 'using':444 'usually':202 'var':683,690,876,1018,1058,1159 've':1101 'version':904,910 'visible':840 'was':80,396,809 'way':319 'we':899 'well':439,907 'were':958 'what':57,862 'when':331,1218 'where':378,793 'which':190,310,328,518,957,1252 'while':394,424 'why':101 'will':371,985,994,1003 'wishes':1222 'with':323,459,533,554,660,980,1053 'work':392,414,474,500 'your':21	en	Dave Cheney
4	An empirical guide to the behavior and use of scalable persistent memory	{"ver":2,"uid":1,"hash":"SHA1:11675655c831e8ac091eb99bff3a4c17b7d42f15"}	https://blog.acolyer.org/2020/03/18/scalable-persistent-memory/	2020-03-18 06:00:00	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/conference/fast20/presentation/yang">An empirical guide to the behavior and use of scalable persistent memory</a>, Yang et al., FAST&#8217;20</p>\n<p>We&#8217;ve looked at multiple papers exploring non-volatile main memory and its implications (e.g. most recently &#8216;<a href="https://blog.acolyer.org/2019/12/02/efficient-lock-free-durable-sets/">Efficient lock-free durable sets</a>&#8216;). One thing they all had in common is an evaluation using some kind of simulation of the expected behaviour of NVDIMMs, because the real thing wasn&#8217;t yet available. But now it is! This paper examines the real-world behaviour of Intel&#8217;s Optane DIMM, and finds that not all of the assumptions baked into prior works hold. Based on these findings, the authors present four guidelines to get the best performance out of this memory today. Absolutely fascinating if you like this kind of thing!</p>\n<blockquote>\n<p>The data we have collected demonstrate that many of the assumptions that researchers have made about how NVDIMMs would behave and perform are incorrect. The widely expressed expectation was that NVDIMMs would have behavior that was broadly similiar to DRAM-based DIMMs but with lower performance (i.e., higher latency and lower bandwidth)&#8230; We have found the actual behavior of Optane DIMMs to be more complicated and nuanced than the &quot;slower, persistent DRAM&quot; label would suggest.</p>\n</blockquote>\n<h3>Optane DIMMs are here!</h3>\n<blockquote>\n<p>The Optane DIMM is the first scalable, commercially available NVDIMM.</p>\n</blockquote>\n<p>Optane DIMMs have lower latency and higher bandwidth than storage devices connected over PCIe (including Optane SSDs), and present a <strong>memory address-based interface</strong> as opposed to a block-based NVMe interface. Compared to DRAM they offer higher density and persistence. You can buy it in 128, 256, and 512 GB capacities.  An Intel CascadeLake processor die can support up to six Optane DIMMs across its two integrated memory controllers (iMCs), so that&#8217;s up to 3TB of persistent memory.</p>\n<p>The iMC maintains separate read and write pending queues for each DIMM. Once data has reached these queues it is durable. An on-DIMM controller (the XPController) coordinates access to the Optane media with internal address translation for wear-leveling and bad-block management. The physical media is accessed in chunks of 256 bytes (an XPLine). Smaller requests are translated into larger 256-byte accesses causing write amplification. The XPController has a small XPBuffer used for write-combining.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-1.jpeg?w=640" alt=""></p>\n<p>There are two modes of operation: <em>Memory</em> mode and <em>App Direct</em> mode. In memory mode the Optane DIMMs are used to expand memory capacity, without exploiting persistence.  App Direct mode is the one generating all the excitement &#8211; here the Optane DIMM appears as a separate <strong>persistent</strong> memory device. Applications and files systems access App Direct memory using CPU instructions offering a variety of options for controlling the ordering of store operations: cache-line flush, cache-line write back, and non-temporal stores (bypassing the cache hierarchy). An <code>sfence</code> is needed to ensure that these stores are complete and persistent.</p>\n<h3>Understanding Optane DIMM performance</h3>\n<p>A Linux persistent memory (<code>pmem</code>) namespace can be backed by interleaved or non-interleaved Optane memory, or emulated persistent memory backed by DRAM. The authors evaluate App Direct mode Optane memory for each backing type. In what follows, the <em>Optane</em> baseline is six DIMMs from the same socket in a single interleaved namespace, and <em>OptaneNI</em> is a single Optane DIMM (hence no interleaving).</p>\n<blockquote>\n<p>Our investigation of Optane memory behavior proceeds in two phases. First, we performe a broad systematic &quot;sweep&quot; over Optane configuration parameters including access patterns (random vs sequential), operations (loads, stores, fences, etc.), access size, stride size, power budget, NUMA configuration, and address space interleaving. Using this data, we designed targeted experiments to investigate anomalies and verify or disprove our hypotheses about the undelying causes&#8230;</p>\n</blockquote>\n<p>About ten thousand data points were collected altogether, see <a href="https://github.com/NVSL/OptaneStudy">https://github.com/NVSL/OptaneStudy</a>.</p>\n<ul>\n<li>The read latency for Optane is 2x-3x higher than DRAM. **Optane memory is also more pattern-dependent than DRAM. The random-vs-sequential gap is 20% for DRAM but 80% for Optane memory, and this gap is a consquence of the XPBuffer.</li>\n<li>Loads and stores have very consistent latency, except for a few outlier cases which correlate with hot spot concentration. These spikes are rare (about 0.006% of accesses), but have latency two orders of magnitude higher than regular accesses. &quot;<em>We suspect this effect is due to remapping for wear-levelling or thermal concerns, but we cannot be sure</em>.&quot;</li>\n<li>Whereas DRAM bandwidth is higher than Optane and scales predictably and monotonically with thread count until the bandwidth is saturated, <strong>the results for Optane are wildly different</strong>. Optane has a bigger gap between read and write bandwidth (2.9x read over write, versus 1.3x for DRAM), and non-monotonic performance with increasing thread count. Bandwidth for random accesses under 256 B is also poor.</li>\n</ul>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-4.jpeg?w=640" alt=""></p>\n<p>The impact of access size on bandwidth shows some marked differences between DRAM (left) and Optane:</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-5.jpeg?w=640" alt=""></p>\n<blockquote>\n<p>The most striking feature of the graph is a dip in performance at 4 kB &#8211; this dip is an emergent effect caused by contention at the the iMC, and it is maximised when threads perform random accesses close to the interleaving size.</p>\n</blockquote>\n<p>Importantly for prior works, real Optane memory behavior can deviate drastically from that predicted by emulation mechanisms, which &quot;<em>fail to capture Optane memory&#8217;s preference for sequential accesses and read/write asymmetry, and give wildy inaccurate guesses for device latency and bandwidth.</em>&quot;</p>\n<p>Those differences really matter. For example, <a href="http://cseweb.ucsd.edu/~juk146/papers/ASPLOS2019-APP.pdf">a study that looked at adapting RocksDB to use persistent memory</a> (amongst many other systems) concluded that a fine-grained persistent memory approach worked better than moving the write-ahead log to persistent memory. But with real Optane performance characteristics, the opposite is true.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-7.jpeg?w=480" alt=""></p>\n<h3>Making the most of your memory</h3>\n<p>So now that we know the truth about the way Optane DIMMs in App Direct mode behave, how should we design our systems to get the best out of them? The authors give us four guidelines to follow:</p>\n<ol>\n<li>Avoid random accesses smaller than 256 B (and where that is not possible, limit the working set to 16 kB per Optane DIMM)</li>\n<li>Use non-temporal stores for large transfers, and control cache evictions</li>\n<li>Limit the number of concurrent threads accessing an Optane DIMM</li>\n<li>Avoid NUMA accesses (especially read-modify-write sequences)</li>\n</ol>\n<p>A metric that underpins several of these recommendations is the <em>Effective Write Ratio</em> or EWR.</p>\n<blockquote>\n<p>EWR is the ratio of bytes issue by the iMC divided by the number of bytes actually written to the 3D-XPoint media (as measured by the DIMM&#8217;s hardware counters). EWR is the inverse of write amplification. EWR values below one indicate the Optane DIMM is operating inefficiently since it is writing more data internally than the application requested. The EWR can also be greater than one, due to write-combining at the XPBuffer.</p>\n</blockquote>\n<p>For small accesses flush instructions have lower latency, but for larger accesses <code>ntstore</code> is better.  Flushing after each 64 B improves bandwith for accesses greater than 64 B. &quot;<em>We believe this occurs because letting the cache naturally evict cache lines adds non-determinism to the access stream that reaches the Optane DIMM</em>.&quot; The EWR measurements shows that adding these flushes increase EWR from 0.26 to 0.98.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-12.jpeg?w=480" alt=""></p>\n<p>With too many concurrent threads, contention over the XPBuffer drives down EWR. Limited queue capacity in the iMC also hurts performance when multiple cores target a single DIMM. &quot;<em>Our hypothesis is that, since Optane DIMMs are slow, they drain the WPQ slowly, which leads to head-of-line blocking effects</em>.&quot;</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-15.jpeg?w=480" alt=""></p>\n<p>NUMA impacts Optane much more than DRAM, and the effect is especially acute with mixed loads and stores across multiple threads: the performance gap between local and remote Optane memory for the same workload can be over 30x, whereas for DRAM its closer to 3.3x.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/optane-fig-18.jpeg?w=480" alt=""></p>\n<p>Section 5 in the paper, in addition to discussing these guidelines, also contains illustrative examples of the impact of adhering to them in real systems (vs prior evaluations done with emulation):</p>\n<ul>\n<li>RocksDB improves EWR from 0.434 to 0.99</li>\n<li>The NOVA NVMM file system improves write performance by up to 7x.</li>\n<li>Micro-buffering in Intel&#8217;s PMDK is improved by using normal stores with flushes (instead of non-temporal stores) for small objects</li>\n<li>Multi-NVDIMM NOVA improves bandwidth by 3-34% by limiting the number of writers per DIMM</li>\n</ul>\n<h3>Watch this space</h3>\n<blockquote>\n<p>The guidelines&#8230; provide a starting point for building and tuning Optane-based systems. By necessity, they reflect the idiosyncracies of a particular implementation of a particular persistent memory technology, and it is natural to question how application the guidelines will be to both other memory technologies and future versions of Intel&#8217;s Optane memory&#8230; We believe that our guidelines will remain valuable both as Optane evolves and as other persistent memories come to market.</p>\n</blockquote>\n</div>\n	46c07f02c6cfa3536ba5745ddab032f1175f58d6	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.117645	0	https://blog.acolyer.org/2020/03/18/scalable-persistent-memory/#respond		'-34':1398 '/nvsl/optanestudy.':640 '0.006':711 '0.26':1216 '0.434':1351 '0.98':1218 '0.99':1353 '1.3':788 '128':279 '16':1024 '2.9':782 '20':29,670 '256':280,368,378,806,1011 '2x':648 '2x-3x':647 '3':1397 '3.3':1314 '30x':1307 '3d':1096 '3d-xpoint':1095 '3tb':309 '3x':649 '4':840 '5':1317 '512':282 '64':1170,1178 '7x':1365 '80':674 'absolut':132 'access':342,364,380,447,587,597,713,724,804,814,863,896,1008,1047,1053,1154,1163,1175,1198 'across':297,1288 'actual':198,1091 'acut':1282 'ad':1210 'adapt':921 'add':1192 'addit':1322 'address':253,349,606 'address-bas':252 'adher':1335 'ahead':947 'al':27 'also':656,809,1139,1237,1327 'altogeth':636 'amongst':927 'amplif':383,1113 'anomali':618 'app':404,422,448,528,981 'appear':436 'applic':443,1134,1447 'approach':939 'assumpt':107,151 'asymmetri':899 'author':118,526,999 'avail':82,229 'avoid':1006,1051 'b':807,1012,1171,1179 'back':474,509,522,535 'bad':357 'bad-block':356 'bake':108 'bandwidth':193,238,747,762,781,801,817,909,1395 'bandwith':1173 'base':113,182,254,262,1422 'baselin':542 'behav':160,984 'behavior':6,18,174,199,570,876 'behaviour':72,94 'believ':1181,1466 'best':125,994 'better':941,1166 'bigger':775 'block':261,358,1268 'block-bas':260 'broad':177,579 'budget':602 'buffer':1368 'build':1417 'buy':276 'bypass':480 'byte':369,379,1080,1090 'cach':467,471,482,1039,1187,1190 'cache-lin':466,470 'cannot':742 'capac':284,418,1233 'captur':889 'cascadelak':287 'case':699 'caus':381,628,848 'characterist':957 'chunk':366 'close':864 'closer':1312 'collect':145,635 'combin':394,1148 'come':1482 'commerci':228 'common':60 'compar':265 'complet':494 'complic':206 'concentr':705 'concern':739 'conclud':931 'concurr':1045,1222 'configur':584,604 'connect':242 'consist':692 'consquenc':683 'contain':1328 'content':850,1224 'control':302,338,460,1038 'coordin':341 'core':1242 'correl':701 'count':759,800 'counter':1106 'cpu':452 'data':142,326,611,632,1130 'demonstr':146 'densiti':271 'depend':660 'design':613,988 'determin':1195 'deviat':878 'devic':241,442,906 'die':289 'differ':771,821,911 'dimm':99,183,202,218,223,232,296,324,337,412,435,499,545,561,979,1028,1050,1103,1121,1204,1246,1253,1406 'dip':836,843 'direct':405,423,449,529,982 'discuss':1324 'disprov':622 'divid':1085 'done':1344 'drain':1257 'dram':181,213,267,524,652,662,672,746,791,823,1276,1310 'dram-bas':180 'drastic':879 'drive':1228 'due':730,1144 'durabl':52,333 'e.g':45 'effect':728,847,1070,1269,1279 'effici':48 'emerg':846 'empir':2,14 'emul':519,884,1346 'ensur':489 'especi':1054,1281 'et':26 'etc':596 'evalu':63,527,1343 'evict':1040,1189 'evolv':1476 'ewr':1074,1075,1107,1114,1137,1206,1214,1230,1349 'examin':89 'exampl':915,1330 'except':694 'excit':431 'expand':416 'expect':71,168 'experi':615 'exploit':420 'explor':36 'express':167 'fail':887 'fascin':133 'fast':28 'featur':830 'fenc':595 'file':445,1357 'find':101,116 'fine':935 'fine-grain':934 'first':226,575 'flush':469,1155,1167,1212,1380 'follow':539,1005 'found':196 'four':120,1002 'free':51 'futur':1458 'gap':668,680,776,1293 'gb':283 'generat':428 'get':123,992 'github.com':639 'github.com/nvsl/optanestudy.':638 'give':901,1000 'grain':936 'graph':833 'greater':1141,1176 'guess':904 'guid':3,15 'guidelin':121,1003,1326,1411,1449,1469 'hardwar':1105 'head':1265 'head-of-lin':1264 'henc':562 'hierarchi':483 'higher':189,237,270,650,721,749 'hold':112 'hot':703 'hurt':1238 'hypothes':624 'hypothesi':1248 'i.e':188 'idiosyncraci':1429 'illustr':1329 'imc':303,314,854,1084,1236 'impact':812,1271,1333 'implement':1433 'implic':44 'import':869 'improv':1172,1348,1359,1374,1394 'inaccur':903 'includ':245,586 'incorrect':164 'increas':798,1213 'indic':1118 'ineffici':1124 'instead':1381 'instruct':453,1156 'integr':300 'intel':96,286,1370,1461 'interfac':255,264 'interleav':511,515,553,564,608,867 'intern':348,1131 'invers':1110 'investig':566,617 'issu':1081 'kb':841,1025 'kind':66,138 'know':972 'label':214 'larg':1035 'larger':377,1162 'latenc':190,235,643,693,716,907,1159 'lead':1262 'left':824 'let':1185 'level':354,736 'like':136 'limit':1019,1041,1231,1400 'line':468,472,1191,1267 'linux':502 'load':593,687,1285 'local':1295 'lock':50 'lock-fre':49 'log':948 'look':32,919 'lower':186,192,234,1158 'made':155 'magnitud':720 'main':40 'maintain':315 'make':962 'manag':359 'mani':148,928,1221 'mark':820 'market':1484 'matter':913 'maximis':858 'measur':1100,1207 'mechan':885 'media':346,362,1098 'memori':12,24,41,130,251,301,312,401,408,417,441,450,504,517,521,532,569,654,677,875,891,926,938,951,967,1299,1438,1455,1464,1481 'metric':1061 'micro':1367 'micro-buff':1366 'mix':1284 'mode':398,402,406,409,424,530,983 'modifi':1057 'monoton':756,795 'move':943 'much':1273 'multi':1391 'multi-nvdimm':1390 'multipl':34,1241,1289 'namespac':506,554 'natur':1188,1443 'necess':1425 'need':487 'non':38,477,514,794,1031,1194,1384 'non-determin':1193 'non-interleav':513 'non-monoton':793 'non-tempor':476,1030,1383 'non-volatil':37 'normal':1377 'nova':1355,1393 'ntstore':1164 'nuanc':208 'numa':603,1052,1270 'number':1043,1088,1402 'nvdimm':74,158,171,230,1392 'nvme':263 'nvmm':1356 'object':1389 'occur':1183 'offer':269,454 'on-dimm':335 'one':54,427,1117,1143 'oper':400,465,592,1123 'oppos':257 'opposit':959 'optan':98,201,217,222,231,246,295,345,411,434,498,516,531,541,560,568,583,645,653,676,751,768,772,826,874,890,955,978,1027,1049,1120,1203,1252,1272,1298,1421,1463,1475 'optane-bas':1420 'optaneni':556 'option':458 'order':462,718 'outlier':698 'paper':35,88,1320 'paramet':585 'particular':1432,1436 'pattern':588,659 'pattern-depend':658 'pcie':244 'pend':320 'per':1026,1405 'perform':126,162,187,500,577,796,838,861,956,1239,1292,1361 'persist':11,23,212,273,311,421,440,496,503,520,925,937,950,1437,1480 'phase':574 'physic':361 'pmdk':1372 'pmem':505 'point':633,1415 'poor':810 'possibl':1018 'power':601 'predict':754,882 'prefer':893 'present':119,249 'prior':110,871,1342 'proceed':571 'processor':288 'provid':1412 'question':1445 'queue':321,330,1232 'random':589,665,803,862,1007 'random-vs-sequenti':664 'rare':709 'ratio':1072,1078 'reach':328,1201 'read':317,642,778,784,1056 'read-modify-writ':1055 'read/write':898 'real':77,92,873,954,1339 'real-world':91 'realli':912 'recent':47 'recommend':1067 'reflect':1427 'regular':723 'remain':1471 'remap':732 'remot':1297 'request':373,1135 'research':153 'result':766 'rocksdb':922,1347 'satur':764 'scalabl':10,22,227 'scale':753 'section':1316 'see':637 'separ':316,439 'sequenc':1059 'sequenti':591,667,895 'set':53,1022 'sever':1064 'sfenc':485 'show':818,1208 'similiar':178 'simul':68 'sinc':1125,1251 'singl':552,559,1245 'six':294,544 'size':598,600,815,868 'slow':1255 'slower':211 'slowli':1260 'small':388,1153,1388 'smaller':372,1009 'socket':549 'space':607,1409 'spike':707 'spot':704 'ssds':247 'start':1414 'storag':240 'store':464,479,492,594,689,1033,1287,1378,1386 'stream':1199 'stride':599 'strike':829 'studi':917 'suggest':216 'support':291 'sure':744 'suspect':726 'sweep':581 'system':446,930,990,1340,1358,1423 'systemat':580 'target':614,1243 'technolog':1439,1456 'tempor':478,1032,1385 'ten':630 'thermal':738 'thing':55,78,140 'thousand':631 'thread':758,799,860,1046,1223,1290 'today':131 'transfer':1036 'translat':350,375 'true':961 'truth':974 'tune':1419 'two':299,397,573,717 'type':536 'und':627 'underpin':1063 'understand':497 'us':1001 'use':8,20,64,390,414,451,609,924,1029,1376 'valu':1115 'valuabl':1472 'varieti':456 've':31 'verifi':620 'version':1459 'versus':787 'volatil':39 'vs':590,666,1341 'wasn':79 'watch':1407 'way':977 'wear':353,735 'wear-level':352,734 'wherea':745,1308 'wide':166 'wild':770 'wildi':902 'without':419 'work':111,872,940,1021 'workload':1303 'world':93 'would':159,172,215 'wpq':1259 'write':319,382,393,473,780,786,946,1058,1071,1112,1128,1147,1360 'write-ahead':945 'write-combin':392,1146 'writer':1404 'written':1092 'x':783,789,1315 'xpbuffer':389,686,1151,1227 'xpcontrol':340,385 'xpline':371 'xpoint':1097 'yang':25 'yet':81	en	Adrian Colyer
352	Microsoft Put Off Fixing Zero Day for 2 Years	{"ver":2,"uid":1,"hash":"SHA1:e47a374694aa8063ec43dbe8fba4c18d644b1a88"}	https://krebsonsecurity.com/2020/08/microsoft-put-off-fixing-zero-day-for-2-years/	2020-08-17 17:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24183870"> https://news.ycombinator.com/item?id=24183870 </a>	609dfb84c1de15d3e1fe764f67e5f9fd600b5e2c	\N	f	2020-08-17 17:10:00	2020-08-19 17:10:08.885392	0			'/item?id=24183870':13 '2':8 'comment':10 'day':6 'fix':4 'microsoft':1 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24183870':11 'put':2 'year':9 'zero':5	zh	todsacerdoti
5	Understanding, detecting and localizing partial failures in large system software	{"ver":2,"uid":1,"hash":"SHA1:e3fe4740b7042563237e96d050daf524844e6601"}	https://blog.acolyer.org/2020/03/16/omega-gen/	2020-03-16 06:00:23	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/conference/nsdi20/presentation/lou">Understanding, detecting and localizing partial failures in large system software</a>, Lou et al., NSDI&#8217;20</p>\n<p><em>Partial failures</em> (<a href="https://blog.acolyer.org/2017/06/15/gray-failure-the-achilles-heel-of-cloud-scale-systems/">gray failures</a>) occur when some but not all of the functionalities of a system are broken. On the surface everything can appear to be fine, but under the covers things may be going astray.</p>\n<blockquote>\n<p>When a partial failure occurs, it often takes a long time to detect the incident. In contrast, a process suffering a total failure can be quickly identified, restarted, or repaired by existing mechanisms, thus limiting the failure impact.</p>\n</blockquote>\n<p>Because everything can look fine on the surface, traditional failure detectors or watchdogs using external probes or monitoring statistics may not be able to pick up on the problem. Today&#8217;s paper choice won the authors a best paper award at NSDI&#8217;20. It contains a study of partial failure causes, and a novel approach to fault detection using system-specific, auto-generated watchdogs.</p>\n<h3>Characterising partial failures</h3>\n<p>Before designing a better system for detecting partial failures, the authors set about understanding their nature and causes through a study of five software systems (ZooKeeper, Cassandra, HDFS, Apache, and Mesos). For each of these systems they crawled the bug databases to find critical issues and then randomly sampled from those issues until 20 genuine partial failure cases for each system had been collected.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-table-1.jpeg?w=480" alt=""></p>\n<p>Here are the key findings:</p>\n<ul>\n<li>\n<p>Partial failures appear throughout the release history of each system, 54% within the last three years.</p>\n</li>\n<li>\n<p>There are diverse causes for partial failures, with uncaught errors, indefinite blocking, and buggy errory handling the top three, accounting for 48% of all partial failures between them. (See also: &#8216;<a href="https://blog.acolyer.org/2016/10/06/simple-testing-can-prevent-most-critical-failures/">Simple testing can prevent most production failures</a>&#8216; and &#8216;[What bugs cause cloud production incidents?][]&#8217;.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-fig-2.jpeg?w=480" alt=""></p>\n</li>\n<li>\n<p>48% of partial failures result in some part of the system being unable to make progress (&#8216;stuck&#8217;).  A further 17% exhibit slow downs big enough to be a serious problem (&#8216;slow&#8217;).</p>\n</li>\n</ul>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-fig-3.jpeg?w=480" alt=""></p>\n<ul>\n<li>In 13% of cases a module became a zombie with undefined failure semantics</li>\n<li>15% of partial failure cases are silent (e.g. data loss, corruption, inconsistency, wrong results)</li>\n<li><strong>71%</strong> of failures are triggered by a specific environment condition, input, or faults in other processes.</li>\n<li>The <strong>majority (61%) of partial faults are sticky</strong>, i.e. the process will not recover unless some intervention (e.g.  a restart) is made.</li>\n<li>It took a median of 6 days and 5 hours to diagnose these issues.</li>\n</ul>\n<blockquote>\n<p>Overall, our study reveals that partial failure is a common and severe problem in large software systems. Most of the studied failures are production-dependent, which require runtime mechanisms to detect.</p>\n</blockquote>\n<h3>Detecting partial failures with custom watchdogs</h3>\n<p>So, we know that we&#8217;re going to need runtime detectors. The state-of-the-practice here is API based health-checks. The state-of-the-art is <a href="https://blog.acolyer.org/2018/10/15/capturing-and-enhancing-in-situ-system-observability-for-failure-detection/">Panorama</a>.</p>\n<blockquote>\n<p>Practitioners currenly rely on running ad-hoc health checks (e.g. send an HTTP request every few seconds and check its response status). But such health checks are too shallow to expose a wide class of failures. The state-of-the-art research work in this area is Panorama, which converts various requestors of a target process into observers to report gray failures of this process. This approach is limited by what requestors can observe externally&#8230;</p>\n</blockquote>\n<p>To expose partial failures, a detector needs to exercise specific code regions with carefully-chosen payloads. Heartbeat and HTTP-based tests are too generic and too divorced from the monitored process&#8217; state. So the approach taken by the authors is to use <em>intrinsic</em> watchdogs &#8211; these run concurrently with the main program inside the same process. In order to get as close as possible to real program execution conditions, <em>OmegaGen</em> finds long-running methods in the code base, extracts their potentially vulnerable operations, and packages the result in custom generated watchdogs (&#8216;<em>mimic-style checkers</em>&#8216;). It captures the runtime execution context of the main program, and replicates this as input to the watchdogs, which then execute in a sandbox enviroment.</p>\n<p>Generate watchdogs proceeds as follows:</p>\n<ol>\n<li>First OmegaGen identifies long-running methods (e.g. <code>while(true)</code> or <code>while(flag)</code>)</li>\n<li>Then OmegaGen looks for potentially vulnerable operations in the control flow of those long-running methods. This is largely done based on heuristics (synchronisation, resource allocaion, event polling, async waiting, invocations using external arguments, file or network I/O, complex while loop conditional, and so on). Developers can also explicitly annotate an operation as <code>@vulnerable</code></li>\n<li>A watchdog replica of the main program is then created my a top-down program reduction from the entry point of long-running methods, retaining only the vulnerable operations in each reduced method.  The resulting program preserves the original structure, and contains all vulnerable operations.</li>\n<li>OmegaGen then inserts hooks that capture context from the main program execution and pass it to the watchdog so that the watchdog executes with the same key state as the original.</li>\n<li>Finally, OmegaGen adds checks in the watchdog to catch failure signals from the execution of vulnerable operations. Liveness checks are made by setting a timer before runner a checker (default 4 seconds). Safety checks rely on the vulnerable operations to emit explicit error signals (e.g. exceptions), and will also capture runtime errors.</li>\n</ol>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-fig-5.jpeg?w=640" alt=""></p>\n<p>The watchdog driver runs the watchdogs and captures information on any detected error. Before reporting an error, a <em>validator</em> runs to ensure it is a genuine error. The default validator simply re-executes the checker and compares the result, which is effective in the case of transient errors. Developers can provide their own validator functions if desired.</p>\n<p>All in, OmegaGen is about 8Kloc of Java code, making use of the Soot analysis framework.</p>\n<h3>OmegaGen in action</h3>\n<p>OmegaGen is evaluated using ZooKeeper, Cassandra, HDFS, HBase, MapReduce, and Yarn. It generates 10s to 100s of watchdogs for each system, configured to run checks every second. Generating the watchdogs takes from 5 to 17 minutes depending on the size of the system.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-table-3.jpeg?w=480" alt=""></p>\n<p>22 real-world partial failures across these six systems were then collected and reproduced. The ability of OmegaGen to detect these failures was then tested against four different baseline detectors, as shown in the following table (the existing system built-in detectors can&#8217;t handle partial failures at all).</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-table-4.jpeg?w=480" alt=""></p>\n<p>The OmageGen watchdogs detected 20 out of the 22 issues, whereas the best baseline detector managed only 11, and all of the other three detectors combined can only manage 14. The median detection time was 4.2 seconds.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-table-5.jpeg?w=640" alt=""></p>\n<p>The OmegaGen watchdogs are also able to pinpoint the source of the error much more accurately than the baseline detectors (which in e.g. the client and resource detector cases can only point to the faulty process).</p>\n<p>![]]<a href="https://blog.acolyer.org/wp-content/uploads/2020/03/omegagen-table-6.jpeg?w=640">TABLE6</a></p>\n<p>A random fault injection test on the latest version of ZooKeeper triggered 16 synthetic failures, 13 of which were detected with a median detection time of 6.1 seconds. The OmegaGen watchdogs also found a genuine bug in version 3.5.5 of ZooKeeper which was confirmed by the developers and fixed.</p>\n<p>OmegaGen watchdogs add a 5.0-6.6% overhead in terms of system throughput.</p>\n<h3>The last word</h3>\n<blockquote>\n<p>Evaluating OmegaGen on six large systems, it can generate tens to hundreds of customized watchdogs for each system. The generated watchdogs detect 20 out of 22 real-world partial failures with a median detection time of 4.2 seconds, and pinpoint the scope of failure for 18 cases; these results significantly outperform the baseline detectors.</p>\n</blockquote>\n</div>\n	b4b966b32585ecb8c0ddca878dc3230a54940557	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.119345	2	https://blog.acolyer.org/2020/03/16/omega-gen/#comments		'-6.6':1179 '100s':972 '10s':970 '11':1068 '13':330,1140 '14':1080 '15':342 '16':1137 '17':317,991 '18':1235 '20':25,142,222,1055,1211 '22':1000,1059,1214 '3.5.5':1163 '4':858 '4.2':1086,1226 '48':275,298 '5':402,989 '5.0':1178 '54':248 '6':399 '6.1':1151 '61':374 '71':356 '8kloc':943 'abil':1016 'abl':122,1093 'account':273 'accur':1103 'across':1006 'action':956 'ad':484 'ad-hoc':483 'add':830,1176 'al':23 'allocaion':721 'also':283,743,876,1092,1156 'analysi':952 'annot':745 'apach':197 'api':465 'appear':49,240 'approach':154,546,591 'area':525 'argument':729 'art':475,520 'astray':61 'async':724 'author':135,179,595 'auto':163 'auto-gener':162 'award':139 'base':466,576,634,716 'baselin':1029,1064,1106,1242 'becam':335 'best':137,1063 'better':172 'big':321 'block':265 'broken':43 'bug':208,293,1160 'buggi':267 'built':1041 'built-in':1040 'captur':653,802,877,887 'care':569 'carefully-chosen':568 'case':226,332,346,925,1116,1236 'cassandra':195,962 'catch':836 'caus':150,186,257,294 'characteris':166 'check':469,487,497,504,831,846,861,981 'checker':651,856,915 'choic':132 'chosen':570 'class':512 'client':1112 'close':617 'cloud':295 'code':565,633,946 'collect':232,1012 'combin':1076 'common':417 'compar':917 'complex':734 'concurr':603 'condit':365,624,737 'configur':978 'confirm':1168 'contain':144,793 'context':657,803 'contrast':78 'control':704 'convert':529 'corrupt':352 'cover':56 'crawl':206 'creat':759 'critic':212 'curren':479 'custom':444,645,1202 'data':350 'databas':209 'day':400 'default':857,908 'depend':433,993 'design':170 'desir':937 'detect':2,12,74,157,175,439,440,891,1020,1054,1083,1144,1148,1210,1223 'detector':110,456,560,1030,1043,1065,1075,1107,1115,1243 'develop':741,929,1171 'diagnos':405 'differ':1028 'divers':256 'divorc':583 'done':715 'down':320 'driver':882 'e.g':349,389,488,689,872,1110 'effect':922 'emit':868 'enough':322 'ensur':901 'entri':769 'enviro':676 'environ':364 'error':263,870,879,892,896,906,928,1100 'errori':268 'et':22 'evalu':959,1189 'event':722 'everi':493,982 'everyth':47,101 'except':873 'execut':623,656,672,808,819,841,913 'exercis':563 'exhibit':318 'exist':93,1038 'explicit':744,869 'expos':509,556 'extern':114,554,728 'extract':635 'failur':6,16,27,29,65,84,98,109,149,168,177,225,239,260,279,290,301,340,345,358,414,429,442,514,541,558,837,1005,1022,1048,1139,1219,1233 'fault':156,368,377,1127 'faulti':1122 'file':730 'final':828 'find':211,237,626 'fine':52,104 'first':682 'five':191 'fix':1173 'flag':694 'flow':705 'follow':681,1035 'found':1157 'four':1027 'framework':953 'function':38,935 'generat':164,646,677,969,984,1197,1208 'generic':580 'genuin':223,905,1159 'get':615 'go':60,452 'gray':28,540 'handl':269,1046 'hbase':964 'hdfs':196,963 'health':468,486,503 'health-check':467 'heartbeat':572 'heurist':718 'histori':244 'hoc':485 'hook':800 'hour':403 'http':491,575 'http-base':574 'hundr':1200 'i.e':380 'i/o':733 'identifi':88,684 'impact':99 'incid':76,297 'inconsist':353 'indefinit':264 'inform':888 'inject':1128 'input':366,666 'insert':799 'insid':608 'intervent':388 'intrins':599 'invoc':726 'issu':213,220,407,1060 'java':945 'key':236,823 'know':448 'larg':8,18,422,714,1193 'last':251,1187 'latest':1132 'limit':96,548 'live':845 'local':4,14 'long':71,628,686,709,773 'long-run':627,685,708,772 'look':103,697 'loop':736 'loss':351 'lou':21 'made':393,848 'main':606,660,755,806 'major':373 'make':312,947 'manag':1066,1079 'mapreduc':965 'may':58,119 'mechan':94,437 'median':397,1082,1147,1222 'meso':199 'method':630,688,711,775,784 'mimic':649 'mimic-styl':648 'minut':992 'modul':334 'monitor':117,586 'much':1101 'natur':184 'need':454,561 'network':732 'novel':153 'nsdi':24,141 'observ':537,553 'occur':30,66 'often':68 'omagegen':1052 'omegagen':625,683,696,797,829,940,954,957,1018,1089,1154,1174,1190 'oper':639,701,747,780,796,844,866 'order':613 'origin':790,827 'outperform':1240 'overal':408 'overhead':1180 'packag':641 'panorama':477,527 'paper':131,138 'part':305 'partial':5,15,26,64,148,167,176,224,238,259,278,300,344,376,413,441,557,1004,1047,1218 'pass':810 'payload':571 'pick':124 'pinpoint':1095,1229 'point':770,1119 'poll':723 'possibl':619 'potenti':637,699 'practic':462 'practition':478 'preserv':788 'prevent':287 'probe':115 'problem':128,327,420 'proceed':679 'process':80,371,382,535,544,587,611,1123 'product':289,296,432 'production-depend':431 'program':607,622,661,756,765,787,807 'progress':313 'provid':931 'quick':87 'random':216,1126 're':451,912 're-execut':911 'real':621,1002,1216 'real-world':1001,1215 'recov':385 'reduc':783 'reduct':766 'region':566 'releas':243 'reli':480,862 'repair':91 'replic':663 'replica':752 'report':539,894 'reproduc':1014 'request':492 'requestor':531,551 'requir':435 'research':521 'resourc':720,1114 'respons':499 'restart':89,391 'result':302,355,643,786,919,1238 'retain':776 'reveal':411 'run':482,602,629,687,710,774,883,899,980 'runner':854 'runtim':436,455,655,878 'safeti':860 'sampl':217 'sandbox':675 'scope':1231 'second':495,859,983,1087,1152,1227 'see':282 'semant':341 'send':489 'serious':326 'set':180,850 'sever':419 'shallow':507 'shown':1032 'signal':838,871 'signific':1239 'silent':348 'simpl':284 'simpli':910 'six':1008,1192 'size':996 'slow':319,328 'softwar':10,20,192,423 'soot':951 'sourc':1097 'specif':161,363,564 'state':459,472,517,588,824 'state-of-the-art':471,516 'state-of-the-practic':458 'statist':118 'status':500 'sticki':379 'structur':791 'stuck':314 'studi':146,189,410,428 'style':650 'suffer':81 'surfac':46,107 'synchronis':719 'synthet':1138 'system':9,19,41,160,173,193,204,229,247,308,424,977,999,1009,1039,1184,1194,1206 'system-specif':159 'tabl':1036 'table6':1124 'take':69,987 'taken':592 'target':534 'ten':1198 'term':1182 'test':285,577,1025,1129 'thing':57 'three':252,272,1074 'throughout':241 'throughput':1185 'thus':95 'time':72,1084,1149,1224 'timer':852 'today':129 'took':395 'top':271,763 'top-down':762 'total':83 'tradit':108 'transient':927 'trigger':360,1136 'true':691 'unabl':310 'uncaught':262 'undefin':339 'understand':1,11,182 'unless':386 'use':113,158,598,727,948,960 'valid':898,909,934 'various':530 'version':1133,1162 'vulner':638,700,749,779,795,843,865 'wait':725 'watchdog':112,165,445,600,647,669,678,751,814,818,834,881,885,974,986,1053,1090,1155,1175,1203,1209 'wherea':1061 'wide':511 'within':249 'won':133 'word':1188 'work':522 'world':1003,1217 'wrong':354 'yarn':967 'year':253 'zombi':337 'zookeep':194,961,1135,1165	en	Adrian Colyer
937	Modern C	{"ver":2,"uid":1,"hash":"SHA1:45882bdf2adc9cf0d66ed1c59e442140c9363b25"}	https://modernc.gforge.inria.fr/	2020-09-04 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24361469"> https://news.ycombinator.com/item?id=24361469 </a>	02431c73881e1e12eeb5b7fd6a6104d40e94f01d	\N	f	2020-09-04 19:10:00	2020-09-06 22:10:10.36321	0			'/item?id=24361469':6 'c':2 'comment':3 'modern':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24361469':4	zh	netgusto
992	【Rust日报】2020-09-06	{"ver":2,"uid":1,"hash":"SHA1:4912b2ea44b6b51725664cd79b978efdd270e511"}	https://rustcc.cn/article?id=161ea08c-6a6a-42b0-98d4-f1386819d492	2020-09-06 12:26:26	<h3>Vscode 数据结构可视化插件</h3>\n<p>#rust #vscode</p>\n<p>Vscode debug工具，一个数据结构可视化插件，支持<strong>JS/TS/Rust/Python</strong>，数据结构教学好工具，如果小编上学那会儿数据结构课能用这种工具辅助，很多同学就不会在学期中还没入门数据结构课程了。</p>\n<p><a href="https://github.com/hediet/vscode-debug-visualizer" rel="noopener noreferrer">Repo</a></p>\n<p><a href="https://twitter.com/ray_codes_stuff/status/1300783285707182080?s=21" rel="noopener noreferrer">ReadMore</a></p>\n<h3>Evil_DLL 用来测试注入方法的DLL</h3>\n<p>#dll</p>\n<p>用Rust实现用来测试注入方法的DLL。下面时往 "c:\\pwned" 写入一个名为 pwned_{pid}.txt 的demo。</p>\n<ul>\n<li>{pid} = pid of process injected.</li>\n</ul>\n<p>文件内容如下：</p>\n<pre><code>[*]          Pid: "7204"\n[*]      Process: "C:\\\\Windows\\\\system32\\\\regsvr32.exe"\n[*]         Args: [".\\\\evil_dll.dll"]\n[*]         User: "user"\n[*]       Domain: "DOMAIN"\n[*] Created file: "c:\\\\pwned\\\\pwned_7204.txt"\n</code></pre>\n<p>要编译所有依赖到DLL，需要在项目根目录创建<code>.cargo/config.toml</code>文件，并写入以下内容：</p>\n<pre><code>[target.x86_64-pc-windows-msvc]\nrustflags = ["-Ctarget-feature=+crt-static"]\n</code></pre>\n<p><a href="https://github.com/theflakes/Evil_DLL" rel="noopener noreferrer">Repo</a></p>\n<h3>Rust 2021年计划 - Rust核心团队</h3>\n<p>#rust #roadmap</p>\n<p><a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html" rel="noopener noreferrer">Read More</a></p>\n<h3>Rust 序列化相关库综合分析</h3>\n<p>#rust #crate</p>\n<p>干货文章，作者对现在用于生产环境的Rust序列化相关的库做了benchmark，细致的分析了每个库具体适用的场景，总结来说：</p>\n<ul>\n<li>如果那你需要快速序列化和反序列化，bincode是你最好的选择</li>\n<li>如果被序列化的内容很小，可是试试MessagePack，但你可能会在反序列化牺牲一些运行时间</li>\n<li>在嵌入式场景中Postcard提供了很好的折中方案</li>\n<li>FlatBuffer很复杂，而且占用的空间比应有的多，除非您以多种语言使用Schema定义，否则没有理由使用它。即使这样做了，JSON也是更好的选择</li>\n<li>JSON是三种可读格式中最快的，这是有道理的，因为它在业界得到了广泛的使用，并受益于SIMD优化</li>\n</ul>\n<p><a href="https://blog.logrocket.com/rust-serialization-whats-ready-for-production-today/" rel="noopener noreferrer">ReadMore</a></p>\n<hr>\n<p>From 日报小组 李冬杰 Lenpeng</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rust.cc/" rel="noopener noreferrer">Rustcc 论坛: 支持 rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f620" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	abbd37cdffaa8e030a7ea642c2a195a1cba9ff9a	\N	f	2020-09-06 13:10:00	2020-09-10 05:10:03.181528	0			'-06':4 '-09':3 '/ts/rust/python':13 '2020':2 '2021年计划':71 '7204':39 'args':45 'bincode是你最好的选择':86 'c':25,41,53 'cargo/config.toml':58 'crate':80 'created':51 'crt':67 'crt-static':66 'ctarget':64 'ctarget-feature':63 'debug工具':10 'dll':20,22 'domain':49,50 'evil':19 'evil_dll.dll':46 'feature':65 'file':52 'flatbuffer很复杂':91 'from':102 'injected':36 'json也是更好的选择':96 'json是三种可读格式中最快的':97 'lenpeng':105 'more':76 'of':34 'pid':29,32,33,38 'process':35,40 'pwned':26,28,54 'pwned_7204.txt':55 'read':75 'readmore':18,101 'regsvr32.exe':44 'repo':17,69 'roadmap':74 'rss':110 'rust':7,70,73,77,79 'rustcc':107 'rustflags':62 'rust日报':1 'rust核心团队':72 'rust语言中文社区':112 'static':68 'system32':43 'target.x86_64-pc-windows-msvc':61 'txt':30 'user':47,48 'vscode':5,8,9 'windows':42 '一个数据结构可视化插件':11 '下面时往':24 '但你可能会在反序列化牺牲一些运行时间':89 '作者对现在用于生产环境的rust序列化相关的库做了benchmark':82 '写入一个名为':27 '即使这样做了':95 '可是试试messagepack':88 '否则没有理由使用它':94 '因为它在业界得到了广泛的使用':99 '在嵌入式场景中postcard提供了很好的折中方案':90 '如果小编上学那会儿数据结构课能用这种工具辅助':15 '如果被序列化的内容很小':87 '如果那你需要快速序列化和反序列化':85 '干货文章':81 '并写入以下内容':60 '并受益于simd优化':100 '序列化相关库综合分析':78 '很多同学就不会在学期中还没入门数据结构课程了':16 '微信公众号':111 '总结来说':84 '支持':109 '支持js':12 '数据结构可视化插件':6 '数据结构教学好工具':14 '文件':59 '文件内容如下':37 '日报小组':103 '李冬杰':104 '用rust实现用来测试注入方法的dll':23 '用来测试注入方法的dll':21 '的demo':31 '社区学习交流平台订阅':106 '细致的分析了每个库具体适用的场景':83 '而且占用的空间比应有的多':92 '要编译所有依赖到dll':56 '论坛':108 '这是有道理的':98 '除非您以多种语言使用schema定义':93 '需要在项目根目录创建':57		
269	[推荐] 这个网站堪称宝藏，收藏起来吧	{"ver":2,"uid":1,"hash":"SHA1:23a459609523d43acbdecdf2681d51c4ddee97b8"}	https://toutiao.io/k/voyjhtq	2020-08-14 19:10:10	[推荐] 这个网站堪称宝藏，收藏起来吧	3fb07564c1631b397399e1e05fb8028b26e9ee96	\N	f	2020-08-14 19:10:00	2020-08-25 15:10:10.052507	0			'推荐':1,4 '收藏起来吧':3,6 '这个网站堪称宝藏':2,5	zh	
1038	Belarus opposition leader Maria Kolesnikova 'snatched from street' in Minsk	{"ver":2,"uid":1,"hash":"SHA1:41ce583dacd667de74e6c83c846894098473f31e"}	https://www.theguardian.com/world/2020/sep/07/belarus-opposition-leader-maria-kolesnikova-snatched-from-street-in-minsk-reports	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24400691"> https://news.ycombinator.com/item?id=24400691 </a>	b85e7af8d115bca6bea740bf63a8a4a23393930b	\N	f	2020-09-07 19:10:00	2020-09-10 05:10:14.187812	0			'/item?id=24400691':14 'belarus':1 'comment':11 'kolesnikova':5 'leader':3 'maria':4 'minsk':10 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24400691':12 'opposit':2 'snatch':6 'street':8	zh	RealityVoid
15	Mid-stack inlining in Go	{"ver":2,"uid":1,"hash":"SHA1:b64b06052ee589e8bc9168d81053bd109ec91e51"}	https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go	2020-05-06 08:00:49	\n<p>In the <a href="https://dave.cheney.net/2020/04/25/inlining-optimisations-in-go">previous post</a> I discussed how leaf inlining allows the Go compiler to reduce the overhead of function calls and extend optimisation opportunities across function boundaries. In this post I&#8217;ll discuss the limits of inlining and leaf vs mid-stack inlining.</p>\n\n\n\n<h2>The limits of inlining</h2>\n\n\n\n<p>Inlining a function into its caller removes the call&#8217;s overhead and increases the opportunity for the compiler to apply additional optimisations so the question should be asked, if some inlining is good, would more be better, <em>why not inline as much as possible?</em></p>\n\n\n\n<p>Inlining trades possibly larger program sizes for potentially faster execution time. The main reason to limit inlining is creating many inlined copies of a function can increase compile time and result in larger binaries for marginal gain. Even taking into account the opportunities for further optimisation, aggressive inlining tends to increase the size of, and the time too compile, the resulting binary.</p>\n\n\n\n<p>Inlining works best for <a href="https://medium.com/@joshsaintjacque/small-functions-considered-awesome-c95b3fd1812f">small functions</a> that do relatively little work compared to the overhead of calling them. As the size of a function grows, the time saved avoiding the call&#8217;s overhead diminishes relative to the work done inside the function. Larger functions tend to be more complex, thus the benefits of optimising their inlined forms vs in situ are reduced.</p>\n\n\n\n<h2>Inlining budget</h2>\n\n\n\n<p>During compilation each function&#8217;s inlineabilty is calculated using what is known as the <em>inlining budget</em><span id='easy-footnote-1-4076' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go#easy-footnote-bottom-1-4076' title='The budget the Go compiler applies to each function when considering if it is eligible for inlining changes release to release.'><sup>1</sup></a></span>. The cost calculation can be tricky to internalise but is broadly one unit per node in the AST for simple things like unary and binary operations but can be higher for complex operations like <code>make</code>. Consider this example:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nfunc small() string {\n    s := "hello, " + "world!"\n    return s\n}\n\nfunc large() string {\n    s := "a"\n    s += "b"\n    s += "c"\n    s += "d"\n    s += "e"\n    s += "f"\n    s += "g"\n    s += "h"\n    s += "i"\n    s += "j"\n    s += "k"\n    s += "l"\n    s += "m"\n    s += "n"\n    s += "o"\n    s += "p"\n    s += "q"\n    s += "r"\n    s += "s"\n    s += "t"\n    s += "u"\n    s += "v"\n    s += "w"\n    s += "x"\n    s += "y"\n    s += "z"\n    return s\n}\n\nfunc main() {\n    small()\n    large()\n}</code></pre>\n\n\n\n<p>Compiling this function with <code>-gcflags=-m=2</code> allows us to see the cost the compiler assigns to each function.</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go build -gcflags=-m=2 inl.go </strong>\n# command-line-arguments\n./inl.go:3:6: can inline small with cost 7 as: func() string { s := "hello, world!"; return s }\n./inl.go:8:6: cannot inline large: function too complex: cost 82 exceeds budget 80\n./inl.go:38:6: can inline main with cost 68 as: func() { small(); large() }\n./inl.go:39:7: inlining call to small func() string { s := "hello, world!"; return s }</pre>\n\n\n\n<p>The compiler determined that <code>func small()</code> can be inlined due to its cost of 7. <code>func large()</code> was determined to be too expensive. <code>func main()</code>has been marked as eligible and assigned a cost of 68; 7 from the body of <code>small</code>, 57 from the function call to <code>small</code> and the remainder in its own overhead.</p>\n\n\n\n<p>The inlining budget can be controlled to some degree with the <code>-gcflag=-l</code> flag. Currently the values that apply are:</p>\n\n\n\n<ul><li><code>-gcflags=-l=0</code> is the default level of inlining.</li><li><code>-gcflags=-l</code> (or <code>-gcflags=-l=1</code>) disables inlining.</li><li><code>-gcflags=-l=2</code> and <code>-gcflags=-l=3</code> are currently unused and have no effect over <code>-gcflags=-l=0</code></li><li><code>-gcflags=-l=4</code> reduces the cost for inlining non-leaf functions and calls through interfaces.<span id='easy-footnote-2-4076' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go#easy-footnote-bottom-2-4076' title='Keep in mind that the compiler authors warn that &amp;#8220;&lt;a href=&quot;https://github.com/golang/go/blob/be08e10b3bc07f3a4e7b27f44d53d582e15fd6c7/src/cmd/compile/internal/gc/inl.go#L11&quot;&gt;Additional levels of inlining (beyond -l) may be buggy and are not supported&amp;#8221;&lt;/a&gt;. Caveat emptor.'><sup>2</sup></a></span></li></ul>\n\n\n\n<h3>Hairy optimisations</h3>\n\n\n\n<p>Some functions with a relatively low inlining cost may be ineligible because of their complexity. This is known as the function&#8217;s hairiness as the semantics of some operations are hard to reason about once inlined, for example <code>recover</code>, <code>break</code>. Others, like <code>select</code> and <code>go</code>, involve co-ordination with the runtime so the extra effort of inlining doesn&#8217;t pay for itself.</p>\n\n\n\n<p>The list of hairy statements also includes things like <code>for </code>and <code>range</code> which don&#8217;t have an inherently large cost, but simply haven&#8217;t been optimised yet.</p>\n\n\n\n<h2>Mid stack inlining</h2>\n\n\n\n<p>Historically the Go compiler only performed leaf inlining&#8211;only functions which did not call other functions were eligible. In the context of the hairiness discussion previously, a function call would disqualify the function from being inlined.</p>\n\n\n\n<p>Enter mid stack inlining which, as its name implies, allows functions in the middle of a call stack to be inlined without requiring everything below them to be eligible. Mid stack inlining was introduced by David Lazar in Go 1.9 and improved in subsequent releases. <a href="https://docs.google.com/presentation/d/1Wcblp3jpfeKwA0Y4FOmj63PW52M_qmNqlQkNaLj0P5o/edit#slide=id.p">This presentation</a> goes into some of the difficulties with retaining the behaviour of stack traces and <code>runtime.Callers</code> in code paths that had been heavily inlined.</p>\n\n\n\n<p>We see an example of mid-stack inlining in the previous example. After inlining, <code>func main()</code> contains the body of <code>func small()</code> and a call to <code>func large()</code>, thus it is considered a non-leaf function. Historically this would have prevented it from being further inlined even though its combined cost was less than the inlining budget.</p>\n\n\n\n<p>The primary use case for mid stack inlining is to reduce the overhead of a path through the call stack. Consider this example:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "fmt"\n    "strconv"\n)\n\ntype Rectangle struct {}\n\n//go:noinline\nfunc (r *Rectangle) Height() int {\n    h, _ := strconv.ParseInt("7", 10, 0)\n    return int(h)\n}\n\nfunc (r *Rectangle) Width() int {\n    return 6\n}\n\nfunc (r *Rectangle) Area() int { return r.Height() * r.Width() }\n\nfunc main() {\n    var r Rectangle\n    fmt.Println(r.Area())\n}</code></pre>\n\n\n\n<p>In this example <code>r.Area()</code> is a simple function which calls two others. <code>r.Width()</code> can be inlined while <code>r.Height()</code>, simulated here with the <code>//go:noinline</code> annotation, cannot. <span id='easy-footnote-3-4076' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go#easy-footnote-bottom-3-4076' title='The compiler is powerful enough that it can inline complex functions like &lt;code&gt;strconv.ParseInt&lt;/code&gt;. As a experiment, try removing the &lt;code&gt;//go:noinline&lt;/code&gt; annotation and observe the result with &lt;code&gt;-gcflags=-m=2&lt;/code&gt;.'><sup>3</sup></a></span></p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go build -gcflags='-m=2' square.go                                                                                                          </strong>\n# command-line-arguments\n./square.go:12:6: cannot inline (*Rectangle).Height: marked go:noinline                                                                               \n./square.go:17:6: can inline (*Rectangle).Width with cost 2 as: method(*Rectangle) func() int { return 6 }\n./square.go:21:6: <strong>can inline (*Rectangle).Area with cost 67 as: method(*Rectangle) func() int { return r.Height() * r.Width() }                       </strong>./square.go:21:61: inlining call to (*Rectangle).Width method(*Rectangle) func() int { return 6 }                                                     \n./square.go:23:6: cannot inline main: function too complex: cost 150 exceeds budget 80                        \n./square.go:25:20: inlining call to (*Rectangle).Area method(*Rectangle) func() int { return r.Height() * r.Width() }\n./square.go:25:20: inlining call to (*Rectangle).Width method(*Rectangle) func() int { return 6 }</pre>\n\n\n\n<p>As the multiplication performed by <code>r.Area()</code> is cheap compared to the overhead of calling it, inlining <code>r.Area()</code>&#8216;s single expression is a net win even if its downstream caller to <code>r.Height()</code> remains ineligible.</p>\n\n\n\n<h3>Fast path inlining</h3>\n\n\n\n<p>The most startling example of the power of mid-stack inlining comes from 2019 when <a href="https://go-review.googlesource.com/c/go/+/148959">Carlo Alberto Ferraris improved the performance</a> of <code>sync.Mutex.Lock()</code> by allowing the fast path of the lock&#8211;the uncontended case&#8211;to be inlined into its caller. Prior to this change <code>sync.Mutex.Lock()</code> was a large function containing many hairy conditions which made it ineligible to be inlined. Even in the case where the lock was available, the caller had to pay the overhead of calling <code>sync.Mutex.Lock()</code>.</p>\n\n\n\n<p>Carlo&#8217;s change split <code>sync.Mutex.Lock()</code> into two functions (a process he dubbed <em>outlining</em>). The outer <code>sync.Mutex.Lock()</code> method now calls <code>sync/atomic.CompareAndSwapInt32()</code> and returns to the caller immediately if the CAS succeeds. If not, the function falls through to <code>sync.Mutex.lockSlow()</code> which handles the slow path required to register interest on the lock and park the goroutine.<span id='easy-footnote-4-4076' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go#easy-footnote-bottom-4-4076' title='The expression &lt;code&gt;race.Enable&lt;/code&gt; is a constant controlled by the &lt;code&gt;-race&lt;/code&gt; flag passed to the &lt;code&gt;go&lt;/code&gt; tool. It is &lt;code&gt;false&lt;/code&gt; for normal builds which allows the compiler to elide those code paths entirely.'><sup>4</sup></a></span></p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go build -gcflags='-m=2 -l=0' sync 2&gt;&amp;1 | grep '(*Mutex).Lock'</strong>\n../go/src/sync/mutex.go:72:6: can inline (*Mutex).Lock with cost 69 as: method(*Mutex) func() { if "sync/atomic".CompareAndSwapInt32(&amp;m.state, 0, mutexLocked) { if race.Enabled {&nbsp; }; return&nbsp; }; m.lockSlow() }</pre>\n\n\n\n<p>By splitting the function into an easily inlineable outer function, falling through to a complex inner function to handle the slow path Carlo&#8217;s combined mid stack inlining and the <a href="https://dave.cheney.net/2019/08/20/go-compiler-intrinsics">compiler&#8217;s support for intrinsic operations</a> to reduce the cost of an uncontended lock by 14%. Then he repeated the trick for an additional 9% saving in <code><a href="https://go-review.googlesource.com/c/go/+/152698">sync.RWMutex.Unlock()</a></code>.</p>\n	52b0791a484c328da84088ddaa1e3b2a62c274c1	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.217325	0			'/go':855,914 '/go/src/sync/mutex.go':1214 '/inl.go':379,396,410,423 '/square.go':929,939,956,974,988,1002,1017 '0':515,547,866,1207,1232 '1':527,1210 '1.9':734 '10':865 '12':930 '14':1283 '150':998 '17':940 '2':356,373,532,923,948,1205,1209 '20':1004,1019 '2019':1081 '21':957,975 '23':989 '25':1003,1018 '3':380,536,918 '38':411 '39':424 '4':550 '57':479 '6':381,398,412,876,931,941,955,958,987,990,1030,1216 '61':976 '67':965 '68':418,472 '69':1223 '7':387,425,451,473,864 '72':1215 '8':397 '80':409,1001 '82':406 '9':1292 'a':56,122,183,293,469,569,685,710,789,798,838,897,1052,1114,1155,1251 'about':599 'account':139 'across':31 'additional':75,1291 'after':778 'aggressive':145 'alberto':1084 'allowing':1092 'allows':16,357,704 'also':634 'an':645,767,1243,1279,1290 'and':27,44,66,128,153,264,467,486,533,540,560,609,639,735,755,788,1167,1197,1266 'annotation':916 'apply':74,511 'are':221,512,537,595 'area':880,962,1009 'arguments':378,928 'as':95,97,179,237,388,419,465,584,589,700,949,966,1031,1224 'asked':82 'assigned':468 'assigns':365 'ast':258 'available':1136 'avoiding':189 'b':295 'be':81,90,207,245,269,444,457,497,575,714,722,906,1103,1126 'because':577 'been':463,653,762 'behaviour':751 'being':693,810 'below':719 'benefits':212 'best':163 'better':91 'binaries':132 'binary':160,265 'body':476,784 'boundaries':33 'break':605 'broadly':251 'budget':224,408,495,823,1000 'budget1':240 'build':370,920,1202 'but':249,267,649 'by':729,1035,1091,1238,1282 'c':297 'calculated':232 'calculation':243 'call':63,191,427,483,672,687,711,790,842,978,1006,1021 'caller':60,1059,1107,1138,1171 'calling':177,1044,1145 'calls':26,561,901,1165 'can':124,244,268,382,413,443,496,905,942,959,1217 'cannot':399,917,932,991 'carlo':1083,1147,1260 'cas':1175 'case':827,1101,1131 'change':1111,1149 'cheap':1038 'co':613 'co-ordination':612 'code':758 'combined':816,1262 'comes':1079 'command':376,926 'command-line-arguments':375,925 'compareandswapint32':1230 'compared':172,1039 'compilation':226 'compile':126,157 'compiler':19,72,364,438,662,1268 'compiling':350 'complex':209,272,404,996,1252 'complexity':580 'conditions':1120 'consider':276,844 'considered':797 'containing':1117 'contains':782 'context':679 'controlled':498 'copies':120 'cost':242,362,386,405,417,449,470,553,573,648,817,947,964,997,1222,1277 'creating':117 'currently':507,538 'd':299 'david':730 'default':518 'degree':501 'determined':439,455 'did':670 'difficulties':747 'diminishes':194 'disables':528 'discuss':39 'discussed':12 'discussion':683 'disqualify':689 'do':168 'doesn':624 'don':642 'done':199 'downstream':1058 'dubbed':1158 'due':446 'during':225 'e':301 'each':227,367 'easily':1244 'effect':543 'effort':621 'eligible':466,676,723 'enter':695 'even':136,813,1055,1128 'everything':718 'example':278,603,768,777,846,894,1070 'exceeds':407,999 'execution':108 'expensive':459 'expression':1050 'extend':28 'extra':620 'f':303 'falling':1248 'falls':1181 'fast':1064,1094 'faster':107 'ferraris':1085 'flag':506 'fmt':850 'fmt.println':890 'for':70,105,133,142,164,259,271,554,602,627,638,828,1271,1289 'forms':217 'from':474,480,692,809,1080 'func':281,289,346,389,420,430,441,452,460,780,786,792,857,870,877,885,952,969,984,1012,1027,1227 'function':25,32,57,123,184,202,228,352,368,402,482,586,686,691,802,899,994,1116,1180,1241,1247,1254 'functions':166,204,559,567,668,674,705,1154 'further':143,811 'g':305 'gain':135 'gcflag':504 'gcflags':354,371,513,522,525,530,534,545,548,921,1203 'go':6,18,369,610,661,733,919,937,1201 'goes':742 'good':87 'goroutine.4':1200 'grep':1211 'grows':185 'h':307,862,869 'had':761,1139 'hairiness':588,682 'hairy':564,632,1119 'handle':1256 'handles':1186 'hard':596 'has':462 'have':541,644,806 'haven':651 'he':1157,1285 'heavily':763 'height':860,935 'hello':285,392,433 'here':911 'higher':270 'historically':659,803 'how':13 'i':11,37,309 'if':83,1056,1173,1177,1228,1234 'immediately':1172 'implies':703 'import':849 'improved':736,1086 'in':5,7,34,130,219,256,489,677,706,732,737,757,774,892,1129,1294 'includes':635 'increase':125,149 'increases':67 'ineligible':576,1063,1124 'inherently':646 'inl.go':374 'inline':94,383,400,414,933,943,960,992,1218 'inlineabilty':230 'inlineable':1245 'inlined':119,216,445,601,694,715,764,812,907,1104,1127 'inlining':4,15,43,50,54,55,85,99,115,146,161,223,239,426,494,521,529,555,572,623,658,666,698,726,773,779,822,831,977,1005,1020,1046,1066,1078,1265 'inner':1253 'inside':200 'int':861,868,874,881,953,970,985,1013,1028 'interest':1193 'interfaces.2':563 'internalise':248 'into':58,138,743,1105,1152,1242 'intrinsic':1272 'introduced':728 'involve':611 'is':86,116,231,235,250,516,582,796,832,896,1037,1051 'it':795,808,1045,1123 'its':59,448,490,701,815,1057,1106 'itself':628 'j':311 'k':313 'known':236,583 'l':315,505,514,523,526,531,535,546,549,1206 'large':290,349,401,422,453,647,793,1115 'larger':102,131,203 'lazar':731 'leaf':14,45,558,665,801 'less':819 'level':519 'like':262,274,607,637 'limit':114 'limits':41,52 'line':377,927 'list':630 'little':170 'll':38 'lock':1098,1134,1196,1213,1220,1281 'low':571 'm':317,355,372,922,1204 'm.lockslow':1237 'm.state':1231 'made':1122 'main':111,280,347,415,461,781,848,886,993 'make':275 'many':118,1118 'marginal':134 'marked':464,936 'may':574 'method':950,967,982,1010,1025,1163,1225 'mid':2,48,656,696,724,771,829,1076,1263 'mid-stack':1,47,770,1075 'middle':708 'more':89,208 'most':1068 'much':96 'multiplication':1033 'mutex':1212,1219,1226 'mutexlocked':1233 'n':319 'name':702 'net':1053 'no':542 'node':255 'noinline':856,915,938 'non':557,800 'non-leaf':556,799 'not':93,671,1178 'now':1164 'o':321 'of':24,42,53,121,152,176,182,213,450,471,477,520,578,592,622,631,680,709,745,752,769,785,837,1043,1071,1074,1089,1096,1144,1278 'on':1194 'once':600 'one':252 'only':663,667 'operations':266,273,594,1273 'opportunities':30,141 'opportunity':69 'optimisation':29,144 'optimisations':76,565 'optimised':654 'optimising':214 'or':524 'ordination':614 'other':673 'others':606,903 'outer':1161,1246 'outlining':1159 'over':544 'overhead':23,65,175,193,492,836,1042,1143 'own':491 'p':323 'package':279,847 'park':1198 'path':839,1065,1095,1189,1259 'paths':759 'pay':626,1141 'per':254 'performance':1088 'performed':664,1034 'possible':98 'possibly':101 'post':10,36 'potentially':106 'power':1073 'presentation':741 'prevented':807 'previous':9,776 'previously':684 'primary':825 'prior':1108 'process':1156 'program':103 'q':325 'question':79 'r':327,858,871,878,888 'r.area':891,895,1036,1047 'r.height':883,909,972,1015,1061 'r.width':884,904,973,1016 'race.enabled':1235 'range':640 'reason':112,598 'recover':604 'rectangle':853,859,872,879,889,934,944,951,961,968,980,983,1008,1011,1023,1026 'reduce':21,834,1275 'reduced':222 'reduces':551 'register':1192 'relative':195 'relatively':169,570 'releases':739 'remainder':488 'remains':1062 'removes':61 'repeated':1286 'required':1190 'requiring':717 'result':129 'resulting':159 'retaining':749 'return':287,344,394,435,867,875,882,954,971,986,1014,1029,1236 'returns':1168 'runtime':617 'runtime.callers':756 's':64,192,229,284,288,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,329,330,332,334,336,338,340,342,345,391,395,432,436,587,1048,1148,1261,1269 'saved':188 'saving':1293 'see':360,766 'select':608 'semantics':591 'should':80 'simple':260,898 'simply':650 'simulated':910 'single':1049 'situ':220 'size':151,181 'sizes':104 'slow':1188,1258 'small':165,282,348,384,421,429,442,478,485,787 'so':77,618 'some':84,500,566,593,744 'split':1150 'splitting':1239 'square.go':924 'stack':3,49,657,697,712,725,753,772,830,843,1077,1264 'startling':1069 'statements':633 'strconv':851 'strconv.parseint':863 'string':283,291,390,431 'struct':854 'subsequent':738 'succeeds':1176 'support':1270 'sync':1208 'sync.mutex.lock':1090,1112,1146,1151,1162 'sync.mutex.lockslow':1184 'sync.rwmutex.unlock':1295 'sync/atomic':1229 'sync/atomic.compareandswapint32':1166 't':331,625,643,652 'taking':137 'tend':205 'tends':147 'than':820 'that':167,440,510,760 'the':8,17,22,40,51,62,68,71,78,110,140,150,154,158,174,180,186,190,197,201,211,238,241,257,361,363,437,475,481,487,493,503,508,517,552,585,590,616,619,629,660,678,681,690,707,746,750,775,783,821,824,835,841,913,1032,1041,1067,1072,1087,1093,1097,1099,1130,1133,1137,1142,1160,1170,1174,1179,1187,1195,1199,1240,1257,1267,1276,1287 'their':215,579 'them':178,720 'then':1284 'things':261,636 'this':35,277,351,581,740,804,845,893,1110 'though':814 'through':562,840,1182,1249 'thus':210,794 'time':109,127,155,187 'to':20,73,113,148,173,196,206,247,359,366,428,447,456,484,499,597,713,721,791,833,979,1007,1022,1040,1060,1102,1109,1125,1140,1169,1183,1191,1250,1255,1274 'too':156,403,458,995 'traces':754 'trades':100 'trick':1288 'tricky':246 'two':902,1153 'type':852 'u':333 'unary':263 'uncontended':1100,1280 'unit':253 'unused':539 'us':358 'use':826 'using':233 'v':335 'values':509 'var':887 'vs':46,218 'w':337 'was':454,727,818,1113,1135 'we':765 'were':675 'what':234 'when':1082 'where':1132 'which':641,669,699,900,1121,1185 'while':908 'why':92 'width':873,945,981,1024 'win':1054 'with':353,385,416,502,568,615,748,912,946,963,1221 'without':716 'work':171,198 'works':162 'world':286,393,434 'would':88,688,805 'x':339 'y':341 'yet':655 'z':343	en	Dave Cheney
448	Gitlab-ci：从零开始的前端自动化部署	{"ver":2,"uid":1,"hash":"SHA1:86880cf95cd9065c955e0933d0fa4b084c6d8f4a"}	https://toutiao.io/k/x3mna3p	2020-08-20 01:10:09	Gitlab-ci：从零开始的前端自动化部署	4a79d7ce67498f152cd10537e2dfe2e776c851d8	\N	f	2020-08-20 01:10:00	2020-08-21 00:10:48.691648	0			'ci':3,7 'gitlab':2,6 'gitlab-ci':1,5 '从零开始的前端自动化部署':4,8	zh	
338	分享一个 Flink checkpoint 失败的问题和解决办法	{"ver":2,"uid":1,"hash":"SHA1:e150250f20ee8756e84af6f187964456d8003cea"}	https://toutiao.io/k/s2vgaxn	2020-08-17 02:10:08	分享一个 Flink checkpoint 失败的问题和解决办法	e011b54f3a2eb2d20b553c38fd4ba7ca328598f7	\N	f	2020-08-17 02:10:00	2020-08-18 00:10:10.663877	0			'checkpoint':3,7 'flink':2,6 '分享一个':1,5 '失败的问题和解决办法':4,8	zh	
37	C/C++ Documentation Using Sphinx	{"ver":2,"uid":1,"hash":"SHA1:c424077a7ce6c86a0b6f2006d73c2d9dece3c551"}	https://leimao.github.io/blog/CPP-Documentation-Using-Sphinx/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In my previous blog posts, I have described how to use Sphinx to create documentations for Python projects and how to use Doxygen to create documentations for C/C++ projects. While creating C/C++ documentations using Doxygen is somewhat simple, Doxygen also has some kind of limitations, such as its limited number of themes and lack of customization in creating new pages, which I have mentioned in my previous blog posts. It turns out that Sphinx could leverage the XML files generated by Doxygen to create the documentation for C/C++ projects by using the Sphinx extension <a href="https://breathe.readthedocs.io/en/latest/">Breathe</a>.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to briefly describe how to use Sphinx, Breath, and Doxygen to create C/C++ documentations. Because Doxygen has to be used anyway for creating XML files from the annotated C/C++ source code, it is highly recommended that the reader should go through the previous two blog posts, <a href="https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/">Python Documentation Using Sphinx</a> and <a href="https://leimao.github.io/blog/CPP-Documentation-Using-Doxygen/">C/C++ Documentation Using Doxygen</a>, before reading this one.</p>\n\n<h3 id="triangle-c-library">Triangle C++ Library</h3>\n\n<p>This time, we are also using the C++ Triangle library <code class="language-plaintext highlighter-rouge">trianglelib</code> as an example. It could be found in the <a href="https://github.com/leimao/Sphinx-CPP-TriangleLib">Sphinx C++ TriangleLib</a> on my GitHub. The <a href="https://sphinx-c-trianglelib.readthedocs.io/en/latest/">documentation</a> corresponding to this project could be found on Read the Docs.</p>\n\n<p><br /></p>\n\n<p>The installation of the library and the building of the documentation could be found in the <code class="language-plaintext highlighter-rouge">README</code>s in the repository.</p>\n\n<p><br /></p>\n\n<p>Note that this repository is almost identical to the code used in the <a href="https://github.com/leimao/Doxygen-CPP-TriangleLib">Doxygen CPP TriangleLib</a> repository, except that the <a href="https://github.com/leimao/Sphinx-CPP-TriangleLib/blob/master/docs/sphinx/source/conf.py">Sphinx configuration file</a> is different and it has additional <code class="language-plaintext highlighter-rouge">reStructuredText</code> files required for Sphinx, and an additional dependency on Breathe.</p>\n\n<h3 id="notes">Notes</h3>\n\n<h4 id="sphinx-configurations">Sphinx Configurations</h4>\n\n<p>The Sphinx configuration file <a href="https://github.com/leimao/Sphinx-CPP-TriangleLib/blob/master/docs/sphinx/source/conf.py"><code class="language-plaintext highlighter-rouge">conf.py</code></a> used in this project is slightly different from the <a href="https://github.com/leimao/Doxygen-CPP-TriangleLib/blob/master/docs/sphinx/source/conf.py">one</a> used in the <a href="https://github.com/leimao/Doxygen-CPP-TriangleLib">Doxygen CPP TriangleLib</a> project.</p>\n\n<p><br /></p>\n\n<p>It requires to use the following Sphinx extensions.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">extensions</span> <span class="o">=</span> <span class="p">[</span>\n    <span class="s">'sphinx.ext.autodoc'</span><span class="p">,</span>\n    <span class="s">'sphinx.ext.doctest'</span><span class="p">,</span>\n    <span class="s">'sphinx.ext.mathjax'</span><span class="p">,</span>\n    <span class="s">'sphinx.ext.viewcode'</span><span class="p">,</span>\n    <span class="s">'sphinx.ext.imgmath'</span><span class="p">,</span> \n    <span class="s">'sphinx.ext.todo'</span><span class="p">,</span>\n    <span class="s">'breathe'</span><span class="p">,</span>\n<span class="p">]</span>\n</code></pre></div></div>\n\n<p>In addition, we have added the Doxygen XML automatic building for the documentations and told the Breathe extension where the XML files are.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">subprocess</span>\n<span class="n">subprocess</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s">'make clean'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>\n<span class="n">subprocess</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s">'cd ../../doxygen ; doxygen'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>\n\n<span class="n">breathe_projects</span> <span class="o">=</span> <span class="p">{</span> <span class="s">"trianglelib"</span><span class="p">:</span> <span class="s">"../../doxygen/build/xml/"</span> <span class="p">}</span>\n<span class="n">breathe_default_project</span> <span class="o">=</span> <span class="s">"trianglelib"</span>\n</code></pre></div></div>\n\n<h4 id="doxygen-configurations">Doxygen Configurations</h4>\n\n<p>The Doxygen configuration file <a href="https://github.com/leimao/Sphinx-CPP-TriangleLib/blob/master/docs/doxygen/Doxyfile"><code class="language-plaintext highlighter-rouge">Doxyfile</code></a> remained the same. Note that <code class="language-plaintext highlighter-rouge">GENERATE_XML</code> has to be <code class="language-plaintext highlighter-rouge">YES</code>, because Sphinx uses the XML files generated by Doxygen to create documentations, instead of parsing the source code directly.</p>\n\n<h4 id="restructuredtext">reStructuredText</h4>\n\n<p>The Breathe extension will add some <a href="https://breathe.readthedocs.io/en/latest/directives.html#directives-config-variables">additional <code class="language-plaintext highlighter-rouge">reStructuredText</code> directives</a> to Sphinx. We could use <code class="language-plaintext highlighter-rouge">doxygenclass</code> or <code class="language-plaintext highlighter-rouge">doxygenfunction</code> for documenting classes and functions, respectively. For example, using the following <code class="language-plaintext highlighter-rouge">reStructuredText</code>, I have created the documentation for a class <code class="language-plaintext highlighter-rouge">trianglelib::Triangle</code> and two functions <code class="language-plaintext highlighter-rouge">trianglelib::createTriangle</code> and <code class="language-plaintext highlighter-rouge">trianglelib::isTriangle</code>.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The trianglelib C++ API Reference\n=================================\n\nC++ Classes\n-----------\n\n.. doxygenclass:: trianglelib::Triangle\n    :members:\n\nC++ Functions\n-------------\n\n.. doxygenfunction:: trianglelib::createTriangle\n\n.. doxygenfunction:: trianglelib::isTriangle\n</code></pre></div></div>\n\n<p>In the <a href="https://raw.githubusercontent.com/leimao/Sphinx-Python-TriangleLib/master/docs/source/api.rst">API <code class="language-plaintext highlighter-rouge">reStructuredText</code> file</a> of the <a href="https://github.com/leimao/Sphinx-Python-TriangleLib">Sphinx Python Triangle Library</a>, we have seen how to use <code class="language-plaintext highlighter-rouge">automodule</code> to automatically document all the classes and functions in a single file, without having to specify the classes and functions one by one. We could also do similar things using the <a href="https://breathe.readthedocs.io/en/latest/autoindex.html#autodoxygenindex-example">autodoxygenindex</a> directive. Unfortunately, I think the implementation of <code class="language-plaintext highlighter-rouge">autodoxygenindex</code> is not matured yet, and it would introduce some unwanted information in the documentation. In addition, in Python, we tend to separate different modules into different Python files and Sphinx could take advantage of that, whereas in C++, we tend to put a lot of declarations in one single header file. Using <code class="language-plaintext highlighter-rouge">autodoxygenindex</code> would put almost the documentations of almost all the classes and functions together. If we would like to generate a single API documentation, it is OK. However, if we would like to separate the documentations of different classes and functions into modules, it will be problematic.</p>\n\n<p><br /></p>\n\n<p>So I think probably specifying classes and functions one by one manually in different <code class="language-plaintext highlighter-rouge">reStructuredText</code> files might be best option currently for documenting C/C++ projects using Sphinx.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>Creating C/C++ documentations using Sphinx and Breathe is one step further to creating C/C++ documentations using Doxygen. Unfortunately, this means that the user would have to know how to create C/C++ documentations using Doxygen.</p>\n\n<p><br /></p>\n\n<p>Sphinx and Breathe does not seem to read C/C++ source code directly. Otherwise, it might be able to directly parse C/C++ source code without having to rely on Doxygen.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/">Python Documentation Using Sphinx</a></li>\n  <li><a href="https://leimao.github.io/blog/CPP-Documentation-Using-Doxygen/">C/C++ Documentation Using Doxygen</a></li>\n  <li><a href="https://github.com/leimao/Sphinx-Python-TriangleLib">Sphinx Python Triangle Library</a></li>\n  <li><a href="https://github.com/leimao/Doxygen-CPP-TriangleLib">Doxygen C++ Triangle Library</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/CPP-Documentation-Using-Sphinx/">C/C++ Documentation Using Sphinx</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 05, 2020.</p>	0163f9b1bd0786d383170e31e6358886a2f4bb8c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.421947	0			'/../doxygen':342 '/../doxygen/build/xml':349 '05':742 '2020':743 'abl':694 'ad':314 'add':396 'addit':257,265,311,398,531 'advantag':548 'almost':234,571,575 'also':45,174,501 'annot':135 'anyway':128 'api':442,460,590 'august':741 'autodoxygenindex':507,515,568 'automat':318,477 'automodul':475 'best':633 'blog':9,73,103,152 'book':739 'breath':100,115,268,309,326,346,350,393,650,680 'briefli':109 'build':216,319 'c':168,177,191,441,444,450,553,721 'c/c':1,33,37,93,120,136,159,638,645,657,674,686,698,712,724 'cd':341 'class':411,428,445,481,493,578,606,620 'clean':337 'code':138,238,389,688,700 'conf.py':276 'configur':250,271,274,355,358 'correspond':198 'could':80,185,202,220,404,500,546 'cpp':243,291 'creat':19,30,36,63,89,119,130,382,423,644,656,673 'createtriangl':435,454 'current':635 'custom':61 'declar':561 'default':351 'depend':266 'describ':13,110 'differ':253,283,538,541,605,628 'direct':390,400,508,689,696 'doc':208 'document':2,20,31,38,91,121,155,160,197,219,322,383,410,425,478,529,573,591,603,637,646,658,675,709,713,725 'doxyfil':360 'doxygen':28,40,44,87,117,123,162,242,290,316,343,354,357,380,660,677,706,715,720 'doxygenclass':406,446 'doxygenfunct':408,452,455 'exampl':183,416 'except':246 'extens':99,301,302,327,394 'file':84,132,251,259,275,331,359,377,462,487,543,566,630 'final':642 'follow':299,419 'found':187,204,222 'function':413,433,451,483,495,580,608,622 'generat':85,366,378,587 'github':195 'go':147 'header':565 'high':141 'howev':595 'ident':235 'implement':513 'import':333 'inform':526 'instal':210 'instead':384 'introduc':523 'introduct':5 'istriangl':438,457 'kind':48 'know':670 'lack':59 'lei':732,735 'leverag':81 'librari':169,179,213,468,719,723 'like':107,585,599 'limit':50,54 'log':738 'lot':559 'make':336 'manual':626 'mao':733,736 'matur':518 'mean':663 'member':449 'mention':69 'might':631,692 'modul':539,610 'new':64 'note':229,269,364 'number':55 'ok':594 'one':166,286,496,498,563,623,625,652 'option':634 'origin':729 'otherwis':690 'page':65 'pars':386,697 'post':10,74,104,153 'previous':8,72,150 'probabl':618 'problemat':614 'project':23,34,94,201,280,293,347,352,639 'publish':730 'put':557,570 'python':22,154,466,533,542,708,717 'read':164,206,685 'reader':145 'readm':225 'recommend':142 'refer':443,707 'reli':704 'remain':361 'remark':643 'repositori':228,232,245 'requir':260,295 'respect':414 'restructuredtext':258,391,399,420,461,629 'seem':683 'seen':471 'separ':537,601 'shell':338,344 'similar':503 'simpl':43 'singl':486,564,589 'slight':282 'somewhat':42 'sourc':137,388,687,699 'specifi':491,619 'sphinx':4,17,79,98,114,157,190,249,262,270,273,300,373,402,465,545,641,648,678,711,716,727 'sphinx.ext.autodoc':303 'sphinx.ext.doctest':304 'sphinx.ext.imgmath':307 'sphinx.ext.mathjax':305 'sphinx.ext.todo':308 'sphinx.ext.viewcode':306 'step':653 'subprocess':334 'subprocess.call':335,340 'take':547 'tend':535,555 'theme':57 'thing':504 'think':511,617 'time':171 'togeth':581 'told':324 'triangl':167,178,430,448,467,718,722 'trianglelib':180,192,244,292,348,353,429,434,437,440,447,453,456 'true':339,345 'turn':76 'two':151,432 'unfortun':509,661 'unwant':525 'use':3,16,27,39,96,113,127,156,161,175,239,277,287,297,374,405,417,474,505,567,640,647,659,676,710,714,726 'user':666 'wherea':551 'without':488,701 'would':106,522,569,584,598,667 'xml':83,131,317,330,367,376 'yes':371 'yet':519	en	Lei Mao
39	Python Documentation Using Sphinx	{"ver":2,"uid":1,"hash":"SHA1:ba921728c18e5245b24748c9a7530a40fdb63799"}	https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Documentation is undoubtedly a key component to a successful project, in addition to the actual useful code. I have been knowing <a href="https://www.sphinx-doc.org/">Sphinx</a> for Python documentation for a while. However, since I don’t have any knowledge in <a href="https://docutils.sourceforge.io/rst.html">reStructuredText</a> which Sphinx heavily relies on and there is no beginner’s tutorial that is really close to a real Python project, my attempt to learn Sphinx had not been very successful. Instead, I had been using Markdown for documenting projects. It turns out that Markdown is OK for a simple README or some simple usages of the project. When the project becomes heavy and huge, such as when developing a library, systematic and automatic documentation becomes necessary.</p>\n\n<p><br /></p>\n\n<p>There are quite a few tutorial blogs or videos on Sphinx that could be found using Google. Usually the blogs and the videos are very short and the authors claimed that the readers or watchers should be able to use Sphinx in their own projects after reading or watching. This is not entirely true in practice. In those tutorials, there are missing logical connections between the kind of documentation we wanted to create and how we are going to create it. The concrete examples in those tutorials are nowhere close to a real Python library project. So those tutorials did not really helped me in studying Sphinx.</p>\n\n<p><br /></p>\n\n<p>Recently, I watched <a href="https://www.youtube.com/watch?v=QNHM7q2hLh8">Brandon Rhodes’s Sphinx tutorial session at PyCon 2013</a> by chance on YouTube. Although Brandon talked too much and it took almost three hours for the tutorial session, I found the concrete example he provided, the introduction to reStructuredText, the motivations and logical connections, and the hands-on Sphinx experiences are somethings that I was looking for. After watching the tutorial session and doing some offline practice, I am now able to create good documentation using Sphinx for my Python projects.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I am going to make some notes or updates on Brandon’s tutorial. Note that the Sphinx beginners should always watch Brandon’s long tutorial in the first place, and this blog post could by no means replace Brandon’s tutorial.</p>\n\n<h3 id="triangle-python-library">Triangle Python Library</h3>\n\n<p>Brandon has created a simple <a href="https://github.com/brandon-rhodes/sphinx-tutorial/tree/master/triangle-project"><code class="language-plaintext highlighter-rouge">trianglelib</code></a> library specifically for his <a href="https://github.com/brandon-rhodes/sphinx-tutorial">Sphinx tutorial</a>. The library and the accompanying Sphinx tutorial were created using Python 2 and Sphinx 1.x. To make the library and Sphinx tutorial compatible for Python 3 and the latest Sphinx 3.x, I modified Brandon’s code a little bit. In addition, I have also moved the API documentations entirely to the Python scripts, restructured the project directory layout, and taken better advantage of the latest <a href="https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html"><code class="language-plaintext highlighter-rouge">autodoc</code></a> extension in Sphinx.</p>\n\n<p><br /></p>\n\n<p>The upgraded <code class="language-plaintext highlighter-rouge">trianglelib</code> could be found in <a href="https://github.com/leimao/Sphinx-Python-TriangleLib">Sphinx Python TriangleLib</a> on my GitHub. The <a href="https://sphinx-python-trianglelib.readthedocs.io/">documentation</a> corresponding to this project could be found on Read the Docs.</p>\n\n<h3 id="notes">Notes</h3>\n\n<h4 id="sphinx-cultivates-the-best-practice-in-documentation">Sphinx Cultivates the Best Practice in Documentation</h4>\n\n<p>Previously, during the project development, I usually only put some brief comments in the Python functions or methods. However, since Python is not a strictly typing programming language, and those comments would not usually contain the typing information, I would hardly remember how those variables could be used.</p>\n\n<p><br /></p>\n\n<p>In addition, creating a documentation after the entire project is done is an approach that I know it is wrong but I have been doing. It is low-efficiency and often error-prone. The correct approach should be documenting while programming. Since Sphinx could automatically generate documentations for all the modules, classes, and functions that follow its supported <a href="https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html"><code class="language-plaintext highlighter-rouge">docstring</code> format</a>, we are encouraged to document the Python program more comprehensively. Tools, such as <a href="https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring">Python Docstring Generator</a> for VS Code could automatically generate the template for <code class="language-plaintext highlighter-rouge">docstring</code> to save our time in documentation.</p>\n\n<p><br /></p>\n\n<p>A well-documented Python program that is Sphinx-compatible looks like this.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""\nUse the triangle class to represent triangles.\n"""</span>\n\n<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>\n\n<span class="k">class</span> <span class="nc">Triangle</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>\n    <span class="s">"""\n    A :class:`~trianglelib.shape.Triangle` object is a three-sided polygon.\n\n    You instantiate a :class:`~trianglelib.shape.Triangle` by providing exactly three lengths ``a``, ``b``, and ``c``.\n\n    They can either be intergers or floating-point numbers, and should be listed clockwise around the triangle.\n\n    If the three lengths *cannot* make a valid triangle, then ``ValueError`` will be raised instead.\n\n    &gt;&gt;&gt; from trianglelib.shape import Triangle\n    &gt;&gt;&gt; t = Triangle(3, 4, 5)\n    &gt;&gt;&gt; print(t.is_equilateral())\n    False\n    &gt;&gt;&gt; print(t.area())\n    6.0\n\n    Triangles support the following attributes, operators, and methods.\n\n    .. attribute:: a\n                   b\n                   c\n\n        The three side lengths provided during instantiation.\n\n    .. index:: pair: equality; triangle\n    .. method:: triangle1 == triangle2\n\n        Returns true if the two triangles have sides of the same lengths,\n        in the same order.\n        Note that it is okay if the two triangles\n        happen to start their list of sides at a different corner;\n        ``3,4,5`` is the same triangle as ``4,5,3``\n        but neither of these are the same triangle\n        as their mirror image ``5,4,3``.\n    """</span>\n\n    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>\n        <span class="s">"""\n        Create a :class:`~trianglelib.shape.Triangle` object with sides of lengths `a`, `b`, and `c`.\n\n        Raises `ValueError` if the three length values provided cannot\n        actually form a triangle.\n\n        :param a: side length one\n        :type a: :class:`float`\n        :param b: side length two\n        :type b: :class:`float`\n        :param c: side length three\n        :type c: :class:`float`\n        :raises ValueError: side lengths must all be positive\n        :raises ValueError: one side is too long to make a triangle\n        """</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="nb">float</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>\n        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span> <span class="n">s</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">):</span>\n            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'side lengths must all be positive'</span><span class="p">)</span>\n        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_rotations</span><span class="p">()</span> <span class="p">):</span>\n            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'one side is too long to make a triangle'</span><span class="p">)</span>\n\n    <span class="k">def</span> <span class="nf">_rotations</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""\n        Return each of the three ways of rotating our sides.\n\n        :return: three tuples of the side lengths of possible rotations\n        :rtype: ((:class:`float`, :class:`float`, :class:`float`), (:class:`float`, :class:`float`, :class:`float`), (:class:`float`, :class:`float`, :class:`float`))\n        """</span>\n        <span class="k">return</span> <span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">),</span>\n                <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">),</span>\n                <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">))</span>\n\n    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>\n        <span class="s">"""\n        Return whether this :class:`~trianglelib.shape.Triangle` object equals another triangle.\n\n        :param other: another :class:`~trianglelib.shape.Triangle` object\n        :type other: :class:`~trianglelib.shape.Triangle`\n        :return: whether the two :class:`~trianglelib.shape.Triangle` objects are equivalent\n        :rtype: :class:`bool`\n        """</span>\n        <span class="n">sides</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">)</span>\n        <span class="k">return</span> <span class="nb">any</span><span class="p">(</span> <span class="n">sides</span> <span class="o">==</span> <span class="n">rotation</span> <span class="k">for</span> <span class="n">rotation</span> <span class="ow">in</span> <span class="n">other</span><span class="p">.</span><span class="n">_rotations</span><span class="p">()</span> <span class="p">)</span>\n\n    <span class="k">def</span> <span class="nf">is_equivalent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">triangle</span><span class="p">):</span>\n        <span class="s">"""\n        Return whether this triangle equals another triangle.\n\n        :param triangle: another :class:`~trianglelib.shape.Triangle` object\n        :type triangle: :class:`~trianglelib.shape.Triangle`\n        :return: whether the two :class:`~trianglelib.shape.Triangle` objects are equivalent\n        :rtype: :class:`bool`\n        """</span>\n        <span class="k">return</span> <span class="bp">self</span> <span class="o">==</span> <span class="n">triangle</span>\n\n    <span class="k">def</span> <span class="nf">is_similar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">triangle</span><span class="p">):</span>\n        <span class="s">"""\n        Return whether this :class:`~trianglelib.shape.Triangle` object is similar to another triangle.\n\n        :param triangle: another :class:`~trianglelib.shape.Triangle` object\n        :type triangle: :class:`~trianglelib.shape.Triangle`\n        :return: whether the two :class:`~trianglelib.shape.Triangle` objects are similar\n        :rtype: :class:`bool`\n        """</span>\n        <span class="k">return</span> <span class="nb">any</span><span class="p">(</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">/</span> <span class="n">a</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">/</span> <span class="n">b</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span> <span class="o">/</span> <span class="n">c</span><span class="p">)</span>\n                    <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">triangle</span><span class="p">.</span><span class="n">_rotations</span><span class="p">()</span> <span class="p">)</span>\n</code></pre></div></div>\n\n<h4 id="make-good-use-of-doctest">Make Good Use of Doctest</h4>\n\n<p>Sphinx allows running some simple tests on the programs we created via <a href="https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html"><code class="language-plaintext highlighter-rouge">doctest</code></a>. So sometimes writing some test code snippets in the reStructuredText not only helps documentation but also helps program validation.</p>\n\n<p><br /></p>\n\n<p>The test code could be something like the followings.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; from trianglelib.shape import Triangle\n&gt;&gt;&gt; t1 = Triangle(3, 4, 5)\n&gt;&gt;&gt; t2 = Triangle(4, 5, 3)\n&gt;&gt;&gt; t3 = Triangle(3, 4, 6)\n&gt;&gt;&gt; print(t1 == t2)\nTrue\n&gt;&gt;&gt; print(t1 == t3)\nFalse\n&gt;&gt;&gt; print(t1.area())\n6.0\n&gt;&gt;&gt; print(t1.scale(2.0).area())\n24.0\n</code></pre></div></div>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.. testcode::\n\n    from trianglelib.shape import Triangle\n    t = Triangle(5, 5, 5)\n    print('Equilateral?', t.is_equilateral())\n    print('Isosceles?', t.is_isosceles())\n\n.. testoutput::\n\n    Equilateral? True\n    Isosceles? True\n</code></pre></div></div>\n\n<h4 id="version-control">Version Control</h4>\n\n<p>We could publish the documentations to our projects on <a href="https://readthedocs.org/">Read the Docs</a> for free. Read the Docs also allows us to do version control for our projects and documentations by creating <code class="language-plaintext highlighter-rouge">tag</code> or <code class="language-plaintext highlighter-rouge">branch</code> to our GitHub projects. It is extremely useful for the users who are not using the latest version of the software.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>Learning Sphinx is not easy and I think there is no 15-minute shortcut for beginners. Instead of randomly Googling and reading superficial blogs and videos, spending two to three hours on studying <a href="https://www.youtube.com/watch?v=QNHM7q2hLh8">Brandon Rhodes’s Sphinx tutorial session at PyCon 2013</a> actually saves time.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://github.com/leimao/Sphinx-Python-TriangleLib">Sphinx Python TriangleLib</a></li>\n  <li><a href="https://github.com/brandon-rhodes/sphinx-tutorial">Brandon Rhodes’s Sphinx Tutorial</a></li>\n  <li><a href="https://www.youtube.com/watch?v=QNHM7q2hLh8">Brandon Rhodes’s Sphinx Tutorial Session at PyCon 2013</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/">Python Documentation Using Sphinx</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 02, 2020.</p>	f23de7ea54b91c9faa830299f4e894098a574898	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.427052	0			'0':899 '02':1368 '1':387 '15':1298 '2':384 '2.0':1202 '2013':239,1328,1349 '2020':1369 '24.0':1204 '3':399,404,711,783,793,808,1176,1183,1186 '4':712,784,791,807,1177,1181,1187 '5':713,785,792,806,1178,1182,1212,1213,1214 '6':1188 '6.0':720,1199 'abl':158,302 'accompani':377 'actual':20,837,1329 'addit':17,415,527 'advantag':436 'allow':1130,1248 'almost':252 'also':418,1157,1247 'although':244 'alway':336 'anoth':999,1003,1045,1049,1086,1090 'api':421 'approach':539,563 'area':1203 'around':687 'attempt':66 'attribut':725,729 'august':1367 'author':149 'autodoc':440 'automat':117,572,608 'b':669,731,813,825,851,856,893,904,917,921,1115,1120 'becom':105,119 'beginn':53,334,1302 'best':474 'better':435 'bit':413 'blog':127,140,315,348,1310 'book':1365 'bool':1022,1068,1109 'branch':1263 'brandon':231,245,327,338,355,361,408,1320,1336,1341 'brief':488 'c':671,732,814,827,860,865,895,905,918,922,1117,1121 'cannot':694,836 'chanc':241 'claim':150 'class':579,637,645,649,661,817,848,857,866,960,962,964,966,968,970,972,974,976,995,1004,1009,1015,1021,1050,1055,1061,1067,1080,1091,1096,1102,1108 'clockwis':686 'close':59,210 'code':22,410,606,1147,1163 'comment':489,508 'compat':396,630 'compon':11 'comprehens':597 'concret':203,262 'connect':184,274 'contain':512 'control':1229,1253 'corner':782 'correct':562 'correspond':459 'could':133,350,447,463,523,571,607,1164,1231 'creat':193,200,304,363,381,528,815,1139,1260 'cultiv':472 'def':809,936,988,1035,1072 'develop':112,482 'differ':781 'directori':431 'doc':469,1241,1246 'docstr':586,602,613 'doctest':1128,1141 'document':2,6,30,82,118,189,306,422,458,477,530,566,574,592,619,623,1155,1234,1258,1351 'done':536 'easi':1291 'effici':555 'either':674 'encourag':590 'entir':173,423,533 'eq':989 'equal':742,998,1044 'equilater':716,1216,1218,1224 'equival':1019,1037,1065 'error':559 'error-pron':558 'exact':665 'exampl':204,263 'experi':281 'extens':441 'extrem':1270 'fals':717,1196 'final':1285 'first':344 'float':679,849,858,867,890,892,894,961,963,965,967,969,971,973,975,977 'floating-point':678 'follow':583,724,1169 'form':838 'format':587 'found':135,260,449,465 'free':1243 'function':493,581 'generat':573,603,609 'github':456,1266 'go':198,319 'good':305,1125 'googl':137,1306 'hand':278 'hands-on':277 'happen':772 'hard':518 'heavi':106 'heavili':46 'help':223,1154,1158 'hour':254,1317 'howev':34,496 'huge':108 'imag':805 'import':643,707,1172,1208 'index':740 'inform':515 'init':810 'instanti':659,739 'instead':75,704,1303 'interg':676 'introduct':5,267 'isoscel':1220,1222,1226 'key':10 'kind':187 'know':26,542 'knowledg':41 'languag':505 'latest':402,439,1280 'layout':432 'learn':68,1287 'lei':1358,1361 'length':667,693,736,758,823,833,844,853,862,871,909,955 'librari':114,215,360,367,374,392 'like':632,1167 'list':685,776 'littl':412 'log':1364 'logic':183,273 'long':340,882,931 'look':287,631 'low':554 'low-effici':553 'make':321,390,695,884,933,1124 'mao':1359,1362 'markdown':80,88 'math':642 'mean':353 'method':495,728,744 'minut':1299 'mirror':804 'miss':182 'modifi':407 'modul':578 'motiv':271 'move':419 'much':248 'must':872,910 'necessari':120 'neither':795 'note':323,330,470,763 'nowher':209 'number':681 'object':647,651,819,997,1006,1017,1052,1063,1082,1093,1104 'offlin':297 'often':557 'ok':90 'okay':767 'one':845,878,927 'oper':726 'order':762 'origin':1355 'other._rotations':1034 'pair':741 'param':841,850,859,1001,1047,1088 'place':345 'point':680 'polygon':657 'posit':875,913 'possibl':957 'post':316,349 'practic':176,298,475 'previous':478 'print':714,718,1189,1193,1197,1200,1215,1219 'program':504,568,595,625,1137,1159 'project':15,64,83,101,104,165,216,312,430,462,481,534,1237,1256,1267 'prone':560 'provid':265,664,737,835 'publish':1232,1356 'put':486 'pycon':238,1327,1348 'python':1,29,63,214,311,359,383,398,426,452,492,498,594,601,624,1334,1350 'quit':123 'rais':703,828,868,876,906,925 'random':1305 'read':167,467,1239,1244,1308 'reader':153 'readm':94 'real':62,213 'realli':58,222 'recent':228 'refer':1332 'reli':47 'remark':1286 'rememb':519 'replac':354 'repres':639 'restructur':428 'restructuredtext':43,269,1151 'return':747,939,949,978,992,1011,1027,1040,1057,1069,1077,1098,1110 'rhode':232,1321,1337,1342 'rotat':937,946,958,1030,1032 'rtype':959,1020,1066,1107 'run':1131 'save':615,1330 'script':427 'self':811,938,990,1038,1070,1075 'self._rotations':924 'self.a':887,979,983,987,1024,1112 'self.b':888,980,984,985,1025,1114 'self.c':889,981,982,986,1026,1116 'session':236,258,293,1325,1346 'short':146 'shortcut':1300 'side':656,735,754,778,821,843,852,861,870,879,908,928,948,954,1023,1029 'similar':1074,1084,1106 'simpl':93,97,365,1133 'sinc':35,497,569 'snippet':1148 'softwar':1284 'someth':283,1166 'sometim':1143 'specif':368 'spend':1313 'sphinx':4,27,45,69,131,161,227,234,280,308,333,371,378,386,394,403,443,451,471,570,629,1129,1288,1323,1333,1339,1344,1353 'sphinx-compat':628 'sqrt':644 'start':774 'strict':502 'studi':226,1319 'success':14,74 'superfici':1309 'support':585,722 'systemat':115 't.area':719 't.is':715,1217,1221 't1':1174,1190,1194 't1.area':1198 't1.scale':1201 't2':1179,1191 't3':1184,1195 'tag':1261 'taken':434 'talk':246 'templat':611 'test':1134,1146,1162 'testcod':1205 'testoutput':1223 'think':1294 'three':253,655,666,692,734,832,863,943,950,1316 'three-sid':654 'time':617,1331 'took':251 'tool':598 'triangl':358,636,640,646,689,698,708,710,721,743,752,771,789,801,840,886,935,1000,1039,1043,1046,1048,1054,1071,1076,1087,1089,1095,1173,1175,1180,1185,1209,1211 'triangle._rotations':1123 'triangle1':745 'triangle2':746 'trianglelib':366,446,453,1335 'trianglelib.shape':706,1171,1207 'trianglelib.shape.triangle':650,662,818,996,1005,1010,1016,1051,1056,1062,1081,1092,1097,1103 'true':174,748,1192,1225,1227 'tupl':951 'turn':85 'tutori':55,126,179,207,219,235,257,292,329,341,357,372,379,395,1324,1340,1345 'two':751,770,854,1014,1060,1101,1314 'type':503,514,846,855,864,1007,1053,1094 'undoubt':8 'updat':325 'upgrad':445 'us':1249 'usag':98 'use':3,21,79,136,160,307,382,525,634,1126,1271,1278,1352 'user':1274 'usual':138,484,511 'valid':697,1160 'valu':834 'valueerror':700,829,869,877,907,926 'variabl':522 'version':1228,1252,1281 'via':1140 'video':129,143,1312 'vs':605 'want':191 'watch':169,230,290,337 'watcher':155 'way':944 'well':622 'well-docu':621 'whether':993,1012,1041,1058,1078,1099 'would':509,517 'write':1144 'wrong':545 'x':388,405 'youtub':243	en	Lei Mao
938	SoftBank unmasked as ‘Nasdaq whale’ that stoked tech rally	{"ver":2,"uid":1,"hash":"SHA1:a4b640f989da1be6269b247275cabc91ba7ad401"}	https://www.ft.com/content/75587aa6-1f1f-4e9d-b334-3ff866753fa2	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24375351"> https://news.ycombinator.com/item?id=24375351 </a>	cfabc28fa712840ef579bfe26b7ad7cda699ef43	\N	f	2020-09-04 20:10:00	2020-09-07 17:10:10.033743	0			'/item?id=24375351':13 'comment':10 'nasdaq':4 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24375351':11 'ralli':9 'softbank':1 'stoke':7 'tech':8 'unmask':2 'whale':5	zh	xoxoy
38	C/C++ Documentation Using Doxygen	{"ver":2,"uid":1,"hash":"SHA1:d41f600d91e1f0c10a51b5e92f3fcbe041add1f9"}	https://leimao.github.io/blog/CPP-Documentation-Using-Doxygen/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In my previous <a href="https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/">blog post</a>, I discussed how to create documentations for Python development using Sphinx. For creating documentations for C/C++ development, Doxygen is more widely used and technically easier to use. I have created a trivial Triangle C++ library, which is equivalent to the Triangle Python library I used for the <a href="https://leimao.github.io/blog/Python-Documentation-Using-Sphinx/">Sphinx Python documentation blog post</a>, and used Doxygen for creating documentations.</p>\n\n<p><br /></p>\n\n<p>Unlike Sphinx which uses several <code class="language-plaintext highlighter-rouge">reStructuredText</code> files and source code for creating documentations, all the documentation content generated using Doxygen seems to be only from the source code. In this blog post, I would like to briefly describe how to create documentations using Doxygen and host it on <a href="https://readthedocs.org/">Read the Docs</a>.</p>\n\n<h3 id="triangle-c-library">Triangle C++ Library</h3>\n\n<p>The C++ <code class="language-plaintext highlighter-rouge">trianglelib</code> could be found in the <a href="https://github.com/leimao/Doxygen-CPP-TriangleLib">Doxygen C++ TriangleLib</a> on my GitHub. The <a href="https://doxygen-c-trianglelib.readthedocs.io/en/latest/">documentation</a> corresponding to this project could be found on Read the Docs.</p>\n\n<p><br /></p>\n\n<p>The installation of the library and the building of the documentation could be found in the <code class="language-plaintext highlighter-rouge">README</code>s in the repository.</p>\n\n<h3 id="notes">Notes</h3>\n\n<h4 id="doxyfile-configurations">Doxyfile Configurations</h4>\n\n<p>There are a couple of things in the <a href="https://github.com/leimao/Doxygen-CPP-TriangleLib/blob/master/docs/doxygen/Doxyfile"><code class="language-plaintext highlighter-rouge">Doxyfile</code></a> that might or must be configured.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n.tg .tg-nrix{text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Variable</th>\n    <th class="tg-uzvj">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">PROJECT_NAME</td>\n    <td class="tg-9wq8">Project name.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">PROJECT_NUMBER</td>\n    <td class="tg-9wq8">Project version number.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">PROJECT_BRIEF</td>\n    <td class="tg-9wq8">One sentence description about the project.</td>\n  </tr>\n  <tr>\n    <td class="tg-nrix">OUTPUT_DIRECTORY</td>\n    <td class="tg-nrix">The output directory for the documentation builds.</td>\n  </tr>\n  <tr>\n    <td class="tg-nrix">FULL_PATH_NAMES</td>\n    <td class="tg-nrix">Set to NO.</td>\n  </tr>\n  <tr>\n    <td class="tg-nrix">INPUT</td>\n    <td class="tg-nrix">The directory for the source code to be documented. Usually it only contains header files.</td>\n  </tr>\n  <tr>\n    <td class="tg-nrix">RECURSIVE</td>\n    <td class="tg-nrix">Whether recursively go through the INPUT.</td>\n  </tr>\n  <tr>\n    <td class="tg-nrix">GENERATE_XML</td>\n    <td class="tg-nrix">Set to YES if we would like to have Sphinx-styled documentations.</td>\n  </tr>\n</tbody>\n</table>\n\n<h4 id="c-docstrings">C++ Docstrings</h4>\n\n<p>The Doxygen C++ docstrings are not complicated. VS Code extension <a href="https://marketplace.visualstudio.com/items?itemName=cschlosser.doxdocgen">Doxygen Documentation Generator</a> could also be used for generating the docstring template.</p>\n\n<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**\n * @brief Triangle class used for triangle manipulations.\n */</span>\n<span class="k">class</span> <span class="nc">Triangle</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="cm">/**\n     * Create a new Triangle object of side lengths 1, 1, and 1.\n     * @brief Default constructor.\n     * @see Triangle(const double a, const double b, const double c)\n     * @see Triangle(const Triangle&amp; triangle)\n     */</span>\n    <span class="n">Triangle</span><span class="p">();</span>\n    <span class="cm">/**\n     * Create a new Triangle object from side lengths.\n     * @brief Constructor.\n     * @param a The Length of triangle side a.\n     * @param b The Length of triangle side b.\n     * @param c The Length of triangle side c.\n     * @see Triangle()\n     * @see Triangle(const Triangle&amp; triangle)\n     */</span>\n    <span class="n">Triangle</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">c</span><span class="p">);</span>\n    <span class="cm">/**\n     * Construct a new Triangle object from another Triangle object.\n     * @brief Copy constructor.\n     * @param triangle Another Triangle object.\n     * @see Triangle()\n     * @see Triangle(const double a, const double b, const double c)\n     */</span>\n    <span class="n">Triangle</span><span class="p">(</span><span class="k">const</span> <span class="n">Triangle</span><span class="o">&amp;</span> <span class="n">triangle</span><span class="p">);</span>\n\n    <span class="cm">/**\n     * @brief Get the length of side a.\n     * @return The length of side a.\n     */</span>\n    <span class="kt">double</span> <span class="n">getSideA</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Get the length of side b.\n     * @return The length of side b.\n     */</span>\n    <span class="kt">double</span> <span class="n">getSideB</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Get the length of side c.\n     * @return The length of side c.\n     */</span>    \n    <span class="kt">double</span> <span class="n">getSideC</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Get a vector of the Triangle objects whose side lengths have been rotated.\n     * @return A vector of Triangle objects.\n     */</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Triangle</span><span class="o">&gt;</span> <span class="n">rotations</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Assignment overloading.\n     * @param triangle Another Triangle object.\n     * @return The reference to the current Triangle object.\n     */</span> \n    <span class="n">Triangle</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Triangle</span><span class="o">&amp;</span> <span class="n">triangle</span><span class="p">);</span>\n    \n    <span class="cm">/**\n     * @brief Equivalence overloading.\n     * @param triangle another Triangle object.\n     * @return Whether the two Triangle objects are the same.\n     */</span>     \n    <span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Triangle</span><span class="o">&amp;</span> <span class="n">triangle</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Determine if the Triangle object is equivalent to the other.\n     * @param triangle Another Triangle object.\n     * @return Whether the two Triangle objects are the same.\n     */</span> \n    <span class="kt">bool</span> <span class="n">isEquivalent</span><span class="p">(</span><span class="k">const</span> <span class="n">Triangle</span><span class="o">&amp;</span> <span class="n">triangle</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>\n    <span class="cm">/**\n     * @brief Determine if the Triangle object is similar to the other.\n     * @param triangle Another Triangle object.\n     * @return Whether the two Triangle objects are similar.\n     */</span> \n    <span class="kt">bool</span> <span class="n">isSimilar</span><span class="p">(</span><span class="k">const</span> <span class="n">Triangle</span><span class="o">&amp;</span> <span class="n">triangle</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>\n    <span class="cm">/**\n     * @brief Determine if the Triangle object is quilateral.\n     * @return Whether the Triangle objects is equilateral.\n     */</span> \n    <span class="kt">bool</span> <span class="n">isEquilateral</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n    <span class="cm">/**\n     * @brief Determine if the Triangle object is isosceles.\n     * @return Whether the Triangle objects is isosceles.\n     */</span> \n    <span class="kt">bool</span> <span class="n">isIsosceles</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Get the perimeter of the Triangle object.\n     * @return The perimeter of the Triangle object.\n     */</span> \n    <span class="kt">double</span> <span class="n">perimeter</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n    <span class="cm">/**\n     * @brief Get the area of the Triangle object.\n     * @return The area of the Triangle object.\n     */</span> \n    <span class="kt">double</span> <span class="n">area</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>\n\n    <span class="cm">/**\n     * @brief Create a new scaled Triangle object.\n     * @return A new scaled Triangle object.\n     */</span> \n    <span class="n">Triangle</span> <span class="n">scale</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">factor</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>\n\n<span class="nl">private:</span>\n    <span class="cm">/**\n     * Lengths of side a, b, and c.\n     */</span> \n    <span class="kt">double</span> <span class="n">mA</span><span class="p">,</span> <span class="n">mB</span><span class="p">,</span> <span class="n">mC</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/**\n * @brief Create a Triangle object\n * @param a The Length of triangle side a.\n * @param b The Length of triangle side b.\n * @param c The Length of triangle side c.\n * @return A Triangle object.\n */</span>\n<span class="n">Triangle</span> <span class="nf">createTriangle</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">c</span><span class="p">);</span>\n\n<span class="cm">/**\n * @brief Determine if the three lengths provided could form a valid Triangle object.\n * @param a The Length of triangle side a.\n * @param b The Length of triangle side b.\n * @param c The Length of triangle side c.\n * @return true if the three lengths provided could form a valid Triangle object.\n * @return false if the three lengths provided could not form a valid Triangle object.\n */</span>\n<span class="kt">bool</span> <span class="nf">isTriangle</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">c</span><span class="p">);</span>\n</code></pre></div></div>\n\n<h4 id="main-page">Main Page</h4>\n\n<p>Create a main page description somewhere in the source code that Doxygen reads.</p>\n\n<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** \n * @mainpage Triangle Library Documentation\n * @section intro_sec Introduction\n * This is the Triangle C++ library for C++ Documentation Tutorial.\n * @section install_sec Installation\n *\n * @subsection install_dependencies Installing Dependencies\n * Do somethings ...\n * @subsection install_library Installing Library\n * Do somethings ...\n * @subsection install_example Installing Examples\n * Do somethings ...\n */</span>\n</code></pre></div></div>\n\n<h4 id="sphinx-configurations">Sphinx Configurations</h4>\n\n<p>Sphinx is not required for Doxygen documentation generation. However, if we want to host the Doxygen documentations on <a href="https://readthedocs.org/">Read the Docs</a> for free, we have to use Sphinx to generate the Doxygen-styled documentation.</p>\n\n<p><br /></p>\n\n<p>We need to create an empty Sphinx project, and add the following Python code to the Sphinx <code class="language-plaintext highlighter-rouge">conf.py</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">subprocess</span>\n<span class="n">subprocess</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s">'make clean'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>\n<span class="n">subprocess</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s">'cd ../../doxygen ; doxygen'</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>\n<span class="n">html_extra_path</span> <span class="o">=</span> <span class="p">[</span><span class="s">'../../doxygen/build/html'</span><span class="p">]</span>\n</code></pre></div></div>\n\n<p>It is nothing special but asking the OS to call <code class="language-plaintext highlighter-rouge">doxygen</code> to generate the Doxygen documentation HTML and copy it to the Sphinx <code class="language-plaintext highlighter-rouge">build</code> directory.</p>\n\n<h4 id="version-control">Version Control</h4>\n\n<p>As far as I can see, the Doxygen documentation hosted on <a href="https://readthedocs.org/">Read the Docs</a> has limited support for version control. I was only able to switch versions by changing the documentation URL, and there is no version control widget, which is usually seen in the Sphinx documentation hosted on Read the Docs, generated.</p>\n\n<ul>\n  <li>https://doxygen-c-trianglelib.readthedocs.io/en/latest/</li>\n  <li>https://doxygen-c-trianglelib.readthedocs.io/en/v1.0/</li>\n  <li>https://doxygen-c-trianglelib.readthedocs.io/en/v1.1/</li>\n</ul>\n\n<h4 id="themes">Themes</h4>\n\n<p>As far as I know, Doxygen does not have as many themes as Sphinx has.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>Comparing with Sphinx, Doxygen is relatively simpler to use. This is because, although Doxygen supports <code class="language-plaintext highlighter-rouge">reStructuredText</code> and <code class="language-plaintext highlighter-rouge">Markdown</code>, it is not required to deal with them during documentation generation. However, without spending too much effort investigating the advanced features of Doxygen, the Doxygen documentation does not look as comprehensive as the Sphinx documentation.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/doxygen-howto.html">How to Document Your Code for Doxygen</a></li>\n  <li><a href="https://stackoverflow.com/questions/36064976/using-doxygen-in-read-the-docs">Using Doxygen in Read the Docs</a></li>\n</ul>\n\n\n  <p><a href="https://leimao.github.io/blog/CPP-Documentation-Using-Doxygen/">C/C++ Documentation Using Doxygen</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 04, 2020.</p>	96777767b4211af50a2b394e374daa0855cfd638	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.424421	0			'/../doxygen':1062 '/../doxygen/build/html':1069 '/en/latest/':1152 '/en/v1.0/':1155 '/en/v1.1/':1158 '0':196 '04':1262 '1':431,432,434 '10px':225,263 '14px':221,255 '1px':210,244 '2020':1263 '5px':226,264 '9wq8':272 'abl':1120 'add':1044 'advanc':1214 'align':279,283,299,303,311,315 'also':405 'although':1189 'anoth':512,520,618,639,670,701 'area':775,782,788 'arial':214,248 'ask':1075 'assign':614 'august':1261 'b':445,474,480,502,532,562,568,814,835,841,861,887,893,936 'black':202,236 'blog':9,61,99 'bold':296 'book':1259 'bool':651,682,712,733,751,929 'border':190,194,200,204,208,234,238,242,274,290 'border-collaps':189 'border-color':199,233,273,289 'border-spac':193 'border-styl':203,237 'border-width':207,241 'break':229,267 'brief':329,413,435,463,515,540,556,572,588,613,634,657,688,718,736,754,772,790,821,865 'briefli':105 'build':157,344,1093 'c':44,121,124,132,389,393,448,482,488,505,535,578,584,816,843,849,864,895,901,939,967,970 'c/c':1,26,1244 'call':1079 'cd':1061 'center':280,300,312 'chang':1125 'class':415,420 'clean':1057 'code':78,96,357,399,951,1048,1235 'collaps':191,192 'color':201,235,275,291 'compar':1177 'complic':397 'comprehens':1225 'conf.py':1052 'configur':172,187,999 'const':440,443,446,451,493,497,500,503,527,530,533,537,555,571,587,612,631,653,656,684,687,714,717,735,753,771,789,805,808,856,859,862,931,934,937 'construct':506 'constructor':437,464,517 'contain':364 'content':85 'control':1096,1116,1134 'copi':516,1088 'correspond':139 'could':126,143,161,404,872,909,922 'coupl':176 'creat':15,23,40,67,80,109,423,455,791,822,942,1038 'createtriangl':855 'current':626 'deal':1200 'default':436 'depend':979,981 'describ':106 'descript':318,332,946 'determin':658,689,719,737,866 'develop':19,27 'directori':337,340,353,1094 'discuss':12 'doc':119,149,1020,1110,1148,1243 'docstr':390,394,411 'document':2,16,24,60,68,81,84,110,138,160,343,360,388,402,958,971,1006,1016,1034,1085,1105,1127,1143,1204,1220,1229,1233,1245 'doubl':441,444,447,498,501,504,528,531,534,553,569,585,769,787,806,817,857,860,863,932,935,938 'doxyfil':171,181 'doxygen':4,28,65,88,112,131,392,401,953,1005,1015,1032,1063,1080,1084,1104,1165,1180,1190,1217,1219,1237,1239,1247 'doxygen-c-trianglelib.readthedocs.io':1151,1154,1157 'doxygen-c-trianglelib.readthedocs.io/en/latest/':1150 'doxygen-c-trianglelib.readthedocs.io/en/v1.0/':1153 'doxygen-c-trianglelib.readthedocs.io/en/v1.1/':1156 'doxygen-styl':1031 'easier':35 'effort':1211 'empti':1040 'equilater':732 'equival':48,635,664 'exampl':993,995 'extens':400 'extra':1067 'factor':807 'fals':916 'famili':213,247 'far':1098,1161 'featur':1215 'file':75,366 'final':1175 'follow':1046 'font':212,219,246,253,257,294 'font-famili':211,245 'font-siz':218,252 'font-weight':256,293 'form':873,910,924 'found':128,145,163 'free':1022 'full':345 'generat':86,374,403,409,1007,1029,1082,1149,1205 'get':541,557,573,589,755,773 'getsidea':554 'getsideb':570 'getsidec':586 'github':136 'go':370 'header':365 'hidden':223,261 'host':114,1013,1106,1144 'howev':1008,1206 'html':1066,1086 'import':1053 'inherit':276,292 'input':351,373 'instal':151,974,976,978,980,985,987,992,994 'intro':960 'introduct':5,962 'investig':1212 'isequilater':734 'isequival':683 'isisoscel':752 'isoscel':743,750 'issimilar':713 'istriangl':930 'know':1164 'lei':1252,1255 'length':430,462,468,476,484,543,549,559,565,575,581,598,810,829,837,845,870,881,889,897,907,920 'librari':45,53,122,154,957,968,986,988 'like':103,382 'limit':1112 'log':1258 'look':1223 'ma':818 'main':940,944 'mainpag':955 'make':1056 'mani':1170 'manipul':419 'mao':1253,1256 'markdown':1194 'mb':819 'mc':820 'middl':284,304,316 'might':183 'much':1210 'must':185 'name':320,322,347 'need':1036 'new':425,457,508,793,799 'normal':230,259,268 'note':170 'noth':1072 'nrix':308 'number':324,327 'object':427,459,510,514,522,595,607,620,628,641,647,662,672,678,693,703,709,723,730,741,748,761,768,779,786,796,802,825,853,877,914,928 'one':330 'oper':630,652 'origin':1249 'os':1077 'output':336,339 'overflow':222,260 'overload':615,636 'pad':224,262 'page':941,945 'param':465,473,481,518,616,637,668,699,826,834,842,878,886,894 'path':346,1068 'perimet':757,764,770 'post':10,62,100 'previous':8 'privat':809 'project':142,319,321,323,325,328,335,1042 'provid':871,908,921 'public':422 'publish':1250 'python':18,52,59,1047 'quilater':725 'read':117,147,954,1018,1108,1146,1241 'readm':166 'recurs':367,369 'refer':623,1230 'relat':1182 'remark':1176 'repositori':169 'requir':1003,1198 'restructuredtext':74,1192 'return':547,563,579,602,621,642,673,704,726,744,762,780,797,850,902,915 'rotat':601,611 'san':216,250 'sans-serif':215,249 'scale':794,800,804 'sec':961,975 'section':959,973 'see':438,449,489,491,523,525,1102 'seem':89 'seen':1139 'sentenc':331 'serif':217,251 'set':348,376 'sever':73 'shell':1058,1064 'side':429,461,471,479,487,545,551,561,567,577,583,597,812,832,840,848,884,892,900 'similar':695,711 'simpler':1183 'size':220,254 'solid':206,240 'someth':983,990,997 'somewher':947 'sourc':77,95,356,950 'space':195 'special':1073 'spend':1208 'sphinx':21,58,70,386,998,1000,1027,1041,1051,1092,1142,1173,1179,1228 'sphinx-styl':385 'std':608 'style':205,239,387,1033 'subprocess':1054 'subprocess.call':1055,1060 'subsect':977,984,991 'support':1113,1191 'switch':1122 'td':198 'technic':34 'templat':412 'text':278,298,310 'text-align':277,297,309 'tg':188,197,231,269,271,285,287,305,307 'tg-9wq8':270 'tg-nrix':306 'tg-uzvj':286 'th':232 'theme':1159,1171 'thing':178 'three':869,906,919 'triangl':43,51,120,414,418,421,426,439,450,452,453,454,458,470,478,486,490,492,494,495,496,509,513,519,521,524,526,536,538,539,594,606,610,617,619,627,629,632,633,638,640,646,654,655,661,669,671,677,685,686,692,700,702,708,715,716,722,729,740,747,760,767,778,785,795,801,803,824,831,839,847,852,854,876,883,891,899,913,927,956,966 'trianglelib':125,133 'trivial':42 'true':903,1059,1065 'tutori':972 'two':645,676,707 'unlik':69 'url':1128 'use':3,20,32,37,55,64,72,87,111,407,416,1026,1185,1238,1246 'usual':361,1138 'uzvj':288 'valid':875,912,926 'variabl':317 'vector':591,604,609 'version':326,1095,1115,1123,1133 'vertic':282,302,314 'vertical-align':281,301,313 'vs':398 'want':1011 'weight':258,295 'whether':368,643,674,705,727,745 'whose':596 'wide':31 'widget':1135 'width':209,243 'without':1207 'word':228,266 'word-break':227,265 'would':102,381 'xml':375 'yes':378	en	Lei Mao
447	Bitmap 用户分群方法在贝壳 DMP 的实践和应用	{"ver":2,"uid":1,"hash":"SHA1:b151485dde3096a5f20dc3292c3e3335126a3e61"}	https://toutiao.io/k/rgkpykf	2020-08-20 01:10:09	Bitmap 用户分群方法在贝壳 DMP 的实践和应用	1c5b8128de54ccfcf1fb53809135a05d79f80fc9	\N	f	2020-08-20 01:10:00	2020-08-21 00:10:48.67312	0			'bitmap':1,5 'dmp':3,7 '用户分群方法在贝壳':2,6 '的实践和应用':4,8	zh	
838	Amazon deletes job listings for analysts to track ‘labor organizing threats’	{"ver":2,"uid":1,"hash":"SHA1:3c50e810332aa87249bf0da7dbd028c2023fa0c0"}	https://www.vice.com/en_us/article/qj4aqw/amazon-hiring-intelligence-analyst-to-track-labor-organizing-threats	2020-09-01 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24343361"> https://news.ycombinator.com/item?id=24343361 </a>	e259db837d0e6c6522a06c4e8663b7b99e6fab85	\N	f	2020-09-01 21:10:00	2020-09-04 19:10:08.987539	0			'/item?id=24343361':15 'amazon':1 'analyst':6 'comment':12 'delet':2 'job':3 'labor':9 'list':4 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24343361':13 'organ':10 'threat':11 'track':8	zh	samdb
85	Redis 数据结构：整数集合/压缩列表	{"ver":2,"uid":1,"hash":"SHA1:42c4b8684496c0ec232e559bbcc141d6e4a3a6b1"}	https://toutiao.io/k/zax3heq	2020-08-14 06:10:09	Redis 数据结构：整数集合/压缩列表	5d21cb6276e139a23b42828dd2dc6f14e2d4a03d	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.384399	0			'redis':1,5 '压缩列表':4,8 '数据结构':2,6 '整数集合':3,7	zh	
610	2,000-year-old redwoods survive wildfire at California's oldest state park	{"ver":2,"uid":1,"hash":"SHA1:bd45e7a9a442cf0fe6145505d8891da179bb5ce3"}	https://www.nbcnews.com/news/us-news/2-000-year-old-redwoods-survive-wildfire-california-s-oldest-n1237949	2020-08-25 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24268094"> https://news.ycombinator.com/item?id=24268094 </a>	1ed25b0790a24bda3f2b1f88af8c7595ee06472d	\N	f	2020-08-25 19:10:00	2020-08-27 20:10:10.203943	0			'/item?id=24268094':18 '000':2 '2':1 'california':10 'comment':15 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24268094':16 'old':5 'oldest':12 'park':14 'redwood':6 'state':13 'surviv':7 'wildfir':8 'year':4 'year-old':3	zh	apsec112
728	Apple Terminates Epic Games' Developer Account	{"ver":2,"uid":1,"hash":"SHA1:7a8810ad8d7ec55122831182193c6b24c9c3cae2"}	https://www.macrumors.com/2020/08/28/apple-terminates-epic-games-developer-account/	2020-08-29 02:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24309632"> https://news.ycombinator.com/item?id=24309632 </a>	6648cd41a7d752da207ba053cc8691d3b336a198	\N	f	2020-08-29 02:10:00	2020-09-01 08:10:09.886925	0			'/item?id=24309632':10 'account':6 'appl':1 'comment':7 'develop':5 'epic':3 'game':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24309632':8 'termin':2	zh	tosh
337	Remote work is reshaping San Francisco, as tech workers flee and rents fall	{"ver":2,"uid":1,"hash":"SHA1:ff721e4c813da9417f0a33f12ae0748131714926"}	https://www.wsj.com/articles/remote-work-is-reshaping-san-francisco-as-tech-workers-flee-and-rents-fall-11597413602	2020-08-17 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24164128"> https://news.ycombinator.com/item?id=24164128 </a>	b4b950d0316e348322c0c2c6e267b8e6b4e43828	\N	f	2020-08-17 02:10:00	2020-08-18 19:10:08.55211	0			'/item?id=24164128':17 'comment':14 'fall':13 'flee':10 'francisco':6 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24164128':15 'remot':1 'rent':12 'reshap':4 'san':5 'tech':8 'work':2 'worker':9	zh	tempsy
603	在 Android 和 Hilt 中限定作用域	{"ver":2,"uid":1,"hash":"SHA1:1704be784748bd32d686a401278bd92121d1a17c"}	https://toutiao.io/k/6gez8rr	2020-08-25 05:10:10	在 Android 和 Hilt 中限定作用域	f6116562b6af03e95e49329a49eb5355d2d70454	\N	f	2020-08-25 05:10:00	2020-08-26 00:10:09.797543	0			'android':2,7 'hilt':4,9 '中限定作用域':5,10 '和':3,8 '在':1,6	zh	
340	定位生产问题时，异常堆栈莫名丢了，何解？	{"ver":2,"uid":1,"hash":"SHA1:f3a58cbcce3bc9a1802984d48b2c1a4789bb72d4"}	https://toutiao.io/k/531jcms	2020-08-17 02:10:08	定位生产问题时，异常堆栈莫名丢了，何解？	f1df776a70bc7fa062b6e94930467a8a32b0bf28	\N	f	2020-08-17 02:10:00	2020-08-18 00:10:10.642128	0			'何解':3,6 '定位生产问题时':1,4 '异常堆栈莫名丢了':2,5	zh	
32	Reviewing different approaches to HTTP routing in Go	{"ver":2,"uid":1,"hash":"SHA1:2295e2104ba60213f7685de5d7a8c4d70ada279b"}	https://golangweekly.com/issues/323	2020-07-31 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#323 — July 31, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/92796/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/92797/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/92798/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/dcwg3y13mwu4c6gavkas.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92798/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Go 1.15 Release Candidate 1 Released</a></span> — Go 1.15 is another step closer! Report any problems <a href="https://golangweekly.com/link/92799/rss" style=" color: #0099b4;   ">here</a>, download <a href="https://golangweekly.com/link/92800/rss" style=" color: #0099b4;   ">binaries and packages here</a>, or read <a href="https://golangweekly.com/link/92801/rss" style=" color: #0099b4;   ">the draft release notes</a> to learn about what’s new.</p>\n  <p>Alex Rakoczy </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92802/rss" title="benhoyt.com" style=" color: #0099b4;    font-size: 1.05em;">Different Approaches to HTTP Routing in Go</a></span> — <em>“There are many ways to do HTTP path routing in Go – for better or worse.”</em> And Ben takes a pretty neat tour through a variety of options here.</p>\n  <p>Ben Hoyt </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/92803/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/0d29c3e7.png" width="80" height="80" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92803/rss" title="dashboard.redisgreen.net" style=" color: #0099b4;    font-size: 1.05em;">Redis 6.0 on RedisGreen</a></span> — SSL encryption, key size tracking, memory mapping, online upgrades, and more.</p>\n  <p>RedisGreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/92804/rss" title="changelog.com" style=" color: #0099b4;    font-size: 1.05em;">The Latest on Generics with Robert Griesemer and Ian Lance Taylor</a></span> — The ever popular and always fantastic Go Time podcast got Robert Griesemer and Ian Lance Taylor on board to talk about everyone’s favorite recent Go topic… generics! Why can’t we use angle brackets for generics? What type of feedback do they want from us? It's all here.</p>\n  <p>The Go Time Podcast <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; ">podcast</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92805/rss" title="www.jetbrains.com" style=" color: #0099b4;    font-size: 1.05em;">What’s New in GoLand 2020.2, a Popular Go IDE</a></span> — It’s <em>a commercial product</em> but GoLand is nonetheless a popular Go IDE and its latest version has improved modules support, lets you share and execute code with the Go Playground, has experimental generics support, and lets you work with GitHub pull requests right from the IDE.</p>\n  <p>JetBrains </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92829/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Generics Part 01: Basic Syntax</a></span> — One of Go’s best teachers lays out the problem statement and current solution for the Generics draft, complete with go2go playground links and backing repo.</p>\n  <p>William Kennedy </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92806/rss" title="jobs.lever.co" style=" color: #0099b4;    font-size: 1.05em;">Software Engineer - Want to Build a Platform Ecosystem in Go?</a></span> — Skool is hiring its 2nd backend engineer in Los Angeles, CA. Go, PostgreSQL, Redis, Elasticsearch, Docker. <a href="https://golangweekly.com/link/92806/rss" style=" color: #0099b4;   ">Apply now.</a></p>\n  <p>SKOOL </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92807/rss" title="getstream.io" style=" color: #0099b4;    font-size: 1.05em;">Stream Provides APIs for Building Activity Feeds and Chat</a></span> — Stream is looking for a full time Backend Software Engineer to join our development team. If you are interested in becoming a part of what we do, <a href="https://golangweekly.com/link/92807/rss" style=" color: #0099b4;   ">apply now</a>.</p>\n  <p>Stream </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92808/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">One Application, Hundreds of Hiring Managers</a></span> — Use Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92809/rss" title="artem.krylysov.com" style=" color: #0099b4;    font-size: 1.05em;">Let's Build A Full-Text Search Engine</a></span> — You probably have used an FTS engine, but could you build one? Of course! With a small amount of Go, you can filter and stem your way to a solid FTS engine.</p>\n  <p>Artem Krylysov </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92810/rss" title="pace.dev" style=" color: #0099b4;    font-size: 1.05em;">How Code Generation Wrote Our API and CLI</a></span> — Pace (Mat’s company) uses <a href="https://golangweekly.com/link/92811/rss" style=" color: #0099b4;   ">Oto</a> to generate the API and clients for their offerings. Oto can be thought of as a non-binary, gRPC alternative aimed at Go use cases.</p>\n  <p>Mat Ryer </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/92812/rss" title="www.youtube.com" style=" color: #0099b4;    font-size: 1.05em;">A Quick Introduction to Delve, the Go Debugger</a></span> — <a href="https://golangweekly.com/link/92813/rss" style=" color: #0099b4;   ">Delve 1.5</a> is out now, and this is a neat 14 minute screencast showing you how it can be useful.</p>\n  <p>Bryan English </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92814/rss" title="circleci.com" style=" color: #0099b4;    font-size: 1.05em;">Letting Change and Uncertainty Advance Your Software Architecture</a></span> — Learn to design architecture that's adaptable so you can iterate when things inevitably change as you start building.</p>\n  <p>CircleCI <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92815/rss" title="dylanmeeus.github.io" style=" color: #0099b4;    font-size: 1.05em;">Working with Audio From Scratch in Go: Stereo Panning</a></span> — Panning, in this context, means balancing the sound of an audio file across channels (or, in this case, sides.) Listen up!</p>\n  <p>Dylan Meeus </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92816/rss" title="qua.name" style=" color: #0099b4;    font-size: 1.05em;">Making a Testable Cobra CLI App</a></span> — Using a ‘hexagonal’ approach to creating a CLI app, decoupling the business logic from the CLI to make everything nice and testable.</p>\n  <p>Josip Antoliš </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92817/rss" title="cloud.google.com" style=" color: #0099b4;    font-size: 1.05em;">How to Deploy a Private GoDoc Server on Google Kubernetes Engine</a></span> — GoDoc is a documentation generation tool that powers <a href="https://golangweekly.com/link/92818/rss" style=" color: #0099b4;   ">pkg.go.dev</a> and numerous internal documentation servers.. and it can do so for you too.</p>\n  <p>Richard Li </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92819/rss" title="www.mitchdennett.com" style=" color: #0099b4;    font-size: 1.05em;">How Tests Make Your Code Inherently Better</a></span> — But, you already knew that, didn’t you?</p>\n  <p>Mitch Dennett </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92820/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Reform: A 'Better ORM' for <code>database/sql</code></a></span> — Supports Postgres, MySQL, SQLite3 and SQL Server, and uses non-empty interfaces, code generation, and initialization-time reflection.</p>\n  <p>Alexey Palazhchenko </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92813/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Delve 1.5 Released: A Popular Go Debugger</a></span> — Go 1.15 support has been added amongst other things.</p>\n  <p>Delve Project </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92821/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Commandeer 0.5: Automatically Sets Up Command Line Flags</a></span> — The flags are based on struct fields and their tags.</p>\n  <p>Matthew Jaffee </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92822/rss" title="hubs.ly" style=" color: #0099b4;    font-size: 1.05em;">Automated Code Reviews for Go, including Gosec, Directly from Your Git Workflow</a></span></p>\n  <p>Codacy <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92823/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">MongoDB Go Driver 1.4 Released</a></span> — This is in conjunction with the release of <a href="https://golangweekly.com/link/92824/rss" style=" color: #0099b4;   ">MongoDB 4.4</a>.</p>\n  <p>MongoDB, Inc. </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92825/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">LazyDocker: A Terminal-Based UI for Working with Docker</a></span> — Not only is this a useful app for working with Docker, it’s a great example of a terminal-based app with a complete UI (powered by <a href="https://golangweekly.com/link/92826/rss" style=" color: #0099b4;   ">gocui</a>) too.</p>\n  <p>Jesse Duffield </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92827/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Monstache 6.7: A Daemon That Syncs MongoDB to Elasticsearch in Realtime</a></span></p>\n  <p>Ryan Wynn </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92828/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;"><code>errgroup</code> with Goroutine Worker Limits</a></span></p>\n  <p>Neil O'Toole </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/323/rss" width="1" height="1" />	b546fc47cf74d0aa4ce59992bc9761cef541f353	\N	f	2020-08-14 05:06:00	2020-08-28 14:10:09.226966	0			'..':594 '0.5':671 '01':235 '1':24 '1.15':21,27,660 '1.4':707 '1.5':457,653 '14':466 '2020':12 '2020.2':180 '2nd':281 '31':11 '323':9 '4.4':718 '500':352 '6.0':93 '6.7':764 'a':80,85,181,187,194,272,309,326,366,387,400,435,448,464,540,546,551,572,582,625,655,722,735,744,748,754,765 'about':49,140 'across':528 'activity':301 'adaptable':492 'added':664 'advance':482 'aimed':441 'alex':53 'alexey':650 'all':168 'already':614 'alternative':440 'always':124 'amongst':665 'amount':389 'an':376,525 'and':38,77,105,116,123,132,198,209,220,249,261,303,350,395,412,424,461,480,565,589,595,634,637,645,685 'angeles':286 'angle':153 'another':29 'antoliš':568 'any':33 'api':411,423 'apis':298 'app':544,553,737,752 'application':336 'apply':293,332 'approach':548 'approaches':3,56 'architecture':485,489 'are':63,322,680 'artem':404 'as':434,501 'at':348,442 'audio':509,526 'automated':690 'automatically':672 'backend':282,312 'backing':262 'balancing':521 'based':681,725,751 'basic':236 'be':431,474 'becoming':325 'been':663 'ben':78,90 'best':242 'better':74,611,626 'binaries':37 'binary':438 'board':137 'brackets':154 'bryan':476 'build':271,365,382 'building':300,504 'business':556 'but':190,379,612 'by':758 'ca':287 'can':149,393,430,473,495,597 'candidate':23 'case':533 'cases':445 'change':479,500 'channels':529 'chat':304 'circleci':505 'cli':413,543,552,560 'clients':425 'closer':31 'cobra':542 'codacy':702 'code':211,407,609,622,643,691 'command':675 'commandeer':670 'commercial':188 'companies':353 'company':417 'complete':256,755 'conjunction':712 'connect':344 'context':519 'could':380 'course':385 'creating':550 'current':250 'daemon':766 'database/sql':629 'debugger':455,658 'decoupling':554 'delve':452,456,652,668 'dennett':621 'deploy':571 'design':488 'development':318 'didn':617 'different':2,55 'directly':697 'do':67,161,331,598 'docker':292,730,741 'documentation':583,592 'download':36 'draft':44,255 'driver':706 'duffield':762 'dylan':537 'ecosystem':274 'elasticsearch':291,771 'empty':641 'encryption':97 'engine':371,378,403,579 'engineer':268,283,314 'english':477 'errgroup':776 'ever':121 'everyone':141 'everything':563 'example':746 'execute':210 'experimental':217 'fantastic':125 'favorite':143 'feedback':160 'feeds':302 'fields':684 'file':527 'filter':394 'flags':677,679 'for':73,155,252,299,308,357,426,600,628,693,727,738 'fortune':351 'free':356 'from':164,229,510,558,698 'fts':377,402 'full':310,368 'full-text':367 'generate':421 'generation':408,584,644 'generics':112,147,156,218,233,254 'git':700 'github':225 'go':8,20,26,61,72,126,145,171,183,196,214,240,276,288,391,443,454,513,657,659,694,705 'go2go':258 'gocui':759 'godoc':574,580 'goland':179,191 'golang':18 'google':577 'goroutine':778 'gosec':696 'got':129 'great':745 'griesemer':115,131 'grpc':439 'has':202,216,662 'have':374 'here':35,40,89,169 'hexagonal':547 'hiring':279,339,346 'how':406,471,569,605 'hoyt':91 'http':5,58,68 'hundreds':337 'ian':117,133 'ide':184,197,231 'if':320 'improved':203 'in':7,60,71,178,275,284,324,512,517,531,711,772 'inc':720 'including':695 'inevitably':499 'inherently':610 'initialization':647 'initialization-time':646 'interested':323 'interfaces':642 'internal':591 'introduction':450 'is':28,192,278,306,458,463,581,710,733 'it':166,185,354,472,596,742 'iterate':496 'its':199,280 'jaffee':689 'jesse':761 'jetbrains':232 'job':359 'job-seekers':358 'jobs':266 'join':316 'josip':567 'july':10 'kennedy':265 'key':98 'knew':615 'krylysov':405 'kubernetes':578 'lance':118,134 'latest':110,200 'lays':244 'lazydocker':721 'learn':48,486 'let':363 'lets':206,221 'letting':478 'li':604 'limits':780 'line':676 'links':260 'listen':535 'logic':557 'looking':307 'los':285 'make':562,607 'making':539 'managers':340,347 'many':64 'mapping':102 'mat':415,446 'matthew':688 'means':520 'meeus':538 'memory':101 'minute':467 'mitch':620 'modules':204 'mongodb':704,717,719,769 'monstache':763 'more':106 'mysql':632 'neat':82,465 'neil':781 'new':52,177 'nice':564 'non':437,640 'non-binary':436 'non-empty':639 'nonetheless':193 'not':731 'notes':46 'now':294,333,460 'numerous':590 'o':782 'of':87,159,239,328,338,384,390,433,524,716,747 'offerings':428 'on':15,94,111,136,576,682 'one':238,335,383 'online':103 'only':732 'options':88 'or':41,75,530 'orm':627 'other':666 'oto':419,429 'our':317,410 'out':245,459 'pace':414 'packages':39 'palazhchenko':651 'panning':515,516 'part':234,327 'path':69 'pkg.go.dev':588 'platform':273 'playground':215,259 'podcast':128,173,174 'popular':122,182,195,656 'postgres':631 'postgresql':289 'powered':757 'powers':587 'pretty':81 'private':573 'probably':373 'problem':247 'problems':34 'product':189 'project':669 'provides':297 'pull':226 'quick':449 'rakoczy':54 'read':14,42 'realtime':773 'recent':144 'redis':92,290 'redisgreen':95,107 'reflection':649 'reform':624 'release':22,45,715 'released':25,654,708 'repo':263 'report':32 'requests':227 'reviewing':1 'reviews':692 'richard':603 'right':228 'robert':114,130 'routing':6,59,70 'ryan':774 'ryer':447 's':51,142,167,176,186,241,355,364,416,491,743 'scratch':511 'screencast':468 'search':370 'seekers':360 'server':575,636 'servers':593 'sets':673 'share':208 'showing':469 'sides':534 'size':99 'skool':277,295 'small':388 'so':493,599 'software':267,313,484 'solid':401 'solution':251 'sound':523 'sponsor':108,506,703 'sql':635 'sqlite3':633 'ssl':96 'start':503 'startups':349 'statement':248 'stem':396 'step':30 'stereo':514 'stream':296,305,334 'struct':683 'support':205,219,661 'supports':630 'syncs':768 'syntax':237 't':150,618 'tags':687 'takes':79 'talk':139 'taylor':119,135 'teachers':243 'team':319 'terminal':724,750 'terminal-based':723,749 'testable':541,566 'tests':606 'text':369 'that':490,586,616,767 'the':16,43,109,120,170,213,230,246,253,422,453,522,555,559,678,714 'their':427,686 'there':62 'they':162 'things':498,667 'this':462,518,532,709,734 'thought':432 'through':84 'time':127,172,311,648 'to':4,47,57,66,138,270,315,343,399,420,451,487,549,561,570,770 'too':602,760 'tool':585 'toole':783 'tools':623 'topic':146 'tour':83 'tracking':100 'tutorials':362 'type':158 'ui':726,756 'uncertainty':481 'unsubscribe':13 'up':536,674 'upgrades':104 'us':165 'use':152,341,444 'used':375 'useful':475,736 'uses':418,638 'using':545 'variety':86 'version':201 'vettery':342,361 'want':163,269 'way':398 'ways':65 'we':151,330 'web':17 'weekly':19 'what':50,157,175,329 'when':497 'why':148 'william':264 'with':113,212,224,257,345,386,508,713,729,740,753,777 'work':223 'worker':779 'workflow':701 'working':507,728,739 'worse':76 'wrote':409 'wynn':775 'you':207,222,321,372,381,392,470,494,502,601,613,619 'your':397,483,608,699		
31	Two new Go releases to fix a bug undiscovered for 9 years	{"ver":2,"uid":1,"hash":"SHA1:1a30a52c24fd9a7fa717279bbfff883f8e5de928"}	https://golangweekly.com/issues/324	2020-08-07 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#324 — August 7, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/93139/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/93140/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/93215/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1596827722/cctgto2ndeicwuxszhav.png" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93215/rss" title="healeycodes.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Boids in WebAssembly Using Go</a></span> — A boid (bird-oid) is a “simulated bird-like object” and simulating a flock of them in Go and WebAseembly makes for an interesting demo. <em>(The technique is of particular interest to me, rather than the output, though.)</em></p>\n  <p>Andrew Healey </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93216/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.05em;">Go 1.14.7 and Go 1.13.15 Released</a></span> — These releases address a recently reported security issue around ReadUvarint and ReadVarint (which is explained in more depth in the item below). Here’s <a href="https://golangweekly.com/link/93217/rss" style=" color: #0099b4;   ">the issue in question</a> if you haven’t got a Google login.</p>\n  <p>Katie, Filippo, and the Go Team </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/93141/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/9f041dea.png" width="110" height="110" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93141/rss" title="www.jetbrains.com" style=" color: #0099b4;    font-size: 1.05em;">Introducing GoLand 2020.2</a></span> — New features for Go modules, new ways to review and fix problems in your code, new code inspections and editing features, the Go Playground, WSL 2 support for Git on Windows, experimental support for generics, and more, all in GoLand 2020.2.</p>\n  <p>JetBrains <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93218/rss" title="cuchi.me" style=" color: #0099b4;    font-size: 1.05em;">Comparing Go and Rust for Writing a CLI Tool</a></span> — A developer, unfamiliar with both Go and Rust, decided to write an app in both and compared his experiences. It’s not deep but it’s quite balanced and he found good reasons to use both languages.</p>\n  <p>Paulo Henrique Cuchi </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93219/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Taking Advantage of a Bug in Go's Standard Library</a></span> — Go 1.14.7 and 1.13.15 were just released (above) to fix this very bug which could be used as part of a DoS attack.</p>\n  <p>Jonny Rhea </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93220/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.05em;">Go 1.15 Release Candidate 2 Released</a></span> — Here are the <a href="https://golangweekly.com/link/93221/rss" style=" color: #0099b4;   ">draft release notes.</a> Fingers crossed we get to announce the final release next week :-)</p>\n  <p>Alex Rakoczy </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93142/rss" title="jobs.lever.co" style=" color: #0099b4;    font-size: 1.05em;">Software Engineer - Want to Build a Platform Ecosystem in Go?</a></span> — Skool is hiring its 2nd backend engineer in Los Angeles, CA. Go, PostgreSQL, Redis, Elasticsearch, Docker. <a href="https://golangweekly.com/link/93142/rss" style=" color: #0099b4;   ">Apply now.</a></p>\n  <p>SKOOL </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93143/rss" title="x-team.com" style=" color: #0099b4;    font-size: 1.05em;">Golang Developer at X-Team (Remote)</a></span> — Join the most energizing community for developers and work on projects for Riot Games, FOX, Sony, Coinbase, and more.</p>\n  <p>X-Team </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93144/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">One Application, Hundreds of Hiring Managers</a></span> — Use Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93222/rss" title="t.co" style=" color: #0099b4;    font-size: 1.05em;">An Introduction to Go's Escape Analysis</a></span> — <em>Escape analysis</em> is the process of determining the scope of pointers, which in Go means whether variables should be allocated on the stack or the heap.</p>\n  <p>Vincent Blanchon </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93223/rss" title="blog.haardiek.org" style=" color: #0099b4;    font-size: 1.05em;">Generators in Go</a></span> — Generators here are for creating iterators, not generated code, that you can range over easily.</p>\n  <p>Sven Haardiek </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93224/rss" title="maori.geek.nz" style=" color: #0099b4;    font-size: 1.05em;">Building Desktop Apps with Go: Webview vs. Lorca vs. Electron</a></span> — A comparison of the three frameworks that (spoiler!) ends up with an odd recommended approach. Other options are available, however!</p>\n  <p>Graham Jenson </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/93225/rss" title="cppcast.com" style=" color: #0099b4;    font-size: 1.05em;">Discussing Go with Google's Ian Lance Taylor</a></span> — Yes, we’re linking to a C++ podcast! But they had Google’s Ian Lance Taylor (who works on GCC and Go’s frontend for it) on to talk about Go (and C++, a little).</p>\n  <p>CppCast <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; ">podcast</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93145/rss" title="unidoc.io" style=" color: #0099b4;    font-size: 1.05em;">The 5 Crucial PDF &amp; Office Features for Corporate Apps in Pure Go</a></span></p>\n  <p>UniDoc <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93226/rss" title="www.kencochrane.com" style=" color: #0099b4;    font-size: 1.05em;">How to Notarize and Sign Go Binaries for MacOS with GitHub Actions</a></span> — For jumping through all the hoops MacOS Catalina presents regarding trusted binaries.</p>\n  <p>Ken Cochrane </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93227/rss" title="www.dolthub.com" style=" color: #0099b4;    font-size: 1.05em;">How Subqueries Were Implemented in a Go-Powered SQL Engine</a></span> — There’s a few moving parts here, but basically <a href="https://golangweekly.com/link/93228/rss" style=" color: #0099b4;   ">Dolt</a> is like Git for data and the underlying SQL engine is <a href="https://golangweekly.com/link/93229/rss" style=" color: #0099b4;   ">go-mysql-server</a>, a MySQL wire protocol compatible SQL server and engine.</p>\n  <p>Zach Musgrave </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/93230/rss" title="www.infoq.com" style=" color: #0099b4;    font-size: 1.05em;">Tiny Go: Small Is Going Big</a></span> — Ron Evans, the creator of TinyGo (a Go compiler for ‘small’ environments such as microcontrollers), gave a talk at QCon London 2020 (just before lockdown!). You can watch it here or read a transcript. Worth watching if you want to see how Go can be used in 'small' places :-)</p>\n  <p>Ron Evans </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93231/rss" title="sqlc.dev" style=" color: #0099b4;    font-size: 1.05em;">sqlc v1.5.0 Released</a></span> — A tool for creating fully type safe idiomatic Go code from SQL. Write SQL queries, run sqlc, then write application code that calls the methods sqlc generated.</p>\n  <p>sqlc.dev </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93232/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">aws-lambda-go: Libraries, Samples, and Tools for Go and AWS Lambda</a></span> — Libraries, samples and tools to help Go developers develop AWS Lambda functions.</p>\n  <p>Amazon Web Services </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93233/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">defaults: Initialize Structs with Default Values</a></span> — Uses field tags to assign the default value. This seems very useful.</p>\n  <p>Yuki Iwanaga </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93146/rss" title="link.sqreen.com" style=" color: #0099b4;    font-size: 1.05em;">The Golang Security Checklist</a></span> — From code to infrastructure, learn how to improve the security of your Go applications with the Go security checklist.</p>\n  <p>Sqreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93234/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">html-to-markdown: Convert HTML to Markdown</a></span> — Uses an HTML parser vs regex everywhere.</p>\n  <p>Johannes Kaufmann </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93235/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Gearbox: A Web Framework with a Focus on High Performance</a></span> — Written on top of fasthttp.</p>\n  <p>Gearbox </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93229/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">go-mysql-server: An Extensible MySQL Server Implementation in Go</a></span> — We linked to an article about this in the tutorials section (above) but basically this is an SQL engine and server that clones some of MySQL, so you get MySQL SQL syntax and wire protocol support but written in Go. It is <em>not</em> a complete database system in and of itself though (read the docs).</p>\n  <p>Liquidata </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/324/rss" width="1" height="1" />	b04f10f1fde06ac982a8f51ea6cf313b7d140a9a	\N	f	2020-08-14 05:06:00	2020-09-04 12:10:08.254116	0			'1.13.15':75,227 '1.14.7':72,225 '1.15':250 '2':147,253 '2020':16,607 '2020.2':121,162 '2nd':289 '324':13 '5':494 '500':350 '7':15 '9':11 'a':7,29,35,43,80,110,171,174,217,244,280,426,461,489,538,546,569,592,602,618,642,761,765,830 'about':485,792 'above':231,798 'actions':518 'address':79 'advantage':215 'alex':272 'all':159,522 'allocated':387 'amazon':695 'an':53,185,361,437,752,780,790,803 'analysis':367,369 'and':41,49,73,87,115,131,140,157,167,180,189,202,226,318,328,348,476,487,510,559,576,676,680,685,806,819,835 'andrew':69 'angeles':294 'announce':266 'app':186 'application':334,661 'applications':735 'apply':301 'approach':440 'apps':418,501 'are':256,401,443 'around':85 'article':791 'as':241,599 'assign':708 'at':306,346,604 'attack':246 'august':14 'available':444 'aws':671,681,692 'aws-lambda-go':670 'backend':290 'balanced':201 'basically':552,800 'be':239,386,630 'before':609 'below':98 'big':585 'binaries':513,530 'bird':32,38 'bird-like':37 'bird-oid':31 'blanchon':395 'boid':30 'boids':24 'both':178,188,209 'bug':8,218,236 'build':279 'building':416 'but':197,464,551,799,823 'c':462,488 'ca':295 'calls':664 'can':410,612,629 'candidate':252 'catalina':526 'checklist':721,740 'cli':172 'clones':809 'cochrane':532 'code':136,138,407,637,651,662,723 'coinbase':327 'community':315 'companies':351 'compared':190 'comparing':165 'comparison':427 'compatible':573 'compiler':594 'complete':831 'connect':342 'convert':747 'corporate':500 'could':238 'cppcast':491 'creating':403,645 'creator':589 'crossed':262 'crucial':495 'cuchi':213 'data':558 'database':832 'decided':182 'deep':196 'default':702,710 'defaults':698 'demo':55 'depth':94 'desktop':417 'determining':374 'develop':691 'developer':175,305 'developers':317,690 'discussing':448 'docker':300 'docs':841 'dolt':553 'dos':245 'draft':258 'easily':413 'ecosystem':282 'editing':141 'elasticsearch':299 'electron':425 'ends':434 'energizing':314 'engine':543,563,577,805 'engineer':276,291 'environments':597 'escape':366,368 'evans':587,636 'everywhere':757 'experiences':192 'experimental':153 'explained':91 'extensible':781 'fasthttp':774 'features':123,142,498 'few':547 'field':705 'filippo':114 'final':268 'fingers':261 'fix':6,132,233 'flock':44 'focus':766 'for':10,52,124,149,155,169,316,322,355,402,480,499,514,519,557,595,644,678 'fortune':349 'found':204 'fox':325 'framework':763 'frameworks':431 'free':354 'from':652,722 'frontend':479 'fully':646 'functions':694 'games':324 'gave':601 'gcc':475 'gearbox':760,775 'generated':406,668 'generators':396,399 'generics':156 'get':264,815 'git':150,556 'github':517 'go':3,28,48,71,74,117,125,144,166,179,220,224,249,284,296,364,381,398,420,449,477,486,504,512,540,566,581,593,628,650,673,679,689,734,738,777,786,826 'go-mysql-server':565,776 'go-powered':539 'going':584 'goland':120,161 'golang':22,304,719 'good':205 'google':111,451,467 'got':109 'graham':446 'haardiek':415 'had':466 'haven':107 'he':203 'healey':70 'heap':393 'help':688 'henrique':212 'here':99,255,400,550,615 'high':768 'hiring':287,337,344 'his':191 'hoops':524 'how':507,533,627,727 'however':445 'html':744,748,753 'html-to-markdown':743 'hundreds':335 'ian':453,469 'idiomatic':649 'if':105,622 'implementation':784 'implemented':536 'improve':729 'in':25,47,92,95,103,134,160,187,219,283,292,380,397,502,537,632,785,794,825,834 'infrastructure':725 'initialize':699 'inspections':139 'interest':61 'interesting':54 'introducing':119 'introduction':362 'is':34,58,90,286,370,554,564,583,802,828 'issue':84,102 'it':193,198,352,481,614,827 'item':97 'iterators':404 'its':288 'itself':837 'iwanaga':717 'jenson':447 'jetbrains':163 'job':357 'job-seekers':356 'jobs':274 'johannes':758 'join':311 'jonny':247 'jumping':520 'just':229,608 'katie':113 'kaufmann':759 'ken':531 'lambda':672,682,693 'lance':454,470 'languages':210 'learn':726 'libraries':674,683 'library':223 'like':39,555 'linked':788 'linking':459 'liquidata':842 'little':490 'lockdown':610 'login':112 'london':606 'lorca':423 'los':293 'macos':515,525 'makes':51 'managers':338,345 'markdown':746,750 'me':63 'means':382 'methods':666 'microcontrollers':600 'modules':126 'more':93,158,329 'most':313 'moving':548 'musgrave':579 'mysql':567,570,778,782,812,816 'new':2,122,127,137 'next':270 'not':195,405,829 'notarize':509 'notes':260 'now':302 'object':40 'odd':438 'of':45,59,216,243,336,373,377,428,590,732,773,811,836 'office':497 'oid':33 'on':19,151,320,388,474,482,767,771 'one':333 'options':442 'or':391,616 'other':441 'output':67 'over':412 'parser':754 'part':242 'particular':60 'parts':549 'paulo':211 'pdf':496 'performance':769 'places':634 'platform':281 'playground':145 'podcast':463,492 'pointers':378 'postgresql':297 'powered':541 'presents':527 'problems':133 'process':372 'projects':321 'protocol':572,821 'pure':503 'qcon':605 'queries':656 'question':104 'quite':200 'rakoczy':273 'range':411 'rather':64 're':458 'read':18,617,839 'readuvarint':86 'readvarint':88 'reasons':206 'recently':81 'recommended':439 'redis':298 'regarding':528 'regex':756 'release':251,259,269 'released':76,230,254,641 'releases':4,78 'remote':310 'reported':82 'review':130 'rhea':248 'riot':323 'ron':586,635 'run':657 'rust':168,181 's':100,194,199,221,353,365,452,468,478,545 'safe':648 'samples':675,684 'scope':376 'section':797 'security':83,720,731,739 'see':626 'seekers':358 'seems':713 'server':568,575,779,783,807 'services':697 'should':385 'sign':511 'simulated':36 'simulating':42 'skool':285,303 'small':582,596,633 'so':813 'software':275 'some':810 'sony':326 'spoiler':433 'sponsor':164,506,742 'sql':542,562,574,653,655,804,817 'sqlc':639,658,667 'sqlc.dev':669 'sqreen':741 'stack':390 'standard':222 'startups':347 'structs':700 'subqueries':534 'such':598 'support':148,154,822 'sven':414 'syntax':818 'system':833 't':108 'tags':706 'taking':214 'talk':484,603 'taylor':455,471 'team':118,309,332 'technique':57 'than':65 'that':408,432,663,808 'the':20,56,66,96,101,116,143,257,267,312,371,375,389,392,429,493,523,560,588,665,709,718,730,737,795,840 'them':46 'then':659 'there':544 'these':77 'they':465 'this':234,712,793,801 'though':68,838 'three':430 'through':521 'tiny':580 'tinygo':591 'to':5,62,129,183,207,232,265,278,341,363,460,483,508,625,687,707,724,728,745,749,789 'tool':173,643 'tools':638,677,686 'top':772 'transcript':619 'trusted':529 'tutorials':360,796 'two':1 'type':647 'underlying':561 'undiscovered':9 'unfamiliar':176 'unidoc':505 'unsubscribe':17 'up':435 'use':208,339 'used':240,631 'useful':715 'uses':704,751 'using':27 'v1.5.0':640 'value':711 'values':703 'variables':384 'very':235,714 'vettery':340,359 'vincent':394 'vs':422,424,755 'want':277,624 'watch':613 'watching':621 'ways':128 'we':263,457,787 'web':21,696,762 'webaseembly':50 'webassembly':26 'webview':421 'week':271 'weekly':23 'were':228,535 'whether':383 'which':89,237,379 'who':472 'windows':152 'wire':571,820 'with':177,343,419,436,450,516,701,736,764 'work':319 'works':473 'worth':620 'write':184,654,660 'writing':170 'written':770,824 'wsl':146 'x':308,331 'x-team':307,330 'years':12 'yes':456 'you':106,409,611,623,814 'your':135,733 'yuki':716 'zach':578		
33	Three new design drafts to push Go forward	{"ver":2,"uid":1,"hash":"SHA1:3c11931c164f9a61c83d36aa2f47b7b58efdc864"}	https://golangweekly.com/issues/322	2020-07-24 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#322 — July 24, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/92416/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/92417/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;"><p>We're skipping the tutorials section this week, as three new design drafts have provided us with more than enough to read! 😄 If, however, you have any tutorials or blog posts we could include next week, hit reply and let us know.</p></td></tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/92418/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/tn5sxeshqpgvlr1vhie3.jpg" width="640" style="      line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92418/rss" title="go.googlesource.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">A Draft Design for Go Command Support for Embedded Static Assets</a></span> — Last December we linked to <a href="https://golangweekly.com/link/92419/rss" style=" color: #0099b4;   ">a proposal</a> for bringing the embedding of static assets/files in Go binaries to the main Go toolset (versus using existing tools like <a href="https://golangweekly.com/link/92420/rss" style=" color: #0099b4;   ">Packr</a>) – Brad Fitzpatrick is now back with a <em>draft design</em> for us to chew over (which includes links to 15 alternative implementations, if you’re curious!). Russ Cox has also <a href="https://golangweekly.com/link/92421/rss" style=" color: #0099b4;   ">recorded this video demo</a> of how the draft design works in practice.</p>\n  <p>Brad Fitzpatrick and Russ Cox </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/92422/rss" title="www.youtube.com" style=" color: #0099b4;    font-size: 1.05em;">A Chat with Brian Kernighan of Unix, C, AWK, and Go Fame</a></span> — Lex Fridman, a well known AI researcher, had an extensive chat with <a href="https://golangweekly.com/link/92423/rss" style=" color: #0099b4;   ">Brian Kernighan</a>, the co-author of <em>The Go Programming Language</em> (book). Brian touches on <em>lots</em> of neat stuff that you’ll enjoy, but the Go specific section is between <a href="https://golangweekly.com/link/92424/rss" style=" color: #0099b4;   ">58:45</a> and 1:01:55.</p>\n  <p>Lex Fridman </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/92425/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/3def2fe0.png" width="136" height="100" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92425/rss" title="circleci.com" style=" color: #0099b4;    font-size: 1.05em;">Building Strong Distributed Teams, One Pixel at a Time</a></span> — Learn how eng. managers can improve teams based on three key “C” pillars: connection, communication, and collaboration.</p>\n  <p>CircleCI <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92426/rss" title="go.googlesource.com" style=" color: #0099b4;    font-size: 1.05em;">A Draft Design for New File System Interfaces for Go</a></span> — You don’t get just one new draft design this week, you get <em>two</em>. This one similarly has a <a href="https://golangweekly.com/link/92427/rss" style=" color: #0099b4;   ">video presentation</a> and introduces <code>io/fs</code>, a new package that defines an interface for read-only file trees. If this idea is ringing a bell, <a href="https://golangweekly.com/link/92428/rss" style=" color: #0099b4;   ">Afero</a>, which we linked last week, covers similar ground.</p>\n  <p>Russ Cox and Rob Pike </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92429/rss" title="go2goplay.golang.org" style=" color: #0099b4;    font-size: 1.05em;">The go2go Playground Now Supports New Style Generics</a></span> — Want to play with <a href="https://golangweekly.com/link/92430/rss" style=" color: #0099b4;   ">the next step for generics</a> without lots of messing around? Enter this special build of the online Go Playground.</p>\n  <p>go2go </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92431/rss" title="go.googlesource.com" style=" color: #0099b4;    font-size: 1.05em;">A Draft Design for First Class Fuzzing</a></span> — What’s better than two design drafts? Three. Fuzzing is a type of testing where inputs are manipulated continually in a search for issues. It is automated and mutatable and an excellent way to harden code.</p>\n  <p>Katie Hockman </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92432/rss" title="crowdstrike.wd5.myworkdayjobs.com" style=" color: #0099b4;    font-size: 1.05em;">Sr. Software Engineer at CrowdStrike (Remote)</a></span> — CrowdStrike is the leader in cloud-delivered endpoint protection, which helps protect our customers from cybersecurity attacks.</p>\n  <p>CrowdStrike </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92433/rss" title="jobs.lever.co" style=" color: #0099b4;    font-size: 1.05em;">Software Engineer - Want to Build a Platform Ecosystem in Go?</a></span> — Skool is hiring its 2nd backend engineer in Los Angeles, CA. Go, PostgreSQL, Redis, Elasticsearch, Docker. <a href="https://golangweekly.com/link/92434/rss" style=" color: #0099b4;   ">Apply now</a>.</p>\n  <p>SKOOL </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92435/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">One Application, Hundreds of Hiring Managers</a></span> — Use Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92436/rss" title="blog.jetbrains.com" style=" color: #0099b4;    font-size: 1.05em;">GoLand 2020.2 Reaches Beta</a></span> — The popular (though commercial) IDE takes another step forward, though note this beta is the last release you can try out without a subscription. Improved Go module support is included here, along with initial, <em>experimental</em> support for generics.</p>\n  <p>Ekaterina Zharova (JetBrains) </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92437/rss" title="link.sqreen.com" style=" color: #0099b4;    font-size: 1.05em;">The Golang Security Checklist</a></span> — Ensure the infrastructure and the code of your Go applications are secure with the latest actionable best practices.</p>\n  <p>Sqreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92438/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">todocheck: A Static Code Analyzer for Annotated TODO Comments</a></span> — I don’t know about you, but I’m a fan of dumping ‘TODO’ comments in my code but this tool will actually let you do something about them (in several languages, including Go).</p>\n  <p>Preslav Mihaylov </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92439/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Gabs: Parse, Create and Edit 'Unknown' or Dynamic JSON in Go</a></span> — A wrapper for navigating hierarchies of <code>map[string]interface{}</code> objects provided by <code>encoding/json</code>.</p>\n  <p>Ashley Jeffs </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92440/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Stats: A Comprehensive Go Statistics Library Package</a></span> — No dependencies, well tested, work with concepts like averages, sums, percentiles, standard deviation, etc.</p>\n  <p>Montana Flynn </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92441/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Goldmark 1.2.0: A Markdown Parser Written in Go</a></span> — Boasts that it’s easy to extend and <a href="https://golangweekly.com/link/92442/rss" style=" color: #0099b4;   ">CommonMark</a> compliant (we’ll debate the role of standards in Markdown another day 😏)</p>\n  <p>Yusuke Inuzuka </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92443/rss" title="unidoc.io" style=" color: #0099b4;    font-size: 1.05em;">Filling and Flattening PDF Forms to Make Everlasting PDFs</a></span></p>\n  <p>UniPDF <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92444/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Evergreen: A Distributed Continuous Integration System from MongoDB</a></span> — Built by MongoDB to test MongoDB, but it’s written in Go and dynamically allocates hosts to run tasks in parallel across many machines.</p>\n  <p>Evergreen </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92445/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">fluff: Fast Web Fuzzer Written in Go</a></span> — This is for testing systems/apps of your <em>own</em>, of course, but will let you quickly fuzz POST data, URL parameters, paths, and more.</p>\n  <p>Joona Hoikkala </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/322/rss" width="1" height="1" />	317644ee0552e34c37ec5372ab55652df2698b8f	\N	f	2020-08-14 05:06:00	2020-08-21 12:10:07.227474	0			'01':205 '1':204 '1.2.0':630 '15':119 '2020':12 '2020.2':467 '24':11 '2nd':422 '322':9 '45':202 '500':454 '55':206 '58':201 'a':62,78,107,147,161,216,237,265,271,289,337,354,364,413,492,536,553,591,607,631,672 'about':548,571 'across':700 'actionable':530 'actually':566 'afero':291 'ai':164 'allocates':693 'along':501 'also':129 'alternative':120 'an':167,276,374 'analyzer':539 'and':56,144,156,203,233,268,302,371,373,452,518,583,644,661,691,732 'angeles':427 'annotated':541 'another':476,656 'any':44 'application':438 'applications':524 'apply':434 'are':360,525 'around':326 'as':26 'ashley':604 'assets':72 'assets/files':86 'at':215,386,450 'attacks':406 'author':176 'automated':370 'averages':621 'awk':155 'back':105 'backend':423 'based':225 'bell':290 'best':531 'beta':469,482 'better':346 'between':200 'binaries':89 'blog':47 'boasts':637 'book':182 'brad':101,142 'brian':150,171,183 'bringing':81 'build':330,412 'building':209 'built':679 'but':194,550,562,685,721 'by':602,680 'c':154,229 'ca':428 'can':222,488 'chat':148,169 'checklist':514 'chew':113 'circleci':235 'class':342 'cloud':395 'cloud-delivered':394 'co':175 'co-author':174 'code':379,464,520,538,561 'collaboration':234 'command':67 'comments':543,558 'commercial':473 'commonmark':645 'communication':232 'companies':455 'compliant':646 'comprehensive':608 'concepts':619 'connect':446 'connection':231 'continually':362 'continuous':674 'could':50 'course':720 'covers':297 'cox':127,146,301 'create':582 'crowdstrike':387,389,407 'curious':125 'customers':403 'cybersecurity':405 'data':728 'day':657 'debate':649 'december':74 'defines':275 'delivered':396 'demo':133 'dependencies':614 'design':3,29,64,109,138,239,255,339,349 'deviation':625 'distributed':211,673 'do':569 'docker':433 'don':248,545 'draft':63,108,137,238,254,338 'drafts':4,30,350 'dumping':556 'dynamic':587 'dynamically':692 'easy':641 'ecosystem':415 'edit':584 'ekaterina':508 'elasticsearch':432 'embedded':70 'embedding':83 'encoding/json':603 'endpoint':397 'eng':220 'engineer':385,409,424 'enjoy':193 'enough':37 'ensure':515 'enter':327 'etc':626 'evergreen':671,703 'everlasting':667 'excellent':375 'existing':97 'experimental':504 'extend':643 'extensive':168 'fame':158 'fan':554 'fast':705 'file':242,282 'filling':660 'first':341 'fitzpatrick':102,143 'flattening':662 'fluff':704 'flynn':628 'for':65,69,80,110,240,245,278,320,340,366,459,506,540,593,713 'forms':664 'fortune':453 'forward':8,478 'free':458 'fridman':160,208 'from':404,677 'fuzz':726 'fuzzer':707 'fuzzing':343,352 'gabs':580 'generics':312,321,507 'get':250,259 'go':7,66,88,93,157,179,196,246,334,417,429,495,523,577,590,609,636,690,710 'go2go':306,336 'goland':466 'golang':60,512 'goldmark':629 'ground':299 'had':166 'harden':378 'has':128,264 'have':31,43 'helps':400 'here':500 'hierarchies':595 'hiring':420,441,448 'hit':54 'hockman':381 'hoikkala':735 'hosts':694 'how':135,219 'however':41 'hundreds':439 'i':544,551 'ide':474 'idea':286 'if':40,122,284 'implementations':121 'improve':223 'improved':494 'in':87,140,363,393,416,425,559,573,589,635,654,689,698,709 'include':51 'included':499 'includes':116 'including':576 'infrastructure':517 'initial':503 'inputs':359 'integration':675 'interface':277,599 'interfaces':244 'introduces':269 'inuzuka':659 'io/fs':270 'is':103,199,287,353,369,390,419,483,498,712 'issues':367 'it':368,456,639,686 'its':421 'jeffs':605 'jetbrains':510 'job':461 'job-seekers':460 'jobs':382 'joona':734 'json':588 'july':10 'just':251 'katie':380 'kernighan':151,172 'key':228 'know':59,547 'known':163 'language':181 'languages':575 'last':73,295,485 'latest':529 'leader':392 'learn':218 'let':57,567,723 'lex':159,207 'library':611 'like':99,620 'linked':76,294 'links':117 'll':192,648 'los':426 'lots':186,323 'm':552 'machines':702 'main':92 'make':666 'managers':221,442,449 'manipulated':361 'many':701 'map':597 'markdown':632,655 'messing':325 'mihaylov':579 'module':496 'mongodb':678,681,684 'montana':627 'more':35,733 'mutatable':372 'my':560 'navigating':594 'neat':188 'new':2,28,241,253,272,310 'next':52,318 'no':613 'note':480 'now':104,308,435 'objects':600 'of':84,134,152,177,187,324,331,356,440,521,555,596,652,716,719 'on':15,185,226 'one':213,252,262,437 'online':333 'only':281 'or':46,586 'our':402 'out':490 'over':114 'own':718 'package':273,612 'packr':100 'parallel':699 'parameters':730 'parse':581 'parser':633 'paths':731 'pdf':663 'pdfs':668 'percentiles':623 'pike':304 'pillars':230 'pixel':214 'platform':414 'play':315 'playground':307,335 'popular':471 'post':727 'postgresql':430 'posts':48 'practice':141 'practices':532 'presentation':267 'preslav':578 'programming':180 'proposal':79 'protect':401 'protection':398 'provided':32,601 'push':6 'quickly':725 're':19,124 'reaches':468 'read':14,39,280 'read-only':279 'recorded':130 'redis':431 'release':486 'remote':388 'reply':55 'researcher':165 'ringing':288 'rob':303 'role':651 'run':696 'russ':126,145,300 's':345,457,640,687 'search':365 'section':23,198 'secure':526 'security':513 'seekers':462 'several':574 'similar':298 'similarly':263 'skipping':20 'skool':418,436 'software':384,408 'something':570 'special':329 'specific':197 'sponsor':236,534,670 'sqreen':533 'sr':383 'standard':624 'standards':653 'startups':451 'static':71,85,537 'statistics':610 'stats':606 'step':319,477 'string':598 'strong':210 'stuff':189 'style':311 'subscription':493 'sums':622 'support':68,497,505 'supports':309 'system':243,676 'systems/apps':715 't':249,546 'takes':475 'tasks':697 'teams':212,224 'test':683 'tested':616 'testing':357,714 'than':36,347 'that':190,274,638 'the':16,21,82,91,136,173,178,195,305,317,332,391,470,484,511,516,519,528,650 'them':572 'this':24,131,256,261,285,328,481,563,711 'though':472,479 'three':1,27,227,351 'time':217 'to':5,38,77,90,112,118,314,377,411,445,642,665,682,695 'todo':542,557 'todocheck':535 'tool':564 'tools':98,465 'toolset':94 'touches':184 'trees':283 'try':489 'tutorials':22,45 'two':260,348 'type':355 'unipdf':669 'unix':153 'unknown':585 'unsubscribe':13 'url':729 'us':33,58,111 'use':443 'using':96 'versus':95 'vettery':444,463 'video':132,266 'want':313,410 'way':376 'we':18,49,75,293,647 'web':17,706 'week':25,53,257,296 'weekly':61 'well':162,615 'what':344 'where':358 'which':115,292,399 'will':565,722 'with':34,106,149,170,316,447,502,527,618 'without':322,491 'work':617 'works':139 'wrapper':592 'written':634,688,708 'you':42,123,191,247,258,487,549,568,724 'your':522,717 'yusuke':658 'zharova':509		
29	Clear is better than clever	{"ver":2,"uid":1,"hash":"SHA1:293859211cfa5abd435ee65a99018b47def2f7b5"}	https://dave.cheney.net/2019/07/09/clear-is-better-than-clever	2019-07-09 07:09:51	\n<p><em>This article is based on my </em><a href="https://2019.gophercon.sg/"><em>GopherCon Singapore 2019</em></a><em> presentation. In the presentation I referenced material from my post <a href="https://dave.cheney.net/2014/05/24/on-declaring-variables">on declaring variables</a> and my <a href="https://dave.cheney.net/2016/08/20/solid-go-design">GolangUK 2017 presentation on SOLID design</a>. For brevity those parts of the talk have been elided from this article. If you prefer, you can <a href="https://www.youtube.com/watch?v=NwEuRO_w8HE">watch the recording of the talk</a>.</em> </p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<p>Readability is often cited as one of Go’s core tenets, I disagree. In this article I&#8217;ll discuss the differences between clarity and readability, show you what I mean by clarity and how it applies to Go code, and argue that Go programmers should strive for clarity&#8211;not just readability&#8211;in their programs.</p>\n\n\n\n<h2>Why would I read your code?</h2>\n\n\n\n<p>Before I pick apart the difference between clarity and readability, perhaps the question to ask is, &#8220;why would I read your code?&#8221; To be clear, when I say <em>I</em>, I don’t mean me, I mean you. And when I say <em>your code</em> I also mean you, but in the third person. So really what I’m asking is, &#8220;why would <em>you read</em> another person’s code?&#8221;</p>\n\n\n\n<p>I think Russ Cox, paraphrasing Titus Winters, put it best:</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Software engineering is what happens to programming when you add time and other programmers.</p><cite><em>–</em>Russ Cox, GopherCon Singapore 2018</cite></blockquote>\n\n\n\n<p>The answer to the question, “why would I read your code” is, because we have to work together.&nbsp;Maybe we don’t work in the same office, or live in the same city, maybe we don’t even work at the same company, but we do collaborate on a piece of software, or more likely consume it as a dependency.</p>\n\n\n\n<p>This is the essence of Russ and Titus&#8217; observation; software engineering is the collaboration of software engineers over time. I have to read your code, and you read mine, so that I can understand it, so that you can maintain it, and in short, so that any programmer can change it.</p>\n\n\n\n<p>Russ is making the distinction between software programming and software engineering. The former is a program you write for yourself, the latter is a program, ​a project, a service, a product, ​that many people will contribute to over time. Engineers will come and go, teams will grow and shrink, requirements will change, features will be added and bugs fixed. This is the nature of software engineering.</p>\n\n\n\n<h2>We don&#8217;t read code, we decode it</h2>\n\n\n\n<blockquote class="wp-block-quote"><p>It was sometime after that presentation that I finally realized the obvious: Code is not literature. We don’t read code, we <em>decode</em> it.</p><cite><em>–</em><a href="http://www.gigamonkeys.com/code-reading/">Peter Seibel</a></cite></blockquote>\n\n\n\n<p>The author Peter Seibel suggests that programs are not read, but are instead decoded. In hindsight this is obvious, after all we call it source code, not source literature. The source code of a program is an intermediary form, somewhere between our concept&#8211;what’s inside our heads&#8211;and the computer’s executable notation.</p>\n\n\n\n<p>In my experience, the most common complaint when faced with a foreign codebase written by someone, or some team, is the code is unreadable.&nbsp;Perhaps you agree with me?</p>\n\n\n\n<p>But readability as a concept is subjective.&nbsp;Readability is nit picking about line length and variable names. Readability is holy wars about brace position. Readability is the hand to hand combat of style guides and code review guidelines that regulate the use of whitespace.</p>\n\n\n\n<h2>Clarity ≠ Readability</h2>\n\n\n\n<p>Clarity, on the other hand, is the property of the code on the page. Clear code is independent of the low level details of function names and indentation because clear code is concerned with what the code is doing, not just how it is written down.</p>\n\n\n\n<p>When you or I say that a foreign codebase is unreadable, what I think what we really mean is, <em>I don’t understand it</em>. For the remainder of this article I want to try to explore the difference between clear code and code that is simply readable, because the goal is not how quickly you can read a piece of code, but how quickly you can grasp its meaning.</p>\n\n\n\n<h2>Keep to the left</h2>\n\n\n\n<p>Go programs are traditionally written in a style that favours guard clauses and preconditions. This encourages the successful path to proceed down the page rather than indented inside a conditional block. Mat Ryer calls this <a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88">line of sight coding</a>, because, the active part of your function is not at risk of sliding out of sight beyond the right hand margin of your screen.</p>\n\n\n\n<p>By keeping conditional blocks short, and for the exceptional condition, we avoid nested blocks and potentially complex value shadowing. The successful flow of control continues down the page. At every point in the sequence of statements, if you’ve arrived at that point, you are confident that a growing set of preconditions holds true. </p>\n\n\n\n<pre class="wp-block-preformatted">func ReadConfig(path string) (*Config, error) {\n &nbsp; &nbsp; &nbsp;  f, err := os.Open(path)\n        if err != nil {\n                return nil, err\n        }\n        defer f.Close()\n &nbsp; &nbsp; &nbsp; &nbsp;// ...\n } </pre>\n\n\n\n<p>The canonical example of this is the classic Go error check idiom; <code>if err != nil</code> then return it to the caller, else continue with the function. We can generalise this pattern a little and in pseudocode we have:</p>\n\n\n\n<pre class="wp-block-preformatted">if <em>some condition</em> {\n        // true: cleanup\n        return\n }\n // false: continue </pre>\n\n\n\n<p>If<em> some condition</em> is true, then return to the caller, else continue onwards towards the end of the function.&nbsp;</p>\n\n\n\n<p>This form holds true for all preconditions, error checks, map lookups, length checks, and so forth. The exact form of the precondition’s check changes, but the pattern is always the same; the cleanup code is inside the block, terminating with a return, the success condition lies outside the block, and is only reachable if the precondition is false.</p>\n\n\n\n<p>Even if you are unsure what the preceding and succeeding code does, how the precondition is formed, and how the cleanup code works, it is clear to the reader that this is a guard clause.</p>\n\n\n\n<h2>Structured programming</h2>\n\n\n\n<p>Here we have a <code>comp</code> function that takes two <code>int</code>s and returns an <code>int</code>;</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n        if a &lt; b {\n                return -1\n        }\n        if a &gt; b {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; return 1\n &nbsp; &nbsp; &nbsp; &nbsp;}\n &nbsp; &nbsp; &nbsp; &nbsp;return 0\n} </pre>\n\n\n\n<p>The <code>comp</code> function is written in a similar form to guard clauses from earlier. If <code>a</code> is less than <code>b</code>, the return -1 path is taken. If <code>a</code> is greater than <code>b</code>, the return 1 path is taken. Else, <code>a</code> and <code>b</code> are by induction equal, so the final return 0 path is taken.</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n        if <em>condition A</em> {\n                <em>body</em> A\n        }\n &nbsp; &nbsp; &nbsp; &nbsp;if <em>condition</em> B {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <em>body B</em>\n &nbsp; &nbsp; &nbsp; &nbsp;}\n &nbsp; &nbsp; &nbsp; &nbsp;return 0\n} </pre>\n\n\n\n<p>The problem with <code>comp</code> as written is, unlike the guard clause, someone maintaining this function has to read all of it. To understand when 0 is returned, the reader has to consult the conditions <em>and the body</em> of each clause. This is reasonable when you&#8217;re dealing with functions which fit on a slide, but in the real world complicated functions&#8211;​the ones we’re paid for our expertise to maintain&#8211;are rarely slide sized, and their conditions and bodies are rarely simple.</p>\n\n\n\n<p>Let’s address the problem of making it clear under which condition 0 will be returned:</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n        if a &lt; b {\n                return -1\n        } else if a &gt; b {\n &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return 1\n &nbsp; &nbsp; &nbsp; &nbsp;} else {\n &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return 0\n &nbsp; &nbsp; &nbsp; &nbsp;}\n} </pre>\n\n\n\n<p>Now, although this code is not what anyone would argue is readable&#8211;​long chains of <code>if else if</code> statements are broadly discouraged in Go&#8211;​it is clearer to the reader that zero is only returned if none of the conditions are met. </p>\n\n\n\n<p>How do we know this? The Go spec declares that each function that returns a value must end in a terminating statement. This means that the body of all conditions must return a value. Thus, this does not compile:</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n&nbsp; &nbsp; &nbsp; &nbsp; if a &gt; b {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = b // does not compile\n&nbsp; &nbsp; &nbsp; &nbsp; } else if a &lt; b {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1\n  &nbsp; &nbsp; &nbsp; } else {\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0\n &nbsp;&nbsp; &nbsp; &nbsp; }\n}</pre>\n\n\n\n<p>Further, it is now clear to the reader that this code isn’t actually a series of conditions. This is an example of selection. Only one path can be taken regardless of the operation of the condition blocks. Based on the inputs one of -1, 0, or 1 will always be returned.&nbsp;</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n &nbsp; &nbsp; &nbsp;  if a &lt; b {\n &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; return -1\n &nbsp; &nbsp; &nbsp;  } else if a &gt; b {\n &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; return 1\n &nbsp; &nbsp; &nbsp;  } else {\n &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; return 0\n &nbsp; &nbsp; &nbsp;  }\n} </pre>\n\n\n\n<p>However this code is hard to read as each of the conditions is written differently, the first is a simple <code>if a &lt; b</code>, the second is the unusual <code>else if a &gt; b</code>, and the last conditional is actually unconditional.</p>\n\n\n\n<p>But it turns out there is a statement which we can use to make our intention much clearer to the reader; <code>switch</code>.</p>\n\n\n\n<pre class="wp-block-preformatted">func comp(a, b int) int {\n&nbsp; &nbsp; &nbsp; &nbsp; switch {\n&nbsp; &nbsp; &nbsp; &nbsp; case a &lt; b:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1\n&nbsp; &nbsp; &nbsp; &nbsp; case a &gt; b:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 1\n&nbsp; &nbsp; &nbsp; &nbsp; default:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 0\n&nbsp; &nbsp; &nbsp; &nbsp; }\n} </pre>\n\n\n\n<p>Now it is clear to the reader that this is a selection. Each of the selection conditions are documented in their own case statement, rather than varying <code>else</code> or <code>else if</code> clauses.</p>\n\n\n\n<p>By moving the default condition inside the switch, the reader only has to consider the cases that match their condition, as none of the cases can fall out of the switch block because of the default clause.<span id='easy-footnote-1-3748' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/07/09/clear-is-better-than-clever#easy-footnote-bottom-1-3748' title='The &lt;code&gt;fallthrough&lt;/code&gt; keyword complicates this analysis, hence the general disapproval of &lt;code&gt;fallthrough&lt;/code&gt; in switch statements.'><sup>1</sup></a></span></p>\n\n\n\n<blockquote class="wp-block-quote"><p>Structured programming submerges <em>structure</em> and emphasises <em>behaviour</em></p><cite><em>–Richard Bircher,&nbsp;</em><a href="https://www.amazon.com/Limits-Software-People-Projects-Perspectives/dp/0201433230"><em>The limits of software</em></a></cite></blockquote>\n\n\n\n<p>I found this quote recently and I think it is apt. My arguments for clarity are in truth arguments intended to emphasise the behaviour of the code, rather than be side tracked by minutiae of the structure itself. Said another way, what is the code trying to do, <em>not how is it is trying to do it</em>.</p>\n\n\n\n<h2>Guiding principles</h2>\n\n\n\n<p>I opened this article with a discussion of readability vs clarity and hinted that there were other principles of well written Go code. It seems fitting to close on a discussion of those other principles.</p>\n\n\n\n<p>Last year <a href="https://www.slideshare.net/bcantrill/platform-values-rust-and-the-implications-for-system-software">Bryan Cantrill gave a wonderful presentation on operating system principles</a>, wherein he highlighted that different operating systems focus on different principles. It is not that they ignore the principles that differ between their competitors, just that when the chips are down, they prioritise a core set. So what is that core set of principles for Go?</p>\n\n\n\n<h3>Clarity</h3>\n\n\n\n<p>If you were going to say readability, hopefully I’ve provided you with an alternative.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Programs must be written for people to read, and only incidentally for machines to execute.</p><cite><em>–Hal Abelson and Gerald Sussman</em>. <em>Structure and Interpretation of Computer Programs</em> </cite></blockquote>\n\n\n\n<p>Code is read many more times than it is written. A single piece of code will, over its lifetime, be read hundreds, maybe thousands of times. It will be read hundreds or thousands of times because it must be understood. Clarity is important because all software, not just Go programs, is written by people to be read by other people. The fact that software is also consumed by machines is secondary.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>The most important skill for a programmer is the ability to effectively communicate ideas.</p><cite><em>–Gastón Jorquera</em> </cite></blockquote>\n\n\n\n<p>Legal documents are double spaced to aide the reader, but to the layperson that does nothing to help them comprehend what they just read. Readability is a property of how easy it was to read the words on the screen. Clarity, on the other hand, is the answer to the question &#8220;did you understand what you just read?&#8221;.</p>\n\n\n\n<p>If you’re writing a program for yourself, maybe it only has to run once, or you’re the only person who’ll ever see it, then do what ever works for you. But if this is a piece of software that more than one person will contribute to, or that will be used by people over a long enough time that requirements, features, or the environment it runs in may change, then your goal must be for your program to be maintainable.</p>\n\n\n\n<p>The first step towards writing maintainable code is making sure intent of the code is clear.</p>\n\n\n\n<h3>Simplicity</h3>\n\n\n\n<p>The next principle is obviously simplicity. Some might argue the most important principle for any programming language, perhaps the most important principle full stop.</p>\n\n\n\n<p>Why should we strive for simplicity? Why is important that Go programs be simple?</p>\n\n\n\n<blockquote class="wp-block-quote"><p>The ability to simplify means to eliminate the unnecessary so that the necessary may speak</p><cite><em>–Hans Hofmann</em> </cite></blockquote>\n\n\n\n<p>We’ve all been in a situation where we say &#8220;I can’t understand this code&#8221;. We’ve all worked on programs we were scared to make a change because we worried that it’ll break another part of the program; a part you don’t understand and don’t know how to fix.&nbsp;</p>\n\n\n\n<p>This is complexity. Complexity turns reliable software in unreliable software. Complexity is what leads to unmaintainable software. Complexity is what kills software projects. Clarity and simplicity are interlocking forces that lead to maintainable software.</p>\n\n\n\n<h3>Productivity</h3>\n\n\n\n<p>The last Go principle I want to highlight is productivity. Developer productivity boils down to this; how much time do you spend doing useful work verses waiting for your tools or hopelessly lost in a foreign code-base? Go programmers should feel that they can get a lot done with Go.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>“I&nbsp;started another compilation, turned my chair around to face Robert, and started asking pointed questions. Before the compilation was done, we&#8217;d roped Ken in and had decided to do something.”</p><cite><em>–Rob Pike, <a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is Exponentially more</a></em><a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html"> </a></cite></blockquote>\n\n\n\n<p>The joke goes that Go was designed while waiting for a C++ program to compile. Fast compilation is a key feature of Go and a key recruiting tool to attract new developers. While compilation speed remains a constant battleground, it is fair to say that compilations which take minutes in other languages, take seconds in Go. This helps Go developers feel as productive as their counterparts working in dynamic languages without the maintenance issues inherent in those languages.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Design is the art of arranging code to work <em>today</em>, and be changeable&nbsp; <em>forever.</em></p><cite><em>–Sandi Metz</em> </cite></blockquote>\n\n\n\n<p>More fundamental to the question of developer productivity, Go programmers realise that code is written to be read and so place the act of reading code above the act of writing it. Go goes so far as to enforce, via tooling and custom, that all code be formatted in a specific style. This removes the friction of learning a project specific dialect and helps spot mistakes because they just look incorrect.</p>\n\n\n\n<p>Go programmers don’t spend days debugging inscrutable compile errors. They don’t waste days with complicated build scripts or deploying code to production. And most importantly they don’t spend their time trying to understand what their coworker wrote.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Complexity is anything that makes software hard to understand or to modify.</p><cite><em>–John Ousterhout</em>, <a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201/ref=sr_1_3?ie=UTF8&amp;qid=1524677319&amp;sr=8-3&amp;keywords=john+ousterhout">A Philosophy of Software Design</a></cite></blockquote>\n\n\n\n<p>Something I know about each of you reading this post is you will eventually leave your current employer. Maybe you’ll be moving on to a new role, or perhaps a promotion, perhaps you’ll move cities, or follow your partner overseas. Whatever the reason, we must all consider the succession of the maintainership of the programs we create.</p>\n\n\n\n<p>If we strive to write programs that are clear, programs that are simple, and to focus on the productivity of those working with us that will set all Go programmers in good stead.</p>\n\n\n\n<p>Because if we don’t, as we move from job to job, we’ll leave behind programs which cannot be maintained. Programs which cannot be changed. Programs which are too hard to onboard new developers, and programs which feel like career digression for those that work on them.</p>\n\n\n\n<p>If software cannot be maintained, then it will be rewritten; and that could be the last time your company invests in Go.</p>\n	1ad15e16ff3711e08ccf6387d3d5eb099c2d1393	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.243551	0			'-1':995,1025,1184,1342,1360,1442 '0':1002,1053,1074,1099,1170,1193,1297,1343,1369,1450 '1':1000,1037,1190,1294,1345,1366,1447 '2017':31 '2018':215 '2019':14 'a':264,274,341,350,352,354,356,460,491,513,608,659,681,703,785,841,916,966,974,987,992,997,1009,1018,1030,1042,1059,1065,1067,1127,1176,1181,1187,1250,1255,1268,1277,1282,1284,1291,1312,1352,1357,1363,1388,1391,1400,1415,1433,1439,1444,1461,1597,1621,1632,1672,1737,1803,1840,1876,1909,1929,2032,2054,2068,2150,2163,2216,2224,2230,2242,2349,2358,2425,2455,2460 'abelson':1717 'ability':1807,2011 'about':521,531,2433 'above':2326 'act':2322,2328 'active':716 'actually':1311,1407 'add':206 'added':382 'address':1160 'after':404,446 'agree':507 'aide':1820 'all':447,880,1093,1264,1771,2029,2045,2344,2477,2516 'also':164,1792 'alternative':1700 'although':1195 'always':904,1347 'an':463,983,1318,1699 'and':28,83,92,99,128,157,208,282,301,317,335,369,374,383,475,524,544,582,643,687,743,752,843,888,925,942,951,981,1043,1109,1150,1153,1402,1524,1538,1603,1709,1718,1722,2074,2105,2179,2194,2229,2294,2318,2341,2362,2395,2502,2557,2580 'another':183,1572,2063,2170 'answer':217,1861 'any':322,1986 'anyone':1201 'anything':2413 'apart':123 'applies':95 'apt':1543 'are':434,438,677,782,937,1045,1146,1155,1213,1234,1468,1548,1668,1816,2107,2496,2500,2550 'argue':100,1203,1980 'arguments':1545,1551 'around':2175 'arranging':2289 'arrived':777 'art':2287 'article':7,48,75,631,1595 'as':64,273,512,1079,1377,1503,2267,2269,2336,2527 'ask':134 'asking':177,2181 'at':255,723,766,778 'attract':2235 'author':428 'avoid':749 'b':988,993,998,1022,1034,1044,1060,1070,1072,1177,1182,1188,1278,1283,1285,1292,1353,1358,1364,1392,1401,1434,1440,1445 'base':2154 'based':9,1336 'battleground':2244 'be':143,381,1172,1326,1348,1562,1703,1746,1755,1765,1782,1924,1948,1953,2008,2295,2316,2346,2451,2541,2546,2573,2578,2583 'because':228,584,649,714,1515,1762,1770,2056,2366,2522 'been':44,2030 'before':120,2184 'behaviour':1526,1556 'behind':2537 'best':196 'better':3 'between':81,126,332,467,640,1660 'beyond':730 'bircher':1528 'block':705,913,924,1514 'blocks':741,751,1335 'bodies':1154 'body':1066,1071,1111,1262 'boils':2128 'brace':532 'break':2062 'brevity':37 'broadly':1214 'bryan':1629 'bugs':384 'build':2388 'but':167,259,437,510,663,900,1129,1409,1823,1905 'by':90,495,738,1046,1483,1565,1779,1784,1794,1926 'c':2217 'call':449 'caller':830,865 'calls':708 'can':53,308,314,324,657,667,837,1325,1419,1508,2038,2161 'cannot':2540,2545,2572 'canonical':811 'cantrill':1630 'career':2562 'case':1438,1443,1473 'cases':1498,1507 'chains':1207 'chair':2174 'change':325,378,1943,2055 'changeable':2296 'changed':2547 'changes':899 'check':820,898 'checks':883,887 'chips':1667 'cited':63 'cities':2466 'city':248 'clarity':82,91,107,127,554,556,1547,1602,1685,1767,1854,2104 'classic':817 'clause':968,1085,1114 'clause.1':1519 'clauses':686,1014,1482 'cleanup':852,908,954 'clear':1,144,570,585,641,959,1166,1302,1454,1970,2497 'clearer':1220,1426 'clever':5 'close':1619 'code':98,119,141,162,186,226,300,397,413,421,452,458,502,545,566,571,586,592,642,644,662,909,944,955,1197,1308,1372,1559,1577,1614,1727,1741,1961,1968,2042,2153,2290,2312,2325,2345,2392 'code-base':2152 'codebase':493,610 'coding':713 'collaborate':262 'collaboration':289 'combat':540 'come':368 'common':486 'communicate':1810 'comp':975,986,1004,1058,1078,1175,1276,1351,1432 'company':258,2588 'competitors':1662 'compilation':2171,2186,2222,2239 'compilations':2251 'compile':1274,1288,2220,2379 'complaint':487 'complex':754 'complexity':2083,2084,2091,2098,2411 'complicated':1134,2387 'comprehend':1833 'computer':477,1725 'concept':469,514 'concerned':588 'condition':747,850,858,920,1064,1069,1169,1334,1487,1502 'conditional':704,740,1405 'conditions':1108,1152,1233,1265,1315,1381,1467 'confident':783 'config':796 'consider':1496,2478 'constant':2243 'consult':1106 'consume':271 'consumed':1793 'continue':832,855,867 'continues':762 'contribute':362,1919 'control':761 'core':69,1673,1679 'could':2582 'counterparts':2271 'coworker':2409 'cox':190,212 'create':2488 'current':2446 'custom':2342 'd':2190 'days':2376,2385 'dealing':1121 'debugging':2377 'decided':2196 'declares':1244 'declaring':26 'decode':399,423 'decoded':440 'default':1448,1486,1518 'defer':808 'dependency':275 'deploying':2391 'design':35,2284,2429 'designed':2212 'details':578 'developer':2126,2306 'developers':2237,2265,2556 'dialect':2361 'did':1865 'differ':1659 'difference':125,639 'differences':80 'different':1643,1648 'differently':1384 'digression':2563 'disagree':72 'discouraged':1215 'discuss':78 'discussion':1598,1622 'distinction':331 'do':261,1237,1580,1588,1899,2135,2198 'documented':1469 'documents':1815 'does':945,1272,1286,1828 'doing':594,2138 'don':150,236,251,394,418,622,2071,2075,2373,2382,2399,2525 'done':2165,2188 'double':1817 'down':601,696,763,1669,2129 'dynamic':2274 'each':1113,1246,1378,1463,2434 'earlier':1016 'easy':1844 'effectively':1809 'elided':45 'eliminate':2016 'else':831,866,1041,1185,1191,1210,1289,1295,1361,1367,1398,1478,1480 'emphasise':1554 'emphasises':1525 'employer':2447 'encourages':690 'end':871,1253 'enforce':2338 'engineering':198,286,337,392 'engineers':292,366 'enough':1931 'environment':1938 'equal':1048 'err':799,803,807,823 'error':797,819,882 'errors':2380 'essence':279 'even':253,934 'eventually':2443 'ever':1895,1901 'every':767 'exact':892 'example':812,1319 'exceptional':746 'executable':479 'execute':1715 'experience':483 'expertise':1143 'explore':637 'exponentially':2204 'f':798 'f.close':809 'face':2177 'faced':489 'fact':1788 'fair':2247 'fall':1509 'false':854,933 'far':2335 'fast':2221 'favours':684 'feature':2226 'features':379,1935 'feel':2158,2266,2560 'final':1051 'finally':409 'first':1386,1956 'fit':1125 'fitting':1617 'fix':2080 'fixed':385 'flow':759 'focus':1646,2504 'follow':2468 'for':36,106,345,626,744,879,1141,1546,1683,1705,1712,1802,1878,1903,1949,1985,2000,2143,2215,2564 'forces':2109 'foreign':492,609,2151 'forever':2297 'form':465,876,893,1011 'formatted':2347 'formed':950 'former':339 'forth':890 'found':1534 'friction':2355 'from':22,46,1015,2530 'full':1994 'func':792,985,1057,1174,1275,1350,1431 'function':580,720,835,874,976,1005,1089,1247 'functions':1123,1135 'fundamental':2301 'further':1298 'gastón':1812 'gave':1631 'generalise':838 'gerald':1719 'get':2162 'go':67,97,102,370,675,818,1217,1242,1613,1684,1775,2006,2118,2155,2167,2210,2228,2261,2264,2308,2332,2371,2517,2591 'goal':651,1946 'goes':2208,2333 'going':1689 'golanguk':30 'good':2520 'gophercon':12,213 'grasp':668 'greater':1032 'grow':373 'growing':786 'guard':685,967,1013,1084 'guidelines':547 'guides':543 'guiding':1590 'had':2195 'hal':1716 'hand':537,539,560,733,1858 'hans':2025 'happens':201 'hard':1374,2417,2552 'has':1090,1104,1494,1883 'have':43,230,296,847,973 'he':1640 'heads':474 'help':1831 'helps':2263,2363 'here':971 'highlight':2123 'highlighted':1641 'hindsight':442 'hinted':1604 'hofmann':2026 'holds':790,877 'holy':529 'hopefully':1693 'hopelessly':2147 'how':93,597,654,664,946,952,1236,1582,1843,2078,2132 'however':1370 'hundreds':1748,1757 'i':19,71,76,88,116,121,138,146,148,149,154,159,163,175,187,223,295,307,408,605,614,621,632,1533,1539,1592,1694,2037,2120,2168,2431 'ideas':1811 'idiom':821 'if':49,774,802,822,848,856,929,935,991,996,1017,1029,1063,1068,1180,1186,1209,1211,1229,1281,1290,1356,1362,1390,1399,1481,1686,1872,1906,2489,2523,2570 'ignore':1655 'important':1769,1800,1983,1992,2004 'importantly':2397 'in':16,73,111,168,239,245,318,441,481,680,769,844,1008,1130,1216,1254,1470,1549,1941,2031,2088,2149,2193,2255,2260,2273,2281,2348,2519,2590 'incidentally':1711 'incorrect':2370 'indentation':583 'indented':701 'independent':573 'induction':1047 'inherent':2280 'inputs':1339 'inscrutable':2378 'inside':472,702,911,1488 'instead':439 'int':984,989,990,1061,1062,1178,1179,1279,1280,1354,1355,1435,1436 'intended':1552 'intent':1965 'intention':1424 'interlocking':2108 'intermediary':464 'interpretation':1723 'ints':980 'invests':2589 'is':2,8,61,135,178,199,227,277,287,328,340,349,387,414,444,462,500,503,515,518,528,535,561,572,587,593,599,611,620,646,652,721,815,859,903,910,926,932,949,958,965,1006,1019,1027,1031,1039,1055,1081,1100,1116,1198,1204,1219,1226,1300,1317,1373,1382,1387,1395,1406,1414,1453,1460,1542,1575,1583,1585,1651,1677,1728,1735,1768,1777,1791,1796,1805,1839,1859,1908,1962,1969,1975,2003,2082,2092,2099,2124,2203,2223,2246,2285,2313,2412,2440 'isn':1309 'issues':2279 'it':94,195,272,310,316,326,400,401,424,450,598,625,827,957,1095,1165,1218,1299,1410,1452,1541,1584,1589,1615,1650,1734,1753,1763,1845,1881,1897,1939,2060,2245,2331,2576 'its':669,1744 'itself':1570 'job':2531,2533 'john':2423 'joke':2207 'jorquera':1813 'just':109,596,1663,1774,1836,1870,2368 'keep':671 'keeping':739 'ken':2192 'key':2225,2231 'kills':2101 'know':1239,2077,2432 'language':1988 'languages':2257,2275,2283 'last':1404,1627,2117,2585 'latter':348 'layperson':1826 'lead':2111 'leads':2094 'learning':2357 'leave':2444,2536 'left':674 'legal':1814 'length':523,886 'less':1020,2202 'let':1158 'level':577 'lies':921 'lifetime':1745 'like':2561 'likely':270 'limits':1530 'line':522,710 'literature':416,455 'little':842 'live':244 'll':77,1894,2061,2450,2464,2535 'long':1206,1930 'look':2369 'lookups':885 'lost':2148 'lot':2164 'low':576 'm':176 'machines':1713,1795 'maintain':315,1145 'maintainable':1954,1960,2113 'maintained':2542,2574 'maintainership':2483 'maintaining':1087 'maintenance':2278 'make':1422,2053 'makes':2415 'making':329,1164,1963 'many':359,1730 'map':884 'margin':734 'mat':706 'match':1500 'material':21 'may':1942,2023 'maybe':234,249,1749,1880,2448 'me':153,509 'mean':89,152,155,165,619 'meaning':670 'means':1259,2014 'met':1235 'metz':2299 'might':1979 'mine':304 'minutes':2254 'minutiae':1566 'mistakes':2365 'modify':2422 'more':269,1731,1914,2205,2300 'most':485,1799,1982,1991,2396 'move':2465,2529 'moving':1484,2452 'much':1425,2133 'must':1252,1266,1702,1764,1947,2476 'my':11,23,29,482,1544,2173 'names':526,581 'nature':389 'necessary':2022 'nested':750 'new':2236,2456,2555 'next':1973 'nil':804,806,824 'nit':519 'none':1230,1504 'not':108,415,435,453,595,653,722,1199,1273,1287,1581,1652,1773 'notation':480 'nothing':1829 'now':1194,1301,1451 'observation':284 'obvious':412,445 'obviously':1976 'of':40,57,66,266,280,290,390,459,541,552,564,574,579,629,661,711,718,725,728,735,760,772,788,813,872,894,1094,1112,1163,1208,1231,1263,1314,1320,1329,1332,1341,1379,1464,1505,1511,1516,1531,1557,1567,1599,1610,1623,1681,1724,1740,1751,1760,1842,1911,1966,2065,2227,2288,2305,2323,2329,2356,2427,2435,2481,2484,2508 'office':242 'often':62 'on':10,25,33,263,557,567,1126,1337,1620,1635,1647,1851,1855,2047,2453,2505,2568 'onboard':2554 'once':1886 'one':65,1323,1340,1916 'ones':1137 'only':927,1227,1322,1493,1710,1882,1891 'onwards':868 'opened':1593 'operating':1636,1644 'operation':1331 'or':243,268,497,604,1344,1479,1758,1887,1921,1936,2146,2390,2420,2458,2467 'os.open':800 'other':209,559,1608,1625,1785,1857,2256 'our':468,473,1142,1423 'ousterhout':2424 'out':727,1412,1510 'outside':922 'over':293,364,1743,1928 'overseas':2471 'own':1472 'page':569,698,765 'paid':1140 'paraphrasing':191 'part':717,2064,2069 'partner':2470 'parts':39 'path':693,794,801,1026,1038,1054,1324 'pattern':840,902 'people':360,1706,1780,1786,1927 'perhaps':130,505,1989,2459,2462 'person':171,184,1892,1917 'peter':425,429 'philosophy':2426 'pick':122 'picking':520 'piece':265,660,1739,1910 'pike':2201 'place':2320 'point':768,780 'pointed':2182 'position':533 'post':24,2439 'potentially':753 'preceding':941 'precondition':896,931,948 'preconditions':688,789,881 'prefer':51 'presentation':15,18,32,406,1634 'principle':1974,1984,1993,2119 'principles':1591,1609,1626,1638,1649,1657,1682 'prioritise':1671 'problem':1076,1162 'proceed':695 'product':357 'production':2394 'productive':2268 'productivity':2115,2125,2127,2307,2507 'program':342,351,461,1877,1951,2067,2218 'programmer':323,1804 'programmers':103,210,2156,2309,2372,2518 'programming':203,334,970,1521,1987 'programs':113,433,676,1701,1726,1776,2007,2048,2486,2494,2498,2538,2543,2548,2558 'project':353,2359 'projects':2103 'promotion':2461 'property':563,1841 'provided':1696 'pseudocode':845 'put':194 'question':132,220,1864,2304 'questions':2183 'quickly':655,665 'quote':1536 'rarely':1147,1156 'rather':699,1475,1560 're':1120,1139,1874,1889 'reachable':928 'read':117,139,182,224,298,303,396,420,436,658,1092,1376,1708,1729,1747,1756,1783,1837,1848,1871,2317 'readability':60,84,110,129,511,517,527,534,555,1600,1692,1838 'readable':648,1205 'readconfig':793 'reader':962,1103,1223,1305,1429,1457,1492,1822 'reading':2324,2437 'real':1132 'realise':2310 'realized':410 'really':173,618 'reason':2474 'reasonable':1117 'recently':1537 'recording':56 'recruiting':2232 'referenced':20 'regardless':1328 'regulate':549 'reliable':2086 'remainder':628 'remains':2241 'removes':2353 'requirements':376,1934 'return':805,826,853,862,917,994,999,1001,1024,1036,1052,1073,1183,1189,1192,1267,1293,1296,1359,1365,1368,1441,1446,1449 'returned':1101,1173,1228,1349 'returns':982,1249 'review':546 'rewritten':2579 'richard':1527 'right':732 'risk':724 'rob':2200 'robert':2178 'role':2457 'roped':2191 'run':1885 'runs':1940 'russ':189,211,281,327 'ryer':707 's':68,185,471,478,897,1159 'said':1571 'same':241,247,257,906 'sandi':2298 'say':147,160,606,1691,2036,2249 'scared':2051 'screen':737,1853 'scripts':2389 'second':1394 'secondary':1797 'seconds':2259 'see':1896 'seems':1616 'seibel':426,430 'selection':1321,1462,1466 'sequence':771 'series':1313 'service':355 'set':787,1674,1680,2515 'shadowing':756 'short':319,742 'should':104,1997,2157 'show':85 'shrink':375 'side':1563 'sight':712,729 'similar':1010 'simple':1157,1389,2009,2501 'simplicity':1971,1977,2001,2106 'simplify':2013 'simply':647 'singapore':13,214 'single':1738 'situation':2033 'sized':1149 'skill':1801 'slide':1128,1148 'sliding':726 'so':172,305,311,320,889,1049,1675,2019,2319,2334 'software':197,267,285,291,333,336,391,1532,1772,1790,1912,2087,2090,2097,2102,2114,2416,2428,2571 'solid':34 'some':498,849,857,1978 'someone':496,1086 'something':2199,2430 'sometime':403 'somewhere':466 'source':451,454,457 'spaced':1818 'speak':2024 'spec':1243 'specific':2350,2360 'speed':2240 'spend':2137,2375,2401 'spot':2364 'started':2169,2180 'statement':1257,1416,1474 'statements':773,1212 'stead':2521 'step':1957 'stop':1995 'string':795 'strive':105,1999,2491 'structure':1523,1569,1721 'structured':969,1520 'style':542,682,2351 'subjective':516 'submerges':1522 'succeeding':943 'success':919 'successful':692,758 'succession':2480 'suggests':431 'sure':1964 'sussman':1720 'switch':1430,1437,1490,1513 'system':1637 'systems':1645 't':151,237,252,395,419,623,1310,2039,2072,2076,2374,2383,2400,2526 'take':2253,2258 'taken':1028,1040,1056,1327 'takes':978 'talk':42,59 'team':499 'teams':371 'tenets':70 'terminating':914,1256 'than':4,700,1021,1033,1476,1561,1733,1915 'that':101,306,312,321,358,405,407,432,548,607,645,683,779,784,963,977,1224,1245,1248,1260,1306,1458,1499,1605,1642,1653,1658,1664,1678,1789,1827,1913,1922,1933,2005,2020,2059,2110,2159,2209,2250,2311,2343,2414,2495,2499,2513,2566,2581 'the':17,41,55,58,79,124,131,169,216,219,240,246,256,278,288,330,338,347,388,411,427,456,476,484,501,536,550,558,562,565,568,575,591,627,638,650,673,691,697,715,731,745,757,764,770,810,816,829,834,864,870,873,891,895,901,905,907,912,918,923,930,940,947,953,961,1003,1023,1035,1050,1075,1083,1102,1107,1110,1131,1136,1161,1222,1232,1241,1261,1304,1330,1333,1338,1380,1385,1393,1396,1403,1428,1456,1465,1485,1489,1491,1497,1506,1512,1517,1529,1555,1558,1568,1576,1656,1666,1787,1798,1806,1821,1825,1849,1852,1856,1860,1863,1890,1937,1955,1967,1972,1981,1990,2010,2017,2021,2066,2116,2185,2206,2277,2286,2303,2321,2327,2354,2473,2479,2482,2485,2506,2584 'their':112,1151,1471,1501,1661,2270,2402,2408 'them':1832,2569 'then':825,861,1898,1944,2575 'there':1413,1606 'they':1654,1670,1835,2160,2367,2381,2398 'think':188,615,1540 'third':170 'this':6,47,74,276,386,443,630,689,709,814,839,875,964,1088,1115,1196,1240,1258,1271,1307,1316,1371,1459,1535,1594,1907,2041,2081,2131,2262,2352,2438 'those':38,1624,2282,2509,2565 'thousands':1750,1759 'thus':1270 'time':207,294,365,1932,2134,2403,2586 'times':1732,1752,1761 'titus':192,283 'to':96,133,142,202,218,231,297,363,538,634,636,672,694,828,863,960,1012,1091,1096,1105,1144,1221,1303,1375,1421,1427,1455,1495,1553,1579,1587,1618,1690,1707,1714,1781,1808,1819,1824,1830,1847,1862,1884,1920,1952,2012,2015,2052,2079,2095,2112,2122,2130,2176,2197,2219,2234,2248,2291,2302,2315,2337,2393,2405,2418,2421,2454,2492,2503,2532,2553 'today':2293 'together':233 'too':2551 'tool':2233 'tooling':2340 'tools':2145 'towards':869,1958 'tracked':1564 'traditionally':678 'true':791,851,860,878 'truth':1550 'try':635 'trying':1578,1586,2404 'turned':2172 'turns':1411,2085 'two':979 'unconditional':1408 'under':1167 'understand':309,624,1097,1867,2040,2073,2406,2419 'understood':1766 'unlike':1082 'unmaintainable':2096 'unnecessary':2018 'unreadable':504,612 'unreliable':2089 'unsure':938 'unusual':1397 'us':2512 'use':551,1420 'used':1925 'useful':2139 'value':755,1251,1269 'variable':525 'variables':27 'varying':1477 've':776,1695,2028,2044 'verses':2141 'via':2339 'vs':1601 'waiting':2142,2214 'want':633,2121 'wars':530 'was':402,1846,2187,2211 'waste':2384 'watch':54 'way':1573 'we':229,235,250,260,393,398,417,422,448,617,748,836,846,972,1138,1238,1418,1998,2027,2035,2043,2049,2057,2189,2475,2487,2490,2524,2528,2534 'well':1611 'were':1607,1688,2050 'what':87,174,200,470,590,613,616,939,1200,1574,1676,1834,1868,1900,2093,2100,2407 'whatever':2472 'when':145,158,204,488,602,1098,1118,1665 'where':2034 'wherein':1639 'which':1124,1168,1417,2252,2539,2544,2549,2559 'while':2213,2238 'whitespace':553 'who':1893 'why':114,136,179,221,1996,2002 'will':361,367,372,377,380,1171,1346,1742,1754,1918,1923,2442,2514,2577 'winters':193 'with':490,508,589,833,915,1077,1122,1596,1698,2166,2386,2511 'without':2276 'wonderful':1633 'words':1850 'work':232,238,254,2140,2292,2567 'worked':2046 'working':2272,2510 'works':956,1902 'world':1133 'worried':2058 'would':115,137,180,222,1202 'write':344,2493 'writing':1875,1959,2330 'written':494,600,679,1007,1080,1383,1612,1704,1736,1778,2314 'wrote':2410 'year':1628 'you':50,52,86,156,166,181,205,302,313,343,506,603,656,666,775,781,936,1119,1687,1697,1866,1869,1873,1888,1904,2070,2136,2436,2441,2449,2463 'your':118,140,161,225,299,719,736,1945,1950,2144,2445,2469,2587 'yourself':346,1879 'zero':1225	en	Dave Cheney
339	深度：手写一个 WebSocket 协议	{"ver":2,"uid":1,"hash":"SHA1:ea7ee397fa16a974e932ab699434329cae278199"}	https://toutiao.io/k/42oqniu	2020-08-17 02:10:08	深度：手写一个 WebSocket 协议	cbc461c66a73d115de5aa1383447b61b28db813f	\N	f	2020-08-17 02:10:00	2020-08-18 00:10:10.657941	0			'websocket':3,7 '协议':4,8 '手写一个':2,6 '深度':1,5	zh	
19	The Zen of Go	{"ver":2,"uid":1,"hash":"SHA1:57bfa8b7907d3322bafea9a22da31c1f3492a2a5"}	https://dave.cheney.net/2020/02/23/the-zen-of-go	2020-03-08 10:31:13	\n<p><em>This article was derived from my <a href="https://www.gophercon.org.il">GopherCon Israel 2020</a> presentation. It&#8217;s also quite long. If you&#8217;d prefer a shorter version, head over to <a href="https://the-zen-of-go.netlify.com">the-zen-of-go.netlify.com</a></em>.</p>\n\n\n\n<p><em>A recording of the presentation is available on <a href="https://www.youtube.com/watch?v=yd_rtwYaXps">YouTube</a>.</em></p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<h2 id="_how_should_we_write_good_code">How should I write good code?</h2>\n\n\n\n<p>Something that I’ve been thinking about a lot recently, when reflecting on the body of my own work, is a common subtitle, <em>how should I write good code?</em> Given nobody actively seeks to write&nbsp;<em>bad</em>&nbsp;code, this leads to the question; <em>how do you know when you’ve written good Go code?</em></p>\n\n\n\n<p>If there’s a continuum between good and bad, how to do we know what the good parts are? What are its properties, its attributes, its hallmarks, its patterns, and its idioms?</p>\n\n\n\n<h2 id="_idiomatic_go">Idiomatic Go</h2>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="640" height="480" src="https://dave.cheney.net/wp-content/uploads/2020/02/1011226.jpg" alt="" class="wp-image-3939" srcset="https://dave.cheney.net/wp-content/uploads/2020/02/1011226.jpg 640w, https://dave.cheney.net/wp-content/uploads/2020/02/1011226-300x225.jpg 300w, https://dave.cheney.net/wp-content/uploads/2020/02/1011226-624x468.jpg 624w" sizes="(max-width: 640px) 100vw, 640px" /></figure>\n\n\n\n<p>Which brings me to idiomatic Go. To say that something is idiomatic is to say that it follows the style of the time. If something is not idiomatic, it is not following the prevailing style. It is unfashionable.</p>\n\n\n\n<p>More importantly, to say to someone that their code is not idiomatic does not explain&nbsp;<em>why</em>&nbsp;it&#8217;s not idiomatic. Why is this? Like all truths, the answer is found in the dictionary.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>idiom (noun): a group of words established by usage as having a meaning not deducible from those of the individual words.</p></blockquote>\n\n\n\n<p>Idioms are hallmarks of shared values. Idiomatic Go is not something you learn from a book, it’s something that you acquire by being part of a community. </p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="750" height="567" src="https://dave.cheney.net/wp-content/uploads/2020/02/mean-girls-you-cant-sit-with-us-main.jpg" alt="" class="wp-image-3940" srcset="https://dave.cheney.net/wp-content/uploads/2020/02/mean-girls-you-cant-sit-with-us-main.jpg 750w, https://dave.cheney.net/wp-content/uploads/2020/02/mean-girls-you-cant-sit-with-us-main-300x227.jpg 300w, https://dave.cheney.net/wp-content/uploads/2020/02/mean-girls-you-cant-sit-with-us-main-624x472.jpg 624w" sizes="(max-width: 750px) 100vw, 750px" /></figure>\n\n\n\n<p>My concern with the mantra of idiomatic Go is, in many ways, it can be exclusionary. It’s saying &#8220;you can’t sit with us.” After all, isn’t that what we mean when critique of someone’s work as non-idiomatic? They didn’t do It right. It doesn’t look right. It doesn’t follow the style of time.</p>\n\n\n\n<p>I offer that idiomatic Go is not a suitable mechanism for teaching how to write good Go code because it is defined, fundamentally, by telling someone they did it wrong. Wouldn’t it be better if the advice we gave didn’t alienate the author right at the point they were most willing to accept it?</p>\n\n\n\n<h2 id="_proverbs">Proverbs</h2>\n\n\n\n<p>Stepping away problematic idioms, what other cultural artefacts do Gophers have? Perhaps we can turn to Rob Pike’s wonderful <a href="http://go-proverbs.github.io">Go Proverbs</a>. Are these suitable teaching tools? Will these tell newcomers how to write good Go code?</p>\n\n\n\n<p>In general, I don’t think so. This is not to dismiss Pike’s work, it is just that the Go Proverbs, like Segoe Kensaku&#8217;s original, are observations, not statements of value. Again, the dictionary comes to the rescue:</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>proverb (noun): a short, well-known pithy saying, stating a general truth or piece of advice.</p></blockquote>\n\n\n\n<p>The goal of the Go Proverbs are to reveal a deeper truth about the design of the language, but how useful is advice like the <em>empty interface says nothing</em> to a novice from a language that doesn’t have structural typing?</p>\n\n\n\n<p>It&#8217;s important to recognise that, in a growing community, at any time the people learning Go far outnumber those who claim to have mastered the language. Thus proverbs are perhaps not the best teaching tool in this scenario.</p>\n\n\n\n<h2 id="_engineering_values">Engineering Values</h2>\n\n\n\n<p>Dan Luu found <a href="https://danluu.com/microsoft-culture/">an old presentation</a> by Mark Lucovsky about the engineering culture of the windows team around the windows NT-windows 2000 timeframe. The reason I mention it is Lukovsky’s description of a culture as a common way of evaluating designs and making tradeoffs.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="720" height="540" src="https://dave.cheney.net/wp-content/uploads/2020/02/Lucovsky.001.jpeg" alt="" class="wp-image-3944" srcset="https://dave.cheney.net/wp-content/uploads/2020/02/Lucovsky.001.jpeg 720w, https://dave.cheney.net/wp-content/uploads/2020/02/Lucovsky.001-300x225.jpeg 300w, https://dave.cheney.net/wp-content/uploads/2020/02/Lucovsky.001-624x468.jpeg 624w" sizes="(max-width: 720px) 100vw, 720px" /></figure>\n\n\n\n<p>There are many ways of discussing culture, but with respect to an engineering culture Lucovsky’s description is apt. The central idea is <em>values guide decisions in an unknown design space</em>. The values of the NT team were; portability, reliability, security, and extensibility. Engineering values are, crudely translated, the way things are done around here.</p>\n\n\n\n<h2 id="_gos_values">Go&#8217;s values</h2>\n\n\n\n<p>What are the explicit values of Go? What are the core beliefs or philosophy that define the way a Go programmer interprets the world? How are they promulgated? How are they taught? How are they enforced? How do they change over time?</p>\n\n\n\n<p>How will you, as a newly minted Go programmer, inculcate the engineering values of Go? Or, how will you, a seasoned Go professional promulgate your values to a future generations? And just so we&#8217;re clear, this process of knowledge transfer is not optional. Without new blood and new ideas, our community become myopic and wither.</p>\n\n\n\n<h3 id="_other_languages_values">The values of other languages</h3>\n\n\n\n<p>To set the scene for what I’m getting at we can look to other languages we see examples of their engineering values.</p>\n\n\n\n<p>For example, C++ (and by extension Rust) believe that a programmer <em>should not have to pay for a feature they do not use</em>. If a program does not use some computationally expensive feature of the language, then it shouldn’t be forced to shoulder the cost of that feature. This value extends from the language, to its standard library, and is used as a yardstick for judging the design of all code written in C++.</p>\n\n\n\n<p>In Java, and Ruby, and Smalltalk, the core value that <em>everything is an object</em> drives the design of programs around message passing, information hiding, and polymorphism. Designs that shoehorn a procedural style, or even a functional style, into these languages are considered to be wrong&#8211;or as Gophers would say, non idiomatic.</p>\n\n\n\n<p>Turning to our own community, what are the engineering values that bind Go programmers? Discourse in our community is often fractious, so deriving a set of values from first principles would be a formidable challenge. Consensus is critical, but exponentially more difficult as the number of contributors to the discussion increases. But what if someone had done the hard work for us.</p>\n\n\n\n<h2 id="_the_zen_of_python_go">The Zen of <s>Python</s> Go</h2>\n\n\n\n<p>Several decades ago Tim Peters sat down and penned <em><a href="https://www.python.org/dev/peps/pep-0020/">PEP-20</a></em>, the Zen of Python. Peters’ attempted to document the engineering values that he saw Guido van Rossum apply in his role as BDFL for Python.</p>\n\n\n\n<p>For the remainder of this article, I&#8217;m going to look towards the Zen of Python and ask, is there anything that can inform the engineering values of Go programmers?</p>\n\n\n\n<h2 id="_a_good_package_starts_with_a_good_name">A good package starts with a good name</h2>\n\n\n\n<p>Let’s start with something spicy,</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>“Namespaces are one honking great idea–let’s do more of those!”</p><cite>The Zen of Python, Item 19</cite></blockquote>\n\n\n\n<p>This is pretty unequivocal, Python programmers should use namespaces. Lots of them.</p>\n\n\n\n<p>In Go parlance a namespace is a package. I doubt there is any question that grouping things into packages is good for design and potentially reuse. But there might be some confusion, especially if you’re coming with a decade of experience in another language, about the right way to do this.</p>\n\n\n\n<p>In Go each package should have a purpose, and the best way to know a package&#8217;s purpose is by its name—a noun. A package&#8217;s name describes what it provides. So too reinterpret Peters&#8217; words, every Go package should have a single purpose.</p>\n\n\n\n<p>This is not a new idea, <a href="https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common">I’ve been saying this a while</a>, but why should you do this rather than approach where packages are used for fine grained taxonomy? Why, because change. </p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Design is the art of arranging code to work today, and be changeable forever.&#8221;</p><cite>Sandi Metz</cite></blockquote>\n\n\n\n<p>Change is the name of the game we&#8217;re in. What we do as programmers is manage change. When we do that well we call it design, or architecture. When we do it badly we call it technical debt, or legacy code.</p>\n\n\n\n<p>If you are writing a program that works perfectly, one time, for one fixed set of inputs then nobody cares if the code is good or bad because ultimately the output of the program is all the business cares about.</p>\n\n\n\n<p>But this is <em>never</em> true. Software has bugs, requirements change, inputs change, and very few programs are written solely to be executed once, thus your program <em>will</em> change over time. Maybe it’s you who’ll be tasked with this, more likely it will be someone else, but someone has to change that code. Someone has to maintain that code. </p>\n\n\n\n<p>So, how can we make it easy to for programs to change? Interfaces everywhere? Make everything mockable? Pernicious dependency injection? Well, maybe, for some classes of programs, but not many, those techniques will be useful. However, for the majority of programs, designing something to be flexible up front is over engineering. </p>\n\n\n\n<p>What if, instead, we take a position that rather than enhancing components, we replace them. Then the best way to know when something needs to be replaced, is when it doesn’t do what it says on the tin.</p>\n\n\n\n<p>A good package starts with choosing a good name. Think of your package’s name as an elevator pitch, using just one word, to describe what it provides. When the name no longer matches the requirement, find a replacement.</p>\n\n\n\n<h2 id="_simple_is_better_than_complex">Simplicity matters</h2>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Simple is better than complex.&#8221;</p><cite>The Zen of Python, Item 3</cite></blockquote>\n\n\n\n<p>PEP-20 says simple is better than complex, I couldn’t agree more. A couple of years ago I made this tweet;</p>\n\n\n\n<figure class="wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter"><div class="wp-block-embed__wrapper">\n<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Most programming languages start out aiming to be simple, but end up just settling for being powerful.</p>&mdash; Dave Cheney (@davecheney) <a href="https://twitter.com/davecheney/status/539576755254611968?ref_src=twsrc%5Etfw">December 2, 2014</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>\n</div></figure>\n\n\n\n<p>My observation, at least at the time, was that I couldn’t think of a language introduced in my life time that didn’t purport to be simple. Each new language offered as a justification, and an enticement, their inherent simplicity. But as I researched, I found that simplicity was not a core value of the many of the languages considered Go&#8217;s contemporaries. <span id='easy-footnote-1-3936' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/02/23/the-zen-of-go#easy-footnote-bottom-1-3936' title='This part of the talk had several screenshots of the landing pages for the websites for &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://swift.org&quot;&gt;Swift&lt;/a&gt;, &lt;a href=&quot;https://elm-lang.org&quot;&gt;Elm&lt;/a&gt;, &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;, &lt;a href=&quot;https://www.python.org&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, highlighting how the language described itself.'><sup>1</sup></a></span> Maybe this is just a cheap shot, but could it be that either these languages aren’t simple, or they don’t <em>think</em> of themselves as being simple. They don’t consider simplicity to be a core value.</p>\n\n\n\n<p>Call me old fashioned, but when did being simple fall out of style? Why does the commercial software development industry continually, gleefully, forget this fundamental truth?</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>“There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.”</p><cite>C. A. R. Hoare, The Emperor&#8217;s Old Clothes, 1980&nbsp;Turing Award&nbsp;Lecture</cite></blockquote>\n\n\n\n<p>Simple does not mean easy, we know that. Often it is more work to make something simple to use, than easy to build.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Simplicity is prerequisite for reliability.”</p><cite>Edsger W Dijkstra, EWD498, 18 June 1975</cite></blockquote>\n\n\n\n<p>Why should we strive for simplicity? Why is important that Go programs be simple? Simple doesn’t mean crude, it means readable and maintainable. Simple doesn’t mean unsophisticated, it means reliable, relatable, and understandable.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>“Controlling complexity is the essence of computer programming.”</p><cite>Brian W. Kernighan, <em>Software Tools</em>&nbsp;(1976)</cite></blockquote>\n\n\n\n<p>Whether Python abides by its mantra of simplicity is a matter for debate, but Go holds simplicity as a core value. I think that we can all agree that when it comes to Go, simple code is preferable to clever code.</p>\n\n\n\n<h2 id="_avoid_package_level_state">Avoid package level state</h2>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Explicit is better than implicit.&#8221;</p><cite><em>The Zen of Python, Item </em>2</cite></blockquote>\n\n\n\n<p>This is a place where I think Peters&#8217; was more aspirational than factual. Many things in Python are not explicit; decorators, dunder methods, and so on. Without doubt they are powerful, there’s a reason those features exists. Each feature is something someone cared enough about to do the work to implement it, especially the complicated ones. But heavy use of those features makes is harder for the reader to predict the cost of an operation.</p>\n\n\n\n<p>The good news is we have a choice, as Go programmers, to choose to make our code explicit. Explicit could mean many things, perhaps you may be thinking explicit is just a nice way of saying bureaucratic and long winded, but that’s a superficial interpretation. It’s a misnomer to focus only on the syntax on the page, to fret about line lengths and DRYing up expressions. The more valuable, in my opinon, place to be explicit are to do with coupling and with state.</p>\n\n\n\n<p>Coupling is a measure of the amount one thing depends on another. If two things are tightly coupled, they move together. An action that affects one is directly reflected in another. Imagine a train, each carriage joined&#8211;ironically the correct word is coupled&#8211;together; where the engine goes, the carriages follow.</p>\n\n\n\n<p>Another way to describe coupling is the word cohesion. Cohesion measures how well two things naturally belong together. We talk about a cohesive argument, or a cohesive team; all their parts fit together as if they were designed that way.</p>\n\n\n\n<p>Why does coupling matter? Because just like trains, when you need to change a piece of code, all the code that is tightly coupled to it must change. A prime example, someone release a new version of their API and now your code doesn’t compile.</p>\n\n\n\n<p>APIs are an unavoidable source of coupling but there are more insidious forms of coupling. Clearly everyone knows that if an API’s signature changes the data passing into and out of that call changes. It’s right there in the signature of the function; I take values of these types and return values of other types. But what if the API passed data another way? What if every time you called this API the result was based on the previous time you called that API even though you didn’t change your parameters.</p>\n\n\n\n<p>This is state, and management of state is <em>the</em> problem in computer science.</p>\n\n\n\n<pre class="wp-block-code"><code>package counter\n\nvar count int\n\nfunc Increment(n int) int {\n        count += n\n        return count\n}</code></pre>\n\n\n\n<p>Suppose we have this simple <code>counter</code> package. You can call <code>Increment</code> to increment the counter, you can even get the value back if you <code>Increment</code> with a value of zero.</p>\n\n\n\n<p>Suppose you had to test this code, how would you reset the counter after each test? Suppose you wanted to run those tests in parallel, could you do it? Now suppose that you wanted to count more than one thing per program, could you do it?</p>\n\n\n\n<p>No, of course not. Clearly the answer is to encapsulate the <code>count</code> variable in a type.</p>\n\n\n\n<pre class="wp-block-code"><code>package counter\n\ntype Counter struct {\n        count int\n}\n\nfunc (c *Counter) Increment(n int) int {\n        c.count += n\n        return c.count\n}</code></pre>\n\n\n\n<p>Now imagine that this problem isn’t restricted to just counters, but your applications main business logic. Can you test it in isolation? Can you test it in parallel? Can you use more than one instance at a time? If the answer those question is <em>no</em>, the reason is package level state.</p>\n\n\n\n<p>Avoid package level state. Reduce coupling and spooky action at a distance by providing the dependencies a type needs as fields on that type rather than using package variables.</p>\n\n\n\n<h2 id="_plan_for_failure_not_success">Plan for failure, not success</h2>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Errors should never pass silently.&#8221;</p><cite><em>The Zen of Python, Item 1</em>0</cite></blockquote>\n\n\n\n<p>It’s been said of languages that favour exception handling follow the Samurai principle; <em>return victorious or not at all</em>. In exception based languages functions only return valid results. If they don’t succeed then control flow takes an entirely different path.</p>\n\n\n\n<p>Unchecked exceptions are clearly an unsafe model to program in. How can you possibly write code that is robust in the presence of errors when you don’t know which statements could throw an exception? Java tried to make exceptions safer by introducing the notion of a checked exception which, to the best of my knowledge, has not been repeated in another mainstream language. There are plenty of languages which use exceptions but they all, with the singular exception of Java, do so in the unchecked variety.</p>\n\n\n\n<p>Obviously Go chose a different path. Go programmers believe that robust programs are composed from pieces that handle the failure cases <em>before</em> they handle the happy path. In the space that Go was designed for; server programs, multi threaded programs, programs that handle input over the network, dealing with unexpected data, timeouts, connection failures and corrupted data must be front and centre of the programmer&#8217;s mind if they are to produce robust programs.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;I think that error handling should be explicit, this should be a core value of the language.&#8221;</p><cite>Peter Bourgon, <a href="https://changelog.com/gotime/91">GoTime #91</a></cite></blockquote>\n\n\n\n<p>I want to echo Peter’s assertion, as it was the impetus for this article. I think so much of the success of Go is due to the explicit way errors are handled. Go programmers thinks about the failure case first. We solve the &#8220;what if…​&#8221; case first. This leads to programs where failures are handled at the point of writing, rather than the point they occur in production.</p>\n\n\n\n<p>The verbosity of</p>\n\n\n\n<pre class="wp-block-code"><code>if err != nil {\n    return err\n}</code></pre>\n\n\n\n<p>is outweighed by the value of deliberately handling each failure condition at the point at which they occur. Key to this is the cultural value of handling each and every error explicitly.</p>\n\n\n\n<h2 id="_return_early_rather_than_nesting_deeply">Return early rather than nesting deeply</h2>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Flat is better than nested.&#8221;</p><cite>The Zen of Python, Item 5</cite></blockquote>\n\n\n\n<p>This is sage advice coming from a language where indentation is the primary form of control flow. How can we interpret this advice in terms of Go? <code>gofmt</code> controls the overall whitespace of a Go program so there’s not thing doing there.</p>\n\n\n\n<p>I wrote earlier about package names, and there is probably some advice here about avoiding a complicated package hierarchy. In my experience the more a programmer tries to subdivide and taxonimise their Go codebase the more they risk hitting the dead end that is package import loops.</p>\n\n\n\n<p>I think the best application of item 5&#8217;s advice is the control flow <em>within</em> a function. Simply put, avoid control flow that requires deep indentation.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Line of sight is a straight line along which an observer has unobstructed vision.&#8221;</p><cite>May Ryer, <a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88">Code: Align the happy path to the left edge</a></cite></blockquote>\n\n\n\n<p>Mat Ryer describes this idea as line of sight coding. Light of sight coding means things like:</p>\n\n\n\n<ul><li>Using guard clauses to return early if a precondition is not met.</li><li>Placing the successful return statement at the end of the function rather than inside a conditional block.</li><li>Reducing the overall indentation level of the function by extracting functions and methods.</li></ul>\n\n\n\n<p>Key to this advice is the thing that you care about, the thing that the function does, is never in danger of sliding out of sight to the right of your screen. This style has a bonus side effect that you’ll avoid pointless arguments about line lengths on your team.</p>\n\n\n\n<p>Every time you indent you add another precondition to the programmers stack, consuming one of their 7 ±2 short term memory slots. Rather than nesting deeply, keep the successful path of the function close to the left hand side of your screen.</p>\n\n\n\n<h2 id="_if_you_think_its_slow_prove_it_with_a_benchmark">If you think it’s slow, prove it with a benchmark</h2>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;In the face of ambiguity, refuse the temptation to guess.&#8221;</p><cite>The Zen of Python, Item 12</cite></blockquote>\n\n\n\n<p>Programming is based on mathematics and logic, two concepts which rarely involve the element of chance. But there are many things we, as programmers, guess about every day. What does this variable do? What does this parameter do? What happens if I pass <code>nil</code> here? What happens if I call <code>Register</code> twice? There’s actually a lot of guesswork in modern programming, especially when it comes to using libraries you didn’t write.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;APIs should be easy to use and hard to misuse.&#8221;</p><cite>Josh Bloch</cite></blockquote>\n\n\n\n<p>One of the best ways I know to help a programmer avoid having to guess is to, when building an API, <a href="http://sweng.the-davies.net/Home/rustys-api-design-manifesto">focus on the default use case</a>. Make it as easy as you can for the caller to do the most common thing. However, I’ve written and talked a lot about API design in the past, so instead my interpretation of item 12 is; <em>don’t guess about performance</em>.</p>\n\n\n\n<p>Despite how you may feel about Knuth&#8217;s advice, one of the drivers of Go’s success is its efficient execution. You can write efficient programs in Go and thus people <em>will</em> choose Go because of this. There are a lot of misconceptions about performance, so my request is, when you’re looking to performance tune your code or you’re facing some dogmatic advice like defer is slow, CGO is expensive, or always use atomics not mutexes, don’t guess.</p>\n\n\n\n<p>Don’t complicate your code because of outdated dogma, and, if you think something is slow, first prove it with a benchmark. Go has excellent benchmarking and profiling tools that come in the distribution for free. Use them to find your bottlenecks.</p>\n\n\n\n<h2 id="_goroutines">Before you launch a goroutine, know when it will stop</h2>\n\n\n\n<p>At this point I think I think I’ve mined the valuable points from PEP-20 and possibly stretched its reinterpretation beyond the point of good taste. I think that’s fine, because although this was a useful rhetorical device, ultimately we are talking about two different languages.</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;You type g o, a space, and then a function call. Three keystrokes, you can’t make it much shorter than that. Three keystrokes and you’ve just started a sub process.&#8221;</p><cite>Rob Pike, <a href="https://www.youtube.com/watch?v=rFejpH_tAHM">Simplicity is Complicated</a>, dotGo 2015</cite></blockquote>\n\n\n\n<p>The next two suggestions I’ll dedicate to goroutines. Goroutines are the signature feature of the language, our answer for first class concurrency. They are so easy to use, just put the word <code>go</code> in front of the statement and you’ve launched that function asynchronously. It’s so simple, no threads, no stack sizes, no thread pool executors, no ID’s, no tracking completion status.</p>\n\n\n\n<p>Goroutines are cheap. Because of the runtime’s ability to multiplex goroutines onto a small pool of threads (which you don’t have to manage), hundreds of thousands, millions of goroutines are easily accommodated. This opens up designs that would be not be practical under competing concurrency models like threads or evented callbacks.</p>\n\n\n\n<p>But as cheap as goroutines are, they’re not free. At a minimum there’s a few kilobytes for their stack, which, when you’re getting up into the 10^6 goroutines, does start to add up. This is not to say you shouldn’t use millions of goroutines if that is what the design calls for, but when you do, it&#8217;s critical that you keep track of them because 10^6 of anything can consume a non trivial amount of resources in aggregate.</p>\n\n\n\n<p>Goroutines are the key to resource ownership in Go. To be useful a goroutine has to do something, and that means it almost always holds reference to, or ownership of, a resource; a lock, a network connection, a buffer with data, the sending end of a channel. While that goroutine is alive, the lock is held, the network connection remains open, the buffer retained and the receivers of the channel will continue to wait for more data.</p>\n\n\n\n<p>The simplest way to free those resources is to tie them to the lifetime of the goroutine&#8211;when the goroutine exits, the resource has been freed. So while it&#8217;s near trivial to start a goroutine, before you write those three letters, g o and a space, make sure you have an answer to these questions:</p>\n\n\n\n<ul><li><strong>Under what condition will a goroutine stop?</strong> Go doesn’t have a way to tell a goroutine to exit. There is no stop or kill function, for good reason. If we cannot command a goroutine to stop, we must instead ask it, politely. Almost always this comes down to a channel operation. Range loops over a channel exit when the channel is closed. A channel will become selectable if it is closed. The signal from one goroutine to another is best expressed as a closed channel.</li><li><strong>What is required for that condition to arise?</strong> If channels are both the vehicle to communicate between goroutines and the mechanism for them to signal completion, the next question to the programmer becomes, who will close the channel, when will that happen?</li><li><strong>What signal will you use to know the goroutine has stopped?</strong> When you signal a goroutine to stop, that stopping will happen at some time in the future relative to the goroutine’s frame of reference. It might happen quickly in terms of human perception, but computers execute billions of instructions every second, and from the point of view of each goroutine, their execution of instructions is unsynchronised. The solution is often to use a channel to signal back or a waitgroup where a fan in approach is needed.</li></ul>\n\n\n\n<h2 id="_leave_concurrency_to_the_caller">Leave concurrency to the caller</h2>\n\n\n\n<p>It is likely that in any serious Go program you write there will be concurrency involved. This raises the problem, many of the libraries and code that we write fall into this a one goroutine per connection, or worker pattern. How will you manage the lifetime of those goroutines?</p>\n\n\n\n<p><code>net/http</code> is a prime example. Shutting down the server owning the listening socket is relatively straight forward, but what about a goroutines spawned from that accepting socket? <code>net/http</code> does provide a context object inside the request object which can be used to signal&#8211;to code that is listening&#8211;that the request should be canceled, thereby terminating the goroutine, however it is less clear how to know when all of these things have been done. It’s one thing to call <code>context.Cancel</code>, its another to know that the cancellation has completed.<span id='easy-footnote-2-3936' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/02/23/the-zen-of-go#easy-footnote-bottom-2-3936' title='I tend to pick on &lt;code&gt;net/http&lt;/code&gt; a lot, and this is not because it is bad, in fact it is the opposite, it is the most successful, oldest, most used API in the Go codebase. And because of that its design, evolution, and shortcoming have been thoroughly picked over. Think of this as flattery, not criticism.'><sup>2</sup></a></span></p>\n\n\n\n<p>The point I want to make about <code>net/http</code> is that its a counter example to good practice. Because each connection is handled by a goroutine spawned inside the <code>net/http.Server</code> type, the program, living outside the <code>net/http</code> package, does not have an ability to control the goroutines spawned for the accepting socket.</p>\n\n\n\n<p>This is an area of design that is still evolving, with efforts like go-kit&#8217;s <code>run.Group</code> and the Go team&#8217;s <a href="https://godoc.org/golang.org/x/sync/errgroup"><code>ErrGroup</code></a> which provide a framework to execute, cancel and wait on functions run asynchronously.</p>\n\n\n\n<p>The bigger design maxim here is for library writers, or anyone writing code that could be run asynchronously, leave the responsibility of starting to goroutine to your caller. Let the caller choose how they want to start, track, and wait on your functions execution.</p>\n\n\n\n<h2 id="_write_tests_to_lock_in_the_behaviour_of_your_packages_api">Write tests to lock in the behaviour of your package’s API</h2>\n\n\n\n<p>Perhaps you were hoping to read an article from me where I didn&#8217;t rant about testing. Sadly, today is not that day.</p>\n\n\n\n<p>Your tests are the contract about what your software does and does not do. Unit tests at the package level should lock in the behaviour of the package’s API. They describe, in code, what the package promises to do. If there is a unit test for each input permutation, you have defined the contract for what the code will do&nbsp;<em>in code</em>, not documentation.</p>\n\n\n\n<p>This is a contract you can assert as simply as typing&nbsp;<code>go test</code>. At any stage, you can&nbsp;<em>know</em>&nbsp;with a high degree of confidence, that the behaviour people relied on before your change continues to function after your change.</p>\n\n\n\n<p>Tests lock in api behaviour. Any change that adds, modifies or removes a public api must include changes to its tests.</p>\n\n\n\n<h2 id="_moderation_is_a_virtue">Moderation is a virtue</h2>\n\n\n\n<p>Go is a simple language, only 25 keywords. In some ways this makes the features that are built into the language stand out. Equally these are the features that the language sells itself on, lightweight concurrency, structural typing.</p>\n\n\n\n<p>I think all of us have experienced the confusion that comes from trying to use all of Go’s features at once. Who was so excited to use channels that they used them as much as they could, as often as they could? Personally for me I found the result was hard to test, fragile, and ultimately overcomplicated. Am I alone?</p>\n\n\n\n<p>I had the same experience with goroutines, attempting to break the work into tiny units I created a hard to manage hurd of Goroutines and ultimately missed the observation that most of my goroutines were always blocked waiting for their predecessor&#8211; the code was ultimately sequential and I had added a lot of complexity for little real world benefit. Who has experienced something like this?</p>\n\n\n\n<p>I had the same experience with embedding. Initially I mistook it for inheritance. Then later I recreated the fragile base class problem by composing complicated types, which already had several responsibilities, into more complicated mega types.</p>\n\n\n\n<p>This is potentially the least actionable piece of advice, but one I think is important enough to mention. The advice is always the same, all things in moderation, and Go’s features are no exception. If you can, don’t reach for a goroutine, or a channel, or embed a struct, anonymous functions, going overboard with packages, interfaces for everything, instead prefer simpler approach rather than the clever approach.</p>\n\n\n\n<h2 id="_maintainability_counts">Maintainability counts</h2>\n\n\n\n<p>I want to close with one final item from PEP-20,</p>\n\n\n\n<blockquote class="wp-block-quote is-style-large"><p>&#8220;Readability Counts.&#8221;</p><cite>The Zen of Python, Item 7</cite></blockquote>\n\n\n\n<p>So much has been said, about the importance of readability, not just in Go, but all programming languages. People like me who stand on stages advocating for Go use words like simplicity, readability, clarity, productivity, but ultimately they are all synonyms for one word&#8211;<em>maintainability</em>.</p>\n\n\n\n<p>The real goal is to write maintainable code. Code that can live on after the original author. Code that can exist not just as a point in time investment, but as a foundation for future value. It&#8217;s not that readability doesn’t matter, maintainability matters&nbsp;<em>more</em>.</p>\n\n\n\n<p>Go is not a language that optimises for clever one liners. Go is not a language which optimises for the least number of lines in a program. We’re not optimising for the size of the source code on disk, nor how long it takes to type the program into an editor. Rather, we want to optimise our code to be clear to the reader. Because its the reader who’s going to have to maintain this code.</p>\n\n\n\n<p>If you’re writing a program for yourself, maybe it only has to run once, or you’re the only person who’ll ever see it, then do what ever works for you. But if this is a piece of software that more than one person will contribute to, or that will be used by people over a long enough time that requirements, features, or the environment it runs in may change, then your goal must be for your program to be maintainable. If software cannot be maintained, then it will be rewritten; and that could be the last time your company will invest in Go.</p>\n\n\n\n<p>Can the thing you worked hard to build be maintained after you’re gone? What can you do today to make it easier for someone to maintain your code tomorrow?</p>\n\n\n\n<h4 class="has-text-align-center"><a href="https://the-zen-of-go.netlify.com">the-zen-of-go.netlify.com</a></h4>\n	8ae716e4d082c85b3da9ad31be4a60fb603f0c92	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.225222	0			'-20':983,1514,3484,4831 '1':1622 '10':2512,3704,3746 '12':3180,3329 '18':1778 '19':1070 '1975':1780 '1976':1829 '1980':1742 '2':1556,1885,3129 '2000':571 '2014':1557 '2015':3555 '2020':13 '25':4556 '3':1512 '5':2862,2960 '6':3705,3747 '7':3128,4839 '91':2736 'a':24,31,53,66,102,206,215,239,251,322,451,459,475,496,499,514,583,586,671,699,714,722,788,796,803,842,883,888,929,938,1039,1044,1086,1089,1121,1141,1149,1157,1159,1177,1183,1191,1275,1427,1461,1467,1498,1526,1572,1591,1609,1627,1658,1693,1734,1839,1848,1888,1919,1968,1993,2005,2010,2050,2080,2120,2124,2152,2167,2172,2332,2396,2453,2478,2484,2601,2645,2727,2869,2896,2921,2930,2968,2983,3028,3046,3096,3163,3236,3275,3315,3375,3437,3462,3505,3521,3525,3546,3635,3686,3690,3752,3772,3790,3792,3794,3797,3805,3871,3882,3897,3904,3908,3926,3942,3948,3956,3976,4034,4094,4100,4103,4146,4165,4183,4193,4264,4276,4330,4463,4487,4505,4537,4548,4552,4666,4699,4792,4795,4799,4909,4916,4935,4946,4957,5014,5047,5067 'abides':1832 'ability':3630,4294 'about':52,478,557,1128,1310,1931,2023,2119,2773,2909,2919,3071,3106,3206,3317,3334,3341,3379,3513,4182,4259,4412,4425,4845 'accept':369 'accepting':4188,4302 'accommodated':3655 'acquire':246 'action':2070,2476 'actionable':4755 'actively':77 'actually':3235 'add':3117,3710 'added':4698 'adds':4533 'advice':352,465,488,2866,2885,2917,2962,3064,3344,3400,4758,4769 'advocating':4865 'affects':2072 'after':278,2349,4522,4898,5126 'again':442 'aggregate':3759 'ago':975,1530 'agree':1524,1857 'aiming':1540 'alienate':357 'align':2996 'alive':3811 'all':195,279,849,1306,1856,2127,2156,2532,2629,4230,4590,4603,4774,4855,4879 'almost':3782,3936 'alone':4648 'along':2986 'already':4741 'also':17 'although':3502 'always':3409,3783,3937,4684,4771 'am':4646 'ambiguity':3169 'amount':2054,3755 'an':551,606,622,866,1477,1594,1960,2069,2187,2205,2551,2559,2588,2988,3285,3888,4293,4306,4403,4982 'and':106,128,592,636,725,742,749,782,838,856,858,878,980,1025,1106,1143,1223,1323,1593,1710,1803,1814,1909,1999,2026,2045,2178,2214,2236,2282,2474,2696,2702,2842,2912,2935,3059,3186,3260,3313,3364,3426,3443,3485,3523,3541,3595,3778,3824,3881,3996,4073,4138,4322,4335,4379,4430,4643,4673,4695,4778,5103 'anonymous':4801 'another':1126,2059,2078,2099,2249,2616,3118,3971,4245 'answer':198,2388,2457,3574,3889 'any':518,1095,4119,4499,4530 'anyone':4351 'anything':1029,3749 'api':2177,2206,2246,2258,2270,3286,3318,4396,4449,4528,4539 'apis':2185,3254 'application':2957 'applications':2429 'apply':1001 'approach':1201,4106,4813,4818 'apt':613 'architecture':1257 'are':117,119,226,394,436,472,536,596,640,646,654,661,678,682,686,894,912,1054,1204,1273,1327,1688,1706,1722,1903,1915,2040,2063,2186,2194,2557,2620,2654,2711,2768,2791,3199,3374,3511,3566,3580,3623,3653,3680,3761,3988,4422,4566,4575,4782,4878 'area':4307 'aren':1638 'argument':2122 'arguments':3105 'arise':3985 'around':565,648,873 'arranging':1218 'art':1216 'artefacts':379 'article':6,1014,2751,4404 'as':213,292,585,698,841,900,948,1005,1242,1476,1590,1600,1648,1847,1970,2132,2487,2744,3009,3203,3295,3297,3676,3678,3975,4492,4494,4621,4623,4626,4628,4908,4915 'ask':1026,3933 'aspirational':1896 'assert':4491 'assertion':2743 'asynchronously':3601,4340,4358 'at':361,517,765,1560,1562,2452,2477,2531,2793,2825,2828,3037,3469,3685,4042,4436,4498,4608 'atomics':3411 'attempted':989 'attempting':4656 'attributes':123 'author':359,4901 'available':37 'avoid':1871,2468,2972,3103,3277 'avoiding':2920 'award':1744 'away':373 'back':2327,4098 'bad':81,107,1297 'badly':1262 'base':4733 'based':2262,2535,3183 'bdfl':1006 'be':267,348,819,897,937,1112,1224,1331,1347,1355,1404,1415,1447,1542,1584,1633,1657,1793,1988,2038,2700,2722,2726,3256,3662,3664,3770,4127,4202,4215,4356,4992,5062,5086,5091,5096,5101,5106,5124 'because':333,1211,1298,2143,3370,3422,3501,3625,3745,4270,4997 'become':747,3959 'becomes':4010 'been':50,1188,2515,2613,3861,4235,4843 'before':2663,3459,3873,4516 'behaviour':4391,4444,4512,4529 'being':248,1550,1649,1668 'beliefs':664 'believe':786,2650 'belong':2115 'benchmark':3164,3438 'benchmarking':3442 'benefit':4707 'best':540,1145,1439,2607,2956,3269,3973 'better':349,1504,1518,1877,2854 'between':104,3994 'beyond':3490 'bigger':4342 'billions':4068 'bind':917 'bloch':3265 'block.reducing':3048 'blocked':4685 'blood':741 'body':60 'bonus':3097 'book':240 'both':3989 'bottlenecks':3458 'bourgon':2734 'break':4658 'brian':1824 'brings':134 'buffer':3798,3822 'bugs':1318 'build':1768,5123 'building':3284 'built':4567 'bureaucratic':1998 'business':1308,2431 'but':484,602,944,957,1109,1193,1311,1358,1398,1544,1599,1630,1665,1843,1943,2002,2192,2242,2427,2627,3197,3675,3732,4065,4180,4759,4854,4875,4914,5043 'by':211,247,338,554,783,1154,1833,2480,2596,2816,3056,4275,4736,5064 'c':781,853,1733,2406 'c.count':2412,2415 'call':1253,1264,1661,2218,2315,3230,3527,4242 'callbacks':3674 'called':2256,2268 'caller':3302,4113,4368,4371 'calls':3730 'can':266,273,385,767,1031,1373,1855,2314,2322,2433,2439,2445,2566,2881,3299,3358,3531,3750,4201,4490,4502,4787,4895,4904,5116,5131 'cancel':4334 'canceled':4216 'cancellation':4250 'cannot':3924,5095 'care':3070 'cared':1929 'cares':1290,1309 'carriage':2083 'carriages':2097 'case':2776,2783,3292 'cases':2662 'central':615 'centre':2703 'cgo':3405 'challenge':940 'chance':3196 'change':692,1212,1229,1246,1320,1322,1338,1362,1382,2151,2166,2276,4518,4524,4531,5081 'changeable':1225 'changes':2209,2219,4542 'channel':3806,3829,3943,3949,3953,3957,4015,4095,4796 'channel.what':3978 'channels':3987,4616 'cheap':1628,3624,3677 'checked':2602 'cheney':1553 'choice':1969 'choose':1974,3368,4372 'choosing':1466 'chose':2644 'claim':528 'clarity':4873 'class':3577,4734 'classes':1395 'clauses':3023 'clear':730,4225,4993 'clearly':2200,2386,2558 'clever':1869,4817,4940 'close':3145,4013,4824 'closed':3955,3964,3977 'clothes':1741 'code':45,74,82,98,179,332,408,850,1219,1270,1293,1364,1370,1865,1870,1978,2155,2158,2181,2342,2570,2995,3393,3421,4139,4207,4353,4453,4478,4482,4691,4892,4893,4902,4969,4990,5009,5144 'codebase':2939 'coding':3013,3017 'cohesion':2107,2108 'cohesive':2121,2125 'come':3447 'comes':445,1861,3246,3939,4598 'coming':1119,2867 'command':3925 'commercial':1677 'common':67,587,3307 'communicate':3993 'community':252,516,746,910,923 'company':5111 'competing':3667 'compile':2184 'completed.2':4252 'completion':3620,4003 'complex':1506,1520 'complexity':1817,4702 'complicate':3419 'complicated':1719,1941,2922,3553,4738,4747 'components':1433 'composed':2655 'composing':4737 'computationally':809 'computer':1822,2290 'computers':4066 'concepts':3189 'concern':254 'concurrency':3578,3668,4110,4128,4585 'condition':2824,3895,3983 'conditional':3047 'confidence':4509 'confusion':1114,4596 'connection':2694,3796,3818,4150,4272 'consensus':941 'consider':1654 'considered':895,1618 'constructing':1692 'consume':3751 'consuming':3124 'contemporaries':1621 'context':4194 'context.cancel':4243 'continually':1681 'continue':3831 'continues':4519 'continuum':103 'contract':4424,4474,4488 'contribute':5057 'contributors':952 'control':2548,2878,2965,2973,4296 'controlling':1816 'controls':2891 'core':663,861,1610,1659,1849,2728 'correct':2087 'corrupted':2697 'cost':824,1958 'could':1631,1981,2361,2378,2586,4355,4625,4630,5105 'couldn':1522,1568 'count':2295,2302,2305,2371,2393,2403 'counter':2293,2311,2320,2348,2399,2401,2407,4265 'counters':2426 'counts':4820,4833 'couple':1527 'coupled':2065,2090,2162 'coupling':2044,2048,2103,2141,2191,2199,2473 'course':2384 'created':4665 'critical':943,3738 'critique':287 'crude':1799 'crudely':641 'cultural':378,2837 'culture':560,584,601,608 'd':22 'dan':548 'danger':3081 'data':2211,2248,2692,2698,3800,3836 'dave':1552 'davecheney':1554 'day':3208,4419 'dead':2946 'dealing':2689 'debate':1842 'debt':1267 'decade':1122 'decades':974 'december':1555 'decisions':620 'decorators':1906 'dedicate':3562 'deducible':218 'deep':2977 'deeper':476 'deeply':2851,3137 'default':3290 'defer':3402 'deficiencies':1709,1725 'define':668 'defined':336,4472 'degree':4507 'deliberately':2820 'dependencies':2483 'dependency':1389 'depends':2057 'derived':8 'deriving':928 'describe':1485,2102,4451 'describes':1163,3006 'description':581,611 'design':480,624,847,870,1105,1213,1255,1695,3319,3729,4309,4343 'designed':2136,2675 'designing':1412 'designs':591,880,3659 'despite':3336 'development':1679 'device':3508 'dictionary':203,444 'did':342,1667 'didn':297,355,1580,2274,3251,4409 'different':2553,2646,3515 'difficult':947,1732 'dijkstra':1776 'directly':2075 'discourse':920 'discussing':600 'discussion':955 'disk':4971 'dismiss':420 'distance':2479 'distribution':3450 'do':89,110,299,380,690,799,1061,1133,1197,1241,1249,1260,1454,1933,2042,2363,2380,2636,3213,3218,3304,3735,3776,4433,4459,4480,5037,5133 'document':991 'documentation':4484 'does':183,805,1675,1747,2140,3077,3210,3215,3707,4191,4290,4429,4431 'doesn':303,308,502,1452,1796,1806,2182,3901,4926 'dogma':3425 'dogmatic':3399 'doing':2904 'don':412,1643,1652,2544,2581,3331,3414,3417,3642,4788 'done':647,962,4236 'dotgo':3554 'doubt':1092,1913 'down':979,3940,4169 'drivers':3348 'drives':868 'drying':2027 'due':2762 'dunder':1907 'each':1137,1586,1924,2082,2350,2822,2841,4080,4271,4467 'earlier':2908 'early':2847,3026 'easier':5138 'easily':3654 'easy':1377,1750,1766,3257,3296,3582 'echo':2740 'edge':3003 'editor':4983 'edsger':1774 'effect':3099 'efficient':3355,3360 'efforts':4315 'either':1635 'element':3194 'elevator':1478 'else':1357 'embed':4798 'embedding':4720 'emperor':1738 'empty':491 'encapsulate':2391 'end':1545,2947,3039,3803 'enforced':688 'engine':2094 'engineering':546,559,607,638,706,777,914,993,1034,1421 'enhancing':1432 'enough':1930,4765,5069 'enticement':1595 'entirely':2552 'environment':5076 'equally':4573 'err':2810,2813 'errgroup':4327 'error':2719,2844 'errors':2502,2578,2767 'especially':1115,1939,3243 'essence':1820 'established':210 'evaluating':590 'even':887,2271,2323 'evented':3673 'ever':5033,5039 'every':1172,2253,2843,3112,3207,4071 'everyone':2201 'everything':864,1386,4809 'everywhere':1384 'evolving':4313 'ewd498':1777 'example':780,2169,4167,4266 'examples':774 'excellent':3441 'exception':2521,2534,2589,2603,2633,4784 'exceptions':2556,2594,2626 'excited':4613 'exclusionary':268 'execute':4067,4333 'executed':1332 'execution':3356,4083,4384 'executors':3614 'exist':4905 'exists':1923 'exit':3911,3950 'exits':3857 'expensive':810,3407 'experience':1124,2927,4653,4718 'experienced':4594,4710 'explain':185 'explicit':656,1875,1905,1979,1980,1990,2039,2723,2765 'explicitly':2845 'exponentially':945 'expressed':3974 'expressions':2029 'extends':830 'extensibility':637 'extension':784 'extracting':3057 'face':3167 'facing':3397 'factual':1898 'failure':2499,2661,2775,2823 'failures':2695,2790 'fall':1670,4143 'fan':4104 'far':524,1730 'fashioned':1664 'favour':2520 'feature':797,811,827,1925,3569 'features':1922,1948,4564,4577,4607,4781,5073 'feel':3340 'few':1325,3691 'fields':2488 'final':4827 'find':1497,3456 'fine':1207,3500 'first':934,1727,2777,2784,3433,3576 'fit':2130 'fixed':1284 'flat':2852 'flexible':1416 'flow':2549,2879,2966,2974 'focus':2013,3287 'follow':310,2098,2523 'following':164 'follows':150 'for':325,760,779,795,844,966,1007,1009,1104,1206,1282,1379,1393,1407,1549,1772,1785,1841,1952,2498,2676,2749,3300,3451,3575,3693,3731,3834,3919,3981,3999,4300,4347,4466,4475,4632,4687,4703,4725,4791,4808,4866,4881,4918,4939,4950,4963,5016,5041,5087,5139 'forced':820 'forever':1226 'forget':1683 'form':2876 'formidable':939 'forms':2197 'forward':4179 'found':200,550,1604,4635 'foundation':4917 'fractious':926 'fragile':4642,4732 'frame':4053 'framework':4331 'free':3452,3684,3841 'freed':3862 'fret':2022 'from':9,219,238,498,831,933,2656,2868,3482,3967,4074,4186,4405,4599,4829 'front':1418,2701,3591 'func':2297,2405 'function':2229,2969,3042,3055,3076,3144,3526,3600,3918,4521 'functional':889 'functions':2537,3058,4338,4383,4802 'fundamental':1685 'fundamentally':337 'future':723,4047,4919 'g':3519,3879 'game':1235 'gave':354 'general':410,460 'generations':724 'get':2324 'getting':764,3700 'given':75 'gleefully':1682 'go':4,97,132,138,232,260,319,331,392,407,429,470,523,650,659,672,702,709,716,918,972,1037,1084,1136,1173,1619,1791,1844,1863,1971,2643,2648,2673,2760,2770,2889,2897,2938,3350,3363,3369,3439,3589,3768,3900,4121,4318,4324,4496,4550,4605,4779,4853,4867,4932,4943,5115 'go-kit':4317 'goal':467,4887,5084 'goes':2095 'gofmt':2890 'going':1017,4803,5003 'gone':5129 'good':44,73,96,105,115,330,406,1040,1045,1103,1295,1462,1468,1963,3494,3920,4268 'gophercon':11 'gophers':381,901 'goroutine':3463,3773,3809,3853,3856,3872,3898,3909,3927,3969,4028,4035,4051,4081,4148,4220,4277,4365,4793 'goroutines':3564,3565,3622,3633,3652,3679,3706,3723,3760,3995,4162,4184,4298,4655,4672,4682 'gotime':2735 'grained':1208 'great':1057 'group':207 'grouping':1098 'growing':515 'guard':3022 'guess':3174,3205,3280,3333,3416 'guesswork':3239 'guide':619 'guido':998 'had':961,2338,4650,4697,4715,4742 'hallmarks':125,227 'hand':3149 'handle':2659,2665,2684 'handled':2769,2792,4274 'handling':2522,2720,2821,2840 'happen':4019,4041,4058 'happens':3220,3227 'happy':2667,2998 'hard':964,3261,4639,4667,5121 'harder':1951 'has':1317,1360,1366,2611,2990,3095,3440,3774,3860,4029,4251,4709,4842,5021 'have':382,504,530,792,1140,1176,1967,2308,3644,3887,3903,4234,4292,4471,4593,5005 'having':214,3278 'he':996 'head':27 'heavy':1944 'held':3815 'help':3274 'here':649,2918,3225,4345 'hiding':877 'hierarchy':2924 'high':4506 'his':1003 'hitting':2944 'hoare':1736 'holds':1845,3784 'honking':1056 'hoping':4400 'how':40,69,88,108,327,403,485,677,681,685,689,695,711,1372,2110,2343,2565,2880,3337,4154,4226,4373,4973 'however':1406,3309,4221 'human':4063 'hundreds':3647 'hurd':4670 'i':42,48,71,315,411,575,762,1015,1091,1186,1521,1531,1567,1601,1603,1851,1891,2230,2716,2737,2752,2906,2953,3222,3229,3271,3310,3472,3474,3476,3496,3560,4255,4408,4588,4634,4647,4649,4664,4696,4714,4722,4729,4761,4821 'id':3616 'idea':616,1058,1185,3008 'ideas':744 'idiom':204 'idiomatic':131,137,144,160,182,190,231,259,295,318,905 'idioms':130,225,375 'if':20,99,156,350,802,959,1116,1271,1291,1423,2060,2133,2204,2244,2252,2328,2455,2542,2709,2782,2809,3027,3154,3221,3228,3427,3724,3922,3961,3986,4460,4785,5010,5044,5093 'imagine':2079,2417 'impetus':2748 'implement':1937 'implicit':1879 'import':2951 'importance':4847 'important':509,1789,4764 'importantly':172 'in':201,262,409,513,543,621,852,854,921,1002,1083,1125,1135,1238,1575,1901,2033,2077,2224,2289,2359,2395,2437,2443,2533,2564,2574,2615,2638,2669,2804,2886,2925,3080,3165,3240,3320,3362,3448,3590,3758,3767,4045,4060,4105,4118,4389,4442,4452,4481,4527,4558,4776,4852,4911,4956,5079,5114 'include':4541 'increases':956 'increment':2298,2316,2318,2330,2408 'inculcate':704 'indent':3115 'indentation':2872,2978,3051 'individual':223 'industry':1680 'inform':1032 'information':876 'inherent':1597 'inheritance':4726 'initially':4721 'injection':1390 'input':2685,4468 'inputs':1287,1321 'inside':3045,4196,4279 'insidious':2196 'instance':2451 'instead':1424,3324,3932,4810 'instructions':4070,4085 'int':2296,2300,2301,2404,2410,2411 'interface':492 'interfaces':1383,4807 'interpret':2883 'interpretation':2007,3326 'interprets':674 'into':891,1100,2213,3702,4144,4568,4661,4745,4981 'introduced':1574 'introducing':2597 'invest':5113 'investment':4913 'involve':3192 'involved':4129 'ironically':2085 'is':36,65,143,145,158,162,169,180,192,199,233,261,320,335,417,425,487,578,612,617,736,839,865,924,942,1027,1072,1088,1094,1102,1153,1181,1214,1230,1244,1294,1305,1313,1419,1449,1503,1517,1625,1698,1714,1729,1756,1770,1788,1818,1838,1866,1876,1887,1926,1950,1965,1991,2049,2074,2089,2104,2160,2280,2286,2389,2460,2464,2572,2761,2814,2835,2853,2864,2873,2914,2949,2963,2982,3030,3065,3078,3182,3281,3330,3353,3384,3403,3406,3431,3552,3713,3726,3810,3814,3844,3913,3954,3963,3972,3979,4086,4090,4107,4115,4164,4176,4209,4223,4261,4273,4305,4311,4346,4416,4462,4486,4547,4551,4751,4763,4770,4888,4933,4944,5046 'isn':280,2421 'isolation':2438 'israel':12 'it':15,149,161,168,187,241,265,269,300,302,307,334,343,347,370,424,507,577,816,1165,1254,1261,1265,1342,1353,1376,1451,1456,1487,1632,1701,1717,1755,1800,1810,1860,1938,2008,2164,2220,2364,2381,2436,2442,2513,2745,3157,3161,3245,3294,3435,3466,3534,3602,3736,3781,3865,3934,3962,4056,4114,4222,4237,4724,4921,4975,5019,5035,5077,5099,5137 'item':1069,1511,1884,2511,2861,2959,3179,3328,4828,4838 'its':120,122,124,126,129,835,1155,1834,3354,3488,4244,4263,4544,4998 'itself':4582 'java':855,2590,2635 'joined':2084 'josh':3264 'judging':845 'june':1779 'just':426,726,1481,1547,1626,1992,2144,2425,3544,3585,4851,4907 'justification':1592 'keep':3138,3741 'kensaku':433 'kernighan':1826 'key':2832,3061,3763 'keystrokes':3529,3540 'keywords':4557 'kill':3917 'kilobytes':3692 'kit':4319 'know':91,112,1148,1442,1752,2583,3272,3464,4026,4228,4247,4503 'knowledge':734,2610 'known':455 'knows':2202 'knuth':3342 'language':483,500,533,814,833,1127,1573,1588,2618,2732,2870,3572,4554,4570,4580,4936,4947 'languages':755,771,893,1537,1617,1637,2518,2536,2623,3516,4857 'last':5108 'later':4728 'launch':3461 'launched':3598 'leads':84,2786 'learn':237 'learning':522 'least':1561,4754,4952 'leave':4109,4359 'lecture':1745 'left':3002,3148 'legacy':1269 'lengths':2025,3108 'less':4224 'let':1047,1059,4369 'letters':3878 'level':1873,2466,2470,3052,4439 'libraries':3249,4137 'library':837,4348 'life':1577 'lifetime':3850,4159 'light':3014 'lightweight':4584 'like':194,431,489,2145,3020,3401,3670,4316,4712,4859,4870 'likely':1352,4116 'line':2024,2979,2985,3010,3107 'liners':4942 'lines':4955 'listening':4174,4210 'little':4704 'live':4896 'living':4285 'll':1346,3102,3561,5032 'lock':3793,3813,4388,4441,4526 'logic':2432,3187 'long':19,2000,4974,5068 'longer':1493 'look':305,768,1019 'looking':3388 'loops':2952,3946 'lot':54,3237,3316,3376,4700 'lots':1080 'lucovsky':556,609 'lukovsky':579 'luu':549 'm':763,1016 'made':1532 'main':2430 'mainstream':2617 'maintain':1368,5007,5142 'maintainability':4819,4884,4929 'maintainable':1804,4891,5092 'maintained':5097,5125 'majority':1409 'make':1375,1385,1700,1716,1760,1976,2593,3293,3533,3884,4258,5136 'makes':1949,4562 'making':593 'manage':1245,3646,4157,4669 'management':2283 'mantra':257,1835 'many':263,597,1400,1614,1899,1983,3200,4134 'mark':555 'mastered':531 'mat':3004 'matches':1494 'mathematics':3185 'matter':1840,2142,4928 'matters':1501,4930 'maxim':4344 'may':1987,2993,3339,5080 'maybe':1341,1392,1623,5018 'me':135,1662,4406,4633,4860 'mean':285,1749,1798,1808,1982 'meaning':216 'means':1801,1811,3018,3780 'measure':2051 'measures':2109 'mechanism':324,3998 'mega':4748 'memory':3132 'mention':576,4767 'message':874 'met.placing':3032 'method':1728 'methods':1908,3060 'metz':1228 'might':1111,4057 'millions':3650,3721 'mind':2708 'mined':3478 'minimum':3687 'minted':701 'misconceptions':3378 'misnomer':2011 'missed':4675 'mistook':4723 'misuse':3263 'mockable':1387 'model':2561 'models':3669 'moderation':4546,4777 'modern':3241 'modifies':4534 'more':171,946,1062,1351,1525,1731,1757,1895,2031,2195,2372,2448,2929,2941,3835,4746,4931,5052 'most':366,1535,3306,4679 'move':2067 'much':2755,3535,4622,4841 'multi':2679 'multiplex':3632 'must':2165,2699,3931,4540,5085 'mutexes':3413 'my':10,62,253,1558,1576,2034,2609,2926,3325,3382,4681 'myopic':748 'n':2299,2303,2409,2413 'name':1046,1156,1162,1232,1469,1475,1491 'names':2911 'namespace':1087 'namespaces':1053,1079 'naturally':2114 'near':3867 'need':2149 'needed':4108 'needs':1445,2486 'nested':2856 'nesting':2850,3136 'net/http':4163,4190,4260,4288 'net/http.server':4281 'network':2688,3795,3817 'never':1314,2504,3079 'new':740,743,1184,1587,2173 'newcomers':402 'newly':700 'news':1964 'next':3557,4005 'nice':1994 'nil':2811,3224 'no':1492,1708,1723,2382,2461,3606,3608,3611,3615,3618,3914,4783 'nobody':76,1289 'non':294,904,3753 'non-idiomatic':293 'nor':4972 'not':159,163,181,184,189,217,234,321,418,438,538,737,791,800,806,1182,1399,1608,1748,1904,2385,2500,2530,2612,2902,3031,3412,3663,3683,3714,4291,4417,4432,4483,4850,4906,4923,4934,4945,4961 'nothing':494 'notion':2599 'noun':205,450,1158 'novice':497 'now':2179,2365,2416 'nt':569,630 'nt-windows':568 'number':950,4953 'o':3520,3880 'object':867,4195,4199 'observation':1559,4677 'observations':437 'observer':2989 'obvious':1724 'obviously':1707,2642 'occur':2803,2831 'of':3,33,61,153,208,221,228,250,258,288,313,440,464,468,481,561,582,589,599,628,658,708,733,753,775,812,825,848,871,931,951,970,986,1012,1023,1036,1063,1067,1081,1123,1217,1233,1286,1302,1396,1410,1471,1509,1528,1571,1612,1615,1646,1672,1691,1821,1836,1882,1946,1959,1996,2052,2154,2175,2190,2198,2216,2227,2233,2239,2284,2334,2383,2509,2517,2577,2600,2608,2622,2634,2704,2730,2756,2759,2796,2808,2819,2839,2859,2877,2888,2895,2958,2980,3011,3015,3040,3053,3082,3085,3090,3126,3142,3151,3168,3177,3195,3238,3267,3327,3346,3349,3371,3377,3423,3493,3570,3592,3626,3638,3648,3651,3722,3743,3748,3756,3789,3804,3827,3851,4054,4062,4069,4077,4079,4084,4135,4160,4231,4308,4362,4392,4445,4508,4591,4604,4671,4680,4701,4757,4836,4848,4954,4966,5049 'offer':316 'offered':1589 'often':925,1754,4091,4627 'old':552,1663,1740 'on':38,58,1458,1911,2015,2018,2058,2263,2489,3109,3184,3288,4337,4381,4515,4583,4863,4897,4970 'once':1333,4609,5024 'one':1055,1280,1283,1482,1696,2055,2073,2374,2450,3125,3266,3345,3968,4147,4239,4760,4826,4882,4941,5054 'ones':1942 'only':2014,2538,4555,5020,5029 'onto':3634 'open':3820 'opens':3657 'operation':1961,3944 'opinon':2035 'optimise':4988 'optimises':4938,4949 'optimising':4962 'optional':738 'or':462,665,710,886,899,1256,1268,1296,1641,2123,2529,3394,3408,3672,3787,3916,4099,4151,4350,4535,4794,4797,5025,5059,5074 'original':435,4900 'other':377,754,770,1712,2240 'our':745,908,922,1977,3573,4989 'out':1539,1671,2215,3084,4572 'outdated':3424 'outnumber':525 'output':1301 'outside':4286 'outweighed':2815 'over':28,693,1339,1420,2686,3947,5066 'overall':2893,3050 'overboard':4804 'overcomplicated':4645 'own':63,909 'ownership':3766,3788 'owning':4172 'package':1041,1090,1138,1150,1160,1174,1463,1473,1872,2292,2312,2398,2465,2469,2495,2910,2923,2950,4289,4394,4438,4447,4456 'packages':1101,1203,4806 'page':2020 'parallel':2360,2444 'parameter':3217 'parameters':2278 'parlance':1085 'part':249 'parts':116,2129 'pass':2505,3223 'passed':2247 'passing':875,2212 'past':3322 'path':2554,2647,2668,2999,3141 'pattern':4153 'patterns':127 'pay':794 'penned':981 'people':521,3366,4513,4858,5065 'pep':982,1513,3483,4830 'per':2376,4149 'perception':4064 'perfectly':1279 'performance':3335,3380,3390 'perhaps':383,537,1985,4397 'permutation':4469 'pernicious':1388 'person':5030,5055 'personally':4631 'peter':2733,2741 'peters':977,988,1170,1893 'philosophy':666 'piece':463,2153,4756,5048 'pieces':2657 'pike':389,421,3550 'pitch':1479 'pithy':456 'place':1889,2036 'plan':2497 'plenty':2621 'point':363,2795,2801,2827,3471,3492,4076,4254,4910 'pointless':3104 'points':3481 'politely':3935 'polymorphism':879 'pool':3613,3637 'portability':633 'position':1428 'possibly':2568,3486 'potentially':1107,4752 'powerful':1551,1916 'practical':3665 'practice':4269 'precondition':3029,3119 'predecessor':4689 'predict':1956 'prefer':23,4811 'preferable':1867 'prerequisite':1771 'presence':2576 'presentation':14,35,553 'pretty':1073 'prevailing':166 'previous':2265 'primary':2875 'prime':2168,4166 'principle':2526 'principles':935 'probably':2915 'problem':2288,2420,4133,4735 'problematic':374 'procedural':884 'process':732,3548 'produce':2713 'production':2805 'productivity':4874 'professional':717 'profiling':3444 'program':804,1276,1304,1336,2377,2563,2898,4122,4284,4958,4980,5015,5089 'programmer':673,703,789,2706,2931,3276,4009 'programmers':919,1038,1076,1243,1972,2649,2771,3122,3204 'programming':1536,1823,3181,3242,4856 'programs':872,1326,1380,1397,1411,1792,2653,2678,2681,2682,2715,2788,3361 'promises':4457 'promulgate':718 'promulgated':680 'properties':121 'prove':3160,3434 'proverb':449 'proverbs':371,393,430,471,535 'provide':4192,4329 'provides':1166,1488 'providing':2481 'public':4538 'purport':1582 'purpose':1142,1152,1179 'put':2971,3586 'python':971,987,1008,1024,1068,1075,1510,1831,1883,1902,2510,2860,3178,4837 'question':87,1096,2459,4006 'questions':3892 'quickly':4059 'quite':18 'r':1735 'raises':4131 'range':3945 'rant':4411 'rarely':3191 'rather':1199,1430,2492,2798,2848,3043,3134,4814,4984 're':729,1118,1237,3387,3396,3682,3699,4960,5012,5027,5128 'reach':4790 'read':4402 'readability':4832,4849,4872,4925 'readable':1802 'reader':1954,4996,5000 'real':4705,4886 'reason':574,1920,2463,3921 'receivers':3826 'recently':55 'recognise':511 'recording':32 'recreated':4730 'reduce':2472 'reference':3785,4055 'reflected':2076 'reflecting':57 'refuse':3170 'register':3231 'reinterpret':1169 'reinterpretation':3489 'relatable':1813 'relative':4048 'relatively':4177 'release':2171 'reliability':634,1773 'reliable':1812 'relied':4514 'remainder':1011 'remains':3819 'removes':4536 'repeated':2614 'replace':1435 'replaced':1448 'replacement':1499 'request':3383,4198,4213 'required':3980 'requirement':1496 'requirements':1319,5072 'requires':2976 'rescue':448 'researched':1602 'reset':2346 'resource':3765,3791,3859 'resources':3757,3843 'respect':604 'responsibilities':4744 'responsibility':4361 'restricted':2423 'result':2260,4637 'results':2541 'retained':3823 'return':2237,2304,2414,2527,2539,2812,2846,3025,3035 'reuse':1108 'reveal':474 'rewritten':5102 'rhetorical':3507 'right':301,306,360,1130,2222,3089 'risk':2943 'rob':388,3549 'robust':2573,2652,2714 'role':1004 'rossum':1000 'ruby':857 'run':2356,4339,4357,5023 'run.group':4321 'runs':5078 'runtime':3628 'rust':785 'ryer':2994,3005 's':16,101,188,242,270,290,390,422,434,508,580,610,651,1048,1060,1151,1161,1343,1474,1620,1739,1918,2004,2009,2207,2221,2514,2707,2742,2901,2961,3158,3234,3343,3351,3499,3603,3617,3629,3689,3737,3866,4052,4238,4320,4326,4395,4448,4606,4780,4922,5002 'sadly':4414 'safer':2595 'sage':2865 'said':2516,4844 'same':4652,4717,4773 'samurai':2525 'sandi':1227 'sat':978 'saw':997 'say':140,147,174,903,3716 'saying':271,457,1189,1997 'says':493,1457,1515 'scenario':545 'scene':759 'science':2291 'screen':3092,3153 'seasoned':715 'second':4072 'security':635 'see':773,5034 'seeks':78 'segoe':432 'selectable':3960 'sells':4581 'sending':3802 'sequential':4694 'serious':4120 'server':2677,4171 'set':757,930,1285 'settling':1548 'several':973,4743 'shared':229 'shoehorn':882 'short':452,3130 'shorter':25,3536 'shot':1629 'should':41,70,790,1077,1139,1175,1195,1782,2503,2721,2725,3255,4214,4440 'shoulder':822 'shouldn':817,3718 'shutting':4168 'side':3098,3150 'sight':2981,3012,3016,3086 'signal':3966,4002,4021,4033,4097,4205 'signature':2208,2226,3568 'silently':2506 'simple':1502,1516,1543,1585,1640,1650,1669,1703,1746,1762,1794,1795,1805,1864,2310,3605,4553 'simpler':4812 'simplest':3838 'simplicity':1500,1598,1606,1655,1769,1786,1837,1846,3551,4871 'simply':2970,4493 'single':1178 'singular':2632 'sit':275 'size':4965 'sizes':3610 'sliding':3083 'slots':3133 'slow':3159,3404,3432 'small':3636 'smalltalk':859 'so':415,727,927,1167,1371,1702,1718,1910,2637,2754,2899,3323,3381,3581,3604,3863,4612,4840 'socket':4175,4189,4303 'software':1316,1678,1694,1827,4428,5050,5094 'solely':1329 'solution':4089 'solve':2779 'some':808,1113,1394,2916,3398,4043,4559 'someone':176,289,340,960,1356,1359,1365,1928,2170,5140 'something':46,142,157,235,243,1051,1413,1444,1761,1927,3430,3777,4711 'source':2189,4968 'space':625,2671,3522,3883 'spawned':4185,4278,4299 'spicy':1052 'spooky':2475 'stack':3123,3609,3695 'stage':4500 'stages':4864 'stand':4571,4862 'standard':836 'start':1049,1538,3708,3870,4377 'started':3545 'starting':4363 'starts':1042,1464 'state':1874,2047,2281,2285,2467,2471 'statement':3036,3594 'statements':439,2585 'stating':458 'status':3621 'stepping':372 'still':4312 'stop':3468,3899,3915,3929,4037 'stopped':4030 'stopping':4039 'straight':2984,4178 'stretched':3487 'strive':1784 'struct':2402,4800 'structural':505,4586 'style':152,167,312,885,890,1673,3094 'sub':3547 'subdivide':2934 'subtitle':68 'succeed':2546 'success':2501,2758,3352 'successful':3034,3140 'suggestions':3559 'suitable':323,396 'superficial':2006 'suppose':2306,2336,2352,2366 'sure':3885 'synonyms':4880 'syntax':2017 't':274,281,298,304,309,346,356,413,503,818,1453,1523,1569,1581,1639,1644,1653,1797,1807,2183,2275,2422,2545,2582,3252,3332,3415,3418,3532,3643,3719,3902,4410,4789,4927 'take':1426,2231 'takes':2550,4976 'talk':2118 'talked':3314 'talking':3512 'tasked':1348 'taste':3495 'taught':684 'taxonimise':2936 'taxonomy':1209 'teaching':326,397,541 'team':564,631,2126,3111,4325 'technical':1266 'techniques':1402 'tell':401,3907 'telling':339 'temptation':3172 'term':3131 'terminating':4218 'terms':2887,4061 'test':2340,2351,2435,2441,4465,4497,4641 'testing':4413 'tests':2358,4386,4421,4435,4525,4545 'than':1200,1431,1505,1519,1765,1878,1897,2373,2449,2493,2799,2849,2855,3044,3135,3537,4815,5053 'that':47,141,148,177,244,282,317,427,501,512,667,787,826,863,881,916,995,1030,1097,1250,1277,1363,1369,1429,1566,1579,1605,1634,1704,1720,1753,1790,1853,1858,2003,2071,2137,2159,2203,2217,2269,2367,2418,2490,2519,2571,2651,2658,2672,2683,2718,2948,2975,3068,3074,3100,3446,3498,3538,3599,3660,3725,3739,3779,3808,3982,4018,4038,4117,4140,4187,4208,4211,4248,4262,4310,4354,4418,4510,4532,4565,4578,4597,4617,4678,4894,4903,4924,4937,5051,5060,5071,5104 'the':1,34,59,86,114,151,154,165,197,202,222,256,311,351,358,362,428,443,447,466,469,479,482,490,520,532,539,558,562,566,573,614,626,629,643,655,662,669,675,705,751,758,813,823,832,846,860,869,913,949,954,963,968,984,992,1010,1021,1033,1065,1129,1144,1215,1231,1234,1292,1300,1303,1307,1408,1438,1459,1490,1495,1507,1563,1613,1616,1676,1711,1726,1737,1819,1880,1934,1940,1953,1957,1962,2016,2019,2030,2053,2086,2093,2096,2105,2157,2210,2225,2228,2245,2259,2264,2287,2319,2325,2347,2387,2392,2456,2462,2482,2507,2524,2575,2598,2606,2631,2639,2660,2666,2670,2687,2705,2731,2747,2757,2764,2774,2780,2794,2800,2806,2817,2826,2836,2857,2874,2892,2928,2940,2945,2955,2964,2997,3001,3033,3038,3041,3049,3054,3066,3072,3075,3088,3121,3139,3143,3147,3166,3171,3175,3193,3268,3289,3301,3305,3321,3347,3449,3479,3491,3556,3567,3571,3587,3593,3627,3703,3728,3762,3801,3812,3816,3821,3825,3828,3837,3849,3852,3855,3858,3952,3965,3990,3997,4004,4008,4014,4027,4046,4050,4075,4088,4112,4132,4136,4158,4170,4173,4197,4212,4219,4249,4253,4280,4283,4287,4297,4301,4323,4341,4360,4370,4390,4423,4437,4443,4446,4455,4473,4477,4511,4563,4569,4576,4579,4595,4636,4651,4659,4676,4690,4716,4731,4753,4768,4772,4816,4834,4846,4885,4899,4951,4964 'the-zen-of-go.netlify.com':30,5146 'their':178,776,1596,2128,2176,2937,3127,3694,4082,4688 'them':1082,1436,3454,3744,3847,4000,4620 'themselves':1647 'then':815,1288,1437,2547,3524,4727,5036,5082,5098 'there':100,595,1028,1093,1110,1687,1705,1721,1917,2193,2223,2619,2900,2905,2913,3198,3233,3373,3688,3912,4125,4461 'thereby':4217 'these':395,400,892,1636,2234,3891,4232,4574 'they':296,341,364,679,683,687,691,798,1642,1651,1914,2066,2134,2543,2628,2664,2710,2802,2830,2942,3579,3681,4374,4450,4618,4624,4629,4877 'thing':2056,2375,2903,3067,3073,3308,4240,5118 'things':645,1099,1900,1984,2062,2113,3019,3201,4233,4775 'think':414,1470,1570,1645,1852,1892,2717,2753,2954,3156,3429,3473,3475,3497,4589,4762 'thinking':51,1989 'thinks':2772 'this':5,83,193,416,544,731,828,1013,1071,1134,1180,1190,1198,1312,1350,1533,1624,1684,1886,2257,2279,2309,2341,2419,2724,2750,2785,2834,2863,2884,3007,3063,3093,3211,3216,3372,3470,3503,3656,3712,3938,4130,4145,4304,4485,4561,4713,4750,5008,5045 'those':220,526,1064,1401,1921,1947,2357,2458,3842,3876,4161 'though':2272 'thousands':3649 'thread':3612 'threaded':2680 'threads':3607,3639,3671 'three':3528,3539,3877 'throw':2587 'thus':534,1334,3365 'tie':3846 'tightly':2064,2161 'tim':976 'time':155,314,519,694,1281,1340,1564,1578,2254,2266,2454,3113,4044,4912,5070,5109 'timeframe':572 'timeouts':2693 'tin':1460 'tiny':4662 'to':29,79,85,109,136,139,146,173,175,328,368,387,404,419,446,473,495,510,529,605,721,756,769,793,821,834,896,907,953,990,1018,1132,1147,1220,1330,1361,1367,1378,1381,1414,1441,1446,1484,1541,1583,1656,1699,1715,1759,1763,1767,1862,1868,1932,1936,1955,1973,1975,2012,2021,2037,2041,2101,2150,2163,2317,2339,2355,2370,2390,2424,2562,2592,2605,2712,2739,2763,2787,2833,2933,3000,3024,3062,3087,3120,3146,3173,3247,3258,3262,3273,3279,3282,3303,3389,3455,3563,3583,3631,3645,3709,3715,3764,3769,3775,3786,3832,3840,3845,3848,3869,3890,3906,3910,3928,3941,3970,3984,3992,4001,4007,4025,4036,4049,4092,4096,4111,4204,4206,4227,4241,4246,4257,4267,4295,4332,4364,4366,4376,4387,4401,4458,4520,4543,4601,4614,4640,4657,4668,4766,4823,4889,4977,4987,4991,4994,5004,5006,5022,5058,5090,5122,5135,5141 'today':1222,4415,5134 'together':2068,2091,2116,2131 'tomorrow':5145 'too':1168 'tool':542 'tools':398,1828,3445 'towards':1020 'track':3742,4378 'tracking':3619 'tradeoffs':594 'train':2081 'trains':2146 'transfer':735 'translated':642 'tried':2591 'tries':2932 'trivial':3754,3868 'true':1315 'truth':461,477,1686 'truths':196 'trying':4600 'tune':3391 'turing':1743 'turn':386 'turning':906 'tweet':1534 'twice':3232 'two':1689,2061,2112,3188,3514,3558 'type':2397,2400,2485,2491,3518,4282,4978 'types':2235,2241,4739,4749 'typing':506,4495,4587 'ultimately':1299,3509,4644,4674,4693,4876 'unavoidable':2188 'unchecked':2555,2640 'under':3666,3893 'understandable':1815 'unequivocal':1074 'unexpected':2691 'unfashionable':170 'unit':4434,4464 'units':4663 'unknown':623 'unobstructed':2991 'unsafe':2560 'unsophisticated':1809 'unsynchronised':4087 'up':1417,1546,2028,3658,3701,3711 'us':277,967,4592 'usage':212 'use':801,807,1078,1764,1945,2447,2625,3259,3291,3410,3453,3584,3720,4024,4093,4602,4615,4868 'used':840,1205,4203,4619,5063 'useful':486,1405,3506,3771 'using':1480,2494,3021,3248 'valid':2540 'valuable':2032,3480 'value':441,829,862,1611,1660,1850,2326,2333,2729,2818,2838,4920 'values':230,547,618,627,639,652,657,707,720,752,778,915,932,994,1035,2232,2238 'van':999 'var':2294 'variable':2394,3212 'variables':2496 'variety':2641 've':49,94,1187,3311,3477,3543,3597 'vehicle':3991 'verbosity':2807 'version':26,2174 'very':1324 'victorious':2528 'view':4078 'virtue':4549 'vision':2992 'w':1775,1825 'wait':3833,4336,4380 'waitgroup':4101 'waiting':4686 'want':2738,4256,4375,4822,4986 'wanted':2354,2369 'was':7,1565,1607,1894,2261,2674,2746,3504,4611,4638,4692 'way':588,644,670,1131,1146,1440,1697,1713,1995,2100,2138,2250,2766,3839,3905 'ways':264,598,1690,3270,4560 'we':111,284,353,384,728,766,772,1236,1240,1248,1252,1259,1263,1374,1425,1434,1751,1783,1854,1966,2117,2307,2778,2882,3202,3510,3923,3930,4141,4959,4985 'well':454,1251,1391,2111 'well-known':453 'were':365,632,2135,4399,4683 'what':113,118,283,376,653,660,761,911,958,1164,1239,1422,1455,1486,2243,2251,2781,3209,3214,3219,3226,3727,3894,4020,4181,4426,4454,4476,5038,5130 'when':56,92,286,1247,1258,1443,1450,1489,1666,1859,2147,2579,3244,3283,3385,3465,3697,3733,3854,3951,4016,4031,4229 'where':1202,1890,2092,2789,2871,4102,4407 'whether':1830 'which':133,2584,2604,2624,2829,2987,3190,3640,3696,4200,4328,4740,4948 'while':1192,3807,3864 'whitespace':2894 'who':527,1345,4011,4610,4708,4861,5001,5031 'why':186,191,1194,1210,1674,1781,1787,2139 'will':399,696,712,1337,1354,1403,3367,3467,3830,3896,3958,4012,4017,4022,4040,4126,4155,4479,5056,5061,5100,5112 'willing':367 'winded':2001 'windows':563,567,570 'with':255,276,603,1043,1050,1120,1349,1465,2043,2046,2331,2630,2690,3162,3436,3799,4314,4504,4654,4719,4805,4825 'wither':750 'within':2967 'without':739,1912 'wonderful':391 'word':1483,2088,2106,3588,4883 'words':209,224,1171,4869 'work':64,291,423,965,1221,1758,1935,4660 'worked':5120 'worker':4152 'works':1278,5040 'world':676,4706 'would':902,936,2344,3661 'wouldn':345 'write':43,72,80,329,405,2569,3253,3359,3875,4124,4142,4385,4890 'writers':4349 'writing':1274,2797,4352,5013 'written':95,851,1328,3312 'wrong':344,898 'wrote':2907 'yardstick':843 'years':1529 'you':21,90,93,236,245,272,697,713,1117,1196,1272,1344,1986,2148,2255,2267,2273,2313,2321,2329,2337,2345,2353,2362,2368,2379,2434,2440,2446,2567,2580,3069,3101,3114,3116,3155,3250,3298,3338,3357,3386,3395,3428,3460,3517,3530,3542,3596,3641,3698,3717,3734,3740,3874,3886,4023,4032,4123,4156,4398,4470,4489,4501,4786,5011,5026,5042,5119,5127,5132 'your':719,1335,1472,2180,2277,2428,3091,3110,3152,3392,3420,3457,4367,4382,4393,4420,4427,4517,4523,5083,5088,5110,5143 'yourself':5017 'youtube':39 'zen':2,969,985,1022,1066,1508,1881,2508,2858,3176,4835 'zero':2335	en	Dave Cheney
35	CMake: Public VS Private VS Interface	{"ver":2,"uid":1,"hash":"SHA1:0500a8649eb4687e3d3537bb40c3269e4b6356ed"}	https://leimao.github.io/blog/CMake-Public-Private-Interface/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>CMake is one of the most convenient building tools for C/C++ projects. When it comes to <a href="https://cmake.org/cmake/help/latest/command/target_include_directories.html"><code class="language-plaintext highlighter-rouge">target_include_directories</code></a> and <a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html"><code class="language-plaintext highlighter-rouge">target_link_libraries</code></a>, there are several keywords, <code class="language-plaintext highlighter-rouge">PUBLIC</code>, <code class="language-plaintext highlighter-rouge">PRIVATE</code>, and <code class="language-plaintext highlighter-rouge">INTERFACE</code>, that I got confused about from time to time even if I have read the related official documentations. So When I was building my C/C++ projects using CMake, I often just use <code class="language-plaintext highlighter-rouge">PUBLIC</code> everywhere or leave the keyword blank (CMake will then use <code class="language-plaintext highlighter-rouge">PUBLIC</code> by default), the libraries and executables built from the projects would work in most of the scenarios. However, it is certainly not best practice.</p>\n\n<p><br /></p>\n\n<p>Today, I read Kuba Sejdak’s blog post <a href="https://kubasejdak.com/modern-cmake-is-like-inheritance">“Modern CMake is Like Inheritance”</a> and I found his interpretation on the CMake keywords <code class="language-plaintext highlighter-rouge">PUBLIC</code>, <code class="language-plaintext highlighter-rouge">PRIVATE</code>, and <code class="language-plaintext highlighter-rouge">INTERFACE</code> inspiring. So in this blog post, I would like to discuss some of my thoughts on these CMake keywords from the perspective of “inheritance”.</p>\n\n<h3 id="c-inheritance">C++ Inheritance</h3>\n\n<h4 id="access-specifiers">Access Specifiers</h4>\n\n<p>In C++ object oriented programming, there are three types of access specifiers for classes.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Access Specifier</th>\n    <th class="tg-uzvj">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">public</td>\n    <td class="tg-9wq8">Members are accessible from outside the class.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">protected</td>\n    <td class="tg-9wq8">Members cannot be accessed from outside the class. However, they can be accessed in inherited classes.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">private</td>\n    <td class="tg-9wq8">Members cannot be accessed (or viewed) from outside the class.</td>\n  </tr>\n</tbody>\n</table>\n\n<p>Alternatively, this could be described using the following simplified table.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Access Specifier</th>\n    <th class="tg-uzvj">Same Class</th>\n    <th class="tg-uzvj">Derived Class</th>\n    <th class="tg-uzvj">Outside Class</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">public</td>\n    <td class="tg-9wq8">Yes</td>\n    <td class="tg-9wq8">Yes</td>\n    <td class="tg-9wq8">Yes</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">protected</td>\n    <td class="tg-9wq8">Yes</td>\n    <td class="tg-9wq8">Yes</td>\n    <td class="tg-9wq8">No</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">private</span></td>\n    <td class="tg-9wq8">Yes</td>\n    <td class="tg-9wq8">No</td>\n    <td class="tg-9wq8">No</td>\n  </tr>\n</tbody>\n</table>\n\n<h4 id="inheritance-types">Inheritance Types</h4>\n\n<p>When it comes to class inheritance, there are also three types of inheritances.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Inheritance Type</th>\n    <th class="tg-uzvj">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">public</td>\n    <td class="tg-9wq8">Public members of the base class become public members of the derived class and protected members of the base class become protected members of the derived class. A base class's private members are never accessible directly from a derived class, but can be accessed through calls to the public and protected members of the base class.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">protected</span></td>\n    <td class="tg-9wq8">Public and protected members of the base class become protected members of the derived class.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">private</td>\n    <td class="tg-9wq8">Public and protected members of the base class become private members of the derived class.<br /></td>\n  </tr>\n</tbody>\n</table>\n\n<p>Alternatively, this could be described using the following simplified table.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Inheritance Type</th>\n    <th class="tg-uzvj">base: public member</th>\n    <th class="tg-uzvj"><span style="font-weight:700;font-style:normal">base: </span>protected <span style="font-weight:700;font-style:normal">member</span></th>\n    <th class="tg-uzvj"><span style="font-weight:700;font-style:normal">base: </span>private <span style="font-weight:700;font-style:normal">member</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">public</td>\n    <td class="tg-c3ow">derived: public member</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">derived: </span>protected member</td>\n    <td class="tg-9wq8">-</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">protected</td>\n    <td class="tg-c3ow"><span style="font-weight:400;font-style:normal">derived: </span>protected <span style="font-weight:400;font-style:normal">member</span></td>\n    <td class="tg-c3ow"><span style="font-weight:400;font-style:normal">derived:</span> protected <span style="font-weight:400;font-style:normal">member</span></td>\n    <td class="tg-9wq8">-</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">private</td>\n    <td class="tg-c3ow"><span style="font-weight:400;font-style:normal">derived:</span> private <span style="font-weight:400;font-style:normal">member</span></td>\n    <td class="tg-c3ow"><span style="font-weight:400;font-style:normal">derived:</span> private <span style="font-weight:400;font-style:normal">member</span></td>\n    <td class="tg-9wq8">-</td>\n  </tr>\n</tbody>\n</table>\n\n<h3 id="cmake-inheritance">CMake Inheritance</h3>\n\n<p>CMake uses somewhat similar inheritance concepts to C++, especially for the C++ <code class="language-plaintext highlighter-rouge">public</code> and <code class="language-plaintext highlighter-rouge">private</code> access specifiers and inheritance types. The CMake keywords <code class="language-plaintext highlighter-rouge">PUBLIC</code>, <code class="language-plaintext highlighter-rouge">PRIVATE</code>, and <code class="language-plaintext highlighter-rouge">INTERFACE</code> used in <code class="language-plaintext highlighter-rouge">target_include_directories</code> and <code class="language-plaintext highlighter-rouge">target_link_libraries</code>, in my opinion, are mixtures of access specifier and inheritance type from C++.</p>\n\n<h4 id="include-inheritance">Include Inheritance</h4>\n\n<p>In CMake, for any <code class="language-plaintext highlighter-rouge">target</code>, in the preprocessing stage, it comes with a <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> and a <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> for searching the header files building. <code class="language-plaintext highlighter-rouge">target_include_directories</code> will populate all the directories to <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> and/or <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> depending on the keyword <code class="language-plaintext highlighter-rouge">&lt;PRIVATE|PUBLIC|INTERFACE&gt;</code> we specified. The <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> will be used for the current <code class="language-plaintext highlighter-rouge">target</code> only and the <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> will be appended to the <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> of any other <code class="language-plaintext highlighter-rouge">target</code> which has dependencies on the current <code class="language-plaintext highlighter-rouge">target</code>. With such settings, the configurations of <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> and <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> for all building targets are easy to compute and scale up even for multiple hierarchical layers of building dependencies and many building targets.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Include Inheritance</th>\n    <th class="tg-uzvj">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">PUBLIC</td>\n    <td class="tg-9wq8">All the directories following PUBLIC will be used for the current target and <span style="font-weight:400;font-style:normal">the other targets that have dependencies on the current target, i.e., appending the directories to </span>INCLUDE_DIRECTORIES and INTERFACE_INCLUDE_DIRECTORIES.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">PRIVATE</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">All the include directories following PRIVATE will be used for the current target only</span>, i.e., appending the directories to <span style="font-weight:400;font-style:normal">INCLUDE_DIRECTORIES.</span></td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">INTERFACE</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">All the include directories following INTERFACE</span> will NOT be used for the current target but will be accessible for the other targets that have dependencies on the current target<span style="font-weight:400;font-style:normal">, i.e., appending the directories to </span>INTERFACE_INCLUDE_DIRECTORIES.</td>\n  </tr>\n</tbody>\n</table>\n\n<p>Note that when we do <code class="language-plaintext highlighter-rouge">target_link_libraries(&lt;target&gt; &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;)</code>, the dependent <code class="language-plaintext highlighter-rouge">&lt;item&gt;</code>, if built in the same CMake project, would append the <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> of <code class="language-plaintext highlighter-rouge">&lt;item&gt;</code> to the <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> of <code class="language-plaintext highlighter-rouge">&lt;target&gt;</code>. By controlling the <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code>, we could eliminate some unwanted or conflicting declarations from <code class="language-plaintext highlighter-rouge">&lt;item&gt;</code> to the <code class="language-plaintext highlighter-rouge">&lt;target&gt;</code>.</p>\n\n<p><br /></p>\n\n<p>For example, the <code class="language-plaintext highlighter-rouge">fruit</code> library has <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> of <code class="language-plaintext highlighter-rouge">fruit_h</code>, <code class="language-plaintext highlighter-rouge">tree_h</code>, and <code class="language-plaintext highlighter-rouge">INTERFACE_INCLUDE_DIRECTORIES</code> of <code class="language-plaintext highlighter-rouge">fruit_h</code>. If there is a <code class="language-plaintext highlighter-rouge">apple</code> library that is linked with the <code class="language-plaintext highlighter-rouge">fruit</code> library, the <code class="language-plaintext highlighter-rouge">apple</code> library would also have the <code class="language-plaintext highlighter-rouge">fruit_h</code> in its <code class="language-plaintext highlighter-rouge">INCLUDE_DIRECTORIES</code> as well. We could equivalently say, the <code class="language-plaintext highlighter-rouge">apple</code> library’s include directory inherited the <code class="language-plaintext highlighter-rouge">fruit_h</code> of the  <code class="language-plaintext highlighter-rouge">fruit</code> library.</p>\n\n<h4 id="link-inheritance">Link Inheritance</h4>\n\n<p>Similarly, for any <code class="language-plaintext highlighter-rouge">target</code>, in the linking stage, we would need to decide, given the <code class="language-plaintext highlighter-rouge">item</code> to be linked, whether we have to put the <code class="language-plaintext highlighter-rouge">item</code> in the link dependencies, or the link interface, or both, in the compiled <code class="language-plaintext highlighter-rouge">target</code>. Here the link dependencies means the <code class="language-plaintext highlighter-rouge">item</code> has some implementations that the <code class="language-plaintext highlighter-rouge">target</code> would use, and it is linked to the <code class="language-plaintext highlighter-rouge">item</code>, so that whenever we call the functions or methods corresponding to those implementations it will always be mapped correctly to the implementations in <code class="language-plaintext highlighter-rouge">item</code> via the link, whereas the link interface means the <code class="language-plaintext highlighter-rouge">target</code> becomes an interface for linking the <code class="language-plaintext highlighter-rouge">item</code> for other targets which have dependencies on the <code class="language-plaintext highlighter-rouge">target</code>, and the <code class="language-plaintext highlighter-rouge">target</code> does not have to use <code class="language-plaintext highlighter-rouge">item</code> at all.</p>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Link Type</th>\n    <th class="tg-uzvj">Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">PUBLIC</td>\n    <td class="tg-9wq8">All the objects following PUBLIC will be used for linking to the current target and providing the interface to the other targets that have dependencies on the current target.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">PRIVATE</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">All the objects following </span>PRIVATE will only be used for linking to the current target.</td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">INTERFACE</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">All the objects following </span>INTERFACE will only be used for providing the interface to the other targets that have dependencies on the current target.</td>\n  </tr>\n</tbody>\n</table>\n\n<p>For example, if the <code class="language-plaintext highlighter-rouge">fruit</code> library has the implementation of functions, such as <code class="language-plaintext highlighter-rouge">size</code> and <code class="language-plaintext highlighter-rouge">color</code>, and the <code class="language-plaintext highlighter-rouge">apple</code> library has a function <code class="language-plaintext highlighter-rouge">apple_size</code> which called the <code class="language-plaintext highlighter-rouge">size</code> from the <code class="language-plaintext highlighter-rouge">fruit</code> library and was <code class="language-plaintext highlighter-rouge">PRIVATE</code> linked with the <code class="language-plaintext highlighter-rouge">fruit</code> library. We could create an executable <code class="language-plaintext highlighter-rouge">eat_apple</code> that calls <code class="language-plaintext highlighter-rouge">apple_size</code> by <code class="language-plaintext highlighter-rouge">PUBLIC</code> or <code class="language-plaintext highlighter-rouge">PRIVATE</code> linking with the <code class="language-plaintext highlighter-rouge">apple</code> library. However, if we want to create an executable <code class="language-plaintext highlighter-rouge">eat_apple</code> that calls the <code class="language-plaintext highlighter-rouge">size</code> and <code class="language-plaintext highlighter-rouge">color</code> from the <code class="language-plaintext highlighter-rouge">fruit</code> library, only linking with the <code class="language-plaintext highlighter-rouge">apple</code> library will cause building error, since the <code class="language-plaintext highlighter-rouge">fruit</code> library was not part of the interface in the <code class="language-plaintext highlighter-rouge">apple</code> library, and is thus inaccessible to <code class="language-plaintext highlighter-rouge">eat_apple</code>. To make the <code class="language-plaintext highlighter-rouge">apple</code> library to inherit the <code class="language-plaintext highlighter-rouge">size</code> and <code class="language-plaintext highlighter-rouge">color</code> from the <code class="language-plaintext highlighter-rouge">fruit</code> library, we have to make the linking of the <code class="language-plaintext highlighter-rouge">apple</code> library to the the <code class="language-plaintext highlighter-rouge">fruit</code> library <code class="language-plaintext highlighter-rouge">PUBLIC</code> instead of <code class="language-plaintext highlighter-rouge">PRIVATE</code>.</p>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>The CMake builds a hierarchical project via the include interface or link interface. The “inheritance” mechanism in C++ is built upon the include interface or link interface.</p>\n\n<h3 id="faq">FAQ</h3>\n\n<h4 id="how-to-understand-cmake-interface">How to Understand CMake Interface?</h4>\n\n<p>In my understanding, CMake interface is just like a telephone switch station in old times.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-08-CMake-Public-Private-Interface/medienwandel-chicago-union-station-telegraph-switchboard.jpg" style="width: 70%; height: 70%" />\n    <figcaption>Telephone Switch Station</figcaption>\n</figure>\n</div>\n\n<p>If <code class="language-plaintext highlighter-rouge">A</code> wants to call <code class="language-plaintext highlighter-rouge">B</code> and there is no direct telephone cable connection between <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code>, <code class="language-plaintext highlighter-rouge">A</code> has to call a telephone switch station that has connection to <code class="language-plaintext highlighter-rouge">B</code> and the personal in the telephone switch station will connect <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code> by jointing the cable of <code class="language-plaintext highlighter-rouge">A</code> and the cable of <code class="language-plaintext highlighter-rouge">B</code> together. If the telephone switch station does not know there is a <code class="language-plaintext highlighter-rouge">B</code>, it is impossible to get <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code> connected. So CMake interface is simply a registration in the telephone switch station. When there is a dependency in CMake targets, targets from different levels of hierarchy are connected via interfaces, for both <code class="language-plaintext highlighter-rouge">include</code> and <code class="language-plaintext highlighter-rouge">link</code>.</p>\n\n<h4 id="what-are-the-key-points-for-this-blog-post">What are the Key Points for This Blog Post?</h4>\n\n<p><code class="language-plaintext highlighter-rouge">PRIVATE</code> only cares about himself and does not allow inheritance. <code class="language-plaintext highlighter-rouge">INTERFACE</code> only cares about others and allows inheritance. <code class="language-plaintext highlighter-rouge">PUBLIC</code> cares about everyone and allows inheritance.</p>\n\n<h4 id="is-public-private-interface-part-of-the-gccg-compiler">Is PUBLIC, PRIVATE, INTERFACE Part of the GCC/G++ Compiler?</h4>\n\n<p>No. Compilers, such as <code class="language-plaintext highlighter-rouge">gcc</code> and <code class="language-plaintext highlighter-rouge">g++</code>, do not have such mechanism. CMake invented those keywords for user to create a building graph that has very clear and explicit dependencies. The building graph translates to normal building commands using <code class="language-plaintext highlighter-rouge">gcc</code> and <code class="language-plaintext highlighter-rouge">g++</code>.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://kubasejdak.com/modern-cmake-is-like-inheritance">Modern CMake is Like Inheritance</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/CMake-Public-Private-Interface/">CMake: Public VS Private VS Interface</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 08, 2020.</p>	1d86262e92410609f37040549fa6b1045b9d020e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.416474	0			'0':183,349,501,721,1058,1520 '08':2124 '10px':212,250,378,416,530,568,750,788,1087,1125,1549,1587 '14px':208,242,374,408,526,560,746,780,1083,1117,1545,1579 '1px':197,231,363,397,515,549,735,769,1072,1106,1534,1568 '2020':2125 '5px':213,251,379,417,531,569,751,789,1088,1126,1550,1588 '9wq8':259,425,577,797,1134,1596 'access':159,171,292,298,307,316,324,458,649,658,895,922,1245 'align':266,270,286,290,432,436,452,456,584,588,604,608,804,808,820,824,840,844,1141,1145,1161,1165,1603,1607,1623,1627 'allow':2030,2038,2045 'also':488,1358 'altern':331,703 'alway':1466 'and/or':968 'append':999,1195,1221,1258,1289 'appl':1345,1355,1374,1721,1726,1750,1753,1762,1773,1788,1806,1814,1818,1838 'arial':201,235,367,401,519,553,739,773,1076,1110,1538,1572 'august':2123 'b':1906,1918,1931,1944,1955,1968,1976 'base':618,632,642,669,678,694,848,851,854 'becom':620,634,680,696,1485 'best':105 'black':189,223,355,389,507,541,727,761,1064,1098,1526,1560 'blank':77 'blog':113,137,2020 'bold':283,449,601,837,1158,1620 'book':2121 'border':177,181,187,191,195,221,225,229,261,277,343,347,353,357,361,387,391,395,427,443,495,499,505,509,513,539,543,547,579,595,715,719,725,729,733,759,763,767,799,815,831,1052,1056,1062,1066,1070,1096,1100,1104,1136,1152,1514,1518,1524,1528,1532,1558,1562,1566,1598,1614 'border-collaps':176,342,494,714,1051,1513 'border-color':186,220,260,276,352,386,426,442,504,538,578,594,724,758,798,814,830,1061,1095,1135,1151,1523,1557,1597,1613 'border-spac':180,346,498,718,1055,1517 'border-styl':190,224,356,390,508,542,728,762,1065,1099,1527,1561 'border-width':194,228,360,394,512,546,732,766,1069,1103,1531,1565 'break':216,254,382,420,534,572,754,792,1091,1129,1553,1591 'build':15,61,956,1029,1044,1048,1792,1852,2077,2087,2092 'built':89,1282,1869 'c':157,162,887,891,928,1867 'c/c':18,63 'c3ow':813 'cabl':1913,1948,1953 'call':660,1455,1729,1752,1775,1905,1922 'cannot':305,322 'care':2024,2034,2041 'caus':1791 'center':267,287,433,453,585,605,805,821,841,1142,1162,1604,1624 'certain':103 'class':174,302,311,319,330,461,463,465,484,619,626,633,640,643,654,670,679,686,695,702 'clear':2082 'cmake':1,8,66,78,116,127,150,878,880,901,932,1286,1851,1881,1886,1979,1996,2068,2100,2104 'collaps':178,179,344,345,496,497,716,717,1053,1054,1515,1516 'color':188,222,262,278,354,388,428,444,506,540,580,596,726,760,800,816,832,1063,1097,1137,1153,1525,1559,1599,1615,1718,1779,1825 'come':22,482,941 'command':2093 'compil':1427,2055,2057 'comput':1034 'concept':885 'conclus':1849 'configur':1019 'conflict':1314 'confus':42 'connect':1914,1929,1941,1977,2005 'control':1303 'conveni':14 'correct':1469 'correspond':1460 'could':333,705,1309,1370,1745 'creat':1746,1769,2075 'current':989,1013,1181,1192,1217,1240,1255,1645,1660,1676,1701 'decid':1401 'declar':1315 'default':84 'depend':972,1010,1045,1189,1252,1279,1418,1432,1497,1657,1698,1994,2085 'deriv':462,625,639,653,685,701,858,861,865,868,872,875 'describ':335,707 'descript':294,612,1169,1631 'differ':2000 'direct':650,1911 'directori':26,911,945,950,959,964,967,971,983,996,1003,1022,1026,1173,1197,1200,1204,1209,1223,1226,1231,1260,1264,1293,1299,1307,1328,1337,1366,1378 'discuss':143 'document':56 'easi':1032 'eat':1749,1772,1813 'elimin':1310 'equival':1371 'error':1793 'especi':888 'even':48,1038 'everyon':2043 'everywher':72 'exampl':1322,1704 'execut':88,1748,1771 'explicit':2084 'famili':200,234,366,400,518,552,738,772,1075,1109,1537,1571 'faq':1877 'file':955 'follow':338,710,1174,1210,1232,1636,1666,1682 'font':199,206,233,240,244,281,365,372,399,406,410,447,517,524,551,558,562,599,737,744,771,778,782,835,1074,1081,1108,1115,1119,1156,1536,1543,1570,1577,1581,1618 'font-famili':198,232,364,398,516,550,736,770,1073,1107,1535,1569 'font-siz':205,239,371,405,523,557,743,777,1080,1114,1542,1576 'font-weight':243,280,409,446,561,598,781,834,1118,1155,1580,1617 'found':122 'fruit':1324,1330,1339,1352,1361,1381,1385,1707,1734,1742,1782,1796,1828,1843 'function':1457,1713,1725 'g':2062,2097 'gcc':2060,2095 'gcc/g':2054 'get':1973 'given':1402 'got':41 'graph':2078,2088 'h':1331,1333,1340,1362,1382 'header':954 'hidden':210,248,376,414,528,566,748,786,1085,1123,1547,1585 'hierarch':1041,1854 'hierarchi':2003 'howev':100,312,1764 'i.e':1194,1220,1257 'implement':1438,1463,1472,1711 'imposs':1971 'inaccess':1811 'includ':25,910,929,944,949,958,966,970,982,995,1002,1021,1025,1167,1199,1203,1208,1225,1230,1263,1292,1298,1306,1327,1336,1365,1377,1858,1872,2010 'inherit':119,156,158,263,279,318,429,445,478,485,492,581,597,610,801,817,833,846,879,884,898,925,930,1138,1154,1168,1379,1388,1600,1616,1821,1864,2031,2039,2046,2103 'inspir':133 'instead':1846 'interfac':6,38,132,906,948,969,978,994,1024,1202,1227,1233,1262,1276,1291,1305,1335,1422,1481,1487,1650,1678,1683,1691,1803,1859,1862,1873,1876,1882,1887,1980,2007,2032,2050,2109 'interpret':124 'introduct':7 'invent':2069 'item':1277,1280,1295,1317,1404,1414,1435,1450,1474,1491,1509 'joint':1946 'key':2016 'keyword':34,76,128,151,902,975,2071 'know':1964 'kuba':110 'layer':1042 'leav':74 'lei':2114,2117 'level':2001 'librari':30,86,915,1272,1325,1346,1353,1356,1375,1386,1708,1722,1735,1743,1763,1783,1789,1797,1807,1819,1829,1839,1844 'like':118,141,1890,2102 'link':29,914,1271,1349,1387,1395,1407,1417,1421,1431,1447,1477,1480,1489,1629,1642,1673,1739,1759,1785,1835,1861,1875,2012 'log':2120 'make':1816,1833 'mani':1047 'mao':2115,2118 'map':1468 'mean':1433,1482 'mechan':1865,2067 'member':296,304,321,615,622,629,636,646,666,675,682,691,698,850,853,856,860,863,867,870,874,877 'method':1459 'middl':271,291,437,457,589,609,809,845,1146,1166,1608,1628 'mixtur':920 'modern':115,2099 'multipl':1040 'need':1399 'never':648 'normal':217,246,255,383,412,421,535,564,573,755,784,793,1092,1121,1130,1554,1583,1592,2091 'note':1265 'object':163,1635,1665,1681 'offici':55 'often':68 'old':1896 'one':10 'opinion':918 'orient':164 'origin':2111 'other':2036 'outsid':300,309,328,464 'overflow':209,247,375,413,527,565,747,785,1084,1122,1546,1584 'pad':211,249,377,415,529,567,749,787,1086,1124,1548,1586 'part':1800,2051 'person':1934 'perspect':154 'point':2017 'popul':961 'post':114,138,2021 'practic':106 'preprocess':938 'privat':4,36,130,320,474,645,687,697,855,871,873,876,894,904,976,1205,1211,1274,1662,1667,1738,1758,1848,2022,2049,2107 'program':165 'project':19,64,92,1287,1855 'protect':303,470,628,635,665,671,674,681,690,852,862,864,866,869 'provid':1648,1689 'public':2,35,71,82,129,295,466,613,614,621,663,672,688,849,857,859,892,903,977,1170,1175,1275,1632,1637,1756,1845,2040,2048,2105 'publish':2112 'put':1412 'read':52,109 'refer':2098 'registr':1984 'relat':54 'san':203,237,369,403,521,555,741,775,1078,1112,1540,1574 'sans-serif':202,236,368,402,520,554,740,774,1077,1111,1539,1573 'say':1372 'scale':1036 'scenario':99 'search':952 'sejdak':111 'serif':204,238,370,404,522,556,742,776,1079,1113,1541,1575 'set':1017 'sever':33 'similar':883,1389 'simpli':1982 'simplifi':339,711 'sinc':1794 'size':207,241,373,407,525,559,745,779,1082,1116,1544,1578,1716,1727,1731,1754,1777,1823 'solid':193,227,359,393,511,545,731,765,1068,1102,1530,1564 'somewhat':882 'space':182,348,500,720,1057,1519 'specifi':160,172,293,459,896,923,980 'stage':939,1396 'station':1894,1900,1926,1939,1961,1989 'style':192,226,358,392,510,544,730,764,1067,1101,1529,1563 'switch':1893,1899,1925,1938,1960,1988 'tabl':340,712 'target':24,28,909,913,935,957,990,1007,1014,1030,1049,1182,1186,1193,1218,1241,1249,1256,1270,1273,1301,1320,1392,1428,1441,1484,1494,1500,1503,1646,1654,1661,1677,1695,1702,1997,1998 'td':185,351,503,723,1060,1522 'telephon':1892,1898,1912,1924,1937,1959,1987 'text':265,285,431,451,583,603,803,819,839,1140,1160,1602,1622 'text-align':264,284,430,450,582,602,802,818,838,1139,1159,1601,1621 'tg':175,184,218,256,258,272,274,341,350,384,422,424,438,440,493,502,536,574,576,590,592,713,722,756,794,796,810,812,826,828,1050,1059,1093,1131,1133,1147,1149,1512,1521,1555,1593,1595,1609,1611 'tg-9wq8':257,423,575,795,1132,1594 'tg-c3ow':811 'tg-uzvj':273,439,591,827,1148,1610 'th':219,385,537,757,1094,1556 'thought':147 'three':168,489 'thus':1810 'time':45,47,1897 'today':107 'togeth':1956 'tool':16 'top':825 'translat':2089 'tree':1332 'type':169,479,490,611,847,899,926,1630 'understand':1880,1885 'unwant':1312 'upon':1870 'use':65,70,81,336,708,881,907,986,1178,1214,1237,1443,1508,1640,1671,1687,2094 'user':2073 'uzvj':275,441,593,829,1150,1612 'vertic':269,289,435,455,587,607,807,823,843,1144,1164,1606,1626 'vertical-align':268,288,434,454,586,606,806,822,842,1143,1163,1605,1625 'via':1475,1856,2006 'view':326 'vs':3,5,2106,2108 'want':1767,1903 'weight':245,282,411,448,563,600,783,836,1120,1157,1582,1619 'well':1368 'whenev':1453 'wherea':1478 'whether':1408 'width':196,230,362,396,514,548,734,768,1071,1105,1533,1567 'word':215,253,381,419,533,571,753,791,1090,1128,1552,1590 'word-break':214,252,380,418,532,570,752,790,1089,1127,1551,1589 'work':94 'would':93,140,1288,1357,1398,1442 'yes':467,468,469,471,472,475	en	Lei Mao
729	Flutter 1.20 下的 Hybrid Composition 深度解析	{"ver":2,"uid":1,"hash":"SHA1:f6bb90e6901bdc3021a76965ebf075539197db2d"}	https://toutiao.io/k/pzoomgq	2020-08-29 02:10:09	Flutter 1.20 下的 Hybrid Composition 深度解析	0ac2f35e8a5992164d719c38cd6ca72df90a7c53	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.208177	0			'1.20':2,8 'composition':5,11 'flutter':1,7 'hybrid':4,10 '下的':3,9 '深度解析':6,12	zh	
25	Use internal packages to reduce your public API surface	{"ver":2,"uid":1,"hash":"SHA1:de61c45f3747d3c19dc1d32f73fa58583d4ddb8b"}	https://dave.cheney.net/2019/10/06/use-internal-packages-to-reduce-your-public-api-surface	2019-10-06 04:47:01	\n<p>In the beginning, before the <code>go</code> tool, before Go 1.0, the Go distribution stored the standard library in a subdirectory called <code>pkg/</code> and the commands which built upon it in <code>cmd/</code>. This wasn&#8217;t so much a deliberate taxonomy but a by product of the original <code>make</code> based build system. In <a href="https://groups.google.com/forum/m/#!msg/golang-dev/c5AknZg3Kww/OFLmvGyfNR0J">September 2014</a>, the Go distribution dropped the <code>pkg/</code> subdirectory, but then this tribal knowledge had set root in large Go projects and continues to this day.</p>\n\n\n\n<p>I tend to view empty directories inside a Go project with suspicion. Often they are a hint that the module&#8217;s author may be trying to create a taxonomy of packages rather than ensuring each package&#8217;s name, and thus its enclosing directory, <a href="https://dave.cheney.net/2019/01/08/avoid-package-names-like-base-util-or-common">uniquely describes its purpose</a>. While the symmetry with <code>cmd/</code> for <code>package main</code> commands is appealing, a directory that exists only to hold other packages is a potential design smell.</p>\n\n\n\n<p>More importantly, the boilerplate of an empty <code>pkg/</code> directory distracts from the more useful idiom of an <code>internal/</code> directory. <code>internal/</code> is a special directory name recognised by the <code>go</code> tool which will prevent one package from being imported by another unless both share a common ancestor. Packages within an <code>internal/</code> directory are therefore said to be <em>internal packages</em>.</p>\n\n\n\n<p>To create an internal package, place it within a directory named <code>internal/</code>. When the <code>go</code> command sees an import of a package with <code>internal/</code> in the import path, it verifies that the importing package is within the tree rooted at the <em>parent</em> of the <code>internal/</code> directory.</p>\n\n\n\n<p>For example, a package <code>/a/b/c/internal/d/e/f</code> can only be imported by code in the directory tree rooted at <code>/a/b/c</code>. It cannot be imported by code in <code>/a/b/g</code> or in any other repository. </p>\n\n\n\n<p>If your project contains multiple packages you may find you have some exported symbols which are intended to be used by other packages in your project, but are not intended to be part of your project’s public API. Although Go has limited visibility modifiers&#8211;public, exported, symbols and private, non exported, symbols&#8211;internal packages provide a useful mechanism for controlling visibility to parts of your project which would otherwise be considered part of its public versioned API.</p>\n\n\n\n<p>You can, of course, promote internal packages later if you want to commit to supporting that API; just move them up a directory level or two. The key is this process is <em>opt-in</em>. As the author, internal packages give you control over which symbols in your project&#8217;s public API without being forced to glob concepts together into unwieldy mega packages to avoid exporting them.</p>\n	dfcaaeefbf19f4285767f1f4c9224ffd3ad8c916	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.236427	0			'/a/b/c':280 '/a/b/c/internal/d/e/f':267 '/a/b/g':288 '1.0':19 '2014':62 'a':28,46,50,94,102,114,145,155,180,202,225,237,265,350,393 'although':333 'an':164,175,207,219,234 'ancestor':204 'and':32,82,125,342 'another':198 'any':291 'api':8,332,371,388,423 'appealing':144 'are':101,210,309,321 'as':407 'at':256,279 'author':108,409 'avoid':436 'based':57 'be':110,214,270,283,312,325,364 'before':13,17 'beginning':12 'being':195,425 'boilerplate':162 'both':200 'build':58 'built':36 'but':49,70,320 'by':51,185,197,272,285,314 'called':30 'can':268,373 'cannot':282 'cmd':40,138 'code':273,286 'command':232 'commands':34,142 'commit':384 'common':203 'concepts':429 'considered':365 'contains':297 'continues':83 'control':414 'controlling':354 'course':375 'create':113,218 'day':86 'deliberate':47 'describes':131 'design':157 'directories':92 'directory':129,146,167,177,182,209,226,262,276,394 'distracts':168 'distribution':22,65 'dropped':66 'each':121 'empty':91,165 'enclosing':128 'ensuring':120 'example':264 'exists':148 'exported':306,340,345 'exporting':437 'find':302 'for':139,263,353 'forced':426 'from':169,194 'give':412 'glob':428 'go':15,18,21,64,80,95,187,231,334 'had':75 'has':335 'have':304 'hint':103 'hold':151 'i':87 'idiom':173 'if':294,380 'import':235,243 'importantly':160 'imported':196,271,284 'importing':249 'in':10,27,39,60,78,241,274,287,290,317,406,418 'inside':93 'intended':310,323 'internal':2,176,178,208,215,220,228,240,261,347,377,410 'into':431 'is':143,154,179,251,400,403 'it':38,223,245,281 'its':127,132,368 'just':389 'key':399 'knowledge':74 'large':79 'later':379 'level':395 'library':26 'limited':336 'main':141 'make':56 'may':109,301 'mechanism':352 'mega':433 'modifiers':338 'module':106 'more':159,171 'move':390 'much':45 'multiple':298 'name':124,183 'named':227 'non':344 'not':322 'of':53,116,163,174,236,259,327,358,367,374 'often':99 'one':192 'only':149,269 'opt':405 'opt-in':404 'or':289,396 'original':55 'other':152,292,315 'otherwise':363 'over':415 'package':122,140,193,221,238,250,266 'packages':3,117,153,205,216,299,316,348,378,411,434 'parent':258 'part':326,366 'parts':357 'path':244 'pkg':31,68,166 'place':222 'potential':156 'prevent':191 'private':343 'process':402 'product':52 'project':96,296,319,329,360,420 'projects':81 'promote':376 'provide':349 'public':7,331,339,369,422 'purpose':133 'rather':118 'recognised':184 'reduce':5 'repository':293 'root':77 'rooted':255,278 's':107,123,330,421 'said':212 'sees':233 'september':61 'set':76 'share':201 'smell':158 'so':44 'some':305 'special':181 'standard':25 'stored':23 'subdirectory':29,69 'supporting':386 'surface':9 'suspicion':98 'symbols':307,341,346,417 'symmetry':136 'system':59 't':43 'taxonomy':48,115 'tend':88 'than':119 'that':104,147,247,387 'the':11,14,20,24,33,54,63,67,105,135,161,170,186,230,242,248,253,257,260,275,398,408 'them':391,438 'then':71 'therefore':211 'they':100 'this':41,72,85,401 'thus':126 'to':4,84,89,112,150,213,217,311,324,356,383,385,427,435 'together':430 'tool':16,188 'tree':254,277 'tribal':73 'trying':111 'two':397 'uniquely':130 'unless':199 'unwieldy':432 'up':392 'upon':37 'use':1 'used':313 'useful':172,351 'verifies':246 'versioned':370 'view':90 'visibility':337,355 'want':382 'wasn':42 'when':229 'which':35,189,308,361,416 'while':134 'will':190 'with':97,137,239 'within':206,224,252 'without':424 'would':362 'you':300,303,372,381,413 'your':6,295,318,328,359,419	en	Dave Cheney
501	ReMarkable MicroSD (2019)	{"ver":2,"uid":1,"hash":"SHA1:c8d23169aac3c9c462471b4fd239586fe6a556e2"}	http://www.davisr.me/projects/remarkable-microsd/	2020-08-21 21:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24232801"> https://news.ycombinator.com/item?id=24232801 </a>	a00de4c2054bb2a76e8381afba43dc4f250afb01	\N	f	2020-08-21 16:10:00	2020-08-25 22:10:10.543123	0			'/item?id=24232801':7 '2019':3 'comment':4 'microsd':2 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24232801':5 'remark':1	zh	devnonymous
283	Beta users of Starlink get downloads of 11 to 60 Mbps	{"ver":2,"uid":1,"hash":"SHA1:2b101052cc0c65f09cc38d2d756846d759222699"}	https://arstechnica.com/information-technology/2020/08/spacex-starlink-beta-tests-show-speeds-up-to-60mbps-latency-as-low-as-31ms/	2020-08-15 10:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24160621"> https://news.ycombinator.com/item?id=24160621 </a>	7a4ef5c28476bd1f1b15d1e96d0d039de3426070	\N	f	2020-08-15 10:10:00	2020-08-18 02:10:08.421215	0			'/item?id=24160621':15 '11':8 '60':10 'beta':1 'comment':12 'download':6 'get':5 'mbps':11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24160621':13 'starlink':4 'user':2	zh	trulyrandom
27	Don&#8217;t force allocations on the callers of your API	{"ver":2,"uid":1,"hash":"SHA1:731cbbed9baf2c07415958aa79fd2733a0883d84"}	https://dave.cheney.net/2019/09/05/dont-force-allocations-on-the-callers-of-your-api	2019-09-05 11:24:43	\n<p>This is a post about performance. Most of the time when worrying about the performance of a piece of code the overwhelming advice should be (with apologies to Brendan Gregg) <em>don&#8217;t worry about it, yet.</em> However there is one area where I counsel developers to think about the performance implications of a design, and that is API design.</p>\n\n\n\n<p>Because of the high cost of retrofitting a change to an API&#8217;s signature to address performance concerns, it&#8217;s worthwhile considering the performance implications of your API&#8217;s design on its caller.</p>\n\n\n\n<h2>A tale of two API designs</h2>\n\n\n\n<p>Consider these two <code>Read</code> methods:</p>\n\n\n\n<pre class="wp-block-preformatted">func (r *Reader) Read(buf []byte) (int, error)\nfunc (r *Reader) Read() ([]byte, error)</pre>\n\n\n\n<p>The first method takes a <code>[]byte</code> buffer and returns the number of bytes read into that buffer and possibly an <code>error</code> that occurred while reading. The second takes no arguments and returns some data as a <code>[]byte</code> or an <code>error</code>. </p>\n\n\n\n<p>This first method should be familiar to any Go programmer, it&#8217;s <code><a href="https://golang.org/pkg/io/#Reader">io.Reader.Read</a></code>. As ubiquitous as <code>io.Reader</code> is, it&#8217;s not the most convenient API to use. Consider for a moment that <code>io.Reader</code> is the only Go interface in widespread use that returns <em>both</em> a result <em>and</em> an error. Meditate on this for a moment. The standard Go idiom, checking the error and iff it is <code>nil</code> is it safe to consult the other return values, does not apply to <code>Read</code>. In fact the caller must do the opposite. First they must record the number of bytes read into the buffer, reslice the buffer, process that data, and only then, consult the error. This is an unusual API for such a common operation and one that frequently catches out newcomers. </p>\n\n\n\n<h2>A trap for young players?</h2>\n\n\n\n<p>Why is it so? Why is one of the central APIs in Go&#8217;s standard library written like this? A superficial answer might be <code>io.Reader</code>&#8216;s signature is a reflection of the underlying <code><a href="http://man7.org/linux/man-pages/man2/read.2.html">read(2)</a></code> syscall, which is indeed true, but misses the point of this post.</p>\n\n\n\n<p>If we compare the API of <code>io.Reader</code> to our alternative, <code>func Read() ([]byte, error)</code>, this API seems easier to use. Each call to <code>Read()</code> will return the data that was read, no need to reslice buffers, no need to remember the special case to do this before checking the error. Yet this is not the signature of <code>io.Reader.Read</code>. Why would one of Go&#8217;s most pervasive interfaces choose such an awkward API? The answer, I believe, lies in the performance implications of the APIs signature on the <em>caller</em>.</p>\n\n\n\n<p>Consider again our alternative <code>Read</code> function, <code>func Read() ([]byte, error)</code>. On each call <code>Read</code> will read some data into a buffer<span id='easy-footnote-1-3821' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/09/05/dont-force-allocations-on-the-callers-of-your-api#easy-footnote-bottom-1-3821' title='This API has other problems, such as, &lt;em&gt;how much data should be read?&lt;/em&gt; or &lt;em&gt;should it try to read as much as possible, or return promptly if the read would block?&lt;/em&gt;'><sup>1</sup></a></span> and return the buffer to the caller. Where does this buffer come from? Who allocates it? The answer is the buffer is allocated <em>inside</em> <code>Read</code>. Therefore each call to <code>Read</code> is guaranteed to allocate a buffer which would escape to the heap. The more the program reads, the faster it reads data, the more streams of data it reads concurrently, the more pressure it places on the garbage collector.</p>\n\n\n\n<p>The standard libraries&#8217; <code>io.Reader.Read</code> forces the caller to supply a buffer because if the caller is concerned with the number of allocations their program is making this is precisely the kind of thing they want to control. Passing a buffer into <code>Read</code> puts the control of the allocations into the caller&#8217;s hands. If they aren&#8217;t concerned about allocations they can use higher level helpers like <code><a href="https://golang.org/pkg/io/ioutil/#ReadAll">ioutil.ReadAll</a></code> to read the contents into a <code>[]byte</code>, or <code><a href="https://golang.org/pkg/bufio/#Scanner">bufio.Scanner</a></code> to stream the contents instead.</p>\n\n\n\n<p>The opposite, starting with a method like our alternative <code>func Read() ([]byte, error)</code> API, prevents callers from pooling or reusing allocations&#8211;no amount of helper methods can fix this. As an API author, if the API cannot be changed you&#8217;ll be forced to add a second form to your API taking a supplied buffer and reimplementing your original API in terms of the newer form. Consider, for example, <code><a href="https://golang.org/src/io/io.go?s=13136:13214#L378">io.CopyBuffer</a></code>. Other examples of retrofitting APIs for performance reasons are the <code><a href="https://golang.org/cl/43990043">fmt</a></code><a href="https://golang.org/cl/43990043"> package</a> and the <code><a href="https://golang.org/cl/44080043">net/http</a></code><a href="https://golang.org/cl/44080043"> package</a> which drove the introduction of the <code>sync.Pool</code> type precisely because the Go 1 guarantee prevented the APIs of those packages from changing.</p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<p>If you want to commit to an API for the long run, consider how its design will impact the size and frequency of allocations the caller will have to make to use it.</p>\n	1677a373576eb9713798ec4dcfe083d732bd64c5	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.239931	0			'1':708 '2':337 'a':13,27,63,77,103,132,163,197,212,221,288,298,322,331,457,493,537,566,601,614,655,662 'about':15,23,44,58,586 'add':654 'address':85 'advice':33 'again':439 'allocate':492 'allocated':481 'allocates':473 'allocations':4,549,575,587,630,741 'alternative':359,441,618 'amount':632 'an':80,147,166,215,283,419,640,724 'and':65,135,145,158,214,230,275,291,459,665,692,738 'answer':324,423,476 'any':175 'api':10,68,81,97,107,192,285,354,365,421,623,641,645,660,669,725 'apis':313,433,684,712 'apologies':37 'apply':246 'are':688 'area':51 'aren':583 'arguments':157 'as':162,181,183,639 'author':642 'awkward':420 'be':35,172,326,647,651 'because':70,539,705 'before':396 'believe':425 'both':211 'brendan':39 'buf':118 'buffer':134,144,268,271,462,469,479,494,538,567,664 'buffer1':458 'buffers':385 'bufio.scanner':604 'but':343 'byte':119,126,133,164,362,446,602,621 'bytes':140,264 'call':371,450,486 'caller':102,252,437,465,534,542,578,743 'callers':7,625 'can':589,636 'cannot':646 'case':392 'catches':295 'central':312 'change':78 'changed':648 'changing':717 'checking':227,397 'choose':417 'code':30 'collector':527 'come':470 'commit':722 'common':289 'compare':352 'concerned':544,585 'concerns':87 'concurrently':518 'consider':109,195,438,676,730 'considering':91 'consult':239,278 'contents':599,608 'control':564,572 'convenient':191 'cost':74 'counsel':54 'data':161,274,377,455,510,515 'design':64,69,99,733 'designs':108 'developers':55 'do':254,394 'does':244,467 'don':1,41 'drove':697 'each':370,449,485 'easier':367 'error':121,127,148,167,216,229,280,363,399,447,622 'escape':497 'example':678 'examples':681 'fact':250 'familiar':173 'faster':507 'first':129,169,257 'fix':637 'fmt':690 'for':196,220,286,300,677,685,726 'force':3 'forced':652 'forces':532 'form':657,675 'frequency':739 'frequently':294 'from':471,626,716 'func':114,122,360,444,619 'function':443 'garbage':526 'go':176,204,225,315,412,707 'gregg':40 'guarantee':709 'guaranteed':490 'hands':580 'have':745 'heap':500 'helper':634 'helpers':593 'high':73 'higher':591 'how':731 'however':47 'i':53,424 'idiom':226 'if':350,540,581,643,718 'iff':231 'impact':735 'implications':61,94,430 'in':206,249,314,427,670 'indeed':341 'inside':482 'instead':609 'int':120 'interface':205 'interfaces':416 'into':142,266,456,568,576,600 'introduction':699 'io.copybuffer':679 'io.reader':184,200,327,356 'io.reader.read':180,407,531 'ioutil.readall':595 'is':12,49,67,185,201,233,235,282,304,308,330,340,402,477,480,489,543,552,555 'it':45,88,178,186,232,236,305,474,508,516,522,750 'its':101,732 'kind':558 'level':592 'libraries':530 'library':318 'lies':426 'like':320,594,616 'll':650 'long':728 'make':747 'making':553 'meditate':217 'method':130,170,615 'methods':113,635 'might':325 'misses':344 'moment':198,222 'more':502,512,520 'most':17,190,414 'must':253,259 'need':382,387 'net/http':694 'newcomers':297 'newer':674 'nil':234 'no':156,381,386,631 'not':188,245,403 'number':138,262,547 'occurred':150 'of':8,18,26,29,62,71,75,95,105,139,263,310,333,347,355,406,411,431,514,548,559,573,633,672,682,700,713,740 'on':5,100,218,435,448,524 'one':50,292,309,410 'only':203,276 'operation':290 'opposite':256,611 'or':165,603,628 'original':668 'other':241,680 'our':358,440,617 'out':296 'overwhelming':32 'package':691,695 'packages':715 'passing':565 'performance':16,25,60,86,93,429,686 'pervasive':415 'piece':28 'places':523 'players':302 'point':346 'pooling':627 'possibly':146 'post':14,349 'precisely':556,704 'pressure':521 'prevented':710 'prevents':624 'process':272 'program':504,551 'programmer':177 'puts':570 'r':115,123 'read':112,117,125,141,248,265,336,361,373,380,442,445,451,453,483,488,569,597,620 'reader':116,124 'reading':152 'reads':505,509,517 'reasons':687 'record':260 'reflection':332 'reimplementing':666 'remember':389 'reslice':269,384 'result':213 'retrofitting':76,683 'return':242,375,460 'returns':136,159,210 'reusing':629 'run':729 's':82,89,98,179,187,316,328,413,579 'safe':237 'second':154,656 'seems':366 'should':34,171 'signature':83,329,405,434 'size':737 'so':306 'some':160,454 'special':391 'standard':224,317,529 'starting':612 'stream':606 'streams':513 'such':287,418 'superficial':323 'supplied':663 'supply':536 'sync.pool':702 'syscall':338 't':2,42,584 'takes':131,155 'taking':661 'tale':104 'terms':671 'that':66,143,149,199,209,273,293,378 'the':6,19,24,31,59,72,92,128,137,153,189,202,223,228,240,251,255,261,267,270,279,311,334,345,353,376,390,398,404,422,428,432,436,461,464,475,478,499,501,503,506,511,519,525,528,533,541,546,557,571,574,577,598,607,610,644,673,689,693,698,701,706,711,727,736,742 'their':550 'then':277 'there':48 'therefore':484 'these':110 'they':258,561,582,588 'thing':560 'think':57 'this':11,168,219,281,321,348,364,395,401,468,554,638 'those':714 'time':20 'to':38,56,79,84,174,193,238,247,357,368,372,383,388,393,463,487,491,498,535,563,596,605,653,658,721,723,746,748 'trap':299 'true':342 'two':106,111 'type':703 'ubiquitous':182 'underlying':335 'unusual':284 'use':194,208,369,590,749 'values':243 'want':562,720 'was':379 'we':351 'when':21 'where':52,466 'which':339,495,696 'while':151 'who':472 'why':303,307,408 'widespread':207 'will':374,452,734,744 'with':36,545,613 'worry':43 'worrying':22 'worthwhile':90 'would':409,496 'written':319 'yet':46,400 'you':649,719 'young':301 'your':9,96,659,667	en	Dave Cheney
34	Parentheses or square brackets for generics?	{"ver":2,"uid":1,"hash":"SHA1:bd4846685dc535bec6756c13251d1dad45c01ed5"}	https://golangweekly.com/issues/321	2020-07-17 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#321 — July 17, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/91963/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/91964/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Golang Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/92076/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/wwxrfaf90js3e794t915.jpg" width="640" style="      line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92076/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Generics and Parentheses</a></span> — Using parentheses <code>()</code> to declare or instantiate types raised numerous concerns but the core team is now experimenting with square brackets <code>[]</code> instead – can you find any issues with this? For example, what might have previously been <code>func f((T(int))</code> could instead be <code>func f(T[int])</code> which, frankly, reads a lot better to us.<br><br><em>(Note: Annoyingly, a Google login is required to read Groups posts. If you don’t want to do this, <a href="https://golangweekly.com/link/92077/rss" style=" color: #0099b4;   ">here’s a screenshot of the post</a> you can read instead with the text in the description.)</em></p>\n  <p>Robert Griesemer </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/91965/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/87e97607.png" width="110" height="110" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91965/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Remote Instructor-Lead Go, Docker, Kubernetes, &amp; Python Training</a></span> — We offer live-streaming remote training sessions for individual engineers and companies that want to augment their knowledge in Go, Docker, Kubernetes, and Python. We’ve trained over 5,000 engineers via our carefully crafted classes.</p>\n  <p>Ardan Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92078/rss" title="dstoiko.github.io" style=" color: #0099b4;    font-size: 1.05em;">Making Pong with Go and WebAssembly</a></span> — Another fantastic example of using Go to build something that works in the <em>browser</em> by way of WebAssembly.</p>\n  <p>David Stoikovitch </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92079/rss" title="forum.golangbridge.org" style=" color: #0099b4;    font-size: 1.05em;">Go 1.14.6 and Go 1.13.14 Released</a></span> — 1.14.5 and 1.13.13 also came out a few days ago which covered two security fixes: data race in <code>net/http</code> and a X.509 verification issue on Windows. These two extra releases are more focused on minor fixes. <a href="https://golangweekly.com/link/92080/rss" style=" color: #0099b4;   ">More info here.</a></p>\n  <p>Go Forum </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n<p><strong>⚡️ Quick bytes:</strong></p>\n                  <ul>\n\n\n                 <li>We've not had time to go through them yet but <a href="https://golangweekly.com/link/92081/rss" style=" color: #0099b4; font-weight: 600;">21 talks from GopherCon Europe 2020</a> are now up to watch on YouTube.</li>\n                    \n                    <li>The Go core team are considering <a href="https://golangweekly.com/link/92082/rss" style=" color: #0099b4; font-weight: 600;">a change</a> that would make Go's minimum requirement on x86 to be.. the Pentium 4 😁 Luckily <code>gccgo</code> would continue to support 387 floating point if you <em>really</em> need it.</li>\n                    \n                    <li>GoLand 2020.2 is now in beta and here's <a href="https://golangweekly.com/link/92083/rss" style=" color: #0099b4; font-weight: 600;">everything that's new.</a>\n</li>\n                    \n                    <li>\n<a href="https://golangweekly.com/link/92084/rss" style=" color: #0099b4; font-weight: 600;">Hugo 0.74.0</a> is a significant release of the popular Go-based static site builder with huge JavaScript improvements including native and 'very fast' JavaScript bundling.</li>\n          \n                  </ul>\n\n                  </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91966/rss" title="crowdstrike.wd5.myworkdayjobs.com" style=" color: #0099b4;    font-size: 1.05em;">Sr. Software Engineer at CrowdStrike (Remote)</a></span> — CrowdStrike is the leader in cloud-delivered endpoint protection, which helps protect our customers from cybersecurity attacks.</p>\n  <p>CrowdStrike </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91967/rss" title="x-team.com" style=" color: #0099b4;    font-size: 1.05em;">Golang Developer at X-Team (Remote)</a></span> — Join the most energizing community for developers and work on projects for Riot Games, FOX, Sony, Coinbase, and more.</p>\n  <p>X-Team </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91968/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">Find a Job Through Vettery</a></span> — Use Vettery to connect with growing tech teams at startups and Fortune 500 companies.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📚 Articles &amp; Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92085/rss" title="t.co" style=" color: #0099b4;    font-size: 1.05em;">How Are Deadlocks Triggered?</a></span> — Go has a deadlock detector, but how does it work? And what are its limitations?</p>\n  <p>Vincent Blanchon </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92086/rss" title="erikwinter.nl" style=" color: #0099b4;    font-size: 1.05em;">Unit Test Outbound HTTP Requests</a></span> — Go makes it very easy to mock services, but Erik goes one step further and records external service responses so you can run your tests dependency-free.</p>\n  <p>Erik Winter </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92087/rss" title="utcc.utoronto.ca" style=" color: #0099b4;    font-size: 1.05em;">"Interface Smuggling", a Go Design Pattern for Expanding APIs</a></span> — In short, check to see if a type supports a broader API and use it.</p>\n  <p>Chris Siebenmann </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91969/rss" title="link.sqreen.com" style=" color: #0099b4;    font-size: 1.05em;">The Golang Security Checklist</a></span></p>\n  <p>Sqreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92088/rss" title="barakmich.dev" style=" color: #0099b4;    font-size: 1.05em;">PopCount on ARM64 in Go Assembler</a></span> — A useful CPU extension, a really interesting architecture, and Go’s offbeat assembler</p>\n  <p>Barak Michener </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92089/rss" title="vishnubharathi.codes" style=" color: #0099b4;    font-size: 1.05em;">Under The Hood of <code>context</code></a></span> — A guided tour through <code>context</code>’s source with the intention being to reduce the author’s worries about when and why to use it.</p>\n  <p>Vishnu Bharathi </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92090/rss" title="go101.org" style=" color: #0099b4;    font-size: 1.05em;">Use Cases for Channels</a></span> — This isn’t new but you might find it useful nonetheless and it’s delightfully code and example heavy.</p>\n  <p>Go101 </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/92091/rss" title="changelog.com" style=" color: #0099b4;    font-size: 1.05em;">Your First Week with Go</a></span> — Two developers (Jacquie Grindrod and DaShaun Carter) join Jon Calhoun to talk about their first week with Go, what worked for them and what didn’t.</p>\n  <p>Go Time Podcast <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; ">podcast</span></p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92092/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Afero: A Filesystem Abstraction System for Go</a></span> — A single consistent API for accessing a variety of filesystems. Also lets you create mock and testing filesystems that don’t rely on disk at all.</p>\n  <p>Steve Francia </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92093/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">errcheck: Checking That You Checked for Errors 🐞</a></span> — Checking for errors is a fundamental part of the Go experience and this tool will help you check that you checked!</p>\n  <p>Kamil Kisiel </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/91999/rss" title="cockroachlabs.com" style=" color: #0099b4;    font-size: 1.05em;">CockroachDB + GoLang</a></span> — CockroachDB is a highly available distributed SQL db written in Go. Start building your Go app with CockroachDB for free.</p>\n  <p>Cockroach Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92094/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">go-ordered-map: An Implementation of Ordered Maps</a></span> — Think of a map that remembers the order key-value pairs were added, so you can iterate over <code>map.Newest()</code>.</p>\n  <p>Jean Rougé </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92095/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">gRPCurl: Like curl, But for gRPC</a></span> — A command line tool for interacting with gRPC servers.</p>\n  <p>Engineering at FullStory </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92096/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">oapi-codegen: Generate Go Client and Server Boilerplate From OpenAPI 3 Specifications</a></span></p>\n  <p>DeepMap, Inc </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92097/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">gorush: A Push Notification Server Written in Go</a></span> — Supports APNS (Apple Push Notification Service) and Firebase. Now supports concurrent pushes for iOS.</p>\n  <p>Bo-Yi Wu </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92098/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Testify: Assertions and Mocks That Play Nicely with <code>testing</code></a></span></p>\n  <p>Stretchr, Inc. </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/92099/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">go-tagexpr: An Interesting Way to Add Tag Expressions to Structs</a></span> — The main use case so far is to define validations.</p>\n  <p>Bytedance Inc. </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/321/rss" width="1" height="1" />	c6bb46c243752b2dd0e3dd40fe7beb7a39c00ca1	\N	f	2020-08-14 05:06:00	2020-08-14 13:10:06.432216	0			'..':280 '0.74.0':312 '000':152 '1.13.13':196 '1.13.14':192 '1.14.5':194 '1.14.6':189 '17':9 '2020':10,253 '2020.2':299 '21':248 '3':765 '321':7 '387':290 '4':283 '5':151 '500':409 'a':70,77,96,200,214,267,314,393,420,472,485,488,508,512,528,616,622,628,661,684,716,742,770 'about':545,595 'abstraction':618 'accessing':627 'add':813 'added':727 'afero':615 'ago':203 'all':647 'also':197,632 'an':709,809 'and':19,133,145,166,190,195,213,304,332,377,387,407,428,454,491,516,547,569,574,587,605,637,668,760,783,797 'annoyingly':76 'another':168 'any':45 'api':490,625 'apis':478 'apns':778 'app':697 'apple':779 'architecture':515 'ardan':159 'are':224,254,265,415,430 'arm64':504 'articles':412 'assembler':507,520 'assertions':796 'at':341,365,405,646,752 'attacks':361 'augment':138 'author':542 'available':686 'barak':521 'based':322 'be':62,279 'been':55 'being':538 'beta':303 'better':72 'bharathi':553 'blanchon':434 'bo':792 'bo-yi':791 'boilerplate':762 'brackets':4,40 'broader':489 'browser':181 'build':175 'builder':325 'building':694 'bundling':336 'but':31,247,423,448,562,739 'by':182 'bytedance':828 'bytes':236 'calhoun':592 'came':198 'can':42,102,461,730 'carefully':156 'carter':589 'case':821 'cases':555 'change':268 'channels':557 'check':481,674 'checked':654,677 'checking':651,657 'checklist':499 'chris':494 'classes':158 'client':759 'cloud':350 'cloud-delivered':349 'cockroach':702 'cockroachdb':680,682,699 'code':573,613 'codegen':756 'coinbase':386 'command':743 'community':374 'companies':134,410 'concerns':30 'concurrent':787 'connect':400 'considering':266 'consistent':624 'context':527,532 'continue':287 'core':33,263 'could':60 'covered':205 'cpu':510 'crafted':157 'create':635 'crowdstrike':342,344,362 'curl':738 'customers':358 'cybersecurity':360 'dashaun':588 'data':209 'david':186 'days':202 'db':689 'deadlock':421 'deadlocks':416 'declare':24 'deepmap':767 'define':826 'delightfully':572 'delivered':351 'dependency':466 'dependency-free':465 'description':110 'design':474 'detector':422 'developer':364 'developers':376,584 'didn':607 'disk':645 'distributed':687 'do':92 'docker':118,143 'does':425 'don':88,641 'easy':444 'endpoint':352 'energizing':373 'engineer':340 'engineering':751 'engineers':132,153 'erik':449,468 'errcheck':650 'errors':656,659 'europe':252 'everything':307 'example':50,170,575 'expanding':477 'experience':667 'experimenting':37 'expressions':815 'extension':511 'external':456 'extra':222 'f':57,64 'fantastic':169 'far':823 'fast':334 'few':201 'filesystem':617 'filesystems':631,639 'find':44,392,565 'firebase':784 'first':579,597 'fixes':208,229 'floating':291 'focused':226 'for':5,49,130,375,381,476,556,603,620,626,655,658,700,740,746,789 'fortune':408 'forum':234 'fox':384 'francia':649 'frankly':68 'free':467,701 'from':250,359,763 'fullstory':753 'func':56,63 'fundamental':662 'further':453 'games':383 'gccgo':285 'generate':757 'generics':6,18 'go':117,142,165,173,188,191,233,243,262,272,321,418,440,473,506,517,582,600,609,621,666,692,696,706,758,776,807 'go-based':320 'go-ordered-map':705 'go-tagexpr':806 'go101':577 'goes':450 'goland':298 'golang':16,363,497,681 'google':78 'gophercon':251 'gorush':769 'griesemer':112 'grindrod':586 'groups':84 'growing':402 'grpc':741,749 'grpcurl':736 'guided':529 'had':240 'has':419 'have':53 'heavy':576 'help':672 'helps':355 'here':94,232,305 'highly':685 'hood':525 'how':414,424 'http':438 'huge':327 'hugo':311 'if':86,293,484 'implementation':710 'improvements':329 'in':108,141,179,211,302,348,479,505,691,775 'inc':768,805,829 'including':330 'individual':131 'info':231 'instantiate':26 'instead':41,61,104 'instructor':115 'instructor-lead':114 'int':59,66 'intention':537 'interacting':747 'interesting':514,810 'interface':470 'ios':790 'is':35,80,300,313,345,660,683,824 'isn':559 'issue':217 'issues':46 'it':297,426,442,493,551,566,570 'iterate':731 'its':431 'jacquie':585 'javascript':328,335 'jean':734 'job':394 'jobs':337 'join':370,590 'jon':591 'july':8 'kamil':678 'key':723 'key-value':722 'kisiel':679 'knowledge':140 'kubernetes':119,144 'labs':160,703 'lead':116 'leader':347 'lets':633 'like':737 'limitations':432 'line':744 'live':125 'live-streaming':124 'login':79 'lot':71 'luckily':284 'main':819 'make':271 'makes':441 'making':162 'map':708,717 'map.newest':733 'maps':713 'michener':522 'might':52,564 'minimum':274 'minor':228 'mock':446,636 'mocks':798 'more':225,230,388 'most':372 'native':331 'need':296 'net/http':212 'new':310,561 'nicely':801 'nonetheless':568 'not':239 'note':75 'notification':772,781 'now':36,255,301,785 'numerous':29 'oapi':755 'oapi-codegen':754 'of':98,171,184,317,526,630,664,711,715 'offbeat':519 'offer':123 'on':13,218,227,259,276,379,503,644 'one':451 'openapi':764 'or':2,25 'order':721 'ordered':707,712 'our':155,357 'out':199 'outbound':437 'over':150,732 'pairs':725 'parentheses':1,20,22 'part':663 'pattern':475 'pentium':282 'play':800 'podcast':611,612 'point':292 'pong':163 'popcount':502 'popular':319 'post':100 'posts':85 'previously':54 'projects':380 'protect':356 'protection':353 'push':771,780 'pushes':788 'python':120,146 'quick':235 'race':210 'raised':28 'read':12,83,103 'reads':69 'really':295,513 'records':455 'reduce':540 'release':316 'released':193 'releases':223 'rely':643 'remembers':719 'remote':113,127,343,369 'requests':439 'required':81 'requirement':275 'responses':458 'riot':382 'robert':111 'rougé':735 'run':462 's':95,273,306,309,518,533,543,571 'screenshot':97 'security':207,498 'see':483 'server':761,773 'servers':750 'service':457,782 'services':447 'sessions':129 'short':480 'siebenmann':495 'significant':315 'single':623 'site':324 'smuggling':471 'so':459,728,822 'software':339 'something':176 'sony':385 'source':534 'specifications':766 'sponsor':161,501,704 'sql':688 'sqreen':500 'square':3,39 'sr':338 'start':693 'startups':406 'static':323 'step':452 'steve':648 'stoikovitch':187 'streaming':126 'stretchr':804 'structs':817 'support':289 'supports':487,777,786 'system':619 't':58,65,89,560,608,642 'tag':814 'tagexpr':808 'talk':594 'talks':249 'team':34,264,368,391 'teams':404 'tech':403 'test':436 'testify':795 'testing':638,803 'tests':464 'text':107 'that':135,177,269,308,640,652,675,718,799 'the':14,32,99,106,109,180,261,281,318,346,371,496,524,536,541,665,720,818 'their':139,596 'them':245,604 'these':220 'think':714 'this':48,93,558,669 'through':244,395,531 'time':241,610 'to':23,73,82,91,137,174,242,257,278,288,399,445,482,539,549,593,812,816,825 'tool':670,745 'tools':614 'tour':530 'trained':149 'training':121,128 'triggered':417 'tutorials':413 'two':206,221,583 'type':486 'types':27 'under':523 'unit':435 'unsubscribe':11 'up':256 'us':74 'use':397,492,550,554,820 'useful':509,567 'using':21,172 'validations':827 'value':724 'variety':629 've':148,238 'verification':216 'very':333,443 'vettery':396,398,411 'via':154 'vincent':433 'vishnu':552 'want':90,136 'watch':258 'way':183,811 'we':122,147,237 'web':15 'webassembly':167,185 'week':580,598 'weekly':17 'were':726 'what':51,429,601,606 'when':546 'which':67,204,354 'why':548 'will':671 'windows':219 'winter':469 'with':38,47,105,164,326,401,535,581,599,698,748,802 'work':378,427 'worked':602 'works':178 'worries':544 'would':270,286 'written':690,774 'wu':794 'x':367,390 'x-team':366,389 'x.509':215 'x86':277 'yet':246 'yi':793 'you':43,87,101,294,460,563,634,653,673,676,729 'your':463,578,695 'youtube':260		
261	[推荐] 完了！TCP 出了大事！	{"ver":2,"uid":1,"hash":"SHA1:1fb8dfd20afd8478a0adc620082cf98916367aa2"}	https://toutiao.io/k/ohg6qxu	2020-08-14 07:10:09	[推荐] 完了！TCP 出了大事！	ae82638cb4592341c1ee73e1e16678b355d59511	\N	f	2020-08-14 07:10:00	2020-08-15 17:10:08.512456	0			'tcp':3,7 '出了大事':4,8 '完了':2,6 '推荐':1,5	zh	
36	Encrypted Credentials for Docker Login	{"ver":2,"uid":1,"hash":"SHA1:24d340ce282588b89759678284f57f86fdfc7a30"}	https://leimao.github.io/blog/Docker-Login-Encrypted-Credentials/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>When we run <code class="language-plaintext highlighter-rouge">docker login</code>, we will often see a warning message that our password is saved encrypted in the Docker configuration file.</p>\n\n<p><br /></p>\n\n<p>The warning might be ignored if the account and password to the operating system is not shared with others. However, if it is a shared account, <code class="language-plaintext highlighter-rouge">docker login</code> might put your <code class="language-plaintext highlighter-rouge">docker</code> account and password in danger. If we check the JSON file, we would find there is an unencrypted representing our password there.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: leimao\nPassword: \nWARNING! Your password will be stored unencrypted in /home/leimao/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n\n# Passwork saved as an unencrypted string in "auth".\n$ cat /home/leimao/.docker/config.json\n{\n\t"auths": {\n\t\t"https://index.docker.io/v1/": {\n\t\t\t"auth": "xxxxxxxxxxxxxxxxxxxxxxxx"\n\t\t}\n\t},\n\t"HttpHeaders": {\n\t\t"User-Agent": "Docker-Client/19.03.12 (linux)"\n\t}\n}\n\n# Docker logout to remove the saved credentials.\n$ docker logout\n</code></pre></div></div>\n\n<p>What we need to do is to follow the <a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store">credentials store guideline</a> from Docker, install and configure one of the <a href="https://github.com/docker/docker-credential-helpers/releases">credentials helpers</a>, and encrypt our password.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to briefly go over the credentials encryption set up for <code class="language-plaintext highlighter-rouge">docker login</code>.</p>\n\n<h3 id="docker-login-credentials-encryption">Docker Login Credentials Encryption</h3>\n\n<p>In my case, because I am a Linux user, so I chose to use <code class="language-plaintext highlighter-rouge">pass</code> as my credentials helper.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat /home/leimao/.docker/config.json\n{\n\t"auths": {},\n\t"HttpHeaders": {\n\t\t"User-Agent": "Docker-Client/19.03.12 (linux)"\n\t}\n}\n\n# Install the standard Unix password manager.\n$ sudo apt-get install pass\n\n# Download and install docker-credential-pass.\n# The latest version is v0.6.3.\n$ cd ~/Downloads/\n$ wget https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-pass-v0.6.3-amd64.tar.gz\n$ tar -xvf docker-credential-pass-v0.6.3-amd64.tar.gz\n# Open ~/.bashrc to modify the $PATH or move the docker-credential-pass to the $PATH.\n$ sudo rm /usr/bin/docker-credential-pass\n$ sudo mv docker-credential-pass /usr/bin/\n$ chmod +x /usr/bin/docker-credential-pass\n\n# Docker credentials helper have no credentials saved yet.\n$ docker-credential-pass list\n{}\n\n# This might be necessary if the following step hangs forever.\n# $ sudo apt-get install rng-tools\n\n# Generate encryption keys.\n$ gpg --generate-key\ngpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nNote: Use "gpg --full-generate-key" for a full featured key generation dialog.\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: leimao\nEmail address: dukeleimao@gmail.com\nYou selected this USER-ID:\n    "leimao &lt;dukeleimao@gmail.com&gt;"\n\nChange (N)ame, (E)mail, or (O)kay/(Q)uit? O\n# Following the instruction to reate the password to the user ID. \n\n# Initialize the password manager for the encryption key.\n$ pass init dukeleimao@gmail.com\nmkdir: created directory '/home/leimao/.password-store/'\nPassword store initialized for dukeleimao@gmail.com\n\n$ cat /home/leimao/.password-store/.gpg-id \ndukeleimao@gmail.com\n\n# Add "credsStore": "pass" to the JSON file.\n# So that Docker knows it has to use docker-credential-pass to manage credentials.\n$ vim ~/.docker/config.json\n\n# Now we could safely login.\n$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: leimao \nPassword: \nLogin Succeeded\n\n$ docker-credential-pass list\n{"https://index.docker.io/v1/":"leimao"}\n\n# The password is no longer saved in the Docker configuration.\n$ cat ~/.docker/config.json\n{\n\t"auths": {\n\t\t"https://index.docker.io/v1/": {}\n\t},\n\t"HttpHeaders": {\n\t\t"User-Agent": "Docker-Client/19.03.12 (linux)"\n\t},\n\t"credsStore": "pass"\n}\n</code></pre></div></div>\n\n<h3 id="caveats">Caveats</h3>\n\n<p>If we happen to screw anything up, we could restart by deleting the related files.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rm -rf ~/.docker/ ~/.password-store/ ~/.gnupg/\n</code></pre></div></div>\n\n<p>In some scenarios, especially when we SSH remotely, even with the Docker credentials helper correctly set up, we might still not be able to access the content in the Docker registry.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker pull leimao/xxxxx:1.0\nError response from daemon: pull access denied for leimao/xxxxx, repository does not exist or may require 'docker login': denied: requested access to the resource is denied\n</code></pre></div></div>\n\n<p>This is because <code class="language-plaintext highlighter-rouge">gpg</code> was not correctly invoked. This could be resolved by setting the environment variable <code class="language-plaintext highlighter-rouge">GPG_TTY</code>.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export GPG_TTY=$(tty)\n</code></pre></div></div>\n\n<p>If you are curious about what <code class="language-plaintext highlighter-rouge">tty</code> is, you might check via the following command.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tty --help\nUsage: tty [OPTION]...\nPrint the file name of the terminal connected to standard input.\n</code></pre></div></div>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store">Docker credential store</a></li>\n  <li><a href="https://github.com/docker/docker-credential-helpers/issues/102">How to Initialize Docker-Credentials-Pass</a></li>\n  <li><a href="https://github.com/docker/docker-credential-helpers/issues/158">Docker Login Succeeded, Docker Pull Failed</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Docker-Login-Encrypted-Credentials/">Encrypted Credentials for Docker Login</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 06, 2020.</p>	0dd2286b2a12090cc19eb7e2feb4104646e1eb63	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.418984	0			'/.bashrc':288 '/.docker':588 '/.docker/config.json':493,554 '/.gnupg':590 '/.password-store':589 '/19.03.12':163,252,566 '/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-pass-v0.6.3-amd64.tar.gz':283 '/downloads':279 '/engine/reference/commandline/login/#credentials-store':137 '/home/leimao/.docker/config.json':125,149,243 '/home/leimao/.password-store':461 '/home/leimao/.password-store/.gpg-id':468 '/usr/bin':312 '/usr/bin/docker-credential-pass':305,315 '/v1/':153,541,558 '06':742 '1.0':625 '2.2.19':356 '2019':359 '2020':743 'abl':613 'access':615,631,646 'account':37,55,62 'add':470 'address':415 'agent':159,248,562 'ame':427 'anyth':576 'apt':262,341 'apt-get':261,340 'august':741 'auth':147,150,154,244,555 'blog':202 'book':739 'briefli':208 'c':358 'case':225 'cat':148,242,467,553 'caveat':570 'cd':278 'chang':372,425 'check':69,685 'chmod':313 'chose':234 'client':162,251,565 'command':689 'configur':28,126,190,552 'connect':702 'construct':403 'content':617 'copyright':357 'correct':605,658 'could':496,579,661 'creat':112,459,527 'credenti':2,128,171,183,194,212,221,240,271,298,310,317,321,326,487,491,536,603,708,715,724 'credsstor':471,568 'curious':678 'daemon':629 'danger':66 'delet':582 'deni':632,644,651 'dialog':399 'directori':460 'docker':4,10,27,56,61,84,89,97,105,161,165,172,187,217,219,250,270,297,309,316,325,479,486,499,504,512,520,535,551,564,602,620,622,642,707,714,717,720,726 'docker-cli':160,249,563 'docker-credential-pass':269,296,308,324,485,534 'docker-credential-pass-v0.6.3-amd64.tar.gz':286 'docker-credentials-pass':713 'docs.docker.com':136 'docs.docker.com/engine/reference/commandline/login/#credentials-store':135 'download':266 'dukeleimao@gmail.com':416,424,457,466,469 'e':428 'email':414 'encrypt':1,24,197,213,222,348,453,723 'environ':667 'error':626 'especi':594 'even':599 'exist':638 'export':671 'extent':382 'fail':722 'featur':396 'file':29,72,476,585,697 'find':75 'follow':181,335,436,688 'forev':338 'foundat':362 'free':360,366,370 'full':390,395 'full-generate-key':389 'generat':347,352,391,398 'generate-key':351 'get':263,342 'github.com':282 'github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-pass-v0.6.3-amd64.tar.gz':281 'gnupg':355,400 'go':209 'gpg':350,354,388,655,669,672 'guidelin':185 'hang':337 'happen':573 'head':107,522 'help':691 'helper':129,195,241,318,604 'howev':49 'httpheader':156,245,559 'hub':98,513 'hub.docker.com':110,525 'id':90,106,406,422,446,505,521 'identifi':408 'ignor':34 'imag':95,510 'inc':363 'index.docker.io':152,540,557 'index.docker.io/v1/':151,539,556 'init':456 'initi':447,464,712 'input':705 'instal':188,254,264,268,343 'instruct':438 'introduct':6 'invok':659 'json':71,475 'kay':432 'key':349,353,392,397,410,454 'know':480 'latest':274 'law':385 'lei':732,735 'leimao':115,413,423,530,542 'leimao/xxxxx':624,634 'like':206 'linux':164,230,253,567 'list':328,538 'log':738 'login':5,11,57,85,86,138,218,220,498,500,501,532,643,718,727 'logout':166,173 'longer':547 'mail':429 'manag':259,450,490 'mao':733,736 'may':640 'messag':18 'might':32,58,330,609,684 'mkdir':458 'modifi':290 'move':294 'mv':307 'n':426 'name':412,698 'necessari':332 'need':176,401 'note':386 'o':431,435 'often':14 'one':113,191,528 'open':287 'oper':42 'option':694 'origin':729 'other':48 'pass':237,265,272,299,311,327,455,472,488,537,569,716 'password':21,39,64,82,116,119,199,258,442,449,462,531,544 'passwork':140 'path':292,302 'permit':383 'post':203 'print':695 'publish':730 'pull':94,509,623,630,721 'push':92,507 'put':59 'q':433 'real':411 'reat':440 'redistribut':374 'refer':706 'registri':621 'relat':584 'remot':598 'remov':131,168 'repositori':635 'repres':80 'request':645 'requir':641 'resolv':663 'resourc':649 'respons':627 'restart':580 'rf':587 'rm':304,586 'rng':345 'rng-tool':344 'run':9 'safe':497 'save':23,141,170,322,548 'scenario':593 'screw':575 'see':15,134 'select':418 'set':214,606,665 'share':46,54 'softwar':361,367 'ssh':597 'standard':256,704 'step':336 'still':610 'store':122,184,463,709 'string':145 'succeed':139,533,719 'sudo':260,303,306,339 'system':43 'tar':284 'termin':701 'tool':346 'tti':670,673,674,681,690,693 'uit':434 'unencrypt':79,123,144 'unix':257 'usag':692 'use':236,387,484 'user':158,231,247,405,421,445,561 'user-ag':157,246,560 'user-id':420 'usernam':114,529 'v0.6.3':277 'variabl':668 'version':275 'via':686 'vim':492 'warn':17,31,117,133 'warranti':379 'wget':280 'would':74,205 'x':314 'xvf':285 'xxxxxxxxxxxxxxxxxxxxxxxx':155 'yet':323	en	Lei Mao
28	Go compiler intrinsics	{"ver":2,"uid":1,"hash":"SHA1:fcbd1bcff191d729d4956cb2baff0c0548ba9ad3"}	https://dave.cheney.net/2019/08/20/go-compiler-intrinsics	2019-08-20 20:48:11	\n<p>Go allows authors to write functions in assembly if required. This is called a <em>stub</em> or <em>forward</em> declaration.</p>\n\n\n\n<pre class="wp-block-preformatted">package asm\n\n// Add returns the sum of a and b.\nfunc Add(a int64, b int64) int64</pre>\n\n\n\n<p>Here we&#8217;re declaring <code>Add</code>, a function which takes two <code>int64</code>&#8216;s and returns their sum.<code>Add</code> is a normal Go function declaration, except it is missing the function body.</p>\n\n\n\n<p>If we were to try to compile this package the compiler, justifiably, complains;</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go build</strong>\nexamples/asm\n./decl.go:4:6: missing function body</pre>\n\n\n\n<p>To satisfy the compiler we must supply a body for <code>Add</code> via assembly, which we do by adding a <code>.s</code> file in the same package.</p>\n\n\n\n<pre class="wp-block-preformatted">TEXT ·Add(SB),$0-24\n        MOVQ a+0(FP), AX\n        ADDQ b+8(FP), AX\n        MOVQ AX, ret+16(FP)\n        RET</pre>\n\n\n\n<p>Now we can build, test, and use our <code>Add</code> function just like normal Go code. But, there&#8217;s a problem, assembly functions cannot be inlined. </p>\n\n\n\n<p>This has long been a complaint by Go developers who want to use assembly either for performance or to access operations which are not exposed in the language. Some examples would be vector instructions, atomic instructions, and so on. Without the ability to inline assembly functions writing these functions in Go can have a relatively large overhead.</p>\n\n\n\n<pre class="wp-block-preformatted">var Result int64\n\nfunc BenchmarkAddNative(b *testing.B) {\n        var r int64\n        for i := 0; i &lt; b.N; i++ {\n                r = int64(i) + int64(i)\n        }\n        Result = r \n}\n\nfunc BenchmarkAddAsm(b *testing.B) {\n        var r int64\n        for i := 0; i &lt; b.N; i++ {\n                r = Add(int64(i), int64(i))\n        }\n        Result = r\n }</pre>\n\n\n\n<pre class="wp-block-preformatted">BenchmarkAddNative-8&nbsp; &nbsp; 1000000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.300 ns/op\nBenchmarkAddAsm-8 &nbsp; &nbsp; &nbsp; 606165915&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.93 ns/op</pre>\n\n\n\n<p>Over the years there have been various proposals for an inline assembly syntax similar to gcc&#8217;s <code>asm(...)</code> directive. None have been accepted by the Go team. Instead, Go has added <em>intrinsic functions</em><span id='easy-footnote-1-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-1-3803' title='This may not be their official name, however the word is in common use inside the compiler and its tests'><sup>1</sup></a></span>.</p>\n\n\n\n<p>An intrinsic function is Go code written in regular Go. These functions are known the the Go compiler which contains replacements which it can substitute during compilation. As of Go 1.13 the packages which the compiler knows about are:</p>\n\n\n\n<ul><li><code>math/bits</code></li><li><code>sync/atomic</code></li></ul>\n\n\n\n<p>The functions in these packages have baroque signatures but this lets the compiler, if your architecture supports a more efficient way of performing the operation, transparently replace the function call with comparable native instructions.</p>\n\n\n\n<p>For the remainder of this post we&#8217;ll study two different ways the Go compiler produces more efficient code using intrinsics.</p>\n\n\n\n<h2>Ones count</h2>\n\n\n\n<p>Population count, the number of <code>1</code> bits in a word, is an important cryptographic and compression primitive. Because this is an important operation most modern CPUs provide a native hardware implementation.</p>\n\n\n\n<p>The <code>math/bits</code> package exposes support for this operation via the <code>OnesCount</code> series of functions. The various <code>OnesCount</code> functions are recognised by the compiler and, depending on the CPU architecture and the version of Go,  will be replaced with the native hardware instruction.</p>\n\n\n\n<p>To see how effective this can be lets compare three different ones count implementations. The first is Kernighan&#8217;s&nbsp;Algorithm<span id='easy-footnote-2-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-2-3803' title='The C Programming Language 2nd Ed, 1998'><sup>2</sup></a></span>.</p>\n\n\n\n<pre class="wp-block-preformatted">func kernighan(x uint64) int {\n        var count int\n        for ; x &gt; 0; x &amp;= (x - 1) {\n                count++\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp;  return count &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n} &nbsp; &nbsp; </pre>\n\n\n\n<p>This algorithm has a maximum loop count of the number of bits set; the more bits set, the more loops it will take.</p>\n\n\n\n<p>The second algorithm is taken from Hacker&#8217;s Delight via <a href="https://github.com/golang/go/issues/14813">issue 14813</a>. </p>\n\n\n\n<pre class="wp-block-preformatted">func hackersdelight(x uint64) int {\n        const m1 = 0x5555555555555555\n        const m2 = 0x3333333333333333\n        const m4 = 0x0f0f0f0f0f0f0f0f\n        const h01 = 0x0101010101010101\n\n        x -= (x &gt;&gt; 1) &amp; m1\n        x = (x &amp; m2) + ((x &gt;&gt; 2) &amp; m2)\n        x = (x + (x &gt;&gt; 4)) &amp; m4\n        return int((x * h01) &gt;&gt; 56)\n } </pre>\n\n\n\n<p>Lots of clever bit twiddling allows this version to run in constant time and optimises very well if the input is a constant (the whole thing optimises away if the compiler can figure out the answer at compiler time).</p>\n\n\n\n<p>Let&#8217;s benchmark these implementations against <code>math/bits.OnesCount64</code>.</p>\n\n\n\n<pre class="wp-block-preformatted">var Result int\n\nfunc BenchmarkKernighan(b *testing.B) {\n        var r int\n        for i := 0; i &lt; b.N; i++ {\n                r = kernighan(uint64(i))\n        }\n        Result = r\n}\n\nfunc BenchmarkPopcnt(b *testing.B) {\n        var r int\n        for i := 0; i &lt; b.N; i++ {\n                r = hackersdelight(uint64(i))\n        }\n        Result = r\n}\n\nfunc BenchmarkMathBitsOnesCount64(b *testing.B) {\n        var r int\n        for i := 0; i &lt; b.N; i++ {\n                r = bits.OnesCount64(uint64(i))\n        }\n        Result = r\n}</pre>\n\n\n\n<p>To keep it fair, we&#8217;re feeding each function under test the same input; a sequence of integers from zero to <code>b.N</code>. This is fairer to Kernighan&#8217;s method as its runtime increases with the number of one bits in the input argument.<span id='easy-footnote-3-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-3-3803' title='As extra credit homework, try passing &lt;code&gt;0xdeadbeefdeadbeef&lt;/code&gt; to each function under test and observe the results.'><sup>3</sup></a></span></p>\n\n\n\n<pre class="wp-block-preformatted">BenchmarkKernighan-8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 100000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11.2 ns/op\nBenchmarkPopcnt-8 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 618312062&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.02 ns/op\nBenchmarkMathBitsOnesCount64-8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1000000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.565 ns/op </pre>\n\n\n\n<p>The winner by nearly 4x is <code>math/bits.OnesCount64</code>, but is this really using a hardware instruction, or is the compiler just doing a better job at optimising this code? Let&#8217;s check the assembly</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go test -c</strong>\n% <strong>go tool objdump -s MathBitsOnesCount popcnt-intrinsic.test</strong>\nTEXT examples/popcnt-intrinsic.BenchmarkMathBitsOnesCount64(SB) /examples/popcnt-intrinsic/popcnt_test.go\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8610 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 65488b0c2530000000&nbsp; &nbsp; &nbsp; MOVQ GS:0x30, CX\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8619 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 483b6110&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPQ 0x10(CX), SP\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f861d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7668&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JBE 0x10f8687\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f861f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4883ec20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBQ $0x20, SP\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8623 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48896c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ BP, 0x18(SP)\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8628 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488d6c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LEAQ 0x18(SP), BP\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f862d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b442428&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x28(SP), AX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8632 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31c9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL CX, CX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8634 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31d2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL DX, DX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8636 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; eb03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f863b\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8638 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48ffc1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INCQ CX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f863b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48398808010000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPQ CX, 0x108(AX)\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8642 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7e32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JLE 0x10f8676\n<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8644 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 803d29d5150000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPB $0x0, runtime.x86HasPOPCNT(SB)</strong>\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f864b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 740a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JE 0x10f8657\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f864d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4831d2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORQ DX, DX\n<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8650 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f3480fb8d1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; POPCNT CX, DX // math/bits.OnesCount64</strong>\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8655 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ebe1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f8638\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8657 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48894c2410&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ CX, 0x10(SP)\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f865c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48890c24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ CX, 0(SP)\n<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8660 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e87b28f8ff&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL math/bits.OnesCount64(SB)</strong>\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8665 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b542408&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x8(SP), DX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f866a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b442428&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x28(SP), AX\n &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f866f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b4c2410&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x10(SP), CX\n &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8674 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ebc2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f8638\n &nbsp; popcnt_test.go:50 &nbsp; &nbsp; 0x10f8676 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48891563d51500&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ DX, examples/popcnt-intrinsic.Result(SB)\n &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f867d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b6c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x18(SP), BP\n &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f8682 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4883c420&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADDQ $0x20, SP\n &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f8686 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RET\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8687 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e884eef5ff&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL runtime.morestack_noctxt(SB)\n &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f868c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; eb82&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP examples/popcnt-intrinsic.BenchmarkMathBitsOnesCount64(SB)\n &nbsp; :-1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0x10f868e &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INT $0x3\n &nbsp; :-1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0x10f868f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INT $0x3 </pre>\n\n\n\n<p>There&#8217;s quite a bit going on here, but the key take away is on line 48 (taken from the source code of the <code>_test.go</code> file) the program is using the x86 <code>POPCNT</code> instruction as we hoped. This turns out to be faster than bit twiddling.</p>\n\n\n\n<p>Of interest is the comparison two instructions prior to the <code>POPCNT</code>,</p>\n\n\n\n<pre class="wp-block-preformatted"><strong>CMPB $0x0, runtime.x86HasPOPCNT(SB)</strong></pre>\n\n\n\n<p>As not all intel CPUs support <code>POPCNT</code> the Go runtime records at startup if the CPU has the necessary support and stores the result in <code>runtime.x86HasPOPCNT</code>. Each time through the benchmark loop the program is checking <em>does the CPU have POPCNT support</em> before it issues the <code>POPCNT</code> request. </p>\n\n\n\n<p>The value of <code>runtime.x86HasPOPCNT</code> isn&#8217;t expected to change during the life of the program&#8217;s execution so the result of the check should be highly predictable making the check relatively cheap.</p>\n\n\n\n<h2>Atomic counter</h2>\n\n\n\n<p>As well as generating more efficient code, intrinsic functions are just regular Go code, the rules of inlining (including mid stack inlining) apply equally to them.</p>\n\n\n\n<p>Here&#8217;s an example of an atomic counter type. It&#8217;s got methods on types, method calls several layers deep, multiple packages, etc.</p>\n\n\n\n<pre class="wp-block-preformatted">import (\n         "sync/atomic"\n)\n\ntype counter uint64\n\nfunc (c counter) get() uint64 {\n         return atomic.LoadUint64((uint64)(c))\n}\n\nfunc (c counter) inc() uint64 {\n        return atomic.AddUint64((uint64)(c), 1)\n}\n\nfunc (c counter) reset() uint64 {\n        return atomic.SwapUint64((uint64)(c), 0)\n}\n\nvar c counter\n\nfunc f() uint64 {\n        c.inc()\n        c.get()\n        return c.reset()\n}</pre>\n\n\n\n<p>You&#8217;d be forgiven for thinking this would have a lot of overhead. However, because of the interaction between inlining and compiler intrinsics, this code collapses down to efficient native code on most platforms.</p>\n\n\n\n<pre class="wp-block-preformatted">TEXT main.f(SB) examples/counter/counter.go\n &nbsp; counter.go:23 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL\n &nbsp; counter.go:29 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b801000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVL $0x1, AX\n &nbsp; counter.go:13 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e6 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488d0d0bca0800&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LEAQ main.c(SB), CX\n<strong> &nbsp; counter.go:13 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512ed &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f0480fc101&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LOCK XADDQ AX, 0(CX) // c.inc\n</strong> &nbsp; counter.go:24 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512f2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL\n<strong> &nbsp; counter.go:10 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512f3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b05fec90800&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ main.c(SB), AX // c.get\n</strong> &nbsp; counter.go:25 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fa &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL\n &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31c0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL AX, AX\n<strong> &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fd &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488701&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XCHGQ AX, 0(CX) // c.reset\n</strong> &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x1051300 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RET </pre>\n\n\n\n<p>By way of explanation. The first operation, <code>counter.go:13</code> is <code>c.inc</code> a <code>LOCK</code>ed <code>XADDQ</code>, which on x86 is an atomic increment. The second, <code>counter.go:10</code> is <code>c.get</code> which on x86, due to its strong memory consistency model, is a regular load from memory. The final operation, <code>counter.go:16</code>, <code>c.reset</code> is an atomic exchange of the address in <code>CX</code> with <code>AX</code> which was zeroed on the previous line. This puts the value in <code>AX</code>, zero, into the address stored in <code>CX</code>. The value previously stored at <code>(CX)</code> is discarded.</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Intrinsics are a neat solution that give Go programmers access to low level architectural operations without having to extend the specification of the language. If an architecture doesn&#8217;t have a specific <code>sync/atomic</code> primitive (like some ARM variants), or a <code>math/bits</code> operation, then the compiler transparently falls back to the operation written in pure Go.</p>\n	1424ae0fa44a878cdc7cc87dfe6291a9809149b6	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.241811	0			'+0':122 '+16':133 '+8':127 '-1':987,992 '-24':119 '-8':263,268,734,739,744 '/decl.go':84 '/examples/popcnt-intrinsic/popcnt_test.go':793 '0':118,230,250,505,642,661,680,916,1222,1294,1324 '0.300':265 '0.565':746 '0x0':878,1055 '0x0101010101010101':563 '0x0f0f0f0f0f0f0f0f':560 '0x1':1279 '0x10':805,909,942 '0x10512e0':1272 '0x10512e1':1276 '0x10512e6':1282 '0x10512ed':1289 '0x10512f2':1298 '0x10512f3':1302 '0x10512fa':1310 '0x10512fb':1314 '0x10512fd':1320 '0x1051300':1328 '0x108':867 '0x10f8610':795 '0x10f8619':802 '0x10f861d':809 '0x10f861f':814 '0x10f8623':820 '0x10f8628':827 '0x10f862d':834 '0x10f8632':841 '0x10f8634':847 '0x10f8636':853 '0x10f8638':858,903,949 '0x10f863b':856,863 '0x10f8642':870 '0x10f8644':875 '0x10f864b':882 '0x10f864d':887 '0x10f8650':893 '0x10f8655':900 '0x10f8657':885,905 '0x10f865c':912 '0x10f8660':919 '0x10f8665':925 '0x10f866a':932 '0x10f866f':939 '0x10f8674':946 '0x10f8676':873,951 '0x10f867d':958 '0x10f8682':965 '0x10f8686':971 '0x10f8687':812,975 '0x10f868c':982 '0x10f868e':988 '0x10f868f':993 '0x18':824,830,961 '0x20':817,968 '0x28':837,935 '0x3':991,996 '0x30':799 '0x3333333333333333':557 '0x5555555555555555':554 '0x8':928 '1':407,508,566,1212 '1.13':335 '1.93':270 '100000000':735 '1000000000':264,745 '11.2':736 '14813':546 '2':572 '2.02':741 '31c0':1315 '31c9':842 '31d2':848 '4':85,577 '48':1013 '4831d2':888 '48398808010000':864 '483b6110':803 '4883c420':966 '4883ec20':815 '488701':1321 '48890c24':913 '48891563d51500':952 '48894c2410':906 '48896c2418':821 '488b05fec90800':1303 '488b442428':835,933 '488b4c2410':940 '488b542408':926 '488b6c2418':959 '488d0d0bca0800':1283 '488d6c2418':828 '48ffc1':859 '4x':752 '56':583 '6':86 '606165915':269 '618312062':740 '65488b0c2530000000':796 '740a':883 '7668':810 '7e32':871 '803d29d5150000':876 '90':1273,1299,1311 'a':17,29,34,44,56,97,108,121,154,165,214,362,410,429,515,605,704,760,769,1000,1242,1341,1367,1419,1447,1456 'ability':202 'about':342 'accepted':294 'access':180,1426 'add':24,33,43,100,116,144,255 'added':302 'adding':107 'addq':125,967 'address':1383,1404 'against':628 'algorithm':513,537 'algorithm2':494 'all':1060 'allows':5,589 'an':281,305,413,422,1168,1171,1348,1378,1442 'and':30,51,141,197,416,456,462,597,1078,1253 'answer':619 'apply':1162 'architectural':1430 'architecture':360,461,1443 'are':183,317,343,451,1149,1418 'argument.3':732 'arm':1453 'as':332,719,1031,1058,1140,1142 'asm':23,289 'assembly':11,102,156,174,205,283,780 'at':620,772,1069,1412 'atomic':195,1138,1172,1349,1379 'atomic.adduint64':1209 'atomic.loaduint64':1200 'atomic.swapuint64':1219 'authors':6 'away':611,1009 'ax':124,129,131,839,868,937,1280,1293,1307,1317,1318,1323,1387,1400 'b':31,36,126,223,243,635,654,673 'b.n':232,252,644,663,682,711 'b801000000':1277 'back':1464 'baroque':351 'be':159,192,468,481,1038,1130,1235 'because':419,1247 'been':164,277,293 'before':1100 'benchmark':625,1088 'benchmarkaddasm':242,267 'benchmarkaddnative':222,262 'benchmarkkernighan':634,733 'benchmarkmathbitsonescount64':672,743 'benchmarkpopcnt':653,738 'better':770 'between':1251 'bit':587,1001,1041 'bits':408,523,527,728 'bits.onescount64':685 'body':67,89,98 'bp':823,832,963 'build':82,139 'but':151,353,755,1005 'by':106,167,295,453,750,1331 'c':783,1195,1202,1204,1211,1214,1221,1224 'c.get':1230,1308,1355 'c.inc':1229,1296,1340 'c.reset':1232,1326,1376 'c3':972,1329 'call':374,921,977 'called':16 'calls':1182 'can':138,212,328,480,615 'cannot':158 'cc':989,994 'change':1114 'cheap':1137 'check':778,1128,1135 'checking':1093 'clever':586 'cmpb':877,1054 'cmpq':804,865 'code':150,310,397,775,1018,1146,1153,1257,1263 'collapses':1258 'comparable':376 'compare':483 'comparison':1047 'compilation':331 'compile':74 'compiler':2,78,93,322,340,357,393,455,614,621,766,1254,1461 'complains':80 'complaint':166 'compression':417 'conclusion':1416 'consistency':1364 'const':552,555,558,561 'constant':595,606 'contains':324 'count':401,403,487,501,509,511,518 'counter':1139,1173,1192,1196,1205,1215,1225 'counter.go:10':1301,1353 'counter.go:13':1281,1288,1338 'counter.go:16':1313,1319,1327,1375 'counter.go:23':1271 'counter.go:24':1297 'counter.go:25':1309 'counter.go:29':1275 'cpu':460,1073,1096 'cpus':427,1062 'cryptographic':415 'cx':800,806,844,845,861,866,896,908,915,944,1287,1295,1325,1385,1407,1413 'd':1234 'declaration':21,60 'declaring':42 'deep':1185 'delight':543 'depending':457 'developers':169 'different':389,485 'directive':290 'discarded':1415 'do':105 'does':1094 'doesn':1444 'doing':768 'down':1259 'due':1359 'during':330,1115 'dx':850,851,890,891,897,930,954 'e87b28f8ff':920 'e884eef5ff':976 'each':697,1084 'eb03':854 'eb82':983 'ebc2':947 'ebe1':901 'effective':478 'efficient':364,396,1145,1261 'either':175 'equally':1163 'etc':1188 'example':1169 'examples':190 'examples/asm':83 'examples/counter/counter.go':1270 'examples/popcnt-intrinsic.benchmarkmathbitsonescount64':791,985 'examples/popcnt-intrinsic.result':955 'except':61 'exchange':1380 'execution':1122 'expected':1112 'explanation':1334 'exposed':185 'exposes':436 'extend':1435 'f':1227 'f0480fc101':1290 'f3480fb8d1':894 'fair':693 'fairer':714 'falls':1463 'faster':1039 'feeding':696 'figure':616 'file':110,1022 'final':1373 'first':490,1336 'for':99,176,228,248,280,379,438,503,640,659,678,1237 'forgiven':1236 'forward':20 'fp':123,128,134 'from':540,708,1015,1370 'func':32,221,241,495,547,633,652,671,1194,1203,1213,1226 'function':45,59,66,88,145,307,373,698 'functions':9,157,206,209,316,346,446,450,1148 'functions1':304 'gcc':287 'generating':1143 'get':1197 'give':1423 'go':1,4,58,81,149,168,211,297,300,309,314,321,334,392,466,781,784,1066,1152,1424,1471 'going':1002 'got':1177 'gs':798 'h01':562,582 'hacker':541 'hackersdelight':548,666 'hardware':431,473,761 'has':162,301,514,1074 'have':213,276,292,350,1097,1241,1446 'having':1433 'here':39,1004,1166 'highly':1131 'hoped':1033 'how':477 'however':1246 'i':229,231,233,236,238,249,251,253,257,259,641,643,645,649,660,662,664,668,679,681,683,687 'if':12,68,358,601,612,1071,1441 'implementation':432 'implementations':488,627 'import':1189 'important':414,423 'in':10,111,186,210,312,347,409,594,729,1082,1384,1399,1406,1469 'inc':1206 'including':1158 'incq':860 'increases':722 'increment':1350 'inline':204,282 'inlined':160 'inlining':1157,1161,1252 'input':603,703,731 'instead':299 'instruction':474,762,1030 'instructions':194,196,378,1049 'int':499,502,551,580,632,639,658,677,990,995 'int64':35,37,38,49,220,227,235,237,247,256,258 'integers':707 'intel':1061 'interaction':1250 'interest':1044 'into':1402 'intrinsic':303,306,1147 'intrinsics':3,399,1255,1417 'is':15,55,63,308,412,421,491,538,604,713,753,756,764,1010,1025,1045,1092,1339,1347,1354,1366,1377,1414 'isn':1110 'issue':545 'issues':1102 'it':62,327,532,692,1101,1175 'its':720,1361 'jbe':811 'je':884 'jle':872 'jmp':855,902,948,984 'job':771 'just':146,767,1150 'justifiably':79 'keep':691 'kernighan':492,496,647,716 'key':1007 'known':318 'knows':341 'language':188,1440 'large':216 'layers':1184 'leaq':829,1284 'let':623,776 'lets':355,482 'level':1429 'life':1117 'like':147,1451 'line':1012,1394 'll':386 'load':1369 'lock':1291 'locked':1342 'long':163 'loop':517,1089 'loops':531 'lot':1243 'lots':584 'low':1428 'm1':553,567 'm2':556,570,573 'm4':559,578 'main.c':1285,1305 'main.f':1268 'making':1133 'math/bits':434,1457 'math/bits.onescount64':629,754,898,922 'math/bitssync/atomic':344 'mathbitsonescount':788 'maximum':516 'memory':1363,1371 'method':718,1181 'methods':1178 'mid':1159 'missing':64,87 'model':1365 'modern':426 'more':363,395,526,530,1144 'most':425,1265 'movl':1278 'movq':120,130,797,822,836,907,914,927,934,941,953,960,1304 'multiple':1186 'must':95 'native':377,430,472,1262 'nearly':751 'neat':1420 'necessary':1076 'noctxt':979 'none':291 'nopl':1274,1300,1312 'normal':57,148 'not':184,1059 'now':136 'ns/op':266,271,737,742,747 'number':405,521,725 'objdump':786 'of':28,333,366,382,406,445,465,519,522,585,706,726,1019,1043,1108,1118,1126,1156,1170,1244,1248,1333,1381,1438 'on':199,458,1003,1011,1179,1264,1345,1357,1391 'one':727 'ones':400,486 'onescount':443,449 'operation':369,424,440,1337,1374,1458,1467 'operations':181,1431 'optimises':598,610 'optimising':773 'or':19,178,763,1455 'our':143 'out':617,1036 'over':272 'overhead':217,1245 'package':22,76,114,435 'packages':337,349,1187 'performance':177 'performing':367 'platforms':1266 'popcnt':895,1029,1053,1064,1098,1104 'popcnt-intrinsic.test':789 'popcnt_test.go:45':794,801,808,813,819,826,974,981 'popcnt_test.go:47':833,840,846,852,857,862,869,904,931,938 'popcnt_test.go:48':874,881,886,892,899,911,918,924,945 'popcnt_test.go:50':950 'popcnt_test.go:51':957,964,970 'population':402 'post':384 'predictable':1132 'previous':1393 'previously':1410 'primitive':418,1450 'prior':1050 'problem':155 'produces':394 'program':1024,1091,1120 'programmers':1425 'proposals':279 'provide':428 'pure':1470 'puts':1396 'quite':999 'r':226,234,240,246,254,261,638,646,651,657,665,670,676,684,689 're':41,695 'really':758 'recognised':452 'records':1068 'regular':313,1151,1368 'relatively':215,1136 'remainder':381 'replace':371 'replaced':469 'replacements':325 'request':1105 'required':13 'reset':1216 'result':219,239,260,631,650,669,688,1081,1125 'ret':132,135,973,1330 'return':510,579,1199,1208,1218,1231 'returns':25,52 'rules':1155 'run':593 'runtime':721,1067 'runtime.morestack':978 'runtime.x86haspopcnt':879,1056,1083,1109 's':50,109,153,288,493,542,624,717,777,787,998,1121,1167,1176 'same':113,702 'satisfy':91 'sb':117,792,880,923,956,980,986,1057,1269,1286,1306 'second':536,1352 'see':476 'sequence':705 'series':444 'set':524,528 'several':1183 'should':1129 'signatures':352 'similar':285 'so':198,1123 'solution':1421 'some':189,1452 'source':1017 'sp':807,818,825,831,838,910,917,929,936,943,962,969 'specific':1448 'specification':1437 'stack':1160 'startup':1070 'stored':1405,1411 'stores':1079 'strong':1362 'stub':18 'study':387 'subq':816 'substitute':329 'sum':27 'sum.add':54 'supply':96 'support':437,1063,1077,1099 'supports':361 'sync/atomic':1190,1449 'syntax':284 't':1111,1445 'take':534,1008 'taken':539,1014 'takes':47 'team':298 'test':140,700,782 'test.go':1021 'testing.b':224,244,636,655,674 'text':115,790,1267 'than':1040 'that':1422 'the':26,65,77,92,112,187,201,273,296,319,320,336,339,345,356,368,372,380,391,404,433,442,447,454,459,463,471,489,520,525,529,535,602,607,613,618,701,724,730,748,765,779,1006,1016,1020,1023,1027,1046,1052,1065,1072,1075,1080,1087,1090,1095,1103,1106,1116,1119,1124,1127,1134,1154,1249,1335,1351,1372,1382,1392,1397,1403,1408,1436,1439,1460,1466 'their':53 'them':1165 'then':1459 'there':152,275,997 'these':208,315,348,626 'thing':609 'thinking':1238 'this':14,75,161,354,383,420,439,479,512,590,712,757,774,1034,1239,1256,1395 'three':484 'through':1086 'time':596,622,1085 'to':7,71,73,90,172,179,203,286,475,592,690,710,715,1037,1051,1113,1164,1260,1360,1427,1434,1465 'tool':785 'transparently':370,1462 'try':72 'turns':1035 'twiddling':588,1042 'two':48,388,1048 'type':1174,1191 'types':1180 'uint64':498,550,648,667,686,1193,1198,1201,1207,1210,1217,1220,1228 'under':699 'use':142,173 'using':398,759,1026 'value':1107,1398,1409 'var':218,225,245,500,630,637,656,675,1223 'variants':1454 'various':278,448 'vector':193 'version':464,591 'very':599 'via':101,441,544 'want':171 'was':1389 'way':365,1332 'ways':390 'we':40,69,94,104,137,385,694,1032 'well':600,1141 'were':70 'which':46,103,182,323,326,338,1344,1356,1388 'who':170 'whole':608 'will':467,533 'winner':749 'with':375,470,723,1386 'without':200,1432 'word':411 'would':191,1240 'write':8 'writing':207 'written':311,1468 'x':497,504,506,507,549,564,565,568,569,571,574,575,576,581 'x86':1028,1346,1358 'xaddq':1292,1343 'xchgq':1322 'xorl':843,849,1316 'xorq':889 'years':274 'you':1233 'your':359 'zero':709,1401 'zeroed':1390	en	Dave Cheney
262	[推荐] 分布式系统中只有两个难题	{"ver":2,"uid":1,"hash":"SHA1:0ae10d5040ffd25a25a01b44700d8f9159300b36"}	https://toutiao.io/k/m1t8wi6	2020-08-14 07:10:09	[推荐] 分布式系统中只有两个难题	862f981eed3c37dd293424879357d04cec1989fa	\N	f	2020-08-14 07:10:00	2020-08-18 15:10:10.81186	0			'分布式系统中只有两个难题':2,4 '推荐':1,3	zh	
254	[推荐] PB 级大规模 Elasticsearch 集群运维与调优实践	{"ver":2,"uid":1,"hash":"SHA1:6352f2d68efa3a1dea1c33f884ab4ea2c956fbd9"}	https://toutiao.io/k/w3c3n1w	2020-08-14 06:10:09	[推荐] PB 级大规模 Elasticsearch 集群运维与调优实践	6e0397f462593a25932594771751ad3240974bd8	\N	f	2020-08-14 06:10:00	2020-08-23 16:10:09.160501	0			'elasticsearch':4,9 'pb':2,7 '推荐':1,6 '级大规模':3,8 '集群运维与调优实践':5,10	zh	
730	开发模型的演化	{"ver":2,"uid":1,"hash":"SHA1:96c45180fe78c5ecd0fd3cf9bae55f6c77293568"}	https://toutiao.io/k/hx1jka3	2020-08-29 02:10:09	开发模型的演化	7af91f9e44a093737038953aaba1d8fe325dbf95	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.200488	0			'开发模型的演化':1,2	zh	
63	Young children would rather explore than get rewards	{"ver":2,"uid":1,"hash":"SHA1:fdd15bf7840cf83920729e47ea5ab45df7877bd4"}	https://news.osu.edu/young-children-would-rather-explore-than-get-rewards/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24139261"> https://news.ycombinator.com/item?id=24139261 </a>	8a887a8a81976e26518d7083ef3b3ae0af44cf8e	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.28662	0			'/item?id=24139261':12 'children':2 'comment':9 'explor':5 'get':7 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24139261':10 'rather':4 'reward':8 'would':3 'young':1	zh	kyle_morris_
66	Rob Pike's Rules of Programming (1989)	{"ver":2,"uid":1,"hash":"SHA1:028aab8875e1b90273dbe7ce72b459ace281e0f7"}	http://users.ece.utexas.edu/~adnan/pike.html	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24135189"> https://news.ycombinator.com/item?id=24135189 </a>	4a8685ca6377f059dc5491e40a5b40adfc316e0f	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.292724	0			'/item?id=24135189':11 '1989':7 'comment':8 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24135189':9 'pike':2 'program':6 'rob':1 'rule':4	zh	gjvc
43	Multiprocessing VS Threading VS AsyncIO in Python	{"ver":2,"uid":1,"hash":"SHA1:2ac556de483fcc46f7c71f310e6904c303f74d7f"}	https://leimao.github.io/blog/Python-Concurrency-High-Level/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In modern computer programming, concurrency is often required to accelerate solving a problem. In Python programming, we usually have the three library options to achieve concurrency, <a href="https://docs.python.org/3/library/multiprocessing.html"><code class="language-plaintext highlighter-rouge">multiprocessing</code></a>, <a href="https://docs.python.org/3/library/threading.html"><code class="language-plaintext highlighter-rouge">threading</code></a>, and <a href="https://docs.python.org/3/library/asyncio.html"><code class="language-plaintext highlighter-rouge">asyncio</code></a>. Recently, I was aware that as a scripting language Python’s behavior of concurrency has subtle differences compared to the conventional compiled languages such as C/C++.</p>\n\n<p><br /></p>\n\n<p><a href="https://realpython.com/">Real Python</a> has already given a good <a href="https://realpython.com/python-concurrency/">tutorial</a> with <a href="https://github.com/realpython/materials/tree/master/concurrency-overview">code examples</a> on Python concurrency. In this blog post, I would like to discuss the <code class="language-plaintext highlighter-rouge">multiprocessing</code>, <code class="language-plaintext highlighter-rouge">threading</code>, and <code class="language-plaintext highlighter-rouge">asyncio</code> in Python from a high-level, with some additional caveats that the Real Python tutorial has not mentioned. I have also borrowed some good diagrams from their tutorial and the readers should give the credits to them on those illustrations.</p>\n\n<h3 id="cpu-bound-vs-io-bound">CPU-Bound VS I/O-Bound</h3>\n\n<p>The problems that our modern computers are trying to solve could be generally categorized as CPU-bound or I/O-bound. Whether the problem is CPU-bound or I/O-bound affects our selection from the concurrency libraries <code class="language-plaintext highlighter-rouge">multiprocessing</code>, <code class="language-plaintext highlighter-rouge">threading</code>, and <code class="language-plaintext highlighter-rouge">asyncio</code>. Of course, in some scenarios, the algorithm design for solving the problem might change the problem from CPU-bound to I/O-bound or vice versa. The concept of CPU-bound and I/O-bound are universal for all programming languages.</p>\n\n<h4 id="cpu-bound">CPU-Bound</h4>\n\n<p>CPU-bound refers to a condition when the time for it to complete the task is determined principally by the speed of the central processor. The faster clock-rate CPU we have, the higher performance of our program will have.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-11-Python-Concurrency-High-Level/CPUBound.webp" style="width: 80%; height: 80%" />\n    <figcaption>Single-Process Single-Thread Synchronous for CPU-Bound</figcaption>\n</figure>\n</div>\n\n<p>Most of single computer programs are CPU-bound. For example, given a list of numbers, computing the sum of all the numbers in the list.</p>\n\n<h4 id="io-bound">I/O-Bound</h4>\n\n<p>I/O bound refers to a condition when the time it takes to complete a computation is determined principally by the period spent waiting for input/output operations to be completed. This is the opposite of a task being CPU bound. Increasing CPU clock-rate will not increase the performance of our program significantly. On the contrary, if we have faster I/O, such as faster memory I/O, hard drive I/O, network I/O, etc, the performance of our program will boost.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-11-Python-Concurrency-High-Level/IOBound.webp" style="width: 80%; height: 80%" />\n    <figcaption>Single-Process Single-Thread Synchronous for I/O-Bound</figcaption>\n</figure>\n</div>\n\n<p>Most of the web service related programs are I/O-bound. For example, given a list of restaurant names, finding out their ratings on Yelp.</p>\n\n<h3 id="process-vs-thread-in-python">Process VS Thread in Python</h3>\n\n<h4 id="process-in-python">Process in Python</h4>\n\n<p>A <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">global interpreter lock</a> (GIL) is a mechanism used in computer-language interpreters to synchronize the execution of threads so that only one native thread can execute at a time. An interpreter that uses GIL always allows exactly one native thread to execute at a time, even if run on a multi-core processor. Note that the native thread here is the number of threads in the physical CPU core, instead of the thread concept in the programming languages.</p>\n\n<p><br /></p>\n\n<p>Because Python interpreter uses GIL, a single-process Python program could only use one native thread during execution. That means single-process Python program could not utilize CPU more than 100% (we define the full utilization of a native thread to be 100%) regardless whether it is single-process single-thread or single-process multi-thread. Conventional compiled programming languages, such as C/C++, do not have interpreter, not even mention GIL. Therefore, for a single-process multi-thread C/C++ program, it could utilize many CPU cores and many native threads, and the CPU utilization could be greater than 100%.</p>\n\n<p><br /></p>\n\n<p>Therefore, for a CPU-bound task in Python, we would have to write multi-process Python program to maximize its performance.</p>\n\n<h4 id="thread-in-python">Thread in Python</h4>\n\n<p>Because a single-process Python could only use one CPU native thread. No matter how many threads were used in a single-process Python program, a single-process multi-thread Python program could only achieve at most 100% CPU utilization.</p>\n\n<p><br /></p>\n\n<p>Therefore, for a CPU-bound task in Python, single-process multi-thread Python program would not improve the performance. However, this does not mean multi-thread is useless in Python. For a I/O-bound task in Python, multi-thread could be used to improve the program performance.</p>\n\n<h3 id="multiprocessing-vs-threading-vs-asyncio-in-python">Multiprocessing VS Threading VS AsyncIO in Python</h3>\n\n<h4 id="multiprocessing">Multiprocessing</h4>\n\n<p>Using Python <code class="language-plaintext highlighter-rouge">multiprocessing</code>, we are able to run a Python using multiple processes. In principle, a multi-process Python program could fully utilize all the CPU cores and native threads available, by creating multiple Python interpreters on many native threads. Because all the processes are independent to each other, and they don’t share memory. To do collaborative tasks in Python using <code class="language-plaintext highlighter-rouge">multiprocessing</code>, it requires to use the API provided the operating system. Therefore, there will be slightly large overhead.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-11-Python-Concurrency-High-Level/CPUMP.webp" style="width: 80%; height: 80%" />\n    <figcaption>Multi-Process for CPU-Bound</figcaption>\n</figure>\n</div>\n\n<p>Therefore, for a CPU-bound task in Python, <code class="language-plaintext highlighter-rouge">multiprocessing</code> would be a perfect library to use to maximize the performance.</p>\n\n<h4 id="threading">Threading</h4>\n\n<p>Using Python <code class="language-plaintext highlighter-rouge">threading</code>, we are able to make better use of the CPU sitting idle when waiting for the I/O. By overlapping the waiting time for requests, we are able to improve the performance. In addition, because all the threads share the same memory, to do collaborative tasks in Python using <code class="language-plaintext highlighter-rouge">threading</code>, we would have to be careful and use locks when necessary. Lock and unlock make sure that only one thread could write to memory at one time, but this will also introduce some overhead. Note that the threads we discussed here are different to the native threads in CPU core. The number of native threads in CPU core is usually 2 nowadays, but the number of threads in a single-process Python program could be much larger than 2.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-11-Python-Concurrency-High-Level/Threading.webp" style="width: 60%; height: 60%" />\n    <figcaption>Single-Process Multi-Thread for I/O-Bound</figcaption>\n</figure>\n</div>\n\n<p>Therefore, for a I/O-bound task in Python, <code class="language-plaintext highlighter-rouge">threading</code> could be a good library candidate to use to maximize the performance.</p>\n\n<p><br /></p>\n\n<p>It should also be noted that all the threads are in a pool and there is an executer from the operating system managing the threads deciding who to run and when to run. This can be a short-coming of <code class="language-plaintext highlighter-rouge">threading</code> because the operating system actually knows about each thread and can interrupt it at any time to start running a different thread. This is called pre-emptive multitasking since the operating system can pre-empt your thread to make the switch.</p>\n\n<h4 id="asyncio">AsyncIO</h4>\n\n<p>Given <code class="language-plaintext highlighter-rouge">threading</code> is using multi-thread to maximize the performance of a I/O-bound task in Python, we wonder if using multi-thread is necessary. The answer is no, if you know when to switch the tasks. For example, for each thread in a Python program using <code class="language-plaintext highlighter-rouge">threading</code>, it will really stay idle between the request is sent and the result is returned. If somehow a thread could know the time I/O request has been sent, it could switch to do another task, without staying idle, and one thread should be sufficient to manage all these tasks. Without the thread management overhead, the execution should be faster for a I/O-bound task. Obviously, <code class="language-plaintext highlighter-rouge">threading</code> could not do it, but we have <code class="language-plaintext highlighter-rouge">asyncio</code>.</p>\n\n<p><br /></p>\n\n<p>Using Python <code class="language-plaintext highlighter-rouge">asyncio</code>, we are also able to make better use of the CPU sitting idle when waiting for the I/O. What’s different to <code class="language-plaintext highlighter-rouge">threading</code> is that, <code class="language-plaintext highlighter-rouge">asyncio</code> is single-process and single-thread. There is an event loop in <code class="language-plaintext highlighter-rouge">asyncio</code> which routinely measure the progress of the tasks. If the event loop has measured any progress, it would schedule another task for execution, therefore, minimizing the time spent on waiting I/O. This is also called cooperative multitasking. The tasks must cooperate by announcing when they are ready to be switched out.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-11-Python-Concurrency-High-Level/Asyncio.webp" style="width: 50%; height: 50%" />\n    <figcaption>Single-Process Single-Thread Asynchronous for I/O-Bound</figcaption>\n</figure>\n</div>\n\n<p>The short-coming of <code class="language-plaintext highlighter-rouge">asyncio</code> is that the even loop would not know what are the progresses if we don’t tell it. This requires some additional effort when we write the programs using <code class="language-plaintext highlighter-rouge">asyncio</code>.</p>\n\n<h3 id="summary">Summary</h3>\n\n<style type="text/css">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}\n.tg .tg-uzvj{border-color:inherit;font-weight:bold;text-align:center;vertical-align:middle}\n</style>\n\n<table class="tg">\n<thead>\n  <tr>\n    <th class="tg-uzvj">Concurrency Type</th>\n    <th class="tg-uzvj">Features</th>\n    <th class="tg-uzvj">Use Criteria</th>\n    <th class="tg-uzvj">Metaphor</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class="tg-9wq8">Multiprocessing</td>\n    <td class="tg-9wq8">Multiple processes, high CPU utilization.</td>\n    <td class="tg-9wq8">CPU-bound</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">We have ten kitchens, ten chefs, ten dishes to cook.</span></td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">Threading</td>\n    <td class="tg-9wq8">Single process, multiple threads, pre-emptive multitasking, OS decides task switching.</td>\n    <td class="tg-9wq8">Fast I/O-bound</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">We have one kitchen, ten chefs, ten dishes to cook. The kitchen is crowded when the ten chefs are present together.</span></td>\n  </tr>\n  <tr>\n    <td class="tg-9wq8">AsyncIO</td>\n    <td class="tg-9wq8">Single process, single thread, cooperative multitasking, tasks cooperatively decide switching.</td>\n    <td class="tg-9wq8">Slow I/O-bound</td>\n    <td class="tg-9wq8"><span style="font-weight:400;font-style:normal">We have one kitchen, one chef, ten dishes to cook. </span></td>\n  </tr>\n</tbody>\n</table>\n\n<h3 id="caveats">Caveats</h3>\n\n<h4 id="htop-vs-top">HTOP vs TOP</h4>\n\n<p><code class="language-plaintext highlighter-rouge">htop</code> would sometimes misinterpret multi-thread Python programs as multi-process programs, as it would show multiple <code class="language-plaintext highlighter-rouge">PID</code>s for the Python program. <code class="language-plaintext highlighter-rouge">top</code> does not have this problem. On StackOverflow, there is also a such <a href="https://stackoverflow.com/questions/38544265/multithreaded-python-program-starting-multiple-processes">observation</a>.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://realpython.com/python-concurrency/">Speed Up Your Python Program With Concurrency</a></li>\n  <li><a href="http://masnun.rocks/2016/10/06/async-python-the-different-forms-of-concurrency/">Async Python: The Different Forms of Concurrency</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Python-Concurrency-High-Level/">Multiprocessing VS Threading VS AsyncIO in Python</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 11, 2020.</p>	8348f3ce32214af66a39226443420df8ac51f88d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.43709	0			'0':1364 '100':533,545,607,675 '10px':1393,1431 '11':1635 '14px':1389,1423 '1px':1378,1412 '2':959,978 '2020':1636 '5px':1394,1432 '9wq8':1440 'abl':742,852,876,1221 'acceler':18 'achiev':33,672 'actual':1053 'addit':102,882,1346 'affect':168 'algorithm':185 'align':1447,1451,1467,1471 'allow':457 'alreadi':68 'also':114,929,1009,1220,1292,1595 'alway':456 'announc':1301 'anoth':1175,1278 'answer':1120 'api':806 'arial':1382,1416 'async':1607 'asynchron':1316 'asyncio':5,38,92,178,733,1092,1214,1217,1243,1258,1324,1354,1534,1618 'avail':768 'awar':42 'behavior':50 'better':855,1224 'black':1370,1404 'blog':81 'bold':1464 'book':1632 'boost':379 'border':1358,1362,1368,1372,1376,1402,1406,1410,1442,1458 'border-collaps':1357 'border-color':1367,1401,1441,1457 'border-spac':1361 'border-styl':1371,1405 'border-width':1375,1409 'borrow':115 'bound':136,156,165,198,209,220,223,273,282,302,339,613,683,824,830,1487 'break':1397,1435 'c/c':64,569,587 'call':1073,1293 'candid':1000 'care':904 'categor':152 'caveat':103,1557 'center':1448,1468 'central':245 'chang':192 'chef':1493,1518,1530,1552 'clock':250,343 'clock-rat':249,342 'code':74 'collabor':795,893 'collaps':1359,1360 'color':1369,1403,1443,1459 'come':1046,1322 'compar':56 'compil':60,564 'complet':234,313,329 'comput':11,144,277,290,315,431 'computer-languag':430 'concept':205,496 'concurr':13,34,52,78,173,1473,1606,1613 'condit':227,306 'contrari':356 'convent':59,563 'cook':1497,1522,1556 'cooper':1294,1299,1539,1542 'core':474,491,594,764,948,956 'could':149,512,527,590,603,640,670,721,758,919,973,995,1161,1171,1207 'cours':180 'cpu':135,155,164,197,208,219,222,252,272,281,338,341,490,530,593,601,612,644,676,682,763,823,829,859,947,955,1228,1483,1486 'cpu-bound':134,154,163,196,207,218,221,271,280,611,681,822,828,1485 'creat':770 'credit':128 'criteria':1477 'crowd':1526 'decid':1032,1508,1543 'defin':535 'design':186 'determin':238,317 'diagram':118 'differ':55,941,1069,1238,1610 'discuss':87,938 'dish':1495,1520,1554 'drive':368 'effort':1347 'empt':1085 'emptiv':1076,1505 'etc':372 'even':467,575,1328 'event':1255,1269 'exact':458 'exampl':75,284,399,1132 'execut':437,447,463,519,1024,1197,1281 'famili':1381,1415 'fast':1511 'faster':248,360,364,1200 'featur':1475 'find':406 'font':1380,1387,1414,1421,1425,1462 'font-famili':1379,1413 'font-siz':1386,1420 'font-weight':1424,1461 'form':1611 'full':537 'fulli':759 'general':151 'gil':424,455,505,577 'give':126 'given':69,285,400,1093 'global':421 'good':71,117,998 'greater':605 'hard':367 'hidden':1391,1429 'high':98,1482 'high-level':97 'higher':256 'howev':700 'htop':1558,1561 'i/o':301,361,366,369,371,866,1165,1235,1289 'i/o-bound':138,158,167,200,211,300,388,397,714,986,990,1106,1203,1318,1512,1546 'idl':861,1146,1179,1230 'illustr':133 'improv':697,725,878 'increas':340,347 'independ':783 'inherit':1444,1460 'input/output':325 'instead':492 'interpret':422,433,452,503,573,773 'interrupt':1060 'introduc':930 'introduct':8 'juli':1634 'kitchen':1491,1516,1524,1550 'know':1054,1125,1162,1332 'languag':47,61,217,432,500,566 'larg':816 'larger':976 'lei':1625,1628 'level':99 'librari':30,174,839,999 'like':85 'list':287,299,402 'lock':423,907,910 'log':1631 'loop':1256,1270,1329 'make':854,913,1089,1223 'manag':1029,1187,1194 'mani':592,596,650,775 'mao':1626,1629 'matter':648 'maxim':628,843,1004,1101 'mean':521,704 'measur':1261,1272 'mechan':427 'memori':365,792,890,922 'mention':111,576 'metaphor':1478 'middl':1452,1472 'might':191 'minim':1283 'misinterpret':1564 'modern':10,143 'much':975 'multi':473,561,585,623,666,691,706,719,754,819,983,1098,1115,1566,1572 'multi-cor':472 'multi-process':622,753,818,1571 'multi-thread':560,584,665,690,705,718,982,1097,1114,1565 'multipl':748,771,1480,1501,1579 'multiprocess':1,35,89,175,729,736,739,800,834,1479,1614 'multitask':1077,1295,1506,1540 'must':1298 'name':405 'nativ':444,460,479,516,541,597,645,766,776,944,952 'necessari':909,1118 'network':370 'normal':1398,1427,1436 'note':476,933,1011 'nowaday':960 'number':289,296,484,950,963 'observ':1598 'obvious':1205 'often':15 'one':443,459,515,643,917,924,1181,1515,1549,1551 'oper':326,809,1027,1051,1080 'opposit':333 'option':31 'origin':1622 'os':1507 'overflow':1390,1428 'overhead':817,932,1195 'overlap':868 'pad':1392,1430 'perfect':838 'perform':257,349,374,630,699,728,845,880,1006,1103 'period':321 'physic':489 'pid':1580 'pool':1019 'post':82 'pre':1075,1084,1504 'pre-empt':1074,1083,1503 'present':1532 'princip':239,318 'principl':751 'problem':21,140,161,190,194,1590 'process':265,382,412,417,509,524,552,559,583,624,638,658,664,689,749,755,781,820,970,981,1247,1312,1481,1500,1536,1573 'processor':246,475 'program':12,24,216,260,278,352,377,395,499,511,526,565,588,626,660,669,694,727,757,972,1139,1352,1569,1574,1584,1604 'progress':1263,1274,1336 'provid':807 'publish':1623 'python':7,23,48,66,77,94,107,416,419,502,510,525,616,625,633,639,659,668,686,693,711,717,735,738,746,756,772,798,833,848,896,971,993,1109,1138,1216,1568,1583,1603,1608,1620 'rate':251,344,409 'reader':124 'readi':1305 'real':65,106 'realli':1144 'recent':39 'refer':224,303,1599 'regardless':546 'relat':394 'request':873,1149,1166 'requir':16,802,1344 'restaur':404 'result':1154 'return':1156 'routin':1260 'run':469,744,1035,1039,1067 'san':1384,1418 'sans-serif':1383,1417 'scenario':183 'schedul':1277 'script':46 'select':170 'sent':1151,1169 'serif':1385,1419 'servic':393 'share':791,887 'short':1045,1321 'short-com':1044,1320 'show':1578 'signific':353 'sinc':1078 'singl':264,267,276,381,384,508,523,551,554,558,582,637,657,663,688,969,980,1246,1250,1311,1314,1499,1535,1537 'single-process':263,380,507,522,550,557,581,636,656,662,687,968,979,1245,1310 'single-thread':266,383,553,1249,1313 'sit':860,1229 'size':1388,1422 'slight':815 'slow':1545 'solid':1374,1408 'solv':19,148,188 'somehow':1158 'sometim':1563 'space':1363 'speed':242,1600 'spent':322,1286 'stackoverflow':1592 'start':1066 'stay':1145,1178 'style':1373,1407 'subtl':54 'suffici':1185 'sum':292 'summari':1355 'sure':914 'switch':1091,1128,1172,1308,1510,1544 'synchron':269,386,435 'system':810,1028,1052,1081 'take':311 'task':236,336,614,684,715,796,831,894,991,1107,1130,1176,1190,1204,1266,1279,1297,1509,1541 'td':1366 'tell':1341 'ten':1490,1492,1494,1517,1519,1529,1553 'text':1446,1466 'text-align':1445,1465 'tg':1356,1365,1399,1437,1439,1453,1455 'tg-9wq8':1438 'tg-uzvj':1454 'th':1400 'therefor':578,608,678,811,825,987,1282 'thread':3,36,90,176,268,385,414,439,445,461,480,486,495,517,542,555,562,586,598,631,646,651,667,692,707,720,731,767,777,846,849,886,898,918,936,945,953,965,984,994,1015,1031,1048,1057,1070,1087,1094,1099,1116,1135,1141,1160,1182,1193,1206,1240,1251,1315,1498,1502,1538,1567,1616 'three':29 'time':230,309,450,466,871,925,1064,1164,1285 'togeth':1533 'top':1560,1585 'tri':146 'tutori':72,108,121 'type':1474 'univers':213 'unlock':912 'use':428,454,504,514,642,653,723,737,747,799,804,841,847,856,897,906,1002,1096,1113,1140,1215,1225,1353,1476 'useless':709 'usual':26,958 'util':529,538,591,602,677,760,1484 'uzvj':1456 'versa':203 'vertic':1450,1470 'vertical-align':1449,1469 'vice':202 'vs':2,4,137,413,730,732,1559,1615,1617 'wait':323,863,870,1232,1288 'web':392 'weight':1426,1463 'whether':159,547 'width':1377,1411 'without':1177,1191 'wonder':1111 'word':1396,1434 'word-break':1395,1433 'would':84,618,695,835,900,1276,1330,1562,1577 'write':621,920,1350 'yelp':411	en	Lei Mao
61	Uber and Lyft ordered by California judge to classify drivers as employees	{"ver":2,"uid":1,"hash":"SHA1:ceac21a1a4afba523b455bbb3aa3b7ac1ec84c9b"}	https://www.theverge.com/2020/8/10/21362460/uber-lyft-drivers-employees-california-court-ruling	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24114206"> https://news.ycombinator.com/item?id=24114206 </a>	74ef18f325a117352d9ea88e7e8e571a09423cfc	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.282358	0			'/item?id=24114206':16 'california':6 'classifi':9 'comment':13 'driver':10 'employe':12 'judg':7 'lyft':3 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24114206':14 'order':4 'uber':1	zh	uptown
86	Go 1.15 正式发布：看看都有哪些值得关注的变化	{"ver":2,"uid":1,"hash":"SHA1:4c2f7f35d5826a89a4c72dc3cc5d68c0ae89011d"}	https://toutiao.io/k/5v93wii	2020-08-14 06:10:09	Go 1.15 正式发布：看看都有哪些值得关注的变化	59cde514ce1c026f8409d1d1130288f7783b4656	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.381791	0			'1.15':2,6 'go':1,5 '正式发布':3,7 '看看都有哪些值得关注的变化':4,8	zh	
40	Simon's Algorithm	{"ver":2,"uid":1,"hash":"SHA1:420dd080728859b1c276668a19a92329c056d86a"}	https://leimao.github.io/blog/Simon-Algorithm/	2020-08-22 00:10:07	<h3 id="introduction">Introduction</h3>\n\n<p>Simon’s algorithm is a quantum computing algorithm invented to solve a contrived problem which is called Simon’s problem. Compared to one of the other quantum computing algorithms, <a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa algorithm</a>, which only requires to run once, Simon’s algorithm requires to run the algorithm multiple times, yet it is still able to solve Simon’s problem exponentially faster asymptotically running on quantum circuits than the best conventional probabilistic algorithm running on classical circuits.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss Simon’s problem in details.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<h4 id="xor-properties">XOR Properties</h4>\n\n<ul>\n  <li><em>Commutativity</em>: $A \\oplus B = B \\oplus A$</li>\n  <li><em>Associativity</em>: $A \\oplus (B \\oplus C) = (A \\oplus B) \\oplus C$</li>\n  <li><em>Identity element</em>: $A \\oplus 0 = A$</li>\n  <li><em>Self-invertible</em>:  $A \\oplus A = 0$</li>\n</ul>\n\n<h4 id="reducing-sum-or-difference-to-boolean">Reducing Sum or Difference to Boolean</h4>\n\n<p>If $x$ and $y$ are binary values, $x, y \\in \\{0, 1\\}$, we have</p>\n\n\\[\\begin{align}\n(-1)^{x + y} &amp;= (-1)^{x \\oplus y} \\\\\n(-1)^{x - y} &amp;= (-1)^{x \\oplus y} \\\\\n\\end{align}\\]\n\n<p>where $\\oplus$ is $\\text{XOR}$ (binary addition modulo 2). This could be easily verified using truth table.</p>\n\n<h4 id="inner-product-and-inner-product-space-for-binary-vector-space">Inner Product and Inner Product Space for Binary Vector Space</h4>\n\n<p>In the previous <a href="https://leimao.github.io/blog/Inner-Product/">blog post</a>, we have defined the inner product and inner product space for complex vector space. Similarly, we could also define the inner product and inner product space for binary vector space.</p>\n\n\\[\\begin{align}\n\\langle -, - \\rangle : \\{0,1\\}^n \\times \\{0,1\\}^n \\rightarrow \\{0,1\\}\n\\end{align}\\]\n\n<p>Given two binary vectors $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$, $\\mathbf{x} = \\{x_0, x_1, \\cdots, x_{n-1}\\}$ and $\\mathbf{y} = \\{y_0, y_1, \\cdots, y_{n-1}\\}$, the inner product of $\\mathbf{x}$ and $\\mathbf{y}$ is defined as</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{y} \\rangle &amp;= (x_0 \\wedge y_0) \\oplus (x_1 \\wedge y_1) \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\\\\n&amp;= \\bigoplus_{i=0}^{n-1} (x_i \\wedge y_i )\n\\end{align}\\]\n\n<p>which is somewhat similar to the inner product definition for real vector space.</p>\n\n<p><br /></p>\n\n<p>The bitwise exclusive-or operation $\\oplus$ was also defined for binary vectors $\\mathbf{x}$ and $\\mathbf{y}$ of the same length. Given two binary vectors $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$, $\\mathbf{x} = \\{x_0, x_1, \\cdots, x_{n-1}\\}$ and $\\mathbf{y} = \\{y_0, y_1, \\cdots, y_{n-1}\\}$,</p>\n\n\\[\\begin{align}\n\\mathbf{x} \\oplus \\mathbf{y} = \\{x_0 \\oplus y_0, x_1 \\oplus y_1, \\cdots, x_{n-1} \\oplus y_{n-1}\\}\n\\end{align}\\]\n\n<p>The following inner product properties are satisfied based on the above inner product definition.</p>\n\n<p><br /></p>\n\n<p>Given $\\mathbf{x}, \\mathbf{x}^{\\prime}, \\mathbf{y}, \\mathbf{y}^{\\prime} \\in \\{0,1\\}^n$, using the $\\text{XOR}$ distributivity property we derived above,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x} \\oplus \\mathbf{x}^{\\prime}, \\mathbf{y} \\rangle &amp;= \\big((x_0 \\oplus x_0^{\\prime})\\wedge y_0\\big) \\oplus \\big((x_1 \\oplus x_1^{\\prime}) \\wedge y_1\\big) \\oplus \\cdots \\oplus \\big((x_{n-1} \\oplus x_{n-1}^{\\prime}) \\wedge y_{n-1}\\big) \\\\\n&amp;= \\big((x_0 \\wedge y_0) \\oplus (x_0^{\\prime} \\wedge y_0) \\big) \\oplus \\big((x_1 \\wedge y_1) \\oplus (x_1^{\\prime} \\wedge y_1) \\big) \\oplus \\cdots \\oplus \\big((x_{n-1} \\wedge y_{n-1}) \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\big) \\\\\n&amp;= (x_0 \\wedge y_0) \\oplus (x_0^{\\prime} \\wedge y_0)  \\oplus (x_1 \\wedge y_1) \\oplus (x_1^{\\prime} \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\\\\n&amp;= \\big( (x_0 \\wedge y_0) \\oplus (x_1 \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\big) \\oplus  \\big( (x_0^{\\prime} \\wedge y_0) \\oplus (x_1^{\\prime} \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\big) \\\\\n&amp;= \\langle \\mathbf{x}, \\mathbf{y} \\rangle \\oplus \\langle \\mathbf{x}^{\\prime}, \\mathbf{y} \\rangle   \\\\\n\\end{align}\\]\n\n<p>Similarly,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{y} \\oplus \\mathbf{y}^{\\prime} \\rangle = \\langle \\mathbf{x}, \\mathbf{y} \\rangle \\oplus \\langle \\mathbf{x}, \\mathbf{y}^{\\prime} \\rangle \\\\\n\\end{align}\\]\n\n<p>Let $\\mathbf{0} = \\{ \\underbrace{0, 0, \\cdots, 0}_{n} \\} =  0^n$, we have</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{0}, \\mathbf{y} \\rangle = 0 \\\\\n\\langle \\mathbf{x}, \\mathbf{0} \\rangle = 0 \\\\\n\\end{align}\\]\n\n<h4 id="hadamard-operator">Hadamard Operator</h4>\n\n<p>Most of the important properties of Hadamard operator have been derived in the prerequisites section of my previous blog post on <a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa algorithm</a>. Unlike Deutsch-Jozsa algorithm, Simon’s algorithm is only going to use a small fraction of the Hadamard operator properties that Deutsch-Jozsa algorithm has used. I would just copy the properties useful for Simon’s algorithm algorithm. For the derivation, proof, and other properties of Hadamard operator, the reader should refer to my previous blog post.</p>\n\n<p><br /></p>\n\n<p>To extract an arbitrary column $j$ from $H^{\\otimes {n}}$, we prepared a one-hot quantum system basic state vector $| \\mathbf{y} \\rangle = [y_0, y_1, \\cdots, y_{2^n-1}]^{\\top}$, where $y_j = 1$ and $y_k = 0$ for $k \\neq j$.</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}}_{:,j} &amp;= H^{\\otimes {n}} | \\mathbf{y} \\rangle \\\\\n&amp;= H^{\\otimes n}[\\mathbf{0}, \\mathbf{j}] | \\mathbf{x}_0 \\rangle + H^{\\otimes n}[\\mathbf{1}, \\mathbf{j}] | \\mathbf{x}_1 \\rangle + \\cdots + H^{\\otimes n}[\\mathbf{2^n-1}, \\mathbf{j}] | \\mathbf{x}_{2^{n}-1} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{0}, \\mathbf{j} \\rangle} | \\mathbf{x}_0 \\rangle + \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{1}, \\mathbf{j} \\rangle} | \\mathbf{x}_1 \\rangle + \\cdots + \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{2^n-1}, \\mathbf{j} \\rangle} | \\mathbf{x}_{2^{n}-1} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle} | \\mathbf{x}_i \\rangle\\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{x}, \\mathbf{j} \\rangle} | \\mathbf{x} \\rangle\\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{x}, \\mathbf{y} \\rangle} | \\mathbf{x} \\rangle\\\\\n\\end{align}\\]\n\n<p>where $| \\mathbf{x}_i \\rangle$ is a quantum system one-hot basic state vector,  $|\\mathbf{x}_i\\rangle = [x_0, x_1, \\cdots, x_{2^{n}-1}]^{\\top}$, where $x_i = 1$ and $x_k = 0$ for $k \\neq i$.</p>\n\n<p><br /></p>\n\n<p>Specifically, if $j = 0$, $| \\mathbf{y} \\rangle = [\\underbrace{1, 0, 0, \\cdots, 0}_{2^n} ]^{\\top} = | \\mathbf{0} \\rangle$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}} | \\mathbf{0} \\rangle \n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{0} \\rangle} | \\mathbf{x}_i \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{0} | \\mathbf{x}_i \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} | \\mathbf{x}_i \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\\\\n\\end{align}\\]\n\n<h3 id="simons-problem">Simon’s Problem</h3>\n\n<p>Simon’s problem is defined as the follows. Given a black box function $f: \\{0,1\\}^n \\rightarrow \\{0,1\\}^n$, we are further assured that there exists a hidden binary string $\\mathbf{c} \\in \\{0,1\\}^n$, such that, for all $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$,</p>\n\n\\[f(\\mathbf{x}) = f(\\mathbf{y}) \\Leftrightarrow \\mathbf{y} = \\mathbf{x} \\oplus \\mathbf{c}\\]\n\n<p>where $\\oplus$ is (bit-wise) $\\text{XOR}$ (binary addition modulo 2).</p>\n\n<p><br /></p>\n\n<p>Our goal is to find out what $\\mathbf{c}$ is.</p>\n\n<h4 id="mapping-properties">Mapping Properties</h4>\n\n<p>There are some properties of the mapping $f$. $f$ is either a one-to-one or two-to-one mapping.</p>\n\n<p><br /></p>\n\n<p>$\\mathbf{c} = \\mathbf{0}$ $\\Leftrightarrow$ $f$ is a one-to-one mapping</p>\n\n<p><br /></p>\n\n<p><em>Proof</em></p>\n\n<p><br /></p>\n\n<p>For $f$ is a one-to-one mapping $\\Rightarrow$ $\\mathbf{c} = \\mathbf{0}$, it is too trivial to prove.</p>\n\n<p><br /></p>\n\n<p>For $\\mathbf{c} = \\mathbf{0}$ $\\Rightarrow$ $f$ is a one-to-one mapping, we would like to prove by contradiction.</p>\n\n<p><br /></p>\n\n<p>If $\\mathbf{c} = \\mathbf{0}$ and $f$ is not a one-to-one mapping, there must exists $\\mathbf{x}$ and $\\mathbf{y}$, $\\mathbf{x} \\neq \\mathbf{y}$, and $f(\\mathbf{x}) = f(\\mathbf{y})$. According to the assurance, $\\mathbf{y} = \\mathbf{x} \\oplus \\mathbf{c} = \\mathbf{x} \\oplus \\mathbf{0} = \\mathbf{x}$. This raises contradiction and therefore $f$ has to be a one-to-one mapping when $\\mathbf{c} = \\mathbf{0}$.</p>\n\n<p><br /></p>\n\n<p>This concludes the proof.</p>\n\n<p><br /></p>\n\n<p>$\\mathbf{c} \\neq \\mathbf{0}$ $\\Leftrightarrow$ $f$ is a two-to-one mapping.</p>\n\n<p><br /></p>\n\n<p><em>Proof</em></p>\n\n<p><br /></p>\n\n<p>For $f$ is a two-to-one mapping $\\Rightarrow$ $\\mathbf{c} \\neq \\mathbf{0}$, it is too trivial to prove.</p>\n\n<p><br /></p>\n\n<p>For $\\mathbf{c} \\neq \\mathbf{0}$ $\\Rightarrow$ $f$ is a two-to-one mapping, we would like to prove by contradiction.</p>\n\n<p><br /></p>\n\n<p>If $\\mathbf{c} \\neq \\mathbf{0}$, for any $\\mathbf{x}$, we must have $\\mathbf{y}$, where $\\mathbf{y} = \\mathbf{x} \\oplus \\mathbf{c}$ and $\\mathbf{x} \\neq \\mathbf{y}$, $f(\\mathbf{x}) = f(\\mathbf{y})$. So $f$ is at least a two-to-one mapping. Assuming there exists a tuple of $\\mathbf{x}$, $\\mathbf{y}$, and $\\mathbf{z}$, where $\\mathbf{y} = \\mathbf{x} \\oplus \\mathbf{c}$, $\\mathbf{z} \\neq \\mathbf{x}$, and $\\mathbf{z} \\neq \\mathbf{y}$, and $f(\\mathbf{x}) = f(\\mathbf{y}) = f(\\mathbf{z})$. According to the assurance, $\\mathbf{z} = \\mathbf{x} \\oplus \\mathbf{c}$. But $\\mathbf{x} \\oplus \\mathbf{c} = \\mathbf{y}$ so we have $\\mathbf{z} = \\mathbf{y}$. This raises contradiction and therefore $f$ has to be a two-to-one mapping when $\\mathbf{c} \\neq \\mathbf{0}$.</p>\n\n<p><br /></p>\n\n<p>This concludes the proof.</p>\n\n<h4 id="trivial-solution">Trivial Solution</h4>\n\n<p>Solving Simon’s problem could be trivial.</p>\n\n<p><br /></p>\n\n<p>If we happen to know any $\\mathbf{x}$ and $\\mathbf{y}$, where $\\mathbf{x} \\neq \\mathbf{y}$ and $f(\\mathbf{x}) = f(\\mathbf{y})$, we immediately know $\\mathbf{c} \\neq \\mathbf{0}$ and $\\mathbf{c} = \\mathbf{x} \\oplus \\mathbf{y}$. This is because,</p>\n\n\\[\\begin{align}\n\\mathbf{x} \\oplus \\mathbf{y} &amp;= \\mathbf{x} \\oplus ( \\mathbf{x} \\oplus \\mathbf{c} ) \\\\\n&amp;= ( \\mathbf{x} \\oplus \\mathbf{x} ) \\oplus \\mathbf{c} \\\\\n&amp;= \\mathbf{0} \\oplus \\mathbf{c} \\\\\n&amp;= \\mathbf{c} \\\\\n\\end{align}\\]\n\n<p>If we have checked all $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$ and found there are no $\\mathbf{x}$ and $\\mathbf{y}$, where $\\mathbf{x} \\neq \\mathbf{y}$ and $f(\\mathbf{x}) = f(\\mathbf{y})$, we immediately know $\\mathbf{c} = \\mathbf{0}$.</p>\n\n<p><br /></p>\n\n<p>So the trivial solution for solving Simon’s problem is to evaluate $f$ using the values in $\\{0,1\\}^n$ one by one, and check if the newly evaluated valued has been shown in the previous evaluations.</p>\n\n<h4 id="asymptotic-complexity-for-trivial-solution">Asymptotic Complexity for Trivial Solution</h4>\n\n<p>Using hashing, we should be able to check if the newly evaluated valued has been shown in the previous evaluations in $O(1)$. However, most of the computational cost comes from evaluating $f$ using the values in $\\{0,1\\}^n$ one by one.</p>\n\n<p><br /></p>\n\n<p>If $\\mathbf{c} \\neq \\mathbf{0}$, if we are extremely lucky and the first two evaluated values $f(\\mathbf{x}_0) = f(\\mathbf{x}_1)$, then we are done and $\\mathbf{c} = \\mathbf{x}_0 \\oplus \\mathbf{x}_1$. However, in the worst scenario, we would have to have evaluate $2^{n-1} + 1$ of the values in $\\{0,1\\}^n$.</p>\n\n<p><br /></p>\n\n<p>If $\\mathbf{c} = \\mathbf{0}$, we would know it after evaluating $2^{n-1} + 1$ of the values in $\\{0,1\\}^n$ by realizing that there are no two evaluated values are the same.</p>\n\n<p><br /></p>\n\n<p>Therefore, using the trivial solution, in the worst scenario, we would have to run the evaluation $2^{n-1} + 1$ times to determine the value of $\\mathbf{c}$.</p>\n\n<p><br /></p>\n\n<p>So the question is, can we do better?</p>\n\n<h3 id="simons-algorithm">Simon’s Algorithm</h3>\n\n<h4 id="design-quantum-circus">Design Quantum Circus</h4>\n\n<p>Similar to the quantum gates we used for the <a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch algorithm</a> and the <a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa algorithm</a>, the black-box $f(\\mathbf{x})$ is represented using a quantum gate $U_f$.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-26-Simon-Algorithm/U_f.png" style="width: 50%; height: 50%" />\n    <figcaption>$U_f$</figcaption>\n</figure>\n</div>\n\n<p>The quantum gate $U_f$ is a unitary matrix which maps from $| \\mathbf{x} \\rangle \\otimes | \\mathbf{y} \\rangle$ to $| \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\oplus \\mathbf{y} \\rangle$, namely $U_f (| \\mathbf{x} \\rangle \\otimes | \\mathbf{y} \\rangle) = | \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\oplus \\mathbf{y} \\rangle$, for $\\mathbf{x} \\in \\{0, 1\\}^n$ and $\\mathbf{y} \\in \\{0, 1\\}^n$. When $\\mathbf{y} = \\mathbf{0}$, $| f(\\mathbf{x}) \\oplus \\mathbf{y} \\rangle = | f(\\mathbf{x}) \\oplus \\mathbf{0} \\rangle = | f(\\mathbf{x}) \\rangle $, $| \\mathbf{y} \\oplus f(\\mathbf{x}) \\rangle$ is just $| f(\\mathbf{x}) \\rangle$.</p>\n\n<p><br /></p>\n\n<p>Note that the above mapping is not necessarily valid when $| \\mathbf{x} \\rangle$ and $| \\mathbf{y} \\rangle$ are superpositions.</p>\n\n<p><br /></p>\n\n<p>Let’s further check if we could achieve fewer runs with superpositions and $U_f$.</p>\n\n<p><br /></p>\n\n<p>We have the following quantum circus. Let’s compute the each of the quantum states in the circus. The mathematics is actually much easier compared to the ones in the <a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa algorithm</a>.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-26-Simon-Algorithm/simon-algorithm.png" style="width: 75%; height: 75%" />\n    <figcaption>$U_f$</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |\\mathbf{0}\\rangle \\otimes |\\mathbf{0}\\rangle\\\\\n&amp;= |\\mathbf{0}, \\mathbf{0}\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (H^{\\otimes n} \\otimes I) |\\varphi_0\\rangle \\\\\n&amp;= (H^{\\otimes n} \\otimes I) (|\\mathbf{0}\\rangle \\otimes |\\mathbf{0}\\rangle) \\\\\n&amp;= H^{\\otimes n}|\\mathbf{0}\\rangle \\otimes I | \\mathbf{0} \\rangle \\\\\n&amp;= \\bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\bigg) \\otimes | \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\otimes | \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x}, \\mathbf{0} \\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= U_f \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x}, \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } U_f | \\mathbf{x}, \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\otimes ( | \\mathbf{0} \\rangle \\oplus | f(\\mathbf{x}) \\rangle ) \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x}, f(\\mathbf{x}) \\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_3\\rangle &amp;= (H^{\\otimes n} \\otimes I) |\\varphi_2\\rangle \\\\\n&amp;= (H^{\\otimes n} \\otimes I) \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= (H^{\\otimes n} \\otimes I) \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} (H^{\\otimes n} \\otimes I) \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (H^{\\otimes n} \\otimes I) (| \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\rangle) \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } H^{\\otimes n} | \\mathbf{x} \\rangle \\otimes I | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } H^{\\otimes n} | \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | \\mathbf{z} \\rangle \\bigg) \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | \\mathbf{z} \\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n\\end{align}\\]\n\n<p>Suppose $\\mathbf{x}_2 = \\mathbf{x}_1 \\oplus \\mathbf{c}$, and we also have $\\mathbf{x}_1 = \\mathbf{x}_2 \\oplus \\mathbf{c}$. Because</p>\n\n\\[\\begin{align}\n(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle &amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle \\big) \\\\\n&amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_1 \\oplus \\mathbf{c}) \\rangle \\big) \\\\\n&amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \\big) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle &amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \\big) \\\\\n&amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_2 \\oplus \\mathbf{c}) \\rangle \\big) \\\\\n&amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle \\big) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \n&amp;= \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \\big) + \\frac{1}{2} (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} \\big( | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle + | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle \\big) \\\\\n&amp;= \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle}}{2} | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle}}{2} | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \\\\\n&amp;= \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_1 \\oplus \\mathbf{c} \\rangle}}{2} | \\mathbf{z}, f(\\mathbf{x}_1) \\rangle + \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x}_2 \\oplus \\mathbf{c} \\rangle}}{2} | \\mathbf{z}, f(\\mathbf{x}_2) \\rangle \\\\\n\\end{align}\\]\n\n<p>We could further rearrange $|\\varphi_3\\rangle $,</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle \n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\oplus \\mathbf{c} \\rangle}}{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle \\oplus \\langle \\mathbf{z}, \\mathbf{c} \\rangle} }{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} + (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle + \\langle \\mathbf{z}, \\mathbf{c} \\rangle} }{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n\\end{align}\\]\n\n<p>Note that $\\langle \\mathbf{z}, \\mathbf{c} \\rangle$ is a binary value. When $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 1$, $\\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} = 0$, which means that for the top output qubits, we have exact zero probability of observing $\\mathbf{z}$. We could only observe $\\mathbf{z}$ whose $\\langle \\mathbf{z}, \\mathbf{c}\\rangle  = 0$ for the top output qubits.</p>\n\n<p><br /></p>\n\n<p>Statistically, when $\\mathbf{c} = 0$, $\\langle \\mathbf{z}, \\mathbf{c}\\rangle  = 0$, for all $\\mathbf{z} \\in \\{0,1\\}^2$. This means all $\\mathbf{z}$ are possible to be observed from the top output qubits. So what is the probability of observing $\\mathbf{z}$, $p(\\mathbf{z})$? Is it uniformly distributed?</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle \n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | \\mathbf{z}\\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } | \\mathbf{z}\\rangle \\otimes \\Bigg( \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg) \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } | \\mathbf{z}\\rangle \\otimes \\Bigg( \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Bigg) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\np(\\mathbf{z}) &amp;= \\frac{\\Big\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Big\\rvert^2}{ \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\Big\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Big\\rvert^2}\n\\end{align}\\]\n\n<p>Because $\\mathbf{c} = 0$ and $f$ is an one-to-one mapping, we have</p>\n\n\\[\\begin{align}\n\\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle = \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x} = \\mathbf{y}$}\\\\\n      0 &amp; \\text{when $\\mathbf{x} \\neq \\mathbf{y}$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n\\[\\begin{align}\n\\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2\n&amp;= \\Bigg\\langle \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle, \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Bigg\\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} (-1)^{\\langle \\mathbf{z}, \\mathbf{y} \\rangle} \\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\langle f(\\mathbf{x}), f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } 1 \\\\\n&amp;= 2^n \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2 \n&amp;= 2^n 2^n\\\\\n&amp;= 2^{2n}\\\\\n\\end{align}\\]\n\n\\[\\begin{align}\np(\\mathbf{z}) &amp;= \\frac{\\Big\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Big\\rvert^2}{ \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\Big\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } (-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} | f(\\mathbf{x}) \\rangle \\Big\\rvert^2} \\\\\n&amp;= \\frac{2^n}{2^{2n}} \\\\\n&amp;= \\frac{1}{2^n} \\\\\n\\end{align}\\]\n\n<p>So when $\\mathbf{c} = 0$, $p(\\mathbf{z})$ is a uniform distribution and $p(\\mathbf{z}) = \\frac{1}{2^n}$.</p>\n\n<p><br /></p>\n\n<p>How about when $\\mathbf{c} \\neq 0$?</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle \n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | \\mathbf{z}, f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | \\mathbf{z}\\rangle \\otimes | f(\\mathbf{x}) \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } | \\mathbf{z}\\rangle \\otimes \\Bigg( \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\np(\\mathbf{z}) &amp;= \\frac{ \\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2 }{ \\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\Bigg\\lvert  \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle  \\Bigg\\rvert^2}\n\\end{align}\\]\n\n<p>Because $\\mathbf{c} \\neq 0$ and $f$ is a two-to-one mapping, we have</p>\n\n\\[\\begin{align}\n\\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle = \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x} = \\mathbf{y}$ or $\\mathbf{x} = \\mathbf{y} \\oplus \\mathbf{c} $ }\\\\\n      0 &amp; \\text{else}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n\\[\\begin{align}\n\\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2\n&amp;= \\Bigg\\langle \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle, \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg\\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{y} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} \\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\oplus \\mathbf{y}  \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big)^2 }{4} \\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big)^2 }{4} \\langle f(\\mathbf{x}), f(\\mathbf{y}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big)^2 }{4} \\langle f(\\mathbf{x}), f(\\mathbf{x}) \\rangle + \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big)^2 }{4} \\langle f(\\mathbf{x}), f(\\mathbf{x} + \\mathbf{c}) \\rangle \\\\\n&amp;= \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big)^2 }{2} \\\\\n&amp;= \n    \\begin{cases}\n      2^n &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 0$}\\\\\n      0 &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 1$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>In short,</p>\n\n\\[\\begin{align}\n\\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2\n&amp;= \n    \\begin{cases}\n      2^n &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 0$}\\\\\n      0 &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 1$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>Similarly,</p>\n\n\\[\\begin{align}\n\\sum_{ \\mathbf{z} \\in \\{0,1\\}^n } \\Bigg\\lvert \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\frac{(-1)^{\\langle \\mathbf{z}, \\mathbf{x} \\rangle} \\big( 1 + (-1)^{\\langle \\mathbf{z}, \\mathbf{c} \\rangle} \\big) }{2} | f(\\mathbf{x}) \\rangle \\Bigg\\rvert^2\n&amp;= 2^{n-1} 2^n\\\\\n&amp;= 2^{2n - 1}\\\\\n\\end{align}\\]\n\n<p>Taken together, when $\\mathbf{c} \\neq 0$,</p>\n\n\\[\\begin{align}\np(\\mathbf{z}) =\n    \\begin{cases}\n      \\frac{1}{2^{n-1}} &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 0$}\\\\\n      0 &amp; \\text{when $\\langle \\mathbf{z}, \\mathbf{c} \\rangle = 1$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>Now, suppose we run the circus and observe the top output qubits $k$ times, we observed $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$, $\\mathbf{z}_{k-1}$. We now know that $\\langle \\mathbf{z}_i, \\mathbf{c} \\rangle = 0$ for $i \\in [0, k-1]$.</p>\n\n<p><br /></p>\n\n<p>Computing $\\mathbf{c}$ is like solving linear equations. Let’s see how to do it.</p>\n\n<h4 id="run-quantum-circus-and-post-processing">Run Quantum Circus and Post Processing</h4>\n\n<p>In conventional linear algebra, to solve linear equations that have $n$ variables, we would need to have $n$ linearly independent linear equations. This also applies to solving linear equations in binary vector space.</p>\n\n<p><br /></p>\n\n<p>In our particular problem, $\\mathbf{c}$ is a binary vector that contains $n$ variables, $\\{ \\mathbf{c}_0, \\mathbf{c}_1, \\cdots, \\mathbf{c}_{n-1} \\}$, it turns out that we would need $n - 1$ linearly independent $\\mathbf{z}_i$ such that $\\langle \\mathbf{z}_i, \\mathbf{c} \\rangle = 0$ to solve $\\mathbf{c}$. (Actually, when $\\mathbf{c} \\neq 0$, we could only find at most $n - 1$ linearly independent $\\mathbf{z}_i$)</p>\n\n<p><br /></p>\n\n<p>In the context of linear dependency in binary vector space, we say the set of binary vectors are linearly dependent if at least one of the binary vectors can be defined as a linear combination of others. The no binary vector could be written in this way, then the binary vectors are linearly independent.</p>\n\n<p><br /></p>\n\n<p>Given binary vectors $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$ and $\\mathbf{z}_{n-1}$, and boolean values $b_0$, $b_1$, $\\cdots$, $b_{n-1}$, we say $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$ and $\\mathbf{z}_{n-1}$ are linearly independent, if</p>\n\n\\[\\begin{align}\n( b_0 \\wedge \\mathbf{z}_0 ) \\oplus ( b_1 \\wedge \\mathbf{z}_1 ) \\oplus ( b_2 \\wedge \\mathbf{z}_2 ) \\oplus \\cdots \\oplus ( b_{n-1} \\wedge \\mathbf{z}_{n-1} ) = \\mathbf{0} \n\\end{align}\\]\n\n<p>has only trivial solution $b_0 = b_1 = \\cdots = b_{n-1} = 0$. Otherwise, $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$ and $\\mathbf{z}_{n-1}$ are linearly dependent.</p>\n\n<p><br /></p>\n\n<p>This also suggests, to become linearly independent, $\\mathbf{z}_i \\neq \\mathbf{0}$, for $i \\in [1, n-1]$.</p>\n\n<p><br /></p>\n\n<p>Suppose $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$ and $\\mathbf{z}_{n-1}$ are linearly dependent, at least one of the $n$ linear equations, $\\langle \\mathbf{z}_0, \\mathbf{c} \\rangle = 0$, $\\langle \\mathbf{z}_1, \\mathbf{c} \\rangle = 0$, $\\cdots$, $\\langle \\mathbf{z}_n, \\mathbf{c} \\rangle = 0$, would be redundant.</p>\n\n\\[\\begin{align}\n0 &amp;= \\langle \\mathbf{0}, \\mathbf{c} \\rangle \\\\\n&amp;= \\langle ( b_0 \\wedge \\mathbf{z}_0 ) \\oplus ( b_1 \\wedge \\mathbf{z}_1 ) \\oplus ( b_2 \\wedge \\mathbf{z}_2 ) \\oplus \\cdots \\oplus ( b_{n-1} \\wedge \\mathbf{z}_{n-1} ), \\mathbf{c} \\rangle  \\\\\n&amp;= \\langle b_0 \\wedge \\mathbf{z}_0, \\mathbf{c} \\rangle \\oplus \\langle b_1 \\wedge \\mathbf{z}_1, \\mathbf{c} \\rangle \\oplus \\langle b_2 \\wedge \\mathbf{z}_2, \\mathbf{c} \\rangle \\oplus \\cdots \\oplus \\langle b_{n-1} \\wedge \\mathbf{z}_{n-1}, \\mathbf{c} \\rangle \\\\\n&amp;= ( b_0 \\wedge \\langle \\mathbf{z}_0, \\mathbf{c} \\rangle ) \\oplus ( b_1 \\wedge \\langle \\mathbf{z}_1, \\mathbf{c} \\rangle ) \\oplus ( b_2 \\wedge \\langle \\mathbf{z}_2, \\mathbf{c} \\rangle ) \\oplus \\cdots \\oplus ( b_{n-1} \\wedge \\langle \\mathbf{z}_{n-1}, \\mathbf{c} \\rangle ) \\\\\n\\end{align}\\]\n\n<p>Since $\\mathbf{z}_0$, $\\mathbf{z}_1$, $\\cdots$ and $\\mathbf{z}_{n-1}$ are linearly dependent, without loss of generality, assuming $b_i \\neq 0$ ($b_i = 1$).</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{z}_i, \\mathbf{c} \\rangle \n&amp;=b_i \\wedge \\langle \\mathbf{z}_i, \\mathbf{c} \\rangle \\\\\n&amp;= (b_i \\wedge \\langle \\mathbf{z}_i, \\mathbf{c} \\rangle) \\oplus 0\\\\\n&amp;= (b_i \\wedge \\langle \\mathbf{z}_i, \\mathbf{c} \\rangle) \\oplus ( b_0 \\wedge \\langle \\mathbf{z}_0, \\mathbf{c} \\rangle ) \\oplus ( b_1 \\wedge \\langle \\mathbf{z}_1, \\mathbf{c} \\rangle ) \\oplus ( b_2 \\wedge \\langle \\mathbf{z}_2, \\mathbf{c} \\rangle ) \\oplus \\cdots \\oplus ( b_{n-1} \\wedge \\langle \\mathbf{z}_{n-1}, \\mathbf{c} \\rangle ) \\\\\n&amp;= (b_i \\wedge \\langle \\mathbf{z}_i, \\mathbf{c} \\rangle) \\oplus (b_i \\wedge \\langle \\mathbf{z}_i, \\mathbf{c} \\rangle) \\oplus \\bigoplus_{j \\neq i}^{} (b_j \\wedge \\langle \\mathbf{z}_j, \\mathbf{c} \\rangle) \\\\\n&amp;= 0 \\oplus \\bigoplus_{j \\neq i}^{} (b_j \\wedge \\langle \\mathbf{z}_j, \\mathbf{c} \\rangle) \\\\\n&amp;= \\bigoplus_{j \\neq i}^{} (b_j \\wedge \\langle \\mathbf{z}_j, \\mathbf{c} \\rangle) \\\\\n&amp;= \\bigoplus_{j \\neq i}^{} (b_j \\wedge 0) \\\\\n&amp;= \\bigoplus_{j \\neq i}^{} 0 \\\\\n&amp;= 0 \\\\\n\\end{align}\\]\n\n<p>Therefore, $\\langle \\mathbf{z}_i, \\mathbf{c} \\rangle $ in the $n$ linear equations will be redundant.</p>\n\n<p><br /></p>\n\n<p>Given $n - 1$ linearly independent binary vectors, let’s further see how to solve linear equations in the binary vector space. The process is similar to <a href="https://en.wikipedia.org/wiki/Gaussian_elimination">Gaussian elimination</a> used for solving conventional linear equations.</p>\n\n<p><br /></p>\n\n<p>Let’s start with an example, where $n=3$. $\\mathbf{z}_0 = \\{1,0,1\\}$, $\\mathbf{z}_1 = \\{1,1,1\\}$. It is easy to verify that $\\mathbf{z}_0$, $\\mathbf{z}_1$ are linearly independent. Because, $\\langle \\mathbf{z}_0, \\mathbf{c} \\rangle = 0$, $\\langle \\mathbf{z}_1, \\mathbf{c} \\rangle = 0$,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{z}_0, \\mathbf{c} \\rangle = (1 \\wedge \\mathbf{c}_0) \\oplus (0 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_2) = 0 \\\\\n\\langle \\mathbf{z}_1, \\mathbf{c} \\rangle = (1 \\wedge \\mathbf{c}_0) \\oplus (1 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_2) = 0 \\\\\n\\end{align}\\]\n\n<p>We could eliminate $(1 \\wedge \\mathbf{c}_0)$ by $\\langle \\mathbf{z}_0, \\mathbf{c} \\rangle \\oplus \\langle \\mathbf{z}_1, \\mathbf{c} \\rangle$, we then have</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{z}_0, \\mathbf{c} \\rangle \\oplus \\langle \\mathbf{z}_1, \\mathbf{c} \\rangle &amp;= (1 \\wedge \\mathbf{c}_0) \\oplus (0 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_2) (1 \\wedge \\mathbf{c}_0) \\oplus (1 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_2)\\\\\n&amp;= (0 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_1) \\\\\n&amp;= (0 \\oplus 1) \\wedge \\mathbf{c}_1 \\\\\n&amp;= 1 \\wedge \\mathbf{c}_1 \\\\\n&amp;= \\mathbf{c}_1 \\\\\n&amp;= 0 \\\\\n\\end{align}\\]\n\n<p>So $\\mathbf{c}_1 = 0$.</p>\n\n<p><br /></p>\n\n<p>In addition, we have</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{z}_1, \\mathbf{c} \\rangle \n&amp;= (1 \\wedge \\mathbf{c}_0) \\oplus (1 \\wedge \\mathbf{c}_1) \\oplus (1 \\wedge \\mathbf{c}_2) \\\\\n&amp;= \\mathbf{c}_0 \\oplus \\mathbf{c}_2\n\\end{align}\\]\n\n<p>So $\\mathbf{c}_0 = \\mathbf{c}_2 = 0$ or $\\mathbf{c}_0 = \\mathbf{c}_2 = 1$.</p>\n\n<p><br /></p>\n\n<p>Therefore, we have two $\\mathbf{c}$ possible, $\\mathbf{c}^{\\prime} = \\{0,0,0\\}$ or $\\mathbf{c}^{\\prime\\prime} = \\{1,0,1\\}$.</p>\n\n<p><br /></p>\n\n<p>We could also see that solving the $n-1$ linear equations always results in a $\\mathbf{c}^{\\prime} = \\mathbf{0}$ and another non-zero $\\mathbf{c}^{\\prime\\prime}$.</p>\n\n<p><br /></p>\n\n<p>How do we determine whether $\\mathbf{c}^{\\prime} = \\mathbf{0}$ or $\\mathbf{c}^{\\prime\\prime}$ is the correct solution? We run the circuit once to get the value for $f(\\mathbf{0})$ and  $f(\\mathbf{c}^{\\prime\\prime})$. If $f(\\mathbf{c}^{\\prime\\prime}) = f(\\mathbf{0})$, $\\mathbf{c} = \\mathbf{c}^{\\prime\\prime}$. If $f(\\mathbf{c}^{\\prime\\prime}) \\neq f(\\mathbf{0})$, $\\mathbf{c} = \\mathbf{0}$.</p>\n\n<h4 id="algorithm-analysis">Algorithm Analysis</h4>\n\n<p>The final question is what are the probabilities of observing $n-1$ linearly independent $\\mathbf{z}$ in a few runs.</p>\n\n<p><br /></p>\n\n<p>Let’s compute the probability of observing $n-1$ linearly independent $\\mathbf{z}$ in $n-1$ runs.</p>\n\n<p><br /></p>\n\n<p>Suppose $\\mathbf{c} \\neq 0$. For the first time $t=0$ we “draw” $\\mathbf{z}$, we have to avoid $\\mathbf{z}_{t=0} \\neq \\mathbf{0}$, such probability is $1 - \\frac{1}{2^{n-1}}$. Once $\\mathbf{z}_{t=0}$ is drawn, at $t=1$, we could draw $\\mathbf{z}_{t=1}$ for anything but $\\mathbf{z}_{t=0}$ and $\\mathbf{0}$, such probability is $1 - \\frac{1}{2^{n-2}}$; $\\mathbf{z}_{t=0}$ and $\\mathbf{z}_{t=1}$ forms a subspace that consists of $2^2 = 4$ vectors, if we draw $\\mathbf{z}_{t=2}$ from this subspace, we would have linear dependencies. So at $t=2$, we have to avoid these $2^2 = 4$ vectors, such probability is $1 - \\frac{1}{2^{n-3}}$. We iterate until we have drawn $n-1$ $\\mathbf{z}$. The probability of observing $n-1$ linearly independent $\\mathbf{z}$ in $n-1$ runs is</p>\n\n\\[\\begin{align}\n\\prod_{i=1}^{n-1} \\Big( 1 - \\frac{1}{2^i} \\Big)\n\\end{align}\\]\n\n<p>We notice that $(1-a)(1-b) \\geq 1 - (a + b)$ for $a, b \\in [0, 1]$.</p>\n\n\\[\\begin{align}\n\\prod_{i=1}^{n-1} \\Big( 1 - \\frac{1}{2^i} \\Big) \n&amp;= \\frac{1}{2} \\prod_{i=2}^{n-1} \\Big( 1 - \\frac{1}{2^i} \\Big) \\\\\n&amp;\\geq \\frac{1}{2} \\Big(1 - \\sum_{i=2}^{n-1} \\frac{1}{2^i} \\Big) \\\\\n&amp;= \\frac{1}{2} \\Big(1 - \\frac{1}{2} \\big(1 - \\frac{1}{2^{n-2}}\\big) \\Big) \\\\\n&amp;\\geq \\frac{1}{2} \\Big(1 - \\frac{1}{2} \\Big) \\\\\n&amp;= \\frac{1}{4} \\\\\n\\end{align}\\]\n\n<p>So Simon’s algorithm succeeds with probability of at least $\\frac{1}{4}$. We could improve the probability of success via repeating this process many times.</p>\n\n<h3 id="conclusion">Conclusion</h3>\n\n<p>Simon’s problem and algorithm is a combination of quantum mechanics and statistics. From here, we started to see how quantum computing started to solve problems that follows some statistical rules.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch Algorithm</a></li>\n  <li><a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa Algorithm</a></li>\n  <li><a href="https://leimao.github.io/blog/Inner-Product/">Inner Product and Inner Product Space</a></li>\n  <li><a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker Product In Circuits</a></li>\n  <li><a href="https://leimao.github.io/blog/Quantum-System-States/">Quantum System States</a></li>\n  <li><a href="/downloads/blog/2020-07-26-Simon-Algorithm/lecture06.pdf">Boolean Fourier Analysis and Simon’s Algorithm</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Simon-Algorithm/">Simon's Algorithm</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 26, 2020.</p>	710db6b56a902f5f438298467adb550ce3adc27c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.42927	0			'-1':151,154,158,161,266,277,314,318,323,387,398,419,423,505,509,514,551,555,559,564,596,600,604,609,627,631,653,658,854,909,916,923,939,956,961,969,981,982,1005,1027,1066,1117,1118,1139,1140,1156,1884,1906,1945,2582,2616,2649,2690,2708,2735,2765,2793,2811,2838,2868,2896,2911,2929,2956,2981,2989,3006,3014,3031,3039,3059,3067,3118,3149,3181,3188,3224,3231,3271,3278,3317,3326,3371,3380,3501,3510,3544,3553,3594,3603,3640,3669,3699,3772,3795,3813,3840,3847,3869,3876,3921,3958,3988,4064,4073,4107,4116,4157,4166,4198,4207,4240,4249,4329,4338,4364,4373,4394,4403,4433,4442,4452,4461,4493,4505,4538,4547,4573,4582,4601,4610,4638,4647,4698,4707,4770,4779,4797,4823,4873,4891,4970,5086,5097,5111,5143,5148,5164,5178,5200,5213,5288,5293,5335,5340,5381,5387,5405,5500,5506,5945,6046,6063,6070,6106,6206,6214,6221,6230,6263,6278,6296 '-2':6142,6316 '-3':6198 '0':120,128,145,233,237,241,254,260,271,299,302,321,375,381,392,407,410,452,478,481,485,518,521,524,528,567,570,573,577,612,615,636,640,707,709,710,712,714,722,726,731,733,847,863,884,889,926,932,978,1002,1024,1059,1075,1083,1089,1090,1092,1097,1105,1114,1123,1136,1141,1153,1170,1195,1199,1216,1228,1294,1318,1329,1350,1396,1418,1427,1452,1464,1486,1615,1660,1696,1714,1746,1764,1826,1837,1852,1866,1890,1897,1912,2059,2066,2073,2086,2178,2181,2185,2188,2190,2205,2213,2217,2223,2228,2240,2249,2260,2268,2279,2285,2310,2316,2327,2335,2346,2354,2370,2390,2428,2451,2474,2494,2519,2543,2566,2579,2606,2613,2639,2646,3108,3115,3139,3146,3170,3177,3213,3220,3260,3267,3306,3313,3367,3389,3420,3430,3437,3443,3490,3497,3533,3540,3578,3590,3625,3637,3666,3687,3696,3718,3749,3769,3792,3810,3830,3837,3866,3895,3909,3918,3955,3976,3985,4017,4039,4053,4060,4096,4103,4141,4153,4194,4227,4236,4271,4310,4325,4360,4390,4422,4429,4482,4489,4527,4534,4569,4634,4669,4670,4694,4735,4736,4757,4766,4811,4832,4833,4865,4885,4889,4962,4994,5004,5077,5091,5102,5119,5123,5150,5158,5165,5169,5194,5204,5228,5232,5240,5249,5255,5258,5264,5268,5299,5303,5345,5350,5396,5417,5451,5464,5469,5546,5583,5588,5589,5653,5655,5671,5682,5686,5694,5700,5708 '1':146,234,238,242,255,262,273,305,308,376,383,394,412,415,453,490,493,497,533,536,539,543,580,583,586,590,618,621,643,647,849,859,895,900,919,935,942,948,952,972,994,1003,1016,1025,1061,1071,1088,1108,1130,1147,1162,1171,1196,1200,1217,1229,1715,1765,1811,1827,1856,1870,1885,1891,1907,1913,1946,2060,2067,2197,2232,2241,2252,2261,2271,2280,2297,2302,2311,2319,2328,2338,2347,2362,2371,2382,2391,2420,2429,2443,2452,2461,2475,2486,2495,2511,2520,2535,2544,2558,2567,2571,2580,2599,2607,2614,2632,2640,2647,2670,2680,2696,2703,2706,2714,2722,2729,2733,2741,2749,2756,2763,2771,2779,2809,2836,2866,2889,2902,2909,2927,2935,2943,2954,2977,2987,3003,3020,3037,3045,3056,3101,3109,3116,3132,3140,3147,3163,3171,3178,3206,3214,3221,3253,3261,3268,3299,3307,3314,3325,3362,3368,3379,3444,3483,3491,3498,3509,3526,3534,3541,3552,3571,3579,3591,3602,3618,3626,3638,3667,3688,3697,3742,3770,3793,3811,3831,3838,3867,3896,3898,3910,3919,3956,3977,3986,4008,4030,4046,4054,4061,4072,4089,4097,4104,4115,4134,4142,4154,4165,4195,4206,4228,4237,4248,4295,4326,4337,4361,4372,4391,4402,4423,4430,4441,4460,4483,4490,4504,4528,4535,4546,4570,4581,4609,4635,4646,4679,4695,4706,4745,4758,4767,4778,4802,4820,4842,4868,4965,4979,5012,5080,5093,5105,5126 '2':175,852,907,914,921,937,954,959,967,974,979,996,1018,1064,1093,1110,1115,1132,1137,1149,1154,1164,1256,1882,1904,1943,2234,2254,2273,2292,2304,2321,2340,2364,2384,2412,2422,2445,2463,2488,2513,2537,2560,2573,2600,2633,2667,2683,2707,2734,2764,2786,2799,2806,2810,2817,2825,2832,2837,2844,2852,2859,2867,2874,2882,2917,2924,2928,2950,2955,2962,2970,2995,2997,3012,3022,3028,3050,3065,3073,3078,3084,3102,3133,3164,3198,3207,3245,3254,3291,3300,3334,3388,3445,3484,3518,3527,3561,3572,3611,3619,3682,3712,3785,3899,3934,3935,3937,3939,3971,4001,4003,4005,4009,4031,4047,4081,4090,4124,4135,4174,4215,4222,4257,4264,4346,4353,4381,4411,4450,4469,4513,4555,4590,4618,4655,4656,4659,4715,4722,4725,4787,4794,4795,4798,4800,4821,5133,5137,5278,5282,5321,5325,5367,5372,5486,5491,5720,5745,5809,5826,5890,5897,5906,5914,6104,6140,6158,6159,6168,6180,6186,6187,6196,6235,6268,6273,6276,6283,6289,6294,6299,6304,6309,6314,6322,6327 '2020':6437 '26':6436 '2n':3940,4006,4801 '3':2404,3093,3098,3480,4043,5650 '4':4514,4556,4591,4619,6160,6188,6331,6346 'abl':58,1794 'accord':1381,1569 'achiev':2131 'actual':2160,4999 'addit':173,1254,5862 'algebra':4916 'algorithm':3,7,12,33,37,46,51,76,762,767,770,788,801,802,1965,1979,1985,2172,6033,6337,6365,6394,6398,6418,6421 'align':150,166,230,244,291,330,400,425,465,675,678,704,719,735,869,1038,1100,1177,1673,1703,2176,2193,2195,2288,2290,2400,2402,2663,2689,2790,2792,2893,2895,3087,3096,3342,3478,3653,3655,3714,3731,3760,3762,3902,3904,3942,3944,4012,4041,4181,4183,4266,4284,4316,4318,4683,4687,4749,4752,4804,4813,4846,5117,5152,5254,5392,5422,5591,5696,5748,5777,5855,5866,5899,6225,6239,6258,6333 'also':216,352,2676,4936,5183,5939 'alway':5948 'analysi':6034,6414 'anoth':5958 'anyth':6125 'appli':4937 'arbitrari':825 'associ':105 'assum':1527,5413 'assur':1205,1384,1572 'asymptot':66,1784 'avoid':6090,6184 'b':101,102,108,113,5090,5092,5095,5118,5125,5132,5141,5157,5159,5162,5263,5270,5277,5286,5298,5309,5320,5333,5344,5355,5366,5379,5414,5418,5430,5440,5452,5463,5474,5485,5498,5510,5521,5536,5552,5566,5580,6246,6250,6253 'base':433 'basic':840,1051 'becom':5186 'begin':149,229,290,399,464,677,718,868,1099,1672,2175,2194,2289,2401,2688,2791,2894,3095,3477,3654,3730,3740,3761,3903,3943,4040,4182,4283,4293,4317,4657,4686,4723,4751,4812,4817,5116,5253,5421,5695,5776,5865,6224,6257 'best':73 'better':1962 'big':476,486,488,498,502,515,516,529,531,544,548,565,610,632,634,659,2716,2731,2743,2761,2773,2788,2819,2834,2846,2864,2876,2891,2937,2952,2964,2979,3324,3333,3378,3387,3508,3517,3551,3560,3601,3610,3660,3680,3690,3710,3949,3969,3979,3999,4071,4080,4114,4123,4164,4173,4205,4214,4247,4256,4336,4345,4371,4380,4401,4410,4440,4449,4459,4468,4503,4512,4545,4554,4580,4589,4608,4617,4645,4654,4705,4714,4777,4786,6231,6237,6264,6270,6279,6285,6290,6301,6305,6310,6317,6318,6323,6328 'bigg':2230,2246,2569,2592,3585,3616,3632,3651,3763,3783,3786,3824,3912,3932,4148,4179,4188,4220,4230,4262,4319,4351,4354,4416,4688,4720,4760,4792 'bigoplus':319,5532,5548,5562,5576,5584 'binari':140,172,191,226,247,355,368,1211,1253,3353,4943,4954,5025,5033,5044,5057,5067,5073,5613,5626 'bit':1249 'bit-wis':1248 'bitwis':345 'black':1191,1988 'black-box':1987 'blog':83,197,756,820 'book':6433 'boolean':134,5088,6412 'box':1192,1989 'c':110,115,1214,1244,1265,1292,1316,1327,1348,1391,1416,1424,1449,1461,1483,1503,1547,1579,1585,1612,1657,1663,1686,1694,1699,1701,1744,1834,1863,1895,1954,2673,2686,2759,2862,3048,3076,3196,3243,3289,3331,3349,3360,3385,3418,3429,3435,3515,3558,3608,3717,4016,4037,4078,4121,4171,4212,4254,4269,4309,4343,4378,4408,4447,4466,4510,4543,4552,4578,4587,4606,4615,4628,4643,4652,4667,4677,4712,4733,4743,4784,4809,4830,4840,4883,4894,4951,4961,4964,4968,4992,4998,5002,5230,5238,5247,5260,5295,5305,5316,5327,5342,5352,5363,5374,5389,5428,5438,5448,5460,5471,5482,5493,5508,5518,5529,5544,5560,5574,5598,5684,5692,5702,5707,5713,5719,5727,5732,5738,5744,5755,5763,5771,5783,5791,5796,5802,5808,5813,5819,5825,5830,5836,5843,5848,5851,5858,5872,5877,5883,5889,5892,5896,5902,5905,5910,5913,5921,5924,5931,5953,5963,5972,5978,6001,6007,6014,6016,6022,6030,6074 'call':21 'case':3741,3758,4294,4314,4658,4681,4724,4747,4818,4844 'cdot':263,274,310,384,395,416,500,546,592,623,649,711,850,902,950,1062,1091,4869,4966,5081,5094,5106,5139,5161,5173,5208,5241,5284,5330,5377,5400,5496 'check':1707,1771,1796,2127 'circuit':70,80,5988,6408 'circus':1968,2144,2156,4852,4909 'classic':79 'column':826 'combin':5052,6368 'come':1818 'commut':98 'compar':25,2163 'complex':210,1785 'comput':11,32,1816,2147,4892,6057,6382 'conclud':1420,1617 'conclus':6360 'consist':6156 'contain':4957 'context':5020 'contradict':1345,1401,1480,1597 'contriv':17 'convent':74,4914,5639 'copi':794 'correct':5983 'cost':1817 'could':177,215,1626,2130,3089,3408,5006,5059,5750,5938,6118,6348 'defin':201,217,288,353,1185,5048 'definit':339,439 'depend':5023,5037,5181,5216,5408,6176 'deriv':462,748,805 'design':1966 'detail':94 'determin':1949,5969 'deutsch':35,760,765,786,1978,1983,2170,6393,6396 'deutsch-jozsa':34,759,764,785,1982,2169,6395 'differ':132 'discuss':89 'distribut':459,3476,4024 'done':1860 'draw':6084,6119,6164 'drawn':6113,6204 'easi':5665 'easier':2162 'easili':179 'either':1279 'element':117 'elimin':5635,5751 'els':4312 'end':165,243,329,424,674,703,734,1037,1176,1702,2192,2287,2399,2662,2789,2892,3086,3341,3652,3713,3757,3759,3901,3941,4011,4180,4265,4313,4315,4680,4682,4746,4748,4803,4843,4845,5151,5391,5590,5747,5854,5898,6238,6332 'equat':4899,4920,4934,4941,5224,5604,5623,5641,5947 'evalu':1758,1775,1783,1800,1808,1820,1847,1881,1903,1922,1942 'exact':3400 'exampl':5647 'exclus':347 'exclusive-or':346 'exist':1208,1363,1529 'exponenti':64 'extract':823 'extrem':1841 'f':1194,1231,1234,1276,1277,1296,1306,1331,1352,1375,1378,1404,1429,1439,1466,1510,1513,1517,1560,1563,1566,1600,1647,1650,1734,1737,1759,1821,1849,1853,1990,2000,2002,2007,2027,2036,2048,2074,2081,2088,2095,2101,2138,2174,2295,2300,2331,2357,2377,2395,2433,2456,2481,2506,2530,2553,2594,2627,2658,2700,2719,2726,2746,2753,2776,2783,2803,2822,2829,2849,2856,2879,2886,2906,2921,2940,2947,2967,2974,3000,3025,3053,3081,3127,3158,3201,3248,3294,3337,3521,3566,3612,3647,3676,3706,3720,3733,3736,3779,3802,3820,3855,3858,3884,3887,3928,3965,3995,4084,4129,4175,4216,4258,4273,4286,4289,4347,4382,4412,4471,4474,4516,4519,4558,4561,4593,4596,4621,4624,4716,4788,5995,5999,6005,6010,6020,6026 'faster':65 'fewer':2132 'final':6036 'find':1261,5008 'first':1845,6079 'follow':427,1188,2142,6388 'form':6152 'found':1718 'fourier':6413 'frac':918,934,951,971,993,1015,1107,1129,1146,1161,2231,2251,2270,2301,2318,2337,2361,2381,2419,2442,2460,2485,2510,2534,2557,2570,2598,2631,2705,2732,2762,2808,2835,2865,2926,2953,2980,3005,3030,3058,3100,3131,3162,3180,3205,3223,3252,3270,3298,3316,3370,3482,3500,3525,3543,3570,3593,3617,3659,3948,4002,4007,4029,4045,4063,4088,4106,4133,4156,4187,4197,4239,4328,4363,4393,4432,4451,4492,4537,4572,4600,4637,4697,4769,4819,6102,6138,6194,6233,6266,6271,6281,6287,6297,6302,6307,6312,6320,6325,6329,6344 'fraction':778 'function':1193 'gate':1973,1998,2005 'gaussian':5634 'general':5412 'geq':6247,6286,6319 'get':5991 'given':245,366,440,1189,5072,5608 'go':773 'goal':1258 'h':829,870,874,880,891,903,1101,2199,2207,2219,2406,2414,2437,2465,2497,2522,2546 'hadamard':736,744,781,811 'happen':1631 'hash':1790 'hidden':1210 'hot':837,1050 'howev':1812,1871 'ident':116 'immedi':1654,1741 'import':741 'improv':6349 'independ':4932,4981,5014,5071,5114,5188,5612,5677,6048,6065,6216 'inner':184,187,203,206,219,222,279,337,428,437,6399,6402 'introduct':4 'invent':13 'invert':124 'iter':6200 'j':827,858,867,873,886,897,911,928,944,963,987,1010,1082,5533,5537,5542,5549,5553,5558,5563,5567,5572,5577,5581,5585 'jozsa':36,761,766,787,1984,2171,6397 'juli':6435 'k':862,865,1074,1077,4859,4872,4890 'know':1633,1655,1742,1900,4876 'kroneck':6405 'langl':231,292,466,660,667,679,689,696,720,727,924,940,957,983,1006,1028,1119,2583,2617,2650,2691,2709,2736,2766,2794,2812,2839,2869,2897,2912,2930,2957,2982,2990,3007,3015,3032,3040,3060,3068,3119,3150,3182,3189,3225,3232,3239,3272,3279,3285,3318,3327,3345,3356,3372,3381,3414,3431,3502,3511,3545,3554,3595,3604,3641,3670,3700,3732,3773,3787,3796,3814,3841,3848,3854,3870,3877,3883,3922,3959,3989,4065,4074,4108,4117,4158,4167,4199,4208,4241,4250,4285,4330,4339,4355,4365,4374,4395,4404,4434,4443,4453,4462,4470,4494,4506,4515,4539,4548,4557,4574,4583,4592,4602,4611,4620,4639,4648,4663,4673,4699,4708,4729,4739,4771,4780,4826,4836,4878,4987,5225,5233,5242,5256,5262,5297,5308,5319,5332,5347,5358,5369,5383,5423,5433,5443,5455,5466,5477,5488,5502,5513,5524,5539,5555,5569,5593,5679,5687,5697,5722,5758,5766,5778,5786,5867 'least':1520,5040,5218,6343 'leftrightarrow':1237,1295,1428 'lei':6426,6429 'length':365 'let':705,2124,2145,4900,5615,5642,6055 'like':87,1341,1476,4896 'linear':4898,4915,4919,4931,4933,4940,4980,5013,5022,5036,5051,5070,5113,5180,5187,5215,5223,5407,5603,5611,5622,5640,5676,5946,6047,6064,6175,6215 'log':6432 'loss':5410 'lucki':1842 'lvert':3661,3691,3764,3913,3950,3980,4189,4231,4320,4689,4761 'mani':6358 'mao':6427,6430 'map':1267,1275,1290,1303,1313,1338,1360,1413,1436,1446,1473,1526,1609,2013,2109,3727,4280 'mathbf':249,251,257,268,282,285,293,295,357,360,370,372,378,389,401,404,441,443,446,448,467,470,473,661,663,668,671,680,682,685,690,692,697,699,706,721,723,728,730,843,877,883,885,887,894,896,898,906,910,912,925,927,930,941,943,946,958,962,965,984,986,989,999,1007,1009,1012,1021,1029,1031,1034,1040,1054,1084,1096,1104,1120,1122,1125,1142,1157,1167,1173,1213,1223,1225,1232,1235,1238,1240,1243,1264,1291,1293,1315,1317,1326,1328,1347,1349,1364,1367,1369,1372,1376,1379,1385,1387,1390,1392,1395,1397,1415,1417,1423,1426,1448,1451,1460,1463,1482,1485,1489,1494,1497,1499,1502,1505,1508,1511,1514,1533,1535,1538,1541,1543,1546,1548,1551,1554,1557,1561,1564,1567,1573,1575,1578,1581,1584,1586,1591,1593,1611,1614,1635,1638,1641,1644,1648,1651,1656,1659,1662,1664,1667,1674,1677,1679,1682,1685,1687,1690,1693,1695,1698,1700,1709,1711,1722,1725,1728,1731,1735,1738,1743,1745,1833,1836,1850,1854,1862,1864,1868,1894,1896,1953,1991,2015,2019,2023,2028,2031,2037,2041,2044,2049,2052,2056,2063,2070,2072,2075,2078,2082,2085,2089,2092,2096,2102,2115,2119,2180,2184,2187,2189,2212,2216,2222,2227,2237,2243,2248,2257,2263,2267,2276,2282,2284,2307,2313,2315,2324,2332,2334,2343,2349,2353,2358,2367,2373,2378,2387,2393,2396,2425,2431 'mathemat':2158 'matrix':2011 'mean':3391,3447 'mechan':6371 'modulo':174,1255 'much':2161 'multipl':52 'must':1362,1492 'n':235,239,256,265,276,313,317,322,377,386,397,418,422,454,504,508,513,550,554,558,563,595,599,603,608,626,630,652,657,713,715,831,853,872,876,882,893,905,908,915,922,938,955,960,968,975,980,997,1004,1019,1026,1065,1094,1103,1111,1116,1133,1138,1150,1155,1165,1172,1197,1201,1218,1230,1716,1766,1828,1883,1892,1905,1914,1944,2061,2068,2201,2209,2221,2235,2242,2255,2262,2274,2281,2305,2312,2322,2329,2341,2348,2365,2372,2385,2392,2408,2416,2423,2430,2439,2446,2453,2464,2467,2476,2489,2496,2499,2514,2521,2524,2538,2545,2548,2561,2568,2574,2581,2601,2608,2615,2634,2641,2648,3103,3110,3117,3134,3141,3148,3165,3172,3179,3208,3215,3222,3255,3262,3269,3301,3308,3315,3369,3485,3492,3499,3528,3535,3542,3573,3580,3592,3620,3627,3639,3668,3689,3698,3771,3794,3812,3832,3839,3868,3897,3900,3911,3920,3936,3938,3957,3978,3987,4004,4010,4032,4048,4055,4062,4091,4098,4105,4136,4143,4155,4196,4229,4238,4327,4362,4392,4424,4431,4484,4491,4529,4536,4571,4636,4660,4696,4726,4759,4768,4796,4799,4822,4923,4930,4958,4969,4978,5011,5085,5096,5110,5142,5147,5163,5177,5199,5212,5222,5245,5287,5292,5334,5339,5380,5386,5404,5499,5505,5602,5609,5649,5944,6045,6062,6069,6105,6141,6197,6205,6213,6220,6229,6262,6277,6295,6315 'name':2034 'necessarili':2112 'need':4927,4977 'neq':866,1078,1371,1425,1450,1462,1484,1507,1550,1556,1613,1643,1658,1730,1835,3754,4038,4270,4810,5003,5192,5416,5534,5550,5564,5578,5586,6025,6075,6095 'newli':1774,1799 'non':5960 'non-zero':5959 'note':2105,3343 'notic':6241 'o':1810 'observ':3404,3410,3455,3467,4854,4862,6044,6061,6212 'one':27,836,1049,1282,1284,1289,1300,1302,1310,1312,1335,1337,1357,1359,1410,1412,1435,1445,1472,1525,1608,1767,1769,1829,1831,2166,3724,3726,4279,5041,5219 'one-hot':835,1048 'one-to-on':1281,1299,1309,1334,1356,1409,3723 'oper':349,737,745,782,812 'oplus':100,103,107,109,112,114,119,126,156,163,168,303,309,311,350,403,408,413,420,469,479,487,491,499,501,506,522,530,537,545,547,556,571,578,584,591,593,601,616,622,624,633,641,648,650,666,684,695,1242,1246,1389,1394,1501,1545,1577,1583,1666,1676,1681,1684,1689,1692,1697,1867,2030,2051,2077,2084,2094,2356,2671,2684,2757,2860,3046,3074,3194,3238,4307,4499,5124,5131,5138,5140,5269,5276,5283,5285,5307,5318,5329,5331,5354,5365,5376,5378,5450,5462,5473,5484,5495,5497,5520,5531,5547,5709,5715,5734,5740,5765,5785,5798,5804,5815,5821,5832,5839,5879,5885,5894 'origin':6423 'other':5054 'otherwis':5166 'otim':830,871,875,881,892,904,1102,2018,2026,2040,2047,2183,2200,2202,2208,2210,2215,2220,2225,2247,2266,2352,2376,2407,2409,2415,2417,2438,2440,2466,2468,2480,2498,2500,2505,2523,2528,2547,2552,2593,2626,3565,3584,3631,4128,4147 'output':3396,3424,3459,4857 'p':3470,3656,3945,4018,4026,4184,4814 'particular':4948 'possibl':3452,5922 'post':84,198,757,821,4911 'prepar':833 'prerequisit':95,751 'previous':196,755,819,1782,1807 'prime':445,450,472,482,494,510,525,540,560,574,587,605,637,644,654,670,687,701,5925,5932,5933,5954,5964,5965,5973,5979,5980,6002,6003,6008,6009,6017,6018,6023,6024 'probabilist':75 'probabl':3402,3465,6042,6059,6099,6135,6191,6210,6340,6351 'problem':18,24,63,92,1180,1183,1625,1755,4949,6363,6386 'process':4912,5630,6357 'prod':6226,6259,6274 'product':185,188,204,207,220,223,280,338,429,438,6400,6403,6406 'proof':806,1304,1422,1437,1619 'properti':97,430,460,742,783,796,809,1268,1272 'prove':1324,1343,1458,1478 'publish':6424 'quantum':10,31,69,838,1046,1967,1972,1997,2004,2143,2152,4908,6370,6381,6409 'qubit':3397,3425,3460,4858 'question':1957,6037 'rais':1400,1596 'rangl':232,297,475,665,673,688,694,702,725,732,845,879,890,901,917,929,933,945,949,964,970,988,992,1011,1014,1033,1036,1043,1057,1086,1098,1106,1124,1128,1145,1160,1175,2017,2021,2025,2033,2039,2043,2046,2054,2080,2087,2091,2098,2104,2117,2121,2179,2182,2186,2191,2198,2206,2214,2218,2224,2229,2245,2250,2265,2269,2286,2293,2298,2317,2336,2351,2355,2360,2375,2380,2398,2405,2413,2436,2459,2479,2484,2504,2509,2527,2533,2551,2556,2588,2591,2597,2622,2625,2630,2655,2661,2697,2704,2715,2723,2730,2742,2750,2760,2772,2780,2787,2800,2807,2818,2826,2833,2845,2853,2863,2875,2883,2890,2903,2910,2918,2925,2936,2944,2951,2963,2971,2978,2988,2996,3004,3013,3021,3029,3038,3049,3057,3066,3077,3085,3094,3099,3124,3130,3155,3161,3187,3197,3204,3230,3237,3244,3251,3277,3284,3290,3297,3323,3332,3340,3350,3361,3377,3386,3419,3436,3481,3507,3516,3524,3550,3559,3564,3569,3583,3600,3609,3615,3630,3646,3650,3675,3679,3705,3709,3739,3778,3782,3801,3805,3819,3823,3825,3846,3853,3861,3875,3882,3890,3927,3931,3964,3968,3994,3998,4044,4070,4079,4087,4113,4122,4127,4132,4146,4163,4172,4178,4204,4213,4219,4246,4255,4261,4292,4335,4344,4350,4370,4379,4385,4400,4409,4415,4417,4439,4448,4458,4467,4477,4502,4511,4522,4544,4553,4564,4579,4588,4599,4607,4616,4629,4644,4653,4668 'reader':814 'real':341 'realiz':1916 'rearrang':3091 'reduc':129 'redund':5252,5607 'refer':816,6392 'repeat':6355 'repres':1994 'requir':40,47 'result':5949 'rightarrow':240,1198,1314,1330,1447,1465 'rule':6391 'run':42,49,67,77,1940,2133,4850,4907,5986,6054,6071,6222 'rvert':3681,3711,3784,3933,3970,4000,4221,4263,4352,4721,4793 'satisfi':432 'say':5029,5099 'scenario':1875,1935 'section':752 'see':4902,5618,5940,6379 'self':123 'self-invert':122 'set':5031 'short':4685 'shown':1779,1804 'similar':213,334,676,1969,4750,5632 'simon':1,5,22,44,61,90,768,799,1178,1181,1623,1753,1963,6335,6361,6416,6419 'sinc':5393 'small':777 'solut':1621,1750,1788,1931,5156,5984 'solv':15,60,1622,1752,4897,4918,4939,4996,5621,5638,5942,6385 'somewhat':333 'space':189,193,208,212,224,228,343,4945,5027,5628,6404 'specif':1080 'sqrt':920,936,953,973,995,1017,1109,1131,1148,1163,2233,2253,2272,2303,2320,2339,2363,2383,2421,2444,2462,2487,2512,2536,2559,2572 'start':5644,6377,6383 'state':841,1052,2153,6411 'statist':3426,6373,6390 'still':57 'string':1212 'subspac':6154,6171 'succeed':6338 'success':6353 'suggest':5184 'sum':130,976,998,1020,1112,1134,1151,1166,2236,2256,2275,2306,2323,2342,2366,2386,2424,2447,2470,2490,2515,2539,2562,2575,2602,2609,2635,2642,3104,3111,3135,3142,3166,3173,3209,3216,3256,3263,3302,3309,3363,3486,3493,3529,3536,3574,3586,3621,3633,3662,3683,3692,3765,3788,3806,3826,3833,3862,3891,3905,3914,3951,3972,3981,4049,4056,4092,4099,4137,4149,4190,4223,4232,4321,4356,4386,4418,4425,4478,4485,4523,4530,4565,4630,4690,4753,4762,6292 'superposit':2123,2135 'suppos':2664,4848,5201,6072 'system':839,1047,6410 'tabl':183 'taken':4805 'text':170,457,1251,3743,3750,4296,4311,4661,4671,4727,4737,4824,4834 'therefor':1403,1599,1927,5592,5916 'time':53,236,1947,4860,6080,6359 'togeth':4806 'top':855,1067,1095,3395,3423,3458,4856 'trivial':1322,1456,1620,1628,1749,1787,1930,5155 'truth':182 'tupl':1531 'turn':4972 'two':246,367,1287,1433,1443,1470,1523,1606,1846,1921,4277,5919 'two-to-on':1286,1432,1442,1469,1522,1605,4276 'u':1999,2001,2006,2035,2137,2173,2294,2299,2330 'underbrac':708,1087 'uniform':3475,4023 'unitari':2010 'unlik':763 'use':181,455,775,790,797,1760,1789,1822,1928,1975,1995,5636 'valid':2113 'valu':141,1762,1776,1801,1824,1848,1888,1910,1923,1951,3354,5089,5993 'variabl':4924,4959 'varphi':2177,2196,2204,2291,2296,2403,2411,3092,3097,3479,4042 'vector':192,211,227,248,342,356,369,842,1053,4944,4955,5026,5034,5045,5058,5068,5074,5614,5627,6161,6189 'verifi':180,5667 'via':6354 'way':5064 'wedg':300,306,315,326,483,495,511,519,526,534,541,552,561,568,575,581,588,597,606,613,619,628,638,645,655,5120,5127,5134,5144,5265,5272,5279,5289,5300,5311,5322,5336,5346,5357,5368,5382,5432,5442,5454,5465,5476,5487,5501,5512,5523,5538,5554,5568,5582,5705,5711,5717,5730,5736,5742,5753,5794,5800,5806,5811,5817,5823,5828,5834,5841,5846,5875,5881,5887 'whether':5970 'whose':3413 'wise':1250 'without':5409 'worst':1874,1934 'would':86,792,1340,1475,1877,1899,1937,4926,4976,5250,6173 'written':5061 'x':136,142,152,155,159,162,250,258,259,261,264,283,294,298,304,312,324,358,371,379,380,382,385,402,406,411,417,442,444,468,471,477,480,489,492,503,507,517,523,532,538,549,557,566,572,579,585,594,602,611,617,625,635,642,651,662,669,681,691,698,729,888,899,913,931,947,966,990,1000,1008,1013,1022,1030,1035,1041,1055,1058,1060,1063,1069,1073,1126,1143,1158,1168,1174,1224,1233,1241,1365,1370,1377,1388,1393,1398,1490,1500,1506,1512,1534,1544,1552,1562,1576,1582,1636,1642,1649,1665,1675,1680,1683,1688,1691,1710,1723,1729,1736,1851,1855,1865,1869,1992,2016,2024,2029,2038,2045,2050,2057,2076,2083,2090,2097,2103,2116,2238,2244,2258,2264,2277,2283,2308,2314,2325,2333,2344,2350,2359,2368,2374,2379,2388,2394,2397,2426,2432,2435,2449,2455,2458,2472,2478,2483,2492,2503,2508,2517,2526,2532,2541,2550,2555,2564,2587,2596,2604,2621,2629,2637,2654,2660,2666,2669,2679,2682,2695,2702,2713,2721,2728,2740,2748,2755,2770,2778,2785,2798,2805,2816,2824,2831,2843,2851,2858,2873,2881,2888,2901,2908,2916,2923,2934,2942,2949,2961,2969,2976,2986,2994,3002,3011,3019,3027,3036,3044,3055,3064,3072,3083,3106,3123,3129,3144,3154,3160,3175,3186,3193,3203,3218,3229,3236,3250,3265,3276,3283,3296,3311,3322,3339,3365,3376,3495,3506 'xor':96,171,458,1252 'y':138,143,153,157,160,164,252,269,270,272,275,286,296,301,307,316,327,361,373,390,391,393,396,405,409,414,421,447,449,474,484,496,512,520,527,535,542,553,562,569,576,582,589,598,607,614,620,629,639,646,656,664,672,683,686,693,700,724,844,846,848,851,857,861,878,1032,1085,1226,1236,1239,1368,1373,1380,1386,1495,1498,1509,1515,1536,1542,1558,1565,1587,1594,1639,1645,1652,1668,1678,1712,1726,1732,1739,2020,2032,2042,2053,2064,2071,2079,2093,2120,3738,3748,3756,3835,3852,3860,4291,4301,4306,4427,4457,4476,4487,4501,4521,4532,4563 'yet':54 'z':1539,1549,1555,1568,1574,1592,2577,2585,2590,2611,2619,2624,2644,2652,2657,2693,2699,2711,2718,2725,2738,2745,2752,2768,2775,2782,2796,2802,2814,2821,2828,2841,2848,2855,2871,2878,2885,2899,2905,2914,2920,2932,2939,2946,2959,2966,2973,2984,2992,2999,3009,3017,3024,3034,3042,3052,3062,3070,3080,3113,3121,3126,3137,3152,3157,3168,3184,3191,3200,3211,3227,3234,3241,3247,3258,3274,3281,3287,3293,3304,3320,3329,3336,3347,3358,3374,3383,3406,3412,3416,3433,3441,3450,3469,3472,3488,3504,3513,3520,3531,3547,3556,3563,3576,3582,3597,3606,3623,3629,3643,3658,3672,3685,3702,3775,3798,3816,3843,3850,3872,3879,3907,3924,3947,3961,3974,3991,4020,4028,4051,4067,4076,4083,4094,4110,4119,4126,4139,4145,4160,4169,4186,4201,4210,4225,4243,4252,4332,4341,4367,4376,4397,4406,4436,4445,4455,4464,4496,4508,4541,4550,4576,4585,4604,4613,4641,4650,4665,4675,4701,4710,4731,4741,4755,4773,4782,4816,4828,4838,4864,4867,4871,4880,4983,4989,5016,5076,5079,5084,5101,5104,5109,5122,5129,5136,5146,5168,5171,5176,5190,5203,5206,5211,5227,5235,5244,5267,5274,5281,5291,5302,5313,5324,5338,5349,5360,5371,5385,5395,5398,5403,5425,5435,5445,5457,5468,5479,5490,5504,5515,5526,5541,5557,5571,5595,5652,5658,5670,5673,5681,5689,5699,5724,5760,5768,5780,5788,5869,6050,6067,6086,6092,6109,6121,6128 'zero':3401,5961	en	Lei Mao
1042	Fennel – Lisp in Lua	{"ver":2,"uid":1,"hash":"SHA1:d49ddd74a5f98839481a2a78e3ebf17ac3f17fdf"}	https://fennel-lang.org/	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24390904"> https://news.ycombinator.com/item?id=24390904 </a>	ca112b82005e0022e276dadc2d4b52ff3fadd316	\N	f	2020-09-07 19:10:00	2020-09-08 03:10:10.222228	0			'/item?id=24390904':8 'comment':5 'fennel':1 'lisp':2 'lua':4 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24390904':6	zh	tosh
42	Control Python AsyncIO Coroutine Interactively	{"ver":2,"uid":1,"hash":"SHA1:b939c07eaded2afd78de752805928b1c70219721"}	https://leimao.github.io/blog/Control-Python-AsyncIO-Coroutine-Interactively/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Python <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency are very good for I/O-bound tasks in Python with less overhead compared to <code class="language-plaintext highlighter-rouge">threading</code> methods. In some rare cases, since Python is a scripting language, we would like to run <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency interactively in REPL (read-eval-print loop), the Python interactive shell. Because Python <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency are single-process and single-thread, while they are being executed, we could not do anything in REPL but wait.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss how to use <code class="language-plaintext highlighter-rouge">threading</code> to control <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency interactively.</p>\n\n<h3 id="asyncio-concurrency">AsyncIO Concurrency</h3>\n\n<h4 id="asyncio-base">AsyncIO Base</h4>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>\n    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">number</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">gather_func</span><span class="p">():</span>\n    <span class="c1"># Schedule three calls *concurrently*:\n</span>    <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>\n    <span class="p">)</span>\n    <span class="k">return</span> <span class="n">results</span>\n\n<span class="c1"># Use asyncio high-level API\n</span><span class="n">results</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">gather_func</span><span class="p">())</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>If running this script in the REPL, we would have to wait three seconds after executing <code class="language-plaintext highlighter-rouge">results = asyncio.run(gather_func())</code> before we could execute <code class="language-plaintext highlighter-rouge">print(results)</code>. In some use cases, if it is requesting something from a remote server, it might have a chance to take forever, and we have to press <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">C</code> to kill.</p>\n\n<h4 id="asyncio-timeout">AsyncIO Timeout</h4>\n\n<p>If we don’t like waiting too long for the <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency, we have options to timeout.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>\n    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">number</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">gather_func</span><span class="p">():</span>\n    <span class="c1"># Schedule three calls *concurrently*:\n</span>    <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>\n    <span class="p">)</span>\n    <span class="k">return</span> <span class="n">results</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>\n    <span class="c1"># Schedule three calls *concurrently*:\n</span>    <span class="k">try</span><span class="p">:</span>\n        <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">wait_for</span><span class="p">(</span><span class="n">gather_func</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span> <span class="c1"># Try toggle timeout between 1 and None.\n</span>    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>\n        <span class="k">print</span><span class="p">(</span><span class="s">"timeout!"</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">results</span>\n\n<span class="c1"># Use asyncio high-level API\n</span><span class="n">results</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>If running this script in the REPL, even if we used <code class="language-plaintext highlighter-rouge">asyncio.wait_for</code> with <code class="language-plaintext highlighter-rouge">timeout</code>, we could not do anything but wait during the <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency. In addition, we have to set a fixed <code class="language-plaintext highlighter-rouge">timeout</code> value before we start the <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency. We could not change our mind during waiting, unless we press <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">C</code> to kill.</p>\n\n<h4 id="asyncio--thread">AsyncIO + Thread</h4>\n\n<p>If we have two Python threads, one thread is responsible for the <code class="language-plaintext highlighter-rouge">asyncio</code> event loop which is take care of the concurrency schedules at the low-level, and the other one thread is responsible for the user interactive activities while still having control access to the <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n<span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>\n<span class="kn">import</span> <span class="nn">time</span>\n\n<span class="k">def</span> <span class="nf">endless_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">):</span>\n    <span class="n">asyncio</span><span class="p">.</span><span class="n">set_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>\n    <span class="n">loop</span><span class="p">.</span><span class="n">run_forever</span><span class="p">()</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>\n    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">number</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">gather_func</span><span class="p">():</span>\n    <span class="c1"># Schedule three calls *concurrently*:\n</span>    <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span>\n        <span class="n">some_func</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>\n    <span class="p">)</span>\n    <span class="k">return</span> <span class="n">results</span>\n\n<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">new_event_loop</span><span class="p">()</span>\n\n<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">endless_event_loop</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">loop</span><span class="p">,))</span>\n<span class="c1"># Start an endless event loop\n</span><span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>\n\n<span class="c1"># Return concurrent.futures.Future instead of asycnio.Future\n</span><span class="n">future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">run_coroutine_threadsafe</span><span class="p">(</span><span class="n">gather_func</span><span class="p">(),</span> <span class="n">loop</span><span class="p">)</span>\n\n<span class="c1"># Cancel asyncio concurrency anytime!\n# future.cancel()\n</span>\n<span class="k">while</span> <span class="ow">not</span> <span class="n">future</span><span class="p">.</span><span class="n">done</span><span class="p">():</span>\n    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n    <span class="k">print</span><span class="p">(</span><span class="s">"Concurrency is done: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">future</span><span class="p">.</span><span class="n">done</span><span class="p">()))</span>\n\n<span class="n">results</span> <span class="o">=</span> <span class="n">future</span><span class="p">.</span><span class="n">result</span><span class="p">()</span>\n\n<span class="k">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>\n\n<span class="c1"># Ron Frederick has thought of a smart way to kill the event loop and the thread using callback from another thread.\n# https://github.com/ronf/asyncssh/issues/295#issuecomment-659143796\n# Without this, the thread running the event loop will run forever, and the program could not exit normally.\n</span><span class="n">loop</span><span class="p">.</span><span class="n">call_soon_threadsafe</span><span class="p">(</span><span class="n">loop</span><span class="p">.</span><span class="n">stop</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>Now, we could check and cancel <code class="language-plaintext highlighter-rouge">asyncio</code> concurrency anytime during its execution. However, there are a drawback of this method. The <code class="language-plaintext highlighter-rouge">concurrent.futures.Future</code> represents the status of coroutine running in the event loop. The coroutine might contain many tasks, but we will not be able to have access to any of them individually in another thread.</p>\n\n<p><br /></p>\n\n<p>To overcome this, instead of merging multiple tasks into one single task, we could call <code class="language-plaintext highlighter-rouge">run_coroutine_threadsafe</code> multiple times for individual <code class="language-plaintext highlighter-rouge">coroutine</code>s and get multiple <code class="language-plaintext highlighter-rouge">future</code>s to control them individually.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n<span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>\n<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">CancelledError</span>\n<span class="kn">import</span> <span class="nn">time</span>\n\n<span class="k">def</span> <span class="nf">endless_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">):</span>\n    <span class="n">asyncio</span><span class="p">.</span><span class="n">set_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>\n    <span class="n">loop</span><span class="p">.</span><span class="n">run_forever</span><span class="p">()</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">some_func</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>\n    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">number</span>\n\n<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">new_event_loop</span><span class="p">()</span>\n\n<span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">endless_event_loop</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">loop</span><span class="p">,))</span>\n<span class="c1"># Start an endless event loop\n</span><span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>\n\n<span class="c1"># Return concurrent.futures.Future instead of asycnio.Future\n</span><span class="n">futures</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">run_coroutine_threadsafe</span><span class="p">(</span><span class="n">coroutine</span><span class="p">,</span> <span class="n">loop</span><span class="p">)</span> <span class="k">for</span> <span class="n">coroutine</span> <span class="ow">in</span> <span class="p">[</span><span class="n">some_func</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">some_func</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">some_func</span><span class="p">(</span><span class="mi">3</span><span class="p">)]]</span>\n\n<span class="c1"># Cancel any asyncio concurrency anytime!\n</span><span class="n">futures</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">cancel</span><span class="p">()</span>\n\n<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">future</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">futures</span><span class="p">):</span>\n    <span class="k">try</span><span class="p">:</span>\n        <span class="k">print</span><span class="p">(</span><span class="s">"Task {} result: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">future</span><span class="p">.</span><span class="n">result</span><span class="p">()))</span>\n    <span class="k">except</span> <span class="n">CancelledError</span><span class="p">:</span>\n        <span class="k">print</span><span class="p">(</span><span class="s">"Task {} cancelled"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>\n\n<span class="c1"># Ron Frederick has thought of a smart way to kill the event loop and the thread using callback from another thread.\n# https://github.com/ronf/asyncssh/issues/295#issuecomment-659143796\n# Without this, the thread running the event loop will run forever, and the program could not exit normally.\n</span><span class="n">loop</span><span class="p">.</span><span class="n">call_soon_threadsafe</span><span class="p">(</span><span class="n">loop</span><span class="p">.</span><span class="n">stop</span><span class="p">)</span>\n</code></pre></div></div>\n\n<h4 id="object-oriented-programming-version">Object Oriented Programming Version</h4>\n\n<p>Please see Ron Frederick’s implementation in our <a href="https://github.com/ronf/asyncssh/issues/295#issuecomment-659143796">discussion</a> on GitHub.</p>\n\n<h3 id="acknowledgement">Acknowledgement</h3>\n\n<p>I would like to thank <a href="https://github.com/ronf">Ron Frederick</a> for the active responses to my questions and the constructive feedbacks.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://github.com/ronf/asyncssh/issues/295">Interactively Kill Async Tasks</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Control-Python-AsyncIO-Coroutine-Interactively/">Control Python AsyncIO Coroutine Interactively</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 15, 2020.</p>	facc4918e2c4792d6c2b973442190f2e395c5120	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.434519	0			'/ronf/asyncssh/issues/295#issuecomment-659143796':529,763 '0':718 '1':127,248,277,447,495,705 '15':844 '2':130,251,450,708 '2020':845 '3':111,133,232,254,431,453,668,711 'abl':595 'access':400,598 'acknowledg':801 'activ':395,811 'addit':324 'anoth':525,605,759 'anyth':75,316 'anytim':489,560,716 'api':141,291 'arg':466,681 'asycnio.future':478,693 'async':104,114,225,235,257,424,434,661,823 'asyncio':3,8,40,56,95,98,100,103,137,204,216,224,287,321,337,354,368,403,406,487,558,639,714,827 'asyncio.gather':124,245,444 'asyncio.new':457,672 'asyncio.run':143,165,293,480,695 'asyncio.set':418,655 'asyncio.sleep':110,231,430,667 'asyncio.timeouterror':281 'asyncio.wait':267,308 'await':109,123,230,244,266,429,443,666 'base':101 'blog':82 'book':841 'c':201,351 'call':120,241,262,440,621 'callback':523,757 'cancel':486,557,712,719,737 'cancellederror':647,734 'care':374 'case':28,177 'chanc':191 'chang':342 'check':555 'compar':21 'concurr':9,41,57,96,99,121,217,242,263,322,338,377,404,441,488,497,559,715 'concurrent.futures':645 'concurrent.futures.future':475,573,690 'construct':818 'contain':587 'control':1,94,399,635,825 'coroutin':4,481,578,585,623,629,696,698,701,828 'could':72,170,313,340,544,554,620,778 'ctrl':200,350 'def':105,115,226,236,258,413,425,435,650,662 'discuss':88,798 'done':499 'drawback':568 'endless':414,463,470,651,678,685 'enumer':724 'eval':47 'even':304 'event':369,415,419,458,464,471,517,536,582,652,656,673,679,686,751,770 'except':280,733 'execut':70,163,171,563 'exit':546,780 'feedback':819 'fix':330 'forev':194,423,540,660,774 'format':500,730,738 'frederick':507,741,793,808 'func':107,117,126,129,132,145,167,228,238,247,250,253,270,427,437,446,449,452,484,664,704,707,710 'futur':479,633,694,717,722,725 'future.cancel':490 'future.done':493,501 'future.result':503,732 'gather':116,144,166,237,269,436,483 'get':631 'github':800 'github.com':528,762 'github.com/ronf/asyncssh/issues/295#issuecomment-659143796':527,761 'good':12 'high':139,289 'high-level':138,288 'howev':564 'i/o-bound':14 'implement':795 'import':102,223,405,409,411,638,642,646,648 'individu':603,628,637 'instead':476,610,691 'interact':5,42,52,97,394,821,829 'introduct':6 'juli':843 'kill':203,353,515,749,822 'languag':34 'lei':834,837 'less':19 'level':140,290,383 'like':37,86,210,804 'log':840 'long':213 'loop':49,370,416,417,420,421,456,459,465,467,472,485,518,537,583,653,654,657,658,671,674,680,682,687,699,752,771 'loop.call':548,782 'loop.run':422,659 'loop.stop':551,785 'low':382 'low-level':381 'main':259,294 'mani':588 'mao':835,838 'merg':612 'method':24,571 'might':188,586 'mind':344 'multipl':613,625,632 'none':272,279 'normal':547,781 'number':108,113,229,234,428,433,665,670 'object':786 'one':362,387,616 'option':220 'orient':787 'origin':831 'overcom':608 'overhead':20 'pleas':790 'post':83 'press':199,349 'print':48,146,172,282,295,496,504,727,735 'process':61 'program':543,777,788 'publish':832 'python':2,7,17,30,51,55,360,826 'question':815 'rare':27 'read':46 'read-eval-print':45 'refer':820 'remot':185 'repl':44,77,154,303 'repres':574 'request':181 'respons':365,390,812 'result':122,135,142,147,164,173,243,256,265,285,292,296,442,455,502,505,729 'return':112,134,233,255,284,432,454,474,669,689 'ron':506,740,792,807 'run':39,149,298,534,539,579,622,768,773 'schedul':118,239,260,378,438 'script':33,151,300 'second':161 'see':791 'server':186 'set':328 'shell':53 'sinc':29 'singl':60,64,617 'single-process':59 'single-thread':63 'smart':512,746 'someth':182 'soon':549,783 'start':335,468,683 'status':576 'still':397 't.start':473,688 'take':193,373 'target':462,677 'task':15,589,614,618,728,736,824 'thank':806 'thought':509,743 'thread':23,65,92,355,361,363,388,408,410,461,521,526,533,606,641,643,676,755,760,767 'threadsaf':482,550,624,697,784 'three':119,160,240,261,439 'time':412,626,649 'time.sleep':494 'timeout':205,222,271,275,283,311,331 'toggl':274 'tri':264,273,726 'two':359 'unless':347 'use':91,136,176,286,307,522,756 'user':393 'valu':332 'version':789 'wait':79,159,211,318,346 'way':513,747 'without':530,764 'would':36,85,156,803	en	Lei Mao
44	Parallel Gzip - Pigz	{"ver":2,"uid":1,"hash":"SHA1:50b30fb177e7f37b8f2236cd7b63577035bdfb9f"}	https://leimao.github.io/blog/Parallel-Gzip-Pigz/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Sometimes, we would like to compress one or several files into one zipped file or decompress a zipped file. It is very common to use tools such as gzip, zip, or 7zip to create or decompress <code class="language-plaintext highlighter-rouge">.gz</code>, <code class="language-plaintext highlighter-rouge">.zip</code>, and <code class="language-plaintext highlighter-rouge">.7z</code> files, respectively. However, none of these tools on Linux uses multicore and multithread during compression and decompression. When the number of files are large or the file sizes are large, compression and decompression would take a lot of time using single thread.</p>\n\n<p><br /></p>\n\n<p>Pigz is one of the parallel implementation for gzip and zip. Using pigz could greatly save us the time spent on compression and decompression. In this blog post, I would like to briefly discuss how to use pigz.</p>\n\n<h3 id="pigz">Pigz</h3>\n\n<p>The pigz usages in the blog post are mainly targeted for Ubuntu systems. However, its usages on other Linux operating systems should be almost the same.</p>\n\n<h4 id="installation">Installation</h4>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update\n<span class="nb">sudo </span>apt <span class="nb">install </span>pigz\n</code></pre></div></div>\n\n<h4 id="pigz-usages">Pigz Usages</h4>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pigz --help\nUsage: pigz [options] [files ...]\n  will compress files in place, adding the suffix '.gz'. If no files are\n  specified, stdin will be compressed to stdout. pigz does what gzip does,\n  but spreads the work over multiple processors and cores when compressing.\n\nOptions:\n  -0 to -9, -11        Compression level (level 11, zopfli, is much slower)\n  --fast, --best       Compression levels 1 and 9 respectively\n  -b, --blocksize mmm  Set compression block size to mmmK (default 128K)\n  -c, --stdout         Write all processed output to stdout (won't delete)\n  -d, --decompress     Decompress the compressed input\n  -f, --force          Force overwrite, compress .gz, links, and to terminal\n  -F  --first          Do iterations first, before block split for -11\n  -h, --help           Display a help screen and quit\n  -i, --independent    Compress blocks independently for damage recovery\n  -I, --iterations n   Number of iterations for -11 optimization\n  -J, --maxsplits n    Maximum number of split blocks for -11\n  -k, --keep           Do not delete original file after processing\n  -K, --zip            Compress to PKWare zip (.zip) single entry format\n  -l, --list           List the contents of the compressed input\n  -L, --license        Display the pigz license and quit\n  -m, --no-time        Do not store or restore mod time\n  -M, --time           Store or restore mod time\n  -n, --no-name        Do not store or restore file name or mod time\n  -N, --name           Store or restore file name and mod time\n  -O  --oneblock       Do not split into smaller blocks for -11\n  -p, --processes n    Allow up to n compression threads (default is the\n                       number of online processors, or 8 if unknown)\n  -q, --quiet          Print no messages, even on error\n  -r, --recursive      Process the contents of all subdirectories\n  -R, --rsyncable      Input-determined block locations for rsync\n  -S, --suffix .sss    Use suffix .sss instead of .gz (for compression)\n  -t, --test           Test the integrity of the compressed input\n  -v, --verbose        Provide more verbose output\n  -V  --version        Show the version of pigz\n  -Y  --synchronous    Force output file write to permanent storage\n  -z, --zlib           Compress to zlib (.zz) instead of gzip format\n  --                   All arguments after "--" are treated as files\n</code></pre></div></div>\n\n<p>A typical command for compressing and decompressing a file is like the following:</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Compress</span>\n<span class="c"># Always use -k to keep the original file</span>\n<span class="nv">$ </span>pigz <span class="nt">-k</span> <span class="nt">-p8</span> image.png\n<span class="c"># Decompress</span>\n<span class="nv">$ </span>pigz <span class="nt">-dk</span> <span class="nt">-p8</span> image.gz\n</code></pre></div></div>\n\n<p>However, vanilla pigz is not very friendly to compressing multiple files into one single file and custom output filepath. We would need to rely on tar, the archive tool.</p>\n\n<h4 id="tar-pigz-usages">Tar-Pigz Usages</h4>\n\n<p>Using pipe <code class="language-plaintext highlighter-rouge">|</code>, we could first archive multiple files or directories first to <code class="language-plaintext highlighter-rouge">.tar</code> file and compress using pigz to further generate <code class="language-plaintext highlighter-rouge">.tar.gz</code> file.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Compress</span>\n<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-cf</span> - data/ index.json | pigz <span class="nt">-k</span> <span class="nt">-p8</span> <span class="o">&gt;</span> dataset.tar.gz\n<span class="c"># Decompress (Unfortunately two steps)</span>\n<span class="nv">$ </span>pigz <span class="nt">-k</span> <span class="nt">-p8</span> dataset.tar.gz\n<span class="c"># Extract file to another directory</span>\n<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> new_dataset\n<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-xf</span> dataset.tar <span class="nt">-C</span> new_dataset\n</code></pre></div></div>\n\n<p>Alternatively, tar has already integrated custom compressor in its interface, which makes the command looks more clear.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Compress</span>\n<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">--use-compress-program</span><span class="o">=</span><span class="s2">"pigz -k -p8"</span> <span class="nt">-cf</span> dataset.tar.gz data/ index.json\n<span class="c"># Extract file to another directory</span>\n<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> new_dataset\n<span class="c"># Decompress</span>\n<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">--use-compress-program</span><span class="o">=</span><span class="s2">"pigz -dk -p8"</span> <span class="nt">-xf</span> dataset.tar.gz <span class="nt">-C</span> new_dataset\n</code></pre></div></div>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://zlib.net/pigz/">Pigz</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Parallel-Gzip-Pigz/">Parallel Gzip - Pigz</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 08, 2020.</p>	16554390fb944d346567232e5c64530a87d3096f	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.439419	0			'-0':205 '-11':208,272,296,307,395 '-9':207 '08':691 '1':221 '11':212 '128k':235 '2020':692 '7z':44 '7zip':36 '8':413 '9':223 'ad':173 'allow':399 'almost':149 'alreadi':622 'altern':619 'alway':514 'anoth':607,652 'apt':154,157 'archiv':558,569 'argument':494 'b':225 'best':218 'block':230,269,284,305,393,437 'blocksiz':226 'blog':113,131 'book':688 'briefli':119 'c':236,616,669 'cf':589,645 'clear':635 'command':502,632 'common':27 'compress':10,59,75,108,169,185,203,209,219,229,251,257,283,319,334,403,451,459,485,504,513,539,579,587,636,640,662 'compressor':625 'content':331,428 'core':201 'could':100,567 'creat':38 'custom':547,624 'd':247 'damag':287 'data':590,647 'dataset':612,618,657,671 'dataset.tar':615 'dataset.tar.gz':595,603,646,668 'decompress':20,40,61,77,110,248,249,506,526,596,658 'default':234,405 'delet':246,312 'determin':436 'directori':573,608,653 'discuss':120 'display':275,338 'dk':528,665 'entri':325 'error':423 'even':421 'extract':604,649 'f':253,263 'fast':217 'file':14,18,23,45,66,71,167,170,179,314,371,381,478,499,508,521,541,545,571,577,586,605,650 'filepath':549 'first':264,267,568,574 'follow':512 'forc':254,255,476 'format':326,492 'friend':537 'generat':584 'great':101 'gz':41,176,258,449 'gzip':2,33,95,191,491,675 'h':273 'help':163,274,277 'howev':47,139,531 'image.gz':530 'image.png':525 'implement':93 'independ':282,285 'index.json':591,648 'input':252,335,435,460 'input-determin':434 'instal':152,158 'instead':447,489 'integr':456,623 'interfac':628 'introduct':4 'iter':266,290,294 'j':298 'juli':690 'k':308,317,516,523,593,601,643 'keep':309,518 'l':327,336 'larg':68,74 'lei':681,684 'level':210,211,220 'licens':337,341 'like':8,117,510 'link':259 'linux':53,144 'list':328,329 'locat':438 'log':687 'look':633 'lot':81 'm':344,355 'main':134 'make':630 'mao':682,685 'maximum':301 'maxsplit':299 'messag':420 'mkdir':609,654 'mmm':227 'mmmk':233 'mod':353,360,374,384 'much':215 'multicor':55 'multipl':198,540,570 'multithread':57 'n':291,300,362,376,398,402 'name':365,372,377,382 'need':552 'new':611,617,656,670 'no-nam':363 'no-tim':345 'none':48 'number':64,292,302,408 'o':386 'one':11,16,89,543 'oneblock':387 'onlin':410 'oper':145 'optim':297 'option':166,204 'origin':313,520,678 'output':241,466,477,548 'overwrit':256 'p':396,610,655 'p8':524,529,594,602,644,666 'parallel':1,92,674 'perman':481 'pigz':3,87,99,124,125,127,159,160,162,165,188,340,473,522,527,533,562,581,592,600,642,664,673,676 'pipe':565 'pkware':321 'place':172 'post':114,132 'print':418 'process':240,316,397,426 'processor':199,411 'program':641,663 'provid':463 'publish':679 'q':416 'quiet':417 'quit':280,343 'r':424,432 'recoveri':288 'recurs':425 'refer':672 'reli':554 'respect':46,224 'restor':352,359,370,380 'rsync':440 'rsyncabl':433 'save':102 'screen':278 'set':228 'sever':13 'show':469 'singl':85,324,544 'size':72,231 'slower':216 'smaller':392 'sometim':5 'specifi':181 'spent':106 'split':270,304,390 'spread':194 'sss':443,446 'stdin':182 'stdout':187,237,243 'step':599 'storag':482 'store':350,357,368,378 'subdirectori':431 'sudo':153,156 'suffix':175,442,445 'synchron':475 'system':138,146 'take':79 'tar':556,561,576,588,613,620,637,659 'tar-pigz':560 'tar.gz':585 'target':135 'termin':262 'test':453,454 'thread':86,404 'time':83,105,347,354,356,361,375,385 'tool':30,51,559 'treat':497 'two':598 'typic':501 'ubuntu':137 'unfortun':597 'unknown':415 'updat':155 'us':103 'usag':128,141,161,164,563 'use':29,54,84,98,123,444,515,564,580,639,661 'use-compress-program':638,660 'v':461,467 'vanilla':532 'verbos':462,465 'version':468,471 'won':244 'work':196 'would':7,78,116,551 'write':238,479 'xf':614,667 'y':474 'z':483 'zip':17,22,34,42,97,318,322,323 'zlib':484,487 'zopfli':213 'zz':488	en	Lei Mao
1041	Traffic Prediction with Advanced Graph Neural Networks	{"ver":2,"uid":1,"hash":"SHA1:b5d6e62fb11c705d9ffe7dc6ba42a8a37d5220dd"}	https://deepmind.com/blog/article/traffic-prediction-with-advanced-graph-neural-networks	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24386584"> https://news.ycombinator.com/item?id=24386584 </a>	40df2bfabaf5cf9b095f40557ff8eba4a67d84d9	\N	f	2020-09-07 19:10:00	2020-09-08 01:10:11.034691	0			'/item?id=24386584':11 'advanc':4 'comment':8 'graph':5 'network':7 'neural':6 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24386584':9 'predict':2 'traffic':1	zh	beefman
64	Epic Games has filed legal papers in response to Apple [pdf]	{"ver":2,"uid":1,"hash":"SHA1:a44ba56add52267a321be801dabb5b157a85ce80"}	https://cdn2.unrealengine.com/apple-complaint-734589783.pdf	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24147486"> https://news.ycombinator.com/item?id=24147486 </a>	4859f37dde621f98bf2961e4803f657ba95c0705	\N	f	2020-08-14 05:06:00	2020-08-16 20:10:10.479378	0			'/item?id=24147486':15 'appl':10 'comment':12 'epic':1 'file':4 'game':2 'legal':5 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24147486':13 'paper':6 'pdf':11 'respons':8	zh	warp
65	Planet Ceres is an 'ocean world' with sea water beneath surface, mission finds	{"ver":2,"uid":1,"hash":"SHA1:623d80265189c16e4acd5733347c089f6a9999b0"}	https://www.theguardian.com/science/2020/aug/10/planet-ceres-ocean-world-sea-water-beneath-surface	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24113798"> https://news.ycombinator.com/item?id=24113798 </a>	d76d5aa3a821e5afff700d9c9b551d0d13e01789	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.290706	0			'/item?id=24113798':17 'beneath':10 'cere':2 'comment':14 'find':13 'mission':12 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24113798':15 'ocean':5 'planet':1 'sea':8 'surfac':11 'water':9 'world':6	zh	grawprog
62	Joan Feynman has died	{"ver":2,"uid":1,"hash":"SHA1:fbcfc54dcbed972e514d0a18229537ab3410deaa"}	https://www.aps.org/publications/apsnews/updates/feynman.cfm	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24129698"> https://news.ycombinator.com/item?id=24129698 </a>	2e64dd0566b0d421596e2b430a2b2c8fa948ee65	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.284574	0			'/item?id=24129698':8 'comment':5 'die':4 'feynman':2 'joan':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24129698':6	zh	basementcat
78	The new Jupyter Book	{"ver":2,"uid":1,"hash":"SHA1:5e0bd9573b5b5ab4a10b8cb0d4c1d33cdce0c355"}	https://blog.jupyter.org/announcing-the-new-jupyter-book-cbf7aa8bc72e	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24136955"> https://news.ycombinator.com/item?id=24136955 </a>	34732b3ea195e2986f43e0f97033d6211d2d2046	\N	f	2020-08-14 05:06:00	2020-08-15 08:10:08.848322	0			'/item?id=24136955':8 'book':4 'comment':5 'jupyt':3 'new':2 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24136955':6	zh	rntc
67	Belarus has shut down the internet amid a controversial election	{"ver":2,"uid":1,"hash":"SHA1:b56c0037f97f551c001fb853f50ff0267b971ef1"}	https://www.wired.com/story/belarus-internet-outage-election/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24120054"> https://news.ycombinator.com/item?id=24120054 </a>	a0df048573694bfd83b0558b782a80a95dcc02ed	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.294653	0			'/item?id=24120054':14 'amid':7 'belarus':1 'comment':11 'controversi':9 'elect':10 'internet':6 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24120054':12 'shut':3	zh	ikse11
58	Apple just kicked Fortnite off the App Store	{"ver":2,"uid":1,"hash":"SHA1:0d942e968f8fa20aad0b13b3b0f53c47406766c4"}	https://www.theverge.com/2020/8/13/21366438/apple-fortnite-ios-app-store-violations-epic-payments	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24146987"> https://news.ycombinator.com/item?id=24146987 </a>	87b3713507f2c400beae9c95488c35020d889f0e	\N	f	2020-08-14 05:06:00	2020-08-16 20:10:10.471473	0			'/item?id=24146987':12 'app':7 'appl':1 'comment':9 'fortnit':4 'kick':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24146987':10 'store':8	zh	ardit33
264	Apple Music on Android asks user's card details to avoid Google's 30% cut	{"ver":2,"uid":1,"hash":"SHA1:fb9b3bdff6b28af7ae20b75a80c99c5d38d4bea0"}	https://reddit.com/r/apple/comments/hb0jl8/	2020-08-14 08:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24153263"> https://news.ycombinator.com/item?id=24153263 </a>	236fb2e08eace234988648647445e950220fab02	\N	f	2020-08-14 08:10:00	2020-08-18 02:10:08.418953	0			'/item?id=24153263':19 '30':14 'android':4 'appl':1 'ask':5 'avoid':11 'card':8 'comment':16 'cut':15 'detail':9 'googl':12 'music':2 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24153263':17 'user':6	zh	ffpip
55	Mozilla lays off 250 employees while it refocuses on commercial products	{"ver":2,"uid":1,"hash":"SHA1:6a17102bfd9278e0cca4d8f24ccb756dc24b9055"}	https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24120336"> https://news.ycombinator.com/item?id=24120336 </a>	cca6aff4fa8af4a2f7093f0aa1d14e5a5c123e50	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.268853	0			'/item?id=24120336':15 '250':4 'comment':12 'commerci':10 'employe':5 'lay':2 'mozilla':1 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24120336':13 'product':11 'refocus':8	zh	rebelwebmaster
54	VS Code Development Using Docker Containers on Remote Host	{"ver":2,"uid":1,"hash":"SHA1:4117fee01a5dcd06937eef6f40013926bc85f9ce"}	https://leimao.github.io/blog/VS-Code-Development-Remote-Host-Docker/	2020-08-14 05:06:27	<h3 id="introduction">Introduction</h3>\n\n<p>Sometimes, we would like to develop or debug programs which could only be run on a remote powerful host server, such as a multi-GPU deep learning training program. Setting up a containerized development environment on the host server and being able to communicate to the remote containerized development environment via local IDEs are necessary. It turns out that VS Code could do this with its extensions.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to talk about how to set up the VS Code Docker development environment on a remote host, develop and debug programs in the remote Docker development environment from local VS Code GUI.</p>\n\n<h3 id="protocol">Protocol</h3>\n\n<h4 id="ssh-key-based-authentication">SSH Key Based Authentication</h4>\n\n<p>Follow the <a href="https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication">instruction</a> to set up the SSH key based authentication to the remote host server, so that we don’t need password every time to login to the remote host server.</p>\n\n<p><br /></p>\n\n<p>Concretely, if we don’t have the public key, which is usually <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code>, generated, we could generate the public key by running the following command on the local computer.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096\n</code></pre></div></div>\n\n<p>Once we have generated the public key, we would have to copy the public key to the remote host by running the following command. We would need to enter the password once to the remote host server.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">export </span><span class="nv">USER_AT_HOST</span><span class="o">=</span><span class="s2">"your-user-name-on-host@hostname"</span>\n<span class="nv">$ </span><span class="nb">export </span><span class="nv">PUBKEYPATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.ssh/id_rsa.pub"</span>\n\n<span class="nv">$ </span>ssh-copy-id <span class="nt">-i</span> <span class="s2">"</span><span class="nv">$PUBKEYPATH</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$USER_AT_HOST</span><span class="s2">"</span>\n</code></pre></div></div>\n\n<p>Once the SSH key based authentication was set up, we no longer have have enter the password when we login the remote host server. Verify this by SSH into the remote host.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh your-user-name-on-host@hostname\n</code></pre></div></div>\n\n<h4 id="vs-code-settings">VS Code Settings</h4>\n\n<p>By default, the VS Code Remote-Container uses local Docker host. This means that we are actually running the containers on the local computer. To use the container running on the remote host server, we have to add <code class="language-plaintext highlighter-rouge">"docker.host":"your-user-name-on-host@hostname"</code> to VS Code <code class="language-plaintext highlighter-rouge">settings.json</code>. It is usually located in <code class="language-plaintext highlighter-rouge">~/.config/Code/User/</code>.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{\n    "cmake.configureOnOpen": true,\n    "C_Cpp.updateChannel": "Insiders",\n    "window.zoomLevel": 0,\n    "editor.minimap.enabled": true,\n    "cSpell.userWords": [\n        "uncorrelatonship"\n    ],\n    "docker.host":"your-user-name-on-host@hostname"\n}\n</code></pre></div></div>\n\n<p>In addition, it is required to install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack">Remote Development</a> extension in VS Code.</p>\n\n<h4 id="vs-code-workspace-on-host">VS Code Workspace on Host</h4>\n\n<p>We would have to create a directory on the remote host as the workspace for VS Code. We could transfer existing files from local to remote host or transfer new or modified files from remote host to local.</p>\n\n<p><br /></p>\n\n<p>On remote host, we run the following command to create a directory.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> /home/leimao/Workspace/vs-remote-workspace\n</code></pre></div></div>\n\n<p>On the local computer, we transfer the file to remote host using <code class="language-plaintext highlighter-rouge">scp</code>. We could also use <code class="language-plaintext highlighter-rouge">rsync</code> or whatever transfer tools we feel comfortable with.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>scp hello.bash your-user-name-on-host@hostname:/home/leimao/Workspace/vs-remote-workspace\n</code></pre></div></div>\n\n<p>On the remote host, we could verify the file has been successfully transferred.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> /home/leimao/Workspace/vs-remote-workspace/hello.bash\n<span class="nb">echo</span> <span class="s2">"Hello Underworld!"</span>\n</code></pre></div></div>\n\n<h4 id="vs-code-workspace-on-local-computer">VS Code Workspace on Local Computer</h4>\n\n<p>Create a directory for VS Code Workspace. Create a <code class="language-plaintext highlighter-rouge">devcontainer.json</code> in the subdirectory <code class="language-plaintext highlighter-rouge">.devcontainer</code>. Use the JSON similar to the following one.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file's README at:\n// https://github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile\n{\n\t"name": "VS Code Remote Demo",\n\n\t// Sets the run context to one level up instead of the .devcontainer folder.\n\t"context": "..",\n\n\t// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.\n\t"dockerFile": "../docker/nvidia.Dockerfile",\n\n\t// Set *default* container specific settings.json values on container create.\n\t"settings": { \n\t\t"terminal.integrated.shell.linux": null\n\t},\n\n\t// Add the IDs of extensions you want installed when the container is created.\n\t"extensions": [],\n\n\t// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\t// "forwardPorts": [],\n\n\t// Uncomment the next line to run commands after the container is created - for example installing git.\n\t// "postCreateCommand": "apt-get update &amp;&amp; apt-get install -y git",\n\n\t// Uncomment when using a ptrace-based debugger like C++, Go, and Rust\n\t// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],\n    "runArgs": [ "--gpus", "device=0" ],\n\n\t// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-in-docker.\n\t// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],\n\n\t// Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.\n\t// "remoteUser": "vscode"\n\n    // Using volume\n\t// "image": "ubuntu-remote-test:0.0.1", // Or "dockerFile"\n\t// "workspaceFolder": "/workspace",\n\t// "workspaceMount": "source=remote-workspace,target=/workspace,type=volume"\n\n\t// Using bind\n\t// /home/leimao/Workspace/vs-remote-workspace/ is a directory on the remote host computer\n    // "workspaceFolder" is the folder in the Docker container as workspace\n    // target=/workspace is the folder in the Docker container that the workspace on the host server are going to bind to\n\t"workspaceFolder": "/workspace",\n\t"workspaceMount": "source=/home/leimao/Workspace/vs-remote-workspace/,target=/workspace,type=bind,consistency=cached",\n}\n</code></pre></div></div>\n\n<p>Note that <code class="language-plaintext highlighter-rouge">"dockerFile"</code> has to correctly point to the local Dockerfile we are going to use. We also provide additional Docker running arguments to <code class="language-plaintext highlighter-rouge">"runArgs"</code>.</p>\n\n<h4 id="start-vs-code-remote-container">Start VS Code Remote-Container</h4>\n\n<p>Click <code class="language-plaintext highlighter-rouge">Remote-Containers: Open Folder in Container</code>. Open the local workspace that has the <code class="language-plaintext highlighter-rouge">.devcontainer/devcontainer.json</code> we have just configured.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-1.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<p>The first time we run this might take a while since the remote host server has to build the Docker image and start Docker container. Once it has been successfully started, we would see the following layout in VS Code. The <code class="language-plaintext highlighter-rouge">hello.sh</code> file we have just transferred to the remote host workspace is also shown in VS Code workspace.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-2.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<p>Verify the container is running successfully as expected. We could see that the NVIDIA docker container instance has successfully run by using <code class="language-plaintext highlighter-rouge">nvidia-smi</code> and the GPU is <code class="language-plaintext highlighter-rouge">GeForce GT 640</code>, a very old one, which matches to the one I installed on my remote host server.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-3.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<p>We can then run programs in the VS Code terminal or debug programs in the VS interface.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-4.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<p>Installing VS Code extensions on the remote host server might also be helpful for development.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-5.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<p>After installation, the VS Code extensions on the remote host server would be shown in an independent panel.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-06-VS-Code-Development-Remote-Host-Docker/vs-6.png" style="width: 100%; height: 100%" />\n    <figcaption></figcaption>\n</figure>\n</div>\n\n<h4 id="collect-files">Collect Files</h4>\n\n<p>Once the development has finished, don’t forget to transfer the files back from the remote host to the local computer.</p>\n\n<h3 id="caveats">Caveats</h3>\n\n<p>VS Code also has a <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension. The user would be able to use to SSH into a remote host server and modify the files on the remote host server on local VS Code GUI. However, the programs might not be able to run on the host server native system, and VS Code and its useful debugging extensions could not be directly used in the Docker container on the host server.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://code.visualstudio.com/docs/remote/containers">VS Code - Developing inside a Container</a></li>\n  <li><a href="https://code.visualstudio.com/docs/remote/containers-advanced">VS Code - Advanced Container Configuration</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/VS-Code-Development-Remote-Host-Docker/">VS Code Development Using Docker Containers on Remote Host</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 06, 2020.</p>	adf4860e1d76521a8ba71ff2db6299d89b6cdfa4	\N	f	2020-08-14 05:06:00	2020-08-14 05:06:27.06102	0			'/.config/code/user':350 '/.ssh/id_rsa.pub':167 '/docker/nvidia.dockerfile':572 '/home/leimao/workspace/vs-remote-workspace':440,476,727,771 '/home/leimao/workspace/vs-remote-workspace/hello.bash':491 '/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile':538 '/var/run/docker.sock':684,686 '/vscode-remote/containers/non-root.':701 '/vscode-remote/devcontainer.json':529 '/vscode-remote/samples/docker-in-docker.':681 '/workspace':715,722,747,768,773 '0':356,667 '0.0.1':711 '06':1117 '2020':1118 '4096':190 '640':919 'abl':53,1022,1052 'actual':311 'add':332,585,656 'addit':370,797 'advanc':1091 'aka.ms':528,680,700 'aka.ms/vscode-remote/containers/non-root.':699 'aka.ms/vscode-remote/devcontainer.json':527 'aka.ms/vscode-remote/samples/docker-in-docker.':679 'also':456,795,882,963,1012 'apt':631,635 'apt-get':630,634 'aren':564 'argument':800 'authent':122,133,256 'avail':610 'b':189 'back':1000 'base':121,132,255,646 'bind':688,726,765,775 'blog':81 'book':1114 'build':846 'c':649 'c_cpp.updatechannel':353 'cach':777 'cap':655 'cap-add':654 'cat':490 'caveat':1009 'cli':673 'click':809 'cmake.configureonopen':351 'code':2,72,95,116,292,298,343,382,384,404,496,506,541,805,868,886,944,955,972,1011,1044,1063,1084,1090,1095 'collect':986 'comfort':465 'command':179,214,433,619 'communic':55 'comput':183,318,444,500,735,1008 'concret':155 'configur':828,1093 'connect':691 'consist':776 'contain':6,301,314,322,575,580,595,609,622,677,743,754,808,812,816,853,890,903,1077,1088,1092,1099 'container':44,59 'context':547,557 'copi':202,244 'correct':783 'could':21,73,170,406,455,482,897,1069 'creat':392,435,501,508,581,597,624 'cspell.userwords':359 'debug':18,105,947,1067 'debugg':647 'deep':37 'default':295,574 'demo':543 'detail':525 'devcontain':514,555 'devcontainer.json':510 'devcontainer/devcontainer.json':824 'develop':3,16,45,60,97,103,111,378,967,990,1085,1096 'devic':666 'direct':1072 'directori':394,437,503,730 'docker':5,96,110,304,672,742,753,798,848,852,902,1076,1098 'docker.host':333,361 'dockerfil':560,569,571,713,780,788 'echo':492 'editor.minimap.enabled':357 'enter':219,265 'environ':46,61,98,112 'everi':146 'exampl':626 'exist':408 'expect':895 'export':228,239 'extens':78,379,589,598,956,973,1017,1068 'feel':464 'file':409,420,448,485,532,871,987,999,1035 'filenam':570 'finish':992 'first':830 'folder':556,739,750,814 'follow':123,178,213,432,521,864 'forget':995 'format':524 'forwardport':600,612 'geforc':917 'generat':168,171,194 'get':632,636 'git':628,639 'github.com':537 'github.com/microsoft/vscode-dev-containers/tree/v0.117.1/containers/docker-existing-dockerfile':536 'go':650,763,791 'gpu':36,915 'gpus':665 'gt':918 'gui':117,1045 'hello':493 'hello.bash':468 'hello.sh':870 'help':965 'home/.ssh/id_rsa.pub':241 'host':9,29,49,102,137,153,209,226,231,237,250,273,282,289,305,327,339,367,387,398,414,423,428,451,474,480,734,760,842,879,934,960,977,1004,1030,1039,1057,1080,1102 'hostnam':238,290,340,368,475 'howev':1046 'id':245,587 'ide':64 'imag':706,849 'independ':984 'insid':354,607,675,1086 'instal':375,592,627,637,930,953,969 'instanc':904 'instead':552 'instruct':125 'interfac':952 'introduct':10 'json':517 'june':1116 'key':120,131,163,174,197,205,254 'keygen':186 'layout':865 'learn':38 'lei':1107,1110 'level':550 'like':14,85,648 'line':616 'list':604 'local':63,114,182,303,317,411,425,443,499,611,787,819,1007,1042 'locat':348 'log':1113 'login':149,270 'longer':262 'make':602 'mao':1108,1111 'match':925 'mean':307 'might':835,962,1049 'mkdir':438 'modifi':419,1033 'mount':682 'multi':35 'multi-gpu':34 'name':235,287,337,365,472,539 'nativ':1059 'necessari':66 'need':144,217 'new':417 'next':615 'non':695 'non-root':694 'note':778 'null':584 'nvidia':901,911 'nvidia-smi':910 'old':922 'one':522,549,923,928 'open':813,817 'opt':661 'origin':1104 'p':439 'panel':985 'password':145,221,267 'point':784 'port':606 'post':82 'postcreatecommand':629 'power':28 'program':19,40,106,940,948,1048 'properti':561 'protocol':118 'provid':796 'ptrace':645,658 'ptrace-bas':644 'pubkeypath':240,247 'public':162,173,196,204 'publish':1105 'readm':534 'refer':1082 'remot':8,27,58,101,109,136,152,208,225,272,281,300,326,377,397,413,422,427,450,479,542,709,719,733,807,811,841,878,933,959,976,1003,1015,1029,1038,1101 'remote-contain':299,806,810 'remote-workspac':718 'remoteus':702 'requir':373 'root':696 'rsa':188 'rsync':458 'run':24,176,211,312,323,430,546,618,799,833,892,907,939,1054 'runarg':653,664,802 'rust':652 'scp':453,467 'seccomp':662 'secur':660 'security-opt':659 'see':526,678,698,862,898 'server':30,50,138,154,227,274,328,761,843,935,961,978,1031,1040,1058,1081 'set':41,91,127,258,293,544,573,582 'settings.json':344,577 'shown':883,981 'similar':518 'sinc':839 'smi':912 'sometim':11 'sourc':683,717,770 'specif':576 'ssh':119,130,185,243,253,278,283,1016,1026 'ssh-copy-id':242 'ssh-keygen':184 'standard':568 'start':803,851,859 'subdirectori':513 'success':488,858,893,906 'sys':657 'system':1060 'take':836 'talk':87 'target':685,721,746,772 'termin':945 'terminal.integrated.shell.linux':583 'test':710 'time':147,831 'tool':462 'train':39 'transfer':407,416,446,461,489,875,997 'true':352,358 'turn':68 'type':687,723,774 'ubuntu':708 'ubuntu-remote-test':707 'uncom':613,640,668,689 'unconfin':663 'uncorrelatonship':360 'underworld':494 'updat':558,633 'use':4,302,320,452,457,515,566,599,642,670,704,725,793,909,1024,1066,1073,1097 'user':229,234,248,286,336,364,471,697,1019 'usual':166,347 'valu':578 'verifi':275,483,888 'via':62 'volum':705,724 'vs':1,71,94,115,291,297,342,381,383,403,495,505,540,804,867,885,943,951,954,971,1010,1043,1062,1083,1089,1094 'vscode':703 'want':591 'whatev':460 'window.zoomlevel':355 'workspac':385,401,497,507,720,745,757,820,880,887 'workspacefold':714,736,767 'workspacemount':716,769 'would':13,84,199,216,389,861,979,1020 'y':638 'your-user-name-on-host':232,284,334,362,469	en	Lei Mao
263	[推荐] 图解 Vue 响应式原理	{"ver":2,"uid":1,"hash":"SHA1:3e0597b6a8b46b1d0d9dc8086988d40346c91c58"}	https://toutiao.io/k/sia6td6	2020-08-14 07:10:09	[推荐] 图解 Vue 响应式原理	591fd0fef99079a41ed865860a26e65902d566b4	\N	f	2020-08-14 07:10:00	2020-08-21 16:10:11.735348	0			'vue':3,7 '响应式原理':4,8 '图解':2,6 '推荐':1,5	zh	
56	Mozilla Lifeboat	{"ver":2,"uid":1,"hash":"SHA1:24e9731b95cf86b83e29c2fd25dbbb204b6884e0"}	https://mozillalifeboat.com/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24135032"> https://news.ycombinator.com/item?id=24135032 </a>	954f58dd16e5fa454ff38c5b75b2c07932a6bb8f	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.271252	0			'/item?id=24135032':6 'comment':3 'lifeboat':2 'mozilla':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24135032':4	zh	gkoberger
50	No-Cloning Theorem	{"ver":2,"uid":1,"hash":"SHA1:b0f92c7205fd9d7bb04be0a58ae53d4f6fb879e5"}	https://leimao.github.io/blog/No-Cloning-Theorem/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In the classical world, it is quite common that we could make an exactly the same copy of something. However, in the quantum world, the laws of physics impose a severe restriction on copying: It is impossible to make a perfect copy of an unknown state.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the No-Cloning Theorem in quantum theory.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<h4 id="kronecker-product-inverse-transpose-property">Kronecker Product Inverse-Transpose Property</h4>\n\n<p>Conjugate transposition are distributive over the Kronecker product:</p>\n\n\\[(A \\otimes B)^{\\dagger} =  A^{\\dagger} \\otimes B^{\\dagger}\\]\n\n\\[\\begin{align}\n(A \\otimes B)^{\\dagger} &amp;= \n\\begin{bmatrix} \n    A_{0,0}B &amp; A_{0,1}B &amp; \\cdots &amp; A_{0,n-1}B \\\\\n    A_{1,0}B &amp; A_{1,1}B &amp; \\cdots &amp; A_{1,n-1}B \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{m-1,0}B &amp; A_{m-1,1}B &amp; \\cdots &amp; A_{m-1,n-1}B \\\\\n\\end{bmatrix}^{\\dagger} \n\\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    (A_{0,0}B)^{\\dagger} &amp; (A_{1,0}B)^{\\dagger} &amp; \\cdots &amp; (A_{m-1,0}B)^{\\dagger} \\\\\n    (A_{0,1}B)^{\\dagger} &amp; (A_{1,1}B)^{\\dagger} &amp; \\cdots &amp; (A_{m-1,1}B)^{\\dagger} \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    (A_{0,n-1}B)^{\\dagger} &amp; (A_{1,n-1}B)^{\\dagger} &amp; \\cdots &amp; (A_{m-1,n-1}B)^{\\dagger} \\\\\n\\end{bmatrix}\n\\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    \\overline{A_{0,0}}B^{\\dagger} &amp; \\overline{A_{1,0}}B^{\\dagger} &amp; \\cdots &amp; \\overline{A_{m-1,0}}B^{\\dagger} \\\\\n    \\overline{A_{0,1}}B^{\\dagger} &amp; \\overline{A_{1,1}}B^{\\dagger} &amp; \\cdots &amp; \\overline{A_{m-1,1}}B^{\\dagger} \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    \\overline{A_{0,n-1}}B^{\\dagger} &amp; \\overline{A_{1,n-1}}B^{\\dagger} &amp; \\cdots &amp; \\overline{A_{m-1,n-1}}B^{\\dagger} \\\\\n\\end{bmatrix}\n\\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    A_{0,0}^{\\dagger}B^{\\dagger} &amp; A_{0,1}^{\\dagger}B^{\\dagger} &amp; \\cdots &amp; A_{0, m-1}^{\\dagger}B^{\\dagger} \\\\\n    A_{1,0}^{\\dagger}B^{\\dagger} &amp; A_{1,1}^{\\dagger}B^{\\dagger} &amp; \\cdots &amp; A_{1, m-1}^{\\dagger}B^{\\dagger} \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{n-1,0}^{\\dagger}B^{\\dagger} &amp; A_{n-1,1}^{\\dagger}B^{\\dagger} &amp; \\cdots &amp; A_{n-1,m-1}^{\\dagger}B^{\\dagger} \\\\\n\\end{bmatrix}\n\\nonumber\\\\\n&amp;=\nA^{\\dagger} \\otimes B^{\\dagger} \\\\\n\\end{align}\\]\n\n<p>This concludes the proof.</p>\n\n<h4 id="kronecker-product-mixed-product-property">Kronecker Product Mixed-Product Property</h4>\n\n<p>Let $A \\in \\mathbb{C}^{m \\times n}$, $B \\in \\mathbb{C}^{r \\times s}$, $C \\in \\mathbb{C}^{n \\times p}$, and $D \\in \\mathbb{C}^{s \\times t}$, then</p>\n\n\\[(A \\otimes B)(C \\otimes D) = (AC) \\otimes (BD)\\]\n\n<p>This has been proved in <a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker Product In Circuits</a>.</p>\n\n<h4 id="inner-product-expansion-property">Inner Product Expansion Property</h4>\n\n<p>Suppose $|x\\rangle$ is any unit vector whose $|x|^2 = \\langle x | x \\rangle = 1$. We have $\\langle \\phi | \\psi \\rangle = (\\langle \\phi | \\otimes \\langle x |) (| x \\rangle \\otimes | \\psi \\rangle)$</p>\n\n\\[\\begin{align}\n(\\langle \\phi | \\otimes \\langle x |) (| \\psi \\rangle \\otimes | x \\rangle) &amp;= (| \\psi \\rangle \\otimes | x \\rangle)^{\\dagger} (|\\phi\\rangle \\otimes |x\\rangle) \\\\\n&amp;= (| \\psi \\rangle^{\\dagger} \\otimes | x \\rangle^{\\dagger}) (|\\phi\\rangle \\otimes |x\\rangle) \\\\\n&amp;= (| \\psi \\rangle^{\\dagger}|\\phi\\rangle) \\otimes (| x \\rangle^{\\dagger}|x\\rangle) \\\\\n&amp;= \\langle \\phi | \\psi \\rangle \\otimes \\langle x | x \\rangle\\\\\n&amp;= \\langle \\phi | \\psi \\rangle \\otimes 1\\\\\n&amp;= \\langle \\phi | \\psi \\rangle\\\\\n\\end{align}\\]\n\n<p>This concludes the proof.</p>\n\n<h4 id="unitary-matrix-preserves-inner-product">Unitary Matrix Preserves Inner Product</h4>\n\n<p>Given two complex vectors $x$ and $y$, multiplication by unitary matrix $U$ preserves their inner product.</p>\n\n\\[\\begin{align}\n\\langle Ux, Uy \\rangle &amp;= \\langle x, y \\rangle\n\\end{align}\\]\n\n<p>Using the definition of inner product,</p>\n\n\\[\\begin{align}\n\\langle Ux, Uy \\rangle &amp;= (Uy)^{\\dagger} (Ux) \\\\\n&amp;= y^{\\dagger}U^{\\dagger} U x \\\\\n&amp;= y^{\\dagger}(U^{\\dagger} U) x \\\\\n&amp;= y^{\\dagger} I x \\\\\n&amp;= y^{\\dagger} x \\\\\n&amp;= \\langle x, y \\rangle \\\\\n\\end{align}\\]\n\n<p>This concludes the proof.</p>\n\n<h3 id="no-cloning-theorem">No-Cloning Theorem</h3>\n\n<p>In quantum mechanics, copy, as it is the same to other quantum operators except measurement operators, is an reversible and linear operator.</p>\n\n<p><br /></p>\n\n<p>Given any unknown normalized quantum state $| \\phi \\rangle$, and the copy operator $U$, we are supposed to have the following mathematical expression if we are going to copy the quantum state $| \\phi \\rangle$ to another system whose quantum state is $|x \\rangle$ before copy.</p>\n\n\\[| \\phi \\rangle \\otimes |x\\rangle \\xrightarrow[]{U} | \\phi \\rangle \\otimes |\\phi\\rangle\\]\n\n<p>We would like to write this transformation into equation.</p>\n\n\\[U (| \\phi \\rangle \\otimes |x\\rangle) = | \\phi \\rangle \\otimes |\\phi\\rangle\\]\n\n<p>Without loss of generality, we could have another state $| \\psi \\rangle$ that is applied to the copy operator.</p>\n\n\\[U (| \\psi \\rangle \\otimes |x\\rangle) = | \\psi \\rangle \\otimes |\\psi\\rangle\\]\n\n<p>Note that for $| \\psi \\rangle$ we also used $|x\\rangle$ which $| \\phi \\rangle$ is using, meaning that before copy, the “vacant” system is always the same. This is something we could guarantee.</p>\n\n<p><br /></p>\n\n<p>We examine the inner product of $| \\phi \\rangle$ and $| \\psi \\rangle$ using the copy property and all the properties in the prerequisite section.</p>\n\n\\[\\begin{align}\n\\langle \\phi | \\psi \\rangle &amp;= (\\langle \\phi | \\otimes \\langle x |) (| \\psi \\rangle \\otimes | x \\rangle) \\\\\n&amp;= \\big(U (\\langle \\phi | \\otimes \\langle x |)\\big) \\big(U (| \\psi \\rangle \\otimes | x \\rangle)\\big) \\\\\n&amp;= (\\langle \\phi | \\otimes \\langle \\phi |) (| \\psi \\rangle \\otimes | \\psi \\rangle) \\\\\n&amp;= (| \\psi \\rangle \\otimes | \\psi \\rangle)^{\\dagger} (| \\phi \\rangle \\otimes | \\phi \\rangle) \\\\\n&amp;= (| \\psi \\rangle^{\\dagger} \\otimes | \\psi \\rangle^{\\dagger}) (| \\phi \\rangle \\otimes | \\phi \\rangle) \\\\\n&amp;= (| \\psi \\rangle^{\\dagger} | \\phi \\rangle ) \\otimes (| \\psi \\rangle^{\\dagger} | \\phi \\rangle ) \\\\\n&amp;= \\langle \\phi | \\psi \\rangle \\otimes \\langle \\phi | \\psi \\rangle \\\\\n\\end{align}\\]\n\n<p>Because $\\langle \\phi | \\psi \\rangle$ is scalar, we further have</p>\n\n\\[\\begin{align}\n\\langle \\phi | \\psi \\rangle &amp;= \\langle \\phi | \\psi \\rangle \\otimes \\langle \\phi | \\psi \\rangle \\\\\n&amp;= \\langle \\phi | \\psi \\rangle ^2 \\\\\n\\end{align}\\]\n\n<p>Solving the above equation, we have $\\langle \\phi | \\psi \\rangle = 0$ or $1$.</p>\n\n<p><br /></p>\n\n<p>Because $| \\phi \\rangle$ and $| \\psi \\rangle$ could be any arbitrary unknown states, $\\langle \\phi | \\psi \\rangle = 0$ or $1$ could never be satisfied.</p>\n\n<p><br /></p>\n\n<p>Therefore, there is no general quantum copy operator that makes copy of any unknown state.</p>\n\n<h3 id="more-restrict-no-cloning-theorem">More Restrict No-Cloning Theorem</h3>\n\n<p>In quantum theory, $| \\phi \\rangle$ and $c | \\phi \\rangle$, where $c$ is a non-zero complex number, represent the same physical state. If $|c \\phi|^2 = 1$, then $| \\phi \\rangle$ and $c | \\phi \\rangle$ only have phase difference.</p>\n\n<p><br /></p>\n\n<p>For example, $| \\phi \\rangle$ and $| \\psi \\rangle$ have exactly the same probability of collapsing to $| 0 \\rangle$ and $| 1 \\rangle$. However, $| \\phi \\rangle$ has phase $\\varphi_1$ while $| \\psi \\rangle$ has phase $\\varphi_2$.</p>\n\n\\[\\begin{align}\n| \\phi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi_1} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n| \\psi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi_2} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>More restrict No-Cloning Theorem states that “copying” any unknown state while abandoning the phase is not possible either.</p>\n\n<p><br /></p>\n\n<p>Suppose we have such “copy” operator, the mathematical expression for “copy” will be as follows.</p>\n\n\\[U (| \\phi \\rangle \\otimes |x\\rangle) = e^{\\varphi} | \\phi \\rangle \\otimes |\\phi\\rangle\\\\\nU (| \\psi \\rangle \\otimes |x\\rangle) = e^{\\varphi^{\\prime}} | \\psi \\rangle \\otimes |\\psi\\rangle\\]\n\n<p>Similarly, we have</p>\n\n\\[\\begin{align}\n\\langle \\phi | \\psi \\rangle &amp;= e^{\\varphi} e^{\\varphi^{\\prime}}\\langle \\phi | \\psi \\rangle ^2 \\\\\n&amp;= e^{\\varphi + \\varphi^{\\prime}} \\langle \\phi | \\psi \\rangle ^2 \\\\\n\\end{align}\\]\n\n<p>The norm of the two sides should be equivalent.</p>\n\n\\[\\begin{align}\n|\\langle \\phi | \\psi \\rangle| &amp;= |e^{\\varphi + \\varphi^{\\prime}} \\langle \\phi | \\psi \\rangle ^2| \\\\\n&amp;= |e^{\\varphi + \\varphi^{\\prime}}| |\\langle \\phi | \\psi \\rangle ^2| \\\\\n&amp;= 1 |\\langle \\phi | \\psi \\rangle ^2| \\\\\n&amp;= |\\langle \\phi | \\psi \\rangle ^2| \\\\\n&amp;= |\\langle \\phi | \\psi \\rangle |^2 \\\\\n\\end{align}\\]\n\n<p>Solving the above equation, we have $|\\langle \\phi | \\psi \\rangle | = 0$ or $1$.</p>\n\n<p><br /></p>\n\n<p>Because $| \\phi \\rangle$ and $| \\psi \\rangle$ could be any arbitrary unknown states, $|\\langle \\phi | \\psi \\rangle | = 0$ or $1$ could never be satisfied.</p>\n\n<p><br /></p>\n\n<p>Therefore, there is no general quantum “copy” operator that makes “copy” of any unknown state that has lost the phase information.</p>\n\n<h3 id="transportation">Transportation</h3>\n\n<p>Since it is not possible to do copy in quantum world, how about transportation?</p>\n\n<p><br /></p>\n\n<p>Concretely, given any unknown normalized quantum state $| \\phi \\rangle$, and the transportation operator $U$, we are supposed to have the following mathematical expression if we are going to transport the quantum state $| \\phi \\rangle$ to another system whose quantum state is $|x \\rangle$ before transportation.</p>\n\n\\[U(| \\phi \\rangle \\otimes |x\\rangle) = | x \\rangle \\otimes |\\phi\\rangle\\]\n\n<p>Note that although it is called transportation, it is more like a switch, where the two system states, one unknown and one known, got switched.</p>\n\n<p><br /></p>\n\n<p>Without loss of generality, we could have another state $| \\psi \\rangle$ that is applied to the transportation operator.</p>\n\n\\[U(| \\psi \\rangle \\otimes |x\\rangle) = | x \\rangle \\otimes |\\psi\\rangle\\]\n\n<p>Similarly, we compute the inner product of $| \\phi \\rangle$ and $| \\psi \\rangle$.</p>\n\n\\[\\begin{align}\n\\langle \\phi | \\psi \\rangle &amp;= (\\langle \\phi | \\otimes \\langle x |) (| \\psi \\rangle \\otimes | x \\rangle) \\\\\n&amp;= \\big(U (\\langle \\phi | \\otimes \\langle x |)\\big) \\big(U (| \\psi \\rangle \\otimes | x \\rangle)\\big) \\\\\n&amp;= (\\langle x | \\otimes \\langle \\phi |) (| x \\rangle \\otimes | \\psi \\rangle) \\\\\n&amp;= (| x \\rangle \\otimes | \\psi \\rangle)^{\\dagger} (| x \\rangle \\otimes | \\phi \\rangle) \\\\\n&amp;= (| x \\rangle^{\\dagger} \\otimes | \\psi \\rangle^{\\dagger}) (| x \\rangle \\otimes | \\phi \\rangle) \\\\\n&amp;= (| x \\rangle^{\\dagger} | x \\rangle ) \\otimes (| \\psi \\rangle^{\\dagger} | \\phi \\rangle ) \\\\\n&amp;= \\langle x | x \\rangle \\otimes \\langle \\phi | \\psi \\rangle \\\\\n&amp;= 1 \\otimes \\langle \\phi | \\psi \\rangle \\\\\n&amp;= \\langle \\phi | \\psi \\rangle \\\\\n\\end{align}\\]\n\n<p>Unlike copy, we did not find anything usual that prevents transportation.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://inst.eecs.berkeley.edu/~cs191/fa05/lectures/lecture6_fa05.pdf">No Cloning, Teleportation</a></li>\n  <li><a href="https://www.physics.umd.edu/courses/Phys402/AnlageSpring09/TheNoCloningTheoremWoottersPhysicsTodayFeb2009p76.pdf">The No-Cloning Theorem</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/No-Cloning-Theorem/">No-Cloning Theorem</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 19, 2020.</p>	c5070a66ebbd656db18bb76c064fd07a0db3eda2	\N	f	2020-08-14 05:06:00	2020-08-27 21:10:08.858104	0			'-1':113,127,135,140,146,148,169,186,197,203,209,211,235,255,267,274,281,283,307,327,337,344,352,354 '0':102,103,106,111,117,136,157,158,163,170,174,195,221,222,228,236,241,265,292,293,298,305,313,338,925,944,1026,1053,1071,1238,1257 '1':107,116,120,121,125,141,162,175,179,180,187,201,227,242,247,248,256,272,299,312,318,319,325,345,445,522,927,946,999,1029,1037,1058,1063,1081,1210,1240,1259,1507 '19':1557 '2':440,912,998,1044,1052,1062,1070,1076,1080,1165,1174,1200,1209,1215,1220,1225 '2020':1558 'abandon':1098 'ac':415 'align':94,367,463,528,555,565,573,605,797,882,894,914,1046,1084,1151,1176,1187,1227,1423,1518 'also':747 'although':1358 'alway':764 'anoth':670,719,1335,1388 'anyth':1525 'appli':725,1394 'arbitrari':937,1250 'b':86,91,97,104,108,114,118,122,128,137,142,149,159,164,171,176,181,188,198,204,212,223,229,237,243,249,257,268,275,284,295,301,309,315,321,329,340,347,356,364,386,411 'bd':417 'begin':93,99,154,217,289,462,554,572,796,893,1045,1150,1186,1422 'big':812,819,820,827,1438,1445,1446,1453 'blog':54 'bmatrix':100,151,155,215,218,287,290,359 'book':1554 'c':382,389,393,396,404,412,978,982,996,1004 'call':1361 'cdot':109,123,143,166,183,206,231,251,277,303,323,349 'circuit':426 'classic':8 'clone':3,64,612,970,1089,1532,1537,1541 'collaps':1024 'common':13 'complex':540,988 'comput':1412 'conclud':369,530,607 'concret':1300 'conjug':76 'copi':22,39,47,617,646,663,679,728,759,786,957,961,1093,1109,1115,1270,1274,1293,1520 'cos':1049,1067 'could':16,717,771,934,947,1247,1260,1386 'd':401,414 'dagger':87,89,92,98,152,160,165,172,177,182,189,199,205,213,224,230,238,244,250,258,269,276,285,294,296,300,302,308,310,314,316,320,322,328,330,339,341,346,348,355,357,362,365,479,487,491,499,505,579,582,584,588,590,594,598,843,851,855,863,869,1469,1477,1481,1489,1495 'ddot':131,192,261,333 'definit':568 'differ':1010 'discuss':60 'distribut':79 'e':1055,1073,1126,1139,1156,1158,1166,1192,1201 'either':1104 'end':150,214,286,358,366,527,564,604,881,913,1083,1175,1226,1517 'equat':700,918,1231 'equival':1185 'exact':19,1019 'examin':774 'exampl':1012 'except':627 'expans':429 'express':657,1113,1322 'find':1524 'follow':655,1119,1320 'frac':1050,1060,1068,1078 'general':715,955,1268,1384 'given':538,636,1301 'go':661,1326 'got':1379 'guarante':772 'howev':25,1031 'impos':34 'imposs':42 'inform':1284 'inner':427,536,552,570,776,1414 'introduct':5 'invers':73 'inverse-transpos':72 'june':1556 'known':1378 'kroneck':70,82,372,423 'langl':441,448,452,455,464,467,508,513,517,523,556,560,574,600,798,802,805,814,817,828,831,872,877,884,895,899,904,908,921,940,1152,1161,1170,1188,1196,1205,1211,1216,1221,1234,1253,1424,1428,1431,1440,1443,1454,1457,1498,1503,1509,1513 'law':31 'lei':1547,1550 'let':378 'like':58,694,1366 'linear':634 'log':1553 'loss':713,1382 'lost':1281 'm':134,139,145,168,185,208,234,254,280,306,326,353,383 'make':17,44,960,1273 'mao':1548,1551 'mathbb':381,388,395,403 'mathemat':656,1112,1321 'matrix':534,548 'mean':756 'measur':628 'mechan':616 'mix':375 'mixed-product':374 'multipl':545 'n':112,126,147,196,202,210,266,273,282,336,343,351,385,397 'never':948,1261 'no-clon':1,62,610,968,1087,1535,1539 'non':986 'non-zero':985 'nonumb':153,216,288,360 'norm':1178 'normal':639,1304 'note':741,1356 'number':989 'one':1374,1377 'oper':626,629,635,647,729,958,1110,1271,1312,1398 'origin':1544 'otim':85,90,96,363,410,413,416,454,459,466,471,476,482,488,494,502,512,521,682,689,704,709,733,738,804,809,816,824,830,835,840,846,852,858,866,876,903,1123,1130,1136,1144,1348,1353,1402,1407,1430,1435,1442,1450,1456,1461,1466,1472,1478,1484,1492,1502,1508 'overlin':219,225,232,239,245,252,263,270,278 'p':399 'perfect':46 'phase':1009,1035,1042,1100,1283 'phi':449,453,465,480,492,500,509,518,524,642,667,680,687,690,702,707,710,752,779,799,803,815,829,832,844,847,856,859,864,870,873,878,885,896,900,905,909,922,929,941,975,979,997,1001,1005,1013,1032,1047,1121,1128,1131,1153,1162,1171,1189,1197,1206,1212,1217,1222,1235,1242,1254,1307,1332,1346,1354,1417,1425,1429,1441,1458,1473,1485,1496,1504,1510,1514 'physic':33,993 'possibl':1103,1290 'post':55 'prerequisit':69,794 'preserv':535,550 'prevent':1528 'prime':1141,1160,1169,1195,1204 'probabl':1022 'product':71,83,373,376,424,428,537,553,571,777,1415 'proof':371,532,609 'properti':75,377,430,787,791 'prove':421 'psi':450,460,469,474,485,497,510,519,525,721,731,736,739,744,782,800,807,822,833,836,838,841,849,853,861,867,874,879,886,897,901,906,910,923,932,942,1016,1039,1065,1134,1142,1145,1154,1163,1172,1190,1198,1207,1213,1218,1223,1236,1245,1255,1390,1400,1408,1420,1426,1433,1448,1462,1467,1479,1493,1505,1511,1515 'publish':1545 'quantum':28,67,615,625,640,665,673,956,973,1269,1295,1305,1330,1338 'quit':12 'r':390 'rangl':433,444,451,458,461,470,473,475,478,481,484,486,490,493,496,498,501,504,507,511,516,520,526,559,563,577,603,643,668,677,681,684,688,691,703,706,708,711,722,732,735,737,740,745,750,753,780,783,801,808,811,823,826,834,837,839,842,845,848,850,854,857,860,862,865,868,871,875,880,887,898,902,907,911,924,930,933,943,976,980,1002,1006,1014,1017,1027,1030,1033,1040,1048,1054,1064,1066,1072,1082,1122,1125,1129,1132,1135,1138,1143,1146,1155,1164,1173,1191,1199,1208,1214,1219,1224,1237,1243,1246,1256,1308,1333,1342,1347,1350,1352,1355,1391,1401,1404,1406,1409,1418,1421,1427,1434,1437,1449,1452,1460,1463,1465,1468,1471,1474,1476,1480,1483,1486,1488,1491,1494,1497,1501,1506,1512,1516 'refer':1530 'repres':990 'restrict':37,967,1086 'revers':632 'satisfi':950,1263 'scalar':889 'section':795 'sever':36 'side':1182 'similar':1147,1410 'sin':1059,1077 'sinc':1286 'solv':915,1228 'someth':24,769 'state':51,641,666,674,720,939,965,994,1091,1096,1252,1278,1306,1331,1339,1373,1389 'suppos':431,651,1105,1316 'switch':1368,1380 'system':671,762,1336,1372 'teleport':1533 'theorem':4,65,613,971,1090,1538,1542 'theori':68,974 'therefor':951,1264 'theta':1051,1061,1069,1079 'time':384,391,398,406 'transform':698 'transport':1285,1299,1311,1328,1344,1362,1397,1529 'transpos':74 'transposit':77 'two':539,1181,1371 'u':549,583,585,589,591,648,686,701,730,813,821,1120,1133,1313,1345,1399,1439,1447 'unit':436 'unitari':533,547 'unknown':50,638,938,964,1095,1251,1277,1303,1375 'unlik':1519 'use':566,748,755,784 'usual':1526 'ux':557,575,580 'uy':558,576,578 'vacant':761 'varphi':1036,1043,1057,1075,1127,1140,1157,1159,1167,1168,1193,1194,1202,1203 'vdot':129,130,132,190,191,193,259,260,262,331,332,334 'vector':437,541 'whose':438,672,1337 'without':712,1381 'world':9,29,1296 'would':57,693 'write':696 'x':432,439,442,443,456,457,468,472,477,483,489,495,503,506,514,515,542,561,586,592,596,599,601,676,683,705,734,749,806,810,818,825,1124,1137,1341,1349,1351,1403,1405,1432,1436,1444,1451,1455,1459,1464,1470,1475,1482,1487,1490,1499,1500 'xrightarrow':685 'y':544,562,581,587,593,597,602 'zero':987	en	Lei Mao
48	Population Based Training	{"ver":2,"uid":1,"hash":"SHA1:e54ee5b0a5ed2e9cf6e803dc7fe29015c62e1d66"}	https://leimao.github.io/blog/Population-Based-Training/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Training a machine learning model often requires a lot of hyperparameters, such as learning rate and regularization strength. The initial values of the hyperparameters and optionally how the hyperparameters are dynamically tuned during training would have a huge impact on the performance of the optimized model.</p>\n\n<p><br /></p>\n\n<p>Given the combination of hyperparameter schedules are usually infinite, it is often not possible to do exhaustive search to find the best hyperparameter schedule for optimization, even with a lot of computer resources. Instead, what people often do is do hyperparameter grid search to some extent and optionally further fine-tune hyperparameters based on experience with a little bit more trials. While such method works well in practice, it requires a lot of human intervention and possibly miss a better model. Therefore, finding good hyperparameters and hyperparameter tuning approaches during optimization become critical for modeling.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the <a href="https://arxiv.org/abs/1711.09846">population based training</a>, with a genetic algorithm inspired hyperparameter tuning schedule, proposed by DeepMind.</p>\n\n<h3 id="machine-learning-optimization-theories">Machine Learning Optimization Theories</h3>\n\n<p>Mathematically, a model consists of model parameters $\\theta$, and our goal is to maximize or minimize an evaluation objective $Q(\\theta)$. Typically, this $Q(\\theta)$ already contains the entire model, the validation data, and a performance metric. For example, the evaluation objective for machine translation could be applying the validation data to the model, getting the outputs from the model, and compute the BLEU score, the performance metric, using the model outputs and ground truth labels. The evaluation objective $Q(\\theta)$ does not have to be differentiable with respect to the model parameters $\\theta$, and sometimes it could even be a black-box!</p>\n\n<p><br /></p>\n\n<p>To maximize or minimize an evaluation objective $Q(\\theta)$, we would need to find the optimized model parameters $\\theta$, using some optimization techniques. In practice, we don’t want to use the evaluation objective for optimization, or the evaluation objective $Q(\\theta)$ could not be directly used for optimization. For instance, the evaluation objective uses validation data and if we use the evaluation objective for optimization, the generalization of the optimized model would be usually poor in practice. Another common obstacle is that some optimization techniques requires the evaluation objective $Q(\\theta)$ to be differentiable with respect to the model parameters $\\theta$, but sometimes it is not the case.</p>\n\n<p><br /></p>\n\n<p>Since the evaluation objective $Q(\\theta)$ could not often be directly used for optimization, and we would propose a <a href="https://www.mathworks.com/help/gads/what-is-surrogate-optimization.html">surrogate objective</a> $\\hat{Q}(\\theta)$, hoping that by optimizing $\\hat{Q}(\\theta)$ with respect to the model parameters $\\theta$, we would also achieve a good evaluation objective $Q(\\theta)$. In machine learning, this surrogate objective is sometimes called training objective, and it contains the training data and the performance metric does not have to be the same to the one used in the evaluation objective. For example, the performance metric we used in machine translation model training is the sum of cross entropies, rather than BLEU score.</p>\n\n<p><br /></p>\n\n<p>With the surrogate objective $\\hat{Q}(\\theta)$, finding the optimal parameters $\\theta^{\\ast}$ that maximize or minimize $\\hat{Q}(\\theta)$ does not happen magically. We would often need to use some optimization techniques to find the optimal parameters $\\theta^{\\ast}_{\\hat{Q}(\\theta)}$. Those optimization techniques would often introduce auxillary parameters $h$, which are often called as hyperparameters, to assist the finding of $\\theta^{\\ast}$. Therefore, given certain optimization techniques, the surrogate objective becomes $\\hat{Q}(\\theta | h)$. The hyperparameters could be some of the famous ones, such as the learning rate for gradient descent, and the regularization strength to prevent overfitting. However, this introduces some problems. The optimal parameters $\\theta^{\\ast}_{\\hat{Q}(\\theta|h)}$ for $\\hat{Q}(\\theta | h)$ might not be the same to the optimal parameters $\\theta^{\\ast}_{Q(\\theta)}$ for $Q(\\theta)$ which we truly care. Different $h$ would lead to different $\\theta^{\\ast}_{\\hat{Q}(\\theta|h)}$ and thus different values of $Q(\\theta^{\\ast}_{\\hat{Q}(\\theta|h)})$ which might or might not be close to $Q(\\theta^{\\ast}_{Q(\\theta)})$.</p>\n\n<p><br /></p>\n\n<p>Assuming the optimization technique would gives us good $\\theta$ for $\\hat{Q}(\\theta | h)$, sometimes it could even be he the optimal parameters $\\theta^{\\ast}_{\\hat{Q}(\\theta|h)}$, how do we tune hyperparameters $h$ such that $Q(\\theta)$ is as close to $Q(\\theta^{\\ast}_{Q(\\theta)})$ as possible? Population based training, using the evolution of hyperparameters, is trying to solve this problem.</p>\n\n<h3 id="population-based-training">Population Based Training</h3>\n\n<p>Before we discuss the population based training, we would like to briefly review how people typically do hyperparameter tuning.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-28-Population-Based-Training/hyperparameter-tuning-paradigm.png" style="width: 100%; height: 100%" />\n    <figcaption>Hyperparameter Tuning Approaches</figcaption>\n</figure>\n</div>\n\n<p>The sequential hyperparameter tuning approach is the most tedious for human beings but uses the least computation resources. We use one set of hyperparameters to train and evaluate the model. Based on the evaluation, we tune the hyperparameter and start the next round of training. We only runs one training instance throughout the entire tuning process but it could take a long time to find a good model that we feel satisfied with.</p>\n\n<p><br /></p>\n\n<p>The parallel hyperparameter tuning approach is computation resource constrained. We run many training instances for different hyperparameters asynchronously, and find the best hyperparameters that gives the best evaluations. This approach, in my opinion, could hardly be called as “tuning”, since there is actually no tuning at all. The number of training instances we could run and the number of hyperparameters we would explore are solely dependent on how much computation resources we have and how much computation resource one training instance takes.</p>\n\n<p><br /></p>\n\n<p>The population based hyperparameter tuning approach is a combination of the sequential approach and the parallel approach, with the human intervention in the sequential approach replaced with an automation from genetic algorithm. We run many training instance asynchronously with different hyperparameters $h_0$, and each training instance is updating the model parameters $\\theta$ iteratively. At some point during the training, we compare the performances of all the training instances, and find out the one with the best performance. The rest of the training instances would start to use the exact same model parameters $\\theta$ and the hyperparameters $h$ that the best training instance uses, which is called “exploitation”. Then, the hyperparameters $h$ for all the training instance other than the best training instance would be subject to some mutations, which is called “exploration”. In particular, “exploitation” means using the best configurations that the best training instance uses for all the training instances, “exploration” means mutating the hyperparameters for all the training instances other than the best training instance. The idea of population based training is simple and should be extremely familiar to the people who have experiences working with genetic algorithms.</p>\n\n<h3 id="population-based-training-example">Population Based Training Example</h3>\n\n<p>The DeepMind authors prepared a simple example to illustrate how the population based hyperparameter tuning approach is different from the other hyperparameter tuning approaches, such as grid search, given the same amount of computation resources.</p>\n\n<p><br /></p>\n\n<p>In this particular setting, the evaluation objective is to maximize</p>\n\n\\[Q(\\theta) = 1.2 - (\\theta_0^2 + \\theta_1^2)\\]\n\n<p>where $\\theta_0$ and $\\theta_1$ are model parameters. The evaluation objective is treated as a black-box which we throw in $\\theta_0$ and $\\theta_1$ and generates a score. The maximum evaluation score it could achieve is $1.2$ when $\\theta_0 = 0$ and $\\theta_0 = 1$.</p>\n\n<p><br /></p>\n\n<p>The surrogate objective we proposed is to maximize</p>\n\n\\[\\hat{Q}(\\theta | h) = 1.2 - (h_0 \\theta_0^2 + h_1 \\theta_1^2)\\]\n\n<p>where $h_0$ and $h_1$ are hyperparameters. We would use gradient ascent iteratively, with a fixed learning rate $\\eta$, to optimize this surrogate objective, given the hyperparameters $h_0$ and $h_1$ and initial parameters $\\theta_0$ and $\\theta_1$.</p>\n\n<p><br /></p>\n\n<p>Lucky us, the surrogate objective is very close to the black-box evaluation objective. If somehow we could be more lucky and use hyperparameters $h_0=1$ and $h_1=1$, optimizing surrogate objective would be equivalent to optimizing the evaluation objective, and we would be the most likely to have the maximum evaluation score.</p>\n\n<p><br /></p>\n\n<p>We were given computation resources that allows running two training instances simultaneously. This time, we are not extremely lucky again. We used $\\{h_0=1, h_1=0\\}$ and $\\{h_0=0, h_1=1\\}$ as the initial hyperparameters for the two training instances, respectively. We want to check which hyperparameter tuning approach results in the best evaluation score, given the same amount of computation resources.</p>\n\n<p><br /></p>\n\n<p>To make it “fair”, the model should be initialized with parameters $\\theta_0=0.9$ and $\\theta_1=0.9$, and each training instance is only allowed to use gradient ascent to update the hyperparameter $40$ times. The author did not mention what learning rate $\\eta$ to use, but is the same for all training instances in all hyperparameter tuning approaches.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-28-Population-Based-Training/pbt-example.png" style="width: 100%; height: 100%" />\n    <figcaption>Population Based Training Example</figcaption>\n</figure>\n</div>\n\n<p>The DeepMind authors created contour plots to make it easy to understand. The lighter the region is in the plot, the higher the evaluation score is. One training instance is denoted using black nodes, where each node represents the model parameters for each update iteration. The other training instance is denoted using red nodes. There are $2 \\times 40 = 80$ nodes in total in one contour plot.</p>\n\n<p><br /></p>\n\n<p>For grid search, because there is no actual hyperparameter tuning during training, $h_0$ and $h_1$ remain the same for the two training instances and the evaluation score is much lower than the possible maximum value $1.2$. In fact, it could never reach or get close to $1.2$ no matter how many gradient ascent iterations it does. This is a typical example of insufficient computation resource for grid search results in models with bad performance.</p>\n\n<p><br /></p>\n\n<p>The population based training is scheduled to do exploration and exploitation every $5$ gradient ascent iterations. Surprisingly or not, it gets close to the possible maximum value $1.2$ in the $40$ gradient ascent iterations. Removing exploration or exploitation from the population based training has also been investigated. The model trained from neither of the two is as good as the one trained from the intact population based training in $40$ iterations of gradient ascent.</p>\n\n<p><br /></p>\n\n<p>It should be noted that the exploration the author used is not purely random. Otherwise, the exploration might results in negative values for hyperparameters $h_0$ and $h_1$ and cause the optimization deviate from the maximum evaluation score.</p>\n\n<h3 id="faqs">FAQs</h3>\n\n<h4 id="what-is-hyperparameter-tuning">What is Hyperparameter Tuning?</h4>\n\n<p>Some models could be trained better with dynamically changed hyperparameters, rather than fixed hyperparameters throughout the training process. Learning rate decay used for neural network optimization is one of the typical examples.</p>\n\n<h4 id="can-we-reproduce-the-best-model-from-the-population-based-training-using-the-best-final-hyperparameters">Can We Reproduce the Best Model from the Population Based Training Using the Best Final Hyperparameters?</h4>\n\n<p>No. To reproduce the training of the best model parameters, we would need know how its hyperparameter tuning trajectory throughout the population based training.</p>\n\n<h4 id="do-we-care-about-hyperparameters-after-population-based-training">Do We Care About Hyperparameters After Population Based Training?</h4>\n\n<p>No. The model itself does not have hyperparameters $h$. It only has parameters $\\theta$. Therefore, we could only save a copy of the model parameters $\\theta$ and ignore the hyperparameters $h$ when the population based training is finished.</p>\n\n<h4 id="what-optimization-methods-could-be-used-for-population-based-training">What Optimization Methods Could Be Used for Population Based Training?</h4>\n\n<p>In theory, we could use any iterative optimization methods, such as gradient descent, for population based training. DeepMind has shown that population based training works very well for neural network optimizations using gradient descent. There is no evidence shown that population based training would work for other iterative optimization methods. However, it does not prevent you from using the iterative optimization methods you are interested in with the population based training.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>I remember when I was in college and neural networks and gradient descent have not been proved useful for solving practical problems, we used genetic algorithms for optimizing models and the models do not have to be differentiable. While DeepMind did not invent genetic algorithms and the idea of the population based training is almost the exactly the same to a conventional genetic algorithm, it is the first optimization method that combines genetic algorithm and one other optimization algorithm, which could be gradient descent, to solve neural network optimization problems in practice.</p>\n\n<p><br /></p>\n\n<p>Distributed application library <a href="https://docs.ray.io/en/master/index.html">Ray</a> has a sub-library, <a href="https://docs.ray.io/en/master/tune.html">Tune</a>, for distributed population based training. This might make the optimization easier from a programmer’s perspective.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://arxiv.org/abs/1711.09846">Population Based Training of Neural Networks</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Population-Based-Training/">Population Based Training</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 28, 2020.</p>	52a04f9e1e52e2330a76917bb143b79d8bd4360c	\N	f	2020-08-14 05:06:00	2020-08-30 19:10:10.410677	0			'0':958,1160,1167,1189,1208,1209,1212,1228,1230,1239,1266,1274,1304,1357,1361,1364,1365,1412,1543,1705 '0.9':1413,1417 '1':1163,1170,1192,1213,1233,1235,1242,1269,1277,1305,1308,1309,1358,1360,1367,1368,1416,1546,1708 '1.2':1158,1205,1226,1567,1578,1633 '2':1161,1164,1231,1236,1519 '2020':2069 '28':2068 '40':1433,1521,1636,1675 '5':1618 '80':1522 'achiev':429,1203 'actual':876,1537 'algorithm':163,947,1106,1951,1970,1989,1999,2004 'allow':1340,1424 'almost':1980 'alreadi':200 'also':428,1650 'amount':1142,1396 'anoth':357 'appli':222 'applic':2019 'approach':140,760,765,838,863,921,928,932,940,1126,1134,1386,1458 'ascent':1249,1428,1584,1620,1638,1679 'assist':553 'assum':672 'ast':506,533,558,605,625,642,654,669,696,717 'asynchron':851,953 'author':1113,1436,1465,1688 'autom':944 'auxillari':543 'bad':1604 'base':2,104,158,723,737,744,791,918,1088,1108,1123,1460,1608,1647,1672,1765,1794,1803,1839,1851,1868,1875,1894,1922,1977,2031,2046,2052 'be':772 'becom':143,567 'best':72,855,860,992,1016,1036,1055,1059,1081,1390,1760,1769,1779 'better':131,1729 'bit':110 'black':277,1182,1289,1495 'black-box':276,1181,1288 'bleu':238,492 'blog':149 'book':2065 'box':278,1183,1290 'briefli':750 'call':444,549,870,1022,1047 'care':634,1798 'case':387 'caus':1710 'certain':561 'chang':1732 'check':1382 'close':665,713,1285,1576,1627 'colleg':1932 'combin':53,924,1997 'common':358 'compar':977 'comput':82,236,777,840,903,910,1144,1337,1398,1595 'configur':1056 'consist':178 'constrain':842 'contain':201,449 'contour':1467,1528 'convent':1987 'copi':1825 'could':220,272,321,394,574,688,819,867,887,1202,1296,1571,1726,1821,1846,1856,2006 'creat':1466 'critic':144 'cross':488 'data':207,225,335,452 'decay':1744 'deepmind':170,1112,1464,1870,1965 'denot':1493,1513 'depend':899 'descent':588,1865,1886,1938,2009 'deviat':1713 'differ':635,640,649,849,955,1128 'differenti':261,373,1963 'direct':324,398 'discuss':155,741 'distribut':2018,2029 'dynam':35,1731 'easi':1472 'easier':2038 'entir':203,814 'entropi':489 'equival':1315 'eta':1256,1443 'evalu':192,215,252,284,311,317,331,341,367,390,432,470,788,794,861,1151,1175,1199,1291,1319,1332,1391,1486,1557,1717 'even':77,273,689 'everi':1617 'evid':1890 'evolut':727 'exact':1005,1982 'exampl':213,473,1110,1117,1462,1592,1755 'exhaust':67 'experi':106,1102 'exploit':1023,1051,1616,1643 'explor':896,1048,1068,1614,1641,1686,1696 'extent':96 'extrem':1095,1351 'fact':1569 'fair':1403 'familiar':1096 'famous':579 'faq':1719 'feel':831 'final':1770,1924 'find':70,134,292,501,528,555,825,853,986 'fine':101 'fine-tun':100 'finish':1842 'first':1993 'fix':1253,1736 'general':346 'generat':1194 'genet':162,946,1105,1950,1969,1988,1998 'get':229,1575,1626 'give':677,858 'given':51,560,1139,1262,1336,1393 'goal':185 'good':135,431,679,827,1663 'gradient':587,1248,1427,1583,1619,1637,1678,1864,1885,1937,2008 'grid':92,1137,1531,1598 'ground':248 'h':545,571,609,614,636,646,658,685,700,706,957,1013,1027,1225,1227,1232,1238,1241,1265,1268,1303,1307,1356,1359,1363,1366,1542,1545,1704,1707,1813,1835 'happen':516 'hard':868 'hat':409,416,498,511,534,568,606,611,643,655,682,697,1222 'higher':1484 'hope':412 'howev':596,1903 'huge':42 'human':125,771,935 'hyperparamet':15,28,33,55,73,91,103,136,138,165,551,573,705,729,756,758,763,784,798,836,850,856,893,919,956,1012,1026,1072,1124,1132,1244,1264,1302,1372,1384,1432,1456,1538,1703,1722,1733,1737,1771,1788,1800,1812,1834 'idea':1085,1973 'ignor':1832 'illustr':1119 'impact':43 'infinit':59 'initi':24,1271,1371,1408 'inspir':164 'instanc':329,811,847,885,914,952,962,984,999,1018,1032,1038,1061,1067,1077,1083,1344,1377,1421,1453,1491,1511,1554 'instead':84 'insuffici':1594 'intact':1670 'interest':1917 'intervent':126,936 'introduc':542,598 'introduct':4 'invent':1968 'investig':1652 'iter':969,1250,1507,1585,1621,1639,1676,1859,1900,1912 'june':2067 'know':1785 'label':250 'lead':638 'learn':8,18,172,438,584,1254,1441,1742 'least':776 'lei':2058,2061 'librari':2020,2026 'lighter':1476 'like':153,748,1327 'littl':109 'log':2064 'long':822 'lot':13,80,123 'lower':1561 'lucki':1278,1299,1352 'machin':7,171,218,437,480 'magic':517 'make':1401,1470,2035 'mani':845,950,1582 'mao':2059,2062 'mathemat':175 'matter':1580 'maxim':188,280,508,1155,1221 'maximum':1198,1331,1565,1631,1716 'mean':1052,1069 'mention':1439 'method':115,1845,1861,1902,1914,1995 'metric':211,242,456,476 'might':615,660,662,1697,2034 'minim':190,282,510 'miss':129 'model':9,50,132,146,177,180,204,228,234,245,266,295,350,378,423,482,790,828,966,1007,1172,1405,1502,1602,1654,1725,1761,1780,1807,1828,1954,1957 'much':902,909,1560 'mutat':1044,1070 'need':290,521,1784 'negat':1700 'neither':1657 'network':1748,1882,1935,2013,2050 'neural':1747,1881,1934,2012,2049 'never':1572 'next':802 'node':1496,1499,1516,1523 'note':1683 'number':882,891 'object':193,216,253,285,312,318,332,342,368,391,408,433,441,446,471,497,566,1152,1176,1216,1261,1282,1292,1312,1320 'obstacl':359 'often':10,62,87,396,520,541,548 'one':466,580,781,809,912,989,1489,1527,1666,1751,2001 'opinion':866 'optim':49,76,142,173,294,300,314,327,344,349,363,401,415,503,525,530,538,562,602,622,674,693,1258,1310,1317,1712,1749,1844,1860,1883,1901,1913,1953,1994,2003,2014,2037 'option':30,98 'origin':2055 'otherwis':1694 'output':231,246 'overfit':595 'parallel':835,931 'paramet':181,267,296,379,424,504,531,544,603,623,694,967,1008,1173,1272,1410,1503,1781,1817,1829 'particular':1050,1148 'peopl':86,753,1099 'perform':46,210,241,455,475,979,993,1605 'perspect':2043 'plot':1468,1482,1529 'point':972 'poor':354 'popul':1,157,722,736,743,917,1087,1107,1122,1459,1607,1646,1671,1764,1793,1802,1838,1850,1867,1874,1893,1921,1976,2030,2045,2051 'possibl':64,128,721,1564,1630 'post':150 'practic':119,303,356,1946,2017 'prepar':1114 'prevent':594,1907 'problem':600,735,1947,2015 'process':816,1741 'programm':2041 'propos':168,405,1218 'prove':1942 'publish':2056 'pure':1692 'q':194,198,254,286,319,369,392,410,417,434,499,512,535,569,607,612,626,629,644,652,656,667,670,683,698,709,715,718,1156,1223 'random':1693 'rate':19,585,1255,1442,1743 'rather':490,1734 'ray':2021 'reach':1573 'red':1515 'refer':2044 'region':1478 'regular':21,591 'remain':1547 'remark':1925 'rememb':1927 'remov':1640 'replac':941 'repres':1500 'reproduc':1758,1774 'requir':11,121,365 'resourc':83,778,841,904,911,1145,1338,1399,1596 'respect':263,375,420,1378 'rest':995 'result':1387,1600,1698 'review':751 'round':803 'run':808,844,888,949,1341 'satisfi':832 'save':1823 'schedul':56,74,167,1611 'score':239,493,1196,1200,1333,1392,1487,1558,1718 'search':68,93,1138,1532,1599 'sequenti':762,927,939 'set':782,1149 'shown':1872,1891 'simpl':1091,1116 'simultan':1345 'sinc':388,873 'sole':898 'solv':733,1945,2011 'somehow':1294 'sometim':270,382,443,686 'start':800,1001 'strength':22,592 'sub':2025 'sub-librari':2024 'subject':1041 'sum':486 'surpris':1622 'surrog':407,440,496,565,1215,1260,1281,1311 'take':820,915 'techniqu':301,364,526,539,563,675 'tedious':769 'theori':174,1854 'therefor':133,559,1819 'theta':182,195,199,255,268,287,297,320,370,380,393,411,418,425,435,500,505,513,532,536,557,570,604,608,613,624,627,630,641,645,653,657,668,671,680,684,695,699,710,716,719,968,1009,1157,1159,1162,1166,1169,1188,1191,1207,1211,1224,1229,1234,1273,1276,1411,1415,1818,1830 'throughout':812,1738,1791 'throw':1186 'thus':648 'time':823,1347,1434,1520 'total':1525 'train':3,5,38,159,445,451,483,724,738,745,786,805,810,846,884,913,951,961,975,983,998,1017,1031,1037,1060,1066,1076,1082,1089,1109,1343,1376,1420,1452,1461,1490,1510,1541,1553,1609,1648,1655,1667,1673,1728,1740,1766,1776,1795,1804,1840,1852,1869,1876,1895,1923,1978,2032,2047,2053 'trajectori':1790 'translat':219,481 'treat':1178 'tri':731 'trial':112 'truli':633 'truth':249 'tune':36,102,139,166,704,757,759,764,796,815,837,872,878,920,1125,1133,1385,1457,1539,1723,1789,2027 'two':1342,1375,1552,1660 'typic':196,754,1591,1754 'understand':1474 'updat':964,1430,1506 'us':678,1279 'use':243,298,309,325,333,339,399,467,478,523,725,774,780,1003,1019,1053,1062,1247,1301,1355,1426,1445,1494,1514,1689,1745,1767,1848,1857,1884,1910,1943,1949 'usual':58,353 'valid':206,224,334 'valu':25,650,1566,1632,1701 'want':307,1380 'well':117,1879 'work':116,1103,1877,1897 'would':39,152,289,351,404,427,519,540,637,676,747,895,1000,1039,1246,1313,1323,1783,1896	en	Lei Mao
53	Almost Commutative Kronecker Product	{"ver":2,"uid":1,"hash":"SHA1:d8b256b4b8e4d74169a873f88c254a98641a63b1"}	https://leimao.github.io/blog/Almost-Commutative-Kronecker-Product/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Tensor product and Kronecker product are very important in quantum mechanics. It also have practical physical meanings for quantum processes. One of the interesting properties of Kronecker product is that it is “almost commutative”.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to informally discuss the “almost commutative” property for Kronecker product.</p>\n\n<h3 id="outer-product">Outer Product</h3>\n\n<p>Given two vectors $u = \\{u_0, u_1, \\cdots, u_{m-1}\\}$ and $v = \\{v_0, v_1, \\cdots, v_{n-1}\\}$, the outer product of $u$ and $v$, denoted as $u \\otimes v$, is defined as</p>\n\n\\[\\begin{align}\nu \\otimes v &amp;= \n\\begin{bmatrix} \n    u_0 v_0 &amp; u_0 v_1 &amp; \\cdots &amp; u_0 v_{n-1}\\\\\n    u_1 v_0 &amp; u_1 v_1 &amp; \\cdots &amp; u_1 v_{n-1}\\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    u_{m-1} v_0 &amp; u_{m-1} v_1 &amp; \\cdots &amp; u_{m-1} v_{n-1}\\\\\n\\end{bmatrix} \\nonumber\\\\\n\\end{align}\\]\n\n<p>Using index notation,</p>\n\n\\[(u \\otimes v)_{i,j} = u_i v_j\\]\n\n<p>If $u$ and $v$ are column vectors, i.e., $u = [u_0, u_1, \\cdots, u_{m-1}]^{\\top}$ and $v = [v_0, v_1, \\cdots, v_{n-1}]^{\\top}$, the outer product could also be simply expressed using matrix multiplication.</p>\n\n\\[\\begin{align}\nu \\otimes v &amp;= u v^{\\dagger}\n\\end{align}\\]\n\n<p>The mapping of outer product could be described as</p>\n\n\\[\\otimes: \\mathbb{C}^{m} \\times \\mathbb{C}^{n} \\rightarrow \\mathbb{C}^{m \\times n}\\]\n\n<h3 id="tensor-product">Tensor Product</h3>\n\n<p>Tensor product is essentially an general case of one dimensional array outer product. It is the outer product of two tensors, namely multidimensional tensors, that could have different dimensionality.</p>\n\n<p><br /></p>\n\n<p>If $A$ is a $k$ dimensional tensor, $A \\in \\mathbb{C}^{ \\prod_{i=0}^{k-1} m_i}$ and $B$ is a $k^{\\prime}$ dimensional tensor, $B \\in \\mathbb{C}^{ \\prod_{i=0}^{k^{\\prime}-1} n_i}$, the tensor product $A \\otimes B$ would have shape $A \\otimes B \\in \\mathbb{C}^{ \\prod_{i=0}^{k-1} m_i \\prod_{i=0}^{k^{\\prime}-1} n_i}$.</p>\n\n<h3 id="kronecker-product">Kronecker Product</h3>\n\n<p>The outer product and Kronecker product are closely related. In fact the same symbol is commonly used to denote both operations.</p>\n\n<p><br /></p>\n\n<p>If $u$ and $v$ are column vectors, i.e., $u = [u_0, u_1, \\cdots, u_{m-1}]^{\\top}$ and $v = [v_0, v_1, \\cdots, v_{n-1}]^{\\top}$, the Kronecker product could also be expressed as follows.</p>\n\n\\[\\begin{align}\nu \\otimes_{\\text{Kron}} v &amp;= \n\\begin{bmatrix} \n    u_0 v \\\\\n    u_1 v \\\\\n    \\vdots \\\\\n    u_{m-1} v\\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    u_0 v_0 \\\\\n    u_0 v_1 \\\\\n    \\vdots \\\\\n    u_0 v_{n-1} \\\\\n    \\vdots \\\\\n    u_{m-1} v_0 \\\\\n    u_{m-1} v_1 \\\\\n    \\vdots \\\\\n    u_{m-1} v_{n-1} \\\\\n\\end{bmatrix} \\nonumber\\\\\n\\end{align}\\]\n\n<p>Note that there is an implicit dimensional reduction process in the above expression.</p>\n\n<p><br /></p>\n\n<p>The mapping of outer product could be described as</p>\n\n\\[\\otimes: \\mathbb{C}^{m \\times 1} \\times \\mathbb{C}^{n \\times 1} \\rightarrow \\mathbb{C}^{mn \\times 1}\\]\n\n<p>More concretely, let $A \\in \\mathbb{C}^{m \\times m^{\\prime}}$ and $B \\in \\mathbb{C}^{n \\times n^{\\prime}}$. Then the Kronecker product of $A$ and $B$ is defined as the matrix</p>\n\n\\[\\begin{align}\nA \\otimes_{\\text{Kron}} B &amp;= \n\\begin{bmatrix} \n    A_{0,0}B &amp; A_{0,1}B &amp; \\cdots &amp; A_{0,m^{\\prime}-1}B \\\\\n    A_{1,0}B &amp; A_{1,1}B &amp; \\cdots &amp; A_{1,m^{\\prime}-1}B \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{m-1,0}B &amp; A_{m-1,1}B &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1}B \\\\\n\\end{bmatrix} \\nonumber\\\\\n\\end{align}\\]\n\n<h4 id="almost-commutative">Almost Commutative</h4>\n\n<p>Kronecker product is not commutative, i.e., usually $A \\otimes B \\neq B \\otimes A$. However, Kronecker product is almost commutative with some row and column exchanges in some dimensions. We define this as $A \\otimes B \\cong B \\otimes A$.</p>\n\n<p><br /></p>\n\n<p>Suppose we have $A \\in \\mathbb{C}^{m \\times m^{\\prime}}$ and $B \\in \\mathbb{C}^{n \\times n^{\\prime}}$, we have</p>\n\n\\[\\begin{align}\nA \\otimes B &amp;= \n\\begin{bmatrix} \n    A_{0,0}B &amp; A_{0,1}B &amp; \\cdots &amp; A_{0,m^{\\prime}-1}B \\\\\n    A_{1,0}B &amp; A_{1,1}B &amp; \\cdots &amp; A_{1,m^{\\prime}-1}B \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{m-1,0}B &amp; A_{m-1,1}B &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1}B \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    A_{0,0}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; A_{0,1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; \\cdots &amp; A_{0,m^{\\prime}-1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} \\\\\n    A_{1,0}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; A_{1,1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; \\cdots &amp; A_{1,m^{\\prime}-1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{m-1,0}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; A_{m-1,1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1}\\begin{bmatrix} B_{:,0} &amp; B_{:,1} &amp; \\cdots &amp; B_{:,n^{\\prime}-1} \\end{bmatrix} \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,n^{\\prime}-1} \n    &amp;\n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n\\end{bmatrix} \\nonumber\\\\\n\\end{align}\\]\n\n<p>We rearrange the columns of $A \\otimes B$, we have</p>\n\n\\[\\begin{align}\nA \\otimes B \n&amp;= \n\\begin{bmatrix} \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,n^{\\prime}-1} \n    &amp;\n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,0} \n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n\\end{bmatrix} \\nonumber\\\\\n&amp;\\rightarrow  \n\\begin{bmatrix} \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,0} &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,0}  \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,0} \n    &amp;\n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,1}  &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,0} \\\\ A_{1,0} \\\\ \\vdots \\\\ A_{m-1,0} \\end{bmatrix} B_{:,n^{\\prime}-1}  &amp; \n    \\begin{bmatrix} A_{0,1} \\\\ A_{1,1} \\\\ \\vdots \\\\ A_{m-1,1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,m^{\\prime}-1} \\\\ A_{1,m^{\\prime}-1} \\\\ \\vdots \\\\ A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \n\\end{bmatrix} \\nonumber\\\\\n&amp;=\n\\begin{bmatrix} \n    \\begin{bmatrix} A_{0,0} &amp; A_{0,1} &amp; \\cdots &amp; A_{0,m^{\\prime}-1} \\end{bmatrix} B_{:,0}\n    &amp;\n    \\begin{bmatrix} A_{0,0} &amp; A_{0,1} &amp; \\cdots &amp; A_{0,m^{\\prime}-1} \\end{bmatrix} B_{:,1}\n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{0,0} &amp; A_{0,1} &amp; \\cdots &amp; A_{0,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \\\\\n    \\begin{bmatrix} A_{1,0} &amp; A_{1,1} &amp; \\cdots &amp; A_{1,m^{\\prime}-1} \\end{bmatrix} B_{:,0}\n    &amp;\n    \\begin{bmatrix} A_{1,0} &amp; A_{1,1} &amp; \\cdots &amp; A_{1,m^{\\prime}-1} \\end{bmatrix} B_{:,1}\n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{1,0} &amp; A_{1,1} &amp; \\cdots &amp; A_{1,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \\\\\n    \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ \n    \\begin{bmatrix} A_{m-1,0} &amp; A_{m-1,1} &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,0}\n    &amp;\n    \\begin{bmatrix} A_{m-1,0} &amp; A_{m-1,1} &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,1}\n    &amp;\n    \\cdots\n    &amp; \n    \\begin{bmatrix} A_{m-1,0} &amp; A_{m-1,1} &amp; \\cdots &amp; A_{m-1,m^{\\prime}-1} \\end{bmatrix} B_{:,n^{\\prime}-1} \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;=  \n\\begin{bmatrix} \n    \\begin{bmatrix} B_{0,0} \\\\ B_{1,0} \\\\ \\vdots \\\\ B_{n-1,0} \\end{bmatrix} A_{0,:} \n    &amp; \n    \\begin{bmatrix} B_{0,1} \\\\ B_{1,1} \\\\ \\vdots \\\\ B_{n-1,1} \\end{bmatrix} A_{0,:} \n    &amp; \n    \\cdots\n    &amp; \n    \\begin{bmatrix} B_{0,n^{\\prime}} \\\\ B_{1,n^{\\prime}} \\\\ \\vdots \\\\ B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{0,0} \\\\ B_{1,0} \\\\ \\vdots \\\\ B_{n-1,0} \\end{bmatrix} A_{1,:} \n    &amp; \n    \\begin{bmatrix} B_{0,1} \\\\ B_{1,1} \\\\ \\vdots \\\\ B_{n-1,1} \\end{bmatrix} A_{1,:} \n    &amp; \n    \\cdots\n    &amp; \n    \\begin{bmatrix} B_{0,n^{\\prime}} \\\\ B_{1,n^{\\prime}} \\\\ \\vdots \\\\ B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ \n    \\begin{bmatrix} B_{0,0} \\\\ B_{1,0} \\\\ \\vdots \\\\ B_{n-1,0} \\end{bmatrix} A_{m-1,:} \n    &amp; \n    \\begin{bmatrix} B_{0,1} \\\\ B_{1,1} \\\\ \\vdots \\\\ B_{n-1,1} \\end{bmatrix} A_{m-1,:} \n    &amp; \n    \\cdots\n    &amp; \n    \\begin{bmatrix} B_{0,n^{\\prime}} \\\\ B_{1,n^{\\prime}} \\\\ \\vdots \\\\ B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;=\n\\begin{bmatrix} \n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n\\end{bmatrix} \\nonumber\\\\\n\\end{align}\\]\n\n<p>We further rearrange the rows of $A \\otimes B$, we have</p>\n\n\\[\\begin{align}\nA \\otimes B \n&amp;\\rightarrow  \n\\begin{bmatrix} \n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;\\rightarrow  \n\\begin{bmatrix} \n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{0,0} &amp; B_{0,1} &amp; \\cdots &amp; B_{0,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{1,0} &amp; B_{1,1} &amp; \\cdots &amp; B_{1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{0,:} \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{1,:} \\\\\n    \\vdots \\\\\n    \\begin{bmatrix} B_{n-1,0} &amp; B_{n-1,1} &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} \\end{bmatrix} A_{m-1,:} \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;=  \n\\begin{bmatrix} \n    B_{0,0} A &amp; B_{0,1} A &amp; \\cdots &amp; B_{0,n^{\\prime}-1} A \\\\\n    B_{1,0} A &amp; B_{1,1} A &amp; \\cdots &amp; B_{1,n^{\\prime}-1} A \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    B_{n-1,0} A &amp; B_{n-1,1} A &amp; \\cdots &amp; B_{n-1,n^{\\prime}-1} A \\\\\n\\end{bmatrix} \\nonumber\\\\\n&amp;=  B \\otimes A \n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[A \\otimes B \\cong B \\otimes A\\]\n\n<p>This means, there exist permutation matrices $P$ and $Q$ such that</p>\n\n\\[A \\otimes B = P (B \\otimes A) Q\\]\n\n<h3 id="miscellaneous">Miscellaneous</h3>\n\n<p>In Numpy, the tensor product could be computed using <a href="https://numpy.org/doc/stable/reference/generated/numpy.ufunc.outer.html#numpy-ufunc-outer">numpy.ufunc.outer</a>, and the Kronecker product could be computed using <a href="https://numpy.org/doc/stable/reference/generated/numpy.kron.html">numpy.kron</a>.</p>\n\n\n  <p><a href="https://leimao.github.io/blog/Almost-Commutative-Kronecker-Product/">Almost Commutative Kronecker Product</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 07, 2020.</p>	b716eb2ecbd9223a268e07d8871ba5229a400e6d	\N	f	2020-08-14 05:06:00	2020-08-15 22:10:07.485288	0			'-1':70,80,116,130,137,142,148,151,185,196,288,308,330,338,380,391,420,440,444,449,455,458,559,574,582,587,593,596,687,702,710,715,721,724,744,760,768,779,795,811,819,830,839,851,856,868,874,877,888,907,924,942,949,961,978,996,1003,1011,1016,1020,1023,1034,1039,1043,1046,1058,1063,1067,1070,1076,1110,1127,1145,1152,1164,1181,1199,1206,1214,1219,1223,1226,1237,1242,1246,1249,1261,1266,1270,1273,1279,1297,1314,1327,1332,1336,1339,1355,1372,1385,1390,1394,1397,1414,1421,1433,1440,1448,1453,1457,1460,1466,1485,1503,1522,1528,1542,1560,1579,1585,1594,1598,1603,1606,1615,1619,1624,1627,1637,1641,1646,1649,1655,1672,1689,1709,1712,1728,1745,1765,1768,1788,1794,1806,1812,1827,1830,1835,1854,1872,1882,1886,1891,1894,1912,1930,1940,1944,1949,1952,1971,1976,1990,1995,2001,2005,2010,2013,2018,2056,2074,2084,2088,2093,2096,2114,2132,2142,2146,2151,2154,2173,2178,2192,2197,2203,2207,2212,2215,2220,2240,2258,2277,2282,2296,2314,2333,2338,2344,2348,2353,2356,2365,2369,2374,2377,2387,2391,2396,2399,2404,2423,2438,2446,2451,2457,2460 '0':64,74,104,106,108,113,120,139,179,190,286,305,328,335,374,385,412,428,430,432,437,446,547,548,551,556,563,583,675,676,679,684,691,711,732,733,737,748,753,765,772,784,788,804,823,840,844,861,881,899,900,903,908,912,916,917,920,925,934,935,938,943,953,966,970,988,1008,1027,1031,1055,1102,1103,1106,1111,1115,1119,1120,1123,1128,1137,1138,1141,1146,1156,1169,1173,1191,1211,1230,1234,1258,1289,1290,1293,1298,1302,1306,1319,1324,1343,1347,1348,1351,1356,1364,1382,1406,1407,1410,1415,1425,1445,1475,1476,1478,1482,1489,1493,1494,1496,1500,1512,1513,1515,1519,1533,1546,1551,1570,1595,1610,1616,1638,1664,1665,1668,1673,1677,1681,1694,1699,1716,1720,1721,1724,1729,1737,1755,1780,1781,1784,1789,1798,1817,1844,1845,1847,1851,1858,1863,1876,1883,1898,1902,1903,1905,1909,1921,1941,1961,1962,1964,1968,1981,2002,2046,2047,2049,2053,2060,2065,2078,2085,2100,2104,2105,2107,2111,2123,2143,2163,2164,2166,2170,2183,2204,2230,2231,2233,2237,2244,2248,2249,2251,2255,2267,2268,2270,2274,2287,2300,2305,2324,2345,2360,2366,2388,2411,2412,2415,2420,2427,2447 '07':2535 '1':66,76,110,118,122,124,127,144,181,192,376,387,415,434,451,491,497,503,552,562,566,567,571,588,680,690,694,695,699,716,739,749,755,774,783,790,799,800,806,816,825,846,857,863,883,902,919,929,937,954,956,957,962,971,973,974,979,983,989,991,992,997,1013,1036,1050,1060,1105,1122,1132,1140,1157,1159,1160,1165,1174,1176,1177,1182,1186,1192,1194,1195,1200,1216,1239,1253,1263,1292,1307,1309,1310,1315,1329,1350,1360,1365,1367,1368,1373,1377,1387,1401,1409,1426,1428,1429,1434,1450,1479,1497,1507,1516,1532,1535,1536,1539,1550,1553,1554,1557,1564,1569,1572,1573,1576,1599,1620,1631,1642,1667,1682,1684,1685,1690,1703,1723,1733,1738,1740,1741,1746,1750,1759,1772,1783,1799,1801,1802,1807,1821,1848,1862,1865,1866,1869,1887,1906,1916,1920,1923,1924,1927,1934,1945,1956,1965,1980,1983,1984,1987,2006,2050,2064,2067,2068,2071,2089,2108,2118,2122,2125,2126,2129,2136,2147,2158,2167,2182,2185,2186,2189,2208,2234,2252,2262,2271,2286,2289,2290,2293,2304,2307,2308,2311,2318,2323,2326,2327,2330,2349,2370,2381,2392,2416,2426,2430,2431,2435,2452 '2020':2536 'align':97,156,210,218,403,463,538,602,668,1081,1093,2023,2036,2469 'almost':1,38,51,603,623,2517 'also':18,202,397 'array':254 'b':292,299,316,322,516,531,543,549,553,560,564,568,575,584,589,597,614,616,640,642,657,671,677,681,688,692,696,703,712,717,725,736,738,741,752,754,757,771,773,776,787,789,792,803,805,808,822,824,827,843,845,848,860,862,865,880,882,885,911,928,946,965,982,1000,1026,1049,1073,1089,1096,1114,1131,1149,1168,1185,1203,1229,1252,1276,1301,1318,1342,1359,1376,1400,1418,1437,1463,1488,1506,1525,1545,1563,1582,1609,1630,1652,1663,1666,1670,1680,1683,1687,1698,1702,1707,1719,1722,1726,1736,1739,1743,1754,1758,1763,1779,1782,1786,1797,1800,1804,1816,1820,1825,1843,1846,1850,1861,1864,1868,1880,1884,1889,1901,1904,1908,1919,1922,1926,1938,1942,1947,1960,1963,1967,1979,1982,1986,1999,2003,2008,2032,2039,2045,2048,2052,2063,2066,2070,2082,2086,2091,2103,2106,2110,2121,2124,2128,2140,2144,2149,2162,2165,2169,2181,2184,2188,2201,2205,2210,2229,2232,2236,2247,2250,2254,2266,2269,2273,2285,2288,2292,2303,2306,2310,2322,2325,2329,2342,2346,2351,2363,2367,2372,2385,2389,2394,2410,2414,2419,2425,2429,2434,2444,2449,2455,2465,2473,2475,2491,2493 'begin':96,101,209,402,409,425,537,544,667,672,729,734,750,769,785,801,820,841,858,878,894,896,913,931,950,967,985,1005,1028,1052,1092,1097,1099,1116,1134,1153,1170,1188,1208,1231,1255,1284,1286,1303,1321,1344,1361,1379,1403,1422,1442,1470,1472,1490,1509,1529,1547,1566,1590,1611,1633,1659,1661,1678,1696,1717,1734,1752,1777,1795,1814,1839,1841,1859,1878,1899,1917,1936,1958,1977,1997,2035,2041,2043,2061,2080,2101,2119,2138,2160,2179,2199,2225,2227,2245,2264,2283,2301,2320,2340,2361,2383,2408 'blog':42 'bmatrix':102,153,410,423,426,460,545,599,673,727,730,735,746,751,762,770,781,786,797,802,813,821,832,842,853,859,870,879,890,892,895,897,910,914,927,932,945,951,964,968,981,986,999,1006,1025,1029,1048,1053,1072,1078,1098,1100,1113,1117,1130,1135,1148,1154,1167,1171,1184,1189,1202,1209,1228,1232,1251,1256,1275,1281,1285,1287,1300,1304,1317,1322,1341,1345,1358,1362,1375,1380,1399,1404,1417,1423,1436,1443,1462,1468,1471,1473,1487,1491,1505,1510,1524,1530,1544,1548,1562,1567,1581,1591,1608,1612,1629,1634,1651,1657,1660,1662,1675,1679,1692,1697,1714,1718,1731,1735,1748,1753,1770,1778,1791,1796,1809,1815,1832,1837,1840,1842,1856,1860,1874,1879,1896,1900,1914,1918,1932,1937,1954,1959,1973,1978,1992,1998,2015,2020,2042,2044,2058,2062,2076,2081,2098,2102,2116,2120,2134,2139,2156,2161,2175,2180,2194,2200,2217,2222,2226,2228,2242,2246,2260,2265,2279,2284,2298,2302,2316,2321,2335,2341,2358,2362,2379,2384,2401,2406,2409,2463 'book':2532 'c':230,234,238,283,302,325,488,494,500,510,519,651,660 'case':250 'cdot':67,77,111,125,145,182,193,377,388,554,569,590,682,697,718,740,756,763,775,791,807,814,826,847,864,871,884,930,984,1004,1051,1133,1187,1207,1254,1320,1378,1402,1441,1480,1498,1508,1517,1537,1555,1565,1574,1588,1600,1621,1632,1643,1695,1751,1775,1813,1849,1867,1888,1907,1925,1946,1966,1985,2007,2051,2069,2090,2109,2127,2148,2168,2187,2209,2235,2253,2272,2291,2309,2328,2350,2371,2393,2418,2433,2454 'close':350 'column':174,369,629,1085 'common':358 'commut':2,39,52,604,609,624,2518 'comput':2505,2514 'concret':505 'cong':641,2474 'could':201,224,269,396,482,2503,2512 'dagger':216 'ddot':133,578,706,835,2442 'defin':94,533,635 'denot':88,361 'describ':226,484 'differ':271 'dimens':633 'dimension':253,272,278,297,470 'discuss':49 'end':152,155,217,422,459,462,598,601,726,745,761,780,796,812,831,852,869,889,891,909,926,944,963,980,998,1024,1047,1071,1077,1080,1112,1129,1147,1166,1183,1201,1227,1250,1274,1280,1299,1316,1340,1357,1374,1398,1416,1435,1461,1467,1486,1504,1523,1543,1561,1580,1607,1628,1650,1656,1674,1691,1713,1730,1747,1769,1790,1808,1831,1836,1855,1873,1895,1913,1931,1953,1972,1991,2014,2019,2022,2057,2075,2097,2115,2133,2155,2174,2193,2216,2221,2241,2259,2278,2297,2315,2334,2357,2378,2400,2405,2462,2468 'essenti':247 'exchang':630 'exist':2481 'express':205,399,476 'fact':353 'follow':401 'general':249 'given':59 'howev':619 'i.e':176,371,610 'implicit':469 'import':13 'index':158 'inform':48 'interest':29 'introduct':5 'j':164,168 'june':2534 'k':277,287,295,306,329,336 'kron':407,542 'kroneck':3,9,32,55,341,347,394,526,605,620,2510,2519 'lei':2525,2528 'let':506 'like':46 'log':2531 'm':69,136,141,147,184,231,239,289,331,379,419,443,448,454,489,511,513,557,572,581,586,592,594,652,654,685,700,709,714,720,722,766,817,838,855,873,875,906,923,941,960,977,995,1009,1014,1019,1021,1032,1037,1042,1044,1056,1061,1066,1068,1109,1126,1144,1163,1180,1198,1212,1217,1222,1224,1235,1240,1245,1247,1259,1264,1269,1271,1296,1313,1325,1330,1335,1337,1354,1371,1383,1388,1393,1395,1413,1432,1446,1451,1456,1458,1483,1501,1520,1540,1558,1577,1593,1597,1602,1604,1614,1618,1623,1625,1636,1640,1645,1647,1793,1811,1834,1975,1994,2017,2177,2196,2219,2281,2337,2403 'mao':2526,2529 'map':220,478 'mathbb':229,233,237,282,301,324,487,493,499,509,518,650,659 'matric':2483 'matrix':207,536 'mean':22,2479 'mechan':16 'miscellan':2497 'mn':501 'multidimension':266 'multipl':208 'n':79,115,129,150,195,235,241,309,339,390,439,457,495,520,522,661,663,742,758,777,793,809,828,849,866,886,947,1001,1074,1150,1204,1277,1419,1438,1464,1526,1583,1653,1671,1688,1700,1704,1708,1710,1727,1744,1756,1760,1764,1766,1787,1805,1818,1822,1826,1828,1852,1870,1881,1885,1890,1892,1910,1928,1939,1943,1948,1950,1969,1988,2000,2004,2009,2011,2054,2072,2083,2087,2092,2094,2112,2130,2141,2145,2150,2152,2171,2190,2202,2206,2211,2213,2238,2256,2275,2294,2312,2331,2343,2347,2352,2354,2364,2368,2373,2375,2386,2390,2395,2397,2421,2436,2445,2450,2456,2458 'name':265 'neq':615 'nonumb':154,424,461,600,728,893,1079,1282,1469,1658,1838,2021,2223,2407,2464 'notat':159 'note':464 'numpi':2499 'numpy.kron':2516 'numpy.ufunc.outer':2507 'one':26,252 'oper':363 'origin':2522 'otim':91,99,161,212,228,315,321,405,486,540,613,617,639,643,670,1088,1095,2031,2038,2466,2472,2476,2490,2494 'outer':57,82,199,222,255,260,344,480 'p':2484,2492 'permut':2482 'physic':21 'post':43 'practic':20 'prime':296,307,337,514,523,558,573,595,655,664,686,701,723,743,759,767,778,794,810,818,829,850,867,876,887,948,1002,1010,1015,1022,1033,1038,1045,1057,1062,1069,1075,1151,1205,1213,1218,1225,1236,1241,1248,1260,1265,1272,1278,1326,1331,1338,1384,1389,1396,1420,1439,1447,1452,1459,1465,1484,1502,1521,1527,1541,1559,1578,1584,1605,1626,1648,1654,1701,1705,1711,1757,1761,1767,1819,1823,1829,1853,1871,1893,1911,1929,1951,1970,1989,2012,2055,2073,2095,2113,2131,2153,2172,2191,2214,2239,2257,2276,2295,2313,2332,2355,2376,2398,2422,2437,2459 'process':25,472 'prod':284,303,326,333 'product':4,7,10,33,56,58,83,200,223,243,245,256,261,313,342,345,348,395,481,527,606,621,2502,2511,2520 'properti':30,53 'publish':2523 'q':2486,2496 'quantum':15,24 'rearrang':1083,2026 'reduct':471 'relat':351 'rightarrow':236,498,1283,2040,2224 'row':627,2028 'shape':319 'simpli':204 'suppos':645 'symbol':356 'tensor':6,242,244,264,267,279,298,312,2501 'text':406,541 'therefor':2470 'time':232,240,490,492,496,502,512,521,653,662 'top':186,197,381,392 'two':60,263 'u':62,63,65,68,85,90,98,103,107,112,117,121,126,135,140,146,160,165,170,177,178,180,183,211,214,365,372,373,375,378,404,411,414,418,427,431,436,442,447,453 'use':157,206,359,2506,2515 'usual':611 'v':72,73,75,78,87,92,100,105,109,114,119,123,128,138,143,149,162,167,172,188,189,191,194,213,215,367,383,384,386,389,408,413,416,421,429,433,438,445,450,456 'vdot':131,132,134,417,435,441,452,576,577,579,704,705,707,833,834,836,904,921,939,958,975,993,1017,1040,1064,1107,1124,1142,1161,1178,1196,1220,1243,1267,1294,1311,1333,1352,1369,1391,1411,1430,1454,1586,1587,1589,1669,1686,1706,1725,1742,1762,1773,1774,1776,1785,1803,1824,1877,1935,1957,1996,2079,2137,2159,2198,2263,2319,2339,2382,2440,2441,2443 'vector':61,175,370 'would':45,317	en	Lei Mao
49	Deutsch's Algorithm	{"ver":2,"uid":1,"hash":"SHA1:dd1e72e3b843dff6955260f0ffd743f84424faac"}	https://leimao.github.io/blog/Deutsch-Algorithm/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Deutsch’s algorithm is the simplest quantum computing algorithm invented to solve a slightly contrived problem. Suppose we have a black-box function $f(x)$ which maps from the set $\\{0,1\\}$ to the set $\\{0,1\\}$. It is easy to speculate that there are four possible mappings for $f(x)$. We call the function $f(x)$ constant if $f(0) = f(1)$, otherwise we call the function $f(x)$ balanced.</p>\n\n<p><br /></p>\n\n<p>With classical circuits, we would have to run the black-box $f(x)$ twice to evaluate $f(0)$ and $f(1)$ and compare the values of $f(0)$ and $f(1)$ to see if they are equivalent or not. With quantum circuits, because we could take advantage of superposition, probably we could do better with fewer runs and operations.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the Deutsch’s algorithm.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<h4 id="separable-and-entangled-states">Separable and Entangled States</h4>\n\n<p>States that can be broken into the Kronecker product of states from the constituent subsystems are called separable states, whereas states that are unbreakable are referred to as entangled states.</p>\n\n<p><br /></p>\n\n<p>For example, we have the following two states $| \\psi \\rangle$ and $| \\psi^{\\prime} \\rangle$.</p>\n\n\\[\\begin{align}\n| \\psi \\rangle &amp;= \\frac{| 0, 0 \\rangle - | 0, 1 \\rangle + | 1, 0 \\rangle - | 1, 1 \\rangle}{2}\\\\\n&amp;= \\frac{| 0\\rangle \\otimes | 0 \\rangle - | 0\\rangle \\otimes | 1 \\rangle + | 1\\rangle \\otimes | 0 \\rangle - | 1\\rangle \\otimes | 1 \\rangle}{2}\\\\\n&amp;= \\frac{| 0 \\rangle + | 1 \\rangle}{\\sqrt{2}} \\otimes \\frac{| 0 \\rangle - | 1 \\rangle}{\\sqrt{2}} \\\\\n| \\psi^{\\prime} \\rangle &amp;= \\frac{| 0, 1 \\rangle + | 1, 0 \\rangle}{\\sqrt{2}}\\\\\n\\end{align}\\]\n\n<p>$| \\psi \\rangle$ is separable and $| \\psi^{\\prime} \\rangle$ is entangled.</p>\n\n<h4 id="unitary-quantum-operator">Unitary Quantum Operator</h4>\n\n<p>Every quantum operator $U$ is unitary and thus reversible. Because $UU^{\\dagger} = U^{\\dagger}U = I$, we have</p>\n\n\\[\\begin{align}\nU^{\\dagger} (U |\\varphi\\rangle) &amp;= (U^{\\dagger} U) |\\varphi\\rangle \\\\\n&amp;= I |\\varphi\\rangle \\\\ \n&amp;= |\\varphi\\rangle \\\\ \n\\end{align}\\]\n\n<h4 id="hadamard-operator">Hadamard Operator</h4>\n\n<p>Hardmard operator is a special quantum operator.</p>\n\n\\[\\begin{align}\nH &amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} &amp; \\frac{1}{\\sqrt{2}} \\\\\n    \\frac{1}{\\sqrt{2}} &amp; -\\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \n\\end{align}\\]\n\n<p>Notice that $H^{\\dagger} = H$, therefore</p>\n\n\\[\\begin{align}\nH^{\\dagger} (H |\\varphi\\rangle) &amp;= H (H |\\varphi\\rangle) \\\\\n&amp;= (H^2) |\\varphi\\rangle \\\\\n&amp;= I |\\varphi\\rangle \\\\ \n&amp;= |\\varphi\\rangle \\\\ \n\\end{align}\\]\n\n\\[\\begin{align}\nH|0\\rangle &amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} &amp; \\frac{1}{\\sqrt{2}} \\\\\n    \\frac{1}{\\sqrt{2}} &amp; -\\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \\\\\n&amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} \\\\\n    \\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \\\\\n&amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}}\n\\end{align}\\]\n\n\\[\\begin{align}\nH\\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} &amp;= HH|0\\rangle \\\\\n&amp;= I|0\\rangle \\\\\n&amp;= |0\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\nH|1\\rangle &amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} &amp; \\frac{1}{\\sqrt{2}} \\\\\n    \\frac{1}{\\sqrt{2}} &amp; -\\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n\\end{bmatrix}  \\\\\n&amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} \\\\\n    -\\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \\\\\n&amp;= \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}}\n\\end{align}\\]\n\n\\[\\begin{align}\nH\\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} &amp;= HH|1\\rangle \\\\\n&amp;= I|1\\rangle \\\\\n&amp;= |1\\rangle \\\\\n\\end{align}\\]\n\n<h4 id="reducing-sum-or-difference-to-boolean">Reducing Sum or Difference to Boolean</h4>\n\n<p>If $f(x)$ maps from the set $\\{0,1\\}$ to the set $\\{0,1\\}$, we have</p>\n\n\\[\\begin{align}\n(-1)^{f(1) - f(0)} = (-1)^{f(0) \\oplus f(1)}\n\\end{align}\\]\n\n<p>Where $\\oplus$ is $\\text{XOR}$ (binary addition modulo 2).</p>\n\n<h3 id="deutschs-algorithm">Deutsch’s Algorithm</h3>\n\n<p>The black-box $f(x)$ is represented using a quantum gate $U_f$. Just like the classical gate for $f(x)$, it has four possible candidates. Our job is to determine whether the $f(x)$ corresponding to the $U_f$ is constant or balanced.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-23-Deutsch-Algorithm/Uf.png" style="width: 50%; height: 50%" />\n    <figcaption>$U_f$</figcaption>\n</figure>\n</div>\n\n<p>The quantum gate $U_f$ is a unitary matrix which maps from $| x \\rangle \\otimes | y \\rangle$ to $| x \\rangle \\otimes | y \\oplus f(x) \\rangle$, namely $U_f (| x \\rangle \\otimes | y \\rangle) = | x \\rangle \\otimes | y \\oplus f(x) \\rangle$, for $x, y \\in \\{0, 1\\}$. When $y = 0$, $| y \\oplus f(x) \\rangle = | 0 \\oplus f(x) \\rangle = | f(x) \\rangle $, $| y \\oplus f(x) \\rangle$ is just $| f(x) \\rangle$.</p>\n\n<p><br /></p>\n\n<p>Note that the above mapping is only valid when $| x \\rangle$ and $| y \\rangle$ are basic qubit states $| 0 \\rangle$ or $| 1 \\rangle$. When $| x \\rangle$ and $| y \\rangle$ are superpositions, the mapping does not necessarily hold.</p>\n\n<p><br /></p>\n\n<p>Let’s further check when $| x \\rangle$ and $| y \\rangle$ are superpositions, what the outputs from $U_f$ will be. Perhaps we could achieve fewer runs with superpositions.</p>\n\n<h4 id="first-attempt">First Attempt</h4>\n\n<p>In the first attempt, we made the first qubit input to $U_f$ a superposition, which is achieved by applying a Hadamard operator to the input basic state $|0\\rangle$. The superposition is</p>\n\n\\[\\begin{align}\nH|0\\rangle &amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}}\n\\end{align}\\]\n\n<p>The second qubit input to $U_f$ is just a normal  basic state $|0\\rangle$.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-23-Deutsch-Algorithm/attempt-1.png" style="width: 75%; height: 75%" />\n    <figcaption>First Attempt</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |0\\rangle \\otimes |0\\rangle\\\\\n&amp;= |0, 0\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (H \\otimes I) |\\varphi_0\\rangle \\\\\n&amp;= (H \\otimes I) (|0\\rangle \\otimes |0\\rangle) \\\\\n&amp;= H|0\\rangle \\otimes I |0\\rangle \\\\\n&amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} \\otimes |0\\rangle \\\\\n&amp;= \\frac{|0\\rangle \\otimes |0\\rangle + |1\\rangle \\otimes |0\\rangle }{\\sqrt{2}} \\\\\n&amp;= \\frac{|0, 0\\rangle + |1, 0\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= U_f \\frac{|0, 0\\rangle + |1, 0\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f |0, 0\\rangle + U_f |1, 0\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f (|0\\rangle \\otimes |0\\rangle) + U_f (|1\\rangle \\otimes |0\\rangle)}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0\\rangle \\otimes |0 \\oplus f(0)\\rangle + |1\\rangle \\otimes |0 \\oplus f(1)\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0\\rangle \\otimes |f(0)\\rangle + |1\\rangle \\otimes |f(1)\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0, f(0)\\rangle + |1, f(1)\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>If $f(0) = 0$, $f(1) = 1$, one of the balanced cases,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\frac{|0, 0\\rangle + |1, 1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>Note that this $|\\varphi_2\\rangle$ is entangled and could be be expressed as the Kronecker product of two qubits. The first qubit output from $U_f$ is not $H|0\\rangle$ either. In fact it could not be described using single qubit! The two qubits must be described as a whole due to quantum entanglement. When we observe either the first qubit output or the second qubit output, we immediately know the observation of the other qubit. For example, if we observed the second qubit is 0, we know the observation of the first qubit must be 0. There are 50-50 percent chance observing 0 or 1 for both the first qubit and the second qubit.</p>\n\n<p><br /></p>\n\n<p>If $f(0) = 1$, $f(1) = 0$, one of the balanced cases,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\frac{|0, 1\\rangle + |1, 0\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>This $|\\varphi_2\\rangle$ is entangled and there are 50-50 percent chance observing 0 or 1 for both the first qubit and the second qubit.</p>\n\n<p><br /></p>\n\n<p>If $f(0) = 0$, $f(1) = 0$, one of the constant cases,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\frac{|0, 0\\rangle + |1, 0\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} \\otimes |0\\rangle\\\\\n&amp;= \\frac{-|0\\rangle - |1\\rangle}{\\sqrt{2}} \\otimes (-|0\\rangle)\\\\\n\\end{align}\\]\n\n<p>This $|\\varphi_2\\rangle$ is separable. Although we are not sure the exact state the two qubit outputs would be in, due to the phase is not defined, we are sure that the observation of the bottom qubit must be 0.</p>\n\n<p><br /></p>\n\n<p>If $f(0) = 1$, $f(1) = 1$, one of the constant cases,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\frac{|0, 1\\rangle + |1, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} \\otimes |1\\rangle\\\\\n&amp;= \\frac{-|0\\rangle - |1\\rangle}{\\sqrt{2}} \\otimes (-|1\\rangle)\\\\\n\\end{align}\\]\n\n<p>This $|\\varphi_2\\rangle$ is separable. Although we are not sure the exact state the two qubit outputs would be in, due to the phase is not defined, we are sure that the observation of the bottom qubit must be 1.</p>\n\n<p><br /></p>\n\n<p>However, all of these are not helpful if we are only allowed to run once. After running once, no matter what we observed from the first qubit and the second qubit, we are not sure whether $f(x)$ is constant or balanced.</p>\n\n<h4 id="second-attempt">Second Attempt</h4>\n\n<p>In the second attempt, we made the second qubit input to $U_f$ a superposition, which is achieved by applying a Hadamard operator to the input basic state $|1\\rangle$. The superposition is</p>\n\n\\[\\begin{align}\nH|1\\rangle &amp;= \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}}\n\\end{align}\\]\n\n<p>The second qubit input to $U_f$ is a variable and it could be either $|0\\rangle$ or $|1\\rangle$.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-23-Deutsch-Algorithm/attempt-2.png" style="width: 75%; height: 75%" />\n    <figcaption>Second Attempt</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |x\\rangle \\otimes |1\\rangle\\\\\n&amp;= |x, 1\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (I \\otimes H) |\\varphi_0\\rangle \\\\\n&amp;= (I \\otimes H) (|x\\rangle \\otimes |1\\rangle) \\\\\n&amp;= I|x\\rangle \\otimes H |1\\rangle \\\\\n&amp;= |x\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|x, 0\\rangle - |x, 1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= U_f \\frac{|x, 0\\rangle - |x, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f |x, 0\\rangle - U_f |x, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f (|x\\rangle \\otimes |0\\rangle) - U_f (|x\\rangle \\otimes |1\\rangle)}{\\sqrt{2}} \\\\\n&amp;= \\frac{|x\\rangle \\otimes |0 \\oplus f(x)\\rangle - |x\\rangle \\otimes |1 \\oplus f(x)\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|x\\rangle \\otimes |f(x)\\rangle - |x\\rangle \\otimes |\\overline{f(x)}\\rangle}{\\sqrt{2}} \\\\\n&amp;= |x\\rangle \\otimes \\frac{|f(x)\\rangle - |\\overline{f(x)}\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>Because $\\frac{|f(x)\\rangle - |\\overline{f(x)}\\rangle}{\\sqrt{2}}$ is either $\\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}}$ or $\\frac{|1\\rangle - |0\\rangle}{\\sqrt{2}}$, $|\\varphi_2\\rangle $ could be further simplified as</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= (-1)^{f(x)} |x\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>The observation from the first qubit output is always the same to the first qubit input, whereas there are 50-50 percent chance observing 0 or 1 for the second qubit.</p>\n\n<p><br /></p>\n\n<p>This provides no information of determining whether $f(x)$ is constant or balanced either.</p>\n\n<h4 id="third-attempt">Third Attempt</h4>\n\n<p>In the third attempt, we made the both qubit inputs to $U_f$ superpositions. The superpositions for the first qubit and the second qubit are $H|0\\rangle$ and $H|1\\rangle$, respectively.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-23-Deutsch-Algorithm/deutsch-algorithm.png" style="width: 95%; height: 95%" />\n    <figcaption>Deutsch's Algorithm</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |0\\rangle \\otimes |1\\rangle\\\\\n&amp;= |0, 1\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (H \\otimes H) |\\varphi_0\\rangle \\\\\n&amp;= (H \\otimes H) (|0\\rangle \\otimes |1\\rangle) \\\\\n&amp;= H|0\\rangle \\otimes H |1\\rangle \\\\\n&amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|0, 0\\rangle - |0, 1\\rangle + |1, 0\\rangle - |1, 1\\rangle}{2} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= U_f \\frac{|0, 0\\rangle - |0, 1\\rangle + |1, 0\\rangle - |1, 1\\rangle}{2} \\\\\n&amp;= \\frac{1}{\\sqrt{2}} U_f \\frac{|0, 0\\rangle - |0, 1\\rangle + |1, 0\\rangle - |1, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{1}{\\sqrt{2}} \\Big[ U_f \\frac{|0, 0\\rangle - |0, 1\\rangle}{\\sqrt{2}} +  U_f \\frac{|1, 0\\rangle - |1, 1\\rangle}{\\sqrt{2}} \\Big]\\\\\n&amp;= \\frac{1}{\\sqrt{2}} \\Big[ (-1)^{f(0)} |0\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} + (-1)^{f(1)} |1\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big]\\\\\n&amp;= \\frac{1}{2} \\Big[ (-1)^{f(0)} |0\\rangle \\otimes (|0\\rangle - |1\\rangle) + (-1)^{f(1)} |1\\rangle \\otimes (|0\\rangle - |1\\rangle) \\Big]\\\\\n&amp;= \\frac{1}{2} (-1)^{f(0)} \\Big[ |0\\rangle \\otimes (|0\\rangle - |1\\rangle) + (-1)^{f(1) - f(0)} |1\\rangle \\otimes (|0\\rangle - |1\\rangle) \\Big]\\\\\n&amp;= \\frac{1}{2} (-1)^{f(0)} \\Big[ |0\\rangle \\otimes (|0\\rangle - |1\\rangle) + (-1)^{f(0) \\oplus f(1)} |1\\rangle \\otimes (|0\\rangle - |1\\rangle) \\Big]\\\\\n&amp;= \\frac{1}{2} (-1)^{f(0)} \\Big[ \\big(|0\\rangle + (-1)^{f(0) \\oplus f(1)} |1\\rangle \\big) \\otimes (|0\\rangle - |1\\rangle) \\Big]\\\\\n\\end{align}\\]\n\n<p>Note that if $f(0) \\oplus f(1) = 0$, $f(x)$ is constant; if $f(0) \\oplus f(1) = 1$, $f(x)$ is balanced. This information is encoded in the phase of the first qubit. How could we extract this key information?</p>\n\n<p><br /></p>\n\n<p>We noticed that in the first qubit output $|0\\rangle + (-1)^{f(0) \\oplus f(1)} |1\\rangle$ is either $|0\\rangle + |1\\rangle$ when $f(0) \\oplus f(1) = 0$ or $|0\\rangle - |1\\rangle$ when $f(0) \\oplus f(1) = 1$. Applying a Hadamard operator to it results in $|0\\rangle$ when $f(0) \\oplus f(1) = 0$ or $|1\\rangle$ when $f(0) \\oplus f(1) = 1$.</p>\n\n<p><br /></p>\n\n<p>This means if $f(x)$ is constant, we must observe 0 for the first qubit whereas if $f(x)$ is balanced, we must observe 1 for the first qubit. Therefore, we are able to determine if $f(x)$ is constant or balanced using such quantum circuits.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>Conventionally, we compare algorithms on the same platform, either it is a classical computer or a quantum computer. However, in our case, it is a little bit weird that the classical algorithm is using classical gate whereas the quantum algorithm uses quantum gate, yet we still have to compare the two algorithms. Therefore, in my opinion, such comparison is not fair.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Quantum-Entanglement/">Quantum Entanglement</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch's Algorithm</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 23, 2020.</p>	6829ceb6c83c35d695983978589eb409e44868ad	\N	f	2020-08-14 05:06:00	2020-08-28 20:10:11.141042	0			'-1':548,553,1693,1943,1956,1974,1984,1998,2009,2025,2036,2053,2060,2129 '-50':1128,1182,1728 '0':36,41,66,95,105,204,205,207,211,218,221,223,231,240,248,258,262,383,408,424,436,443,446,448,479,496,508,537,542,552,555,666,670,676,712,789,797,800,821,828,830,833,835,836,849,854,857,860,864,867,874,877,880,885,890,891,894,913,914,917,924,925,930,937,940,947,952,955,958,963,971,975,986,988,1000,1001,1016,1017,1056,1113,1124,1132,1146,1150,1162,1166,1186,1200,1201,1204,1216,1217,1220,1225,1232,1235,1242,1286,1289,1305,1314,1324,1459,1482,1492,1513,1534,1542,1565,1576,1591,1606,1666,1676,1700,1732,1781,1794,1796,1801,1815,1820,1826,1833,1841,1848,1849,1851,1855,1876,1877,1879,1883,1896,1897,1899,1903,1918,1919,1921,1930,1945,1946,1950,1963,1976,1977,1980,1990,2000,2002,2005,2013,2017,2027,2029,2032,2038,2045,2055,2058,2062,2070,2081,2085,2092,2127,2131,2139,2145,2149,2151,2157,2170,2174,2178,2184,2199 '1':37,42,68,98,108,208,210,213,214,226,228,233,236,242,250,259,261,333,337,341,345,388,392,396,400,407,414,418,426,438,455,460,464,468,472,480,486,490,498,510,515,518,520,538,543,550,558,667,715,802,843,869,882,893,908,916,929,944,960,966,977,981,990,992,1003,1004,1019,1020,1134,1147,1149,1163,1165,1188,1203,1219,1227,1237,1290,1292,1293,1306,1308,1309,1316,1321,1326,1331,1375,1448,1456,1461,1485,1497,1500,1507,1521,1528,1536,1545,1559,1568,1581,1598,1614,1668,1674,1702,1734,1785,1799,1802,1809,1823,1830,1835,1843,1852,1854,1857,1858,1871,1880,1882,1885,1886,1890,1900,1902,1905,1906,1911,1922,1929,1932,1933,1939,1952,1958,1959,1965,1971,1982,1986,1987,1992,1996,2007,2011,2014,2019,2023,2034,2041,2042,2047,2051,2065,2066,2072,2084,2095,2096,2134,2135,2141,2148,2153,2160,2161,2177,2180,2187,2188,2213 '2':216,238,245,253,265,335,339,343,347,370,390,394,398,402,416,420,429,441,462,466,470,474,488,492,501,513,569,805,872,888,897,903,920,933,950,969,984,995,1013,1023,1030,1159,1169,1174,1213,1223,1230,1240,1248,1302,1312,1319,1329,1337,1464,1539,1548,1554,1571,1584,1601,1620,1636,1649,1662,1671,1679,1681,1691,1705,1838,1846,1860,1866,1888,1892,1909,1913,1925,1936,1941,1955,1968,1972,1997,2024,2052 '2020':2319 '23':2318 '50':1127,1181,1727 'abl':2221 'achiev':754,778,1437 'addit':567 'advantag':124 'algorithm':3,7,13,149,572,1790,2240,2268,2276,2288,2303 'align':200,267,300,317,328,351,359,379,381,431,433,451,453,503,505,523,547,560,795,807,826,839,841,899,901,997,1011,1025,1157,1171,1211,1245,1300,1334,1454,1466,1490,1503,1505,1550,1552,1651,1689,1707,1792,1805,1807,1862,1864,2076 'allow':1387 'although':1252,1341 'alway':1716 'appli':780,1439,2162 'attempt':760,764,824,1419,1423,1488,1754,1758 'balanc':76,617,1008,1154,1417,1751,2100,2209,2230 'basic':709,787,819,1446 'begin':199,299,327,330,358,380,385,405,411,432,452,457,477,483,504,546,794,825,840,900,1010,1156,1210,1299,1453,1489,1504,1551,1688,1791,1806,1863 'better':131 'big':1914,1937,1942,1969,1973,1994,2001,2021,2028,2049,2056,2057,2068,2074 'binari':566 'bit':2263 'black':26,87,575 'black-box':25,86,574 'blog':139 'bmatrix':331,349,386,404,406,410,412,422,458,476,478,482,484,494 'book':2315 'boolean':529 'bottom':1282,1371 'box':27,88,576 'broken':159 'call':58,71,171 'candid':599 'case':1009,1155,1209,1298,2258 'chanc':1130,1184,1730 'check':734 'circuit':79,119,2234 'classic':78,590,2249,2267,2271 'compar':100,2239,2285 'comparison':2294 'comput':12,2250,2254 'constant':63,615,1208,1297,1415,1749,2089,2195,2228 'constitu':168 'contriv':19 'convent':2237 'correspond':609 'could':122,129,753,1035,1062,1479,1683,2113 'dagger':292,294,302,307,355,361 'defin':1273,1362 'describ':1065,1074 'determin':604,1744,2223 'deutsch':1,5,147,570,1788,2301 'differ':527 'discuss':145 'due':1078,1267,1356 'easi':45 'either':1058,1085,1481,1664,1752,2138,2245 'encod':2104 'end':266,316,348,350,378,403,409,421,430,450,475,481,493,502,522,559,806,838,898,996,1024,1170,1244,1333,1465,1502,1549,1650,1706,1804,1861,2075 'entangl':153,183,277,1033,1081,1177,2300 'equival':114 'evalu':93 'everi':281 'exact':1258,1347 'exampl':186,1105 'express':1038 'extract':2115 'f':29,55,61,65,67,74,89,94,97,104,107,531,549,551,554,557,577,586,593,607,613,619,624,643,648,659,673,678,681,686,691,748,773,814,906,911,923,928,936,943,957,965,974,980,987,991,999,1002,1052,1145,1148,1199,1202,1288,1291,1412,1432,1473,1557,1562,1574,1579,1587,1594,1608,1616,1625,1632,1641,1645,1654,1658,1694,1746,1767,1869,1874,1894,1916,1927,1944,1957,1975,1985,1999,2010,2012,2026,2037,2040,2054,2061,2064,2080,2083,2086,2091,2094,2097,2130,2133,2144,2147,2156,2159,2173,2176,2183,2186,2192,2206,2225 'fact':1060 'fair':2297 'fewer':133,755 'final':2235 'first':759,763,768,823,1047,1087,1120,1138,1192,1401,1712,1721,1773,2110,2124,2202,2216 'follow':190 'four':51,597 'frac':203,217,239,247,257,332,336,340,344,387,391,395,399,413,417,423,435,459,463,467,471,485,489,495,507,799,866,876,889,912,921,934,951,970,985,1015,1161,1215,1224,1234,1304,1313,1323,1458,1533,1540,1563,1572,1585,1602,1621,1640,1653,1665,1673,1699,1832,1840,1847,1875,1889,1895,1910,1917,1928,1938,1949,1962,1970,1995,2022,2050 'function':28,60,73 'gate':584,591,622,2272,2279 'h':329,354,356,360,362,365,366,369,382,434,454,506,796,845,851,859,1055,1455,1511,1517,1527,1780,1784,1811,1813,1817,1819,1825,1829 'hadamard':318,782,1441,2164 'hardmard':320 'help':1382 'hh':442,514 'hold':730 'howev':1376,2255 'immedi':1096 'inform':1742,2102,2118 'input':770,786,811,1429,1445,1470,1723,1764 'introduct':4 'invent':14 'job':601 'june':2317 'key':2117 'know':1097,1115 'kroneck':162,1041 'lei':2308,2311 'let':731 'like':143,588 'littl':2262 'log':2314 'made':766,1425,1760 'mao':2309,2312 'map':32,53,533,630,698,726 'matrix':628 'matter':1395 'mean':2190 'modulo':568 'must':1072,1122,1284,1373,2197,2211 'name':646 'necessarili':729 'normal':818 'note':694,1026,2077 'notic':352,2120 'observ':1084,1099,1108,1117,1131,1185,1279,1368,1398,1709,1731,2198,2212 'one':1005,1151,1205,1294 'oper':136,280,283,319,321,326,783,1442,2165 'opinion':2292 'oplus':556,562,642,658,672,677,685,956,964,1607,1615,2039,2063,2082,2093,2132,2146,2158,2175,2185 'origin':2305 'otherwis':69 'otim':220,225,230,235,246,634,640,651,656,832,846,852,856,862,873,879,884,939,946,954,962,973,979,1231,1241,1320,1330,1496,1510,1516,1520,1526,1532,1590,1597,1605,1613,1624,1630,1639,1698,1798,1812,1818,1822,1828,1839,1948,1961,1979,1989,2004,2016,2031,2044,2069 'output':745,1049,1089,1094,1263,1352,1714,2126 'overlin':1631,1644,1657 'percent':1129,1183,1729 'perhap':751 'phase':1270,1359,2107 'platform':2244 'possibl':52,598 'post':140 'prerequisit':150 'prime':197,255,274 'probabl':127 'problem':20 'product':163,1042 'provid':1740 'psi':193,196,201,254,268,273 'publish':2306 'quantum':11,118,279,282,325,583,621,1080,2233,2253,2275,2278,2299 'qubit':710,769,810,1045,1048,1068,1071,1088,1093,1103,1111,1121,1139,1143,1193,1197,1262,1283,1351,1372,1402,1406,1428,1469,1713,1722,1738,1763,1774,1778,2111,2125,2203,2217 'rangl':194,198,202,206,209,212,215,219,222,224,227,229,232,234,237,241,243,249,251,256,260,263,269,275,305,310,313,315,364,368,372,375,377,384,425,427,437,439,444,447,449,456,497,499,509,511,516,519,521,633,636,639,645,650,653,655,661,675,680,683,688,693,704,707,713,716,719,722,737,740,790,798,801,803,822,829,831,834,837,844,850,855,858,861,865,868,870,875,878,881,883,886,892,895,904,909,915,918,926,931,938,941,945,948,953,959,961,967,972,976,978,982,989,993,1014,1018,1021,1031,1057,1160,1164,1167,1175,1214,1218,1221,1226,1228,1233,1236,1238,1243,1249,1303,1307,1310,1315,1317,1322,1325,1327,1332,1338,1449,1457,1460,1462,1483,1486,1493,1495,1498,1501,1508,1514,1519,1522,1525,1529,1531,1535,1537,1543,1546,1555,1560,1566,1569,1577,1582,1589,1592,1596,1599,1604,1610,1612,1618,1623,1627,1629,1634,1638,1643,1647,1656,1660,1667,1669,1675,1677,1682,1692,1697,1701,1703,1782,1786,1795,1797,1800,1803,1810,1816,1821,1824,1827,1831,1834,1836,1842,1844,1850,1853,1856,1859,1867,1872,1878,1881,1884,1887,1898,1901,1904,1907,1920,1923,1931,1934,1947,1951,1953,1960,1964,1966,1978,1981,1983,1988,1991,1993,2003,2006,2008,2015,2018,2020,2030,2033,2035,2043,2046,2048,2059 'reduc':524 'refer':180,2298 'remark':2236 'repres':580 'respect':1787 'result':2168 'revers':289 'run':84,134,756,1389,1392 'second':809,1092,1110,1142,1196,1405,1418,1422,1427,1468,1487,1737,1777 'see':110 'separ':151,172,271,1251,1340 'set':35,40,536,541 'simplest':10 'simplifi':1686 'singl':1067 'slight':18 'solv':16 'special':324 'specul':47 'sqrt':244,252,264,334,338,342,346,389,393,397,401,415,419,428,440,461,465,469,473,487,491,500,512,804,871,887,896,919,932,949,968,983,994,1022,1168,1222,1229,1239,1311,1318,1328,1463,1538,1547,1570,1583,1600,1619,1635,1648,1661,1670,1678,1704,1837,1845,1891,1908,1912,1924,1935,1940,1954,1967 'state':154,155,165,173,175,184,192,711,788,820,1259,1348,1447 'still':2282 'subsystem':169 'sum':525 'superposit':126,724,742,758,775,792,1434,1451,1768,1770 'suppos':21 'sure':1256,1276,1345,1365,1410 'take':123 'text':564 'therefor':357,2218,2289 'third':1753,1757 'thus':288 'twice':91 'two':191,1044,1070,1261,1350,2287 'u':284,293,295,301,303,306,308,585,612,618,623,647,747,772,813,905,910,922,927,935,942,1051,1431,1472,1556,1561,1573,1578,1586,1593,1766,1868,1873,1893,1915,1926 'unbreak':178 'unitari':278,286,627 'use':581,1066,2231,2270,2277 'uu':291 'valid':701 'valu':102 'variabl':1476 'varphi':304,309,312,314,363,367,371,374,376,827,842,848,902,907,1012,1029,1158,1173,1212,1247,1301,1336,1491,1506,1512,1553,1558,1680,1690,1793,1808,1814,1865,1870 'weird':2264 'wherea':174,1724,2204,2273 'whether':605,1411,1745 'whole':1077 'would':81,142,1264,1353 'x':30,56,62,75,90,532,578,594,608,632,638,644,649,654,660,663,674,679,682,687,692,703,718,736,1413,1494,1499,1518,1524,1530,1541,1544,1564,1567,1575,1580,1588,1595,1603,1609,1611,1617,1622,1626,1628,1633,1637,1642,1646,1655,1659,1695,1696,1747,2087,2098,2193,2207,2226 'xor':565 'y':635,641,652,657,664,669,671,684,706,721,739 'yet':2280	en	Lei Mao
59	Single Page Applications using Rust	{"ver":2,"uid":1,"hash":"SHA1:748d6ef1ed2f5fa2da8662178dbf5398e16b72ec"}	http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24120311"> https://news.ycombinator.com/item?id=24120311 </a>	1df92204d4de24d4394b4e0f9e61cecd6fad7020	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.275672	0			'/item?id=24120311':9 'applic':3 'comment':6 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24120311':7 'page':2 'rust':5 'singl':1 'use':4	zh	rkwz
57	Thank You MDN	{"ver":2,"uid":1,"hash":"SHA1:e923efd757143c2886b908b57f336972a275263a"}	https://www.ilovemdn.org/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24136895"> https://news.ycombinator.com/item?id=24136895 </a>	5ba37988e6acb6ef8ed43d0c7a2a5d6ea065c312	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.273448	0			'/item?id=24136895':7 'comment':4 'mdn':3 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24136895':5 'thank':1	zh	peterbe
52	Kronecker Product In Circuits	{"ver":2,"uid":1,"hash":"SHA1:f18ef6124aff9bf8fae3b1fe51d0fc96d0792491"}	https://leimao.github.io/blog/Kronecker-Product-In-Circuits/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Kronecker product is widely used in circuits, especially those that have parallel logical gates, to manipulate bits.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the mathematics of Kronecker product in circuits.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<h4 id="kronecker-product-mixed-product-property">Kronecker Product Mixed-Product Property</h4>\n\n<p>Let $A \\in \\mathbb{C}^{m \\times n}$, $B \\in \\mathbb{C}^{r \\times s}$, $C \\in \\mathbb{C}^{n \\times p}$, and $D \\in \\mathbb{C}^{s \\times t}$, then</p>\n\n\\[(A \\otimes B)(C \\otimes D) = (AC) \\otimes (BD)\\]\n\n<p>Note that $AC$ and $BD$ have to be valid matrix multiplications.</p>\n\n<p><br /></p>\n\n<p>It is easy to prove using the <a href="https://leimao.github.io/blog/Almost-Commutative-Kronecker-Product/">Kronecker product definition</a>.</p>\n\n\\[\\begin{align}\n(A \\otimes B)(C \\otimes D) &amp;= \n\\begin{bmatrix} \n    A_{0,0}B &amp; A_{0,1}B &amp; \\cdots &amp; A_{0,n-1}B \\\\\n    A_{1,0}B &amp; A_{1,1}B &amp; \\cdots &amp; A_{1,n-1}B \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    A_{m-1,0}B &amp; A_{m-1,1}B &amp; \\cdots &amp; A_{m-1,n-1}B \\\\\n\\end{bmatrix} \n\\begin{bmatrix} \n    C_{0,0}D &amp; C_{0,1}D &amp; \\cdots &amp; C_{0,p-1}D \\\\\n    C_{1,0}D &amp; C_{1,1}D &amp; \\cdots &amp; C_{1,p-1}D \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    C_{n-1,0}D &amp; C_{n-1,1}D &amp; \\cdots &amp; C_{n-1,p-1}D \\\\\n\\end{bmatrix} \n\\nonumber\\\\\n&amp;= \n\\begin{bmatrix} \n    \\big(\\sum_{i=0}^{n-1}A_{0,i}C_{i,0}\\big)BD &amp; \\big(\\sum_{i=0}^{n-1}A_{0,i}C_{i,1}\\big)BD &amp; \\cdots &amp; \\big(\\sum_{i=0}^{n-1}A_{0,i}C_{i,p-1}\\big)BD \\\\\n    \\big(\\sum_{i=0}^{n-1}A_{1,i}C_{i,0}\\big)BD &amp; \\big(\\sum_{i=0}^{n-1}A_{1,i}C_{i,1}\\big)BD &amp; \\cdots &amp; \\big(\\sum_{i=0}^{n-1}A_{1,i}C_{i,p-1}\\big)BD \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    \\big(\\sum_{i=0}^{n-1}A_{m-1,i}C_{i,0}\\big)BD &amp; \\big(\\sum_{i=0}^{n-1}A_{m-1,i}C_{i,1}\\big)BD &amp; \\cdots &amp; \\big(\\sum_{i=0}^{n-1}A_{m-1,i}C_{i,p-1}\\big)BD \\\\\n\\end{bmatrix} \n\\nonumber\\\\\n&amp;= \n(AC) \\otimes (BD) \\\\\n\\end{align}\\]\n\n<h4 id="logical-gates-are-matrices">Logical Gates Are Matrices</h4>\n\n<p>Logical gates could be natually represented by matrices. For example, given any one bit, we could represent it as a unique one-hot state vector of length $2^1 = 2$. More concretely, <code class="language-plaintext highlighter-rouge">0</code> is $| 0 \\rangle = [1, 0]^{\\top}$, <code class="language-plaintext highlighter-rouge">1</code> is $| 1 \\rangle = [0, 1]^{\\top}$. given any two bits, we could represent it as a unique one-hot state vector of length $2^2 = 4$. More concretely, <code class="language-plaintext highlighter-rouge">00</code> is $| 00 \\rangle = [1, 0, 0, 0]^{\\top}$, <code class="language-plaintext highlighter-rouge">01</code> is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$, <code class="language-plaintext highlighter-rouge">10</code> is $| 10 \\rangle = [0, 0, 1, 0]^{\\top}$, <code class="language-plaintext highlighter-rouge">11</code> is $| 11 \\rangle = [0, 0, 0, 1]^{\\top}$. So on and so forth.</p>\n\n<p><br /></p>\n\n<p>A classical <code class="language-plaintext highlighter-rouge">AND</code> gate takes into two bits and generates one bit. Its matrix representation $\\text{AND} \\in \\mathbb{C}^{2^1 \\times 2^2}$, which takes in a state vector of length 4 and generates a state vector of length 2, is</p>\n\n\\[\\begin{align}\n\\text{AND} &amp;=\n\\begin{bmatrix} \n    1 &amp; 1 &amp; 1 &amp; 0 \\\\\n    0 &amp; 0 &amp; 0 &amp; 1 \\\\\n\\end{bmatrix} \n\\end{align}\\]\n\n<p>The expectations of <code class="language-plaintext highlighter-rouge">AND</code> gate are <code class="language-plaintext highlighter-rouge">00 -&gt; AND -&gt; 0</code>, <code class="language-plaintext highlighter-rouge">01 -&gt; AND -&gt; 0</code>, <code class="language-plaintext highlighter-rouge">10 -&gt; AND -&gt; 0</code>, <code class="language-plaintext highlighter-rouge">11 -&gt; AND -&gt; 1</code>. Let’s check one of them, say <code class="language-plaintext highlighter-rouge">01 -&gt; AND -&gt; 0</code>, using matrix multiplication.</p>\n\n\\[\\begin{align}\n\\text{AND} \n| 01 \\rangle \n=\n\\begin{bmatrix} \n    1 &amp; 1 &amp; 1 &amp; 0 \\\\\n    0 &amp; 0 &amp; 0 &amp; 1 \\\\\n\\end{bmatrix} \n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n    0 \\\\\n    0 \\\\\n\\end{bmatrix}  \n= \n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \n= \n| 0 \\rangle \n\\end{align}\\]\n\n<p>The gate input is $| 01 \\rangle = [0, 1, 0, 0]^{\\top}$ (<code class="language-plaintext highlighter-rouge">10</code>) and the gate output is $| 0 \\rangle = [1, 0]^{\\top}$ (<code class="language-plaintext highlighter-rouge">0</code>), which matches our expectation.</p>\n\n<h3 id="parallel-logical-gates-and-kronecker-product">Parallel Logical Gates and Kronecker Product</h3>\n\n<h4 id="parallel-logical-gates">Parallel Logical Gates</h4>\n\n<p>If we have an input of multiple bits, we would like to take the first several consecutive bits for logical gate 1, the second several consecutive bits for logical gate 2, and so on, and we collect all the outputs as the final output. The logical gate 1, 2, etc., are parallel logical gates.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-10-Kronecker-Product-In-Circuits/parallel-operators.png" style="width: 40%; height: 40%" />\n    <figcaption>Parallel Logical Gates</figcaption>\n</figure>\n</div>\n\n<p>For example, we have three bits, <code class="language-plaintext highlighter-rouge">010</code>. We would like to take the first two bits <code class="language-plaintext highlighter-rouge">01</code> for <code class="language-plaintext highlighter-rouge">AND</code> and the third bit for <code class="language-plaintext highlighter-rouge">NOT</code>. The expected output would be <code class="language-plaintext highlighter-rouge">01</code> because <code class="language-plaintext highlighter-rouge">01 -&gt; AND -&gt; 0</code> and <code class="language-plaintext highlighter-rouge">0 -&gt; NOT -&gt; 1</code>.</p>\n\n<p><br /></p>\n\n<p>The three bits, <code class="language-plaintext highlighter-rouge">010</code>, could also be represented by a state vector of length $2^3=8$. Normally, we would need to convert <code class="language-plaintext highlighter-rouge">010</code> to a <code class="language-plaintext highlighter-rouge">uint</code>, which is <code class="language-plaintext highlighter-rouge">2</code> and then we know the state vector is $| 010 \\rangle = [0, 0, 1, 0, 0, 0, 0, 0]^{\\top}$. However, since <code class="language-plaintext highlighter-rouge">01</code> could be thought as one system state and <code class="language-plaintext highlighter-rouge">0</code> could be thought as an another system state, <code class="language-plaintext highlighter-rouge">010</code> would be a merged system state of system state <code class="language-plaintext highlighter-rouge">01</code> and system state <code class="language-plaintext highlighter-rouge">0</code>. Mathematically, if we know the state vector for <code class="language-plaintext highlighter-rouge">01</code> and <code class="language-plaintext highlighter-rouge">0</code>, we could compute the merged system state <code class="language-plaintext highlighter-rouge">010</code> using Kronecker product.</p>\n\n\\[\\begin{align}\n| 010 \\rangle &amp;= | 01 \\rangle \\otimes | 0 \\rangle \\\\\n&amp;= \n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n    0 \\\\\n    0 \\\\\n\\end{bmatrix}  \n\\otimes\n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \\\\\n&amp;= \n\\begin{bmatrix} \n    0 \\\\\n    0 \\\\\n    1 \\\\\n    0 \\\\\n    0 \\\\\n    0 \\\\\n    0 \\\\\n    0 \\\\\n\\end{bmatrix}  \n\\end{align}\\]\n\n<p>Where $\\otimes$ is the Kronecker product. Informally, people call Kronecker product and tensor product interchangably. The state vector for <code class="language-plaintext highlighter-rouge">010</code> calculated from the output product matches our expectation.</p>\n\n<p><br /></p>\n\n<p>We apply the first two bits <code class="language-plaintext highlighter-rouge">01</code> for <code class="language-plaintext highlighter-rouge">AND</code>, as we have caculated above, we have</p>\n\n\\[\\begin{align}\n\\text{AND} \n| 01 \\rangle \n=\n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \n= \n| 0 \\rangle \n\\end{align}\\]\n\n<p>The <code class="language-plaintext highlighter-rouge">NOT</code> gate could be represented using the matrix below</p>\n\n\\[\\begin{align}\n\\text{NOT} &amp;=\n\\begin{bmatrix} \n    0 &amp; 1 \\\\\n    1 &amp; 0 \\\\\n\\end{bmatrix} \n\\end{align}\\]\n\n<p>We apply the last bit <code class="language-plaintext highlighter-rouge">0</code> for <code class="language-plaintext highlighter-rouge">NOT</code>, we have</p>\n\n\\[\\begin{align}\n\\text{NOT} \n| 0 \\rangle \n=\n\\begin{bmatrix} \n    0 &amp; 1 \\\\\n    1 &amp; 0 \\\\\n\\end{bmatrix} \n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \n= \n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n\\end{bmatrix}  \n= \n| 1 \\rangle \n\\end{align}\\]\n\n<p>Because of the way we set up the circuits, <code class="language-plaintext highlighter-rouge">AND</code> and <code class="language-plaintext highlighter-rouge">NOT</code> are parallel logical gates, the output state vector has to be merged into one state vector.</p>\n\n\\[\\begin{align}\n| 0 \\rangle \n\\otimes\n| 1 \\rangle \n=\n\\begin{bmatrix} \n    1 \\\\\n    0 \\\\\n\\end{bmatrix}  \n\\otimes\n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n\\end{bmatrix}  \n= \n\\begin{bmatrix} \n    0 \\\\\n    1 \\\\\n    0 \\\\\n    0 \\\\\n\\end{bmatrix}  \n= \n| 01 \\rangle \n\\end{align}\\]\n\n<p>So running the circuits above is equivalent to, mathematically,</p>\n\n\\[(\\text{AND} |01\\rangle ) \\otimes (\\text{NOT} |0\\rangle )\\]\n\n<p>We happen to find that we could apply the Kronecker product mixed-product property we mentioned in the prerequisites.</p>\n\n\\[\\begin{align}\n(\\text{AND} |01\\rangle ) \\otimes (\\text{NOT} |0\\rangle ) &amp;= (\\text{AND} \\otimes \\text{NOT}) (|01\\rangle  \\otimes |0\\rangle ) \\\\\n&amp;= (\\text{AND} \\otimes \\text{NOT}) |010\\rangle \n\\end{align}\\]\n\n<p>This means that in order to compute the output of this parallel logical gates, we don’t have to compute the outputs for each single logical gate separately and collect the outputs back together. Given the intact input state vector, $|010\\rangle $, we could apply a merged operator of <code class="language-plaintext highlighter-rouge">AND</code> and <code class="language-plaintext highlighter-rouge">NOT</code>, which turns out to be $\\text{AND} \\otimes \\text{NOT}$, and the output could be computed directly using matrix multiplication once.</p>\n\n<h4 id="summary">Summary</h4>\n\n<p>Any two parallel logical gates could be described using a single logical gate that is the Kronecker product of the two.</p>\n\n<p><br /></p>\n\n<p>In general, if we have a circuit consisting of two parallel logical gates, $X$ and $Y$, the input state vector $| a \\rangle$ to $X$, the input state vector $| b \\rangle$ to $Y$, the output state vector $| c \\rangle$ from $X$, the output state vector $| d \\rangle$ from $Y$, the merged input state vector $| ab \\rangle$ or $| ba \\rangle$, and the merged output state vector $| cd \\rangle$ or $| dc \\rangle$, we have the following equations.</p>\n\n\\[\\begin{align}\n| cd \\rangle &amp;= | c \\rangle \\otimes | d \\rangle \\\\\n&amp;= (X | a \\rangle) \\otimes (Y | b \\rangle) \\\\\n&amp;= (X \\otimes Y) (|a\\rangle  \\otimes |b\\rangle ) \\\\\n&amp;= (X \\otimes Y) |ab\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n| dc \\rangle &amp;= | d \\rangle \\otimes | c \\rangle \\\\\n&amp;= (Y | b \\rangle) \\otimes (X | a \\rangle) \\\\\n&amp;= (Y \\otimes X) (|b\\rangle  \\otimes |a\\rangle ) \\\\\n&amp;= (Y \\otimes X) |ba\\rangle \\\\\n\\end{align}\\]\n\n<p>One interesting thing to note is that <a href="https://leimao.github.io/blog/Almost-Commutative-Kronecker-Product/">$X \\otimes Y \\cong Y \\otimes X$</a> and $Y \\otimes X = P (X \\otimes Y) Q$, where $P$ and $Q$ are row and column permutation matrices respectively. We could also have $| ba \\rangle = W | ab \\rangle$, and $| dc \\rangle = V | cd \\rangle$, where $W$ and $V$ are row permutation matrices.</p>\n\n\\[\\begin{align}\n| dc \\rangle &amp;= V | cd \\rangle \\\\\n&amp;= (Y \\otimes X) |ba\\rangle \\\\\n&amp;= P (X \\otimes Y) Q W | ab \\rangle \\\\\n\\end{align}\\]\n\n<p>Permutation matrix is always invertible and its inversion is equivalent to its transpose.</p>\n\n\\[\\begin{align}\n| cd \\rangle &amp;= V^{-1} P (X \\otimes Y) Q W | ab \\rangle \\\\\n\\end{align}\\]\n\n<p>It seems that $V^{-1} P = I$ and $Q W = I$. But I have not thought of a formal proof to this.</p>\n\n<h4 id="simulations">Simulations</h4>\n\n<p>Here I implemented a simple Python script to simulate and verify the parallel logical gates and Kronecker product processes I described above.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>\n<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> \n\n<span class="k">class</span> <span class="nc">Bits</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>\n\n    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bit_string</span><span class="p">):</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">sanity_check</span><span class="p">(</span><span class="n">bit_string</span><span class="p">)</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">bit_string</span> <span class="o">=</span> <span class="n">bit_string</span>\n\n    <span class="k">def</span> <span class="nf">sanity_check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bit_string</span><span class="p">):</span>\n\n        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">bit_string</span><span class="p">:</span>\n            <span class="k">if</span> <span class="n">char</span> <span class="o">!=</span> <span class="s">"0"</span> <span class="ow">and</span> <span class="n">char</span> <span class="o">!=</span> <span class="s">"1"</span><span class="p">:</span>\n                <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"BitString construction uses a string consisting of 0 and 1!"</span><span class="p">)</span>\n\n    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n\n        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_string</span><span class="p">)</span>\n    \n    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bits</span><span class="p">):</span>\n\n        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">bit_string</span> <span class="o">==</span> <span class="n">bits</span><span class="p">.</span><span class="n">bit_string</span>\n\n    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n\n        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">bit_string</span>\n\n    <span class="k">def</span> <span class="nf">to_uint</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n\n        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_string</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>\n\n    <span class="k">def</span> <span class="nf">to_state_vec</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""\n        Return a one-hot state vector for bits\n        """</span>\n        <span class="n">vec</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>\n        <span class="n">vec</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">to_uint</span><span class="p">()]</span> <span class="o">=</span> <span class="mi">1</span>\n\n        <span class="k">return</span> <span class="n">vec</span>\n\n<span class="k">def</span> <span class="nf">state_vec_to_bits</span><span class="p">(</span><span class="n">state_vec</span><span class="p">):</span>\n\n    <span class="n">num_zeros</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="n">num_ones</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="n">state_vec_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">state_vec</span><span class="p">)</span>\n    <span class="n">num_bits</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">state_vec_len</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>\n    <span class="k">if</span> <span class="ow">not</span> <span class="n">num_bits</span><span class="p">.</span><span class="n">is_integer</span><span class="p">():</span>\n        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Invalid state vector length!"</span><span class="p">)</span>\n    <span class="n">num_bits</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">num_bits</span><span class="p">)</span>\n    <span class="n">idx</span> <span class="o">=</span> <span class="bp">None</span>\n    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">element</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">state_vec</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>\n            <span class="n">num_zeros</span> <span class="o">+=</span> <span class="mi">1</span>\n        <span class="k">elif</span> <span class="n">element</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>\n            <span class="n">num_ones</span> <span class="o">+=</span> <span class="mi">1</span>\n            <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"State vector should only container 0 or 1!"</span><span class="p">)</span>\n    <span class="k">if</span> <span class="n">num_ones</span> <span class="o">!=</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">idx</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"State vector should only have one 1!"</span><span class="p">)</span>\n\n    <span class="n">bit_string</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">idx</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="n">num_bits</span><span class="p">)</span>\n\n    <span class="n">bits</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string</span><span class="p">)</span>\n\n    <span class="k">return</span> <span class="n">bits</span>\n\n<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>\n\n    <span class="c1"># Gate operators\n</span>    <span class="n">NOT</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>\n    <span class="n">AND</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>\n\n    <span class="n">bit_string_a</span> <span class="o">=</span> <span class="s">"01"</span>\n    <span class="n">bit_string_b</span> <span class="o">=</span> <span class="s">"0"</span>\n    <span class="n">bit_string_c</span> <span class="o">=</span> <span class="s">"0"</span>\n    <span class="n">bit_string_d</span> <span class="o">=</span> <span class="s">"1"</span>\n\n    <span class="n">bits_a</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_a</span><span class="p">)</span>\n    <span class="n">bits_b</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_b</span><span class="p">)</span>\n    <span class="n">bits_c</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_c</span><span class="p">)</span>\n    <span class="n">bits_d</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_d</span><span class="p">)</span>\n    <span class="n">bits_ab</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_a</span> <span class="o">+</span> <span class="n">bit_string_b</span><span class="p">)</span>\n    <span class="n">bits_ba</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_b</span> <span class="o">+</span> <span class="n">bit_string_a</span><span class="p">)</span>\n    <span class="n">bits_cd</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_c</span> <span class="o">+</span> <span class="n">bit_string_d</span><span class="p">)</span>\n    <span class="n">bits_dc</span> <span class="o">=</span> <span class="n">Bits</span><span class="p">(</span><span class="n">bit_string</span><span class="o">=</span><span class="n">bit_string_d</span> <span class="o">+</span> <span class="n">bit_string_c</span><span class="p">)</span>\n\n    <span class="k">assert</span> <span class="n">bits_a</span> <span class="o">==</span> <span class="n">state_vec_to_bits</span><span class="p">(</span><span class="n">state_vec</span><span class="o">=</span><span class="n">bits_a</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="k">assert</span> <span class="n">bits_b</span> <span class="o">==</span> <span class="n">state_vec_to_bits</span><span class="p">(</span><span class="n">state_vec</span><span class="o">=</span><span class="n">bits_b</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="k">assert</span> <span class="n">bits_c</span> <span class="o">==</span> <span class="n">state_vec_to_bits</span><span class="p">(</span><span class="n">state_vec</span><span class="o">=</span><span class="n">bits_c</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="k">assert</span> <span class="n">bits_d</span> <span class="o">==</span> <span class="n">state_vec_to_bits</span><span class="p">(</span><span class="n">state_vec</span><span class="o">=</span><span class="n">bits_d</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n\n    <span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_a</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">B</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_b</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">C</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_c</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_d</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">AB</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_ab</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">BA</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_ba</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">CD</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_cd</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n    <span class="n">DC</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bits_dc</span><span class="p">.</span><span class="n">to_state_vec</span><span class="p">())</span>\n\n    <span class="c1"># Parallel operations\n</span>    <span class="c1"># A -&gt; AND -&gt; C\n</span>    <span class="c1"># B -&gt; NOT -&gt; D\n</span>    <span class="c1"># We have the following equations\n</span>    <span class="c1"># AND * A = C\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AND</span><span class="p">,</span> <span class="n">A</span><span class="p">),</span> <span class="n">C</span><span class="p">)</span>\n    <span class="c1"># NOT * B = D\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">NOT</span><span class="p">,</span> <span class="n">B</span><span class="p">),</span> <span class="n">D</span><span class="p">)</span>\n    <span class="c1"># A \\otimes B = AB\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">),</span> <span class="n">AB</span><span class="p">)</span>\n    <span class="c1"># B \\otimes A = BA\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">),</span> <span class="n">BA</span><span class="p">)</span>\n    <span class="c1"># C \\otimes D = CD\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">),</span> <span class="n">CD</span><span class="p">)</span>\n    <span class="c1"># D \\otimes C = DC\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">C</span><span class="p">),</span> <span class="n">DC</span><span class="p">)</span>\n    <span class="c1"># (AND \\otimes NOT) * (A \\otimes B) = (C \\otimes D)\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">AND</span><span class="p">,</span> <span class="n">NOT</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)),</span> <span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span>\n    <span class="c1"># (NOT \\otimes AND) * (B \\otimes A) = (D \\otimes C)\n</span>    <span class="k">assert</span> <span class="n">np</span><span class="p">.</span><span class="n">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">NOT</span><span class="p">,</span> <span class="n">AND</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">)),</span> <span class="n">np</span><span class="p">.</span><span class="n">kron</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">C</span><span class="p">))</span>\n\n<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>\n    \n    <span class="n">main</span><span class="p">()</span>\n</code></pre></div></div>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Almost-Commutative-Kronecker-Product/">Almost Commutative Kronecker Product</a></li>\n  <li><a href="https://en.wikipedia.org/wiki/Kronecker_product">Kronecker Product</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker Product In Circuits</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 10, 2020.</p>	9554715afd003f4fe1b723bc742ba403d9dc9a89	\N	f	2020-08-14 05:06:00	2020-08-21 19:10:09.084886	0			'-1':129,143,151,156,162,164,182,196,204,209,215,217,229,243,258,265,273,287,302,309,321,324,336,339,352,355,360,1470,1485 '0':118,119,122,127,133,152,171,172,175,180,186,205,227,231,235,241,245,256,260,271,279,285,300,319,328,334,350,408,410,413,419,450,451,452,458,460,461,467,468,470,476,477,478,538,539,540,541,555,558,561,574,589,590,591,592,598,600,601,607,610,620,622,623,631,634,636,741,743,786,787,789,790,791,792,793,806,829,840,859,863,865,866,873,878,879,881,882,883,884,885,943,946,966,969,979,988,992,995,1001,1006,1044,1052,1058,1064,1066,1067,1090,1121,1131,1561,1574,1623,1642,1645,1685,1705,1747,1750,1756,1757,1758,1759,1768,1772 '00':445,447,553 '01':454,456,556,572,582,618,723,737,739,797,825,838,856,924,938,1070,1085,1116,1128,1764 '010':713,749,769,784,815,848,854,909,1138,1182 '1':123,132,136,137,141,157,176,185,189,190,194,210,249,275,289,293,304,343,404,412,415,417,420,449,459,469,479,507,535,536,537,542,564,586,587,588,593,599,606,621,633,671,697,745,788,864,872,880,942,967,968,993,994,1000,1007,1010,1047,1051,1059,1065,1564,1576,1630,1688,1691,1694,1707,1711,1724,1748,1749,1753,1754,1755,1760,1776 '10':463,465,559,625,2091 '11':472,474,562 '2':403,405,440,441,506,509,510,527,680,698,760,775,1607,1624,1658,1729 '2020':2092 '3':761 '4':442,519 '8':762 'ab':1290,1338,1414,1448,1477,1810,1921,1977,1984 'ac':83,88,366 'align':108,370,530,546,579,613,853,889,935,949,961,973,985,1013,1043,1073,1113,1141,1312,1341,1343,1372,1431,1451,1466,1480 'almost':2067 'also':751,1409 'alway':1455 'anoth':812 'appli':919,975,1099,1186 'assert':1853,1865,1877,1889,1957,1967,1978,1989,2000,2011,2027,2049 'b':54,79,111,120,124,130,134,138,144,153,158,165,1265,1325,1333,1352,1361,1767,1786,1792,1819,1827,1867,1906,1946,1965,1972,1976,1983,1985,1993,2023,2036,2043,2057 'ba':1293,1369,1411,1440,1821,1926,1988,1995 'back':1174 'bd':85,90,237,251,267,281,295,311,330,345,362,368 'begin':107,115,168,222,529,533,578,584,596,604,852,861,870,876,934,940,960,964,984,990,998,1004,1042,1049,1056,1062,1112,1311,1342,1430,1465 'big':224,236,238,250,253,266,268,280,282,294,297,310,316,329,331,344,347,361 'bin':1727 'bit':22,388,425,493,497,657,667,676,712,722,729,748,923,978,1533,1538,1542,1546,1552,1557,1587,1621,1637,1653,1670,1673,1725,1732,1733,1734,1735,1737,1740,1761,1765,1769,1773,1777,1779,1780,1782,1785,1787,1788,1790,1793,1795,1796,1798,1801,1803,1804,1806,1809,1811,1812,1814,1817,1820,1822,1823,1825,1828,1831,1833,1834,1836,1839,1842,1844,1845,1847,1850,1854,1859,1866,1871,1878,1883,1890,1895 'bits.bit':1591 'bits_a.to':1862,1903 'bits_ab.to':1923 'bits_b.to':1874,1908 'bits_ba.to':1928 'bits_c.to':1886,1913 'bits_cd.to':1933 'bits_d.to':1898,1918 'bits_dc.to':1938 'bitstr':1567 'blog':25 'bmatrix':116,167,169,220,223,364,534,544,585,595,597,603,605,609,862,868,871,875,877,887,941,945,965,971,991,997,999,1003,1005,1009,1050,1054,1057,1061,1063,1069 'book':2088 'c':50,57,61,64,72,80,112,170,174,179,184,188,193,202,207,213,233,247,262,277,291,306,326,341,357,505,1273,1315,1349,1771,1794,1800,1838,1852,1879,1911,1945,1956,1963,1996,2004,2009,2016,2024,2038,2048,2061 'cacul':930 'calcul':910 'call':898 'cd':1301,1313,1420,1435,1467,1832,1931,1999,2006 'cdot':125,139,159,178,192,212,252,296,346 'char':1555,1560,1563 'check':567,1541,1550 'circuit':4,12,38,1022,1077,1243,2076 'class':1532 'classic':487 'collect':686,1171 'column':1403 'commut':2068 'comput':843,1148,1161,1209 'concret':407,444 'cong':1383 'consecut':666,675 'consist':1244,1572 'construct':1568 'contain':1704 'convert':768 'could':377,390,427,750,798,807,842,953,1098,1185,1207,1221,1408 'd':69,82,114,173,177,183,187,191,197,206,211,218,1281,1318,1346,1775,1802,1808,1841,1849,1891,1916,1948,1966,1973,1998,2005,2007,2015,2026,2039,2046,2060 'dc':1304,1344,1417,1432,1843,1936,2010,2017 'ddot':147,200,314 'def':1535,1548,1577,1584,1593,1599,1608,1633,1741 'definit':106 'describ':1223,1524 'direct':1210 'discuss':31 'easi':99 'element':1678,1684,1690 'elif':1689 'els':1697 'end':166,219,363,369,543,545,594,602,608,612,867,874,886,888,944,948,970,972,996,1002,1008,1012,1053,1060,1068,1072,1140,1340,1371,1450,1479 'enumer':1680 'eq':1585 'equal':1959,1969,1980,1991,2002,2013,2029,2051 'equat':1310,1953 'equival':1080,1461 'especi':13 'etc':699 'exampl':384,708 'except':1566,1664,1699,1717 'expect':548,640,733,917 'final':692 'find':1095 'first':664,720,921 'follow':1309,1952 'formal':1499 'forth':485 'gate':19,372,376,489,551,615,628,643,649,670,679,696,703,706,952,1029,1155,1168,1220,1228,1249,1518,1743 'general':1238 'generat':495,521 'given':385,422,1176 'happen':1093 'hot':398,435,1617 'howev':795 'idx':1674,1695,1713,1728 'implement':1506 'import':1526,1528 'inform':896 'init':1536 'input':616,654,1179,1254,1262,1287 'int':1604,1671 'intact':1178 'integ':1662 'interchang':904 'interest':1374 'introduct':5 'invalid':1665 'invers':1459 'invert':1456 'june':2090 'know':779,833 'kroneck':1,6,35,40,104,645,850,894,899,1101,1232,1520,2069,2071,2073 'last':977 'lei':2081,2084 'len':1578,1581,1625,1648,1649,1657 'length':402,439,518,526,759,1668 'let':46,565 'like':29,660,716 'log':2087 'logic':18,371,375,642,648,669,678,695,702,705,1028,1154,1167,1219,1227,1248,1517 'm':51,150,155,161,323,338,354 'main':1742,2064,2065 'manipul':21 'mao':2082,2085 'match':638,915 'math':1527 'math.log':1654 'mathbb':49,56,63,71,504 'mathemat':33,830,1082 'matric':374,382,1405,1429 'matrix':95,499,576,958,1212,1453 'mean':1143 'mention':1108 'merg':819,845,1037,1188,1286,1297 'mix':43,1104 'mixed-product':42,1103 'multipl':96,577,656,1213 'n':53,65,128,142,163,203,208,214,228,242,257,272,286,301,320,335,351 'name':2063 'natual':379 'need':766 'none':1675,1715 'nonumb':221,365 'normal':763 'note':86,1377 'np':1531 'np.array':1746,1752,1902,1907,1912,1917,1922,1927,1932,1937,1958,1968,1979,1990,2001,2012,2028,2050 'np.dot':1960,1970,2030,2052 'np.kron':1981,1992,2003,2014,2031,2034,2037,2053,2056,2059 'num':1640,1643,1652,1669,1672,1686,1692,1709,1731 'num_bits.is':1661 'numpi':1529 'object':1534 'one':387,397,434,496,568,802,1039,1373,1616,1644,1693,1710,1723 'one-hot':396,433,1615 'oper':1189,1744,1942 'order':1146 'origin':2078 'otim':78,81,84,110,113,367,858,869,891,1046,1055,1087,1118,1125,1130,1135,1201,1317,1323,1328,1332,1336,1348,1354,1359,1363,1367,1381,1385,1389,1393,1438,1444,1473,1975,1986,1997,2008,2019,2022,2025,2041,2044,2047 'output':629,689,693,734,913,1031,1150,1163,1173,1206,1270,1278,1298 'p':67,181,195,216,264,308,359,1391,1397,1442,1471,1486 'parallel':17,641,647,701,704,1027,1153,1218,1247,1516,1941 'peopl':897 'permut':1404,1428,1452 'post':26 'prerequisit':39,1111 'process':1522 'product':2,7,36,41,44,105,646,851,895,900,903,914,1102,1105,1233,1521,2070,2072,2074 'proof':1500 'properti':45,1106 'prove':101 'publish':2079 'python':1509 'q':1395,1399,1446,1475,1489 'r':58 'rais':1565,1663,1698,1716 'rangl':411,418,448,457,466,475,583,611,619,632,785,855,857,860,939,947,989,1011,1045,1048,1071,1086,1091,1117,1122,1129,1132,1139,1183,1258,1266,1274,1282,1291,1294,1302,1305,1314,1316,1319,1322,1326,1331,1334,1339,1345,1347,1350,1353,1357,1362,1365,1370,1412,1415,1418,1421,1433,1436,1441,1449,1468,1478 'refer':2066 'repres':380,391,428,753,955 'represent':500 'respect':1406 'return':1580,1588,1596,1603,1613,1631,1739 'row':1401,1427 'run':1075 'saniti':1549 'say':571 'script':1510 'second':673 'seem':1482 'self':1537,1551,1579,1586,1595,1602,1612,1626 'self.bit':1544,1582,1589,1597,1605 'self.sanity':1540 'self.to':1628 'separ':1169 'set':1019 'sever':665,674 'simpl':1508 'simul':1503,1512 'sinc':796 'singl':1166,1226 'state':399,436,515,523,756,781,804,814,821,824,828,835,847,906,1032,1040,1180,1255,1263,1271,1279,1288,1299,1610,1618,1634,1638,1646,1650,1655,1666,1681,1700,1718,1856,1860,1863,1868,1872,1875,1880,1884,1887,1892,1896,1899,1904,1909,1914,1919,1924,1929,1934,1939 'str':1594 'string':1539,1543,1545,1547,1553,1558,1571,1583,1590,1592,1598,1606,1726,1736,1738,1762,1766,1770,1774,1781,1783,1789,1791,1797,1799,1805,1807,1813,1815,1818,1824,1826,1829,1835,1837,1840,1846,1848,1851 'sum':225,239,254,269,283,298,317,332,348 'summari':1215 'system':803,813,820,823,827,846 'take':490,512,662,718 'tensor':902 'text':501,531,580,936,962,986,1083,1088,1114,1119,1123,1126,1133,1136,1199,1202 'thing':1375 'third':728 'thought':800,809,1496 'three':711,747 'time':52,59,66,74,508 'togeth':1175 'top':414,421,453,462,471,480,624,635,794 'transpos':1464 'turn':1195 'two':424,492,721,922,1217,1236,1246 'uint':772,1601,1629 'uniqu':395,432 'use':10,102,575,849,956,1211,1224,1569 'v':1419,1425,1434,1469,1484 'valid':94 'vdot':145,146,148,198,199,201,312,313,315 'vec':1611,1622,1627,1632,1635,1639,1647,1651,1656,1682,1857,1861,1864,1869,1873,1876,1881,1885,1888,1893,1897,1900,1905,1910,1915,1920,1925,1930,1935,1940 'vector':400,437,516,524,757,782,836,907,1033,1041,1181,1256,1264,1272,1280,1289,1300,1619,1667,1701,1719 'verifi':1514 'w':1413,1423,1447,1476,1490 'way':1017 'wide':9 'would':28,659,715,735,765,816 'x':1250,1260,1276,1320,1327,1335,1355,1360,1368,1380,1386,1390,1392,1439,1443,1472 'y':1252,1268,1284,1324,1329,1337,1351,1358,1366,1382,1384,1388,1394,1437,1445,1474 'zero':1641,1687 'zfill':1730	en	Lei Mao
51	Quantum Bit and Bloch Sphere	{"ver":2,"uid":1,"hash":"SHA1:ccc99e0b6da9ae97a4629ef76cc5c4faa4def2e0"}	https://leimao.github.io/blog/Qubit-Bloch-Sphere/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>A quantum bit or a qubit is a unit of information describing a two-dimensional quantum system. It is also a key basic unit to the quantum computer. Usually it could be visualized using a Bloch sphere.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to derive the connections between qubit and Bloch sphere.</p>\n\n<h3 id="classical-bit">Classical Bit</h3>\n\n<p>A classical bit is a unit of information describing a two-dimensional classical system. A classical bit could only be in one state, either $| 0 \\rangle$ or $| 1 \\rangle$. $| 0 \\rangle$ and $| 1 \\rangle$ are orthogonal basis. Usually $| 0 \\rangle = [1, 0]^{\\top}$ and $| 1 \\rangle = [0, 1]^{\\top}$.</p>\n\n<h3 id="quantum-bit-qubit">Quantum Bit (Qubit)</h3>\n\n<p>A quantum bit or a qubit is a unit of information describing a two-dimensional quantum system. A qubit is a superposition of two basic states, $| 0 \\rangle$ and $| 1 \\rangle$.</p>\n\n<p><br /></p>\n\n<p>A generic (normalized) qubit is of the form</p>\n\n\\[\\begin{align}\n| \\psi \\rangle &amp;= c_0 | 0 \\rangle + c_1 | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>where $c_0$ and $c_1$ are complex numbers, and $|c_0|^2 + |c_1|^2 = 1$. After taking the measurement for $| \\psi \\rangle$, the system would be collapsed to $| 0 \\rangle$ with probability $|c_0|^2$ or $| 1 \\rangle$ with probability $|c_1|^2$.</p>\n\n<p><br /></p>\n\n<p>A complex number could be described using <a href="https://leimao.github.io/blog/Complex-Number-Representations/">exponential form</a>.</p>\n\n\\[c_0 = \\rho_0 e^{i\\theta_0} = \\rho_0 (\\cos \\theta_0 + i \\sin \\theta_0) \\\\\nc_1 = \\rho_1 e^{i\\theta_1} = \\rho_1 (\\cos \\theta_1 + i \\sin \\theta_1) \\\\\\]\n\n<p>Where $\\rho_0$ and $\\rho_1$ are real numbers. Therefore,</p>\n\n\\[\\begin{align}\n|c_0|^2 + |c_1|^2 &amp;= |\\rho_0 e^{i\\theta_0}|^2 + |\\rho_1 e^{i\\theta_1}|^2 \\\\\n&amp;= |\\rho_0|^2 |e^{i\\theta_0}|^2 + |\\rho_1|^2 |e^{i\\theta_1}|^2 \\\\\n&amp;= |\\rho_0|^2 |\\cos \\theta_0 + i \\sin \\theta_0|^2 + |\\rho_1|^2 |\\cos \\theta_1 + i \\sin \\theta_1|^2 \\\\\n&amp;= |\\rho_0|^2 + |\\rho_1|^2 \\\\\n&amp;= 1 \\\\\n\\end{align}\\]\n\n<p>We could rewrite $\\rho_0$ and $\\rho_1$ using a new parameter $\\frac{\\theta}{2}$. We would see why we used $\\frac{\\theta}{2}$ instead of $\\theta$ shortly.</p>\n\n\\[\\rho_0 = \\cos \\frac{\\theta}{2} \\\\\n\\rho_1 = \\sin \\frac{\\theta}{2} \\\\\\]\n\n<p>We multiple a complex number $e^{-i\\theta_0}$ to $| \\psi \\rangle$.</p>\n\n\\[\\begin{align}\ne^{-i\\theta_0} | \\psi \\rangle &amp;= e^{-i\\theta_0} c_0 | 0 \\rangle + e^{-i\\theta_0} c_1 | 1 \\rangle \\\\\n&amp;= e^{-i\\theta_0} \\rho_0 e^{i\\theta_0} | 0 \\rangle + e^{-i\\theta_0} \\rho_1 e^{i\\theta_1} | 1 \\rangle \\\\\n&amp;= \\rho_0 | 0 \\rangle + \\rho_1 e^{i(\\theta_1 - \\theta_0)} | 1 \\rangle \\\\\n&amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i(\\theta_1 - \\theta_0)} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>We define $\\varphi = \\theta_1 - \\theta_0$, we have</p>\n\n\\[\\begin{align}\ne^{-i\\theta_0} | \\psi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>As we have discussed early in <a href="https://leimao.github.io/blog/Quantum-System-States/">quantum system states</a>, quantum system state $| \\psi \\rangle$ and $c | \\psi \\rangle$, where $c$ is any non-zero complex number, represent the same quantum system state. Since $e^{-i\\theta_0}$ is a non-zero complex number, $| \\psi \\rangle$ and $e^{-i\\theta_0} | \\psi \\rangle$ represent the same quantum system state. So we have</p>\n\n\\[\\begin{align}\n| \\psi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>This means that, with two parameters $\\theta$ and $\\varphi$, we could determine a qubit state.</p>\n\n<p><br /></p>\n\n<p>The next question is what is the minimum range of $\\theta$ and $\\varphi$ so that all the possible qubit states, $| \\psi \\rangle \\in \\mathbb{C}^2$s, are included? After taking the measurement of the qubit, the probability of observing $| 0 \\rangle$ is $\\cos^2 \\frac{\\theta}{2}$ and the probability of observing $| 1 \\rangle$ is $\\sin^2 \\frac{\\theta}{2}$. For different $\\theta$s, if $\\cos^2 \\frac{\\theta}{2}$s are the same, the qubit states, $| \\psi \\rangle$s, are also the same. Apparently, $0 \\leq \\frac{\\theta}{2} \\leq \\frac{\\pi}{2}$, i.e., $0 \\leq \\theta \\leq \\pi$. If $\\theta$ is out of this range, there is always a way to convert the $\\theta$ into the range of $[0, \\pi]$ while keeping $\\cos^2 \\frac{\\theta}{2}$ the same. For $\\varphi$, there is not too much to say, $0 \\leq \\varphi &lt; 2\\pi$.</p>\n\n<p><br /></p>\n\n<p>To summarize, a qubit could be described using two independent variables.</p>\n\n\\[\\begin{align}\n| \\psi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>Where $\\theta \\in [0, \\pi]$ and $\\varphi \\in [0, 2\\pi)$.</p>\n\n<h3 id="bloch-sphere">Bloch Sphere</h3>\n\n<p>In quantum mechanics and computing, the Bloch sphere is a geometrical representation of the pure state space of a two-level quantum mechanical system (qubit), named after the physicist Felix Bloch.</p>\n\n<p><br /></p>\n\n<p>Given the two-variable qubit formulation we derived above, it could perfectly fit into the Bloch sphere.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-14-Qubit-Bloch-Sphere/Bloch_sphere.svg.png" style="width: 70%; height: 70%" />\n    <figcaption>Bloch Sphere</figcaption>\n</figure>\n</div>\n\n<p>The north and south poles of the Bloch sphere are typically chosen to correspond to the standard basis vectors $ |0\\rangle $ and $ |1\\rangle $, respectively. Any coordinate, which could be uniquely described using $\\theta$ and $\\varphi$, on the sphere, represents a unique qubit.</p>\n\n<p><br /></p>\n\n<p>It is also non-trivial to see that all the qubits on the equator, where $\\theta = \\frac{\\pi}{2}$, have equal probability of collapsing to $ |0\\rangle $ and $ |1\\rangle $, because $p(|0\\rangle) = \\cos^2 \\frac{\\pi}{4} = \\frac{1}{2}$ and $p(|1\\rangle) = \\sin^2 \\frac{\\pi}{4} = \\frac{1}{2}$.</p>\n\n<p><br /></p>\n\n<p>In addition, if the qubit is more closer to the north pole, there is larger chance to collapse to $ |0\\rangle $ after taking the measurement. Similarly, if the qubit is more closer to the south pole, there is larger chance to collapse to $ |1\\rangle $ after taking the measurement.</p>\n\n<p><br /></p>\n\n<p>Moreover, an arbitrary pair of orthogonal qubits is mapped to antipodal (opposite) points of the Bloch sphere. This is because, any antipodal qubits have the following representations.</p>\n\n\\[\\begin{align}\n| \\psi \\rangle &amp;= \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle \\\\\n| \\psi^{\\prime} \\rangle &amp;= \\cos \\frac{\\pi - \\theta}{2} | 0 \\rangle + e^{i(\\varphi + \\pi)} \\sin \\frac{\\pi - \\theta}{2} | 1 \\rangle \\\\\n\\end{align}\\]\n\n<p>We would like to show that $\\langle \\psi , \\psi^{\\prime} \\rangle = 0$ so that $| \\psi \\rangle $ and $| \\psi^{\\prime} \\rangle$ are orthogonal.</p>\n\n\\[\\begin{align}\n\\langle \\psi , \\psi^{\\prime} \\rangle &amp;= \\langle \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle, \\cos \\frac{\\pi - \\theta}{2} | 0 \\rangle + e^{i(\\varphi + \\pi)} \\sin \\frac{\\pi - \\theta}{2} | 1 \\rangle \\rangle \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\overline{\\cos \\frac{\\pi - \\theta}{2}} \\langle | 0 \\rangle, | 0 \\rangle \\rangle + \\cos \\frac{\\theta}{2} \\overline{e^{i(\\varphi + \\pi)} \\sin \\frac{\\pi - \\theta}{2}} \\langle | 0 \\rangle, | 1 \\rangle \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} \\overline{\\cos \\frac{\\pi - \\theta}{2}} \\langle | 1 \\rangle, | 0 \\rangle \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} \\overline{e^{i(\\varphi + \\pi)} \\sin \\frac{\\pi - \\theta}{2}} \\langle | 1 \\rangle, | 1 \\rangle \\rangle \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\overline{\\cos \\frac{\\pi - \\theta}{2}} + e^{i\\varphi} \\sin \\frac{\\theta}{2} \\overline{e^{i(\\varphi + \\pi)} \\sin \\frac{\\pi - \\theta}{2}} \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\cos \\frac{\\pi - \\theta}{2} + e^{i\\varphi} \\sin \\frac{\\theta}{2} \\overline{e^{i(\\varphi + \\pi)}} \\overline{\\sin \\frac{\\pi - \\theta}{2}} \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\cos \\frac{\\pi - \\theta}{2} + e^{i\\varphi} \\sin \\frac{\\theta}{2} e^{i(-\\varphi - \\pi)} \\sin \\frac{\\pi - \\theta}{2} \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\cos \\frac{\\pi - \\theta}{2} + e^{i(-\\pi)} \\sin \\frac{\\theta}{2} \\sin \\frac{\\pi - \\theta}{2} \\\\\n&amp;= \\cos \\frac{\\theta}{2} \\cos \\frac{\\pi - \\theta}{2} + \\sin \\frac{\\theta}{2} \\sin \\frac{\\pi - \\theta}{2} \\\\\n&amp;= \\cos (\\frac{\\theta}{2} + \\frac{\\pi - \\theta}{2}) \\\\\n&amp;= \\cos \\frac{\\pi}{2} \\\\\n&amp;= 0 \\\\\n\\end{align}\\]\n\n<p>This concludes the proof.</p>\n\n<p><br /></p>\n\n<p>Last but not least, to answer why we had used $\\frac{\\theta}{2}$ instead of $\\theta$ in the qubit representation, it is because we want to make the qubit representation compatible with the Bloch sphere. If using $\\frac{\\theta}{2}$, $\\theta \\in [0, \\pi]$ in the Bloch sphere matches $\\theta \\in [0, \\pi]$ in the qubit representation.</p>\n\n<h3 id="manipulate-qubit-on-bloch-sphere">Manipulate Qubit on Bloch Sphere</h3>\n\n<p>As we have partially shown in <a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">one of my previous posts</a>, all the classical logical gates could be considered as matrices, and all the classical bit manipulations are matrix multiplications. This also applies to quantum logical gates and qubits. Actually, all the quantum logical gates are unitary matrices. We would take this fact for now and I would probably explain this in my future blog posts.</p>\n\n<p><br /></p>\n\n<p>Matrix $U$ is unitary if and only if</p>\n\n\\[U^{\\dagger}U = UU^{\\dagger} = I\\]\n\n<p>Unitary matrix preserves inner products. If $U$ is unitary, then for any $v, v^{\\prime} \\in \\mathbb{C}^{n}$, we have $\\langle Uv, Uv^{\\prime} \\rangle = \\langle v, v^{\\prime} \\rangle$.</p>\n\n<p><br /></p>\n\n<p>This could be easily proved by using the <a href="https://leimao.github.io/blog/Inner-Product/">inner product properties</a>.</p>\n\n\\[\\begin{align}\n\\langle Uv, Uv^{\\prime} \\rangle &amp;= (Uv^{\\prime})^{\\dagger} (Uv) \\\\\n&amp;= v^{\\prime\\dagger} U^{\\dagger} Uv \\\\\n&amp;= v^{\\prime\\dagger} (U^{\\dagger} U) v \\\\\n&amp;= v^{\\prime\\dagger} I v \\\\\n&amp;= v^{\\prime\\dagger} v \\\\\n&amp;= \\langle v, v^{\\prime} \\rangle \\\\\n\\end{align}\\]\n\n<p>This means that unitary matrix $U$ also preserves the norm of any vector $v \\in \\mathbb{C}^{n}$.</p>\n\n\\[\\begin{align}\n|Uv|^2 &amp;= \\langle Uv, Uv \\rangle \\\\\n&amp;= \\langle v, v \\rangle \\\\\n&amp;= |v|^2 \\\\\n\\end{align}\\]\n\n<p>Suppose we have a qubit $| \\psi \\rangle$ and unitary matrix $U$. Because $| \\psi | = 1$, so $| U\\psi | = 1$. In addition, given the orthogonal basis $|0\\rangle$ and $|1\\rangle$, because $\\langle |0\\rangle, |1\\rangle \\rangle = 1$, so $ \\langle U|0\\rangle, U |1\\rangle \\rangle = 1$. This means that $U|0\\rangle$ and $U|1\\rangle$ are a new pair of orthogonal basis.</p>\n\n<p><br /></p>\n\n<p>On the Bloch sphere, applying a unitary matrix $U$ to qubit $| \\psi \\rangle$ is equivalent to moving the coordinate of the qubit on the Block sphere, since unitary matrix preserves the norm of vector. Apply a unitary matrix $U$ to both $|0\\rangle$ and $|1\\rangle$ is equivalent to rotate the north and south poles, i.e. the coordinate system, accordingly.</p>\n\n<p><br /></p>\n\n<p>If we look into $| U \\psi \\rangle$ more closely.</p>\n\n\\[\\begin{align}\n| U \\psi \\rangle &amp;= U \\Big( \\cos \\frac{\\theta}{2} | 0 \\rangle + e^{i\\varphi} \\sin \\frac{\\theta}{2} | 1 \\rangle \\Big) \\\\\n&amp;= \\cos \\frac{\\theta}{2} (U | 0 \\rangle) + e^{i\\varphi} \\sin \\frac{\\theta}{2} (U | 1 \\rangle) \\\\\n\\end{align}\\]\n\n<p>Since $U|0\\rangle$ and $U|1\\rangle$ are also orthogonal basis, manipulating qubit is also equivalent to manipulating the entire coordinate system. The coordinates of $| U \\psi \\rangle$ in the new coordinate system ($U|0\\rangle$, $U|1\\rangle$) is the same to the coordinates of $| \\psi \\rangle$ in the old coordinate system ($|0\\rangle$, $|1\\rangle$).</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Complex-Number-Representations/">Complex Number Representations</a></li>\n  <li><a href="https://leimao.github.io/blog/Quantum-System-States/">Quantum System States</a></li>\n  <li><a href="https://en.wikipedia.org/wiki/Bloch_sphere">Bloch Sphere - Wikipedia</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Qubit-Bloch-Sphere/">Quantum Bit and Bloch Sphere</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 14, 2020.</p>	a447ac8e7a1d045d15a8892c9fa9b0e489d97ec2	\N	f	2020-08-14 05:06:00	2020-08-22 13:10:08.453992	0			'0':88,93,102,105,110,143,161,162,172,181,200,205,225,227,231,233,236,240,260,271,277,281,291,296,307,311,315,329,341,366,385,394,400,402,403,408,416,418,422,423,428,438,439,448,455,462,477,485,492,542,556,576,644,690,700,725,745,769,785,790,866,916,923,964,1029,1048,1074,1097,1113,1138,1140,1158,1179,1335,1384,1393,1624,1631,1640,1651,1705,1744,1761,1777,1810,1829 '1':91,96,104,108,111,146,165,166,175,184,186,208,213,242,244,248,250,253,257,263,274,284,288,299,304,318,322,326,332,334,344,372,410,411,430,434,435,442,446,449,460,467,475,501,585,657,778,869,919,931,935,943,988,1038,1059,1106,1124,1160,1177,1200,1202,1613,1617,1627,1633,1636,1643,1646,1655,1708,1753,1771,1781,1813,1831 '14':1862 '2':182,185,206,214,272,275,282,289,292,297,300,305,308,316,319,327,330,333,351,360,370,376,454,466,491,500,575,584,629,648,651,661,664,671,674,694,698,730,733,748,768,777,791,909,926,932,938,944,1028,1037,1047,1058,1096,1105,1112,1123,1130,1136,1146,1156,1169,1175,1188,1198,1208,1214,1221,1231,1235,1240,1247,1258,1262,1267,1274,1283,1287,1292,1299,1304,1308,1313,1317,1322,1326,1330,1334,1354,1381,1587,1597,1743,1752,1759,1769 '2020':1863 '4':929,941 'accord':1723 'actual':1443 'addit':946,1619 'align':157,169,269,336,390,470,481,504,569,588,762,781,1022,1062,1086,1337,1527,1565,1585,1599,1734,1774 'also':27,686,892,1435,1572,1784,1790 'alway':714 'answer':1347 'antipod':1004,1015 'appar':689 'appli':1436,1668,1698 'arbitrari':996 'basi':100,864,1623,1663,1786 'basic':30,141 'begin':156,268,389,480,568,761,1021,1085,1526,1584,1733 'big':1739,1755 'bit':2,9,62,65,80,114,118,1429,1844 'bloch':4,43,59,793,801,826,843,845,854,1009,1375,1388,1402,1666,1840,1846 'block':1688 'blog':47,1468 'book':1859 'c':160,164,171,174,180,183,204,212,224,241,270,273,401,409,520,524,628,1501,1582 'chanc':960,984 'chosen':858 'classic':61,64,76,79,1417,1428 'close':1732 'closer':952,976 'collaps':198,914,962,986 'compat':1372 'complex':177,216,380,530,548,1834 'comput':35,799 'conclud':1339 'connect':55 'consid':1422 'convert':718 'coordin':873,1682,1721,1796,1799,1807,1820,1827 'correspond':860 'cos':234,251,309,320,367,451,488,572,647,670,729,765,925,1025,1043,1093,1108,1127,1132,1143,1171,1205,1210,1232,1236,1259,1263,1284,1288,1305,1309,1323,1331,1740,1756 'could':38,81,218,338,599,754,838,875,1420,1516 'dagger':1479,1482,1535,1539,1541,1545,1547,1552,1557 'defin':472 'deriv':53,835 'describ':18,71,127,220,756,878 'determin':600 'differ':666 'dimension':22,75,131 'discuss':508 'e':228,245,278,285,293,301,382,391,397,405,413,419,425,431,443,457,482,494,539,553,578,771,1031,1050,1099,1115,1148,1163,1182,1190,1215,1223,1241,1249,1268,1275,1293,1746,1763 'earli':509 'easili':1518 'either':87 'end':168,335,469,503,587,780,1061,1336,1564,1598,1773 'entir':1795 'equal':911 'equat':904 'equival':1678,1711,1791 'explain':1463 'exponenti':222 'fact':1456 'felix':825 'fit':840 'follow':1019 'form':155,223 'formul':833 'frac':349,358,368,374,452,464,489,498,573,582,649,662,672,692,696,731,766,775,907,927,930,939,942,1026,1035,1044,1055,1094,1103,1109,1120,1128,1133,1144,1153,1167,1172,1186,1195,1206,1211,1219,1228,1233,1237,1245,1255,1260,1264,1272,1280,1285,1289,1297,1301,1306,1310,1315,1319,1324,1327,1332,1352,1379,1741,1750,1757,1767 'futur':1467 'gate':1419,1440,1448 'generic':149 'geometr':805 'given':827,1620 'i.e':699,1719 'includ':632 'independ':759 'inform':17,70,126 'inner':1487,1523 'instead':361,1355 'introduct':6 'june':1861 'keep':728 'key':29 'langl':1069,1087,1092,1137,1157,1176,1199,1505,1510,1528,1559,1588,1592,1630,1638 'larger':959,983 'last':1342 'least':1345 'lei':1852,1855 'leq':691,695,701,703,746 'level':816 'like':51,1065 'log':1858 'logic':1418,1439,1447 'look':1726 'make':1368 'manipul':1399,1430,1787,1793 'mao':1853,1856 'map':1002 'match':1390 'mathbb':627,1500,1581 'matric':1424,1451 'matrix':1432,1470,1485,1570,1609,1671,1692,1701 'mean':590,1567,1648 'measur':190,636,969,993 'mechan':797,818 'minimum':611 'moreov':994 'move':1680 'much':742 'multipl':378,1433 'n':1502,1583 'name':821 'new':347,1659,1806 'next':605 'non':528,546,894 'non-trivi':893 'non-zero':527,545 'norm':1575,1695 'normal':150 'north':848,955,1715 'number':178,217,266,381,531,549,1835 'observ':643,656 'old':1826 'one':85,1410 'opposit':1005 'origin':1849 'orthogon':99,999,1084,1622,1662,1785 'overlin':1131,1147,1170,1189,1209,1222,1248,1253 'p':922,934 'pair':997,1660 'paramet':348,594 'partial':1407 'perfect':839 'physicist':824 'pi':697,704,726,749,786,792,908,928,940,1045,1053,1056,1110,1118,1121,1134,1151,1154,1173,1193,1196,1212,1226,1229,1238,1252,1256,1265,1278,1281,1290,1295,1302,1311,1320,1328,1333,1385,1394 'point':1006 'pole':851,956,980,1718 'possibl':621 'post':48,1414,1469 'preserv':1486,1573,1693 'previous':1413 'prime':1041,1072,1081,1090,1498,1508,1513,1531,1534,1538,1544,1551,1556,1562 'probabl':203,211,641,654,912,1462 'product':1488,1524 'proof':1341 'properti':1525 'prove':1519 'psi':158,192,387,395,486,517,521,550,557,570,624,682,763,1023,1040,1070,1071,1077,1080,1088,1089,1605,1612,1616,1675,1729,1736,1802,1822 'publish':1850 'pure':809 'quantum':1,8,23,34,113,117,132,511,514,535,562,796,817,1438,1446,1837,1843 'qubit':12,57,115,121,135,151,602,622,639,680,753,820,832,889,901,949,973,1000,1016,1360,1370,1397,1400,1442,1604,1674,1685,1788 'question':606 'rang':612,711,723 'rangl':89,92,94,97,103,109,144,147,159,163,167,193,201,209,388,396,404,412,424,436,440,450,456,468,487,493,502,518,522,551,558,571,577,586,625,645,658,683,764,770,779,867,870,917,920,924,936,965,989,1024,1030,1039,1042,1049,1060,1073,1078,1082,1091,1098,1107,1114,1125,1126,1139,1141,1142,1159,1161,1162,1178,1180,1181,1201,1203,1204,1509,1514,1532,1563,1591,1595,1606,1625,1628,1632,1634,1635,1641,1644,1645,1652,1656,1676,1706,1709,1730,1737,1745,1754,1762,1772,1778,1782,1803,1811,1814,1823,1830,1832 'real':265 'refer':1833 'repres':532,559,886 'represent':806,1020,1361,1371,1398,1836 'respect':871 'rewrit':339 'rho':226,232,243,249,259,262,276,283,290,298,306,317,328,331,340,343,365,371,417,429,437,441 'rotat':1713 'say':744 'see':354,897 'short':364 'show':1067 'shown':1408 'similar':970 'sin':238,255,313,324,373,463,497,581,660,774,937,1034,1054,1102,1119,1152,1166,1185,1194,1218,1227,1244,1254,1271,1279,1296,1300,1314,1318,1749,1766 'sinc':538,1690,1775 'south':850,979,1717 'space':811 'sphere':5,44,60,794,802,844,846,855,885,1010,1376,1389,1403,1667,1689,1841,1847 'standard':863 'state':86,142,513,516,537,564,603,623,681,810,1839 'summar':751 'superposit':138 'suppos':1600 'system':24,77,133,195,512,515,536,563,819,1722,1797,1808,1828,1838 'take':188,634,967,991,1454 'therefor':267 'theta':230,235,239,247,252,256,280,287,295,303,310,314,321,325,350,359,363,369,375,384,393,399,407,415,421,427,433,445,447,453,459,461,465,474,476,484,490,499,541,555,574,583,595,614,650,663,667,673,693,702,706,720,732,767,776,783,880,906,1027,1036,1046,1057,1095,1104,1111,1122,1129,1135,1145,1155,1168,1174,1187,1197,1207,1213,1220,1230,1234,1239,1246,1257,1261,1266,1273,1282,1286,1291,1298,1303,1307,1312,1316,1321,1325,1329,1353,1357,1380,1382,1391,1742,1751,1758,1768 'top':106,112 'trivial':895 'two':21,74,130,140,593,758,815,830 'two-dimension':20,73,129 'two-level':814 'two-vari':829 'typic':857 'u':1471,1478,1480,1490,1540,1546,1548,1571,1610,1615,1639,1642,1650,1654,1672,1702,1728,1735,1738,1760,1770,1776,1780,1801,1809,1812 'uniqu':877,888 'unit':15,31,68,124 'unitari':1450,1473,1484,1492,1569,1608,1670,1691,1700 'use':41,221,345,357,757,879,1351,1378,1521 'usual':36,101 'uu':1481 'uv':1506,1507,1529,1530,1533,1536,1542,1586,1589,1590 'v':1496,1497,1511,1512,1537,1543,1549,1550,1554,1555,1558,1560,1561,1579,1593,1594,1596 'variabl':760,831 'varphi':473,496,580,597,616,737,747,773,788,882,1033,1052,1101,1117,1150,1165,1184,1192,1217,1225,1243,1251,1270,1277,1748,1765 'vector':865,1578,1697 'visual':40 'want':1366 'way':716 'wikipedia':1842 'would':50,196,353,1064,1453,1461 'zero':529,547	en	Lei Mao
73	Fortnite seems to have been removed from the Play Store as well	{"ver":2,"uid":1,"hash":"SHA1:0a4c088cdc85c321fbbd3f8bf9dcb406ec2e260c"}	https://play.google.com/store/apps/details?id=com.epicgames.fortnite&hl=en_US	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24150672"> https://news.ycombinator.com/item?id=24150672 </a>	925ed7883da32ee0bc295438c99a50f90895238d	\N	f	2020-08-14 05:06:00	2020-08-17 06:10:07.758153	0			'/item?id=24150672':16 'comment':13 'fortnit':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24150672':14 'play':9 'remov':6 'seem':2 'store':10 'well':12	zh	cinntaile
87	源码分析：ArrayList 和 LinkedList 如何实现的？我看你还有机会	{"ver":2,"uid":1,"hash":"SHA1:c29109821373ce0b43e0cc5ce0a8cf512508fa35"}	https://toutiao.io/k/memkkk7	2020-08-14 06:10:09	源码分析：ArrayList 和 LinkedList 如何实现的？我看你还有机会	9b74c94a8caeee00c147014462d824688780c80c	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.387058	0			'arraylist':2,8 'linkedlist':4,10 '和':3,9 '如何实现的':5,11 '我看你还有机会':6,12 '源码分析':1,7	zh	
76	Uber CEO says its service will probably shut down temporarily in California	{"ver":2,"uid":1,"hash":"SHA1:56dbee6168360408a29f019b01024d34f4c57c13"}	https://www.cnbc.com/2020/08/12/uber-may-shut-down-temporarily-in-california.html	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24132722"> https://news.ycombinator.com/item?id=24132722 </a>	ec71b2fe03144bfabde4295aaa514d872eb2e9fa	\N	f	2020-08-14 05:06:00	2020-08-15 15:10:10.683893	0			'/item?id=24132722':16 'california':12 'ceo':2 'comment':13 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24132722':14 'probabl':7 'say':3 'servic':5 'shut':8 'temporarili':10 'uber':1	zh	dionmanu
69	Bevy: A data-driven game engine and app framework built in Rust	{"ver":2,"uid":1,"hash":"SHA1:1cf3cde83656c10a63738ceadeb08bb90a774022"}	https://bevyengine.org/news/introducing-bevy/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24123283"> https://news.ycombinator.com/item?id=24123283 </a>	ae46828df6b5403de9eca67cd3eb587b0bb7f48d	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.302876	0			'/item?id=24123283':17 'app':9 'bevi':1 'built':11 'comment':14 'data':4 'data-driven':3 'driven':5 'engin':7 'framework':10 'game':6 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24123283':15 'rust':13	zh	adamnemecek
75	Epic direct payment on mobile	{"ver":2,"uid":1,"hash":"SHA1:44f913e86355fd4af44b5ff0b858dd11caa48318"}	https://www.epicgames.com/fortnite/en-US/news/the-fortnite-mega-drop-permanent-discounts-up-to-20-percent	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24143346"> https://news.ycombinator.com/item?id=24143346 </a>	74deda3983c2c34df30ed007d215ab11f91a4273	\N	f	2020-08-14 05:06:00	2020-08-16 20:10:10.516833	0			'/item?id=24143346':9 'comment':6 'direct':2 'epic':1 'mobil':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24143346':7 'payment':3	zh	bdz
70	I accidentally built a nudity/porn platform	{"ver":2,"uid":1,"hash":"SHA1:81ed02fe92f0cf811618b447a18d2df27c41f118"}	https://elazzabi.com/2020/08/11/the-day-i-accidentally-built-a-nudity-porn-platform/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24119024"> https://news.ycombinator.com/item?id=24119024 </a>	7311c61f1790f50477d452679b2e8e3194cd56f2	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.306902	0			'/item?id=24119024':10 'accident':2 'built':3 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24119024':8 'nudity/porn':5 'platform':6	zh	elazzabi_
74	"Much" of the Rust/Wasmtime team hit by layoffs at Mozilla	{"ver":2,"uid":1,"hash":"SHA1:fdcf388787e143cdf2eb5d27e35be62b556f10aa"}	https://twitter.com/tschneidereit/status/1293868141953667074	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24143819"> https://news.ycombinator.com/item?id=24143819 </a>	b08fc25750fcd1773ffe2ca1691bd47f13b79ba7	\N	f	2020-08-14 05:06:00	2020-08-16 20:10:10.51059	0			'/item?id=24143819':14 'comment':11 'hit':6 'layoff':8 'mozilla':10 'much':1 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24143819':12 'rust/wasmtime':4 'team':5	zh	cs702
72	Stopping phishing campaigns with Bash	{"ver":2,"uid":1,"hash":"SHA1:c7a116590bf0998c0b0fbdf3ff7589c4ce91064d"}	https://blog.haschek.at/2020/stopping-phishing-campaigns-with-bash.html	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24141127"> https://news.ycombinator.com/item?id=24141127 </a>	f3ef24eb7e07ebbdba90af304a87b9b046ced313	\N	f	2020-08-14 05:06:00	2020-08-16 05:10:09.485825	0			'/item?id=24141127':9 'bash':5 'campaign':3 'comment':6 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24141127':7 'phish':2 'stop':1	zh	geek_at
77	Celebrate Woz's 70th	{"ver":2,"uid":1,"hash":"SHA1:f84f02e8f59768414b2e90c31c9dabed25c80dd2"}	https://www.wozbday.com/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24114054"> https://news.ycombinator.com/item?id=24114054 </a>	03f8bc28bfb2ac314ebbd30d665342900d4e9b4d	\N	f	2020-08-14 05:06:00	2020-08-15 06:10:08.50222	0			'/item?id=24114054':8 '70th':4 'celebr':1 'comment':5 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24114054':6 'woz':2	zh	salgernon
71	70% of surveyed Americans say they can't do their job without internet	{"ver":2,"uid":1,"hash":"SHA1:ac93e7352946f6b4db7c3c66ab8b73a207f71a79"}	https://decisiondata.org/news/70-of-surveyed-americans-say-we-cant-do-our-jobs-without-a-home-internet-connection/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24133455"> https://news.ycombinator.com/item?id=24133455 </a>	6949671ecfe6b0d8420524d656cb8a74f4818722	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.321273	0			'/item?id=24133455':17 '70':1 'american':4 'comment':14 'internet':13 'job':11 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24133455':15 'say':5 'survey':3 'without':12	zh	sharkweek
68	Apple removes Fortnite from App Store after Epic attempts to bypass fees	{"ver":2,"uid":1,"hash":"SHA1:57ba918159c12a03b3c905ba6ee1cc476d79634f"}	https://twitter.com/markgurman/status/1293984069722636288	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24146902"> https://news.ycombinator.com/item?id=24146902 </a>	286569f3723b2d21d8713cf6674279468ea11108	\N	f	2020-08-14 05:06:00	2020-08-16 20:10:10.488215	0			'/item?id=24146902':16 'app':5 'appl':1 'attempt':9 'bypass':11 'comment':13 'epic':8 'fee':12 'fortnit':3 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24146902':14 'remov':2 'store':6	zh	xoxoy
732	[译] Go：使用 pprof 收集样本数据	{"ver":2,"uid":1,"hash":"SHA1:a05ff2d5cce8e7dd34cfabffbf426717292fc3ae"}	https://toutiao.io/k/5ng365f	2020-08-29 02:10:09	[译] Go：使用 pprof 收集样本数据	42709fb1fc5eacf224f3fca67f58b9a0754af3f4	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.212178	0			'go':2,7 'pprof':4,9 '使用':3,8 '收集样本数据':5,10 '译':1,6	zh	
94	ES 同义词处理方案	{"ver":2,"uid":1,"hash":"SHA1:0e8bf835e9246f8be9a74f662fd1a5c8053cd733"}	https://toutiao.io/k/wwftc5d	2020-08-14 06:10:09	ES 同义词处理方案	b0cf05dc32b50c7f79f9cba8f075fa08726c3fa4	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.407983	0			'es':1,3 '同义词处理方案':2,4	zh	
81	Emacs 27.1	{"ver":2,"uid":1,"hash":"SHA1:6ba8dbe81d38d6863db7f54d81866870e9a0c3b0"}	https://lists.gnu.org/archive/html/emacs-devel/2020-08/msg00237.html	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24115179"> https://news.ycombinator.com/item?id=24115179 </a>	4758695d28721769485709083b26fb758ac56ab0	\N	f	2020-08-14 05:06:00	2020-08-14 14:10:08.618254	0			'/item?id=24115179':6 '27.1':2 'comment':3 'emac':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24115179':4	zh	ddavis
604	格密码学进阶03：基于格的Identity-based Encryption（身份加密）	{"ver":2,"uid":1,"hash":"SHA1:0278b603b32253fe4fa16eb0e9a2940e28ecd50b"}	http://blog.higashi.tech/2020/08/25/ibe_01.html	2020-08-25 07:00:00	<h3 id="上期回顾">上期回顾</h3>\n\n<p>上一期，我们了解了Lattice Trapdoor的具体构造。基于Trapdoor，我们可以有效的逆向计算基于SIS与LWE的两个单向函数\\(f_\\mathbf{A}, g_\\mathbf{A}\\)。</p>\n\n<p>我们再来快速的回顾一下Lattice Trapdoor的构造。</p>\n\n<p>首先，我们需要选择一个Uniform Random的矩阵\\(\\mathbf{B} \\in \\mathbb{Z}_q^{n \\times m'}\\)，然后再选择一个高斯分布的短矩阵\\(\\mathbf{R} \\in \\mathbb{Z}_q^{m' \\times n \\log{q}}\\)。随后，我们就可以构造我们的问题矩阵\\(\\mathbf{A}\\)：</p>\n\n\\[\\mathbf{A} = [\\mathbf{B} \\vert \\mathbf{G - BR}]\\]\n\n<p>这个矩阵对应的Trapdoor就是矩阵\\(\\mathbf{R}\\)了，因为我们可以通过\\(\\mathbf{R}\\)来把\\(\\mathbf{A}\\)转换到到工具矩阵\\(\\mathbf{G}\\)上：</p>\n\n\\[\\mathbf{A} \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} = \\mathbf{G}\\]\n\n<p>通过这个构造，我们就可以把基于\\(\\mathbf{A}\\)的单向函数问题\\(f_\\mathbf{A}, g_\\mathbf{A}\\)转换为基于\\(\\mathbf{G}\\)的单向函数问题\\(f_\\mathbf{G}, g_\\mathbf{G}\\)。因为工具矩阵\\(\\mathbf{G}\\)的结构公开已知，所以我们可以很轻易的求解\\(f_\\mathbf{G}^{-1}, g_\\mathbf{G}^{-1}\\)从而计算\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)。</p>\n\n<p>Lattice Trapdoor的构造非常简单，设计也很巧妙。接下来，这一期我们来看看基于Lattice Trapdoor最直观的应用：<strong>身份加密</strong>（<strong>IBE</strong>）。</p>\n\n<h3 id="身份加密identity-based-encryptionibe">身份加密（Identity-based Encryption，IBE）</h3>\n\n<p>IBE的概念想必大家之前也有所耳闻，具体的在这篇文章中就不多解释了，在zhihu上有很多其他大佬对于IBE系统给出了非常详细的解读。</p>\n\n<p>在这里我们给出一个很简单的解读方式：<strong>IBE就是一个可以任意选择公钥的公钥加密系统</strong>。</p>\n\n<p>具体是什么意思呢？基于Diffie-Hellman的ElGamal公钥加密系统我们都知道，需要提前经过密钥生成（KeyGen）的阶段才能生成一对乱码一样的公钥和私钥。随后我们把公钥公布出来之后，其他人就可以通过公钥加密了。这样的系统虽然可行，但是当网上需要公钥加密的人越来越多之后，难免会遇到很大的问题：每个人都有属于自己的一串乱码公钥，如果想要和任何其他人通讯，就必须要记住别人的公钥。</p>\n\n<p>像这样的所有人都记住所有人的公钥的系统，我们称之为<strong>PKI</strong>（<strong>Public Key Infrastructure</strong>）。PKI的缺点就在于当人数越来越多的时候，整个系统就变得非常没有效率，公钥的存储成本非常大。</p>\n\n<p>IBE想要解决的问题就是，如果Alice给Bob发消息，并不需要提前记住Bob的公钥，而是直接把消息加密在Bob的名字下面。当Bob解密的时候，他只需要他证明他是Bob本人，就可以解开密文看到原文了。</p>\n\n<p>为了保证这个IBE系统能够正常的运作，我们还需要一些额外的定义。首先，一个群体需要有一个信任的管理员，这个管理员拥有整个群体的万能公钥（MPK）和万能私钥（MSK）。管理员可以通过MSK来给每个人签发基于每个人名字的私钥\\(SK_{ID}\\)，同时公布MPK给所有人看。当Alice给Bob发消息的时候，她会基于MPK和Bob的ID（”Bob”）创建密文。随后Bob就可以通过他专属的\\(SK_\\text{Bob}\\)来解密。这样的话，所有人只需要记住MPK和接收消息的人的ID，就可以安全的交换消息了。</p>\n\n<p><img src="/assets/images/lattice/image-20200824003536401.png" alt="image-20200824003536401" /></p>\n\n<p>如果放到一张图上来说的话，大概就像上图所述。我们可以看到，一个IBE系统就是把对方的ID作为了加密的时候使用的公钥。对应的在解密的时候，我们通过MSK和ID提取出专门的密钥\\(SK_{ID}\\)进行解密。</p>\n\n<p>IBE是一个相对来说比较老的密码学构造了，在将近20年前被提出，并且基于双线性配对已经有了很好的构造。这一期，我们就来看看如何使用Lattice Trapdoor来构造这个系统。</p>\n\n<h3 id="regev加密系统回顾">Regev加密系统回顾</h3>\n\n<p>首先，我们需要回顾一下<strong>Regev Encryption</strong>加密系统。我们这里的IBE构造，精髓就基于Regev Encryption的一个变种。</p>\n\n<p>如果大家看过我之前的【初探全同态加密】系列的话，那应该会对基于LWE的Regev加密系统有一定的了解。我们在这里快速的回顾一下：</p>\n\n<ul>\n  <li>\\(KeyGen\\)：首先，我们需要创建一个LWE的问题实例，即创建一个问题矩阵\\(\\mathbf{A}\\)，然后随机选择一个密钥\\(\\mathbf{s}\\)和噪音\\(\\mathbf{e}\\)，最后我们计算\\(\\mathbf{b = As + e}\\)。随后我们输出私钥\\(sk = \\mathbf{s}\\)，公钥\\(pk = (\\mathbf{A, b})\\)。</li>\n  <li>\\(Encrypt(pk, \\mu \\in \\{0,1\\})\\)：我们加密一个bit的方式很简单，只需要随机选择一个blinding factor \\(\\mathbf{r} \\in \\mathbb{Z}_2^m\\)，然后计算\\(c_0 = \\mathbf{r}^t \\mathbf{A}\\)，\\(c_1 = \\mathbf{r}^t \\mathbf{b} + \\lfloor q/2 \\rfloor \\mu\\)。随后我们输出密文为\\((c_0, c_1)\\)。</li>\n  <li>\\(Decrypt(sk, ct=(c_0, c_1))\\)：如果要解密的话，我们只需要计算\\(c_1 - c_0 \\cdot \\mathbf{s} = \\mathbf{r}^t \\mathbf{e} + \\lfloor q/2 \\rfloor \\mu\\)。因为噪音向量的分布我们控制的很小，所以我们可以直接通过观察结果的值是否小于\\(q/4\\)来判断\\(\\mu\\)是0还是1。</li>\n</ul>\n\n<p>具体的Regev加密的正确性和安全性，可以参见【初探全同态加密】这一专题。</p>\n\n<p>我们之前学到的Regev Encryption的精髓在于，因为LWE问题的困难度，我们可以安全的把密文\\(x\\)隐藏在一个看似随机的向量\\(\\mathbf{b}\\)中。然而作为密钥生成方我们知道LWE问题的解，所以我们可以很轻松的从密文中移除\\(\\mathbf{b}\\)这一项，剩下原本的原文和一些小范围的噪音。</p>\n\n<p>如果看过【Lattice学习笔记】，想必大家都会知道，既然有基于LWE的系统出现，那么肯定就会有基于LWE的小兄弟——SIS的系统出现。我们能否<strong>把这个Regev加密系统转化成基于SIS难度的系统</strong>呢？</p>\n\n<p>Gentry，Peikert与Vaikuntanathan在08年的论文<strong>GPV08</strong>中，对于Regev的加密体系进行了一个细小的变换，得到了一个基于SIS难度的系统——<strong>Dual Regev加密系统</strong>。具体方案如下：</p>\n\n<p><img src="/assets/images/lattice/image-20200824105118902.png" alt="image-20200824105118902" /></p>\n\n<ul>\n  <li>\\(KeyGen\\)：因为Regev的密钥生成是生成一个LWE的实例，我们这里想必就要生成一个SIS的实例了。如同上图所述，我们选取随机的\\(\\mathbf{A}\\)，和密钥短向量\\(\\mathbf{e}\\)，计算\\(\\mathbf{u = Ae} \\text{ mod }q\\)。随后我们输出私钥\\(sk = \\mathbf{e}\\)，公钥\\(pk=(\\mathbf{A, u})\\)。</li>\n  <li>\\(Encrypt(pk, \\mu)\\)：我们选取一个随机的LWE问题的解\\(\\mathbf{s}\\)，噪音向量\\(\\mathbf{x}\\)，和一个单独的噪音值\\(x\\)。然后我们计算\\(c_0 = \\mathbf{A}^t \\mathbf{s} + \\mathbf{x}\\)，\\(c_1 = \\mathbf{u}^t \\mathbf{s} + x + \\lfloor q/2 \\rfloor \\mu\\)。随后输出\\((c_0, c_1)\\)。</li>\n  <li>\\(Decrypt(sk, ct=(c_0, c_1))\\)：解密和之前是一样的，我们计算\\(c_1 - \\mathbf{e}^t c_0 = \\lfloor q/2 \\rfloor \\mu + x - \\mathbf{e}^t \\mathbf{x}\\)。由于后两项都为噪音分布空间中很小的值，所以我们可以很简单的提取出原文\\(\\mu\\)来。</li>\n</ul>\n\n<p>Dual Regev模式的精髓在于，在密钥生成的阶段，我们不会生成任何LWE的实例，而这个实例是在加密的过程中被随机选择出来的。相比起Regev是在密钥生成阶段就锁定了唯一的一个LWE实例，而在加密阶段选择一个随机的向量\\(\\mathbf{r}\\)来增加随机性。</p>\n\n<p>Dual Regev模式的好处在于它的公钥部分\\((\\mathbf{A, u})\\)是<strong>纯平均随机分布</strong>的。因为我们随机的挑选了平均分布的\\(\\mathbf{A}\\)，并且选择了高斯分布的\\(\\mathbf{e}\\)，我们知道\\(\\mathbf{u}\\)一定是呈平均随机分布的！相比起普通Regev模式下的公钥\\((\\mathbf{A, b})\\)作为LWE的问题实例，\\(\\mathbf{b}\\)并不是平均随机分布的！虽然在DLWE假设中，我们假设\\((\\mathbf{A, b})\\)是computationally和平均分布相似的，但是在statistical（概率分布）的层面上，\\(\\mathbf{b}\\)并不是Uniform的。</p>\n\n<p>关于Dual Regev公钥的平均分布看起来没什么用，但是<strong>对于IBE系统来说至关重要</strong>。为什么这么说呢？这是因为IBE系统中我们要求任何ID都可以当作加密使用的公钥，然而这一特性Dual Regev下<strong>公钥的平均随机分布</strong>正好是完美契合的，这对于之后的安全性证明帮助非常大。</p>\n\n<h3 id="基于dual-regev的ibe架构">基于Dual Regev的IBE架构</h3>\n\n<p>了解完Dual Regev的具体构造之后，接下来我们就可以尝试基于它来实现IBE了。</p>\n\n<p>我们知道一个IBE系统下，我们需要可以把任意的ID当作公钥进行加密。所以我们需要想办法在密文和密钥中“嵌入”这么个ID的值进去。</p>\n\n<p>在了解怎么做之前，我们再来看一下<strong>Dual Regev的精髓</strong>在哪里。</p>\n\n<p>我们在选择Dual Regev系统的密钥的时候，就像之前的图上所述，我们需要先选择一个关键的SIS问题实例，即一组\\(\\mathbf{A, e, u}\\)：</p>\n\n\\[\\mathbf{Ae} = \\mathbf{u} \\text{ mod }q\\]\n\n<p>然后我们可以对着这个SIS问题的题面，即\\(\\mathbf{A, u}\\)进行Regev公钥加密。随后可以根据这个SIS问题的解\\(\\mathbf{e}\\)，对密文再进行解密。这也就是说，<strong>Dual Regev的核心就在于这个SIS问题和它的解</strong>。</p>\n\n<p>我们可以把这个idea延伸到IBE上来。如果任何人可以根据要加密的对象的ID来构造一个SIS的问题矩阵\\(\\mathbf{F}_{ID}\\)，那么他们就可以基于这个\\(\\mathbf{F}_{ID}\\)和任意挑选的一个\\(\\mathbf{u}\\)来进行Dual Regev加密。接下来我们只要搞清楚，拥有ID的这个人如何掌握这么个密钥\\(\\mathbf{e}\\)使得SIS等式成立，就大功告成了。</p>\n\n<p><img src="/assets/images/lattice/image-20200824110047866.png" alt="image-20200824110047866" /></p>\n\n<p>把这个问题用图描述出来，我们发现，其实这种思路的IBE就是把原本随机生成的SIS矩阵\\(\\mathbf{A}\\)替换成了一个任何人可以efficiently生成的这么一个IBE矩阵\\(\\mathbf{F}_{ID}\\)罢了。</p>\n\n<p>由于普通的Dual Regev中，我们都是随意的挑选\\(\\mathbf{A}, \\mathbf{e}\\)然后再计算\\(\\mathbf{u}\\)的，现在我们反了过来：提前计算好了\\(\\mathbf{u}\\)，并且任何人都可以生成固定的\\(\\mathbf{F}_{ID}\\)，那么我们怎么才能让拥有ID的人得到一个有效的\\(\\mathbf{e}\\)满足SIS呢？</p>\n\n<p>是不是非常的有即视感？这个时候，就需要轮到我们的Lattice Trapdoor出场了。</p>\n\n<p>我们上一期学到的Trapdoor，告诉我们我们可以构造一个看似随机的\\(\\mathbf{A}\\)，但是自带一个“后门”\\(\\mathbf{R}\\)，让我们可以有效的计算基于\\(\\mathbf{A}\\)的SIS/LWE单向函数的反函数。这里我们当然也要构造这么一个\\(\\mathbf{A}\\)，并且想办法嵌入到我们的\\(\\mathbf{F}_{ID}\\)中。<strong>嵌入的方法不同，最后得到的IBE也不同。</strong></p>\n\n<p>下面我们就来看看第一种IBE体系——<strong>CHKP10 IBE加密系统</strong>。</p>\n\n<h3 id="chkp10ibe加密系统">【CHKP10】IBE加密系统</h3>\n\n<p>Cash，Hofheinz，Kitz和Peikert在2010年发表的CHKP10中，给出了一个非常优雅的基于Lattice的IBE构造，我们来看看是怎么实现的。</p>\n\n<h4 id="id的选择">ID的选择</h4>\n\n<p>首先，即然说到了IBE，我们就要先来看看这个ID到底是什么东西。如果Alice想要给Bob发送消息的话，那么这个ID就是一个字符串“Bob”。如果在学校里给别的同学发消息的话，那么这个ID很有可能就是收件人的学号，等等。</p>\n\n<p>因为ID这里有很多种含义，为了方便我们IBE系统的构造，我们就定义ID为一个长度为\\(l\\)的二进制字串。因为我们可以把任何字符串或者编号转换为二进制，所以只需要解决二进制下的ID，就等于解决了所有IBE的应用了。</p>\n\n<p>在这里，为了方便我们对于IBE系统的展示和运算，我们定义ID就是一个2 bits的一个数字：</p>\n\n\\[\\lvert ID \\rvert = 2\\\\\nID \\in \\mathbb{Z}_2^2\\]\n\n<h4 id="公共参数生成">公共参数生成</h4>\n\n<p>一个IBE系统的第一步就是生成它的公共参数了，即生成我们上文所述的MPK与MSK。</p>\n\n<p>在CHKP10中，我们首先需要使用我们上一期讲到的Trapdoor的方法，生成一个带有Trapdoor \\(\\mathbf{R}\\)的随机矩阵\\(\\mathbf{A}_0\\)。随后，对于ID的每一个bit，我们都生成两个随机矩阵\\(\\mathbf{A}_i^0, \\mathbf{A}_i^1\\)。最后，我们再随机选取一个看得顺眼的\\(\\mathbf{u}\\)，就搞定了。</p>\n\n<p><img src="/assets/images/lattice/image-20200824112709435.png" alt="image-20200824112709435" /></p>\n\n<p>图上所述的就是当ID为两位的时候，我们一共需要生成6个关键元素：带陷门的\\(\\mathbf{A}_0\\)，对应每一位随机生成的\\(\\mathbf{A}_1^0, \\mathbf{A}_1^1, \\mathbf{A}_2^0, \\mathbf{A}_2^1\\)，和一个向量\\(\\mathbf{u}\\)。</p>\n\n<p>这6个关键元素，就是我们IBE系统的MPK了。同时，\\(\\mathbf{A}_0\\)的Trapdoor \\(\\mathbf{R}\\)，就是这个系统的MSK。</p>\n\n<h4 id="生成id矩阵">生成ID矩阵</h4>\n\n<p>当我们进行加密的时候，首先我们需要根据加密的ID计算出对应的\\(\\mathbf{F}_{ID}\\)以便我们进行Dual Regev加密。当我们拿到了上面生成的公共参数之后，就可以把这些参数根据对应的ID的值组合起来，就可以构成\\(\\mathbf{F}\\)了。我们举个例子，如果我们加密选择的ID是01的话，那么我们就可以把\\(\\mathbf{A}_0\\)矩阵和对应每一个bit的\\(\\mathbf{A}_i^b\\)拼接起来：</p>\n\n\\[\\mathbf{F}_{ID} = [\\mathbf{A_0} \\vert \\mathbf{A_1^0} \\vert \\mathbf{A}_2^1]\\]\n\n<p>这样一来，最后会得到一个长条形的\\(\\mathbf{F}_{ID}\\)，我们随后就可以通过它来使用Dual Regev进行IBE加密了。</p>\n\n<p>但是到这里还没有结束。我们知道，Dual Regev的精髓在于我们需要提前知道一个短的密钥\\(\\mathbf{e}\\)，使得\\(\\mathbf{Ae} = \\mathbf{u} \\text{ mod }q\\)。这里也一样，我们需要找到对应的\\(\\mathbf{e}\\)使得：</p>\n\n\\[\\mathbf{F}_{01} \\mathbf{e} = [\\mathbf{A}_0 \\vert \\mathbf{A}_1^0 \\vert \\mathbf{A}_2^1] \\mathbf{e} = \\mathbf{u} \\text{ mod }q\\]\n\n<h4 id="使用lattice-trapdoor计算密钥">使用Lattice Trapdoor计算密钥</h4>\n\n<p>接下来，我们需要计算出这个ID对应的密钥\\(\\mathbf{e}\\)。</p>\n\n<p>首先，我们已知了\\(\\mathbf{A}_0\\)这个矩阵的Trapdoor \\(\\mathbf{R}\\)，同时其他的两个矩阵\\(\\mathbf{A}_1^0, \\mathbf{A}_2^1\\)是随机生成的。这也就是说，我们需要找到一个长矩阵，并且满足：</p>\n\n\\[[\\mathbf{A_0} \\vert \\mathbf{A_1^0} \\vert \\mathbf{A}_2^1] \\begin{bmatrix}\n\\mathbf{a}\\\\\n\\mathbf{b}\\\\\n\\mathbf{c}\n\\end{bmatrix}\n= \\mathbf{u} \\text{ mod }q\\]\n\n<p>我们需要求解的就是这\\(\\mathbf{a, b, c}\\)三个部分。解决方案十分简单：我们随机的选择\\(\\mathbf{b}\\)和\\(\\mathbf{c}\\)的值，使得整个等式变成：</p>\n\n\\[\\mathbf{A}_0 \\cdot \\mathbf{a} = \\mathbf{u} - [\\mathbf{A_1^0} \\vert \\mathbf{A}_2^1] \\begin{bmatrix}\n\\mathbf{b}\\\\\n\\mathbf{c}\n\\end{bmatrix} \\text{ mod }q\\]\n\n<p>这样一来，求解\\(\\mathbf{a}\\)就变成了计算基于\\(\\mathbf{A}_0\\)的SIS OWF的反向函数。我们只要使用\\(\\mathbf{R}\\)来构造\\(f_{\\mathbf{A}_0}^{-1}\\)，然后再计算出\\(\\mathbf{a}\\)就大功告成。最后，我们输出对应于这个ID的IBE密钥：</p>\n\n\\[\\mathbf{e} = \\begin{bmatrix}\n\\mathbf{a}\\\\\n\\mathbf{b}\\\\\n\\mathbf{c}\n\\end{bmatrix}\\]\n\n<p>真正在使用场景中，整个群组中拥有MSK的管理员会计算出这个\\(\\mathbf{e}\\)并且发给ID为01的人。这样一来这个人就可以解开所有发给01的密文了。</p>\n\n<h4 id="ibe加密">IBE加密</h4>\n\n<p>当我们成功的构建\\(\\mathbf{F}_{01}\\)之后，就可以进行Dual Regev加密了。由于之前讲过了，这里就快速的带过。</p>\n\n\\[Enc(\\mu \\in \\{0,1\\}, ID=01) \\rightarrow \\\\\n(c_0 = \\mathbf{F}_{01}^t \\mathbf{s} + \\mathbf{x}, c_1 = \\mathbf{u}^t \\mathbf{s} + x + \\lfloor q/2 \\rfloor \\mu)\\]\n\n<p>和之前的构造相同，我们选取随机的向量\\(\\mathbf{s}\\)，和对应的噪音\\(\\mathbf{x}, x\\)以便完成加密。</p>\n\n<h4 id="ibe解密">IBE解密</h4>\n\n<p>解密和之前也是一样的，ID为01的人就可以通过\\(\\mathbf{e}\\)来计算：</p>\n\n\\[c_1 - \\mathbf{e}^t c_0 = \\lfloor q/2 \\rfloor \\mu + x - \\mathbf{e}^t \\mathbf{x} \\approx \\lfloor q/2 \\rfloor \\mu\\]\n\n<h3 id="chkp10的安全性论证">CHKP10的安全性论证</h3>\n\n<p>以上就是CHKP10的IBE加密体系的全貌了！接下来是最重要的部分，即<strong>安全性论证</strong>（<strong>Security Proof</strong>）。</p>\n\n<p>一般讨论类似于IBE一样的加密系统的话，我们的安全性论证一般都会使用一个<strong>security game</strong>来描述。在这个game中我们作为<strong>Challenger</strong>，我们的任务是尝试去“挑战”解决一个公认的难题，比如LWE。随后，在这个game中还存在着一个<strong>Adversary</strong>，它的目标是尝试攻破我们描述的IBE系统。然后整个game可以被描述为，Challenger把想要解决的LWE难题包装成一个IBE的系统，然后让Adversary去尝试攻破它。我们把IBE的构造设置为，如果Adversary可以有效的攻破它，那么我们就可以利用Adversary输出的结果来解决我们想要解决的LWE问题。</p>\n\n<p>这其实就是变相地说，我们可以把LWE问题伪装成一个IBE，进而证明我们提出的IBE的系统的安全性。因为如果这个系统可以被攻破，那么就代表它对应的LWE问题也能被攻破。</p>\n\n<p><img src="/assets/images/lattice/image-20200824213638739.png" alt="image-20200824213638739" /></p>\n\n<p>简单的画了个图描述了一下整个security game的大致流程。</p>\n\n<ol>\n  <li>首先，Challenger会接收到一个困难的问题实例，比如LWE。</li>\n  <li>随后开始IBE系统的构造。我们作为Challenger需要能够回答来自Adversary的一些问题。第一类问题是<strong>公钥问题</strong>，即Adversary提供任意的ID，我们需要返回过去对应这个ID的IBE加密矩阵\\(\\mathbf{F}_{ID}\\)。在这类问题中，Adversary需要决定一个它想要破解的ID，即\\(ID^*\\)。</li>\n  <li>第二类问题就是<strong>密钥问题</strong>（<strong>Key Queries</strong>）。这个过程中，Adversary可以任意的选择合理的ID，只要并不是\\(ID^*\\)，我们就要回答对应这个ID的私钥\\(SK_{ID}\\)。</li>\n  <li>在Adversary问完问题结束之后，我们的security game进入了最后的阶段。Adversary选择并且提供两段长度相同的密文\\(m_0, m_1\\)，然后发送给Challenger。随后Challenger会随机选择一个bit \\(b \\in \\{0,1\\}\\)，然后基于\\(b\\)的值构造密文\\(C^* = Enc(m_b, ID^*)\\)，并且把密文发送给Adversary。</li>\n  <li>Adversary需要基于密文，判断并输出\\(b' \\in \\{0,1\\}\\)，尝试猜出我们选择的\\(b\\)的值。</li>\n  <li>最后，我们根据Adversary给出的答案，尝试解决一开始得到的困难问题。</li>\n</ol>\n\n<p>由于篇幅原因，我们不会构建完整的一套security game，而是着重于focus在<strong>Challenger与Adversary的交互</strong>上。观察这个game当中的交互之后，可以总结出几点关键。</p>\n\n<h4 id="ibe安全证明的关键点">IBE安全证明的关键点</h4>\n\n<p>首先，第一点我们已经提到过了，就是作为Challenger本身，我们需要能够回答Adversary提出的密钥问题。这也就是说，我们需要有能力可以创建对应的\\(\\mathbf{F}_{ID}\\)的Trapdoor。</p>\n\n<p>但是需要注意的是，因为我们的目的是为了解决一个困难问题（比如SIS/LWE），所以我们需要把这个问题嵌入到security game当中来。放到IBE的场景中来的话，比较可行的方式就是：我们只能生成一部分（Adversary选择的）ID的密钥。但是对于Adversary一开始决定的\\(ID^*\\)，我们使用输入进来的困难问题作为它的公钥。这样一来，如果Advesary可以破解基于\\(ID^*\\)下的Dual Regev的话，那么代表我们也可以利用Adversary来破解构造它的困难问题了。</p>\n\n<p>这一构造意味着什么呢？这代表我们作为Challenger本身并不能知道\\(ID^*\\)的密钥。这也间接的要求了我们不能知道整个IBE系统的MSK。但是我们又需要在不知道MSK的情况下任意的构造出Adversary提出的任意其他ID对应的密钥。</p>\n\n<p>在这样的构造下，如果我们可以在不知道MSK和\\(ID^*\\)的前提下，成功的回答Adversary提出的各种问题，这就意味着这个IBE系统中，除了\\(ID^*\\)之外的其他ID的加密解密流程，我们就算不知道\\(SK_{ID^*}\\)，也可以完全<strong>simulate</strong>（<strong>模拟</strong>）出来。</p>\n\n<p>说到模拟的概念，了解零知识的朋友都不陌生了。假如我不知道\\(SK_{ID^*}\\)，也可以完全模拟出IBE系统里其他ID的transcript（交互信息）的话，那就代表其他的ID下的加密解密的transcript对于\\(SK_{ID^*}\\)这一消息来说是零知识的！</p>\n\n<h4 id="ibe-transcript-simulation">IBE Transcript Simulation</h4>\n\n<p>现在我们的问题明确了：我们需要在不知道\\(ID^*\\)的前提下，构造其他的ID的密钥，并且仍然保留IBE的正确性。此外，我们还可以基于已知的困难问题，构造一个困难的密文\\(C^*\\)发给Adversary。</p>\n\n<p>接下来，我们就来看一看构造吧。为了方便演示，我们假设\\(ID^* = 11\\)。</p>\n\n<p>首先，因为构造要求，我们知道我们不可能会知道\\(SK_{ID^*}\\)，这也就代表了我们并不知道MSK，即\\(\\mathbf{A}_0\\)的Trapdoor。其次，我们想使得\\(ID^*\\)下的所有密文都基于困难的SIS/LWE问题。基于这两条要求，我们可以随机的选取\\(\\mathbf{A}_0, \\mathbf{A}_1^1, \\mathbf{A}_2^1\\)，并且确保这三个矩阵是纯随机的（没有Trapdoor的存在）。</p>\n\n<p>这样一来，我们来看看基于\\(\\mathbf{F}_{ID^*}\\)的IBE加密矩阵：</p>\n\n\\[\\mathbf{F}_{ID^*} = [\\mathbf{A}_0 \\vert \\mathbf{A}_1^1 \\vert \\mathbf{A}_2^1]\\]\n\n<p>由于这三个矩阵都是没有Trapdoor的，所以\\(\\mathbf{F}_{ID^*}\\)也是没有Trapdoor的。如果Adversary可以破解基于\\(\\mathbf{F}_{ID^*}\\)的Dual Regev，这也就代表它可以破解基于\\(\\mathbf{F}_{ID^*}\\)的SIS/LWE啦。</p>\n\n<p>实现了困难问题这一要求之后，我们再来看一看密钥问题（Key Queries）。为了能够成功的生成其他ID下的SK，解决的方法很简单：我们只需要生成带有Trapdoor的\\(\\mathbf{A}_1^0, \\mathbf{A}_2^0\\)就行了。原理很简单，只要我们的\\(\\mathbf{F}_{SK}\\)的构造中有任何一个带有Trapdoor的矩阵，那我们就可以生成整个SK啦。举个例子：</p>\n\n\\[\\mathbf{F}_{01} = [\\mathbf{A}_0 \\vert \\mathbf{A}_1^0 \\vert \\mathbf{A}_2^1]\\]\n\n<p>我们可以就利用\\(\\mathbf{A}_1^0\\)的Trapdoor来生成\\(SK_{01}\\)。</p>\n\n<p>这就是CHKP10 IBE的安全性论证的全貌了。我们回顾一下，整个证明的核心在于两点：</p>\n\n<ol>\n  <li>我们可以在不知道\\(SK_{ID^*}\\)的情况下生成其他所有ID的密钥。这代表了就算知道了其他所有ID的密钥，我们也不能还原出\\(SK_{ID^*}\\)。</li>\n  <li>我们把\\(ID^*\\)下的IBE公钥变成了一个纯随机生成（没有Trapdoor）的SIS/LWE矩阵。这样如果存在可以破解我们IBE security game密文的Adversary，我们就可以利用这个Adversary来攻破SIS/LWE。</li>\n</ol>\n\n<p>Q.E.D.</p>\n\n<h3 id="写在篇尾">写在篇尾</h3>\n\n<p>这一期，我们了解了基于Lattice构造（尤其是Lattice Trapdoor）下的身份加密（IBE）体系。</p>\n\n<p>稍微总结一下这一期的内容：首先我们了解了IBE大概的定义，并且看到了帮助我们构造IBE的Dual Regev加密系统。随后我们看到了CHKP10提出的IBE的结构，随后在最后面我们看到了这一结构的安全证明和对应的security game。</p>\n\n<p>CHKP10下的IBE，虽然构造非常优雅，但是我们不禁会发现一个<strong>弊端</strong>：用于加密的矩阵\\(\\mathbf{F}_{ID}\\)太长了。</p>\n\n<p>我们观察可以发现，现在\\(\\mathbf{F}_{ID}\\)的长度，和ID有多少个bits是直接挂钩的。这也就代表了，如果我们要发送消息给一个256bits的地址，我们可能需要构造一个非常非常大的\\(\\mathbf{F}_{ID}\\)来用作IBE加密的矩阵。这一点对于整个IBE体系的实际应用是毁灭性的。</p>\n\n<p>一种对策是我们像之前讨论多项式环下的Ring-SIS/LWE一样，我们把整个问题转化到Ring中，这样可以减少一点矩阵存储和相乘运算的开支。但是在维度上来看，ID和公钥的比例仍然是\\(O(n)\\)的增长。我们能否消减这一增长的比例呢？</p>\n\n<p>Agrawal，Boneh与Boyan在2010年同时提出了<strong>ABB10</strong>的格IBE构造。他们的构造的公钥大小永远都是恒定在\\(O(1)\\)的，这一点相比起CHKP10是非常大的突破。</p>\n\n<p>下一期，我们就来看一看ABB10这一更加高效率的IBE构造。</p>\n\n<h3 id="references">References</h3>\n\n<p>本文内容主要参考于IIT Madras的教授<a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>的讲座。</p>\n\n<p>The contents of this post is summarized from Prof. <a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>’s talk at Simon’s Institute.</p>	9aaad31fcfb720e61e70412e92b181b3c90fcf36	\N	f	2020-08-25 09:10:00	2020-09-10 01:10:05.14699	0			'-1':113,117,122,126,943 '/lwe':616,1155,1240,1296,1363,1369,1412 '0':257,271,290,297,305,396,418,425,436,681,688,703,708,716,729,753,765,770,809,814,837,845,856,861,899,908,932,942,981,987,1029,1105,1112,1127,1234,1246,1268,1308,1312,1327,1332,1342 '01':804,972,984,990,1324,1345 '1':258,278,292,299,303,405,420,427,431,692,707,711,712,720,769,775,813,819,844,849,860,866,907,913,982,997,1024,1107,1113,1128,1249,1250,1254,1272,1273,1278,1307,1331,1337,1341,1426 '11':1224 '2':267,663,668,669,715,719,774,818,848,865,912,1253,1277,1311,1336 'a':15,18,48,50,66,72,87,91,94,121,125,232,251,276,363,381,398,464,469,479,488,524,537,571,581,607,614,620,680,686,690,702,706,710,714,718,728,752,756,764,768,773,808,812,817,836,843,847,855,859,864,870,884,898,902,906,911,928,931,941,946,955,1233,1245,1248,1252,1267,1271,1276,1306,1310,1326,1330,1335,1340 'adversary可以任意的选择合理的id':1094 'adversary选择并且提供两段长度相同的密文':1103 'adversary选择的':1161 'adversary需要决定一个它想要破解的id':1087 'adversary需要基于密文':1123 'ae':370,528,791 'agrawal':1422,1445 'agrawal的讲座':1434 'approx':1040 'as':242 'at':1448 'b':25,52,241,252,283,335,340,480,483,489,495,758,872,885,891,917,957,1110,1115,1120,1125,1130 'based':4,138 'begin':74,867,914,952 'bits的一个数字':659 'bmatrix':75,81,868,876,915,921,953,961 'bob':190,195,644 'boneh与boyan在2010年同时提出了abb10的格ibe构造':1423 'br':56 'c':270,277,289,291,296,298,302,304,395,404,417,419,424,426,430,435,874,886,894,919,959,986,996,1023,1028,1117,1217 'cash':633 'cdot':73,306,900 'challenger会接收到一个困难的问题实例':1076 'challenger把想要解决的lwe难题包装成一个ibe的系统':1063 'chkp10':629,631 'chkp10下的ibe':1386 'chkp10的安全性论证':1045 'contents':1436 'ct':295,423 'decrypt':293,421 'dual':354,451,461,545,785 'e':238,243,313,366,377,433,443,472,525,542,564,583,598,788,800,806,821,832,951,965,1021,1026,1036 'enc':978,1118 'encrypt':253,383 'encryption':5,139 'encryption加密系统':218 'encryption的一个变种':221 'encryption的精髓在于':329 'end':80,875,920,960 'f':13,89,99,110,119,550,554,574,594,623,738,746,761,779,803,939,971,989,1084,1149,1260,1264,1282,1287,1293,1317,1323,1391,1397,1405 'factor':261 'from':1442 'g':16,55,69,83,92,97,101,102,104,107,112,114,116,123 'game':1137,1385 'game密文的adversary':1367 'game当中来':1157 'game来描述':1053 'game的大致流程':1074 'game进入了最后的阶段':1102 'gentry':350 'hellman的elgamal公钥加密系统我们都知道':149 'hofheinz':634 'i':79,687,691,757 'ibe':134,140,1205,1377 'ibe加密':968 'ibe加密系统':630,632 'ibe安全证明的关键点':1141 'ibe就是一个可以任意选择公钥的公钥加密系统':145 'ibe想要解决的问题就是':169 'ibe是一个相对来说比较老的密码学构造了':209 'ibe的安全性论证的全貌了':1347 'ibe的概念想必大家之前也有所耳闻':141 'ibe解密':1017 'id':186,207,551,555,575,595,624,661,664,739,762,780,983,1085,1089,1096,1099,1121,1150,1164,1168,1174,1180,1185,1189,1197,1203,1210,1223,1229,1238,1261,1265,1283,1288,1294,1352,1357,1359,1392,1398,1406 'identity':137 'identity-based':136 'id为01的人就可以通过':1019 'id和公钥的比例仍然是':1417 'id的密钥':1162 'id的选择':638 'in':26,36,256,264,665,980,1111,1126 'infrastructure':165 'institute':1451 'is':1440 'key':164,1091,1300 'keygen':151,227,357 'kitz和peikert在2010年发表的chkp10中':635 'l':651 'lattice':127 'lattice学习笔记':344 'lfloor':284,314,412,437,1004,1030,1041 'log':43 'lvert':660 'm':32,40,268,1104,1106,1119 'madras的教授shweta':1433 'mathbb':27,37,265,666 'mathbf':14,17,24,34,47,49,51,54,58,62,65,68,71,76,78,82,86,90,93,96,100,103,106,111,115,120,124,231,234,237,240,246,250,262,272,275,279,282,307,309,312,334,339,362,365,368,376,380,387,390,397,400,402,406,409,432,442,445,458,463,468,471,474,478,482,487,494,523,527,529,536,541,549,553,557,563,570,573,580,582,585,590,593,597,606,610,613,619,622,676,679,685,689,695,701,705,709,713,717,722,727,731,737,745,751,755,760,763,767,772,778,787,790,792,799,802,805,807,811,816,820,822,831,835,839,842,846,854,858,863,869,871,873,877,883,890,893,897,901,903,905,910,916,918,927,930,936,940,945,950,954,956,958,964,970,988,992,994,998,1001,1010,1013,1020,1025,1035,1038,1083,1148,1232,1244,1247,1251,1259,1263,1266,1270,1275,1281,1286,1292,1305,1309,1316,1322,1325,1329,1334,1339,1390,1396,1404 'mod':372,532,795,825,880,923 'mpk':181 'msk':183 'mu':255,287,317,322,385,415,440,449,979,1007,1033,1044 'n':30,42,1419 'o':1418,1425 'of':1437 'owf的反向函数':934 'peikert与vaikuntanathan在08年的论文gpv08中':351 'pk':249,254,379,384 'pki的缺点就在于当人数越来越多的时候':166 'post':1439 'prof':1443 'proof':1050 'public':163 'q':29,39,44,373,533,796,826,881,924 'q.e.d':1370 'q/2':285,315,413,438,1005,1031,1042 'q/4':320 'queries':1092,1301 'r':35,59,63,77,263,273,280,310,459,611,677,732,840,937 'random的矩阵':23 'references':1431 'regev':1290 'regev下公钥的平均随机分布正好是完美契合的':503 'regev中':578 'regev公钥的平均分布看起来没什么用':498 'regev加密':560,741 'regev加密了':975 'regev加密系统':355,1382 'regev加密系统回顾':215 'regev模式的好处在于它的公钥部分':462 'regev模式的精髓在于':452 'regev的ibe架构':506 'regev的具体构造之后':508 'regev的核心就在于这个sis问题和它的解':546 'regev的精髓在于我们需要提前知道一个短的密钥':786 'regev的精髓在哪里':517 'regev的话':1170 'regev系统的密钥的时候':519 'regev进行ibe加密了':782 'rfloor':286,316,414,439,1006,1032,1043 'rightarrow':985 'rvert':662 's':235,247,308,388,401,410,993,1002,1011,1446,1450 'security':1049,1366 'shweta':1444 'simon':1449 'simulation':1207 'sis':1411 'sis的系统出现':348 'sk':185,193,206,245,294,375,422,1098,1188,1196,1202,1228,1318,1344,1351,1356 'summarized':1441 't':274,281,311,399,408,434,444,991,1000,1027,1037 'talk':1447 'text':194,371,531,794,824,879,922 'the':1435 'this':1438 'times':31,41 'transcript':1206 'trapdoor':1375 'trapdoor出场了':603 'trapdoor最直观的应用':132 'trapdoor来构造这个系统':214 'trapdoor的具体构造':10 'trapdoor的构造':20 'trapdoor的构造非常简单':128 'trapdoor计算密钥':828 'u':369,382,407,465,475,526,530,538,558,586,591,696,723,793,823,878,904,999 'vert':53,766,771,810,815,857,862,909,1269,1274,1328,1333 'x':332,391,393,403,411,441,446,995,1003,1014,1015,1034,1039 'z':28,38,266,667 '一个ibe系统就是把对方的id作为了加密的时候使用的公钥':203 '一个ibe系统的第一步就是生成它的公共参数了':671 '一个群体需要有一个信任的管理员':179 '一定是呈平均随机分布的':476 '一样':1413 '一种对策是我们像之前讨论多项式环下的ring':1410 '一种对策是我们像之前讨论多项式环下的ring-sis':1409 '一般讨论类似于ibe一样的加密系统的话':1051 '三个部分':887 '上':70 '上一期':8 '上期回顾':7 '下一期':1429 '下的dual':1169 '下的ibe公钥变成了一个纯随机生成':1360 '下的所有密文都基于困难的sis':1239 '下的身份加密':1376 '下面我们就来看看第一种ibe体系':628 '中':336,625 '为了保证这个ibe系统能够正常的运作':176 '为了方便我们ibe系统的构造':649 '为了方便我们对于ibe系统的展示和运算':657 '为了方便演示':1221 '为了能够成功的生成其他id下的sk':1302 '为什么这么说呢':500 '举个例子':1321 '之后':973 '之外的其他id的加密解密流程':1186 '也可以完全simulate':1190 '也可以完全模拟出ibe系统里其他id的transcript':1198 '也是没有trapdoor的':1284 '了':60,747 '了解完dual':507 '了解零知识的朋友都不陌生了':1194 '交互信息':1199 '从而计算':118 '他们的构造的公钥大小永远都是恒定在':1424 '他只需要他证明他是bob本人':174 '以上就是chkp10的ibe加密体系的全貌了':1046 '以便完成加密':1016 '以便我们进行dual':740 '但是到这里还没有结束':783 '但是在statistical':491 '但是在维度上来看':1416 '但是对于adversary一开始决定的':1163 '但是对于ibe系统来说至关重要':499 '但是当网上需要公钥加密的人越来越多之后':156 '但是我们不禁会发现一个弊端':1388 '但是我们又需要在不知道msk的情况下任意的构造出adversary提出的任意其他id对应的密钥':1177 '但是自带一个':608 '但是需要注意的是':1152 '体系':1378 '作为lwe的问题实例':481 '使得':789,801 '使得sis等式成立':565 '使得整个等式变成':896 '使用lattice':827 '假如我不知道':1195 '像这样的所有人都记住所有人的公钥的系统':161 '公共参数生成':670 '公钥':248,378 '公钥的存储成本非常大':168 '关于dual':497 '其他人就可以通过公钥加密了':154 '其实这种思路的ibe就是把原本随机生成的sis矩阵':569 '其次':1236 '具体方案如下':356 '具体是什么意思呢':146 '具体的regev加密的正确性和安全性':324 '具体的在这篇文章中就不多解释了':142 '写在篇尾':1371 '出来':1192 '创建密文':191 '初探全同态加密':223,326 '判断并输出':1124 '剩下原本的原文和一些小范围的噪音':342 '单向函数的反函数':617 '即':535,1088,1231 '即adversary提供任意的id':1081 '即一组':522 '即创建一个问题矩阵':230 '即安全性论证':1048 '即然说到了ibe':640 '即生成我们上文所述的mpk与msk':672 '原理很简单':1314 '发给adversary':1218 '只要并不是':1095 '只要我们的':1315 '只需要随机选择一个blinding':260 '可以参见':325 '可以总结出几点关键':1140 '同时':726 '同时公布mpk给所有人看':187 '同时其他的两个矩阵':841 '后门':609 '告诉我们我们可以构造一个看似随机的':605 '和':892 '和id有多少个bits是直接挂钩的':1400 '和一个单独的噪音值':392 '和一个向量':721 '和万能私钥':182 '和之前的构造相同':1008 '和任意挑选的一个':556 '和噪音':236 '和密钥短向量':364 '和对应的噪音':1012 '啦':1297 '噪音向量':389 '因为id这里有很多种含义':648 '因为lwe问题的困难度':330 '因为regev的密钥生成是生成一个lwe的实例':358 '因为噪音向量的分布我们控制的很小':318 '因为如果这个系统可以被攻破':1071 '因为工具矩阵':105 '因为我们可以把任何字符串或者编号转换为二进制':653 '因为我们可以通过':61 '因为我们的目的是为了解决一个困难问题':1153 '因为我们随机的挑选了平均分布的':467 '因为构造要求':1226 '图上所述的就是当id为两位的时候':698 '在adversary问完问题结束之后':1100 '在chkp10中':673 '在zhihu上有很多其他大佬对于ibe系统给出了非常详细的解读':143 '在了解怎么做之前':515 '在密钥生成的阶段':453 '在将近20年前被提出':210 '在这个game中我们作为challenger':1054 '在这个game中还存在着一个adversary':1060 '在这样的构造下':1178 '在这类问题中':1086 '在这里':656 '在这里我们给出一个很简单的解读方式':144 '基于diffie':148 '基于diffie-hellman的elgamal公钥加密系统我们都知道':147 '基于dual':505 '基于trapdoor':11 '基于格的identity':3 '基于格的identity-based':2 '基于这两条要求':1242 '大概就像上图所述':201 '太长了':1393 '她会基于mpk和bob的id':189 '如同上图所述':360 '如果adversary可以有效的攻破它':1066 '如果adversary可以破解基于':1285 '如果advesary可以破解基于':1167 '如果alice想要给bob发送消息的话':642 '如果alice给bob发消息':170 '如果任何人可以根据要加密的对象的id来构造一个sis的问题矩阵':548 '如果在学校里给别的同学发消息的话':645 '如果大家看过我之前的':222 '如果想要和任何其他人通讯':159 '如果我们加密选择的id是01的话':749 '如果我们可以在不知道msk和':1179 '如果我们要发送消息给一个256bits的地址':1402 '如果放到一张图上来说的话':200 '如果看过':343 '如果要解密的话':300 '它的目标是尝试攻破我们描述的ibe系统':1061 '实现了困难问题这一要求之后':1298 '对于id的每一个bit':683 '对于regev的加密体系进行了一个细小的变换':352 '对密文再进行解密':543 '对应每一位随机生成的':704 '对应的在解密的时候':204 '尝试猜出我们选择的':1129 '尝试解决一开始得到的困难问题':1134 '尤其是lattice':1374 '就像之前的图上所述':520 '就变成了计算基于':929 '就可以安全的交换消息了':199 '就可以把这些参数根据对应的id的值组合起来':743 '就可以构成':744 '就可以解开密文看到原文了':175 '就可以进行dual':974 '就大功告成':947 '就大功告成了':566 '就必须要记住别人的公钥':160 '就搞定了':697 '就是作为challenger本身':1144 '就是我们ibe系统的mpk了':725 '就是这个系统的msk':733 '就等于解决了所有ibe的应用了':655 '就行了':1313 '就需要轮到我们的lattice':602 '嵌入':513 '嵌入的方法不同':626 '带陷门的':700 '并不是uniform的':496 '并不是平均随机分布的':484 '并不需要提前记住bob的公钥':171 '并且仍然保留ibe的正确性':1213 '并且任何人都可以生成固定的':592 '并且发给id为01的人':966 '并且基于双线性配对已经有了很好的构造':211 '并且想办法嵌入到我们的':621 '并且把密文发送给adversary':1122 '并且满足':853 '并且看到了帮助我们构造ibe的dual':1381 '并且确保这三个矩阵是纯随机的':1255 '并且选择了高斯分布的':470 '当alice给bob发消息的时候':188 '当bob解密的时候':173 '当我们成功的构建':969 '当我们拿到了上面生成的公共参数之后':742 '当我们进行加密的时候':735 '得到了一个基于sis难度的系统':353 '想必大家都会知道':345 '成功的回答adversary提出的各种问题':1182 '我们一共需要生成6个关键元素':699 '我们上一期学到的trapdoor':604 '我们不会构建完整的一套security':1136 '我们不会生成任何lwe的实例':454 '我们举个例子':748 '我们之前学到的regev':328 '我们也不能还原出':1355 '我们了解了lattice':9 '我们了解了基于lattice构造':1373 '我们作为challenger需要能够回答来自adversary的一些问题':1079 '我们使用输入进来的困难问题作为它的公钥':1165 '我们假设':486,1222 '我们再来快速的回顾一下lattice':19 '我们再来看一下dual':516 '我们再来看一看密钥问题':1299 '我们再随机选取一个看得顺眼的':694 '我们加密一个bit的方式很简单':259 '我们发现':568 '我们只能生成一部分':1160 '我们只要使用':935 '我们只需要生成带有trapdoor的':1304 '我们只需要计算':301 '我们可以在不知道':1350 '我们可以安全的把密文':331 '我们可以就利用':1338 '我们可以把lwe问题伪装成一个ibe':1069 '我们可以把这个idea延伸到ibe上来':547 '我们可以有效的逆向计算基于sis与lwe的两个单向函数':12 '我们可以看到':202 '我们可以随机的选取':1243 '我们可能需要构造一个非常非常大的':1403 '我们回顾一下':1348 '我们在这里快速的回顾一下':226 '我们在选择dual':518 '我们定义id就是一个2':658 '我们就可以利用这个adversary来攻破sis':1368 '我们就可以把基于':85 '我们就可以构造我们的问题矩阵':46 '我们就定义id为一个长度为':650 '我们就来看一看abb10这一更加高效率的ibe构造':1430 '我们就来看一看构造吧':1220 '我们就来看看如何使用lattice':213 '我们就算不知道':1187 '我们就要先来看看这个id到底是什么东西':641 '我们就要回答对应这个id的私钥':1097 '我们已知了':834 '我们想使得':1237 '我们把':1358 '我们把ibe的构造设置为':1065 '我们把整个问题转化到ring中':1414 '我们来看看基于':1258 '我们来看看是怎么实现的':637 '我们根据adversary给出的答案':1133 '我们的security':1101 '我们的任务是尝试去':1055 '我们的安全性论证一般都会使用一个security':1052 '我们知道':473,784 '我们知道一个ibe系统下':510 '我们知道我们不可能会知道':1227 '我们称之为pki':162 '我们能否把这个regev加密系统转化成基于sis难度的系统呢':349 '我们能否消减这一增长的比例呢':1421 '我们观察可以发现':1394 '我们计算':429 '我们输出对应于这个id的ibe密钥':949 '我们还可以基于已知的困难问题':1215 '我们还需要一些额外的定义':177 '我们这里想必就要生成一个sis的实例了':359 '我们这里的ibe构造':219 '我们选取一个随机的lwe问题的解':386 '我们选取随机的':361 '我们选取随机的向量':1009 '我们通过msk和id提取出专门的密钥':205 '我们都是随意的挑选':579 '我们都生成两个随机矩阵':684 '我们随后就可以通过它来使用dual':781 '我们随机的选择':889 '我们需要先选择一个关键的sis问题实例':521 '我们需要创建一个lwe的问题实例':229 '我们需要可以把任意的id当作公钥进行加密':511 '我们需要回顾一下regev':217 '我们需要在不知道':1209 '我们需要找到一个长矩阵':852 '我们需要找到对应的':798 '我们需要有能力可以创建对应的':1147 '我们需要求解的就是这':882 '我们需要能够回答adversary提出的密钥问题':1145 '我们需要计算出这个id对应的密钥':830 '我们需要返回过去对应这个id的ibe加密矩阵':1082 '我们需要选择一个uniform':22 '我们首先需要使用我们上一期讲到的trapdoor的方法':674 '所以':1280 '所以只需要解决二进制下的id':654 '所以我们可以很简单的提取出原文':448 '所以我们可以很轻易的求解':109 '所以我们可以很轻松的从密文中移除':338 '所以我们可以直接通过观察结果的值是否小于':319 '所以我们需要想办法在密文和密钥中':512 '所以我们需要把这个问题嵌入到security':1156 '所有人只需要记住mpk和接收消息的人的id':198 '把这个问题用图描述出来':567 '拥有id的这个人如何掌握这么个密钥':562 '拼接起来':759 '挑战':1056 '接下来':130,829,1219 '接下来我们只要搞清楚':561 '接下来我们就可以尝试基于它来实现ibe了':509 '接下来是最重要的部分':1047 '提前计算好了':589 '放到ibe的场景中来的话':1158 '整个系统就变得非常没有效率':167 '整个群组中拥有msk的管理员会计算出这个':963 '整个证明的核心在于两点':1349 '既然有基于lwe的系统出现':346 '是0还是1':323 '是computationally和平均分布相似的':490 '是不是非常的有即视感':600 '是纯平均随机分布的':466 '是随机生成的':850 '替换成了一个任何人可以efficiently生成的这么一个ibe矩阵':572 '最后':693,948,1132 '最后会得到一个长条形的':777 '最后得到的ibe也不同':627 '最后我们计算':239 '本文内容主要参考于iit':1432 '来':450 '来判断':321 '来增加随机性':460 '来把':64 '来构造':938 '来用作ibe加密的矩阵':1407 '来解密':196 '来计算':1022 '来进行dual':559 '构造一个困难的密文':1216 '构造其他的id的密钥':1212 '格密码学进阶03':1 '概率分布':492 '模拟':1191 '此外':1214 '每个人都有属于自己的一串乱码公钥':158 '比如lwe':1058,1077 '比如sis':1154 '比较可行的方式就是':1159 '求解':926 '没有trapdoor':1361 '没有trapdoor的存在':1256 '满足sis呢':599 '然后再计算':584 '然后再计算出':944 '然后再选择一个高斯分布的短矩阵':33 '然后发送给challenger':1108 '然后基于':1114 '然后我们可以对着这个sis问题的题面':534 '然后我们计算':394 '然后整个game可以被描述为':1062 '然后计算':269 '然后让adversary去尝试攻破它':1064 '然后随机选择一个密钥':233 '然而作为密钥生成方我们知道lwe问题的解':337 '然而这一特性dual':502 '现在':1395 '现在我们反了过来':588 '现在我们的问题明确了':1208 '生成id矩阵':734 '生成一个带有trapdoor':675 '用于加密的矩阵':1389 '由于之前讲过了':976 '由于后两项都为噪音分布空间中很小的值':447 '由于普通的dual':577 '由于篇幅原因':1135 '由于这三个矩阵都是没有trapdoor的':1279 '的':587,1427 '的dual':1289 '的ibe加密矩阵':1262 '的sis':615,933,1295,1362 '的trapdoor':730,1151,1235 '的trapdoor来生成':1343 '的二进制字串':652 '的值':895,1131 '的值构造密文':1116 '的前提下':1181,1211 '的单向函数问题':88,98 '的增长':1420 '的密钥':1175 '的层面上':493 '的情况下生成其他所有id的密钥':1353 '的构造中有任何一个带有trapdoor的矩阵':1319 '的结构公开已知':108 '的话':1200 '的长度':1399 '的阶段才能生成一对乱码一样的公钥和私钥':152 '的随机矩阵':678 '相比起regev是在密钥生成阶段就锁定了唯一的一个lwe实例':456 '相比起普通regev模式下的公钥':477 '真正在使用场景中':962 '矩阵':1364 '矩阵和对应每一个bit的':754 '稍微总结一下这一期的内容':1379 '第一点我们已经提到过了':1143 '第一类问题是公钥问题':1080 '第二类问题就是密钥问题':1090 '等等':647 '简单的画了个图描述了一下整个security':1073 '管理员可以通过msk来给每个人签发基于每个人名字的私钥':184 '精髓就基于regev':220 '系列的话':224 '给出了一个非常优雅的基于lattice的ibe构造':636 '罢了':576 '而在加密阶段选择一个随机的向量':457 '而是直接把消息加密在bob的名字下面':172 '而是着重于focus在challenger与adversary的交互上':1138 '而这个实例是在加密的过程中被随机选择出来的':455 '虽然在dlwe假设中':485 '虽然构造非常优雅':1387 '观察这个game当中的交互之后':1139 '解决一个公认的难题':1057 '解决方案十分简单':888 '解决的方法很简单':1303 '解密和之前也是一样的':1018 '解密和之前是一样的':428 '计算':367 '让我们可以有效的计算基于':612 '设计也很巧妙':129 '说到模拟的概念':1193 '身份加密':6,133,135 '转换为基于':95 '转换到到工具矩阵':67 '这6个关键元素':724 '这一专题':327 '这一期':212,1372 '这一期我们来看看基于lattice':131 '这一构造意味着什么呢':1172 '这一消息来说是零知识的':1204 '这一点对于整个ibe体系的实际应用是毁灭性的':1408 '这一点相比起chkp10是非常大的突破':1428 '这一项':341 '这个时候':601 '这个矩阵对应的trapdoor就是矩阵':57 '这个矩阵的trapdoor':838 '这个管理员拥有整个群体的万能公钥':180 '这个过程中':1093 '这么个id的值进去':514 '这也就代表了':1401 '这也就代表了我们并不知道msk':1230 '这也就代表它可以破解基于':1291 '这也就是说':544,851,1146 '这也间接的要求了我们不能知道整个ibe系统的msk':1176 '这代表了就算知道了其他所有id的密钥':1354 '这代表我们作为challenger本身并不能知道':1173 '这其实就是变相地说':1068 '这对于之后的安全性证明帮助非常大':504 '这就意味着这个ibe系统中':1183 '这就是chkp10':1346 '这是因为ibe系统中我们要求任何id都可以当作加密使用的公钥':501 '这样一来':776,925,1166,1257 '这样一来这个人就可以解开所有发给01的密文了':967 '这样可以减少一点矩阵存储和相乘运算的开支':1415 '这样如果存在可以破解我们ibe':1365 '这样的系统虽然可行':155 '这样的话':197 '这里也一样':797 '这里就快速的带过':977 '这里我们当然也要构造这么一个':618 '进而证明我们提出的ibe的系统的安全性':1070 '进行regev公钥加密':539 '进行解密':208 '通过这个构造':84 '那么他们就可以基于这个':552 '那么代表我们也可以利用adversary来破解构造它的困难问题了':1171 '那么就代表它对应的lwe问题也能被攻破':1072 '那么我们就可以利用adversary输出的结果来解决我们想要解决的lwe问题':1067 '那么我们就可以把':750 '那么我们怎么才能让拥有id的人得到一个有效的':596 '那么肯定就会有基于lwe的小兄弟':347 '那么这个id就是一个字符串':643 '那么这个id很有可能就是收件人的学号':646 '那就代表其他的id下的加密解密的transcript对于':1201 '那应该会对基于lwe的regev加密系统有一定的了解':225 '那我们就可以生成整个sk啦':1320 '问题':1241 '除了':1184 '随后':45,682,1059 '随后bob就可以通过他专属的':192 '随后challenger会随机选择一个bit':1109 '随后可以根据这个sis问题的解':540 '随后在最后面我们看到了这一结构的安全证明和对应的security':1384 '随后开始ibe系统的构造':1078 '随后我们把公钥公布出来之后':153 '随后我们看到了chkp10提出的ibe的结构':1383 '随后我们输出密文为':288 '随后我们输出私钥':244,374 '随后输出':416 '隐藏在一个看似随机的向量':333 '难免会遇到很大的问题':157 '需要提前经过密钥生成':150 '首先':21,178,216,228,639,833,1075,1142,1225 '首先我们了解了ibe大概的定义':1380 '首先我们需要根据加密的id计算出对应的':736		
90	[译] Python 为什么要在 18 年前引入布尔类型？且与 C、C++ 和 Java 都不同？	{"ver":2,"uid":1,"hash":"SHA1:908361a9f9d98f466c849b036bf03699a287e18a"}	https://toutiao.io/k/h40ys77	2020-08-14 06:10:09	[译] Python 为什么要在 18 年前引入布尔类型？且与 C、C++ 和 Java 都不同？	108f9d097a6bfef88dd7b2dbb1a4aa0bf2d4d300	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.396659	0			'18':4,15 'c':7,8,18,19 'java':10,21 'python':2,13 '且与':6,17 '为什么要在':3,14 '和':9,20 '年前引入布尔类型':5,16 '译':1,12 '都不同':11,22	zh	
79	Vitamin D, part 1: back to basics	{"ver":2,"uid":1,"hash":"SHA1:37068fabdfb99dd9e85001bf8a6837298f603038"}	https://www.devaboone.com/post/vitamin-d-part-1-back-to-basics	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24138590"> https://news.ycombinator.com/item?id=24138590 </a>	88de1b22b5067961dbdc7e49b2f9140325ab744b	\N	f	2020-08-14 05:06:00	2020-08-14 23:10:07.405036	0			'/item?id=24138590':11 '1':4 'back':5 'basic':7 'comment':8 'd':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24138590':9 'part':3 'vitamin':1	zh	conorh
83	That coworker who never stops refactoring	{"ver":2,"uid":1,"hash":"SHA1:8efefa6159519a9d3408b3f2ade8728222e47d8b"}	https://critter.blog/2020/08/11/that-coworker-who-never-stops-refactoring/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24120359"> https://news.ycombinator.com/item?id=24120359 </a>	7dd789cb45ae2f86ea35a72bc80935067a8a7f86	\N	f	2020-08-14 05:06:00	2020-08-14 12:10:08.317121	0			'/item?id=24120359':10 'comment':7 'cowork':2 'never':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24120359':8 'refactor':6 'stop':5	zh	mcrittenden
91	TypeScript 设计模式之工厂方法	{"ver":2,"uid":1,"hash":"SHA1:924ab02693be34c390e11c90e1ec8efff5c50784"}	https://toutiao.io/k/p280wsr	2020-08-14 06:10:09	TypeScript 设计模式之工厂方法	4f1ac6e77b41154446938217174c1f8c893fe40c	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.398936	0			'typescript':1,3 '设计模式之工厂方法':2,4	zh	
93	TypeScript 实战总结之实现一个互联网黑白墙	{"ver":2,"uid":1,"hash":"SHA1:1d84f4ca9ade469342390b7818dbae986325ac42"}	https://toutiao.io/k/zh8z9mo	2020-08-14 06:10:09	TypeScript 实战总结之实现一个互联网黑白墙	de02ae4ef597347ba3ed7d84cf5b100438a630e6	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.403168	0			'typescript':1,3 '实战总结之实现一个互联网黑白墙':2,4	zh	
89	[推荐] 快速入门数据结构和算法	{"ver":2,"uid":1,"hash":"SHA1:765fd12ff75016715e9ec841bb7ee86f59d31286"}	https://toutiao.io/k/vkyzxyw	2020-08-19 01:10:08	[推荐] 快速入门数据结构和算法	5acd3cf27e5c22282c393d35b9171fd1f3d2f2e6	\N	f	2020-08-14 05:06:00	2020-08-28 15:10:10.983241	0			'快速入门数据结构和算法':2,4 '推荐':1,3	zh	
82	Bertrand Russell's argument for idleness is more relevant than ever	{"ver":2,"uid":1,"hash":"SHA1:4f15481056b593fdefc552e97c4244310e0192b2"}	https://www.newstatesman.com/2020/08/why-bertrand-russells-argument-idleness-more-relevant-ever	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24128366"> https://news.ycombinator.com/item?id=24128366 </a>	9a1a16bcafb709122059ee5bbbd9b369fb39d036	\N	f	2020-08-14 05:06:00	2020-08-14 06:10:09.590205	0			'/item?id=24128366':15 'argument':4 'bertrand':1 'comment':12 'ever':11 'idl':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24128366':13 'relev':9 'russel':2	zh	pepys
95	今晚发车，赶紧上车吧！	{"ver":2,"uid":1,"hash":"SHA1:811a29420d78f6856fba01f8053e2dbf37bb7dd4"}	https://toutiao.io/k/hmqka5v	2020-08-14 06:10:09	今晚发车，赶紧上车吧！	f36e2e416bd2346010766e374b85e7ffc6b3b5c5	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.405491	0			'今晚发车':1,3 '赶紧上车吧':2,4	zh	
84	Never use a dependency that you could replace with an afternoon of programming	{"ver":2,"uid":1,"hash":"SHA1:236221fee10f3d8e88245da65af620f709b9d1bc"}	https://blog.carlmjohnson.net/post/2020/avoid-dependencies/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24123878"> https://news.ycombinator.com/item?id=24123878 </a>	3866bdf18337b48351cafa7bc78763d62ceee4a1	\N	f	2020-08-14 05:06:00	2020-08-14 06:10:09.594035	0			'/item?id=24123878':17 'afternoon':11 'comment':14 'could':7 'depend':4 'never':1 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24123878':15 'program':13 'replac':8 'use':2	zh	earthboundkid
96	手写 Dubbo（一）：基本原理	{"ver":2,"uid":1,"hash":"SHA1:86fe0713a51f8762ffe19ca7a05fd9cdf4b6fabf"}	https://toutiao.io/k/3lpyk3p	2020-08-14 06:10:09	手写 Dubbo（一）：基本原理	ae713602b62773e35cfd15a05534020ac9b4cc1f	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.410583	0			'dubbo':2,6 '一':3,7 '基本原理':4,8 '手写':1,5	zh	
733	Apache Kafka 2.6.0 有哪些值得关心的变化	{"ver":2,"uid":1,"hash":"SHA1:d849ea419f2976d48931d5c2483bc020b8f17772"}	https://toutiao.io/k/0lo61oa	2020-08-29 02:10:09	Apache Kafka 2.6.0 有哪些值得关心的变化	333e7f4c0a8f91a00bf14dc31a63d1578c294250	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.205963	0			'2.6.0':3,7 'apache':1,5 'kafka':2,6 '有哪些值得关心的变化':4,8	zh	
92	漫谈分布式系统（二十一）：基于代价的优化	{"ver":2,"uid":1,"hash":"SHA1:6323aad6e866e8dd38662d26d03a19d02cb94d58"}	https://toutiao.io/k/ssyf7ey	2020-08-14 06:10:09	漫谈分布式系统（二十一）：基于代价的优化	b6109af4a53570af20ed25c6cba828231e78b368	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.40107	0			'二十一':2,5 '基于代价的优化':3,6 '漫谈分布式系统':1,4	zh	
734	移动端 1px 问题解决方案	{"ver":2,"uid":1,"hash":"SHA1:7e7ea4b8bef39f280ae87129368e337b85252179"}	https://toutiao.io/k/lrr0wyo	2020-08-29 02:10:09	移动端 1px 问题解决方案	99b8b21c8e0fc6018f62ec9d6b096e94326c3174	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.21629	0			'1px':2,5 '移动端':1,4 '问题解决方案':3,6	zh	
104	NTLM 的基操	{"ver":2,"uid":1,"hash":"SHA1:04e7efff50a215b3c3211e18a27707f33c931676"}	https://toutiao.io/k/8v99f45	2020-08-14 06:10:09	NTLM 的基操	56ef1960f4480ebd9202ca63db7ff49491db4510	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.423844	0			'ntlm':1,3 '的基操':2,4	zh	
97	Chrome 扩展插件数次审核被拒的惨痛经历	{"ver":2,"uid":1,"hash":"SHA1:308374c4d99d5eb35ab4eb1cc1af37825914cd7d"}	https://toutiao.io/k/yzroche	2020-08-14 06:10:09	Chrome 扩展插件数次审核被拒的惨痛经历	4fbcc8d8e96dfe338371735f4d5445ad2b75c5a4	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.425851	0			'chrome':1,3 '扩展插件数次审核被拒的惨痛经历':2,4	zh	
113	[推荐] 微服务重构四步法	{"ver":2,"uid":1,"hash":"SHA1:f360639c9ad56b7d043b4b33d6ad5485211b2ba9"}	https://toutiao.io/k/n7sr1fy	2020-08-14 06:10:09	[推荐] 微服务重构四步法	d038dc7a6b0811e79092c939031417e20105d6b7	\N	f	2020-08-14 05:06:00	2020-08-17 15:10:09.491085	0			'微服务重构四步法':2,4 '推荐':1,3	zh	
108	[推荐] 技术管理的世界观	{"ver":2,"uid":1,"hash":"SHA1:41ff6ed6fe0b9d8544f9c40a89fcedb44fc4d195"}	https://toutiao.io/k/psqbtvs	2020-08-14 07:10:09	[推荐] 技术管理的世界观	a4fcde24da8c6bcd9d0ddc9e0865c7b1c2e78d2a	\N	f	2020-08-14 05:06:00	2020-08-19 12:10:09.105323	0			'技术管理的世界观':2,4 '推荐':1,3	zh	
612	Firefox 80	{"ver":2,"uid":1,"hash":"SHA1:a135aab6dbe7d0e77dd0fbd1306694549da95898"}	https://www.mozilla.org/en-US/firefox/80.0/releasenotes/	2020-08-25 22:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24271493"> https://news.ycombinator.com/item?id=24271493 </a>	318bab2ada0afeeccdbd6161d378ca95d7271286	\N	f	2020-08-25 22:10:00	2020-08-27 20:10:10.199691	0			'/item?id=24271493':6 '80':2 'comment':3 'firefox':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24271493':4	zh	amake
100	听说同学你搞不懂 Java 的 LinkedHashMap，可笑	{"ver":2,"uid":1,"hash":"SHA1:323cbbca2f8cbfcbc362f241ece7b549e1fea45d"}	https://toutiao.io/k/x0xsvse	2020-08-14 06:10:09	听说同学你搞不懂 Java 的 LinkedHashMap，可笑	74356fa7fd2e026d70ea636a8ff030da9a9ece9e	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.4176	0			'java':2,7 'linkedhashmap':4,9 '可笑':5,10 '听说同学你搞不懂':1,6 '的':3,8	zh	
110	[推荐] 监控系统选型，这篇不可不读	{"ver":2,"uid":1,"hash":"SHA1:a01633f9244060fd960c316424c25b1fbe883830"}	https://toutiao.io/k/cg7r5ft	2020-08-14 06:10:09	[推荐] 监控系统选型，这篇不可不读	ec61fcdba9ad8a60a649d0aabb24b1a46b298856	\N	f	2020-08-14 05:06:00	2020-08-19 15:10:10.112132	0			'推荐':1,4 '监控系统选型':2,5 '这篇不可不读':3,6	zh	
107	[推荐] 超全实用图片工具网站列表	{"ver":2,"uid":1,"hash":"SHA1:c490f104b18d7df2a9283f075023b49c82b47a48"}	https://toutiao.io/k/mx00oaq	2020-08-14 06:10:09	[推荐] 超全实用图片工具网站列表	ab28d54bd9df28a955045a6c4424615dd9ef1d94	\N	f	2020-08-14 05:06:00	2020-08-17 15:10:09.50821	0			'推荐':1,3 '超全实用图片工具网站列表':2,4	zh	
103	小步快跑，快速迭代：安全运营的器术法道	{"ver":2,"uid":1,"hash":"SHA1:d82c23dc803de579e4abe0145ce8b848b68389c3"}	https://toutiao.io/k/p9zq1tc	2020-08-14 06:10:09	小步快跑，快速迭代：安全运营的器术法道	983c61c0b6ce397c62f24d7dfb7dd665eadadd79	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.419545	0			'安全运营的器术法道':3,6 '小步快跑':1,4 '快速迭代':2,5	zh	
102	提前批算法工程师面试之路	{"ver":2,"uid":1,"hash":"SHA1:b5e48b07286cbf000e97bea41e5055605f007235"}	https://toutiao.io/k/33s0h78	2020-08-14 06:10:09	提前批算法工程师面试之路	5e7f543a85ce24790d61920122af449acda3b089	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.4216	0			'提前批算法工程师面试之路':1,2	zh	
105	[推荐] 技术分享之 Golang 构建分布式任务系统	{"ver":2,"uid":1,"hash":"SHA1:3a0c0d56b27739567c1997f70a0932a4bbbacf07"}	https://toutiao.io/k/m7jtpvi	2020-08-14 06:10:09	[推荐] 技术分享之 Golang 构建分布式任务系统	bbacbd962501361390b0183c32ab530ab396b2cf	\N	f	2020-08-14 05:06:00	2020-08-18 13:10:10.60036	0			'golang':3,7 '技术分享之':2,6 '推荐':1,5 '构建分布式任务系统':4,8	zh	
98	Flexbox 最全图文指南	{"ver":2,"uid":1,"hash":"SHA1:dc6a51d18010db0aab12b3c04300ff583ae9203f"}	https://toutiao.io/k/vo5ewx7	2020-08-14 06:10:09	Flexbox 最全图文指南	3b5878f54ce909d111533470879ba0dd8699f5fb	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.413156	0			'flexbox':1,3 '最全图文指南':2,4	zh	
611	OpenZFS Merged to FreeBSD	{"ver":2,"uid":1,"hash":"SHA1:6cb8a455a88ed70f49941d9752aa1c6530dd9d3b"}	https://svnweb.freebsd.org/base?view=revision&revision=364746	2020-08-25 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24267667"> https://news.ycombinator.com/item?id=24267667 </a>	59db921d2cec48101c832a7c23646117d3bfa279	\N	f	2020-08-25 20:10:00	2020-08-27 20:10:10.210259	0			'/item?id=24267667':8 'comment':5 'freebsd':4 'merg':2 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24267667':6 'openzf':1	zh	swills
80	Court dismisses Genius lawsuit over lyrics-scraping by Google	{"ver":2,"uid":1,"hash":"SHA1:1aa76e39f25f75fb35eaf2596761a67d0e04e711"}	https://techcrunch.com/2020/08/11/court-dismisses-genius-lawsuit-over-lyrics-scraping-by-google/	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24127778"> https://news.ycombinator.com/item?id=24127778 </a>	3728671aa2222ebb723b3e4ace422263fbb6e64f	\N	f	2020-08-14 05:06:00	2020-08-14 21:10:09.151034	0			'/item?id=24127778':14 'comment':11 'court':1 'dismiss':2 'genius':3 'googl':10 'lawsuit':4 'lyric':7 'lyrics-scrap':6 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24127778':12 'scrape':8	zh	fortran77
99	特征工程：类别特征的常见处理方式（含代码）	{"ver":2,"uid":1,"hash":"SHA1:3497367ff67dfa0cca772f3f1b413b223fb85e6e"}	https://toutiao.io/k/rtkzlgl	2020-08-14 06:10:09	特征工程：类别特征的常见处理方式（含代码）	661c916233e80ec0e711409fb6b7fe5e2116bf99	\N	f	2020-08-14 05:06:00	2020-08-15 01:10:08.415499	0			'含代码':3,6 '特征工程':1,4 '类别特征的常见处理方式':2,5	zh	
601	迁移性好、多用途，港中文提出特征分离的无监督人类三维姿态表征	{"ver":2,"uid":1,"hash":"SHA1:a97e0acc8b6cd995c09d6f1ab287806a5d0f9ec5"}	https://toutiao.io/k/zlzk8wh	2020-08-25 05:10:10	迁移性好、多用途，港中文提出特征分离的无监督人类三维姿态表征	abf20445e5318ede6ccfadac335245be884b7bab	\N	f	2020-08-25 05:10:00	2020-08-26 00:10:09.79566	0			'多用途':2,5 '港中文提出特征分离的无监督人类三维姿态表征':3,6 '迁移性好':1,4	zh	
119	[推荐] 面试官：说一下你常用的加密算法	{"ver":2,"uid":1,"hash":"SHA1:7e6319021b3b804960226e2dd3b0bf7b445cbe2a"}	https://toutiao.io/k/z7rw71k	2020-08-14 08:10:08	[推荐] 面试官：说一下你常用的加密算法	a3b31c2ccdc7e7f6517a577e965ea67aec49c168	\N	f	2020-08-14 05:06:00	2020-08-16 14:10:08.71726	0			'推荐':1,4 '说一下你常用的加密算法':3,6 '面试官':2,5	zh	
106	[推荐] 分布式事务内幕	{"ver":2,"uid":1,"hash":"SHA1:61d1b4b780e34cfab2ced4e316c0f4282d466a17"}	https://toutiao.io/k/82orv6z	2020-08-14 06:10:09	[推荐] 分布式事务内幕	1ba510ba68758df4bc70fe0c02313821f35adcf9	\N	f	2020-08-14 05:06:00	2020-08-24 16:10:11.814168	0			'分布式事务内幕':2,4 '推荐':1,3	zh	
580	Patrick Collison's Questions	{"ver":2,"uid":1,"hash":"SHA1:b8e255ca76cb1cb065ae7884fe1de815afb806c1"}	https://patrickcollison.com/questions	2020-08-24 14:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24256676"> https://news.ycombinator.com/item?id=24256676 </a>	abca574b6f1ab60be5c560bdf3a5e38139fea00f	\N	f	2020-08-24 14:10:00	2020-08-27 20:10:10.208188	0			'/item?id=24256676':8 'collison':2 'comment':5 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24256676':6 'patrick':1 'question':4	zh	apsec112
116	[推荐] 我 C，MySQL 双主架构，原来能这么玩	{"ver":2,"uid":1,"hash":"SHA1:e48f888a55918f7f17433c2d5390b518ba7c09d8"}	https://toutiao.io/k/rcfibi5	2020-08-14 06:10:09	[推荐] 我 C，MySQL 双主架构，原来能这么玩	b4ed23024fb67844c7a6efd25c69e075bcdee401	\N	f	2020-08-14 05:06:00	2020-08-14 16:10:08.148442	0			'c':3,9 'mysql':4,10 '原来能这么玩':6,12 '双主架构':5,11 '我':2,8 '推荐':1,7	zh	
109	[推荐] Go 调试分析的高阶技巧	{"ver":2,"uid":1,"hash":"SHA1:65b44f713d2a69818a94d71853c4eab05b94f03d"}	https://toutiao.io/k/onlqg3p	2020-08-14 06:10:09	[推荐] Go 调试分析的高阶技巧	fcc2727554bb972664b96be6ba3a692c29875776	\N	f	2020-08-14 05:06:00	2020-08-17 15:10:09.506228	0			'go':2,5 '推荐':1,4 '调试分析的高阶技巧':3,6	zh	
117	[推荐] 100% 展示 MySQL 语句执行的神器：Optimizer Trace	{"ver":2,"uid":1,"hash":"SHA1:fb43233037f5a194106b5bbea87861794ab72dda"}	https://toutiao.io/k/gfbzndp	2020-08-14 08:10:08	[推荐] 100% 展示 MySQL 语句执行的神器：Optimizer Trace	a7f639116ef0b0b29e0fe497c5fa6dcef9d3bdea	\N	f	2020-08-14 05:06:00	2020-08-19 13:10:10.946763	0			'100':2,9 'mysql':4,11 'optimizer':6,13 'trace':7,14 '展示':3,10 '推荐':1,8 '语句执行的神器':5,12	zh	
270	What's the future of Servo?	{"ver":2,"uid":1,"hash":"SHA1:69f7c048deeef5a210d647a4188fc60f9ed11415"}	https://github.com/servo/servo/discussions/27575	2020-08-14 23:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24156504"> https://news.ycombinator.com/item?id=24156504 </a>	e9bab87913f232200241ca931f243d47576b408a	\N	f	2020-08-14 23:10:00	2020-08-18 02:10:08.411611	0			'/item?id=24156504':10 'comment':7 'futur':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24156504':8 'servo':6	zh	theBashShell
118	[推荐] 超长 JVM 总结，面试必备	{"ver":2,"uid":1,"hash":"SHA1:29a8b5226f678f4a065ab198a681d45b1ce1a0fa"}	https://toutiao.io/k/hxtorn1	2020-08-14 06:10:09	[推荐] 超长 JVM 总结，面试必备	68752cd332042a5fe2127f1e35615ab0cedd1d02	\N	f	2020-08-14 05:06:00	2020-08-19 15:10:10.136253	0			'jvm':3,8 '总结':4,9 '推荐':1,6 '超长':2,7 '面试必备':5,10	zh	
115	[推荐] 京东商城，超大型电商系统架构设计原则与实践！8 页 ppt 详解	{"ver":2,"uid":1,"hash":"SHA1:9d18fda69ec5551b54038ca4505002e100ac3fcf"}	https://toutiao.io/k/wiujwft	2020-08-14 06:10:09	[推荐] 京东商城，超大型电商系统架构设计原则与实践！8 页 ppt 详解	0e29aa3ad21f71254698a1de7cc0846148efb758	\N	f	2020-08-14 05:06:00	2020-08-19 15:10:10.145634	0			'8':4,11 'ppt':6,13 '京东商城':2,9 '推荐':1,8 '详解':7,14 '超大型电商系统架构设计原则与实践':3,10 '页':5,12	zh	
354	Next-Generation IBM POWER10 Processor	{"ver":2,"uid":1,"hash":"SHA1:b10770a687343e6589dd5997ced85e6e4b5ab257"}	https://newsroom.ibm.com/2020-08-17-IBM-Reveals-Next-Generation-IBM-POWER10-Processor	2020-08-17 22:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24184786"> https://news.ycombinator.com/item?id=24184786 </a>	4dc41d962ced4a57c1965677c6b30875d422083a	\N	f	2020-08-17 19:10:00	2020-08-19 17:10:08.88947	0			'/item?id=24184786':10 'comment':7 'generat':3 'ibm':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24184786':8 'next':2 'next-gener':1 'power10':5 'processor':6	zh	mbrobbel
341	[推荐] MySQL 事务熟练使用就够？和腾讯大佬的一席对话，原来考点都在这些方面	{"ver":2,"uid":1,"hash":"SHA1:b14d064b79a35dcb3c7ccc0fdb7e1c291e3c8226"}	https://toutiao.io/k/lmtdqk1	2020-08-17 03:10:08	[推荐] MySQL 事务熟练使用就够？和腾讯大佬的一席对话，原来考点都在这些方面	a6f4d3f678e4b29b1ae23f55e3117728d0182894	\N	f	2020-08-17 03:10:00	2020-08-25 15:10:10.042331	0			'mysql':2,7 '事务熟练使用就够':3,8 '原来考点都在这些方面':5,10 '和腾讯大佬的一席对话':4,9 '推荐':1,6	zh	
942	Justice Dept. plans to file antitrust charges against Google in coming weeks	{"ver":2,"uid":1,"hash":"SHA1:9c6094bbb2de06fbe6077502ea48d53ca0057a99"}	https://www.nytimes.com/2020/09/03/us/politics/google-antitrust-justice-department.html	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24367780"> https://news.ycombinator.com/item?id=24367780 </a>	b3a99df896c352d67ec4e650306243e9c8e44cd4	\N	f	2020-09-04 20:10:00	2020-09-07 06:10:13.460901	0			'/item?id=24367780':16 'antitrust':6 'charg':7 'come':11 'comment':13 'dept':2 'file':5 'googl':9 'justic':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24367780':14 'plan':3 'week':12	zh	mitchbob
88	[推荐] 打造 Mac OS 最强终端利器 iTerm2	{"ver":2,"uid":1,"hash":"SHA1:8d364c89511f91125c01bfcff098e69ac0a48431"}	https://toutiao.io/k/9ujm1ju	2020-08-18 15:10:10	[推荐] 打造 Mac OS 最强终端利器 iTerm2	4fdf734426a164b26da918f0778fbe69fedc4e80	\N	f	2020-08-14 05:06:00	2020-08-28 15:10:10.962536	0			'iterm2':6,12 'mac':3,9 'os':4,10 '打造':2,8 '推荐':1,7 '最强终端利器':5,11	zh	
869	Lesser-known Web APIs	{"ver":2,"uid":1,"hash":"SHA1:67869a6bfe9d37e2696a557be273080b433e5c10"}	https://blog.greenroots.info/10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn	2020-09-02 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24350647"> https://news.ycombinator.com/item?id=24350647 </a>	fa170a680ef7a44afa7658effc15bfb56240dbba	\N	f	2020-09-02 20:10:00	2020-09-04 19:10:09.008058	0			'/item?id=24350647':9 'api':5 'comment':6 'known':3 'lesser':2 'lesser-known':1 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24350647':7 'web':4	zh	Sandeepg33k
22	Complementary engineering indicators	{"ver":2,"uid":1,"hash":"SHA1:accc83e2c96b7ea9d3241ffc87dcdbea26181ff5"}	https://dave.cheney.net/2019/12/04/complementary-engineering-indicators	2019-12-04 10:04:55	\n<p>Last year I had the opportunity to watch Cat Swetel&#8217;s presentation <em><a href="https://www.youtube.com/watch?v=cW3yM-K2M08">The Development Metrics You Should Use (but Don’t)</a></em>. The information that could be gleaned from just tracking the start and finish date of work items was eye opening. If you&#8217;re using an issue tracker this information is probably already (perhaps with some light data munging) available &#8212; no need for TPS reports. Additionally, statistics obtained by data mining your project&#8217;s issue tracker are, perhaps, less likely to be juked.</p>\n\n\n\n<p>Around the time I saw Cat&#8217;s presentation I finished reading Andy Grove&#8217;s <em>High Output Management</em>. The hidden gem in this book (assuming becoming a meeting powerhouse isn&#8217;t your bag) was Grove&#8217;s notion of indicator pairs. An example of a paired indicator might be the number of sales deals closed paired with the customer retention rate. The underling principle being optimising for one indicator will have an adverse impact on the other. In the example, overly aggressive or deceptive tactics could superficially raise the number of sales made, but would be reflected in a dip in the retention rate as customers returned the product or terminated their service prematurely.</p>\n\n\n\n<p>These ideas lead me to thinking about indicators you could use for a team delivering a software product. Could those indicators be derived cheaply from the hand to hand combat of software delivery? Could they be structured in a way that aggressively pursuing one metric would be reflected negatively in another? I think so.</p>\n\n\n\n<p>These are the three metrics that I&#8217;ve been using to track the health of the project that I lead.</p>\n\n\n\n<ul><li>Date; was the software done when we said it would be done. If you prefer this indicator as a scalar, how many days difference is there between the ship date agreed on at the start of the sprint/milestone/whatever and what was the actual date that you considered it done.</li><li>Completeness; when the software is done, how many of the things we said we&#8217;re going to do actually got delivered in that release.</li><li>Defects reported; once the software is in the field, what is the rate of bugs reported.</li></ul>\n\n\n\n<p>It is relatively easy, for example, to hit a delivery date if you aggressively descope anything risky or simply don&#8217;t do it. But in doing so this lack of promised functionality would impact the completeness metric.</p>\n\n\n\n<p>Conversely, it&#8217;s straight forward to hit your milestone&#8217;s completeness target if you let the release date slip and slip. Bringing both the metics into line requires good estimation skills to judge how much can be attempted in milestone and provide direct feedback if your estimation skills needed work.</p>\n\n\n\n<p>The third indicator, defects reported in the field, acts as a check on the other two. It would be easy to consistent hit your delivery date with 100% feature completion if your team does a shoddy job. The high fives and :tada: emojis will be short lived if each release brings with it a swathe of high priority bug reports. This indicator also tends to have a second order effect, rushed features to meet a deadline tend to generate remedial work in the following milestones, crowding out promised work or blowing later deadlines.</p>\n\n\n\n<p>I consider these to be complementary metrics, they should be considered together, as a group, rather than individually. Ideally your team should be delivering what you promised, when you promised it, with a low defect rate. But more importantly, if that isn&#8217;t the case, if one of the indicators is unhealthy, addressing it shouldn&#8217;t result in the problem moving to another.</p>\n	946d4a76e01ace63afa22fd1798f5b6fbf20d804	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.231023	0			'100':474 'a':112,129,183,211,214,237,291,368,457,481,500,513,521,553,572 'about':205 'acts':455 'actual':315 'actually':339 'additionally':69 'addressing':592 'adverse':157 'aggressive':166 'aggressively':240,373 'agreed':303 'already':56 'also':509 'an':49,126,156 'and':36,311,416,437,487 'andy':98 'another':249,602 'anything':375 'are':80,254 'around':87 'as':189,290,456,552 'assuming':110 'at':305 'attempted':434 'available':63 'bag':118 'be':29,85,133,180,220,234,245,283,433,465,491,544,549,562 'becoming':111 'been':261 'being':149 'between':299 'blowing':537 'book':109 'both':419 'bringing':418 'brings':497 'bug':505 'bugs':358 'but':22,178,383,576 'by':72 'can':432 'case':584 'cat':12,92 'cheaply':222 'check':458 'closed':139 'combat':228 'complementary':1,545 'completeness':395,407 'completion':476 'consider':541 'considered':319,550 'consistent':468 'conversely':397 'could':28,170,208,217,232 'crowding':532 'customer':143 'customers':190 'data':61,73 'date':38,273,302,316,370,414,472 'days':295 'deadline':522 'deadlines':539 'deals':138 'deceptive':168 'defect':574 'defects':450 'delivered':341 'delivering':213,563 'delivery':231,369,471 'derived':221 'descope':374 'development':17 'difference':296 'dip':184 'direct':439 'do':338,381 'does':480 'doing':385 'don':23,379 'done':277,284,326 'done.completeness':321 'each':495 'easy':363,466 'effect':516 'emojis':489 'engineering':2 'estimation':426,443 'example':127,164,365 'eye':43 'feature':475 'features':518 'feedback':440 'field':352,454 'finish':37 'finished':96 'fives':486 'following':530 'for':66,151,210,364 'forward':401 'from':31,223 'functionality':391 'gem':106 'generate':525 'gleaned':30 'going':336 'good':425 'got':340 'group':554 'grove':99,120 'had':7 'hand':225,227 'have':155,512 'health':266 'hidden':105 'high':101,485,503 'hit':367,403,469 'how':293,327,430 'i':6,90,95,250,259,271,540 'ideally':558 'ideas':200 'if':45,285,371,409,441,477,494,579,585 'impact':158,393 'importantly':578 'in':107,162,182,185,236,248,342,350,384,435,452,528,597 'indicator':124,131,153,289,449,508 'indicators':3,206,219,589 'individually':557 'information':26,53 'into':422 'is':54,297,325,349,354,361,590 'isn':115,581 'issue':50,78 'it':281,320,360,382,398,463,499,570,593 'items':41 'job':483 'judge':429 'juked':86 'just':32 'lack':388 'last':4 'later':538 'lead':201,272 'less':82 'let':411 'light':60 'likely':83 'line':423 'lived':493 'low':573 'made':177 'management':103 'many':294,328 'me':202 'meet':520 'meeting':113 'metics':421 'metric':243,396 'metrics':18,257,546 'might':132 'milestone':405,436 'milestones':531 'mining':74 'more':577 'moving':600 'much':431 'munging':62 'need':65 'needed':445 'negatively':247 'no':64 'notion':122 'number':135,174 'obtained':71 'of':39,123,128,136,175,229,267,308,329,357,389,502,587 'on':159,304,459 'once':346 'one':152,242,586 'opening':44 'opportunity':9 'optimising':150 'or':167,194,377,536 'order':515 'other':161,461 'out':533 'output':102 'overly':165 'paired':130,140 'pairs':125 'perhaps':57,81 'powerhouse':114 'prefer':287 'prematurely':198 'presentation':15,94 'principle':148 'priority':504 'probably':55 'problem':599 'product':193,216 'project':76,269 'promised':390,534,566,569 'provide':438 'pursuing':241 'raise':172 'rate':145,188,356,575 'rather':555 're':47,335 'reading':97 'reflected':181,246 'relatively':362 'release':413,496 'release.defects':344 'remedial':526 'reported':345,359,451 'reports':68,506 'requires':424 'result':596 'retention':144,187 'returned':191 'risky':376 'rushed':517 's':14,77,93,100,121,399,406 'said':280,333 'sales':137,176 'saw':91 'scalar':292 'second':514 'service':197 'ship':301 'shoddy':482 'short':492 'should':20,548,561 'shouldn':594 'simply':378 'skills':427,444 'slip':415,417 'so':252,386 'software':215,230,276,324,348 'some':59 'sprint/milestone/whatever':310 'start':35,307 'statistics':70 'straight':400 'structured':235 'superficially':171 'swathe':501 'swetel':13 't':24,116,380,582,595 'tactics':169 'tada':488 'target':408 'team':212,479,560 'tend':523 'tends':510 'terminated':195 'than':556 'that':27,239,258,270,317,343,580 'the':8,16,25,34,88,104,134,142,146,160,163,173,186,192,224,255,265,268,275,300,306,309,314,323,330,347,351,355,394,412,420,447,453,460,484,529,583,588,598 'their':196 'there':298 'these':199,253,542 'they':233,547 'things':331 'think':251 'thinking':204 'third':448 'this':52,108,288,387,507 'those':218 'three':256 'time':89 'to':10,84,203,226,263,337,366,402,428,467,511,519,524,543,601 'together':551 'tps':67 'track':264 'tracker':51,79 'tracking':33 'two':462 'underling':147 'unhealthy':591 'use':21,209 'using':48,262 've':260 'was':42,119,274,313 'watch':11 'way':238 'we':279,332,334 'what':312,353,564 'when':278,322,567 'will':154,490 'with':58,141,473,498,571 'work':40,446,527,535 'would':179,244,282,392,464 'year':5 'you':19,46,207,286,318,372,410,565,568 'your':75,117,404,442,470,478,559	en	Dave Cheney
112	[推荐] 架构思维其实就那么回事	{"ver":2,"uid":1,"hash":"SHA1:f0f6fce21ab848253f1728543a17c1519e96f09e"}	https://toutiao.io/k/904xmvc	2020-08-14 06:10:09	[推荐] 架构思维其实就那么回事	08f6981e2d188821721541b1290d1799dac81585	\N	f	2020-08-14 05:06:00	2020-08-17 13:10:08.159944	0			'推荐':1,3 '架构思维其实就那么回事':2,4	zh	
697	On All That Fuckery	{"ver":2,"uid":1,"hash":"SHA1:0b19ffd1b9d8015cda83792478bbb0c60155c324"}	https://www.tinykat.cafe/on-all-that-fuckery	2020-08-28 00:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24291362"> https://news.ycombinator.com/item?id=24291362 </a>	6d8fc25d5f5bcf0da342e8d049523c536afa834e	\N	f	2020-08-28 00:10:00	2020-08-30 04:10:10.072035	0			'/item?id=24291362':8 'comment':5 'fuckeri':4 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24291362':6	zh	idan
282	Show HN: Photo Realistic QR-Codes	{"ver":2,"uid":1,"hash":"SHA1:a5dc287887f567312ebe6a1ca1cb083f0beb73b7"}	https://www.qrpicture.com/	2020-08-15 08:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24158125"> https://news.ycombinator.com/item?id=24158125 </a>	24a1ab9a56a3edc88e0fa3530b4c60ebce606f52	\N	f	2020-08-15 08:10:00	2020-08-18 02:10:08.414118	0			'/item?id=24158125':11 'code':7 'comment':8 'hn':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24158125':9 'photo':3 'qr':6 'qr-code':5 'realist':4 'show':1	zh	pickledcods
653	Zappos CEO Tony Hsieh is stepping down after 21 years	{"ver":2,"uid":1,"hash":"SHA1:00f3d53d942db723b8bd972e103a75d3f214d8e6"}	https://footwearnews.com/2020/business/executive-moves/zappos-ceo-tony-hsieh-steps-down-1203045974/	2020-08-26 15:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24268522"> https://news.ycombinator.com/item?id=24268522 </a>	2583e8659c12c4009a2b8db7850eeb580877f0bd	\N	f	2020-08-26 15:10:00	2020-08-26 16:10:11.057397	0			'/item?id=24268522':14 '21':9 'ceo':2 'comment':11 'hsieh':4 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24268522':12 'step':6 'toni':3 'year':10 'zappo':1	zh	jchin
696	Does Facebook pay Apple 30% of revenue derived from ads made within its iOS app?	{"ver":2,"uid":1,"hash":"SHA1:284fc3ef81aefc6534a5fc3b2e7d3a882b50986b"}	https://twitter.com/SpencerDailey/status/1299063704483438593	2020-08-28 00:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24297854"> https://news.ycombinator.com/item?id=24297854 </a>	2ff0e2976e1b539cc5f696e5046bd7041f69693a	\N	f	2020-08-28 00:10:00	2020-08-31 05:10:09.244422	0			'/item?id=24297854':19 '30':5 'ad':10 'app':15 'appl':4 'comment':16 'deriv':8 'facebook':2 'io':14 'made':11 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24297854':17 'pay':3 'revenu':7 'within':12	zh	spenvo
943	EMule 0.60a	{"ver":2,"uid":1,"hash":"SHA1:1e16a2a7f3a891e9d146192ea47407ffe54c208a"}	https://forum.emule-project.net/index.php?showtopic=165281	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24362095"> https://news.ycombinator.com/item?id=24362095 </a>	8aef180172087a830c349bd8d92a2e20f101505e	\N	f	2020-09-04 20:10:00	2020-09-04 21:10:09.618633	0			'/item?id=24362095':7 '0.60':2 'comment':4 'emul':1 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24362095':5	zh	ciccionamente
658	程序员戴耳机敲代码，到底在听啥？| 码农周刊第 316 期	{"ver":2,"uid":1,"hash":"SHA1:8e9144b1ab86b8e9619fa5aeb50d56eb93468a9c"}	https://toutiao.io/k/mkcz3p1	2020-08-27 02:10:09	程序员戴耳机敲代码，到底在听啥？| 码农周刊第 316 期	ea8e9f735cce0c3611386f4b929cc2f21587038a	\N	f	2020-08-27 02:10:00	2020-08-31 23:10:10.402733	0			'316':4,9 '到底在听啥':2,7 '期':5,10 '码农周刊第':3,8 '程序员戴耳机敲代码':1,6	zh	
871	Police-issued "courtesy cards" help friends and family out of minor infractions	{"ver":2,"uid":1,"hash":"SHA1:46d3a5794c1c43288717806454eefdb8d02c0e97"}	https://www.vice.com/en_us/article/v7gxa4/pba-card-police-courtesy-cards	2020-09-02 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24353003"> https://news.ycombinator.com/item?id=24353003 </a>	c7f8344753e5827606dc532ca7701b547ffff95c	\N	f	2020-09-02 22:10:00	2020-09-06 22:10:10.324585	0			'/item?id=24353003':17 'card':5 'comment':14 'courtesi':4 'famili':9 'friend':7 'help':6 'infract':13 'issu':3 'minor':12 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24353003':15 'polic':2 'police-issu':1	zh	danso
614	Apple ordered to not block Epic’s Unreal Engine, Fortnite to stay off App Store	{"ver":2,"uid":1,"hash":"SHA1:a87edcbee1878681e4130151ae9ead665e39cba1"}	https://techcrunch.com/2020/08/24/apple-ordered-to-not-block-epic-games-unreal-engine-but-fortnite-to-stay-off-app-store/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24268822"> https://news.ycombinator.com/item?id=24268822 </a>	2b0f2370e01224e4666b7d9af0a2cb6f57e81644	\N	f	2020-08-26 00:10:00	2020-08-27 20:10:10.197626	0			'/item?id=24268822':19 'app':14 'appl':1 'block':5 'comment':16 'engin':9 'epic':6 'fortnit':10 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24268822':17 'order':2 'stay':12 'store':15 'unreal':8	zh	jmsflknr
698	Ask HN: How does onlyfans.com work around the “no porn” Stripe rule?	{"ver":2,"uid":1,"hash":"SHA1:b77a1d2afca04cea249e13698f78db6e43f380b3"}	https://news.ycombinator.com/item?id=24291790	2020-08-28 00:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24291790"> https://news.ycombinator.com/item?id=24291790 </a>	eeef306ff8aadd5d76e08b9793f173acff159196	\N	f	2020-08-28 00:10:00	2020-08-30 04:10:10.051148	0			'/item?id=24291790':16 'around':7 'ask':1 'comment':13 'hn':2 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24291790':14 'onlyfans.com':5 'porn':10 'rule':12 'stripe':11 'work':6	zh	capableweb
872	Supercomputer analysis of Covid-19 leads to new theory	{"ver":2,"uid":1,"hash":"SHA1:2c903c7aec4c37257a5c86c83bf9b87666cbbdb7"}	https://elemental.medium.com/a-supercomputer-analyzed-covid-19-and-an-interesting-new-theory-has-emerged-31cb8eba9d63	2020-09-02 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24353686"> https://news.ycombinator.com/item?id=24353686 </a>	09a0b52a42db874163e9540a7bd4e8f872905a55	\N	f	2020-09-02 22:10:00	2020-09-06 22:10:10.343445	0			'-19':5 '/item?id=24353686':13 'analysi':2 'comment':10 'covid':4 'lead':6 'new':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24353686':11 'supercomput':1 'theori':9	zh	mvgoogler
342	A guide to learning algorithms through LeetCode	{"ver":2,"uid":1,"hash":"SHA1:7e605b2472f4957a5eea17cc481977032eab044f"}	https://github.com/labuladong/fucking-algorithm/tree/english	2020-08-17 04:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24167297"> https://news.ycombinator.com/item?id=24167297 </a>	7352cea594b3b55df59c33e3ca95a5397e2c08fb	\N	f	2020-08-17 04:10:00	2020-08-18 19:10:08.579621	0			'/item?id=24167297':11 'algorithm':5 'comment':8 'guid':2 'learn':4 'leetcod':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24167297':9	zh	VitalyAnkh
792	A terminal-based presentation tool with colors and effects	{"ver":2,"uid":1,"hash":"SHA1:22a5254559dfe72524d29b487de8ff8e3edb6c09"}	https://github.com/vinayak-mehta/present	2020-08-31 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24324099"> https://news.ycombinator.com/item?id=24324099 </a>	d5badd225fd45dd3f4ed419ef2002dd770e5411b	\N	f	2020-08-31 07:10:00	2020-09-03 05:10:09.74131	0			'/item?id=24324099':14 'base':4 'color':8 'comment':11 'effect':10 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24324099':12 'present':5 'termin':3 'terminal-bas':2 'tool':6	zh	submeta
791	Apple doesn't let you disclose their 30% IAP fee to your customers	{"ver":2,"uid":1,"hash":"SHA1:781819f032b2434434fe17bc96f0a878f45ecd1b"}	https://twitter.com/getify/status/1299569045348454401	2020-08-31 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24315764"> https://news.ycombinator.com/item?id=24315764 </a>	27cb8aba394ba086b8be0cfe14c1452a07a0442b	\N	f	2020-08-31 07:10:00	2020-09-01 21:10:09.590922	0			'/item?id=24315764':17 '30':8 'appl':1 'comment':14 'custom':13 'disclos':6 'doesn':2 'fee':10 'iap':9 'let':4 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24315764':15	zh	tomasreimers
945	Winamp Skin Museum	{"ver":2,"uid":1,"hash":"SHA1:e2cde54f2adfae6cdadcd84d35c963559b0954e1"}	https://skins.webamp.org/	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24373699"> https://news.ycombinator.com/item?id=24373699 </a>	927eff598bd74c2ecfcc6350223ac9035ceca9f2	\N	f	2020-09-04 20:10:00	2020-09-07 17:10:10.027094	0			'/item?id=24373699':7 'comment':4 'museum':3 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24373699':5 'skin':2 'winamp':1	zh	0-_-0
659	Jackson 用树模型处理 JSON 是必备技能，不信你看	{"ver":2,"uid":1,"hash":"SHA1:1cc63f129c5c1efb4a26599a5ecb207eab7efdc0"}	https://toutiao.io/k/iugppfh	2020-08-27 02:10:09	Jackson 用树模型处理 JSON 是必备技能，不信你看	cdca711aeca2c7e0636fd419dcb4c3c03e3efe19	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.065745	0			'jackson':1,6 'json':3,8 '不信你看':5,10 '是必备技能':4,9 '用树模型处理':2,7	zh	
870	Ninth Circuit rules NSA's bulk collection of Americans' call records was illegal	{"ver":2,"uid":1,"hash":"SHA1:683e147c28e80028a15fdbc6ca8850edf3d0748d"}	https://news.yahoo.com/court-rules-nsa-phone-snooping-181157311.html	2020-09-02 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24356741"> https://news.ycombinator.com/item?id=24356741 </a>	8ec778c66333279d77d33b17b44bea2c0fcc7e05	\N	f	2020-09-02 22:10:00	2020-09-03 00:10:09.546033	0			'/item?id=24356741':17 'american':9 'bulk':6 'call':10 'circuit':2 'collect':7 'comment':14 'illeg':13 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24356741':15 'ninth':1 'nsa':4 'record':11 'rule':3	zh	AndrewBissell
944	Gitlab reducing free tier CI/CD minutes from 2000 to 400 minutes	{"ver":2,"uid":1,"hash":"SHA1:350f6e56faded86845b8c57c0c7e9aa9e9cceedf"}	https://about.gitlab.com/releases/2020/09/01/ci-minutes-update-free-users/	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24363397"> https://news.ycombinator.com/item?id=24363397 </a>	ee185acc098bd99240ce4e7a3c86c2d64947d186	\N	f	2020-09-04 20:10:00	2020-09-05 07:10:10.150914	0			'/item?id=24363397':15 '2000':8 '400':10 'ci/cd':5 'comment':12 'free':3 'gitlab':1 'minut':6,11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24363397':13 'reduc':2 'tier':4	zh	kraf
460	The 212-story skyscraper in Melbourne, Australia	{"ver":2,"uid":1,"hash":"SHA1:e93b702df3d8d27ff72f80d13d74e2adf0d74391"}	https://twitter.com/liamosaur/status/1296305262144364544	2020-08-20 20:10:39	Comments: <a href="https://news.ycombinator.com/item?id=24222491"> https://news.ycombinator.com/item?id=24222491 </a>	abc0eecac08efebfdd71bdbfbb77c2bb93a6bc5d	\N	f	2020-08-20 20:10:00	2020-08-24 01:10:07.583483	0			'/item?id=24222491':11 '212':2 'australia':7 'comment':8 'melbourn':6 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24222491':9 'skyscrap':4 'stori':3	zh	noyesno
1043	Mathematicians should stop naming things after each other	{"ver":2,"uid":1,"hash":"SHA1:6d0f7f5ac2298e83f9bbefe3dbf3fe8f376e130e"}	http://nautil.us/issue/89/the-dark-side/why-mathematicians-should-stop-naming-things-after-each-other	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24385389"> https://news.ycombinator.com/item?id=24385389 </a>	568a9eb6f276462a07e80df4d9e3650d1cecf143	\N	f	2020-09-07 19:10:00	2020-09-07 21:10:11.406012	0			'/item?id=24385389':12 'comment':9 'mathematician':1 'name':4 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24385389':10 'stop':3 'thing':5	zh	abnry
661	DataFrame、Series、array、tensor 的创建及相互转化	{"ver":2,"uid":1,"hash":"SHA1:e22a45d21cd5157b3497e796536453c15dea37d9"}	https://toutiao.io/k/w33l5fc	2020-08-27 02:10:09	DataFrame、Series、array、tensor 的创建及相互转化	609503c0feff7adf89dc39f4b2526b08de046474	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.069835	0			'array':3,8 'dataframe':1,6 'series':2,7 'tensor':4,9 '的创建及相互转化':5,10	zh	
664	和领导沟通的技巧	{"ver":2,"uid":1,"hash":"SHA1:edb9502c7043373236ee8450b8b71a493dc8d8c5"}	https://toutiao.io/k/dvv2q31	2020-08-27 02:10:09	和领导沟通的技巧	73f2ce4c68f9983cacf170a6596d714b8e5e6c5c	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.071862	0			'和领导沟通的技巧':1,2	zh	
663	哇，ElasticSearch 多字段权重排序居然可以这么玩	{"ver":2,"uid":1,"hash":"SHA1:43948b823fbd2b223af1f7790245404e288f638e"}	https://toutiao.io/k/xftobm2	2020-08-27 02:10:09	哇，ElasticSearch 多字段权重排序居然可以这么玩	5f3f8cc8961f2ab5f3cde4eab0f2572b95ddc8ef	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.081469	0			'elasticsearch':2,5 '哇':1,4 '多字段权重排序居然可以这么玩':3,6	zh	
665	一份来自贾扬清的 AI 青年修炼指南：不存在算法工程师、调参侠没有市场	{"ver":2,"uid":1,"hash":"SHA1:8f3eb715be03bb2c08e6fd8273810c484ac01727"}	https://toutiao.io/k/7stzb6r	2020-08-27 02:10:09	一份来自贾扬清的 AI 青年修炼指南：不存在算法工程师、调参侠没有市场	f97c45c3f54cfc7612b2d2290c8b83057f956c50	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.075743	0			'ai':2,7 '一份来自贾扬清的':1,6 '不存在算法工程师':4,9 '调参侠没有市场':5,10 '青年修炼指南':3,8	zh	
662	想要在 JS 中把正则玩得飘逸，学会这几个函数的使用必不可少	{"ver":2,"uid":1,"hash":"SHA1:ae2fe5f5f25e3f410dc5563a4d11e579da46b97a"}	https://toutiao.io/k/fmqrboe	2020-08-27 02:10:09	想要在 JS 中把正则玩得飘逸，学会这几个函数的使用必不可少	2fa5f7725513cdd9a956cf750aa817969a0d110f	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.06785	0			'js':2,6 '中把正则玩得飘逸':3,7 '学会这几个函数的使用必不可少':4,8 '想要在':1,5	zh	
793	I Compiled NASA‘s Workmanship Standards into a Single PDF	{"ver":2,"uid":1,"hash":"SHA1:1dca103af476c21d10358324e877913e450ac16c"}	https://archive.org/details/nasa-workmanship-standards	2020-08-31 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24303533"> https://news.ycombinator.com/item?id=24303533 </a>	683416486a2d047446ca744e9ab82ba9e320ec82	\N	f	2020-08-31 07:10:00	2020-08-31 10:10:09.449151	0			'/item?id=24303533':14 'comment':11 'compil':2 'nasa':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24303533':12 'pdf':10 'singl':9 'standard':6 'workmanship':5	zh	muunbo
747	Python AsyncIO Awaitables: Coroutine, Future, and Task	{"ver":2,"uid":1,"hash":"SHA1:937c18e73a2445c7e81448cd1aae28f23a68a567"}	https://leimao.github.io/blog/Python-AsyncIO-Awaitable-Coroutine-Future-Task/	2020-08-29 17:10:11	<h3 id="introduction">Introduction</h3>\n\n<p>Python <code class="language-plaintext highlighter-rouge">asyncio</code> is a library for efficient single-thread concurrent applications. In my last blog post <a href="https://leimao.github.io/blog/Python-AsyncIO-Event-Loop/">“Python AsyncIO Event Loop”</a>, we have understood what an event loop is in Python <code class="language-plaintext highlighter-rouge">asyncio</code> by looking at the Python source code. This seems to be effective to understand how Python <code class="language-plaintext highlighter-rouge">asyncio</code> works.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to take one step further and discuss the mechanisms of the three key <code class="language-plaintext highlighter-rouge">asyncio</code> awaitables, including <code class="language-plaintext highlighter-rouge">Coroutine</code>, <code class="language-plaintext highlighter-rouge">Future</code>, and <code class="language-plaintext highlighter-rouge">Task</code>, by looking at the Python source code again.</p>\n\n<h3 id="coroutine">Coroutine</h3>\n\n<p>Starting from Python 3.5, <code class="language-plaintext highlighter-rouge">coroutine</code> functions are defined using <code class="language-plaintext highlighter-rouge">async def</code> and <code class="language-plaintext highlighter-rouge">Coroutine</code> objects are created by calling <code class="language-plaintext highlighter-rouge">coroutine</code> functions. The abstracted class of <a href="https://github.com/python/cpython/blob/3.8/Lib/_collections_abc.py#L114"><code class="language-plaintext highlighter-rouge">Coroutine</code></a> is just as follows. It does not have method overloading because the derived class and method overload is generated by Python interpreter for the <code class="language-plaintext highlighter-rouge">coroutine</code> functions defined using <code class="language-plaintext highlighter-rouge">async def</code>. The key method for <code class="language-plaintext highlighter-rouge">Coroutine</code>class is <code class="language-plaintext highlighter-rouge">send</code>. It is trying to mimic the behavior of trampoline.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Coroutine</span><span class="p">(</span><span class="n">Awaitable</span><span class="p">):</span>\n\n    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>\n\n    <span class="o">@</span><span class="n">abstractmethod</span>\n    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>\n        <span class="s">"""Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        """</span>\n        <span class="k">raise</span> <span class="nb">StopIteration</span>\n\n    <span class="o">@</span><span class="n">abstractmethod</span>\n    <span class="k">def</span> <span class="nf">throw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">typ</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">tb</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="s">"""Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        """</span>\n        <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="k">if</span> <span class="n">tb</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n                <span class="k">raise</span> <span class="n">typ</span>\n            <span class="n">val</span> <span class="o">=</span> <span class="n">typ</span><span class="p">()</span>\n        <span class="k">if</span> <span class="n">tb</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="n">val</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">with_traceback</span><span class="p">(</span><span class="n">tb</span><span class="p">)</span>\n        <span class="k">raise</span> <span class="n">val</span>\n\n    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""Raise GeneratorExit inside coroutine.\n        """</span>\n        <span class="k">try</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">throw</span><span class="p">(</span><span class="nb">GeneratorExit</span><span class="p">)</span>\n        <span class="k">except</span> <span class="p">(</span><span class="nb">GeneratorExit</span><span class="p">,</span> <span class="nb">StopIteration</span><span class="p">):</span>\n            <span class="k">pass</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="k">raise</span> <span class="nb">RuntimeError</span><span class="p">(</span><span class="s">"coroutine ignored GeneratorExit"</span><span class="p">)</span>\n\n    <span class="o">@</span><span class="nb">classmethod</span>\n    <span class="k">def</span> <span class="nf">__subclasshook__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">cls</span> <span class="ow">is</span> <span class="n">Coroutine</span><span class="p">:</span>\n            <span class="k">return</span> <span class="n">_check_methods</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="s">'__await__'</span><span class="p">,</span> <span class="s">'send'</span><span class="p">,</span> <span class="s">'throw'</span><span class="p">,</span> <span class="s">'close'</span><span class="p">)</span>\n        <span class="k">return</span> <span class="nb">NotImplemented</span>\n</code></pre></div></div>\n\n<p>“Fortunately”, Python <code class="language-plaintext highlighter-rouge">asyncio</code> <code class="language-plaintext highlighter-rouge">coroutine</code> was once implemented using a <code class="language-plaintext highlighter-rouge">@asyncio.coroutine</code> decorator on a Python generator in Python 3.4. Hopefully the logic of the <code class="language-plaintext highlighter-rouge">coroutine</code> in Python 3.5+ is similar to the <code class="language-plaintext highlighter-rouge">coroutine</code> in Python 3.4 that it yields sub <code class="language-plaintext highlighter-rouge">coroutine</code> upon calling.</p>\n\n<p><br /></p>\n\n<p>A typical <code class="language-plaintext highlighter-rouge">coroutine</code> could be implemented using a Python generator just like the follows.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n<span class="kn">import</span> <span class="nn">datetime</span>\n\n<span class="o">@</span><span class="n">asyncio</span><span class="p">.</span><span class="n">coroutine</span>\n<span class="k">def</span> <span class="nf">display_date</span><span class="p">(</span><span class="n">loop</span><span class="p">):</span>\n    <span class="n">end_time</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="mf">5.0</span>\n    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>\n        <span class="k">print</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>\n        <span class="k">if</span> <span class="p">(</span><span class="n">loop</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">end_time</span><span class="p">:</span>\n            <span class="k">break</span>\n        <span class="k">yield</span> <span class="k">from</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>\n\n<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n<span class="c1"># Blocking call which returns when the display_date() coroutine is done\n</span><span class="n">loop</span><span class="p">.</span><span class="n">run_until_complete</span><span class="p">(</span><span class="n">display_date</span><span class="p">(</span><span class="n">loop</span><span class="p">))</span>\n<span class="n">loop</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>\n</code></pre></div></div>\n\n<p>The <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/coroutines.py"><code class="language-plaintext highlighter-rouge">@asyncio.coroutine</code></a> decorator implementation is as follows.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">coroutine</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>\n    <span class="s">"""Decorator to mark coroutines.\n    If the coroutine is not yielded from before it is destroyed,\n    an error message is logged.\n    """</span>\n    <span class="n">warnings</span><span class="p">.</span><span class="n">warn</span><span class="p">(</span><span class="s">'"@coroutine" decorator is deprecated since Python 3.8, use "async def" instead'</span><span class="p">,</span>\n                  <span class="nb">DeprecationWarning</span><span class="p">,</span>\n                  <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>\n    <span class="k">if</span> <span class="n">inspect</span><span class="p">.</span><span class="n">iscoroutinefunction</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>\n        <span class="c1"># In Python 3.5 that's all we need to do for coroutines\n</span>        <span class="c1"># defined with "async def".\n</span>        <span class="k">return</span> <span class="n">func</span>\n\n    <span class="k">if</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isgeneratorfunction</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>\n        <span class="n">coro</span> <span class="o">=</span> <span class="n">func</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="o">@</span><span class="n">functools</span><span class="p">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>\n        <span class="k">def</span> <span class="nf">coro</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>\n            <span class="n">res</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>\n            <span class="k">if</span> <span class="p">(</span><span class="n">base_futures</span><span class="p">.</span><span class="n">isfuture</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="ow">or</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isgenerator</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="ow">or</span>\n                    <span class="nb">isinstance</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">CoroWrapper</span><span class="p">)):</span>\n                <span class="n">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="k">from</span> <span class="n">res</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="c1"># If 'res' is an awaitable, run it.\n</span>                <span class="k">try</span><span class="p">:</span>\n                    <span class="n">await_meth</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">__await__</span>\n                <span class="k">except</span> <span class="nb">AttributeError</span><span class="p">:</span>\n                    <span class="k">pass</span>\n                <span class="k">else</span><span class="p">:</span>\n                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">collections</span><span class="p">.</span><span class="n">abc</span><span class="p">.</span><span class="n">Awaitable</span><span class="p">):</span>\n                        <span class="n">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="k">from</span> <span class="n">await_meth</span><span class="p">()</span>\n            <span class="k">return</span> <span class="n">res</span>\n\n    <span class="n">coro</span> <span class="o">=</span> <span class="n">types</span><span class="p">.</span><span class="n">coroutine</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>\n    <span class="k">if</span> <span class="ow">not</span> <span class="n">_DEBUG</span><span class="p">:</span>\n        <span class="n">wrapper</span> <span class="o">=</span> <span class="n">coro</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="o">@</span><span class="n">functools</span><span class="p">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>\n        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>\n            <span class="n">w</span> <span class="o">=</span> <span class="n">CoroWrapper</span><span class="p">(</span><span class="n">coro</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">),</span> <span class="n">func</span><span class="o">=</span><span class="n">func</span><span class="p">)</span>\n            <span class="k">if</span> <span class="n">w</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">:</span>\n                <span class="k">del</span> <span class="n">w</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n            <span class="c1"># Python &lt; 3.5 does not implement __qualname__\n</span>            <span class="c1"># on generator objects, so we set it manually.\n</span>            <span class="c1"># We use getattr as some callables (such as\n</span>            <span class="c1"># functools.partial may lack __qualname__).\n</span>            <span class="n">w</span><span class="p">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="s">'__name__'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>\n            <span class="n">w</span><span class="p">.</span><span class="n">__qualname__</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="s">'__qualname__'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>\n            <span class="k">return</span> <span class="n">w</span>\n\n    <span class="n">wrapper</span><span class="p">.</span><span class="n">_is_coroutine</span> <span class="o">=</span> <span class="n">_is_coroutine</span>  <span class="c1"># For iscoroutinefunction().\n</span>    <span class="k">return</span> <span class="n">wrapper</span>\n</code></pre></div></div>\n\n<p>Without looking into the details, this <code class="language-plaintext highlighter-rouge">@asyncio.coroutine</code> decorator almost does not change the generator at all, since most likely <code class="language-plaintext highlighter-rouge">wrapper</code> $\\approx$ <code class="language-plaintext highlighter-rouge">coro</code>.</p>\n\n<p><br /></p>\n\n<p>When we tried to run <code class="language-plaintext highlighter-rouge">coroutine</code> with <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/base_events.py#L580">loop.run_until_complete</a>, we see from the comment that if the argument is a <code class="language-plaintext highlighter-rouge">coroutine</code> then it would be converted to a <code class="language-plaintext highlighter-rouge">Task</code> in the first place, and <code class="language-plaintext highlighter-rouge">loop.run_until_complete</code> is actually scheduling <code class="language-plaintext highlighter-rouge">Task</code>s. So we would look into <code class="language-plaintext highlighter-rouge">Task</code> shortly.</p>\n\n<h3 id="future">Future</h3>\n\n<p><code class="language-plaintext highlighter-rouge">Future</code> has closed relationship with <code class="language-plaintext highlighter-rouge">Task</code>, so let’s look at <code class="language-plaintext highlighter-rouge">Future</code> first.</p>\n\n<p><br /></p>\n\n<p><a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/futures.py#L29"><code class="language-plaintext highlighter-rouge">Future</code></a> use has an event loop. By default, it is the event loop in the main thread.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Future</span><span class="p">:</span>\n    <span class="s">"""This class is *almost* compatible with concurrent.futures.Future.\n    Differences:\n    - This class is not thread-safe.\n    - result() and exception() do not take a timeout argument and\n      raise an exception when the future isn't done yet.\n    - Callbacks registered with add_done_callback() are always called\n      via the event loop's call_soon().\n    - This class is not compatible with the wait() and as_completed()\n      methods in the concurrent.futures package.\n    (In Python 3.4 or later we may be able to unify the implementations.)\n    """</span>\n\n    <span class="c1"># Class variables serving as defaults for instance variables.\n</span>    <span class="n">_state</span> <span class="o">=</span> <span class="n">_PENDING</span>\n    <span class="n">_result</span> <span class="o">=</span> <span class="bp">None</span>\n    <span class="n">_exception</span> <span class="o">=</span> <span class="bp">None</span>\n    <span class="n">_loop</span> <span class="o">=</span> <span class="bp">None</span>\n    <span class="n">_source_traceback</span> <span class="o">=</span> <span class="bp">None</span>\n\n    <span class="c1"># This field is used for a dual purpose:\n</span>    <span class="c1"># - Its presence is a marker to declare that a class implements\n</span>    <span class="c1">#   the Future protocol (i.e. is intended to be duck-type compatible).\n</span>    <span class="c1">#   The value must also be not-None, to enable a subclass to declare\n</span>    <span class="c1">#   that it is not compatible by setting this to None.\n</span>    <span class="c1"># - It is set by __iter__() below so that Task._step() can tell\n</span>    <span class="c1">#   the difference between\n</span>    <span class="c1">#   `await Future()` or`yield from Future()` (correct) vs.\n</span>    <span class="c1">#   `yield Future()` (incorrect).\n</span>    <span class="n">_asyncio_future_blocking</span> <span class="o">=</span> <span class="bp">False</span>\n\n    <span class="n">__log_traceback</span> <span class="o">=</span> <span class="bp">False</span>\n\n    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="s">"""Initialize the future.\n        The optional event_loop argument allows explicitly setting the event\n        loop object used by the future. If it's not provided, the future uses\n        the default event loop.\n        """</span>\n        <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span> <span class="o">=</span> <span class="n">events</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span> <span class="o">=</span> <span class="n">loop</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_callbacks</span> <span class="o">=</span> <span class="p">[]</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">get_debug</span><span class="p">():</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_source_traceback</span> <span class="o">=</span> <span class="n">format_helpers</span><span class="p">.</span><span class="n">extract_stack</span><span class="p">(</span>\n                <span class="n">sys</span><span class="p">.</span><span class="n">_getframe</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>\n\n    <span class="n">_repr_info</span> <span class="o">=</span> <span class="n">base_futures</span><span class="p">.</span><span class="n">_future_repr_info</span>\n</code></pre></div></div>\n\n<p>The key method of <code class="language-plaintext highlighter-rouge">Future</code> is <code class="language-plaintext highlighter-rouge">future.set_result</code>. Let’s check what will happen if we call <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/futures.py#L227"><code class="language-plaintext highlighter-rouge">future.set_result</code></a>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">set_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>\n        <span class="s">"""Mark the future done and set its result.\n        If the future is already done when this method is called, raises\n        InvalidStateError.\n        """</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">_PENDING</span><span class="p">:</span>\n            <span class="k">raise</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">InvalidStateError</span><span class="p">(</span><span class="s">f'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">_state</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_result</span> <span class="o">=</span> <span class="n">result</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_state</span> <span class="o">=</span> <span class="n">_FINISHED</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">__schedule_callbacks</span><span class="p">()</span>\n</code></pre></div></div>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__schedule_callbacks</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""Internal: Ask the event loop to call all callbacks.\n        The callbacks are scheduled to be called as soon as possible. Also\n        clears the callback list.\n        """</span>\n        <span class="n">callbacks</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_callbacks</span><span class="p">[:]</span>\n        <span class="k">if</span> <span class="ow">not</span> <span class="n">callbacks</span><span class="p">:</span>\n            <span class="k">return</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_callbacks</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[]</span>\n        <span class="k">for</span> <span class="n">callback</span><span class="p">,</span> <span class="n">ctx</span> <span class="ow">in</span> <span class="n">callbacks</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="n">ctx</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>Once <code class="language-plaintext highlighter-rouge">future.set_result</code> is called, it would trigger <code class="language-plaintext highlighter-rouge">self.__schedule_callbacks</code> asking the even loop to call all the <code class="language-plaintext highlighter-rouge">callback</code>s related to the <code class="language-plaintext highlighter-rouge">Future</code> as soon as possible. These <code class="language-plaintext highlighter-rouge">Future</code> related <code class="language-plaintext highlighter-rouge">callback</code>s are added or removed by <code class="language-plaintext highlighter-rouge">future.add_done_callback</code> or <code class="language-plaintext highlighter-rouge">future.remove_done_callback</code>. If no <code class="language-plaintext highlighter-rouge">Future</code> related <code class="language-plaintext highlighter-rouge">callback</code>s, no more <code class="language-plaintext highlighter-rouge">callback</code>s are scheduled in the event loop.</p>\n\n<p><br /></p>\n\n<p>So we have known what will happen after the <code class="language-plaintext highlighter-rouge">Future</code> got result. What happens when the <code class="language-plaintext highlighter-rouge">Future</code> is scheduled in the event loop?</p>\n\n<p><br /></p>\n\n<p>From the last blog post <a href="https://leimao.github.io/blog/Python-AsyncIO-Event-Loop/">“Python AsyncIO Event Loop”</a>, we have seen the <code class="language-plaintext highlighter-rouge">Future</code> was scheduled into the event loop via <code class="language-plaintext highlighter-rouge">loop.ensure_future</code>. “If the argument is a Future, it is returned directly.” So when the <code class="language-plaintext highlighter-rouge">Future</code> is scheduled in the event loop, there is almost no <code class="language-plaintext highlighter-rouge">callback</code> scheduled, until the <code class="language-plaintext highlighter-rouge">future.set_result</code> is called. (I said almost no <code class="language-plaintext highlighter-rouge">callback</code> because there is a default <code class="language-plaintext highlighter-rouge">callback</code> <code class="language-plaintext highlighter-rouge">_run_until_complete_cb</code> added as we have seen in the last blog post.)</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ensure_future</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n    <span class="s">"""Wrap a coroutine or an awaitable in a future.\n    If the argument is a Future, it is returned directly.\n    """</span>\n    <span class="k">if</span> <span class="n">coroutines</span><span class="p">.</span><span class="n">iscoroutine</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="n">loop</span> <span class="o">=</span> <span class="n">events</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n        <span class="n">task</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="n">create_task</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">)</span>\n        <span class="k">if</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">:</span>\n            <span class="k">del</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n        <span class="k">return</span> <span class="n">task</span>\n    <span class="k">elif</span> <span class="n">futures</span><span class="p">.</span><span class="n">isfuture</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">loop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">futures</span><span class="p">.</span><span class="n">_get_loop</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'The future belongs to a different loop than '</span>\n                             <span class="s">'the one specified as the loop argument'</span><span class="p">)</span>\n        <span class="k">return</span> <span class="n">coro_or_future</span>\n    <span class="k">elif</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isawaitable</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">return</span> <span class="n">ensure_future</span><span class="p">(</span><span class="n">_wrap_awaitable</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">),</span> <span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="s">'An asyncio.Future, a coroutine or an awaitable is '</span>\n                        <span class="s">'required'</span><span class="p">)</span>\n</code></pre></div></div>\n\n<h3 id="task">Task</h3>\n\n<p>Because <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/futures.py#L269"><code class="language-plaintext highlighter-rouge">_PyFuture = Future</code></a>, <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/tasks.py#L98"><code class="language-plaintext highlighter-rouge">Task</code></a> is just a derived class of <code class="language-plaintext highlighter-rouge">Future</code>. The task of a <code class="language-plaintext highlighter-rouge">Task</code> is to wrap a <code class="language-plaintext highlighter-rouge">coroutine</code> in a <code class="language-plaintext highlighter-rouge">Future</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Task</span><span class="p">(</span><span class="n">futures</span><span class="p">.</span><span class="n">_PyFuture</span><span class="p">):</span>  <span class="c1"># Inherit Python Task implementation\n</span>                                <span class="c1"># from a Python Future implementation.\n</span>\n    <span class="s">"""A coroutine wrapped in a Future."""</span>\n\n    <span class="c1"># An important invariant maintained while a Task not done:\n</span>    <span class="c1">#\n</span>    <span class="c1"># - Either _fut_waiter is None, and _step() is scheduled;\n</span>    <span class="c1"># - or _fut_waiter is some Future, and _step() is *not* scheduled.\n</span>    <span class="c1">#\n</span>    <span class="c1"># The only transition from the latter to the former is through\n</span>    <span class="c1"># _wakeup().  When _fut_waiter is not None, one of its callbacks\n</span>    <span class="c1"># must be _wakeup().\n</span>\n    <span class="c1"># If False, don't log a message if the task is destroyed whereas its\n</span>    <span class="c1"># status is still pending\n</span>    <span class="n">_log_destroy_pending</span> <span class="o">=</span> <span class="bp">True</span>\n\n    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coro</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">:</span>\n            <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n        <span class="k">if</span> <span class="ow">not</span> <span class="n">coroutines</span><span class="p">.</span><span class="n">iscoroutine</span><span class="p">(</span><span class="n">coro</span><span class="p">):</span>\n            <span class="c1"># raise after Future.__init__(), attrs are required for __del__\n</span>            <span class="c1"># prevent logging for pending task in __del__\n</span>            <span class="bp">self</span><span class="p">.</span><span class="n">_log_destroy_pending</span> <span class="o">=</span> <span class="bp">False</span>\n            <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="s">f"a coroutine was expected, got </span><span class="si">{</span><span class="n">coro</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>\n\n        <span class="k">if</span> <span class="n">name</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="s">f'Task-</span><span class="si">{</span><span class="n">_task_name_counter</span><span class="p">()</span><span class="si">}</span><span class="s">'</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span> <span class="o">=</span> <span class="bp">False</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_fut_waiter</span> <span class="o">=</span> <span class="bp">None</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_coro</span> <span class="o">=</span> <span class="n">coro</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_context</span> <span class="o">=</span> <span class="n">contextvars</span><span class="p">.</span><span class="n">copy_context</span><span class="p">()</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n        <span class="n">_register_task</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>In the constructor, we see that the <code class="language-plaintext highlighter-rouge">Task</code> schedules a <code class="language-plaintext highlighter-rouge">callback</code> <code class="language-plaintext highlighter-rouge">self.__step</code> in the event loop. The <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/tasks.py#L239"><code class="language-plaintext highlighter-rouge">task.__step</code></a> is a long method, but we should just pay attention to the <code class="language-plaintext highlighter-rouge">try</code> block and the <code class="language-plaintext highlighter-rouge">else</code> block since these two are the ones mostly likely to be executed.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__step</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">done</span><span class="p">():</span>\n            <span class="k">raise</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">InvalidStateError</span><span class="p">(</span>\n                <span class="s">f'_step(): already done: </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">exc</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span><span class="p">:</span>\n            <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">exc</span><span class="p">,</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>\n                <span class="n">exc</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_make_cancelled_error</span><span class="p">()</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span> <span class="o">=</span> <span class="bp">False</span>\n        <span class="n">coro</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_coro</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_fut_waiter</span> <span class="o">=</span> <span class="bp">None</span>\n\n        <span class="n">_enter_task</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>\n        <span class="c1"># Call either coro.throw(exc) or coro.send(None).\n</span>        <span class="k">try</span><span class="p">:</span>\n            <span class="k">if</span> <span class="n">exc</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n                <span class="c1"># We use the `send` method directly, because coroutines\n</span>                <span class="c1"># don't have `__iter__` and `__next__` methods.\n</span>                <span class="n">result</span> <span class="o">=</span> <span class="n">coro</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="n">result</span> <span class="o">=</span> <span class="n">coro</span><span class="p">.</span><span class="n">throw</span><span class="p">(</span><span class="n">exc</span><span class="p">)</span>\n        <span class="k">except</span> <span class="nb">StopIteration</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>\n            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span><span class="p">:</span>\n                <span class="c1"># Task is cancelled right before coro stops.\n</span>                <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span> <span class="o">=</span> <span class="bp">False</span>\n                <span class="nb">super</span><span class="p">().</span><span class="n">cancel</span><span class="p">(</span><span class="n">msg</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_cancel_message</span><span class="p">)</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="nb">super</span><span class="p">().</span><span class="n">set_result</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>\n        <span class="k">except</span> <span class="n">exceptions</span><span class="p">.</span><span class="n">CancelledError</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>\n            <span class="c1"># Save the original exception so we can chain it later.\n</span>            <span class="bp">self</span><span class="p">.</span><span class="n">_cancelled_exc</span> <span class="o">=</span> <span class="n">exc</span>\n            <span class="nb">super</span><span class="p">().</span><span class="n">cancel</span><span class="p">()</span>  <span class="c1"># I.e., Future.cancel(self).\n</span>        <span class="k">except</span> <span class="p">(</span><span class="nb">KeyboardInterrupt</span><span class="p">,</span> <span class="nb">SystemExit</span><span class="p">)</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>\n            <span class="nb">super</span><span class="p">().</span><span class="n">set_exception</span><span class="p">(</span><span class="n">exc</span><span class="p">)</span>\n            <span class="k">raise</span>\n        <span class="k">except</span> <span class="nb">BaseException</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>\n            <span class="nb">super</span><span class="p">().</span><span class="n">set_exception</span><span class="p">(</span><span class="n">exc</span><span class="p">)</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="n">blocking</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="s">'_asyncio_future_blocking'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>\n            <span class="k">if</span> <span class="n">blocking</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n                <span class="c1"># Yielded Future must come from Future.__iter__().\n</span>                <span class="k">if</span> <span class="n">futures</span><span class="p">.</span><span class="n">_get_loop</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">:</span>\n                    <span class="n">new_exc</span> <span class="o">=</span> <span class="nb">RuntimeError</span><span class="p">(</span>\n                        <span class="s">f'Task </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s"> got Future '</span>\n                        <span class="s">f'</span><span class="si">{</span><span class="n">result</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s"> attached to a different loop'</span><span class="p">)</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span>\n                        <span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">new_exc</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n                <span class="k">elif</span> <span class="n">blocking</span><span class="p">:</span>\n                    <span class="k">if</span> <span class="n">result</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">:</span>\n                        <span class="n">new_exc</span> <span class="o">=</span> <span class="nb">RuntimeError</span><span class="p">(</span>\n                            <span class="s">f'Task cannot await on itself: </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n                        <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span>\n                            <span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">new_exc</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n                    <span class="k">else</span><span class="p">:</span>\n                        <span class="n">result</span><span class="p">.</span><span class="n">_asyncio_future_blocking</span> <span class="o">=</span> <span class="bp">False</span>\n                        <span class="n">result</span><span class="p">.</span><span class="n">add_done_callback</span><span class="p">(</span>\n                            <span class="bp">self</span><span class="p">.</span><span class="n">__wakeup</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n                        <span class="bp">self</span><span class="p">.</span><span class="n">_fut_waiter</span> <span class="o">=</span> <span class="n">result</span>\n                        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span><span class="p">:</span>\n                            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_fut_waiter</span><span class="p">.</span><span class="n">cancel</span><span class="p">(</span>\n                                    <span class="n">msg</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_cancel_message</span><span class="p">):</span>\n                                <span class="bp">self</span><span class="p">.</span><span class="n">_must_cancel</span> <span class="o">=</span> <span class="bp">False</span>\n                <span class="k">else</span><span class="p">:</span>\n                    <span class="n">new_exc</span> <span class="o">=</span> <span class="nb">RuntimeError</span><span class="p">(</span>\n                        <span class="s">f'yield was used instead of yield from '</span>\n                        <span class="s">f'in task </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s"> with </span><span class="si">{</span><span class="n">result</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span>\n                        <span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">new_exc</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n\n            <span class="k">elif</span> <span class="n">result</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n                <span class="c1"># Bare yield relinquishes control for one event loop iteration.\n</span>                <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n            <span class="k">elif</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isgenerator</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>\n                <span class="c1"># Yielding a generator is just wrong.\n</span>                <span class="n">new_exc</span> <span class="o">=</span> <span class="nb">RuntimeError</span><span class="p">(</span>\n                    <span class="s">f'yield was used instead of yield from for '</span>\n                    <span class="s">f'generator in task </span><span class="si">{</span><span class="bp">self</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s"> with </span><span class="si">{</span><span class="n">result</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">new_exc</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="c1"># Yielding something else is an error.\n</span>                <span class="n">new_exc</span> <span class="o">=</span> <span class="nb">RuntimeError</span><span class="p">(</span><span class="s">f'Task got bad yield: </span><span class="si">{</span><span class="n">result</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">__step</span><span class="p">,</span> <span class="n">new_exc</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_context</span><span class="p">)</span>\n        <span class="k">finally</span><span class="p">:</span>\n            <span class="n">_leave_task</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>\n            <span class="bp">self</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># Needed to break cycles when an exception occurs.\n</span></code></pre></div></div>\n\n<p>Here we see the <code class="language-plaintext highlighter-rouge">coroutine.send</code> method again. Each time we call <code class="language-plaintext highlighter-rouge">coroutine.send</code> in the <code class="language-plaintext highlighter-rouge">try</code> block, we get a <code class="language-plaintext highlighter-rouge">result</code>. In the <code class="language-plaintext highlighter-rouge">else</code> blcok, we always have another <code class="language-plaintext highlighter-rouge">self._loop.call_soon</code> call. We do this in a trampoline fashion until <code class="language-plaintext highlighter-rouge">Coroutine</code> runs out of results to <code class="language-plaintext highlighter-rouge">send</code>.</p>\n\n<h3 id="trampoline-function">Trampoline Function</h3>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n<span class="kn">import</span> <span class="nn">time</span>\n\n<span class="k">def</span> <span class="nf">trampoline</span><span class="p">(</span><span class="n">loop</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">BaseEventLoop</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>\n    <span class="n">current_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>\n    <span class="k">print</span><span class="p">(</span><span class="n">current_time</span><span class="p">)</span>\n    <span class="n">loop</span><span class="p">.</span><span class="n">call_later</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">trampoline</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>\n    <span class="k">return</span> <span class="n">current_time</span>\n\n<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n<span class="n">loop</span><span class="p">.</span><span class="n">call_soon</span><span class="p">(</span><span class="n">trampoline</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>\n<span class="n">loop</span><span class="p">.</span><span class="n">call_later</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">loop</span><span class="p">.</span><span class="n">stop</span><span class="p">)</span>\n\n<span class="n">loop</span><span class="p">.</span><span class="n">run_forever</span><span class="p">()</span>\n</code></pre></div></div>\n\n<p>The flavor of the wrapping of <code class="language-plaintext highlighter-rouge">Task</code> to <code class="language-plaintext highlighter-rouge">Coroutine</code> is somewhat similar to trampoline. Every time we call <code class="language-plaintext highlighter-rouge">coroutine.send</code>, we got some returned values and scheduled another <code class="language-plaintext highlighter-rouge">callback</code>.</p>\n\n<h3 id="conclusion">Conclusion</h3>\n\n<p>The implementation of <code class="language-plaintext highlighter-rouge">asyncio</code> is complicated and I don’t expect I could know all the details. But trying to understand more about the low-level design might be useful for implementing low-level <code class="language-plaintext highlighter-rouge">asyncio</code> libraries and prevent stupid mistakes in high-level <code class="language-plaintext highlighter-rouge">asyncio</code> applications.</p>\n\n<p><br /></p>\n\n<p>The key to scheduling the key <code class="language-plaintext highlighter-rouge">asyncio</code> awaitables, <code class="language-plaintext highlighter-rouge">Coroutine</code>, <code class="language-plaintext highlighter-rouge">Future</code>, and <code class="language-plaintext highlighter-rouge">Task</code>, are that the awaitables are all wrapped into <code class="language-plaintext highlighter-rouge">Future</code> in some way under the hood of <code class="language-plaintext highlighter-rouge">asyncio</code> interface.</p>\n\n\n  <p><a href="https://leimao.github.io/blog/Python-AsyncIO-Awaitable-Coroutine-Future-Task/">Python AsyncIO Awaitables: Coroutine, Future, and Task</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 29, 2020.</p>	1659f8ef1fd581353a043ffd84534a5ef850723d	\N	f	2020-08-29 08:10:00	2020-09-10 05:10:13.399854	0			'-1':528,1237,1441 '0.5':1956 '1':356,918 '1.0':349 '2':423 '2020':2106 '29':2105 '3.4':291,308,747 '3.5':98,300,429,530 '3.8':416 '5':1973 '5.0':342 'abl':753 'abstract':116 'abstractmethod':170,190 'actual':635 'ad':1059,1177 'add':716 'allow':877 'almost':582,681,1152,1164 'alreadi':959,1561 'also':811,1006 'alway':720,1915 'anoth':1917,2003 'applic':20,2053 'approx':594 'arg':455,459,515,520 'argument':614,701,876,1132,1206,1274 'ask':987,1037 'async':104,148,418,441 'asyncio':2,10,27,40,57,79,276,331,857,1113,1687,1938,2009,2042,2052,2060,2082,2085 'asyncio.baseeventloop':1944 'asyncio.coroutine':283,334,380,580 'asyncio.future':1298 'asyncio.get':358,1964 'asyncio.sleep':355 'attach':1720 'attent':1530 'attr':1449 'attributeerror':488 'august':2104 'await':3,80,168,268,480,484,498,846,1200,1288,1303,1743,2061,2069,2086 'bad':1865 'bare':1803 'base':921 'base_futures.isfuture':462 'baseexcept':1676 'behavior':163 'belong':1262 'blcok':1913 'block':361,859,1534,1538,1684,1689,1692,1732,1905 'blog':24,61,1110,1185 'book':2102 'break':352,1884 'c':259,267 'call':112,315,362,721,727,939,965,992,1001,1032,1042,1161,1586,1900,1919,1994 'callabl':548 'callback':713,718,984,994,996,1009,1011,1015,1019,1022,1024,1045,1057,1065,1069,1074,1077,1154,1166,1172,1399,1513,1759,2004 'cancel':1628,1636,1661 'cannot':1742 'cb':1176 'chain':1655 'chang':585 'check':265,933 'class':117,133,166,676,679,687,730,758,794,1315,1331 'classmethod':255 'clear':1007 'close':236,271,648 'cls':258,261 'code':47,92 'collections.abc.awaitable':494 'come':1699 'comment':610 'compat':682,733,807,826 'complet':374,605,633,739,1175 'complic':2011 'conclus':2005 'concurr':19 'concurrent.futures':743 'concurrent.futures.future':684 'constructor':1505 'context':1026,1495,1498,1729,1752,1761,1797,1814,1850,1873 'contextvars.copy':1494 'control':1806 'convert':622 'coro':448,454,502,504,509,519,595,1190,1216,1230,1242,1255,1276,1281,1289,1428,1445,1471,1492,1578,1631 'coro.send':1591,1614 'coro.throw':1588,1618 'coroutin':4,82,94,99,107,113,119,144,167,180,204,241,252,263,277,297,305,313,318,369,387,392,395,410,438,569,601,617,1197,1300,1327,1344,1467,1605,1928,1985,2062,2087 'coroutine.send':1894,1901,1995 'coroutineclass':154 'coroutines.iscoroutine':1215,1444 'corowrapp':470,518 'correct':852 'could':319,2018 'counter':1482 'creat':110 'ctx':1020,1027 'current':1948,1952,1961 'cycl':1885 'date':337,368,376 'datetim':333 'datetime.datetime.now':346 'debug':507 'declar':791,821 'decor':284,381,389,411,581 'def':105,149,171,191,235,256,335,386,419,442,453,513,864,942,982,1187,1425,1550,1941 'default':666,762,897,1171 'defin':102,146,439 'del':526,1235,1439,1453,1460 'deprec':413 'deprecationwarn':421 'deriv':132,1314 'design':2033 'destroy':403,1414,1422 'detail':578,2022 'differ':685,844,1265,1723 'direct':1139,1213,1603 'discuss':72 'display':336,367,375 'done':371,711,717,950,960,1064,1068,1357,1562,1758 'dual':783 'duck':805 'duck-typ':804 'effect':52 'effici':15 'either':1358,1587 'elif':1240,1279,1731,1799,1816 'els':249,450,475,490,510,908,1294,1483,1537,1616,1639,1683,1754,1773,1852,1855,1912 'enabl':817 'end':339,350 'ensur':1188,1285 'enter':1582 'error':405,1858 'even':1039 'event':28,35,359,663,670,724,874,881,898,906,989,1082,1105,1114,1125,1148,1225,1517,1809,1965 'events.get':905,1224 'everi':1991 'exc':1553,1565,1572,1574,1589,1595,1619,1623,1647,1659,1669,1673,1678,1682,1709,1728,1738,1751,1775,1796,1826,1849,1860,1872 'exc.value':1643 'except':201,245,487,695,705,770,1620,1644,1651,1665,1672,1675,1681,1888 'exceptions.cancellederror':1573,1645 'exceptions.invalidstateerror':972,1558 'execut':1549 'expect':1469,2016 'explicit':878 'f':973,1465,1478,1559,1711,1717,1740,1777,1785,1828,1837,1862 'fals':860,863,1404,1462,1488,1577,1634,1756,1772 'fashion':1926 'field':778 'final':1875 'finish':980 'first':628,658 'flavor':1978 'follow':123,329,385 'forev':1976 'format_helpers.extract':915 'former':1386 'fortun':274 'func':388,426,444,447,449,452,458,512,522,523,557,562 'function':100,114,145,1936 'functools.partial':551 'functools.wraps':451,511 'fut':1359,1368,1391 'futur':5,83,645,646,657,659,677,708,797,847,851,855,858,871,887,894,927,949,957,1049,1055,1072,1093,1100,1120,1129,1135,1143,1189,1192,1203,1209,1218,1232,1244,1257,1261,1278,1283,1286,1291,1309,1317,1330,1341,1348,1372,1688,1697,1716,2063,2074,2088 'future.__init__':1448 'future.__iter__':1701 'future.add':1063 'future.cancel':1663 'future.remove':1067 'future.set':929,940,1029,1158 'futures._future_repr_info':922 'futures._get_loop':1254,1703 'futures._pyfuture':1333 'futures.isfuture':1241 'generat':138,288,325,536,587,1821,1838 'generatorexit':239,244,246,254 'get':1907 'getattr':545,556,561,1685 'got':1094,1470,1715,1864,1997 'happen':936,1090,1097 'high':2050 'high-level':2049 'hood':2080 'hope':292 'i.e':799,1662 'ignor':253 'implement':280,321,382,533,757,795,1337,1342,2007,2038 'import':330,332,1350,1937,1939 'includ':81 'incorrect':856 'info':920 'inherit':1334 'init':865,1426,1434 'initi':869 'insid':240 'inspect.isawaitable':1280 'inspect.iscoroutinefunction':425 'inspect.isgenerator':465,1817 'inspect.isgeneratorfunction':446 'instanc':764 'instead':420,1781,1832 'intend':801 'interfac':2083 'intern':986 'interpret':141 'introduct':8 'invalidstateerror':967 'invari':1351 'iscoroutinefunct':571 'isinst':468,492,1571 'isn':709 'iter':836,1609,1811 'key':78,151,924,2055,2059 'keyboardinterrupt':1666 'know':2019 'known':1087 'kw':456,460 'kwds':516,521 'lack':553 'last':23,1109,1184 'later':749,1657,1955,1972 'latter':1383 'leav':1876 'lei':2095,2098 'let':653,931 'level':2032,2041,2051 'librari':13,2043 'like':65,327,592,1546 'list':1010 'log':408,861,1407,1421,1455,2101 'logic':294 'long':1523 'look':42,87,575,641,655 'loop':29,36,338,357,360,377,664,671,725,772,867,875,882,899,901,907,910,990,1040,1083,1106,1115,1126,1149,1193,1220,1223,1226,1246,1251,1266,1273,1292,1293,1429,1435,1436,1518,1724,1810,1943,1958,1963,1966,1970 'loop.call':1954,1967,1971 'loop.close':378 'loop.create':1228 'loop.ensure':1128 'loop.run':372,603,631,1975 'loop.stop':1974 'loop.time':341,348 'low':2031,2040 'low-level':2030,2039 'main':674 'maintain':1352 'manual':542 'mao':2096,2099 'mark':391,947 'marker':789 'may':552,751 'mechan':74 'messag':406,1409 'meth':485,499 'method':128,135,152,266,740,925,963,1524,1602,1612,1895 'might':2034 'mimic':161 'mistak':2047 'most':1545 'msg':1637,1769 'must':810,1400,1698 'name':558,1431,1474,1481,1486,1945,1959 'need':434,1882 'new':1708,1727,1737,1750,1774,1795,1825,1848,1859,1871 'next':182,206,1611 'none':196,198,215,219,228,559,564,769,771,773,776,815,831,868,903,1194,1222,1249,1362,1395,1430,1432,1476,1490,1554,1581,1592,1597,1615,1690,1695,1802,1881,1947 'not-non':813 'notimpl':273 'object':108,537,883 'occur':1889 'one':68,1269,1396,1544,1808 'option':873 'origin':1650,2092 'overload':129,136 'packag':744 'pass':248,489 'pay':1529 'pend':767,970,1420,1423,1457 'place':629 'possibl':1005,1053 'post':25,62,1111,1186 'presenc':786 'prevent':1454,2045 'print':345,1951 'protocol':798 'provid':892 'publish':2093 'purpos':784 'pyfutur':1308 'python':1,9,26,39,45,56,90,97,140,275,287,290,299,307,324,415,428,529,746,1112,1335,1340,2084 'qualnam':534,554,563 'r':976,1472,1564,1566,1714,1719,1747,1789,1792,1842,1845,1868 'rais':186,188,199,210,220,233,238,250,703,966,971,1258,1295,1446,1463,1557,1674 'regist':714,1500 'relat':1046,1056,1073 'relationship':649 'relinquish':1805 'remov':1061 'repr':919 'requir':1305,1451 'res':457,463,466,469,471,474,477,493,495,501 'res.__await__':486 'result':693,768,930,941,944,946,954,978,1030,1095,1159,1613,1617,1642,1686,1704,1718,1734,1764,1791,1800,1818,1844,1867,1909,1932 'result._asyncio_future_blocking':1755 'result.add':1757 'return':181,205,264,272,364,443,500,565,572,1016,1138,1212,1238,1275,1284,1960,1999 'right':1629 'run':481,600,1173,1929 'runtimeerror':251,1710,1739,1776,1827,1861 'safe':692 'said':1163 'save':1648 'schedul':636,983,998,1079,1102,1122,1145,1155,1366,1377,1511,2002,2057 'see':607,1507,1892 'seem':49 'seen':1118,1181 'self':173,193,237,866,945,975,985,1025,1427,1502,1552,1563,1585,1664,1713,1736,1746,1788,1841,1879,1880 'self.__schedule_callbacks':981,1036 'self.__step':1497,1514,1726,1749,1794,1813,1847,1870 'self.__wakeup':1760 'self._callbacks':911,1012,1017 'self._cancel_message':1638,1770 'self._cancelled_exc':1658 'self._context':1493,1499,1730,1753,1762,1798,1815,1851,1874 'self._coro':1491,1579 'self._fut_waiter':1489,1580,1763 'self._fut_waiter.cancel':1768 'self._log_destroy_pending':1461 'self._loop':904,909,1584,1707,1878 'self._loop.call_soon':1023,1496,1725,1748,1793,1812,1846,1869,1918 'self._loop.get_debug':913 'self._make_cancelled_error':1575 'self._must_cancel':1487,1568,1576,1625,1633,1766,1771 'self._name':1477,1484 'self._result':977 'self._source_traceback':914,1438,1440 'self._state':969,974,979 'self.done':1556 'self.throw':243 'send':156,172,175,269,1601,1934 'serv':760 'set':540,828,834,879,943,952,1641,1671,1680 'short':644 'similar':302,1988 'sinc':414,590,1539 'singl':17 'single-thread':16 'slot':169 'someth':1854 'somewhat':1987 'soon':728,1003,1051,1968 'sourc':46,91,774 'specifi':1270 'stack':916 'stacklevel':422 'start':95 'state':766 'status':1417 'step':69,1364,1374,1551,1560 'still':1419 'stop':1632 'stopiter':187,189,211,247,1621 'str':1485,1946 'stupid':2046 'sub':312 'subclass':819 'subclasshook':257 'super':1433,1635,1640,1660,1670,1679 'sys._getframe':917 'systemexit':1667 'take':67,698 'task':7,85,625,637,643,651,1227,1229,1239,1306,1310,1319,1322,1332,1336,1355,1412,1458,1479,1480,1501,1510,1583,1626,1712,1741,1787,1840,1863,1877,1983,2065,2090 'task.__step':1520 'task._source_traceback':1234,1236 'task._step':840 'tb':197,217,225,232 'tell':842 'thread':18,675,691 'thread-saf':690 'three':77 'throw':192,270 'time':340,351,1898,1940,1949,1953,1962,1992 'time.time':1950 'timeout':700 'traceback':231,775,862 'trampolin':165,1925,1935,1942,1957,1969,1990 'transit':1380 'tri':159,242,483,598,1533,1593,1904,2024 'trigger':1035 'true':344,1424 'two':1541 'typ':194,221,223 'type':806 'typeerror':1296,1464 'types.coroutine':503 'typic':317 'understand':54,2026 'understood':32 'unifi':755 'upon':314 'use':103,147,281,322,417,544,660,780,884,895,1599,1780,1831,2036 'val':195,213,222,229,234 'val.with':230 'valu':174,177,184,208,809,2000 'valueerror':1259 'variabl':759,765 'via':722,1127 'vs':853 'w':517,566 'w.__name__':555 'w.__qualname__':560 'w._source_traceback':525,527 'wait':736 'waiter':1360,1369,1392 'wakeup':1389,1402 'warnings.warn':409 'way':2077 'wherea':1415 'without':574 'work':58 'would':64,620,640,1034 'wrap':1195,1287,1325,1345,1981,2072 'wrapper':508,514,573,593 'wrapper._is_coroutine':567 'wrong':1824 'yet':712 'yield':183,207,311,353,398,472,496,849,854,1696,1778,1783,1804,1819,1829,1834,1853,1866	en	Lei Mao
316	Amazon Liable for Defective Third-Party Products Rules CA Appellate Court	{"ver":2,"uid":1,"hash":"SHA1:5d05d972bba15c4df09556bd9264efa12aa361a9"}	https://californiaglobe.com/section-2/amazon-liable-for-defective-third-party-products-rules-ca-appelate-court/	2020-08-16 09:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24174276"> https://news.ycombinator.com/item?id=24174276 </a>	d139d91e4e6e8043b56ab8070c3d73ded8b45ab4	\N	f	2020-08-16 09:10:00	2020-08-18 19:10:08.549217	0			'/item?id=24174276':16 'amazon':1 'appel':11 'ca':10 'comment':13 'court':12 'defect':4 'liabl':2 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24174276':14 'parti':7 'product':8 'rule':9 'third':6 'third-parti':5	zh	hirundo
317	Arm co-founder: Sale to Nvidia would be a disaster	{"ver":2,"uid":1,"hash":"SHA1:e64b83d5336f7b5f38d028b47e8fba2dc5a345e2"}	https://www.bbc.com/news/technology-53637463	2020-08-16 09:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24173539"> https://news.ycombinator.com/item?id=24173539 </a>	69e10ca3aa4eb556ff0f11c228c12cbc49102aa8	\N	f	2020-08-16 09:10:00	2020-08-18 19:10:08.57048	0			'/item?id=24173539':15 'arm':1 'co':3 'co-found':2 'comment':12 'disast':11 'founder':4 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24173539':13 'nvidia':7 'sale':5 'would':8	zh	mepian
874	[推荐] 进击的 Spring Cloud Alibaba：框架与服务	{"ver":2,"uid":1,"hash":"SHA1:6bd3593df249f175e1ed0914e92b4b0eef458059"}	https://toutiao.io/k/tscuwq8	2020-09-06 18:10:11	[推荐] 进击的 Spring Cloud Alibaba：框架与服务	9f6a026f820755daa207b7b4b6d8c62c41321412	\N	f	2020-09-03 01:10:00	2020-09-10 05:10:14.658008	0			'alibaba':5,11 'cloud':4,10 'spring':3,9 '推荐':1,7 '框架与服务':6,12 '进击的':2,8	zh	
20	Dynamically scoped variables in Go	{"ver":2,"uid":1,"hash":"SHA1:cb9eaaa81645074cdb6d89892311851abcdb2ccf"}	https://dave.cheney.net/2019/12/08/dynamically-scoped-variables-in-go	2019-12-08 03:19:10	\n<p>This is a thought experiment in API design. It starts with the classic Go unit testing idiom:</p>\n\n\n\n<pre class="wp-block-preformatted">func TestOpenFile(t *testing.T) {\n        f, err := os.Open("notfound")\n        if err != nil {\n                t.Fatal(err)\n        }\n\n        // ...\n}</pre>\n\n\n\n<p>What&#8217;s the problem with this code? The assertion. <code>if err != nil { ... }</code> is repetitive and in the case where multiple conditions need to be checked, somewhat error prone if the author of the test uses <code>t.Error</code> not <code>t.Fatal</code>, eg:</p>\n\n\n\n<pre class="wp-block-preformatted">        f, err := os.Open("notfound")\n        if err != nil {\n                t.Error(err)\n        }\n        f.Close() // boom!</pre>\n\n\n\n<p>What&#8217;s the solution? DRY it up, of course, by moving the repetitive assertion logic to a helper:</p>\n\n\n\n<pre class="wp-block-preformatted">func TestOpenFile(t *testing.T) {\n &nbsp; &nbsp; &nbsp;  f, err := os.Open("notfound")\n &nbsp; &nbsp; &nbsp;  check(t, err)\n\n  &nbsp; &nbsp; &nbsp; // ...\n}\n \nfunc check(t *testing.T, err error) {\n &nbsp; &nbsp; &nbsp; if err != nil {\n &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.Helper()\n &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; t.Fatal(err)\n &nbsp; &nbsp;&nbsp; &nbsp; }\n}</pre>\n\n\n\n<p>Using the <code>check</code> helper the code is a little cleaner, and clearer, <em>check the error</em>, and hopefully the indecision between <code>t.Error</code> and <code>t.Fatal</code> has been solved. The downside of abstracting the assertion to a helper function is now you need to pass a <code>testing.T</code> into <em>each and every invocation</em>. Worse, you need to pass a <code>*testing.T</code> to everything that needs to call <code>check</code>, transitively, just in case.</p>\n\n\n\n<p>This is ok, I guess, but I will make the observation that the <code>t</code> variable is only needed <em>when the assertion fails</em> &#8212; and even in a testing scenario, most of the time, most of the tests pass, so that means reading, and writing, all these <code>t</code>&#8216;s is a constant overhead for the relatively rare occasion that a test fails.</p>\n\n\n\n<p>What about if we did something like this instead?</p>\n\n\n\n<pre class="wp-block-preformatted">func TestOpenFile(t *testing.T) {\n &nbsp; &nbsp; &nbsp;  f, err := os.Open("notfound")\n &nbsp; &nbsp; &nbsp;&nbsp; check(err)\n \n &nbsp; &nbsp;  &nbsp; // ...\n}\n \nfunc check(err error) {\n&nbsp; &nbsp; &nbsp; &nbsp; if err != nil {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; panic(err.Error())\n&nbsp; &nbsp; &nbsp; &nbsp; }\n}</pre>\n\n\n\n<p>Yeah, that&#8217;ll work, but it has a few problems</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>go test</strong>\n--- FAIL: TestOpenFile (0.00s)\npanic: open notfound: no such file or directory [recovered]\n&nbsp; &nbsp; &nbsp; &nbsp; panic: open notfound: no such file or directory\n\ngoroutine 22 [running]:\ntesting.tRunner.func1(0xc0000b4400)\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/go/src/testing/testing.go:874 +0x3a3\npanic(0x111b040, 0xc0000866f0)\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/go/src/runtime/panic.go:679 +0x1b2\ngithub.com/pkg/expect_test.check(...)\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/src/github.com/pkg/expect/expect_test.go:18\ngithub.com/pkg/expect_test.TestOpenFile(0xc0000b4400)\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/src/github.com/pkg/expect/expect_test.go:10 +0xa1\ntesting.tRunner(0xc0000b4400, 0x115ac90)\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/go/src/testing/testing.go:909 +0xc9\ncreated by testing.(*T).Run\n&nbsp; &nbsp; &nbsp; &nbsp; /Users/dfc/go/src/testing/testing.go:960 +0x350\nexit status 2</pre>\n\n\n\n<p>Let&#8217;s start with the good; we didn&#8217;t have to pass a <code>testing.T</code> every place we call <code>check</code>, the test fails immediately, and we get a nice message in the panic &#8212; albeit twice. But <em>where</em> the assertion failed is hard to see. It occurred on <code>expect_test.go:11</code> but you&#8217;d be forgiven for not knowing that.</p>\n\n\n\n<p>So <code>panic</code> isn&#8217;t really a good solution, but there&#8217;s something in this stack trace that is &#8212; can you see it? Here&#8217;s a hint, <code>github.com/pkg/expect_test.TestOpenFile(0xc0000b4400)</code>.</p>\n\n\n\n<p><code>TestOpenFile</code> has a <code>t</code> value, it was passed to it by <code>tRunner</code>, so there&#8217;s a <code>testing.T</code> in memory at address <code>0xc0000b4400</code>. What if we could get access to that <code>t</code> inside <code>check</code>? Then we could use it to call <code>t.Helper</code> and <code>t.Fatal</code>. Is that possible?</p>\n\n\n\n<h2>Dynamic scoping</h2>\n\n\n\n<p>What we want is to be able to access a variable whose declaration is neither global, or local to the function, but somewhere higher in the call stack. This is called <em>dynamic scoping</em>. Go doesn&#8217;t support dynamic scoping, but it turns out, for restricted cases, we can fake it. I&#8217;ll skip to the chase:</p>\n\n\n\n<pre class="wp-block-preformatted">// getT returns the address of the testing.T passed to testing.tRunner\n// which called the function which called getT. If testing.tRunner cannot\n// be located in the stack, say if getT is not called from the main test\n// goroutine, getT returns nil.\nfunc getT() *testing.T {\n&nbsp; &nbsp; &nbsp; &nbsp; var buf [8192]byte\n&nbsp; &nbsp; &nbsp; &nbsp; n := runtime.Stack(buf[:], false)\n&nbsp; &nbsp; &nbsp; &nbsp; sc := bufio.NewScanner(bytes.NewReader(buf[:n]))\n&nbsp; &nbsp; &nbsp; &nbsp; for sc.Scan() {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var p uintptr\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n, _ := fmt.Sscanf(sc.Text(), "testing.tRunner(%v", &amp;p)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if n != 1 {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (*testing.T)(unsafe.Pointer(p))\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; return nil\n}</pre>\n\n\n\n<p>We know that each <code>Test</code> is called by the <code>testing</code> package in its own goroutine (see the stack trace above). The <code>testing</code> package launches the test via a function called <code>tRunner</code> which takes a <code>*testing.T</code> and a <code>func(*testing.T)</code> to invoke. Thus we grab a stack trace of the current goroutine, scan through it for the line beginning with <code>testing.tRunner</code> &#8212; which can only be the <code>testing</code> package as <code>tRunner</code> is a private function &#8212; and parse the address of the first parameter, which is a pointer to a <code>testing.T</code>. With a little <code>unsafe</code> we convert the raw pointer back to a <code>*testing.T</code> and we&#8217;re done.</p>\n\n\n\n<p>If the search fails then it is likely that <code>getT</code> wasn&#8217;t called from a <code>Test</code>. This is actually ok because the reason we needed the <code>*testing.T</code> was to call <code>t.Fatal</code> and the testing package already requires that <code>t.Fatal</code> be called from the <a href="https://golang.org/pkg/testing/#T.FailNow">main test goroutine</a>.</p>\n\n\n\n<pre class="wp-block-preformatted">import "github.com/pkg/expect"\n\nfunc TestOpenFile(t *testing.T) {\n&nbsp; &nbsp; &nbsp; &nbsp; f, err := os.Open("notfound")\n&nbsp; &nbsp; &nbsp; &nbsp; expect.Nil(err)\n \n&nbsp; &nbsp; &nbsp; &nbsp; // ...\n}</pre>\n\n\n\n<p>Putting it all together we&#8217;ve eliminated the assertion boilerplate and possibly made the expectation of the test a little clearer to read,<em> after opening the file <code>err</code> is expected to be nil</em>.</p>\n\n\n\n<h2>Is this fine?</h2>\n\n\n\n<p>At this point you should be asking, <em>is this fine?</em> And the answer is, no, this is not fine. You should be screaming internally at this point. But it&#8217;s probably worth introspecting those feelings of revulsion.</p>\n\n\n\n<p>Apart from the inherent fragility of scrobbling around in a goroutine&#8217;s call stack, there are some serious design issues:</p>\n\n\n\n<ol><li>The <code>expect.Nil</code>&#8216;s behaviour now depends on <em>who called it</em>. Provided with the same arguments it may have different behaviour depending on where it appears in the call stack &#8212; this is unexpected.</li><li>Taken to the extreme dynamic scoping effective brings into the scope of a single function all the variables passed into any function that preceded it. It is a side channel for passing data in to and out of functions that is not explicitly documented in function declaration.</li></ol>\n\n\n\n<p>Ironically these are precisely the critiques I have of <a href="https://dave.cheney.net/2017/01/26/context-is-for-cancelation"><code>context.Context</code></a>. I&#8217;ll leave it to you to decide if they are justified.</p>\n\n\n\n<h2>A final word</h2>\n\n\n\n<p>This is a bad idea, no argument there. This is not a pattern you should ever use in production code. But, this isn&#8217;t production code, it&#8217;s a test, and perhaps there are different rules that apply to test code. After all, we use mocks, and stubs, and monkey patching, and type assertions, and reflection, and helper functions, and build flags, and global variables, all so we can test our code effectively. None of those, uh, <em>hacks</em> will ever show up in the production code path, so is it really the end of the world?</p>\n\n\n\n<p>If you&#8217;ve read this far perhaps you&#8217;ll agree with me that as unconventional as this approach is, not having to pass a <code>*testing.T</code> into every function that could possibly need to assert something transitively, makes for clearer test code. </p>\n\n\n\n<p>So maybe, in this case, the ends do justify the means.</p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<p>If you&#8217;re interested, I&#8217;ve put together a <a href="https://github.com/pkg/expect">small assertion library</a> using this pattern. <em>Caveat emptor</em>.</p>\n	51bf818e4b55d8e7d2243cb47706089f36e9c9ad	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.227305	0			'+0':323,330,342,349,358 '/pkg/expect':782 '/pkg/expect_test.check(...)':334 '/pkg/expect_test.testopenfile(0xc0000b4400)':339 '/pkg/expect_test.testopenfile(0xc0000b4400).':447 '/users/dfc/go/src/runtime/panic.go':328 '/users/dfc/go/src/testing/testing.go':321,347,356 '/users/dfc/src/github.com/pkg/expect/expect_test.go':335,340 '0.00':296 '0x111b040':326 '0x115ac90':346 '0xc0000866f0':327 '0xc0000b4400':320,345,469 '1':620 '10':341 '18':336 '2':362 '22':316 '679':329 '8192':596 '874':322 '909':348 '960':357 'a':8,102,134,160,169,181,219,242,251,289,375,389,424,443,450,463,505,655,661,664,672,698,711,714,717,727,747,811,875,929,944,986,991,1000,1017,1108,1145 'able':502 'about':255 'above':647 'abstracting':156 'access':475,504 'actually':751 'address':468,555,704 'after':816,1030 'agree':1094 'albeit':395 'all':237,795,932,1031,1054 'already':768 'and':50,137,142,148,173,216,235,386,489,663,701,729,764,803,839,952,1019,1035,1037,1040,1043,1045,1048,1051 'answer':841 'any':937 'apart':866 'api':12 'appears':910 'apply':1026 'approach':1102 'are':881,966,984,1022 'argument':995 'arguments':900 'around':873 'as':695,1098,1100 'asking':835 'assert':1118 'assertion':44,99,158,214,400,801,1147 'assertions':1042 'at':467,829,853 'author':66 'back':725 'bad':992 'be':59,413,501,572,691,772,824,834,850 'because':753 'been':151 'beginning':685 'behaviour':889,905 'between':146 'boilerplate':802 'boom':85 'brings':924 'buf':595,600,605 'bufio.newscanner':603 'build':1049 'but':199,286,397,410,427,517,535,856,1009 'by':95,352,458,635 'byte':597 'bytes.newreader':604 'call':188,380,487,522,762,878,913 'called':526,563,567,582,634,657,745,773,894 'can':437,543,689,1057 'cannot':571 'case':53,193,1130 'cases':541 'caveat':1152 'channel':946 'chase':551 'check':112,116,129,139,189,271,274,381,480 'checked':60 'classic':18 'cleaner':136 'clearer':138,813,1123 'code':42,132,1008,1014,1029,1060,1074,1125 'conditions':56 'constant':243 'context.context':973 'continue':621 'convert':721 'could':473,483,1114 'course':94 'created':351 'critiques':969 'current':677 'd':412 'data':949 'decide':981 'declaration':508,963 'depending':906 'depends':891 'design':13,884 'did':258 'didn':370 'different':904,1023 'directory':305,314 'do':1133 'documented':960 'doesn':530 'done':732 'downside':154 'dry':90 'dynamic':494,527,533,921 'dynamically':1 'each':172,631 'effective':923 'effectively':1061 'eg':74 'eliminated':799 'emptor':1153 'end':1081 'ends':1132 'err':28,32,35,46,76,80,83,109,114,119,122,126,268,272,275,278,788,792,820 'err.error':281 'error':62,120,141,276 'even':217 'ever':1004,1068 'every':174,377,1111 'everything':184 'exit':360 'expect.nil':791,887 'expect_test.go:11':409 'expectation':807 'expected':822 'experiment':10 'explicitly':959 'extreme':920 'f':27,75,108,267,787 'f.close':84 'fail':294 'failed':401 'fails':215,253,384,736 'fake':544 'false':601 'far':1090 'feelings':863 'few':290 'file':303,312,819 'final':987 'fine':828,838,847 'first':707 'flags':1050 'fmt.sscanf':613 'for':245,415,539,607,682,947,1122 'forgiven':414 'fragility':870 'from':583,746,774,867 'func':23,104,115,263,273,591,665,783 'func1':319 'function':162,516,565,656,700,931,938,962,1112 'functions':955,1047 'get':388,474 'gett':552,568,579,588,592,742 'github.com':333,338,446,781 'github.com/pkg/expect':780 'github.com/pkg/expect_test.check(...)':332 'github.com/pkg/expect_test.testopenfile(0xc0000b4400)':337 'github.com/pkg/expect_test.testopenfile(0xc0000b4400).':445 'global':511,1052 'go':5,19,292,529 'good':368,425 'goroutine':315,587,642,678,778,876 'grab':671 'guess':198 'hacks':1066 'hard':403 'has':150,288,449 'have':372,903,971 'having':1105 'helper':103,130,161,1046 'here':441 'higher':519 'hint':444 'hopefully':143 'i':197,200,546,970,974,1141 'idea':993 'idiom':22 'if':31,45,64,79,121,256,277,471,569,578,618,733,982,1085,1137 'immediately':385 'import':779 'in':4,11,51,192,218,392,431,465,520,574,639,874,911,950,961,1006,1071,1128 'indecision':145 'inherent':869 'inside':479 'instead':262 'interested':1140 'internally':852 'into':171,925,936,1110 'introspecting':861 'invocation':175 'invoke':668 'ironically':964 'is':7,48,133,163,195,209,241,402,436,491,499,509,525,580,633,697,710,739,750,821,826,836,842,845,916,943,957,990,998,1077,1103 'isn':421,1011 'issues':885 'it':14,91,287,406,440,453,457,485,536,545,681,738,794,857,895,901,909,941,942,977,1015,1078 'its':640 'just':191 'justified':985 'justify':1134 'know':629 'knowing':417 'launches':651 'leave':976 'let':363 'library':1148 'like':260 'likely':740 'line':684 'little':135,718,812 'll':284,547,975,1093 'local':513 'located':573 'logic':100 'made':805 'main':585,776 'make':202 'makes':1121 'may':902 'maybe':1127 'me':1096 'means':233,1136 'memory':466 'message':391 'mocks':1034 'monkey':1038 'most':222,226 'moving':96 'multiple':55 'n':598,606,612,619 'need':57,166,178,1116 'needed':211,757 'needs':186 'neither':510 'nice':390 'nil':33,47,81,123,279,590,627,825 'no':301,310,843,994 'none':1062 'not':72,416,581,846,958,999,1104 'notfound':30,78,111,270,300,309,790 'now':164,890 'observation':204 'occasion':249 'occurred':407 'of':67,93,155,223,227,556,675,705,808,864,871,928,954,972,1063,1082 'ok':196,752 'on':408,892,907 'only':210,690 'open':299,308 'opening':817 'or':304,313,512 'os.open':29,77,110,269,789 'our':1059 'out':538,953 'overhead':244 'own':641 'p':610,617,625 'package':638,650,694,767 'panic':280,298,307,325,394,420 'parameter':708 'parse':702 'pass':168,180,230,374,1107 'passed':455,559,935 'passing':948 'patching':1039 'path':1075 'pattern':1001,1151 'perhaps':1020,1091 'place':378 'point':831,855 'pointer':712,724 'possible':493 'possibly':804,1115 'preceded':940 'precisely':967 'private':699 'probably':859 'problem':39 'problems':291 'production':1007,1013,1073 'prone':63 'provided':896 'put':1143 'putting':793 'rare':248 'raw':723 're':731,1139 'read':815,1088 'reading':234 'really':423,1079 'reason':755 'recovered':306 'reflection':1044 'relatively':247 'repetitive':49,98 'requires':769 'restricted':540 'return':622,626 'returns':553,589 'revulsion':865 'rules':1024 'run':355 'running':317 'runtime.stack':599 's':37,87,240,297,364,429,442,462,858,877,888,1016 'same':899 'say':577 'sc':602 'sc.scan':608 'sc.text':614 'scan':679 'scenario':221 'scope':927 'scoped':2 'scoping':495,528,534,922 'screaming':851 'scrobbling':872 'search':735 'see':405,439,643 'serious':883 'should':833,849,1003 'show':1069 'side':945 'single':930 'skip':548 'small':1146 'so':231,419,460,1055,1076,1126 'solution':89,426 'solved':152 'some':882 'something':259,430,1119 'somewhat':61 'somewhere':518 'stack':433,523,576,645,673,879,914 'start':365 'starts':15 'status':361 'stubs':1036 'such':302,311 'support':532 't':25,106,113,117,207,239,265,354,371,422,451,478,531,744,785,1012 't.error':71,82,147 't.fatal':34,73,125,149,490,763,771 't.helper':124,488 'takes':660 'test':69,252,293,383,586,632,653,748,777,810,1018,1028,1058,1124 'testing':21,220,353,637,649,693,766 'testing.t':26,107,118,170,182,266,376,464,558,593,623,662,666,715,728,759,786,1109 'testing.trunner':318,344,561,570,615,687 'testopenfile':24,105,264,295,448,784 'tests':229 'that':185,205,232,250,283,418,435,477,492,630,741,770,939,956,1025,1097,1113 'the':17,38,43,52,65,68,88,97,128,131,140,144,153,157,203,206,213,224,228,246,367,382,393,399,515,521,550,554,557,564,575,584,636,644,648,652,676,683,692,703,706,722,734,754,758,765,775,800,806,809,818,840,868,886,898,912,919,926,933,968,1072,1080,1083,1131,1135 'then':481,737 'there':428,461,880,996,1021 'these':238,965 'they':983 'this':6,41,194,261,432,524,749,827,830,837,844,854,915,989,997,1010,1089,1101,1129,1150 'those':862,1064 'thought':9 'through':680 'thus':669 'time':225 'to':58,101,159,167,179,183,187,373,404,456,476,486,500,503,514,549,560,667,713,726,761,814,823,918,951,978,980,1027,1106,1117 'together':796,1144 'trace':434,646,674 'transitively':190,1120 'trunner':459,658,696 'turns':537 'twice':396 'type':1041 'uh':1065 'uintptr':611 'unconventional':1099 'unexpected.taken':917 'unit':20 'unsafe':719 'unsafe.pointer':624 'up':92,1070 'use':484,1005,1033 'uses':70 'using':127,1149 'v':616 'value':452 'var':594,609 'variable':208,506 'variables':3,934,1053 've':798,1087,1142 'via':654 'want':498 'was':454,760 'wasn':743 'we':257,369,379,387,472,482,497,542,628,670,720,730,756,797,1032,1056 'what':36,86,254,470,496 'when':212 'where':54,398,908 'which':562,566,659,688,709 'who':893 'whose':507 'will':201,1067 'with':16,40,366,686,716,897,1095 'word':988 'work':285 'world':1084 'worse':176 'worth':860 'writing':236 'x1b2':331 'x350':359 'x3a3':324 'xa1':343 'xc9':350 'yeah':282 'you':165,177,411,438,832,848,979,1002,1086,1092,1138	en	Dave Cheney
700	[推荐] DBA 的福音，SQL 审核利器：goinception	{"ver":2,"uid":1,"hash":"SHA1:a87537761e8333335b0aaba1b2d2d81790436f1b"}	https://toutiao.io/k/gatrxff	2020-08-31 20:10:10	[推荐] DBA 的福音，SQL 审核利器：goinception	4e0d1053863882cd3a4bd0e8c959d7eb08b0ee44	\N	f	2020-08-28 01:10:00	2020-09-10 02:10:10.356119	0			'dba':2,8 'goinception':6,12 'sql':4,10 '审核利器':5,11 '推荐':1,7 '的福音':3,9	zh	
748	Show HN: 3D first person game rendered in CSS/HTML	{"ver":2,"uid":1,"hash":"SHA1:8b0cb4f5fe57ab384269fd33c597d6ec74c141d4"}	https://pantel.is/projects/css3d/	2020-08-29 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24305834"> https://news.ycombinator.com/item?id=24305834 </a>	53007178376c4f7ef6a0fe08a1f8a2e32b0b6333	\N	f	2020-08-29 08:10:00	2020-08-31 15:10:08.560106	0			'/item?id=24305834':13 '3d':3 'comment':10 'css/html':9 'first':4 'game':6 'hn':2 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24305834':11 'person':5 'render':7 'show':1	zh	pantelisk
446	Can't you just right click?	{"ver":2,"uid":1,"hash":"SHA1:9711f1e9994b70569733640f2b5acb1782f543aa"}	https://lapcatsoftware.com/articles/unsigned.html	2020-08-20 01:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24217116"> https://news.ycombinator.com/item?id=24217116 </a>	e1b112db7f9115bef64ac5ac44a1456282ca2f9a	\N	f	2020-08-20 01:10:00	2020-08-24 01:10:07.549667	0			'/item?id=24217116':10 'click':6 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24217116':8 'right':5	zh	bangonkeyboard
701	云原生时代消息中间件的演进路线	{"ver":2,"uid":1,"hash":"SHA1:70520f0f79fb749690096ed46d8759fc0cd878f1"}	https://toutiao.io/k/colr6z5	2020-08-28 01:10:22	云原生时代消息中间件的演进路线	1fc5d5e51052d6ee25d603f456285b5783541cbd	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.490233	0			'云原生时代消息中间件的演进路线':1,2	zh	
876	Goroutine 是如何处理栈的？	{"ver":2,"uid":1,"hash":"SHA1:ab5a365dda953cd07b8191934de2554ebdc34f73"}	https://toutiao.io/k/d9qi77z	2020-09-03 01:10:12	Goroutine 是如何处理栈的？	de368b755dca0396c9b848ce4cee364aaf9786bf	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.932716	0			'goroutine':1,3 '是如何处理栈的':2,4	zh	
878	微信「看一看」朋友在看的增强推荐系统	{"ver":2,"uid":1,"hash":"SHA1:fd582e922d2f01a75d50bffac29b9d20689c370e"}	https://toutiao.io/k/otgalg4	2020-09-03 01:10:12	微信「看一看」朋友在看的增强推荐系统	9275552b83bcaa3e53170b880fcf38e29c1d158f	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.942649	0			'微信':1,4 '朋友在看的增强推荐系统':3,6 '看一看':2,5	zh	
875	在 Deno 中构建一个命令行天气预报程序	{"ver":2,"uid":1,"hash":"SHA1:42c7cefb0c704c057db75ccfdd298f2853474388"}	https://toutiao.io/k/7f0w67r	2020-09-03 01:10:12	在 Deno 中构建一个命令行天气预报程序	b6385a627d0d83a5f7924858774ada0f5a00323d	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.944558	0			'deno':2,5 '中构建一个命令行天气预报程序':3,6 '在':1,4	zh	
877	应用诊断利器 Arthas 新版在线教程上线啦	{"ver":2,"uid":1,"hash":"SHA1:ff75f344c0994590a34fc0a105f2d56bbafaf58e"}	https://toutiao.io/k/1y4y29c	2020-09-03 01:10:12	应用诊断利器 Arthas 新版在线教程上线啦	ad983cb4096ac52ed3da67a7062a466b1069ee76	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.940696	0			'arthas':2,5 '应用诊断利器':1,4 '新版在线教程上线啦':3,6	zh	
879	Ray 之设计动机及使用	{"ver":2,"uid":1,"hash":"SHA1:a9a093075dd339ec883c25c4216b6f9c086c9b88"}	https://toutiao.io/k/xd742wj	2020-09-03 01:10:12	Ray 之设计动机及使用	37d498a207c9b3e7f57a9c2818ab727b5cbaf430	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.946493	0			'ray':1,3 '之设计动机及使用':2,4	zh	
355	I fear App Review is getting too powerful (2015) [pdf]	{"ver":2,"uid":1,"hash":"SHA1:7ef4017fb6b64d666f9113176a7142fc478db65a"}	https://judiciary.house.gov/uploadedfiles/015127.pdf	2020-08-17 22:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24189341"> https://news.ycombinator.com/item?id=24189341 </a>	89bf7ff8a69b8713ad3666e2f988f8eb0c0cabc7	\N	f	2020-08-17 22:10:00	2020-08-21 06:10:09.88615	0			'/item?id=24189341':14 '2015':9 'app':3 'comment':11 'fear':2 'get':6 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24189341':12 'pdf':10 'power':8 'review':4	zh	atarian
449	我在阿里写代码学会的六件事	{"ver":2,"uid":1,"hash":"SHA1:b10a562667c8b483dbbc67673d748322bc517a5f"}	https://toutiao.io/k/k7jdi3w	2020-08-20 03:10:10	我在阿里写代码学会的六件事	d15f1c64d9650692e3c4728f6a2ee112c9c6a515	\N	f	2020-08-20 03:10:00	2020-08-21 00:10:48.67514	0			'我在阿里写代码学会的六件事':1,2	zh	
450	如何避免用动态语言的思维写 Go 代码	{"ver":2,"uid":1,"hash":"SHA1:74ec6733fae3f4c3b644422122a462131fc9f3f0"}	https://toutiao.io/k/lmt5cd6	2020-08-20 03:10:10	如何避免用动态语言的思维写 Go 代码	43ae83182bfef23e649b0954a015be128ca02330	\N	f	2020-08-20 03:10:00	2020-08-21 00:10:48.677165	0			'go':2,5 '代码':3,6 '如何避免用动态语言的思维写':1,4	zh	
268	Google resumes its attack on the URL bar, hides full addresses on Chrome 86	{"ver":2,"uid":1,"hash":"SHA1:ea1cb210315eb38dcf3fc7e5fdd2fcb0d7b9dca9"}	https://www.androidpolice.com/2020/08/13/google-resumes-its-senseless-attack-on-the-url-bar-hides-full-addresses-on-chrome-canary/	2020-08-14 16:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24156986"> https://news.ycombinator.com/item?id=24156986 </a>	85b609747d9f6ff4d5f1b9a221ad3f0412178c04	\N	f	2020-08-14 16:10:00	2020-08-18 02:10:08.390344	0			'/item?id=24156986':18 '86':14 'address':11 'attack':4 'bar':8 'chrome':13 'comment':15 'full':10 'googl':1 'hide':9 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24156986':16 'resum':2 'url':7	zh	atriix
271	Welders set off Beirut blast while securing explosives	{"ver":2,"uid":1,"hash":"SHA1:0d0d367255a1064fe8e17786985766f455db58a8"}	https://www.maritime-executive.com/article/report-welders-set-off-the-beirut-blast-while-securing-explosives	2020-08-15 01:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24160473"> https://news.ycombinator.com/item?id=24160473 </a>	129e51b8b2e9ce6847f8a0a2fd8678490613005b	\N	f	2020-08-15 01:10:00	2020-08-18 02:10:08.406426	0			'/item?id=24160473':12 'beirut':4 'blast':5 'comment':9 'explos':8 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24160473':10 'secur':7 'set':2 'welder':1	zh	tafda
451	分布式集群调度框架 Mesos 架构与实现	{"ver":2,"uid":1,"hash":"SHA1:441bc014e456a976d5b55c6c338f362a14ee9806"}	https://toutiao.io/k/6sj58vw	2020-08-20 03:10:10	分布式集群调度框架 Mesos 架构与实现	12f2a86e486643b5a1ed7726a1111ec0a6040d9e	\N	f	2020-08-20 03:10:00	2020-08-21 00:10:48.693509	0			'mesos':2,5 '分布式集群调度框架':1,4 '架构与实现':3,6	zh	
702	[推荐] 订单中心，1 亿数据架构，这次服了	{"ver":2,"uid":1,"hash":"SHA1:23ac3488031938ac02d9c99cb140486b5390184a"}	https://toutiao.io/k/8r5oqql	2020-08-31 18:10:11	[推荐] 订单中心，1 亿数据架构，这次服了	282238ba2e2c71da0796980748f4ed852db6d393	\N	f	2020-08-28 01:10:00	2020-09-10 03:10:13.554735	0			'1':3,8 '亿数据架构':4,9 '推荐':1,6 '订单中心':2,7 '这次服了':5,10	zh	
422	The Death of Corporate Research Labs	{"ver":2,"uid":1,"hash":"SHA1:35b91116bef88ffb7b26ebe32071948b44429fdc"}	https://blog.dshr.org/2020/05/the-death-of-corporate-research-labs.html?m=1	2020-08-19 08:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24200764"> https://news.ycombinator.com/item?id=24200764 </a>	81c5d4b46c2486ffb48f3dbbaea3ebe9b09382d7	\N	f	2020-08-19 08:10:00	2020-08-21 06:10:09.954914	0			'/item?id=24200764':10 'comment':7 'corpor':4 'death':2 'lab':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24200764':8 'research':5	zh	banjo_milkman
502	Telegram messaging app proves crucial to Belarus protests	{"ver":2,"uid":1,"hash":"SHA1:3e6513e3de83a6545b6b8382cc7ca36abc503e63"}	https://www.latimes.com/world-nation/story/2020-08-21/telegram-messaging-app-crucial-belarus-protests	2020-08-21 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24235908"> https://news.ycombinator.com/item?id=24235908 </a>	7523e375030a6f25bb292318369fb26daaf497c8	\N	f	2020-08-21 19:10:00	2020-08-25 22:10:10.484318	0			'/item?id=24235908':12 'app':3 'belarus':7 'comment':9 'crucial':5 'messag':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24235908':10 'protest':8 'prove':4 'telegram':1	zh	gamblor956
285	[推荐] 神器推荐！让我用的最爽的几款 Windows 软件，非常实用	{"ver":2,"uid":1,"hash":"SHA1:e2e51d1c20ea8bfcfd5f7781faa3d76e19072c7f"}	https://toutiao.io/k/n1da8v7	2020-08-15 18:10:07	[推荐] 神器推荐！让我用的最爽的几款 Windows 软件，非常实用	76deaddb4ea359aa327f48e825f7b1ed024cb0ab	\N	f	2020-08-15 18:10:00	2020-08-26 13:10:11.071978	0			'windows':4,10 '推荐':1,7 '神器推荐':2,8 '让我用的最爽的几款':3,9 '软件':5,11 '非常实用':6,12	zh	
669	如何优雅的实现消息通信？	{"ver":2,"uid":1,"hash":"SHA1:788abe644b56bd6ddf6edf82e429812c8434bd0b"}	https://toutiao.io/k/iyfwuag	2020-08-27 02:10:09	如何优雅的实现消息通信？	2f7e4bda55a79f1183fcd74eb9b28c763847c398	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.079504	0			'如何优雅的实现消息通信':1,2	zh	
667	Prometheus 监控神器：服务发现篇（一）	{"ver":2,"uid":1,"hash":"SHA1:7c4e121572dca689ae4a563873e88e80cc45fed4"}	https://toutiao.io/k/t82dysu	2020-08-27 02:10:09	Prometheus 监控神器：服务发现篇（一）	3232128e33480f0f1fd0d6e876ab34c52e0178ff	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.083436	0			'prometheus':1,5 '一':4,8 '服务发现篇':3,7 '监控神器':2,6	zh	
668	onemall：芋道 mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战	{"ver":2,"uid":1,"hash":"SHA1:57cfd98d312022a3092609f66b656baf1f54a753"}	https://toutiao.io/k/zo3f5l5	2020-08-27 02:10:09	onemall：芋道 mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战	9d4ac70cbb8d0d257047903879b92befc114bedc	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.085512	0			'b2c':7,15 'mall':3,11 'onemall':1,9 '商城':4,12 '基于微服务的思想':5,13 '构建在':6,14 '电商场景下的项目实战':8,16 '芋道':2,10	zh	
704	网站图标开发指南	{"ver":2,"uid":1,"hash":"SHA1:4bba4cae9359552f2e775de8f3b80a12376fa2b1"}	https://toutiao.io/k/wjr32y6	2020-08-28 01:10:22	网站图标开发指南	65c27537c80865070ea6e0431152dcd581a99023	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.505287	0			'网站图标开发指南':1,2	zh	
276	Puppeteer 入门与实战	{"ver":2,"uid":1,"hash":"SHA1:0121a7762b9545732e3251a867726892d7cd5653"}	https://toutiao.io/k/i4tupr5	2020-08-15 03:10:08	Puppeteer 入门与实战	b22694f6d39ade7556801dee8054fbb0cb7887b3	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.893148	0			'puppeteer':1,3 '入门与实战':2,4	zh	
274	Volcano 1.0：分布式调度系统漫谈	{"ver":2,"uid":1,"hash":"SHA1:d0411c6ecf98bb54645eeebef8cca56bc82174c2"}	https://toutiao.io/k/o1gs8d4	2020-08-15 03:10:08	Volcano 1.0：分布式调度系统漫谈	fa8a6faf2be2e6f5c964a2b3757d2c337d3bd354	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.897372	0			'1.0':2,5 'volcano':1,4 '分布式调度系统漫谈':3,6	zh	
539	Rosatom releases previously classified documentary video of Tsar Bomba nuke test	{"ver":2,"uid":1,"hash":"SHA1:1c0b93f79a6a4fe5824db333eb445789e6be2366"}	https://thebarentsobserver.com/en/security/2020/08/rosatom-releases-previously-classified-documentary-video-50-mt-novaya-zemlya-test	2020-08-23 12:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24247349"> https://news.ycombinator.com/item?id=24247349 </a>	349ec714b84c9c2fab2eb3806aff2a92cc16f271	\N	f	2020-08-23 12:10:00	2020-08-25 22:10:10.516363	0			'/item?id=24247349':15 'bomba':9 'classifi':4 'comment':12 'documentari':5 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24247349':13 'nuke':10 'previous':3 'releas':2 'rosatom':1 'test':11 'tsar':8 'video':6	zh	vinnyglennon
670	评估数据中台成熟度的 7 个维度	{"ver":2,"uid":1,"hash":"SHA1:eb460c2d870ca6a7384ecefe6895a9584eecbd02"}	https://toutiao.io/k/v1f5q2w	2020-08-27 02:10:09	评估数据中台成熟度的 7 个维度	6148076969d5570278304905741445cfa35097f1	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.087536	0			'7':2,5 '个维度':3,6 '评估数据中台成熟度的':1,4	zh	
880	有趣的群体	{"ver":2,"uid":1,"hash":"SHA1:4104a9b712b40a3b62fb0879b2126ab59d7f5880"}	https://toutiao.io/k/pxq4qeu	2020-09-03 01:10:12	有趣的群体	a01339f5400dc8795cd1463a1b7634ec177f8533	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.936807	0			'有趣的群体':1,2	zh	
273	[译] 优化 Golang 服务来减少 40% 以上的 CPU	{"ver":2,"uid":1,"hash":"SHA1:d2d6f2ce36671d5b4b8896f8e813313cd03bd3c1"}	https://toutiao.io/k/o3a92oq	2020-08-15 03:10:08	[译] 优化 Golang 服务来减少 40% 以上的 CPU	6506a818f9da5f9e47e74ce04e6e6f8282ecdab7	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.899672	0			'40':5,12 'cpu':7,14 'golang':3,10 '以上的':6,13 '优化':2,9 '服务来减少':4,11 '译':1,8	zh	
278	Webkit 内核初探	{"ver":2,"uid":1,"hash":"SHA1:bcec486a4e8cceb77cbe6d64d51c65068695cba3"}	https://toutiao.io/k/hpyl1d5	2020-08-15 03:10:08	Webkit 内核初探	569f50d6277be032f1fe91728e77e66a08c33e8f	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.901863	0			'webkit':1,3 '内核初探':2,4	zh	
277	Spark RDD 的依赖关系以及 DAG 划分 stage	{"ver":2,"uid":1,"hash":"SHA1:8f77e2ea3471c27e24767ee650d5a5bce81bf70a"}	https://toutiao.io/k/skbjfw2	2020-08-15 03:10:08	Spark RDD 的依赖关系以及 DAG 划分 stage	6f3883356dd675e22b193a84fc60c756dc5d2d31	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.905972	0			'dag':4,10 'rdd':2,8 'spark':1,7 'stage':6,12 '划分':5,11 '的依赖关系以及':3,9	zh	
344	[译] 使用 JavaScript 检测空闲的浏览器选项卡，可以做些什么？	{"ver":2,"uid":1,"hash":"SHA1:a630fd2641d4a756b6aa1219e366766f0dd5e738"}	https://toutiao.io/k/2arbeoh	2020-08-17 06:10:08	[译] 使用 JavaScript 检测空闲的浏览器选项卡，可以做些什么？	20d2de603f6256adf8396aa8ea8d4118e2fd7ed3	\N	f	2020-08-17 06:10:00	2020-08-18 00:10:10.677157	0			'javascript':3,8 '使用':2,7 '可以做些什么':5,10 '检测空闲的浏览器选项卡':4,9 '译':1,6	zh	
356	Response to Google open letter	{"ver":2,"uid":1,"hash":"SHA1:11a48dc443d79f624928a0d7641e8656e027fc11"}	https://www.accc.gov.au/media-release/response-to-google-open-letter	2020-08-17 22:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24185374"> https://news.ycombinator.com/item?id=24185374 </a>	ece482c57f7a431d2f448a88b78231392964a50c	\N	f	2020-08-17 22:10:00	2020-08-19 17:10:08.89148	0			'/item?id=24185374':9 'comment':6 'googl':3 'letter':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24185374':7 'open':4 'respons':1	zh	ajdlinux
246	UyHiP 趣题：几个特殊的强正则图	{"ver":2,"uid":1,"hash":"SHA1:828a06a364bbe9337cfdd866a8b049b490691fad"}	http://www.matrix67.com/blog/archives/6877	2016-09-03 20:21:23	<p>下面这个趣题出自 <a href="http://www.brand.site.co.il/riddles/201608q.html">Using your Head is Permitted 谜题站 2016 年 8 月的题目</a>，稍有改动。</p>\n<p>屋子里有若干个人，任意两个人都有恰好 1 个共同的朋友。这有可能吗？有可能。比方说，屋子里有 9 个人，其中 8 个人正好组成 4 对朋友，第 9 个人则和前面 8 个人都是朋友。容易验证，任意两个人都有恰好 1 个共同的朋友。我们可以用下面这个图表示此时这 9 个人之间的朋友关系，其中每个点代表一个人，如果两个人是朋友，就在他们之间连一条线。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609041.png" alt="" width="262" /></p>\n<p>除了上图展示的情况之外，我们还能构造出很多别的同样满足要求的情况。事实上，上述方案可以扩展到一切奇数个人的情况，比如下面这样：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609042.png" alt="" width="315" /></p>\n<p><span id="more-6877"></span></p>\n<p>现在，假设屋子里有若干个人，任意两个人都有恰好 <strong>2</strong> 个共同的朋友。这有可能吗？有可能。比方说，屋子里有 4 个人，他们互相之间都是朋友。容易验证，任意两个人都有恰好 2 个共同的朋友。我们可以用下面这个图表示此时这 4 个人之间的朋友关系。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609043.png" alt="" width="212" /></p>\n<p>我们的问题是，除了上图展示的情况之外，还有别的同样满足要求的情况吗？</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>有。想象屋子里有 16 个人，他们站成了一个 4 × 4 的方阵。每行里的 4 个人互相之间都是朋友，每列里的 4 个人互相之间也都是朋友。于是，对于任意两个同一行或者同一列的人来说，都恰好有 2 个共同的朋友，即这一行或者这一列的另外两个人；对于任意两个既不同行又不同列的人来说，也都恰好有 2 个共同的朋友，即与我同行与你同列的人，以及与你同行与我同列的人。我们可以用下面的这个图表示此时这 16 个人之间的朋友关系（我们把同一行的点以及同一列的点都稍微错开了一些，使得连线不会重叠在一起）。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609044.png" alt="" width="450" /></p>\n<p>那么，除此之外，还有没有别的满足要求的解呢？有，比如下面这个图：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609045.png" alt="" width="450" /></p>\n<p>上面这两个图有很多类似的地方：它们都有 16 个点， 48 条连线，每个点都恰好引出了 6 条连线。不过，这两个图确实是本质不同的两个图。你可以这样看出来：前面这个图中，与每个点相邻的 6 个点互相之间连成的是两个三角形；而后面这个图中，与每个点相邻的 6 个点互相之间连成的是一个“圈”。</p>\n<p>任意两个人都有恰好 2 个共同的朋友，究竟有多少种可能的情况呢？现在，我们已经看到了三个解。第一个解是 4 个互相之间都有连线的点。在图论中，我们通常用 K<sub>4</sub> 来表示这个图。第二个解则是借助一个 4 × 4 的方阵构造出来的。在图论中，这个图叫做 4 × 4 rook&#8217;s graph ，因为它相当于国际象棋中的车（rook）摆成 4 × 4 的方阵后互相之间能否攻击的示意图。</p>\n<p>真正神奇的就是问题的第三个解了。它叫做 Shrikhande graph 。这是由印度数学家 Sharadchandra Shankar Shrikhande 在 1959 年发现的。在图论中， Shrikhande graph 是一个非常神奇的图。</p>\n<p>如果一个图的每个点都引出了相同数目的线，我们就说这个图是一个“正则图”（regular graph）。如果一个正则图有 v 个点，每个点都引出了 k 条线，并且它额外地满足，任意两个相邻的点之间都恰好有 λ 个公共邻点，任意两个不相邻的点之间都恰好有 μ 个公共邻点，我们就说这个图是一个“强正则图”（strongly regular graph），用符号 srg(v, k, λ, μ) 表示。</p>\n<p>显然， n × n rook&#8217;s graph 属于强正则图 srg(n<sup>2</sup>, 2n &#8211; 2, n &#8211; 2, 2) 。那么反过来，满足 srg(n<sup>2</sup>, 2n &#8211; 2, n &#8211; 2, 2) 的图是否一定就是 n × n rook&#8217;s graph 呢？基本上是，除了唯一的一个反例：当 n = 4 时， Shrikhande graph 也满足 srg(n<sup>2</sup>, 2n &#8211; 2, n &#8211; 2, 2) 。</p>\n<p>这篇文章的题目也反映出了 Shrikhande graph 的独特之处。如果任意两个点都有恰好 2 个公共邻点，那么除了 K<sub>4</sub> 和 n × n rook&#8217;s graph 以外， Shrikhande graph 是唯一满足要求的解了。也就是说，任意两个人都有恰好 2 个共同的朋友，可能的情况一共就只有 3 种。</p>\n	1d1c8a50c55c205df582701307b843d9bae9cc2a	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.840604	18	http://www.matrix67.com/blog/archives/6877#comments		'1':18,38 '16':75,100,111 '1959':169 '2':54,65,90,95,131,215,217,218,224,226,227,247,249,250,256,272 '2016':11 '2n':214,223,246 '3':275 '4':29,60,68,78,79,82,85,137,144,145,149,150,157,158,239 '48':113 '6':116,123,127 '8':13,27,34 '9':24,32,41 'graph':153,163,173,179,197,210,233,242,253,265,268 'head':7 'is':8 'k':184,201 'k4':141,259 'n':206,207,216,225,229,230,238,248,261,262 'n2':213,222,245 'permitted':9 'regular':178,196 'rook':151,155,208,231,263 's':152,209,232,264 'shankar':166 'sharadchandra':165 'shrikhande':162,167,172,241,252,267 'srg':199,212,221,244 'strongly':195 'using':5 'uyhip':1 'v':181,200 'your':6 'λ':188,202 'μ':191,203 '上述方案可以扩展到一切奇数个人的情况':49 '上面这两个图有很多类似的地方':109 '下面这个趣题出自':4 '不过':118 '与每个点相邻的':122,126 '个互相之间都有连线的点':138 '个人':25,61,76 '个人之间的朋友关系':42,69,101 '个人互相之间也都是朋友':86 '个人互相之间都是朋友':83 '个人则和前面':33 '个人正好组成':28 '个人都是朋友':35 '个公共邻点':189,192,257 '个共同的朋友':19,39,55,66,91,96,132,273 '个点':112,182 '个点互相之间连成的是一个':128 '个点互相之间连成的是两个三角形':124 '也就是说':270 '也满足':243 '也都恰好有':94 '事实上':48 '于是':87 '他们互相之间都是朋友':62 '他们站成了一个':77 '以及与你同行与我同列的人':98 '以外':266 '任意两个不相邻的点之间都恰好有':190 '任意两个人都有恰好':17,37,53,64,130,271 '任意两个相邻的点之间都恰好有':187 '你可以这样看出来':120 '使得连线不会重叠在一起':103 '假设屋子里有若干个人':52 '其中':26 '其中每个点代表一个人':43 '几个特殊的强正则图':3 '前面这个图中':121 '即与我同行与你同列的人':97 '即这一行或者这一列的另外两个人':92 '可能的情况一共就只有':274 '呢':234 '和':260 '因为它相当于国际象棋中的车':154 '圈':129 '在':168 '在图论中':139,147,171 '基本上是':235 '如果一个图的每个点都引出了相同数目的线':175 '如果一个正则图有':180 '如果两个人是朋友':44 '如果任意两个点都有恰好':255 '它们都有':110 '它叫做':161 '容易验证':36,63 '对于任意两个同一行或者同一列的人来说':88 '对于任意两个既不同行又不同列的人来说':93 '对朋友':30 '就在他们之间连一条线':45 '屋子里有':23,59 '屋子里有若干个人':16 '属于强正则图':211 '年':12 '年发现的':170 '并且它额外地满足':186 '强正则图':194 '当':237 '想象屋子里有':74 '我们可以用下面的这个图表示此时这':99 '我们可以用下面这个图表示此时这':40,67 '我们就说这个图是一个':176,193 '我们已经看到了三个解':135 '我们把同一行的点以及同一列的点都稍微错开了一些':102 '我们的问题是':70 '我们还能构造出很多别的同样满足要求的情况':47 '我们通常用':140 '摆成':156 '时':240 '是一个非常神奇的图':174 '是唯一满足要求的解了':269 '显然':205 '月的题目':14 '有':73,107 '有可能':21,57 '条线':185 '条连线':114,117 '来表示这个图':142 '正则图':177 '每个点都引出了':183 '每个点都恰好引出了':115 '每列里的':84 '每行里的':81 '比如下面这个图':108 '比如下面这样':50 '比方说':22,58 '满足':220 '现在':51,134 '用符号':198 '的图是否一定就是':228 '的方阵':80 '的方阵后互相之间能否攻击的示意图':159 '的方阵构造出来的':146 '的独特之处':254 '真正神奇的就是问题的第三个解了':160 '种':276 '稍有改动':15 '究竟有多少种可能的情况呢':133 '第':31 '第一个解是':136 '第二个解则是借助一个':143 '而后面这个图中':125 '表示':204 '谜题站':10 '趣题':2 '还有别的同样满足要求的情况吗':72 '还有没有别的满足要求的解呢':106 '这两个图确实是本质不同的两个图':119 '这个图叫做':148 '这是由印度数学家':164 '这有可能吗':20,56 '这篇文章的题目也反映出了':251 '那么':104 '那么反过来':219 '那么除了':258 '都恰好有':89 '除了上图展示的情况之外':46,71 '除了唯一的一个反例':236 '除此之外':105	en	admin
346	异常处理的那些事儿	{"ver":2,"uid":1,"hash":"SHA1:c5baae647c88cbd001a5c68dafdda11f19e28c07"}	https://toutiao.io/k/hu57qnw	2020-08-17 06:10:08	异常处理的那些事儿	9af7fc74751be427e1f5e39421d16f1f70daeeeb	\N	f	2020-08-17 06:10:00	2020-08-18 00:10:10.674376	0			'异常处理的那些事儿':1,2	zh	
275	[推荐] Java 如何优雅的生成测试数据	{"ver":2,"uid":1,"hash":"SHA1:cb63db5319bb7c6259327c49ff06365b609b8ee7"}	https://toutiao.io/k/njbuzjl	2020-08-18 19:10:09	[推荐] Java 如何优雅的生成测试数据	4fee2eaac6c3c779e57fd3b445bd0620ed3bffcf	\N	f	2020-08-15 03:10:00	2020-08-29 15:10:11.425588	0			'java':2,5 '如何优雅的生成测试数据':3,6 '推荐':1,4	zh	
345	前端与 DSL	{"ver":2,"uid":1,"hash":"SHA1:be89124295e35e77bee36643fd1ce3f454f6cd1b"}	https://toutiao.io/k/s0j9qkh	2020-08-17 06:10:08	前端与 DSL	76fb1a1821366624f9e39409d04e56fe1ae6d077	\N	f	2020-08-17 06:10:00	2020-08-18 00:10:10.671241	0			'dsl':2,4 '前端与':1,3	zh	
343	API 设计的几条原则	{"ver":2,"uid":1,"hash":"SHA1:7e4cd11df864e6a71d0cbed6454734f04f21ddde"}	https://toutiao.io/k/8yejc7o	2020-08-17 06:10:08	API 设计的几条原则	2d068c226d37adf41dd35b28c905a481289b94f6	\N	f	2020-08-17 06:10:00	2020-08-18 00:10:10.665984	0			'api':1,3 '设计的几条原则':2,4	zh	
672	力扣 (1514)：概率最大的路径	{"ver":2,"uid":1,"hash":"SHA1:d0a1b9a610f20b45fdca3b47f143061612261185"}	https://toutiao.io/k/eq8p5r1	2020-08-27 02:10:09	力扣 (1514)：概率最大的路径	bc77561d74c6d25de1c34dc55606c76058f084ae	\N	f	2020-08-27 02:10:00	2020-08-27 22:10:10.089633	0			'1514':2,5 '力扣':1,4 '概率最大的路径':3,6	zh	
318	Web by Google (TM)	{"ver":2,"uid":1,"hash":"SHA1:667ac447484ffb12f7106ee4eea8f3d75a5c73b9"}	https://landshark.io/2020/08/16/web-by-google.html	2020-08-16 16:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24176898"> https://news.ycombinator.com/item?id=24176898 </a>	e6693139cd5c88ef58113a382e5494476f95fd0e	\N	f	2020-08-16 16:10:00	2020-08-19 17:10:08.861775	0			'/item?id=24176898':8 'comment':5 'googl':3 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24176898':6 'tm':4 'web':1	zh	alangibson
736	边缘计算、区块链、5G，哪个能走的更远	{"ver":2,"uid":1,"hash":"SHA1:f5697a9f1a694d991e1d7b95c9c041703fff5bd0"}	https://toutiao.io/k/ts3ylft	2020-08-29 04:10:18	边缘计算、区块链、5G，哪个能走的更远	dcf22fd54d41342a321384f58a6c325fb829ea51	\N	f	2020-08-29 04:10:00	2020-08-30 00:10:10.19787	0			'5g':3,7 '区块链':2,6 '哪个能走的更远':4,8 '边缘计算':1,5	zh	
249	捡石子游戏、 Wythoff 数表和一切的 Fibonacci 数列	{"ver":2,"uid":1,"hash":"SHA1:13718a81b2ba6c2a0675ed91ab8b675aa6860b31"}	http://www.matrix67.com/blog/archives/6784	2016-06-21 15:02:30	<p>让我们来玩一个游戏。把某个国际象棋棋子放在棋盘上，两人遵循棋子的走法，轮流移动棋子，但只能将棋子往左方、下方或者左下方移动。谁先将棋子移动到棋盘的最左下角，谁就获胜。如果把棋子放在如图所示的位置，那么你愿意先走还是后走？显然，答案与我们放的是什么棋子有关。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201606181.png" alt="" width="280" /></p>\n<p>这个游戏对于兵来说是没有意义的。在如图所示的地方放马或者放象，不管怎样都无法把它移动到棋盘的最左下角，所以我们也就不分析了。因此，我们只需要研究王、后、车三种情况。</p>\n<p><span id="more-6784"></span></p>\n<p>在国际象棋中，车每次可以横着或竖着走任意多格。在上述游戏中，受到规则的限制，车每次只能向左或者向下走任意多格。如果问题中的棋子是车，答案就非常简单了：你应该选择先走。你应该直接把车移到棋盘对角线上的位置（如左图所示），然后不管对方怎么走，你都把它移回到棋盘的对角线上。这样，你就能保证必胜了。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201606182.png" alt="" width="470" /></p>\n<p>在国际象棋中，王每次可以横着、竖着或者斜着走一格。在上述游戏中，受到规则的限制，王每次只能向左、向下或者向左下方走一格。如果问题中的棋子是王，分析出问题的答案也不算太难：你应该选择先走。你应该直接把王移到棋盘的“奇格”里（如右图所示），然后不管对方怎么走，你都可以把它再次移到某个“奇格”里。这样，你就能保证必胜了。</p>\n<p>在国际象棋中，皇后每次可以横着、竖着或者斜着走任意多格。在上述游戏中，受到规则的限制，皇后每次只能向左、向下或者向左下方走任意多格。如果问题中的棋子是皇后，那么你应该选择先走还是后走呢？这次，问题就没那么简单了。</p>\n<p>这个“挪动皇后”的游戏是由 Rufus Isaacs 在 1960 年左右提出来的。给定皇后在棋盘上的初始位置，如何判断出谁有必胜策略呢？ Isaacs 给出了一个分析方法。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201606183.png" alt="" width="585" /></p>\n<p>首先，第一行上的所有位置，第一列上的所有位置，以及对角线上的所有位置，都能一步直接走到棋盘的最左下角。我们可以从最左下角的位置出发，画出三条射线，把这些位置全都划掉。如果皇后位于被划掉的位置上，那么先走的人就会获胜。此时，棋盘上出现了两个死角。如果皇后在这两个地方，先走的人不得不把皇后挪到刚才被划掉的位置上，因而后走的人就必胜了。因而，从这两个地方出发，画出三条射线，被划掉的位置又是先走的人就会获胜的位置，先走的人只需要把皇后挪到这两个地方即可。此时，棋盘上又会出现两个新的死角，它们又是后走的人必胜的位置……不断这样递推下去，我们就能分析出，皇后在哪些地方时先走的人必胜，皇后在哪些地方时后走的人必胜。之前我们曾问，当皇后位于标有 × 的格子时你应该选择先走还是后走，现在我们就知道答案了：你应该后走才对。</p>\n<p>那么，在“挪动皇后”的游戏中，哪些位置是后走的人必胜的位置呢？</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201606184.png" alt="" width="470" /></p>\n<p>画出更大的棋盘，将刚才的操作再多重复几次后，我们看见了一个非常明显的规律：这些位置大致形成了两条直线。再仔细观察，你会发现，每行每列里恰好有一个这样的位置。有没有什么公式不用递推就能找出这些位置呢？它们为什么会形成这么两条直线呢？为什么每行每列里有且仅有一个这样的位置呢？看来，这里面还有很深的水。</p>\n<p>&nbsp;</p>\n<p>令 Isaacs 万万没有想到的是，这个游戏虽然是他发明的，但由此引申的问题却已经被前人解决了。 1907 年，荷兰数学家 Willem Abraham Wythoff 提出了一个双人对弈游戏，后来人们把它叫作 Wythoff 游戏。游戏规则是这样的。地上有两堆石子，其中一堆有 m 个石子，另外一堆有 n 个石子。两名玩家轮流取走石子，规定每次要么从其中一堆石子中取走任意多个石子，要么从两堆石子中取走相同数量的石子。等到谁没有石子可取了，谁就输了。也就是说，取到最后一个石子的玩家获胜。 Martin Gardner 认为， Wythoff 本人甚至也不是这个游戏最早的发明者——其实中国很早就有了这个游戏，人们把它叫作“捡石子”。</p>\n<p>容易看出， Wythoff 游戏和“挪动皇后”是完全等价的。把棋盘从下到上各行依次标为 0, 1, 2, 3, &#8230;，把棋盘从左到右各列依次标为 0, 1, 2, 3, &#8230;，那么皇后移动时坐标变化的规则，正好与 Wythoff 游戏中两堆石子数量变化的规则是相同的。而两个游戏的目标也是相同的：谁先将游戏状态变为 (0, 0) ，谁就获得胜利。因此，这两个游戏完全等价。</p>\n<p>由于状态 (m, n) 和 (n, m) 本质相同，因而我们可以把游戏状态看作是无序数对，并约定在书写时总把较小的数写在前面。也就是说，今后 (1, 2) 和 (2, 1) 就统一用 (1, 2) 来表示了。另外，只要数对里面至少有一个数不为 0 ，我们就说这是一个非零数对。我们的问题就是，哪些非零数对所对应的游戏状态是后行者必胜的。</p>\n<p>Wythoff 给出的答案异常简单——所有这样的数对从小到大依次为：</p>\n<p class="indent">([1 · φ], [1 · φ<sup>2</sup>]), ([2 · φ], [2 · φ<sup>2</sup>]), ([3 · φ], [3 · φ<sup>2</sup>]), ([4 · φ], [4 · φ<sup>2</sup>]), &#8230;</p>\n<p>其中 φ = (√<span style="text-decoration: overline">5</span> + 1) / 2 ， [x] 表示不超过 x 的最大整数（当 x ≥ 0 时， [x] 可以简单地理解为取 x 的整数部分）。不妨把上述序列叫作序列 W 。稍作计算可知，序列 W 的前几项为：</p>\n<p class="indent">(1, 2), (3, 5), (4, 7), (6, 10), (8, 13), &#8230;</p>\n<p>对照前面那个棋盘图，我们可以看到，序列 W 还真挺靠谱。 Wythoff 证明了，序列 W 确实就是正确的答案，这是因为序列 W 满足以下三个条件：</p>\n<ul>\n<li>条件 1 ： W 当中的任何一个数对都无法一步变成 (0, 0)</li>\n<li>条件 2 ： W 当中的任何一个数对都无法一步变成 W 当中的另一个数对</li>\n<li>条件 3 ： W 之外的任何一个非零数对都可以一步变成 (0, 0) 或 W 当中的某一个数对</li>\n</ul>\n<p>这样的话，当游戏状态为 W 当中的数对时，先走的人只能把游戏状态变为 W 之外的非零数对，后走的人即使赢不了，也总能把游戏状态移回到 W 当中。不断这样循环下去，后走的人就赢定了。所以，如果序列 W 真的满足上面三个条件，刚才的公式就是正确的了。那么，序列 W 为什么满足上面三个条件呢？ Wythoff 进一步指出，这是因为序列 W 满足以下三个性质：</p>\n<ul>\n<li>性质 1 ： W 里面正好既无重复又无遗漏地包含了每一个正整数</li>\n<li>性质 2 ： W 当中各项里的两数之差依次为 1, 2, 3, &#8230;</li>\n<li>性质 3 ： W 当中各项里的较小数依次递增</li>\n</ul>\n<p>我们先来说明这三个性质为什么能推出前面的三个条件，然后再来说明这三个性质本身为什么都是成立的。性质 1 和性质 2 告诉我们： W 当中用到的数都大于 0 ，且没有重复的情况；各个数对里的两数之差也都大于 0 ，而且也没有重复的情况。这能立即推出前面的条件 1 和条件 2 。现在，假设 (a, b) 是 W 之外的某个非零数对。如果 a = 0 或者 a = b ，那么 (a, b) 可以直接变成 (0, 0) 。接下来，我们假设 0 &lt; a &lt; b 。由性质 1 可知，在 W 中，有且仅有一个数对用到了 a 这个数。如果 a 是这个数对里的较大数，或者说这个数对形如 (x, a) ，那么直接把 b 减小到 x ，一步就把 (a, b) 变到 W 里去了。例如， (7, 12) 是 W 之外的数对，把它变成 (4, 7) ，便一步变到 W 里去了。如果 a 是这个数对里的较小数，或者说这个数对是 (a, x) 呢？若 b 比 x 大，直接把 b 减小到 x ，同样能一步把 (a, b) 变到 W 里去。若 b 比 x 小，这就说明和 (a, x) 相比， (a, b) 里的两数之差更小。根据性质 2 ，在序列 W 当中，这个差值在 (a, x) 之前曾经出现过。所以，让 (a, b) 的两个数同时减小相同的量，就能把数对变到 W 里去了。为什么是同时减而不是同时加呢？这就是由性质 3 保证的。举例来说， (6, 11), (6, 12), (6, 13), &#8230;都能一步变为 (6, 10) ，而 (6, 7) 、 (6, 8) 、 (6, 9) 则能分别变成 (1, 2) 、 (3, 5) 、 (4, 7) 。</p>\n<p>接下来，我们来证明序列 W 满足这三个性质。性质 1 可以直接由 Beatty-Rayleigh 定理推出。 Beatty-Rayleigh 定理说的是，若正无理数 α 和 β 满足 1 / α + 1 / β = 1 ，则数列 [1 · α], [2 · α], [3 · α], … 和 [1 · β], [2 · β], [3 · β], … 既无重复又无遗漏地包含了所有的正整数。由于 φ 和 φ<sup>2</sup> 就满足 1 / φ + 1 / φ<sup>2</sup> = 1 ，所以序列 W 里的所有数既无重复又无遗漏地包含了所有的正整数。</p>\n<p>为了保持文章的完整性，我们给出 Beatty-Rayleigh 定理的证明。 Beatty-Rayleigh 定理有很多证明方法，下面这种方法是我最喜欢的一种。首先注意到，如果 x 和 y 都不是整数，那么 [x] 严格地小于 x ，[y] 严格地小于 y ，从而 [x] + [y] &lt; x + y 。另外，[x] 一定严格地大于 x – 1 ， [y] 一定严格地大于 y – 1 ，从而 [x] + [y] 一定严格地大于 x + y – 2。这说明，当 x 和 y 都不是整数时， [x] + [y] 将介于 x + y – 2 和 x + y 之间。</p>\n<p>回到原问题。显然，在数列 [1 · α], [2 · α], [3 · α], … 中，小于 n 的正整数有 [n / α] 个。显然，在数列 [1 · β], [2 · β], [3 · β], … 中，小于 n 的正整数有 [n / β] 个。因此，在这两个数列中，小于 n 的正整数共有 [n / α] + [n / β] 个。由于 α 和 β 都是无理数，因此 n / α 和 n / β 不可能为整数，由刚才的结论， [n / α] + [n / β] 一定介于 n / α + n / β – 2 和 n / α + n / β 之间，即 n – 2 和 n 之间。但是， [n / α] + [n / β] 是个整数，因而它精确地等于 n – 1 。</p>\n<p>这说明，前 n – 1 个正整数在两个数列中一共出现了 n – 1 次，这对于所有 n 都成立。于是，正整数 1 必须且只能出现在其中一个数列中，正整数 2 必须且只能出现在其中一个数列中，以此类推，每一个新的正整数都必须且只能出现在其中一个数列中。</p>\n<p>序列 W 的性质 2 则是， W 当中各项里的两数之差依次为 1, 2, 3, &#8230; ，也就是说第 n 个数对里的两数之差恰好为 n 。这一点也是很容易看出来的。由于 φ 满足 1 + φ = φ<sup>2</sup> ，因而 n + n · φ = n · φ<sup>2</sup> ，即 n · φ 和 n · φ<sup>2</sup> 正好相差 n 。如果两个数正好相差 n ，那么这两个数的整数部分显然也就正好相差 n 。这就证明了序列 W 满足性质 2 。</p>\n<p>序列 W 的性质 3 则是， W 当中各项里的较小数依次递增，即 [1 · φ], [2 · φ], [3 · φ], &#8230; 依次递增。这就更显然了：在数列 1 · φ, 2 · φ, 3 · φ, &#8230; 中，后一项总比前一项大 φ ≈ 1.618 &gt; 1 ，因此即使取整后，后一项也一定严格地大于前一项。注意到，性质 2 和性质 3 结合起来可以告诉我们， W 当中各项里的较大数也是依次递增的。</p>\n<p>至此，我们就完整地证明了， Wythoff 提出的公式确实准确地给出了 Wythoff 游戏（也就是“挪动皇后”游戏）中后行者必胜的状态。这也顺便把我们之前挖的坑填上了。为什么把后行者必胜的状态标在棋盘上，会形成两条直线呢？看看序列 W 的公式，你就知道了：这是因为，每个数对里的前后两项之比（即横纵坐标之比）都是固定的。为什么棋盘的每行每列里都有且仅有一个标记呢？这其实完全是由序列 W 的性质 1 带来的结果。</p>\n<p>&nbsp;</p>\n<p>不过，故事还远远没有结束。刚才我们给出了序列 W 的前几项，那时候你或许就已经发现了什么。让我们再多往后写几项：</p>\n<p class="indent">(1, 2), (3, 5), (4, 7), (6, 10), (8, 13), (9, 15), (11, 18), (12, 20), (14, 23), (16, 26), (17, 28), (19, 31), (21, 34), (22, 36), (24, 39), (25, 41), (27, 44), (29, 47), (30, 49), &#8230;</p>\n<p>你发现了什么？有没有觉得， (1, 2) 、 (3, 5) 、 (8, 13) 、 (21, 34) 这几项都特别熟悉？没错，如果把 Fibonacci 数列里的数都依次写下来：</p>\n<p class="indent">1, 2, 3, 5, 8, 13, 21, 34, &#8230;</p>\n<p>然后把它们两个两个分成一组：</p>\n<p class="indent">(1, 2), (3, 5), (8, 13), (21, 34), &#8230;</p>\n<p>由此得到的所有数对都在序列 W 当中！事实上，我们还能预测出，上述数对都出现在了序列 W 当中的什么位置。 (1, 2) 后面的那个数对是 (3, 5) ，它就是 W 当中的第 2 个数对； (3, 5) 后面的那个数对是 (8, 13) ，它就是 W 当中的第 5 个数对； (8, 13) 后面的那个数对是 (21, 34) ，它就是 W 当中的第 13 个数对……所以， (21, 34) 后面的那个数对，就应该是 W 当中的第 34 个数对咯？简单算算你会发现，嘿，还真是！根据定义， W 当中的第 34 个数对为 [34 · φ], [34 · φ<sup>2</sup>] ，而 34 · φ ≈ 55.013 ，34 · φ<sup>2</sup> ≈ 89.013 ，取整后正好就是 (55, 89) 。你或许会猜测，该不会当 n 是 Fibonacci 数时， [n · φ] 和 [n · φ<sup>2</sup>] 一定就是后面两个 Fibonacci 数吧。事实上并非如此。让我们代入 n = 21 看看： 21 · φ ≈ 33.979 ， 21 · φ<sup>2</sup> ≈ 54.979 ，所得到的两个数确实很接近 21 后面的两个 Fibonacci 数，但却要偏小一些。因此，取整之后的结果是 33 和 54 ，而并不是 34 和 55 。这一切都是为什么呢？</p>\n<p>这一切都是因为， Fibonacci 数列有一个神奇的通项公式： φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 。注意，这个充满无理数的通项公式生成的并不是 Fibonacci 数的近似值，它生成的真的就是一个个的 Fibonacci 数。你可以试着把 n = 1, 2, 3, 4, 5, 6 代进去，得到的值将会精确地等于 1, 1, 2, 3, 5, 8 。</p>\n<p>由于 φ ≈ 1.618 ，其绝对值大于 1 ，因此随着 n 的增加， φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> 的绝对值将会迅速变得非常非常大；由于 1 &#8211; φ ≈ &#8211; 0.618 ，其绝对值小于 1 ，因此随着 n 的增加， (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 的绝对值将会迅速变得非常非常接近于 0 。最终， φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 将会无限接近于 φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> ，一个以 φ 为公比的等比数列。这就解释了，为什么一个 Fibonacci 数的 φ 倍大致就等于下一个 Fibonacci 数。</p>\n<p>但是，用这种方法推算出来的下一个 Fibonacci 数，究竟会偏大一些还是偏小一些呢？我们还得仔细分析一下误差。注意到 1 &#8211; φ 是个负数，因此随着 n 的增加， (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 实际上是在正负交替地向 0 靠拢，因此 φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 实际上是在一上一下地无限接近于 φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> 。下表中的第一行依次是各个 Fibonacci 数，第二行是 n = 1, 2, 3, &#8230; 时 φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> 的值，第三行则是二者之间的误差。</p>\n<table>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>13</td>\n<td>21</td>\n<td>34</td>\n<td>55</td>\n<td>89</td>\n</tr>\n<tr>\n<td>0.7236</td>\n<td>1.1708</td>\n<td>1.8944</td>\n<td>3.0652</td>\n<td>4.9597</td>\n<td>8.0249</td>\n<td>12.9846</td>\n<td>21.0095</td>\n<td>33.9941</td>\n<td>55.0036</td>\n<td>88.9978</td>\n</tr>\n<tr>\n<td>-0.2764</td>\n<td>0.1708</td>\n<td>-0.1056</td>\n<td>0.0652</td>\n<td>-0.0403</td>\n<td>0.0249</td>\n<td>-0.0154</td>\n<td>0.0095</td>\n<td>-0.0059</td>\n<td>0.0036</td>\n<td>-0.0022</td>\n</tr>\n</table>\n<p>这就解释了，为什么 34 · φ 和 34 · φ<sup>2</sup> 正好比 55 和 89 稍大一些。 34 和 55 非常接近 φ<sup>9</sup> / √<span style="text-decoration: overline">5</span> 和 φ<sup>10</sup> / √<span style="text-decoration: overline">5</span> 的值，其中后者是前者的 φ 倍。但 34 等于 φ<sup>9</sup> / √<span style="text-decoration: overline">5</span> 加上某个很小的数， 55 等于 φ<sup>10</sup> / √<span style="text-decoration: overline">5</span> 减去某个很小的数，因而 34 的 φ 倍就会比 55 略大一些了。 34 和 89 也都非常接近 φ<sup>9</sup> / √<span style="text-decoration: overline">5</span> 和 φ<sup>11</sup> / √<span style="text-decoration: overline">5</span> 的值，其中后者是前者的 φ<sup>2</sup> 倍。但 34 等于 φ<sup>9</sup> / √<span style="text-decoration: overline">5</span> 加上某个很小的数， 89 等于 φ<sup>11</sup> / √<span style="text-decoration: overline">5</span> 加上某个更小的数，因而 34 的 φ<sup>2</sup> 倍也会比 89 略大一些。类似地， 21 · φ 和 21 · φ<sup>2</sup> 正好比 34 和 55 稍小一些，也是因为 21 等于 φ<sup>8</sup> / √<span style="text-decoration: overline">5</span> 减去某个很小的数， 34 等于 φ<sup>9</sup> / √<span style="text-decoration: overline">5</span> 加上某个很小的数， 55 等于 φ<sup>10</sup> / √<span style="text-decoration: overline">5</span> 减去某个更小的数。</p>\n<p>这就回到了我们刚才观察到的现象：序列 W 中的第 2 个数对是 (3, 5) ，第 5 个数对是 (8, 13) ，第 13 个数对是 (21, 34) ，第 34 个数对是 (55, 89) ……我们也就算是证明了刚才提到的结论：把 Fibonacci 数列写下来，并且从 (1, 2) 开始，每两个数组成一个数对，则由此得到的所有数对都在序列 W 当中。</p>\n<p>&nbsp;</p>\n<p>于是，我们挖的坑又只剩最后一个了：为什么 φ<sup>n</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>n</sup> / √<span style="text-decoration: overline">5</span> 是 Fibonacci 数列的通项公式呢？这有一个非常具有启发性的推导方法。</p>\n<p>让我们把满足递推式 a(n) = a(n &#8211; 1) + a(n &#8211; 2) 的数列叫作“广义 Fibonacci 数列”。而真正的 Fibonacci 数列，则可以看作是由初始条件 a(1) = 1 和 a(2) = 1 生成的。首先注意到，让广义 Fibonacci 数列里的每一项都乘上非 0 实数 c ，得到的仍然是一个广义 Fibonacci 数列。也就是说，如果数列</p>\n<p class="indent">a(1), a(2), a(3), a(4), a(5), …</p>\n<p>是一个由 a(1) 和 a(2) 生成的广义 Fibonacci 数列，那么</p>\n<p class="indent">c · a(1), c · a(2), c · a(3), c · a(4), c · a(5), …</p>\n<p>就是一个由 c · a(1) 和 c · a(2) 生成的广义 Fibonacci 数列。</p>\n<p>另外，两个广义 Fibonacci 数列之和必然也是一个广义 Fibonacci 数列。也就是说，如果数列</p>\n<p class="indent">a(1), a(2), a(3), a(4), a(5), …</p>\n<p>是一个由 a(1) 和 a(2) 生成的广义 Fibonacci 数列，并且数列</p>\n<p class="indent">b(1), b(2), b(3), b(4), b(5), …</p>\n<p>是一个由 b(1) 和 b(2) 生成的广义 Fibonacci 数列，那么数列</p>\n<p class="indent">a(1) + b(1), a(2) + b(2), a(3) + b(3), a(4) + b(4), a(5) + b(5), …</p>\n<p>就是一个由 a(1) + b(1) 和 a(2) + b(2) 生成的广义 Fibonacci 数列。</p>\n<p>最后， φ 和 1 &#8211; φ 是方程 1 + x = x<sup>2</sup> 的两根，因而数列</p>\n<p class="indent">φ, φ<sup>2</sup>, φ<sup>3</sup>, φ<sup>4</sup>, φ<sup>5</sup>, φ<sup>6</sup>, …</p>\n<p>和</p>\n<p class="indent">1 &#8211; φ, (1 &#8211; φ)<sup>2</sup>, (1 &#8211; φ)<sup>3</sup>, (1 &#8211; φ)<sup>4</sup>, (1 &#8211; φ)<sup>5</sup>, (1 &#8211; φ)<sup>6</sup>, …</p>\n<p>就成了两个非常特别的广义 Fibonacci 数列。</p>\n<p>把上面三点结合起来，我们将会得出结论：对于任意的实数 k 、 l ，数列</p>\n<p class="indent">k · φ + l · (1 &#8211; φ), k · φ<sup>2</sup> + l · (1 &#8211; φ)<sup>2</sup>, k · φ<sup>3</sup> + l · (1 &#8211; φ)<sup>3</sup>, k · φ<sup>4</sup> + l · (1 &#8211; φ)<sup>4</sup>, …</p>\n<p>都是一个广义 Fibonacci 数列。如果我们能找出合适的 k 和 l ，使得它们同时满足</p>\n<p class="indent">k · φ + l · (1 &#8211; φ) = 1, k · φ<sup>2</sup> + l · (1 &#8211; φ)<sup>2</sup> = 1</p>\n<p>这两个方程，那么我们就相当于找到了 Fibonacci 数列的通项公式。解得 k = 1 / √<span style="text-decoration: overline">5</span>, l = – 1 / √<span style="text-decoration: overline">5</span> ，因而 Fibonacci 数列实际上就是</p>\n<p class="indent">φ / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ) / √<span style="text-decoration: overline">5</span>, φ<sup>2</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>2</sup> / √<span style="text-decoration: overline">5</span>, φ<sup>3</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>3</sup> / √<span style="text-decoration: overline">5</span>, φ<sup>4</sup> / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ)<sup>4</sup> / √<span style="text-decoration: overline">5</span>, &#8230;</p>\n<p>这就是 Fibonacci 数列的通项公式。容易看出，事实上，一切的广义 Fibonacci 数列都可以表示成</p>\n<p class="indent">k · φ + l · (1 &#8211; φ), k · φ<sup>2</sup> + l · (1 &#8211; φ)<sup>2</sup>, k · φ<sup>3</sup> + l · (1 &#8211; φ)<sup>3</sup>, k · φ<sup>4</sup> + l · (1 &#8211; φ)<sup>4</sup>, …</p>\n<p>的形式，我们只需要求解关于 k 和 l 的二元一次方程组</p>\n<p class="indent">k · φ + l · (1 &#8211; φ) = a(1), k · φ<sup>2</sup> + l · (1 &#8211; φ)<sup>2</sup> = a(2)</p>\n<p>即可。因此，各种广义 Fibonacci 数列也将继承 Fibonacci 数列的很多宏观特征。比方说，随着 n 的增加， k · φ<sup>n</sup> 的绝对值将会迅速变得非常非常大（即使 k 本身的绝对值很小）， l · (1 &#8211; φ)<sup>n</sup> 的绝对值将会正负交替地迅速向 0 靠拢（即使 l 本身的绝对值很大），最终 k · φ<sup>n</sup> + l · (1 &#8211; φ)<sup>n</sup> 将会一上一下地无限靠近 k · φ<sup>n</sup> 。也就是说，足够多项之后，一切广义 Fibonacci 数列都会一上一下地无限近似于一个以 φ 为公比的等比数列。</p>\n<p>&nbsp;</p>\n<p>Fibonacci 数列有很多神奇之处，它的通项公式只是其中之一。每次说到 Fibonacci 数列时，我都喜欢讲讲 Fibonacci 数列的另一个神奇之处，就是 Zeckendorf 定理。这是由比利时数学家 Edouard Zeckendorf 发现的：任何一个正整数都可以唯一地表示成若干个不相邻的 Fibonacci 之和。例如，100 可以表示成 89 + 8 + 3 。我们把正整数的这种表示方法叫作它的 Zeckendorf 表达。注意，虽然 100 也可以表示成 55 + 34 + 8 + 2 + 1 ，但 55 和 34 是相邻的 Fibonacci 数， 2 和 1 也是相邻的 Fibonacci 数，因此这不能算 100 的 Zeckendorf 表达。需要特别指出的是，由于 F<sub>1</sub> 和 F<sub>2</sub> 都是 1 ，因此选了 F<sub>1</sub> 和 F<sub>3</sub> 本质上就相当于选了 F<sub>2</sub> 和 F<sub>3</sub> ，根据规定，这也是不允许的。因此，接下来，我们假设每次选 1 的时候选的实际上都是 F<sub>2</sub> ，这不会改变问题的实质。换句话说，接下来，我们假设 F<sub>1</sub> 是不能选的。</p>\n<p>为什么 Zeckendorf 表达总是存在的呢？这很容易看出来。只要不断地选取尽可能大的 Fibonacci 数，我们就能得到一个 Zeckendorf 表达。比如，如何得出 100 的一个 Zeckendorf 表达呢？不超过 100 的最大的 Fibonacci 数是 89 。从 100 里减去 89 后，剩下的部分是 11 。不超过 11 的最大的 Fibonacci 数是 8 。从 11 里减去 8 后，剩下的部分是 3 ，这已经是一个 Fibonacci 了。所以， 100 的 Zeckendorf 表达就是 89 + 8 + 3 。在这个过程中，我们肯定不会用到相邻的 Fibonacci 数。这是因为，如果正整数 N 介于 F<sub>i</sub> 和 F<sub>i+1</sub> 之间（其中 F<sub>i</sub> 表示第 i 个 Fibonacci 数），那么我们就有：</p>\n<p class="indent">N &#8211; F<sub>i</sub> &lt; F<sub>i+1</sub> &#8211; F<sub>i</sub> = F<sub>i-1</sub></p>\n<p>这说明，减去一个尽可能大的 Fibonacci 数，结果会比小一号的 Fibonacci 数更小。所以，在上面这种寻找 Zeckendorf 表达的过程中，我们会自动地跳过所有相邻的 Fibonacci 数。</p>\n<p>Zeckendorf 定理真正最核心的，就是每一个正整数的 Zeckendorf 表达都是唯一的。为了证明这一点，让我们先来考虑两个问题。第一个问题是：从 F<sub>2</sub>, F<sub>3</sub>, &#8230;, F<sub>n</sub> 数中选出若干个不相邻的数，怎样选才能让它们的和最大呢？不断把较小的 Fibonacci 数往大了调，你会发现，和最大的选法显然就是</p>\n<p class="indent">F<sub>n</sub> + F<sub>n-2</sub> + F<sub>n-4</sub> + &#8230;</p>\n<p>如果 n 是偶数，上式将会以 &#8230; + F<sub>4</sub> + F<sub>2</sub> 结尾。如果 n 是奇数，上式将会以 &#8230; + F<sub>5</sub> + F<sub>3</sub> 结尾。这个数究竟等于多少呢？这个数与 F<sub>n+1</sub> 很接近。这是因为：</p>\n<p class="indent">&nbsp; F<sub>n+1</sub><br />\n= F<sub>n</sub> + F<sub>n-1</sub><br />\n= F<sub>n</sub> + F<sub>n-2</sub> + F<sub>n-3</sub><br />\n= F<sub>n</sub> + F<sub>n-2</sub> + F<sub>n-4</sub> + F<sub>n-5</sub><br />\n= &#8230;&#8230;</p>\n<p>不断像这样展开后，根据 n 的奇偶性的不同，我们要么会得到 F<sub>n</sub> + F<sub>n-2</sub> + F<sub>n-4</sub> + &#8230; + F<sub>4</sub> + F<sub>2</sub> + F<sub>1</sub> ，要么会得到 F<sub>n</sub> + F<sub>n-2</sub> + F<sub>n-4</sub> + &#8230; + F<sub>5</sub> + F<sub>3</sub> + F<sub>2</sub> 。不管是哪种情况，这都比刚才选出的最大和多了一个 1 。也就是说，从 F<sub>2</sub>, F<sub>3</sub>, &#8230;, F<sub>n</sub> 中选出若干个不相邻的数，最大的和为 F<sub>n+1</sub> &#8211; 1 。</p>\n<p>我们需要考虑的第二个问题是， n 个物体排成一排，从中选出若干个不相邻的物体（可以不选），一共有多少种不同的方案？不妨把答案记作 a(n) 。如果只有 1 个物体，我们要么选它，要么不选它，一共有 2 种选法。如果有 2 个物体，我们要么选这个，要么选那个，要么都不选，一共有 3 种选法。也就是说， a(1) = 2 ， a(2) = 3 。另外，面对 n 个物体，满足要求的选法分为两类：如果不选最后那个物体，那就完全得看前 n &#8211; 1 个物体怎么选，这里面的方案数为 a(n &#8211; 1） ；如果选了最后那个物体，那么剩下的就只能再在前 n &#8211; 2 个物体里选了，这里面的方案数为 a(n &#8211; 2) 。这说明， a(n) = a(n &#8211; 1) + a(n &#8211; 2) 。于是，数列 a(1), a(2), a(3), a(4), &#8230; 实际上就是 2, 3, 5, 8, &#8230;。换句话说， a(n) = F<sub>n + 2</sub></p>\n<p>结合上面两点，我们得到了这样一个结论：从 F<sub>2</sub> 到 F<sub>n</sub> 这 n &#8211; 1 个数中选出若干个不相邻的数（可以不选），一共有 F<sub>n+1</sub> 种选法；而这些数的总和的取值范围，则在 0 到 F<sub>n+1</sub> &#8211; 1 之间。所以，我们有 F<sub>n+1</sub> 种选法，有 F<sub>n+1</sub> 种可能的取值。另一方面，我们之前证明了，每个正整数都有至少一个 Zeckendorf 表达。所以，  F<sub>n+1</sub> 种选法必须得既无重复又无遗漏地取遍 F<sub>n+1</sub> 种可能的取值。这就说明了，每一个正整数的 Zeckendorf 表达都是唯一的。</p>\n<p>&nbsp;</p>\n<p>等等，我们是怎么扯到 Zeckendorf 表达的？让我想一想啊……哦！想起来了！想起来了！我们是从棋盘游戏，扯到与之等价的 Wythoff 游戏，扯到哪些状态后行者必胜，扯到 Wythoff 所定义的序列 W ，扯到序列 W 包含了一对一对的 Fibonacci 数，扯到 Fibonacci 数列那著名的通项公式，最后扯到了正整数的 Zeckendorf 表达。</p>\n<p>扯远了，扯远了。我们再把整个思路捯回去。序列 W 的公式为：</p>\n<p class="indent">([1 · φ], [1 · φ<sup>2</sup>]), ([2 · φ], [2 · φ<sup>2</sup>]), ([3 · φ], [3 · φ<sup>2</sup>]), ([4 · φ], [4 · φ<sup>2</sup>]), &#8230;</p>\n<p>由此算出序列 W 的前几项：</p>\n<p class="indent">(1, 2), (3, 5), (4, 7), (6, 10), (8, 13), (9, 15), (11, 18), (12, 20), (14, 23), (16, 26), (17, 28), (19, 31), (21, 34), (22, 36), (24, 39), (25, 41), (27, 44), (29, 47), (30, 49), &#8230;</p>\n<p>我们证明了，序列 W 满足以下三个重要的性质：</p>\n<ul>\n<li>性质 1 ： W 里面正好既无重复又无遗漏地包含了每一个正整数</li>\n<li>性质 2 ： W 当中各项里的两数之差依次为 1, 2, 3, &#8230;</li>\n<li>性质 3 ： W 当中各项里的较小数依次递增</li>\n</ul>\n<p>这三个性质保证了， W 当中的所有项正好是 Wythoff 游戏中后行者必胜的所有状态。然后，我们发现 W 当中有很多项里包含了 Fibonacci 数。把它们连在一起，正好就是完整的 Fibonacci 数列：</p>\n<p class="indent">(1, 2), (3, 5), (8, 13), (21, 34), &#8230;</p>\n<p>其中 (1, 2) 后面的 (3, 5) 正好是 W 当中的第 2 项， (3, 5) 后面的 (8, 13) 正好是 W 当中的第 5 项， (8, 13) 后面的 (21, 34) 正好是 W 当中的第 13 项，以此类推。</p>\n<p>那么， W 当中的其他项呢？仔细观察 W 当中的其他项，你能看出什么端倪吗？答案是， W 当中的其他项还隐藏着别的广义 Fibonacci 数列！比方说， W 当中的</p>\n<p class="indent">(4, 7), (11, 18), (29, 47), &#8230;</p>\n<p>正好拼成一个以 4, 7 打头的广义 Fibonacci 数列！而且， (11, 18) 就是 W 当中的第 7 项， (29, 47) 就是 W 当中的第 18 项。来猜猜看， (76, 123) 会不会正好是 W 当中的第 47 项？计算可得 47 · φ ≈ 76.0476 ， 47 · φ<sup>2</sup> ≈ 123.048 。根据序列 W 的定义，第 47 项真的就是 (76, 123) ！</p>\n<p>接下来，我们就来证明这件事：如果 (a, b) 是序列 W 中的某个数对，那么序列 W 中的第 b 项就是 (a + b, a + 2b) 。由于第 b 项里的两数之差就是 b ，因此我们只需要证明：如果 (a, b) 是序列 W 中的某个数对，那么序列 W 中的第 b 项的较小数就是 a + b 。不妨假设 (a, b) 是序列 W 中的第 n 项。根据序列 W 的定义， a 就等于 [n · φ] ， b 就等于 [n · φ<sup>2</sup>] ，而第 b 项的较小数则是 [[n · φ<sup>2</sup>] · φ] 。所以，我们真正只需要证明的就是：对于任意正整数 n ，都有 [n · φ] + [n · φ<sup>2</sup>] = [[n · φ<sup>2</sup>] · φ] 。这本质上就是证明：</p>\n<p class="indent">[n · φ] + [n · φ<sup>2</sup>] ≤ [n · φ<sup>2</sup>] · φ &lt; [n · φ] + [n · φ<sup>2</sup>] + 1</p>\n<p>不妨用 {x} 表示 x 的小数部分。上式就变为了</p>\n<p class="indent">n · φ &#8211; {n · φ} + n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} ≤ (n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>}) · φ &lt; n · φ &#8211; {n · φ} + n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} + 1</p>\n<p>也就是：</p>\n<p class="indent">n · φ &#8211; {n · φ} + n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} ≤ n · φ<sup>3</sup> &#8211; {n · φ<sup>2</sup>} · φ &lt; n · φ &#8211; {n · φ} + n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} + 1</p>\n<p>然而， φ 满足 1 + φ = φ<sup>2</sup> ，也就满足 n · φ + n · φ<sup>2</sup> = n · φ<sup>3</sup> 。于是，上面的不等式进一步简化为</p>\n<p class="indent">&#8211; {n · φ} &#8211; {n · φ<sup>2</sup>} ≤ &#8211; {n · φ<sup>2</sup>} · φ &lt; &#8211; {n · φ} &#8211; {n · φ<sup>2</sup>} + 1</p>\n<p>即</p>\n<p class="indent">{n · φ} + {n · φ<sup>2</sup>} ≥ {n · φ<sup>2</sup>} · φ > {n · φ} + {n · φ<sup>2</sup>} &#8211; 1</p>\n<p>最后，别忘了 φ 和 φ<sup>2</sup> 正好相差 1 ，因而 n · φ 和 n · φ<sup>2</sup> 正好相差一个整数，也就是说它们的小数部分是相等的。如果令它们的小数部分均为 r ，则上式变为</p>\n<p class="indent">2 · r ≥ r · φ > 2 · r &#8211; 1</p>\n<p>由于 r 是一个 0 到 1 之间的数，而 φ ≈ 1.618 ，所以上式显然成立。至此，我们就证明了，对于任意正整数 n ，都有 [n · φ] + [n · φ<sup>2</sup>] = [[n · φ<sup>2</sup>] · φ] 。</p>\n<p>利用取整符号和常数 φ ，我们还能构造出很多类似的恒等式。用上面的这套方法来证明这些恒等式，则显得格外有效。为了说明这一点，我打算不惜文章的连贯性，在此处穿插一个习题。这是我最近见到的一个题目。讲完这个题目的解法后，我们会立即言归正传。题目是：求证，对于任意正整数 n ，都有 [[n · φ] · φ] = [n · φ<sup>2</sup>] &#8211; 1 。</p>\n<p>解法和之前的几乎如出一辙。原等式等价于</p>\n<p class="indent">[n · φ<sup>2</sup>] &#8211; 1 ≤ [n · φ] · φ &lt; [n · φ<sup>2</sup>]</p>\n<p>它又可以变成</p>\n<p class="indent">n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} &#8211; 1 ≤ (n · φ &#8211; {n · φ}) · φ &lt; n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>}</p>\n<p>即</p>\n<p class="indent">n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>} &#8211; 1 ≤ n · φ<sup>2</sup> &#8211; {n · φ} · φ &lt; n · φ<sup>2</sup> &#8211; {n · φ<sup>2</sup>}</p>\n<p>即</p>\n<p class="indent">&#8211; {n · φ<sup>2</sup>} &#8211; 1 ≤ &#8211; {n · φ} · φ &lt; &#8211; {n · φ<sup>2</sup>}</p>\n<p>即</p>\n<p class="indent">{n · φ<sup>2</sup>} + 1 ≥ {n · φ} · φ > {n · φ<sup>2</sup>}</p>\n<p>由于 {n · φ} = {n · φ<sup>2</sup>} ，因此我们把它们都换成 r 。整个式子就变为了：</p>\n<p class="indent">r + 1 ≥ r · φ > r</p>\n<p>同样地，由于 r 是一个 0 到 1 之间的数，而 φ ≈ 1.618 ，所以上式显然成立。</p>\n<p>&nbsp;</p>\n<p>如果序列 W 当中有 (a, b) 和 (a + b, a + 2b) 这么两项，我们就说， (a + b, a + 2b) 接在 (a, b) 后面。而我们刚才证明的实际上就是，序列 W 当中的第 [1 · φ<sup>2</sup>], [2 · φ<sup>2</sup>], [3 · φ<sup>2</sup>], &#8230; 项将会分别接在第 1, 2, 3, &#8230; 项的后面。把该接起来的数对全都接起来，我们就会得到很多链条，比如之前就已经观察到的</p>\n<p class="indent">(1, 2), (3, 5), (8, 13), (21, 34), &#8230;</p>\n<p>和</p>\n<p class="indent">(4, 7), (11, 18), (29, 47), &#8230;</p>\n<p>显然，每个链条里的数都构成了一个广义 Fibonacci 数列。而每个链条打头的数对，则是那些不能接在任何数对后面的数对，也就是第 [1 · φ<sup>2</sup>], [2 · φ<sup>2</sup>], [3 · φ<sup>2</sup>], &#8230; 项以外的数对。由 Beatty-Rayleigh 定理可知，它们正好就是 W 当中的第 [1 · φ], [2 · φ], [3 · φ], &#8230; 项。所以，我们把 W 当中的第 [1 · φ], [2 · φ], [3 · φ], &#8230; 项竖着写成一列，再不断地写出每个数对后面接着的数对，就能完整地给出 W 当中的数对产生的所有链条了。联想到 W 里面既无重复又无遗漏地包含了每一个正整数，因而我们相当于把全体正整数排成了一张无限大的数表，每个正整数都恰好只用了 1 次，使得数表中的每一行都是一个广义 Fibonacci 数列！我们把这个神奇的数表叫作 Wythoff 数表。</p>\n<p class="indent">(1, 2) &#8211; (3, 5) &#8211; (8, 13) &#8211; (21, 34) &#8211; (55, 89) &#8211; (144, 233) &#8211; &#8230;<br />\n(4, 7) &#8211; (11, 18) &#8211; (29, 47) &#8211; (76, 123) &#8211; (199, 322) &#8211; (521, 843) &#8211; &#8230;<br />\n(6, 10) &#8211; (16, 26) &#8211; (42, 68) &#8211; (110, 178) &#8211; (288, 466) &#8211; (754, 1220) &#8211; &#8230;<br />\n(9, 15) &#8211; (24, 39) &#8211; (63, 102) &#8211; (165, 267) &#8211; (432, 699) &#8211; (1131, 1830) &#8211; &#8230;<br />\n(12, 20) &#8211; (32, 52) &#8211; (84, 136) &#8211; (220, 356) &#8211; (576, 932) &#8211; (1508, 2440) &#8211; &#8230;<br />\n(14, 23) &#8211; (37, 60) &#8211; (97, 157) &#8211; (254, 411) &#8211; (665, 1076) &#8211; (1741, 2817) &#8211; &#8230;<br />\n(17, 28) &#8211; (45, 73) &#8211; (118, 191) &#8211; (309, 500) &#8211; (809, 1309) &#8211; (2118, 3427) &#8211; &#8230;<br />\n&#8230; &#8230; &#8230; &#8230; &#8230; &#8230; &#8230;</p>\n<p>真正神奇的事情出现了。现在，我们约定，接下来所说的广义 Fibonacci 数列一律限定在正整数范围内。如果两个广义 Fibonacci 数列的本质完全相同，只是下标被整体平移了一下，我们就认为它们俩是同一个数列。比方说，以 2, 1 打头的广义 Fibonacci 数列（这叫作 Lucas 数列）为：</p>\n<p class="indent">2, 1, 3, 4, 7, 11, 18, 29, 47</p>\n<p>它就是 Wythoff 数表中的第二行。接下来，我们来证明一个非常让人震惊的事实：在这个意义下， Wythoff 数表包含了所有可能的广义 Fibonacci 数列！</p>\n<p>证明方法很简单。还记得吗，我们之前曾经得出，一切广义 Fibonacci 数列最终都会一上一下地无限地近似于一个以 φ 为公比的等比数列。所以，如果 a(1), a(2), a(3), &#8230; 是一个广义 Fibonacci 数列，那么我们一定能在找到某个 n ，使得 a(n + 1) = [a(n) · φ] ，并且 a(n + 2) = [a(n) · φ<sup>2</sup>] 。然而， ([a(n) · φ], [a(n) · φ<sup>2</sup>]) 就是序列 W 当中的第 a(n) 项，它出现在了 Wythoff 数表的某一行里。这一行所对应的广义 Fibonacci 数列，本质上就是数列 a(1), a(2), a(3), &#8230; 。</p>\n<p>&nbsp;</p>\n<p>我们证明了一个如此优美的结论，将之前的所有东西都贯穿在了一起，一切都非常漂亮地完结了。再来一个简单的收尾后，这篇文章就该结束了。毕竟，我们之前挖过的所有坑都填上了，我们之前提过的所有东西都用到了。呃……是吗？</p>\n<p>编故事有一个非常重要的原则，叫作“契科夫之枪”（Chekhov&#8217;s gun）。它说的是：如果你在第一章里提到了墙上挂着一把来复枪，那在第二章或者第三章里面它一定会开火，否则它就不应该挂在那里。举个例子：主人公踏上征途之前，一哥们儿给他递上一件东西并说：“把这个带上吧，没准儿能用上……”好，这玩意儿百分之百地会被用上。如果故事片里有一个镜头专门对着播报新闻的电视，记住了，这肯定和剧情有联系。如果枪战片里的人来到一个大房间，四壁都是养着鱼的大水缸……呵呵，我不说你都知道一会儿会出现啥。</p>\n<p>这篇文章也挂着好几把契科夫之枪。比方说，刚才突然来的那个习题是怎么回事？在那个习题中，我们证明了 [[n · φ] · φ] = [n · φ<sup>2</sup>] &#8211; 1 恒成立。好了，现在考虑 Wythoff 数表的第 n 行，它是一个广义 Fibonacci 数列。如果再把这个数列往前推两项，会得到什么？注意到， Wythoff 数表的第 n 行是以序列 W 当中的第 [n · φ] 项打头的。也就是说， Wythoff 数表的第 n 行的头两个数是 [[n · φ] · φ], [[n · φ] · φ<sup>2</sup>] 。由于一个数的 φ 倍和 φ<sup>2</sup> 倍（以及它们同时取整后的结果）正好相差这个数本身这么多，因此 [[n · φ] · φ<sup>2</sup>] &#8211; [[n · φ] · φ] = [n · φ] ，并且 [[n · φ] · φ] &#8211; [n · φ] = [n · φ<sup>2</sup>] &#8211; 1 &#8211; [n · φ] = n &#8211; 1 。这就说明， Wythoff 数表的第 n 行可以看作是由 n &#8211; 1, [n · φ] 生成的广义 Fibonacci 数列。所以，我们得到了 Wythoff 数表的一个等价定义：在第 -1 列依次写下 0, 1, 2, 3, &#8230; ，在第 0 列对应地依次写下 [1 · φ], [2 · φ], [3 · φ], &#8230; ，于是每一行里都有两个数了；在每一行里都不断往后面写下新的数，每个数都是它的前面两个数之和，最后得到的就是 Wythoff 数表——它既无重复又无遗漏地包含了所有正整数，也既无重复又无遗漏地包含了所有广义 Fibonacci 数列。</p>\n<table>\n<tr>\n<td style="color: #009bdf">0</td>\n<td style="color: #009bdf">1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>13</td>\n<td>21</td>\n<td>34</td>\n<td>55</td>\n<td>89</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">1</td>\n<td style="color: #009bdf">3</td>\n<td>4</td>\n<td>7</td>\n<td>11</td>\n<td>18</td>\n<td>29</td>\n<td>47</td>\n<td>76</td>\n<td>123</td>\n<td>199</td>\n<td>322</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">2</td>\n<td style="color: #009bdf">4</td>\n<td>6</td>\n<td>10</td>\n<td>16</td>\n<td>26</td>\n<td>42</td>\n<td>68</td>\n<td>110</td>\n<td>178</td>\n<td>288</td>\n<td>466</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">3</td>\n<td style="color: #009bdf">6</td>\n<td>9</td>\n<td>15</td>\n<td>24</td>\n<td>39</td>\n<td>63</td>\n<td>102</td>\n<td>165</td>\n<td>267</td>\n<td>432</td>\n<td>699</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">4</td>\n<td style="color: #009bdf">8</td>\n<td>12</td>\n<td>20</td>\n<td>32</td>\n<td>52</td>\n<td>84</td>\n<td>136</td>\n<td>220</td>\n<td>356</td>\n<td>576</td>\n<td>932</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">5</td>\n<td style="color: #009bdf">9</td>\n<td>14</td>\n<td>23</td>\n<td>37</td>\n<td>60</td>\n<td>97</td>\n<td>157</td>\n<td>254</td>\n<td>411</td>\n<td>665</td>\n<td>1076</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">6</td>\n<td style="color: #009bdf">11</td>\n<td>17</td>\n<td>28</td>\n<td>45</td>\n<td>73</td>\n<td>118</td>\n<td>191</td>\n<td>309</td>\n<td>500</td>\n<td>809</td>\n<td>1309</td>\n<td>&#8230;</td>\n</tr>\n<tr>\n<td style="color: #009bdf">&#8230;</td>\n<td style="color: #009bdf">&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n<td>&#8230;</td>\n</tr>\n</table>\n<p>还记得 Zeckendorf 表达吗？接下来，该轮到它返场了！现在我们定义，把一个正整数的 Zeckendorf 表达里的所有 Fibonacci 数都往后移一位，得到的新的正整数就是原正整数的 “Fibonacci 后继” 。例如， 100 的 Zeckendorf 表达是 89 + 8 + 3 ，其中 89 的下一个 Fibonacci 数是 144 ， 8 的下一个 Fibonacci 数是 13 ， 3 的下一个 Fibonacci 数是 5 。那么， 100 的 Fibonacci 后继就是 144 + 13 + 5 ，也就是 162 。我们用 S(n) 来表示正整数 n 的 Fibonacci 后继。刚才我们演示的就是， S(100) = 162 。接下来，我们将证明这么一个结论：对于任意正整数 n 都有， 1 + S(n) 等于 [(n + 1) · φ] 。</p>\n<p>如果 n 的 Zeckendorf 表达中各个 Fibonacci 数的下标为 i<sub>1</sub>, i<sub>2</sub>, i<sub>3</sub>, &#8230; ，令 </p>\n<p class="indent">X = φ<sup>i<sub>1</sub></sup> + φ<sup>i<sub>2</sub></sup> + φ<sup>i<sub>3</sub></sup> + &#8230;</p>\n<p>令</p>\n<p class="indent">Y = (1 &#8211; φ)<sup>i<sub>1</sub></sup> + (1 &#8211; φ)<sup>i<sub>2</sub></sup> + (1 &#8211; φ)<sup>i<sub>3</sub></sup> + &#8230;</p>\n<p>那么 n 就可以写成</p>\n<p class="indent">X / √<span style="text-decoration: overline">5</span> &#8211; Y / √<span style="text-decoration: overline">5</span></p>\n<p>由于 1 &#8211; φ 是一个绝对值小于 1 的负数，因而当 i<sub>1</sub>, i<sub>2</sub>, i<sub>3</sub>, &#8230; 正好是全体正偶数时， Y 的值达到最大。利用等比数列的求和公式可知， Y 的最大值是 φ &#8211; 1 ≈ 0.618 。对应地，当 i<sub>1</sub>, i<sub>2</sub>, i<sub>3</sub>, &#8230;  正好是全体大于 1 的正奇数时， Y 的值则达到最小（注意，在 Zeckendorf 表达里， Fibonacci 数的下标不能取 1 ）。利用等比数列的求和公式可知， Y 的最小值是 φ &#8211; 2 ≈ &#8211; 0.382 。当然，对于任意一个有限大的 n 来说，刚才算出的最大值和最小值都是取不到的。</p>\n<p>为了把 n 变成 S(n) ，我们只需要把 X 里的每一个 φ 和 Y 里的每一个 (1 &#8211; φ) 的指数都变大一号即可。于是， 1 + S(n) 就可以表示为：</p>\n<p class="indent">1 + φ · X / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ) · Y / √<span style="text-decoration: overline">5</span></p>\n<p>而我们要证明 1 + S(n) = [(n + 1) · φ] ，也就是</p>\n<p class="indent">1 + φ · X / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ) · Y / √<span style="text-decoration: overline">5</span> = [φ · X / √<span style="text-decoration: overline">5</span> &#8211; φ · Y / √<span style="text-decoration: overline">5</span> + φ]</p>\n<p>由于等式左边的式子是一个整数，因此我们只需要证明等式右边的取整符号内的式子比等式左边的式子更大，但不会大 1 或更多。也就是说，我们只需要证明：</p>\n<p class="indent">0 ≤ (φ · X / √<span style="text-decoration: overline">5</span> &#8211; φ · Y / √<span style="text-decoration: overline">5</span> + φ) &#8211; (1 + φ · X / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ) · Y / √<span style="text-decoration: overline">5</span>) &lt; 1</p>\n<p>而</p>\n<p class="indent">&nbsp; (φ · X / √<span style="text-decoration: overline">5</span> &#8211; φ · Y / √<span style="text-decoration: overline">5</span> + φ) &#8211; (1 + φ · X / √<span style="text-decoration: overline">5</span> &#8211; (1 &#8211; φ) · Y / √<span style="text-decoration: overline">5</span>)<br />\n= (1 &#8211; φ) · Y / √<span style="text-decoration: overline">5</span> &#8211; φ · Y / √<span style="text-decoration: overline">5</span> + φ &#8211; 1<br />\n= (1 &#8211; 2φ) · Y / √<span style="text-decoration: overline">5</span> + φ &#8211; 1</p>\n<p>是一个关于 Y 的一次函数，且当 Y = φ &#8211; 2 时函数值为 1 ， Y = φ &#8211; 1 时函数值为 0 。这就说明，这个一次函数的函数值永远在 0 和 1 之间。至此，我们就证到了， 1 + S(n) 等于 [(n + 1) · φ] 。</p>\n<p>之前我们提到了 Wythoff 数表的等价定义：在第 -1 列依次写下 0, 1, 2, 3, &#8230; ，在第 0 列对应地依次写下 [1 · φ], [2 · φ], [3 · φ], &#8230; ，然后每一行都不断往后面接着写，使得每个数都是它的前面两个数之和。由于 1 + S(n) 等于 [(n + 1) · φ] ，因此上面这个等价定义可以进一步改成：在第 -1 列依次写下 0, 1, 2, 3, &#8230; ，在第 0 列对应地依次写下 1 + S(0), 1 + S(1), 1 + S(2), &#8230; （这里，我们规定 S(0) = 0 ），然后每一行都不断往后面接着写，使得每个数都是它的前面两个数之和。</p>\n<p>所以，第 1 列的数就应该依次为 0 + (1 + S(0)), 1 + (1 + S(1)), 2 + (1 + S(2)), &#8230; 。仔细想一想， n + (1 + S(n)) 究竟是什么？容易观察到， n + S(n) 的 Zeckendorf 表达与 n 的 Zeckendorf 表达有非常直接的联系。如果 n 等于 F<sub>i<sub>1</sub></sub> + F<sub>i<sub>2</sub></sub> + &#8230; + F<sub>i<sub>k</sub></sub> ，那么 S(n) 就等于 F<sub>i<sub>1</sub>+1</sub> + F<sub>i<sub>2</sub>+1</sub> + &#8230; + F<sub>i<sub>k</sub>+1</sub> ，于是 n + S(n) 就等于 F<sub>i<sub>1</sub>+2</sub> + F<sub>i<sub>2</sub>+2</sub> + &#8230; + F<sub>i<sub>k</sub>+2</sub> 。可见， n + S(n) 的 Zeckendorf 表达就是 n 的 Zeckendorf 表达中所有 Fibonacci 数都往后移两位而得的，显然它里面不包含 F<sub>2</sub> 和 F<sub>3</sub> ，最小的一项至少都是 F<sub>4</sub> 。因此，为了得到 n + (1 + S(n)) 的 Zeckendorf 表达，我们只需要在 n + S(n) 的 Zeckendorf 表达里直接添加一个 F<sub>2</sub> 就行了。</p>\n<p>举个例子，如果某一行的第 -1 个数是 F<sub>2</sub> + F<sub>4</sub> + F<sub>9</sub> ，那么第 0 个数就是 1 + F<sub>3</sub> + F<sub>5</sub> + F<sub>10</sub> ，第 1 个数就是 F<sub>2</sub> + F<sub>4</sub> + F<sub>6</sub> + F<sub>11</sub> 。那么，这一行的第 2 个数是多少呢？由于第 2 个数是第 0 个数和第 1 个数之和，因此第 2 个数就是 F<sub>3</sub> + F<sub>5</sub> + F<sub>7</sub> + F<sub>12</sub> ，其中 1 和 F<sub>2</sub> 合并后得到了 F<sub>3</sub> 。类似地，由于第 3 个数是第 1 个数和第 2 个数之和，因此第 3 个数就是 F<sub>4</sub> + F<sub>6</sub> + F<sub>8</sub> + F<sub>13</sub> ；由于第 4 个数是第 2 个数和第 3 个数之和，因此第 4 个数就是 F<sub>5</sub> + F<sub>7</sub> + F<sub>9</sub> + F<sub>14</sub> ……规律已经非常明显了：在 Wythoff 数表当中，每一行的第 1 个数的 Zeckendorf 表达的最小项都是 F<sub>2</sub> ，并且今后的每一个数都是它前一个数的 Fibonacci 后继，其 Zeckendorf 表达的最小项依次升级为 F<sub>3</sub>, F<sub>4</sub>, F<sub>5</sub>, &#8230; ！</p>\n<p>回想 Wythoff 数表最早最早的定义：不断把那些不能接在任何数对后面的数对拎出来打头所得的一行一行的链条。因此，每一行打头的数都是在前面从来没有出现过的数中最小的数。所以，我们有了一种另类的生成 Wythoff 数表的方式。先在第一行的开头写下 1 。在它的右边不断写下 S(1), S(S(1)), S(S(S(1))), &#8230; 此时，在所有仍未出现的数中，最小的数是 4 。接下来，我们就在第二行的开头写下 4 ，并在它的右边不断写下 S(4), S(S(4)), S(S(S(4))), &#8230; 。此时，在所有仍未出现的数中，最小的数是 6 。接下来，我们就在第三行的开头写下 6 ，并在它的右边不断写下 S(6), S(S(6)), S(S(S(6))), &#8230; 。此时，在所有仍未出现的数中，最小的数是 8 。接下来，我们就在第四行的开头写下 8 ……不断这样做下去，我们就会得到一张无限大的数表，它就是 Wythoff 数表。这是 Wythoff 数表的另一个等价定义。</p>\n<p>另外， Wythoff 数表的第 -1 列为 0, 1, 2, 3, &#8230; ，第 0 列依次为 [1 · φ], [2 · φ], [3 · φ], &#8230; ，这两列都是递增的。第 1 列的数等于第 -1 列的数和第 0 列的数之和。由于大点儿的数加上大点儿的数，和肯定也会更大，所以第 1 列的数也是递增的。同理，第 2 列，第 3 列，以至于今后的每一列，都是递增的。于是， Wythoff 数表还有这么一种生成方式：在第 1 列从小到大列出所有 Zeckendorf 表达的最小项为 F<sub>2</sub> 的数，在第 2 列从小到大列出所有 Zeckendorf 表达的最小项为 F<sub>3</sub> 的数，在第 3 列从小到大列出所有 Zeckendorf 表达的最小项为 F<sub>4</sub> 的数……不断这样做下去，我们就会得到一张无限大的数表，它就是 Wythoff 数表。这是 Wythoff 数表的又一个等价定义。</p>\n<p>&nbsp;</p>\n<p>最后让我们回到“挪动皇后”和 Wythoff 游戏。 Wythoff 游戏的所有后行者必胜的状态构成了序列 W ，它的公式为：</p>\n<p class="indent">([1 · φ], [1 · φ<sup>2</sup>]), ([2 · φ], [2 · φ<sup>2</sup>]), ([3 · φ], [3 · φ<sup>2</sup>]), ([4 · φ], [4 · φ<sup>2</sup>]), &#8230;</p>\n<p>反过来，如果你面对的状态在序列 W 以外，那么你就是必胜的。但是，必胜的策略是什么呢？必胜的策略自然就是，把当前状态变成序列 W 当中的某个状态。但是，到时候你怎么才能算出，究竟应该变成序列 W 当中的哪个状态呢？早些时候，我们证明了，变法确实是存在的（见序列 W 所满足的第 3 个条件）。但是，利用当时的证明方法，很难得出一套固定的、易实施的具体策略，可以帮我们每次都准确地找出这个变法。毕竟，在没有高精度计算器的情况下，你甚至连 W 里的每一项具体是多少都搞不出来。然而，最后那几个 Wythoff 数表的等价定义是非常离散的，这给上述问题的解决开辟了一条新路。比如，我们可以立即得出，数对 (a, b) 在序列 W 当中，当且仅当 a 的 Zeckendorf 表达的最小项的下标是一个偶数，并且 b = S(a) 。所以，我们就有了一种判断数对是否在 W 当中的方法。刚才证明过恒等式 1 + S(n) = [(n + 1) · φ] ，据此可以推出 S(n &#8211; 1) + 1 = [n · φ] ；于是，序列 W 当中的第 n 项就是 (S(n &#8211; 1) + 1, S(S(n &#8211; 1) + 1)) 。再结合之前给出的序列 W 满足条件 3 的证明，最终得出的结论将会正好与 1977 年 Robert Silber 对 Wythoff 游戏的分析结果完全一致：若数对 (a, b) 不在序列 W 当中（其中 0 &lt; a &lt; b ），则按照下述三种情况进行分类讨论，一定能把它变成序列 W 当中的某个数对。三种情况分别如下：</p>\n<ul>\n<li>若 a 的 Zeckendorf 表达的最小项的下标是一个奇数，则把 b 变成 S<sup>-1</sup>(a) 。这里 S<sup>-1</sup>(x) 表示把 x 的 Zeckendorf 表达里的所有 Fibonacci 数都往前移一位之后得到的结果。</li>\n<li>若 a 的 Zeckendorf 表达的最小项的下标是一个偶数，并且 b &gt; S(a) ，则 b 变成 S(a) 。</li>\n<li>若 a 的 Zeckendorf 表达的最小项的下标是一个偶数，并且 b &lt; S(a) ，那该怎么办呢？先计算出 b &#8211; a 的值，不妨把它记作 n ；然后，把 (a, b) 变成 (S(n &#8211; 1) + 1, S(S(n &#8211; 1) + 1)) 即可。</li>\n</ul>\n<p>&nbsp;</p>\n<p>在写这篇文章的过程中，我看了很多资料。 1907 年， Willem Abraham Wythoff 在 A Modification of the Game of Nim 一文中提出了 Wythoff 游戏。 1977 年， Robert Silber 在 Wythoff&#8217;s NIM and Fibonacci Representations 一文中给出了基于 Fibonacci 数的分析。 Martin Gardner 在 Penrose Tiles to Trapdoor Ciphers 一书中对它们做了介绍。这三位作者的名字之前都有提过。 Wythoff 数表最早是 1980 年由 David Morrison 在 A Stolarsky Array of Wythoff Pairs 一文中提出的。它和 Zeckendorf 表达的关系则可以参见 Clark Kimberling 的 The Zeckendorf Array Equals the Wythoff Array 一文。与 Zeckendorf 表达本身有关的一些证明，尤其是 Zeckendorf 定理的证明，参考了 Tamás Lengyel 的 A Counting Based Proof of the Generalized Zeckendorf&#8217;s Theorem 一文。利用取整符号和常数 φ 能够构造出很多的恒等式，其证明方法参考了 Ian Connell 的 Some Properties of Beatty Sequences I 一文。我最早是因为看了 Neil Sloane 的 My Favorite Integer Sequences 一文后，了解到 Wythoff 数表，才打算写这篇文章的。为了把这一切联系在一起，形成一篇完整的文章，我写下了很多自己的理解，甚至有些地方的证明过程也是我自己的思考。如果有不对的地方，请网友们及时提出。</p>\n<p>在数学世界里，各种数学研究对象织成了一张纵横交错的大网，捡石子游戏、 Wythoff 数表和 Fibonacci 数列只是其中的三个非常小的顶点而已。 2 万多字之后，我们终于把它们之间的种种关系理了个半清。但是，它们各自还能继续向外延伸，这些恐怕再花 20 万字也说不完。 Wythoff 游戏是 Nim 游戏的一个变种，后者在组合游戏理论中占据着非常核心的地位。对 Wythoff 游戏本身进行推广，还可以得到一系列类似的游戏。例如，把两堆石子换成三堆石子、四堆石子甚至 n 堆石子，情况又会怎样？很多数学家都对此有过研究。本文提到了 Wythoff 数表的很多令人意想不到的等价定义和非常让人震撼的数学性质，但这并不是 Wythoff 数表的全部。例如，在 Wythoff 数表中，下一行的每个数的大小正好夹在上一行数的空隙之间。这背后会涉及到非常有趣的 interspersion 和 dispersion 理论。 Wythoff 数表里既无重复又无遗漏地包含了所有正整数，那么从 1 开始的每个正整数究竟出现在了 Wythoff 数表中的哪一行呢？这个问题的答案就又构成了一个数列：</p>\n<p class="indent">0, 0, 0, 1, 0, 2, 1, 0, 3, 2, 1, 4, 0, 5, 3, 2, 6, 1, 7, 4, &#8230;</p>\n<p>这里我们规定， Wythoff 数表的首行为第 0 行。这个数列本身又有很多可圈可点之处，例如删掉数列中的第一个 0 、第一个 1 、第一个 2 等等，剩下的数列其实就是原数列本身。因此，这个数列具有分形的特征！当然，考察每个正整数究竟出现在了 Wythoff 数表中的哪一列，我们又可以得到一个数列，它也有很多独特的性质。</p>\n<p>Fibonacci 数列和 Zeckendorf 表达里面的水就更深了。我之前曾经介绍过 Hofstadter 的非线性递推数列（ <a href="http://www.matrix67.com/blog/archives/5152">http://www.matrix67.com/blog/archives/5152</a> ），里面就涉及到了它们之间的各种更深层的联系。</p>\n	e69be27d0690bc776dca1ef0fd245101d034c525	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.846539	30	http://www.matrix67.com/blog/archives/6784#comments		'+1':1859,1872,1931,1935,1984,2084,2091,2097,2101,2110,2113,3594,3596,3598 '+2':3605,3607,3609 '-0.0022':1176 '-0.0059':1174 '-0.0154':1172 '-0.0403':1170 '-0.1056':1168 '-0.2764':1166 '-1':1875,1938,3098,3498,3525,3649,3814,3833,4034,4038 '-2':1911,1941,1946,1958,1967 '-3':1943 '-4':1913,1948,1960,1969 '-5':1950 '/blog/archives/5152':4322 '0':176,181,191,192,218,252,291,292,303,304,359,362,377,385,386,389,1079,1119,1355,1689,2088,2553,2670,3100,3105,3123,3417,3478,3481,3500,3505,3527,3532,3536,3546,3547,3554,3557,3655,3675,3816,3821,3835,4017,4271,4272,4273,4275,4278,4283,4294,4298 '0.0036':1175 '0.0095':1173 '0.0249':1171 '0.0652':1169 '0.1708':1167 '0.382':3353 '0.618':1068,3330 '0.7236':1155 '1':177,182,207,211,213,225,227,244,264,288,336,343,353,365,393,502,513,528,530,532,534,541,553,555,557,594,598,625,640,706,710,713,720,734,745,778,787,797,833,842,882,895,904,920,1027,1040,1048,1049,1058,1066,1070,1074,1083,1108,1114,1124,1136,1144,1145,1306,1318,1331,1344,1345,1349,1364,1375,1385,1401,1418,1429,1438,1449,1458,1460,1479,1481,1493,1496,1508,1510,1513,1516,1519,1522,1537,1542,1548,1554,1568,1570,1574,1577,1584,1587,1594,1599,1605,1611,1626,1631,1637,1643,1655,1658,1662,1685,1698,1747,1757,1772,1786,1975,1985,1996,2014,2027,2032,2047,2054,2079,2092,2153,2155,2172,2215,2222,2244,2253,2433,2461,2484,2488,2511,2524,2531,2549,2555,2594,2599,2610,2625,2638,2647,2662,2672,2702,2709,2716,2738,2753,2764,2780,2788,2886,2895,2924,2937,2969,3018,3076,3080,3087,3101,3107,3124,3125,3135,3272,3277,3296,3299,3302,3313,3316,3329,3337,3347,3371,3375,3379,3383,3388,3392,3395,3399,3413,3425,3429,3433,3442,3446,3450,3458,3459,3464,3473,3476,3483,3487,3492,3501,3507,3516,3521,3528,3534,3537,3539,3540,3552,3555,3558,3559,3561,3563,3568,3632,3657,3662,3677,3687,3696,3726,3751,3754,3757,3761,3817,3823,3831,3840,3855,3892,3894,3969,3973,3978,3979,3990,3991,3995,3996,4084,4085,4089,4090,4266,4274,4277,4281,4288,4300 '1.1708':1156 '1.618':796,1056,2559,2676 '1.8944':1157 '10':271,493,849,2179,2813,3150 '100':1731,1741,1762,1807,1812,1818,1841,3222,3246,3265 '102':2829,3166 '1076':2857,3194 '11':486,854,1823,1825,1831,2184,2301,2312,2727,2802,2899,3139,3196 '110':2818,3155 '1131':2834 '118':2864,3201 '12':419,488,856,2186,2836,3173 '12.9846':1161 '1220':2823 '123':2328,2348,2807,3144 '123.048':2340 '13':273,490,851,887,900,909,934,941,948,1150,1290,1292,2181,2249,2267,2274,2281,2721,2793,3130,3239,3251 '1309':2869,3206 '136':2841,3178 '14':858,2188,2848,3185 '144':2798,3234,3250 '15':853,2183,2825,3162 '1508':2846 '157':2853,3190 '16':860,2190,2814,3151 '162':3254,3266 '165':2830,3167 '17':862,2192,2860,3197 '1741':2858 '178':2819,3156 '18':855,2185,2302,2313,2324,2728,2803,2900,3140 '1830':2835 '19':864,2194 '1907':137,4094 '191':2865,3202 '1960':77 '1977':4003,4110 '1980':4136 '199':2808,3145 '2':178,183,208,210,214,229,231,245,265,294,340,344,355,367,464,503,536,543,605,617,627,642,685,694,723,730,735,769,780,789,802,843,883,896,905,921,928,1041,1050,1137,1146,1282,1307,1334,1348,1366,1378,1388,1405,1420,1432,1440,1452,1462,1464,1484,1486,1512,1544,1576,1601,1633,1664,1666,1746,1755,2001,2004,2015,2017,2036,2041,2050,2056,2062,2070,2157,2159,2173,2219,2223,2245,2254,2261,2543,2547,2704,2710,2717,2740,2755,2766,2789,2885,2894,2926,2944,2971,3102,3109,3126,3147,3352,3471,3502,3509,3529,3542,3562,3565,3670,3673,3680,3698,3710,3818,3825,3844,3862,3896,3898,4223,4276,4280,4286,4302 '20':857,2187,2837,3174,4229 '21':866,888,901,910,943,951,998,1000,1003,1007,1151,1252,1255,1263,1294,2196,2250,2276,2722,2794,3131 '21.0095':1162 '2118':2870 '22':868,2198 '220':2842,3179 '23':859,2189,2849,3186 '233':2799 '24':870,2200,2826,3163 '2440':2847 '25':872,2202 '254':2854,3191 '26':861,2191,2815,3152 '267':2831,3168 '27':874,2204 '28':863,2193,2861,3198 '2817':2859 '288':2820,3157 '29':876,2206,2303,2319,2729,2804,2901,3141 '2b':2365,2687,2693 '2φ':3460 '3':179,184,233,235,266,300,345,347,482,504,538,545,629,644,736,773,782,791,804,844,884,897,906,923,930,1042,1051,1138,1147,1284,1368,1391,1422,1442,1466,1468,1515,1550,1607,1639,1735,1836,1847,2010,2018,2058,2063,2161,2163,2174,2224,2226,2246,2256,2263,2706,2711,2718,2742,2757,2768,2790,2896,2928,2973,3103,3111,3127,3136,3159,3228,3240,3503,3511,3530,3694,3701,3712,3819,3827,3847,3869,3900,3902,3930,4000,4279,4285 '3.0652':1158 '30':878,2208 '309':2866,3203 '31':865,2195 '32':2838,3175 '322':2809,3146 '33':1014 '33.979':1002 '33.9941':1163 '34':867,889,902,911,944,952,957,965,967,969,972,975,1018,1152,1179,1182,1189,1203,1214,1220,1234,1245,1258,1268,1295,1297,1744,1751,2197,2251,2277,2723,2795,3132 '3427':2871 '356':2843,3180 '36':869,2199 '37':2850,3187 '39':871,2201,2827,3164 '4':237,239,268,424,506,846,1043,1370,1394,1424,1444,1470,1472,1518,1556,1613,1645,2060,2165,2167,2176,2299,2306,2725,2800,2897,3137,3148,3171,3708,3715,3765,3768,3771,3774,3778,3904,3906,4282,4290 '4.9597':1159 '41':873,2203 '411':2855,3192 '42':2816,3153 '432':2832,3169 '44':875,2205 '45':2862,3199 '466':2821,3158 '47':877,2207,2304,2320,2332,2335,2338,2345,2730,2805,2902,3142 '49':879,2209 '5':243,267,505,845,885,898,907,924,931,938,1026,1030,1044,1052,1063,1077,1082,1086,1089,1117,1123,1127,1130,1141,1148,1194,1197,1206,1211,1225,1228,1237,1242,1266,1271,1276,1285,1287,1317,1321,1372,1397,1426,1446,1474,1476,1521,1585,1588,1593,1596,1598,1602,1604,1608,1610,1614,2064,2175,2247,2257,2264,2271,2719,2791,3128,3183,3244,3252,3309,3311,3382,3386,3398,3402,3405,3408,3420,3423,3428,3432,3437,3440,3445,3449,3453,3456,3462,4284 '500':2867,3204 '52':2839,3176 '521':2810 '54':1016 '54.979':1005 '55':979,1020,1153,1185,1191,1208,1218,1260,1273,1299,1743,1749,2796,3133 '55.0036':1164 '55.013':974 '576':2844,3181 '6':270,485,487,489,492,495,497,499,848,1045,1524,2178,2812,3149,3160,3195,3782,3785,3788,3791,3795,4287 '60':2851,3188 '63':2828,3165 '665':2856,3193 '68':2817,3154 '699':2833,3170 '7':269,418,425,496,507,847,2177,2300,2307,2317,2726,2801,2898,3138,4289 '73':2863,3200 '754':2822 '76':2327,2347,2806,3143 '76.0476':2337 '8':272,498,850,886,899,908,933,940,1053,1149,1289,1734,1745,1829,1833,1846,2065,2180,2248,2266,2273,2720,2792,3129,3172,3227,3235,3799,3802 '8.0249':1160 '809':2868,3205 '84':2840,3177 '843':2811 '88.9978':1165 '89':980,1154,1187,1222,1239,1249,1300,1733,1816,1820,1845,2797,3134,3226,3230 '89.013':977 '9':500,852,2182,2824,3161,3184 '932':2845,3182 '97':2852,3189 'a':370,376,379,382,390,399,402,406,412,430,433,446,457,460,469,474,1327,1329,1332,1343,1347,1363,1365,1367,1369,1371,1374,1377,1384,1387,1390,1393,1396,1400,1404,1417,1419,1421,1423,1425,1428,1431,1457,1461,1465,1469,1473,1478,1483,1657,1665,1993,2013,2016,2030,2039,2043,2045,2048,2053,2055,2057,2059,2067,2352,2362,2364,2372,2382,2385,2395,2681,2684,2686,2690,2692,2695,2923,2925,2927,2935,2938,2942,2945,2949,2952,2958,2968,2970,2972,3950,3956,3963,4011,4018,4026,4035,4048,4055,4060,4062,4069,4073,4079,4100,4141,4172 'abraham':141,4097 'and':4118 'array':4143,4156,4160 'b':371,380,383,391,408,413,437,442,447,452,461,475,1437,1439,1441,1443,1445,1448,1451,1459,1463,1467,1471,1475,1480,1485,2353,2360,2363,2367,2369,2373,2380,2383,2386,2399,2404,2682,2685,2691,2696,3951,3961,4012,4019,4031,4053,4057,4067,4072,4080 'based':4174 'beatty':516,520,564,568,2747,4193 'beatty-rayleigh':515,519,563,567,2746 'c':1357,1383,1386,1389,1392,1395,1399,1403 'chekhov':2987 'ciphers':4131 'clark':4151 'connell':4188 'counting':4173 'david':4138 'dispersion':4261 'edouard':1724 'equals':4157 'f1':1768,1774,1793,1963 'f10':3660 'f11':3667 'f12':3685 'f13':3706 'f14':3720 'f2':1770,1778,1788,1899,1919,1962,1972,1978,2074,3624,3645,3651,3664,3689,3730,3859 'f3':1776,1780,1900,1926,1971,1979,3626,3658,3682,3691,3737,3866 'f4':1918,1961,3628,3652,3665,3703,3738,3873 'f5':1925,1970,3659,3683,3717,3739 'f6':3666,3704 'f7':3684,3718 'f8':3705 'f9':3653,3719 'favorite':4202 'fi':1856,1858,1862,1870,1871,1873,1874 'fi1':3586,3593,3604 'fi2':3587,3595,3606 'fibonacci':4,893,985,993,1009,1023,1033,1036,1095,1099,1103,1132,1303,1323,1337,1340,1353,1359,1380,1407,1411,1413,1434,1454,1488,1526,1558,1580,1590,1616,1621,1670,1672,1707,1711,1715,1718,1728,1753,1759,1800,1814,1827,1838,1850,1866,1878,1881,1888,1905,2139,2142,2238,2242,2294,2309,2733,2783,2876,2879,2888,2911,2917,2930,2965,3027,3091,3121,3216,3219,3232,3237,3242,3248,3261,3284,3345,3621,3732,4045,4119,4122,4221,4313 'fik':3588,3597,3608 'fn':1901,1909,1910,1912,1930,1934,1936,1937,1939,1940,1942,1944,1945,1947,1949,1956,1957,1959,1965,1966,1968,1980,1983,2069,2076,2083,2090,2096,2100,2109,2112 'game':4104 'gardner':163,4125 'generalized':4178 'gun':2989 'hofstadter':4318 'i':1864,4195 'i1':3286,3298,3319,3333 'i2':3287,3301,3320,3334 'i3':3288,3304,3321,3335 'ian':4187 'integer':4203 'interspersion':4259 'isaacs':75,81,133 'k':1531,1534,1539,1545,1551,1561,1565,1571,1583,1623,1628,1634,1640,1648,1652,1659,1678,1682,1695,1702 'kimberling':4152 'l':1532,1536,1541,1547,1553,1563,1567,1573,1586,1625,1630,1636,1642,1650,1654,1661,1684,1692,1697 'lengyel':4170 'lucas':2891 'm':150,197,201 'martin':162,4124 'modification':4101 'morrison':4139 'my':4201 'n':153,198,200,633,635,648,650,656,658,660,669,672,676,678,681,683,687,689,693,696,699,701,705,709,712,716,738,740,749,750,752,755,758,761,763,765,983,987,990,997,1029,1039,1060,1072,1076,1085,1112,1116,1126,1135,1320,1328,1330,1333,1676,1687,1700,1854,1869,1915,1922,1953,1987,1994,2021,2026,2031,2035,2040,2044,2046,2049,2068,2078,2390,2397,2401,2406,2412,2414,2416,2418,2422,2424,2426,2429,2431,2440,2442,2444,2446,2448,2450,2453,2455,2457,2459,2463,2465,2467,2469,2471,2473,2476,2478,2480,2482,2492,2494,2496,2500,2502,2504,2507,2509,2513,2515,2517,2520,2522,2533,2536,2564,2566,2568,2570,2587,2589,2592,2597,2600,2603,2606,2608,2611,2613,2616,2618,2621,2623,2626,2628,2631,2633,2636,2639,2642,2645,2648,2651,2654,2656,2933,2936,2939,2943,2946,2950,2953,2959,3013,3016,3024,3034,3038,3044,3046,3049,3060,3063,3066,3069,3072,3074,3077,3079,3084,3086,3088,3257,3259,3270,3274,3276,3280,3306,3356,3360,3363,3377,3390,3391,3489,3491,3518,3520,3567,3570,3573,3575,3579,3584,3591,3600,3602,3611,3613,3617,3631,3634,3639,3641,3971,3972,3977,3980,3986,3989,3994,4076,4083,4088,4243 'neil':4198 'nim':4106,4117,4233 'of':4102,4105,4144,4176,4192 'pairs':4146 'penrose':4127 'proof':4175 'properties':4191 'r':2541,2544,2545,2548,2551,2659,2661,2663,2665,2668 'rayleigh':517,521,565,569,2748 'representations':4120 'robert':4005,4112 'rufus':74 's':2988,3256,3264,3273,3362,3376,3389,3488,3517,3535,3538,3541,3545,3556,3560,3564,3569,3574,3590,3601,3612,3633,3640,3753,3755,3756,3758,3759,3760,3770,3772,3773,3775,3776,3777,3787,3789,3790,3792,3793,3794,3962,3970,3976,3988,3992,3993,4033,4037,4054,4059,4068,4082,4086,4087,4116,4180 'sequences':4194,4204 'silber':4006,4113 'sloane':4199 'some':4190 'stolarsky':4142 'tamás':4169 'the':4103,4154,4158,4177 'theorem':4181 'tiles':4128 'to':4129 'trapdoor':4130 'w':259,262,277,282,285,289,295,297,301,306,310,313,317,323,328,333,337,341,348,357,373,396,415,421,427,449,466,478,510,559,728,732,767,771,775,806,822,831,838,913,918,926,936,946,955,963,1280,1311,2135,2137,2151,2170,2212,2216,2220,2227,2230,2236,2259,2269,2279,2285,2288,2292,2297,2315,2322,2330,2342,2355,2358,2375,2378,2388,2393,2679,2700,2751,2762,2773,2776,2956,3036,3890,3910,3917,3922,3928,3940,3953,3966,3984,3998,4014,4022 'willem':140,4096 'www.matrix67.com':4321 'www.matrix67.com/blog/archives/5152':4320 'wythoff':2,142,145,165,171,187,222,279,330,810,812,2129,2133,2232,2786,2904,2909,2962,3022,3032,3042,3082,3095,3117,3495,3723,3741,3748,3806,3809,3812,3852,3878,3881,3886,3888,3944,4008,4098,4108,4115,4134,4145,4159,4207,4219,4231,4237,4248,4251,4255,4263,4268,4292,4309 'x':246,248,251,254,256,405,410,434,439,444,454,458,470,574,579,581,586,588,591,593,600,603,608,612,615,619,1497,2435,2437,3290,3308,3365,3381,3397,3404,3419,3427,3436,3444,4039,4041 'x2':1498 'y':576,582,584,587,589,595,597,601,604,610,613,616,620,3295,3310,3323,3326,3339,3349,3369,3385,3401,3407,3422,3431,3439,3448,3452,3455,3461,3466,3469,3474 'zeckendorf':1721,1725,1737,1764,1796,1803,1809,1843,1885,1890,1893,2106,2117,2121,2145,3208,3214,3224,3282,3343,3577,3581,3615,3619,3636,3643,3728,3735,3857,3864,3871,3958,4028,4043,4050,4064,4149,4155,4163,4166,4179,4315 'α':524,529,535,537,539,626,628,630,636,659,664,670,677,682,688,700 'β':526,531,542,544,546,641,643,645,651,661,666,673,679,684,690,702 'φ':226,230,234,238,242,549,554,743,746,751,756,779,781,783,788,790,792,795,968,973,988,1001,1028,1055,1067,1075,1084,1091,1097,1109,1115,1125,1180,1200,1216,1253,1319,1491,1494,1501,1509,1511,1514,1517,1520,1523,1535,1538,1543,1549,1555,1566,1569,1575,1592,1595,1600,1606,1612,1624,1627,1632,1638,1644,1653,1656,1663,1686,1699,1709,2154,2158,2162,2166,2336,2398,2408,2415,2420,2423,2428,2430,2441,2443,2452,2454,2456,2464,2466,2475,2477,2479,2486,2489,2493,2501,2506,2508,2514,2519,2521,2527,2534,2546,2558,2567,2572,2574,2590,2591,2601,2602,2612,2614,2615,2629,2630,2640,2641,2649,2650,2655,2664,2675,2754,2756,2758,2765,2767,2769,2919,2940,2951,3014,3015,3039,3047,3048,3050,3053,3061,3064,3065,3067,3070,3071,3073,3078,3089,3108,3110,3112,3278,3297,3300,3303,3314,3328,3351,3367,3372,3380,3384,3393,3396,3400,3403,3406,3409,3418,3421,3424,3426,3430,3435,3438,3441,3443,3447,3451,3454,3457,3463,3470,3475,3493,3508,3510,3512,3522,3824,3826,3828,3893,3897,3901,3905,3974,3981,4184 'φ10':1196,1210,1275 'φ11':1227,1241 'φ2':228,232,236,240,551,556,747,753,759,970,976,991,1004,1183,1231,1247,1256,1502,1540,1572,1597,1629,1660,2156,2160,2164,2168,2339,2402,2407,2417,2419,2425,2427,2432,2445,2447,2449,2451,2458,2460,2468,2470,2474,2481,2483,2490,2495,2503,2505,2510,2516,2518,2523,2529,2537,2569,2571,2593,2598,2604,2607,2609,2617,2619,2622,2624,2627,2632,2634,2637,2643,2646,2652,2657,2703,2705,2707,2739,2741,2743,2947,2954,3017,3051,3055,3062,3075,3895,3899,3903,3907 'φ3':1503,1546,1603,1635,2472,2497 'φ4':1504,1552,1609,1641 'φ5':1505 'φ6':1506 'φ8':1265 'φ9':1193,1205,1224,1236,1270 'φi1':3291 'φi2':3292 'φi3':3293 'φn':1025,1062,1081,1088,1122,1129,1140,1316,1679,1696,1703 '一个以':1090 '一书中对它们做了介绍':4132 '一共有':2000,2009,2082 '一共有多少种不同的方案':1991 '一切广义':1706,2916 '一切的广义':1620 '一切都非常漂亮地完结了':2976 '一哥们儿给他递上一件东西并说':2996 '一定严格地大于':592,596,602 '一定介于':680 '一定就是后面两个':992 '一定能把它变成序列':4021 '一文':4161,4182,4196 '一文中提出了':4107 '一文中提出的':4147 '一文中给出了基于':4121 '一文后':4205 '一步就把':411 '万万没有想到的是':134 '万多字之后':4224 '万字也说不完':4230 '三种情况分别如下':4024 '上式将会以':1917,1924 '上式就变为了':2439 '上述数对都出现在了序列':917 '上面的不等式进一步简化为':2499 '下一行的每个数的大小正好夹在上一行数的空隙之间':4257 '下方或者左下方移动':11 '下表中的第一行依次是各个':1131 '下面这种方法是我最喜欢的一种':571 '不可能为整数':674 '不在序列':4013 '不妨假设':2384 '不妨把上述序列叫作序列':258 '不妨把它记作':4075 '不妨把答案记作':1992 '不妨用':2434 '不断像这样展开后':1951 '不断把较小的':1904 '不断把那些不能接在任何数对后面的数对拎出来打头所得的一行一行的链条':3743 '不断这样做下去':3803,3875 '不断这样循环下去':319 '不断这样递推下去':106 '不管怎样都无法把它移动到棋盘的最左下角':20 '不管是哪种情况':1973 '不超过':1811,1824 '不过':835 '与':4162 '且当':3468 '且没有重复的情况':360 '两个广义':1410 '两人遵循棋子的走法':8 '两名玩家轮流取走石子':155 '严格地小于':580,583 '个':637,652,662,1865 '个数中选出若干个不相邻的数':2080 '个数之和':3678,3699,3713 '个数和第':3676,3697,3711 '个数对':929,939,949 '个数对为':966 '个数对咯':958 '个数对是':1283,1288,1293,1298 '个数对里的两数之差恰好为':739 '个数就是':3656,3663,3681,3702,3716 '个数是':3650 '个数是多少呢':3671 '个数是第':3674,3695,3709 '个数的':3727 '个条件':3931 '个正整数在两个数列中一共出现了':711 '个物体':1997,2005,2022 '个物体怎么选':2028 '个物体排成一排':1988 '个物体里选了':2037 '个石子':151,154 '中':397,631,646,793 '中后行者必胜的状态':817 '中的某个数对':2356,2376 '中的第':1281,2359,2379,2389 '中选出若干个不相邻的数':1981 '为':2893 '为了保持文章的完整性':561 '为了得到':3630 '为了把':3359 '为了把这一切联系在一起':4210 '为了证明这一点':1895 '为了说明这一点':2578 '为什么':1178,1315,1795 '为什么一个':1094 '为什么把后行者必胜的状态标在棋盘上':819 '为什么是同时减而不是同时加呢':480 '为什么棋盘的每行每列里都有且仅有一个标记呢':829 '为什么每行每列里有且仅有一个这样的位置呢':129 '为什么满足上面三个条件呢':329 '为公比的等比数列':1092,1710,2920 '主人公踏上征途之前':2995 '举个例子':2994,3647 '举例来说':484 '之前我们提到了':3494 '之前我们曾问':110 '之前曾经出现过':471 '之和':1729 '之外的任何一个非零数对都可以一步变成':302 '之外的数对':422 '之外的某个非零数对':374 '之外的非零数对':314 '之间':621,691,697,1860,2093,3484 '之间的数':2556,2673 '也可以表示成':1742 '也就是':814,2462,3253,3394 '也就是第':2737 '也就是说':160,205,1361,1415,1704,1976,2012,3041,3415 '也就是说它们的小数部分是相等的':2539 '也就是说第':737 '也就满足':2491 '也总能把游戏状态移回到':316 '也既无重复又无遗漏地包含了所有广义':3120 '也是因为':1262 '也是相邻的':1758 '也都非常接近':1223 '了':1839 '了解到':4206 '事实上':915,1619 '事实上并非如此':995 '于是':718,1313,2051,2498,3374,3599,3851,3982 '于是每一行里都有两个数了':3113 '人们把它叫作':168 '今后':206 '介于':1855 '从':1817,1830,1898,1977,2073 '从中选出若干个不相邻的物体':1989 '从而':585,599 '从这两个地方出发':99 '仔细想一想':3566 '仔细观察':2287 '代进去':1046 '令':132,3289,3294 '以':2884 '以及它们同时取整后的结果':3057 '以及对角线上的所有位置':86 '以外':3911 '以此类推':725,2283 '以至于今后的每一列':3849 '任何一个正整数都可以唯一地表示成若干个不相邻的':1727 '会不会正好是':2329 '会形成两条直线呢':820 '会得到什么':3030 '但':1202,1233,1748 '但不会大':3412 '但却要偏小一些':1011 '但只能将棋子往左方':10 '但是':698,1101,3913,3919,3932,4226 '但由此引申的问题却已经被前人解决了':136 '但这并不是':4250 '你会发现':125,1907 '你发现了什么':880 '你可以试着把':1038 '你就知道了':824 '你就能保证必胜了':39,59 '你应该后走才对':114 '你应该直接把王移到棋盘的':50 '你应该直接把车移到棋盘对角线上的位置':34 '你应该选择先走':33,49 '你或许会猜测':981 '你甚至连':3939 '你能看出什么端倪吗':2290 '你都可以把它再次移到某个':55 '你都把它移回到棋盘的对角线上':37 '使得':2934 '使得它们同时满足':1564 '使得数表中的每一行都是一个广义':2782 '使得每个数都是它的前面两个数之和':3514,3549 '例如':417,1730,3221,4240,4253 '例如删掉数列中的第一个':4297 '依次递增':784 '便一步变到':426 '保证的':483 '倍':1201,1232,3056 '倍也会比':1248 '倍和':3054 '倍大致就等于下一个':1098 '倍就会比':1217 '假设':369 '先在第一行的开头写下':3750 '先计算出':4071 '先走的人不得不把皇后挪到刚才被划掉的位置上':96 '先走的人只能把游戏状态变为':312 '先走的人只需要把皇后挪到这两个地方即可':102 '其':3734 '其中':241,1861,2252,3229,3686,4016 '其中一堆有':149 '其中后者是前者的':1199,1230 '其实中国很早就有了这个游戏':167 '其绝对值大于':1057 '其绝对值小于':1069 '其证明方法参考了':4186 '再不断地写出每个数对后面接着的数对':2771 '再仔细观察':124 '再来一个简单的收尾后':2977 '再结合之前给出的序列':3997 '减去一个尽可能大的':1877 '减去某个很小的数':1212,1267 '减去某个更小的数':1277 '减小到':409,443 '分析出问题的答案也不算太难':48 '列':3845,3848 '列为':3815 '列从小到大列出所有':3856,3863,3870 '列依次为':3822 '列依次写下':3099,3499,3526 '列对应地依次写下':3106,3506,3533 '列的数之和':3836 '列的数也是递增的':3841 '列的数和第':3834 '列的数就应该依次为':3553 '列的数等于第':3832 '则':4056 '则上式变为':2542 '则可以看作是由初始条件':1342 '则在':2087 '则把':4030 '则按照下述三种情况进行分类讨论':4020 '则数列':533 '则是':731,774 '则是那些不能接在任何数对后面的数对':2736 '则显得格外有效':2577 '则由此得到的所有数对都在序列':1310 '则能分别变成':501 '刚才我们演示的就是':3263 '刚才我们给出了序列':837 '刚才的公式就是正确的了':325 '刚才突然来的那个习题是怎么回事':3010 '刚才算出的最大值和最小值都是取不到的':3358 '刚才证明过恒等式':3968 '利用取整符号和常数':2573,4183 '利用当时的证明方法':3933 '利用等比数列的求和公式可知':3325,3348 '别忘了':2526 '到':2075,2089,2554,2671 '到时候你怎么才能算出':3920 '前':708 '剩下的数列其实就是原数列本身':4304 '剩下的部分是':1822,1835 '加上某个很小的数':1207,1238,1272 '加上某个更小的数':1243 '包含了一对一对的':2138 '即':692,754,777,2512,2620,2635,2644 '即使':1681,1691 '即可':1667,4091 '即横纵坐标之比':827 '原等式等价于':2596 '参考了':4168 '反过来':3908 '发现的':1726 '取到最后一个石子的玩家获胜':161 '取整之后的结果是':1013 '取整后正好就是':978 '受到规则的限制':29,44,64 '变到':414,448 '变成':3361,4032,4058,4081 '变法确实是存在的':3926 '另一方面':2103 '另外':216,590,1409,2019,3811 '另外一堆有':152 '只是下标被整体平移了一下':2881 '只要不断地选取尽可能大的':1799 '只要数对里面至少有一个数不为':217 '叫作':2985 '可以不选':1990,2081 '可以帮我们每次都准确地找出这个变法':3936 '可以直接变成':384 '可以直接由':514 '可以简单地理解为取':255 '可以表示成':1732 '可知':394 '可见':3610 '各个数对里的两数之差也都大于':361 '各种广义':1669 '各种数学研究对象织成了一张纵横交错的大网':4217 '合并后得到了':3690 '同样地':2666 '同样能一步把':445 '同理':3842 '后':24,1821,1834 '后一项也一定严格地大于前一项':799 '后一项总比前一项大':794 '后来人们把它叫作':144 '后继':3220,3262,3733 '后继就是':3249 '后者在组合游戏理论中占据着非常核心的地位':4235 '后走的人即使赢不了':315 '后走的人就赢定了':320 '后面':2697 '后面的':2255,2265,2275 '后面的两个':1008 '后面的那个数对':953 '后面的那个数对是':922,932,942 '向下或者向左下方走一格':46 '向下或者向左下方走任意多格':66 '否则它就不应该挂在那里':2993 '呃':2982 '告诉我们':356 '呢':435 '呵呵':3006 '和':199,209,525,540,550,575,609,618,665,671,686,695,757,989,1015,1019,1181,1186,1190,1195,1221,1226,1254,1259,1346,1376,1402,1430,1450,1482,1492,1507,1562,1649,1750,1756,1769,1775,1779,1857,2528,2535,2683,2724,3368,3482,3625,3688,3885,4260 '和性质':354,803 '和最大的选法显然就是':1908 '和条件':366 '和肯定也会更大':3838 '哦':2124 '哪些位置是后走的人必胜的位置呢':119 '哪些非零数对所对应的游戏状态是后行者必胜的':221 '嘿':960 '四堆石子甚至':4242 '四壁都是养着鱼的大水缸':3005 '回到原问题':622 '回想':3740 '因此':22,194,653,668,1012,1121,1668,1783,3059,3629,3744,4305 '因此上面这个等价定义可以进一步改成':3523 '因此即使取整后':798 '因此我们只需要证明':2370 '因此我们只需要证明等式右边的取整符号内的式子比等式左边的式子更大':3411 '因此我们把它们都换成':2658 '因此第':3679,3700,3714 '因此这不能算':1761 '因此选了':1773 '因此随着':1059,1071,1111 '因而':98,748,1213,1244,1589,2532 '因而后走的人就必胜了':97 '因而它精确地等于':704 '因而当':3318 '因而我们可以把游戏状态看作是无序数对':203 '因而我们相当于把全体正整数排成了一张无限大的数表':2778 '因而数列':1500 '在':76,116,395,3342,3722,4099,4114,4126,4140,4254 '在上述游戏中':28,43,63 '在上面这种寻找':1884 '在写这篇文章的过程中':4092 '在国际象棋中':26,40,60 '在如图所示的地方放马或者放象':19 '在它的右边不断写下':3752 '在序列':465,3952 '在所有仍未出现的数中':3763,3780,3797 '在数列':624,639,786 '在数学世界里':4216 '在此处穿插一个习题':2580 '在每一行里都不断往后面写下新的数':3114 '在没有高精度计算器的情况下':3938 '在第':3097,3104,3497,3504,3524,3531,3854,3861,3868 '在这两个数列中':654 '在这个意义下':2908 '在这个过程中':1848 '在那个习题中':3011 '地上有两堆石子':148 '堆石子':4244 '大':440 '奇格':51,56 '契科夫之枪':2986 '好':2999 '好了':3020 '如何判断出谁有必胜策略呢':80 '如何得出':1806 '如右图所示':53 '如左图所示':35 '如果':375,401,429,573,1914,1921,2351,2371,2922,3279,3583 '如果不选最后那个物体':2024 '如果两个广义':2878 '如果两个数正好相差':762 '如果令它们的小数部分均为':2540 '如果你在第一章里提到了墙上挂着一把来复枪':2991 '如果你面对的状态在序列':3909 '如果再把这个数列往前推两项':3029 '如果只有':1995 '如果序列':322,2678 '如果我们能找出合适的':1560 '如果把':892 '如果把棋子放在如图所示的位置':14 '如果故事片里有一个镜头专门对着播报新闻的电视':3001 '如果数列':1362,1416 '如果有':2003 '如果有不对的地方':4214 '如果枪战片里的人来到一个大房间':3004 '如果某一行的第':3648 '如果正整数':1853 '如果皇后位于被划掉的位置上':91 '如果皇后在这两个地方':95 '如果选了最后那个物体':2033 '如果问题中的棋子是王':47 '如果问题中的棋子是皇后':67 '如果问题中的棋子是车':31 '它也有很多独特的性质':4312 '它们为什么会形成这么两条直线呢':128 '它们又是后走的人必胜的位置':105 '它们各自还能继续向外延伸':4227 '它们正好就是':2750 '它出现在了':2961 '它又可以变成':2605 '它和':4148 '它就是':925,935,945,2903,3805,3877 '它既无重复又无遗漏地包含了所有正整数':3119 '它是一个广义':3026 '它生成的真的就是一个个的':1035 '它的公式为':3891 '它的通项公式只是其中之一':1713 '它说的是':2990 '定理':1722 '定理可知':2749 '定理推出':518 '定理有很多证明方法':570 '定理的证明':566,4167 '定理真正最核心的':1891 '定理说的是':522 '实数':1356 '实际上就是':2061 '实际上是在一上一下地无限接近于':1128 '实际上是在正负交替地向':1118 '容易看出':170,1618 '容易观察到':3572 '对':4007,4236 '对于任意一个有限大的':3355 '对于任意正整数':2411,2563,2586,3269 '对于任意的实数':1530 '对应地':3331 '对照前面那个棋盘图':274 '将之前的所有东西都贯穿在了一起':2975 '将介于':614 '将会一上一下地无限靠近':1701 '将会无限接近于':1087 '将刚才的操作再多重复几次后':121 '小':455 '小于':632,647,655 '尤其是':4165 '就可以写成':3307 '就可以表示为':3378 '就应该是':954 '就成了两个非常特别的广义':1525 '就是':1720,2314,2321 '就是一个由':1398,1477 '就是序列':2955 '就是每一个正整数的':1892 '就满足':552 '就等于':2396,2400,3592,3603 '就统一用':212 '就能完整地给出':2772 '就能把数对变到':477 '就行了':3646 '带来的结果':834 '年':138,4004,4095,4111 '年左右提出来的':78 '年由':4137 '并且':2941,3068,3960,4052,4066 '并且今后的每一个数都是它前一个数的':3731 '并且从':1305 '并且数列':1436 '并在它的右边不断写下':3769,3786 '并约定在书写时总把较小的数写在前面':204 '广义':1336 '序列':261,276,281,327,727,770,1279,2150,2211,2699,3983 '开始':1308 '开始的每个正整数究竟出现在了':4267 '当':250,607,3332 '当且仅当':3955 '当中':318,467,914,1312,3954,4015 '当中各项里的两数之差依次为':342,733,2221 '当中各项里的较大数也是依次递增的':807 '当中各项里的较小数依次递增':349,776,2228 '当中有':2680 '当中有很多项里包含了':2237 '当中用到的数都大于':358 '当中的':2298 '当中的什么位置':919 '当中的任何一个数对都无法一步变成':290,296 '当中的其他项':2289 '当中的其他项呢':2286 '当中的其他项还隐藏着别的广义':2293 '当中的另一个数对':298 '当中的哪个状态呢':3923 '当中的所有项正好是':2231 '当中的数对产生的所有链条了':2774 '当中的数对时':311 '当中的方法':3967 '当中的某一个数对':307 '当中的某个数对':4023 '当中的某个状态':3918 '当中的第':927,937,947,956,964,2260,2270,2280,2316,2323,2331,2701,2752,2763,2957,3037,3985 '当游戏状态为':309 '当然':3354,4307 '当皇后位于标有':111 '形成一篇完整的文章':4211 '很多数学家都对此有过研究':4246 '很接近':1932 '很难得出一套固定的':3934 '得到的仍然是一个广义':1358 '得到的值将会精确地等于':1047 '得到的新的正整数就是原正整数的':3218 '必胜的策略是什么呢':3914 '必胜的策略自然就是':3915 '必须且只能出现在其中一个数列中':721,724 '怎样选才能让它们的和最大呢':1903 '性质':335,339,346,352,512,801,2214,2218,2225 '恒成立':3019 '情况又会怎样':4245 '想起来了':2125,2126 '我不说你都知道一会儿会出现啥':3007 '我之前曾经介绍过':4317 '我们之前挖过的所有坑都填上了':2980 '我们之前提过的所有东西都用到了':2981 '我们之前曾经得出':2915 '我们之前证明了':2104 '我们也就算是证明了刚才提到的结论':1301 '我们会立即言归正传':2583 '我们会自动地跳过所有相邻的':1887 '我们假设':388,1792 '我们假设每次选':1785 '我们先来说明这三个性质为什么能推出前面的三个条件':350 '我们再把整个思路捯回去':2149 '我们又可以得到一个数列':4311 '我们发现':2235 '我们只需要在':3638 '我们只需要把':3364 '我们只需要求解关于':1647 '我们只需要研究王':23 '我们只需要证明':3416 '我们可以从最左下角的位置出发':88 '我们可以看到':275 '我们可以立即得出':3948 '我们将会得出结论':1529 '我们将证明这么一个结论':3268 '我们就会得到一张无限大的数表':3804,3876 '我们就会得到很多链条':2714 '我们就在第三行的开头写下':3784 '我们就在第二行的开头写下':3767 '我们就在第四行的开头写下':3801 '我们就完整地证明了':809 '我们就有了一种判断数对是否在':3965 '我们就来证明这件事':2350 '我们就能分析出':107 '我们就能得到一个':1802 '我们就认为它们俩是同一个数列':2882 '我们就证到了':3486 '我们就证明了':2562 '我们就说':2689 '我们就说这是一个非零数对':219 '我们得到了':3094 '我们得到了这样一个结论':2072 '我们把':2761 '我们把正整数的这种表示方法叫作它的':1736 '我们把这个神奇的数表叫作':2785 '我们挖的坑又只剩最后一个了':1314 '我们是从棋盘游戏':2127 '我们是怎么扯到':2120 '我们有':2095 '我们有了一种另类的生成':3747 '我们来证明一个非常让人震惊的事实':2907 '我们来证明序列':509 '我们用':3255 '我们的问题就是':220 '我们看见了一个非常明显的规律':122 '我们真正只需要证明的就是':2410 '我们约定':2874 '我们终于把它们之间的种种关系理了个半清':4225 '我们给出':562 '我们肯定不会用到相邻的':1849 '我们要么会得到':1955 '我们要么选它':1998 '我们要么选这个':2006 '我们规定':3544 '我们证明了':2210,3012,3925 '我们证明了一个如此优美的结论':2974 '我们还得仔细分析一下误差':1106 '我们还能构造出很多类似的恒等式':2575 '我们还能预测出':916 '我们需要考虑的第二个问题是':1986 '我写下了很多自己的理解':4212 '我打算不惜文章的连贯性':2579 '我最早是因为看了':4197 '我看了很多资料':4093 '我都喜欢讲讲':1717 '或':305 '或更多':3414 '或者':378 '或者说这个数对形如':404 '或者说这个数对是':432 '所以':321,472,950,1840,1883,2094,2108,2409,2760,2921,3093,3550,3746,3964 '所以上式显然成立':2560,2677 '所以序列':558 '所以我们也就不分析了':21 '所以第':3839 '所定义的序列':2134 '所得到的两个数确实很接近':1006 '所有这样的数对从小到大依次为':224 '所满足的第':3929 '才打算写这篇文章的':4209 '打头的广义':2308,2887 '扯到':2132,2141 '扯到与之等价的':2128 '扯到哪些状态后行者必胜':2131 '扯到序列':2136 '扯远了':2147,2148 '把':1302,4078 '把一个正整数的':3213 '把上面三点结合起来':1528 '把两堆石子换成三堆石子':4241 '把它们连在一起':2240 '把它变成':423 '把当前状态变成序列':3916 '把某个国际象棋棋子放在棋盘上':7 '把棋盘从下到上各行依次标为':175 '把棋盘从左到右各列依次标为':180 '把该接起来的数对全都接起来':2713 '把这个带上吧':2997 '把这些位置全都划掉':90 '挪动皇后':72,117,173,815,3884 '捡石子':169 '捡石子游戏':1,4218 '换句话说':1790,2066 '据此可以推出':3975 '接下来':387,508,1784,1791,2349,2906,3210,3267,3766,3783,3800 '接下来所说的广义':2875 '接在':2694 '提出了一个双人对弈游戏':143 '提出的公式确实准确地给出了':811 '故事还远远没有结束':836 '数':1010,1037,1100,1104,1133,1754,1760,1801,1851,1867,1879,1889,2140,2239 '数中选出若干个不相邻的数':1902 '数列':5,1338,1341,1360,1381,1408,1414,1435,1455,1489,1527,1533,1559,2052,2243,2295,2310,2734,2784,2889,2892,2912,2931,2966,3028,3092,3122 '数列一律限定在正整数范围内':2877 '数列之和必然也是一个广义':1412 '数列也将继承':1671 '数列写下来':1304 '数列只是其中的三个非常小的顶点而已':4222 '数列和':4314 '数列实际上就是':1591 '数列时':1716 '数列最终都会一上一下地无限地近似于一个以':2918 '数列有一个神奇的通项公式':1024 '数列有很多神奇之处':1712 '数列的另一个神奇之处':1719 '数列的很多宏观特征':1673 '数列的本质完全相同':2880 '数列的通项公式':1581,1617 '数列的通项公式呢':1324 '数列那著名的通项公式':2143 '数列都会一上一下地无限近似于一个以':1708 '数列都可以表示成':1622 '数列里的数都依次写下来':894 '数列里的每一项都乘上非':1354 '数吧':994 '数对':3949 '数往大了调':1906 '数时':986 '数是':1815,1828,3233,3238,3243 '数更小':1882 '数的':1096 '数的下标不能取':3346 '数的下标为':3285 '数的分析':4123 '数的近似值':1034 '数表':2787,3118,3807,3879,4208 '数表中':4256 '数表中的哪一列':4310 '数表中的哪一行呢':4269 '数表中的第二行':2905 '数表包含了所有可能的广义':2910 '数表和':4220 '数表和一切的':3 '数表当中':3724 '数表最早是':4135 '数表最早最早的定义':3742 '数表的一个等价定义':3096 '数表的全部':4252 '数表的又一个等价定义':3882 '数表的另一个等价定义':3810 '数表的很多令人意想不到的等价定义和非常让人震撼的数学性质':4249 '数表的方式':3749 '数表的某一行里':2963 '数表的第':3023,3033,3043,3083,3813 '数表的等价定义':3496 '数表的等价定义是非常离散的':3945 '数表的首行为第':4293 '数表还有这么一种生成方式':3853 '数表里既无重复又无遗漏地包含了所有正整数':4264 '数都往前移一位之后得到的结果':4046 '数都往后移一位':3217 '数都往后移两位而得的':3622 '整个式子就变为了':2660 '既无重复又无遗漏地包含了所有的正整数':547 '早些时候':3924 '时':253,1139 '时函数值为':3472,3477 '易实施的具体策略':3935 '是':372,420,984,1322 '是一个':2552,2669 '是一个关于':3465 '是一个广义':2929 '是一个由':1373,1427,1447 '是一个绝对值小于':3315 '是不能选的':1794 '是个整数':703 '是个负数':1110 '是偶数':1916 '是吗':2983 '是奇数':1923 '是完全等价的':174 '是序列':2354,2374,2387 '是方程':1495 '是相邻的':1752 '是这个数对里的较大数':403 '是这个数对里的较小数':431 '显然':16,623,638,2731 '显然它里面不包含':3623 '最后':1490,2525 '最后得到的就是':3116 '最后扯到了正整数的':2144 '最后让我们回到':3883 '最后那几个':3943 '最大的和为':1982 '最小的一项至少都是':3627 '最小的数是':3764,3781,3798 '最终':1080,1694 '最终得出的结论将会正好与':4002 '有':2099 '有且仅有一个数对用到了':398 '有没有什么公式不用递推就能找出这些位置呢':127 '有没有觉得':881 '本人甚至也不是这个游戏最早的发明者':166 '本文提到了':4247 '本质上就是数列':2967 '本质上就相当于选了':1777 '本质相同':202 '本身的绝对值很大':1693 '本身的绝对值很小':1683 '条件':287,293,299 '来猜猜看':2326 '来表示了':215 '来表示正整数':3258 '来说':3357 '根据':1952 '根据定义':962 '根据序列':2341,2392 '根据性质':463 '根据规定':1781 '棋盘上出现了两个死角':94 '棋盘上又会出现两个新的死角':104 '次':714,2781 '正好与':186 '正好就是完整的':2241 '正好拼成一个以':2305 '正好是':2258,2268,2278 '正好是全体大于':3336 '正好是全体正偶数时':3322 '正好比':1184,1257 '正好相差':760,2530 '正好相差一个整数':2538 '正好相差这个数本身这么多':3058 '正整数':719,722 '此时':93,103,3762,3779,3796 '每一个新的正整数都必须且只能出现在其中一个数列中':726 '每一个正整数的':2116 '每一行打头的数都是在前面从来没有出现过的数中最小的数':3745 '每一行的第':3725 '每两个数组成一个数对':1309 '每个数对里的前后两项之比':826 '每个数都是它的前面两个数之和':3115 '每个正整数都恰好只用了':2779 '每个正整数都有至少一个':2105 '每个链条里的数都构成了一个广义':2732 '每次说到':1714 '每行每列里恰好有一个这样的位置':126 '比':438,453 '比如':1805,3947 '比如之前就已经观察到的':2715 '比方说':1674,2296,2883,3009 '毕竟':2979,3937 '求证':2585 '没准儿能用上':2998 '没错':891 '注意':1031,1739,3341 '注意到':800,1107,3031 '游戏':146,813,816,2130,3887,4109 '游戏中两堆石子数量变化的规则是相同的':188 '游戏中后行者必胜的所有状态':2233 '游戏和':172 '游戏是':4232 '游戏本身进行推广':4238 '游戏的一个变种':4234 '游戏的分析结果完全一致':4009 '游戏的所有后行者必胜的状态构成了序列':3889 '游戏规则是这样的':147 '满足':527,744,2487 '满足以下三个性质':334 '满足以下三个条件':286 '满足以下三个重要的性质':2213 '满足性质':768 '满足条件':3999 '满足要求的选法分为两类':2023 '满足这三个性质':511 '然后':2234,4077 '然后不管对方怎么走':36,54 '然后再来说明这三个性质本身为什么都是成立的':351 '然后把它们两个两个分成一组':903 '然后每一行都不断往后面接着写':3513,3548 '然而':2485,2948,3942 '王每次只能向左':45 '王每次可以横着':41 '现在':368,2873 '现在我们定义':3212 '现在我们就知道答案了':113 '现在考虑':3021 '理论':4262 '甚至有些地方的证明过程也是我自己的思考':4213 '生成的':1350 '生成的广义':1379,1406,1433,1453,1487,3090 '用上面的这套方法来证明这些恒等式':2576 '用这种方法推算出来的下一个':1102 '由':2745 '由于':548,663,742,1054,1065,1767,2550,2653,2667,3312,3515 '由于一个数的':3052 '由于大点儿的数加上大点儿的数':3837 '由于状态':196 '由于第':2366,3672,3693,3707 '由于等式左边的式子是一个整数':3410 '由刚才的结论':675 '由性质':392 '由此得到的所有数对都在序列':912 '由此算出序列':2169 '画出三条射线':89,100 '画出更大的棋盘':120 '略大一些':1250 '略大一些了':1219 '的':1215,1246,1763,1842,3223,3247,3260,3281,3576,3580,3614,3618,3635,3642,3957,4027,4042,4049,4063,4153,4171,4189,4200 '的一个':1808 '的一次函数':3467 '的下一个':3231,3236,3241 '的两个数同时减小相同的量':476 '的两根':1499 '的二元一次方程组':1651 '的值':1142,1198,1229,4074 '的值则达到最小':3340 '的值达到最大':3324 '的公式':823 '的公式为':2152 '的前几项':839,2171 '的前几项为':263 '的增加':1061,1073,1113,1677 '的奇偶性的不同':1954 '的定义':2343,2394 '的小数部分':2438 '的形式':1646 '的性质':729,772,832 '的指数都变大一号即可':3373 '的数':3860,3867,3874 '的数列叫作':1335 '的整数部分':257 '的时候选的实际上都是':1787 '的最大值是':3327 '的最大整数':249 '的最大的':1813,1826 '的最小值是':3350 '的格子时你应该选择先走还是后走':112 '的正奇数时':3338 '的正整数共有':657 '的正整数有':634,649 '的游戏中':118 '的游戏是由':73 '的绝对值将会正负交替地迅速向':1688 '的绝对值将会迅速变得非常非常大':1064,1680 '的绝对值将会迅速变得非常非常接近于':1078 '的证明':4001 '的负数':3317 '的非线性递推数列':4319 '皇后在哪些地方时先走的人必胜':108 '皇后在哪些地方时后走的人必胜':109 '皇后每次只能向左':65 '皇后每次可以横着':61 '直接把':441 '相比':459 '看来':130 '看看':999 '看看序列':821 '真正神奇的事情出现了':2872 '真的满足上面三个条件':324 '确实就是正确的答案':283 '种可能的取值':2102,2114 '种选法':2002,2011,2085,2098 '种选法必须得既无重复又无遗漏地取遍':2111 '稍作计算可知':260 '稍大一些':1188 '稍小一些':1261 '究竟会偏大一些还是偏小一些呢':1105 '究竟应该变成序列':3921 '究竟是什么':3571 '竖着或者斜着走一格':42 '竖着或者斜着走任意多格':62 '第':1286,1291,1296,2344,3551,3661,3820,3830,3843,3846 '第一个':4299,4301 '第一个问题是':1897 '第一列上的所有位置':85 '第一行上的所有位置':84 '第三行则是二者之间的误差':1143 '第二行是':1134 '等于':1204,1209,1235,1240,1264,1269,1274,3275,3490,3519,3585 '等到谁没有石子可取了':158 '等等':2119,4303 '答案与我们放的是什么棋子有关':17 '答案就非常简单了':32 '答案是':2291 '简单算算你会发现':959 '类似地':1251,3692 '结合上面两点':2071 '结合起来可以告诉我们':805 '结尾':1920,1927 '结果会比小一号的':1880 '给出了一个分析方法':82 '给出的答案异常简单':223 '给定皇后在棋盘上的初始位置':79 '编故事有一个非常重要的原则':2984 '考察每个正整数究竟出现在了':4308 '而':494,971,2557,2674,3434 '而且':2311 '而且也没有重复的情况':363 '而两个游戏的目标也是相同的':189 '而并不是':1017 '而我们刚才证明的实际上就是':2698 '而我们要证明':3387 '而每个链条打头的数对':2735 '而真正的':1339 '而第':2403 '而这些数的总和的取值范围':2086 '联想到':2775 '能够构造出很多的恒等式':4185 '至此':808,2561,3485 '若':436,451,4025,4047,4061 '若数对':4010 '若正无理数':523 '荷兰数学家':139 '虽然':1740 '行':3025,4295 '行可以看作是由':3085 '行是以序列':3035 '行的头两个数是':3045 '表示':2436 '表示不超过':247 '表示把':4040 '表示第':1863 '表达':1738,1765,1804,2107,2146,3637 '表达与':3578 '表达中各个':3283 '表达中所有':3620 '表达吗':3209 '表达呢':1810 '表达就是':1844,3616 '表达总是存在的呢':1797 '表达是':3225 '表达有非常直接的联系':3582 '表达本身有关的一些证明':4164 '表达的':2122 '表达的关系则可以参见':4150 '表达的最小项为':3858,3865,3872 '表达的最小项依次升级为':3736 '表达的最小项的下标是一个偶数':3959,4051,4065 '表达的最小项的下标是一个奇数':4029 '表达的最小项都是':3729 '表达的过程中':1886 '表达都是唯一的':1894,2118 '表达里':3344 '表达里的所有':3215,4044 '表达里直接添加一个':3644 '表达里面的水就更深了':4316 '被划掉的位置又是先走的人就会获胜的位置':101 '要么不选它':1999 '要么从两堆石子中取走相同数量的石子':157 '要么会得到':1964 '要么选那个':2007 '要么都不选':2008 '见序列':3927 '规定每次要么从其中一堆石子中取走任意多个石子':156 '规律已经非常明显了':3721 '解得':1582 '解法和之前的几乎如出一辙':2595 '计算可得':2334 '认为':164 '让':473 '让广义':1352 '让我们代入':996 '让我们先来考虑两个问题':1896 '让我们再多往后写几项':841 '让我们把满足递推式':1326 '让我们来玩一个游戏':6 '让我想一想啊':2123 '记住了':3002 '讲完这个题目的解法后':2582 '证明了':280 '证明方法很简单':2913 '该不会当':982 '该轮到它返场了':3211 '请网友们及时提出':4215 '谁先将棋子移动到棋盘的最左下角':12 '谁先将游戏状态变为':190 '谁就获得胜利':193 '谁就获胜':13 '谁就输了':159 '足够多项之后':1705 '车三种情况':25 '车每次只能向左或者向下走任意多格':30 '车每次可以横着或竖着走任意多格':27 '轮流移动棋子':9 '还可以得到一系列类似的游戏':4239 '还真挺靠谱':278 '还真是':961 '还记得':3207 '还记得吗':2914 '这':2077 '这一切都是为什么呢':1021 '这一切都是因为':1022 '这一点也是很容易看出来的':741 '这一行所对应的广义':2964 '这一行的第':3669 '这三个性质保证了':2229 '这三位作者的名字之前都有提过':4133 '这不会改变问题的实质':1789 '这两个方程':1578 '这两个游戏完全等价':195 '这两列都是递增的':3829 '这个':71 '这个一次函数的函数值永远在':3480 '这个充满无理数的通项公式生成的并不是':1032 '这个差值在':468 '这个数':400 '这个数与':1929 '这个数列具有分形的特征':4306 '这个数列本身又有很多可圈可点之处':4296 '这个数究竟等于多少呢':1928 '这个游戏对于兵来说是没有意义的':18 '这个游戏虽然是他发明的':135 '这个问题的答案就又构成了一个数列':4270 '这么两项':2688 '这也是不允许的':1782 '这也顺便把我们之前挖的坑填上了':818 '这些位置大致形成了两条直线':123 '这些恐怕再花':4228 '这其实完全是由序列':830 '这几项都特别熟悉':890 '这叫作':2890 '这对于所有':715 '这就回到了我们刚才观察到的现象':1278 '这就是':1615 '这就是由性质':481 '这就更显然了':785 '这就解释了':1093,1177 '这就证明了序列':766 '这就说明':3081,3479 '这就说明了':2115 '这就说明和':456 '这已经是一个':1837 '这很容易看出来':1798 '这是':3808,3880 '这是因为':825,1852,1933 '这是因为序列':284,332 '这是我最近见到的一个题目':2581 '这是由比利时数学家':1723 '这有一个非常具有启发性的推导方法':1325 '这本质上就是证明':2421 '这样':38,58 '这样的话':308 '这次':69 '这玩意儿百分之百地会被用上':3000 '这篇文章也挂着好几把契科夫之枪':3008 '这篇文章就该结束了':2978 '这给上述问题的解决开辟了一条新路':3946 '这肯定和剧情有联系':3003 '这背后会涉及到非常有趣的':4258 '这能立即推出前面的条件':364 '这说明':606,707,1876,2042 '这都比刚才选出的最大和多了一个':1974 '这里':3543,4036 '这里我们规定':4291 '这里面的方案数为':2029,2038 '这里面还有很深的水':131 '进一步指出':331 '那么':115,326,381,578,1382,2284,3245,3305,3589,3668 '那么从':4265 '那么你就是必胜的':3912 '那么你应该选择先走还是后走呢':68 '那么你愿意先走还是后走':15 '那么先走的人就会获胜':92 '那么剩下的就只能再在前':2034 '那么序列':2357,2377 '那么我们一定能在找到某个':2932 '那么我们就有':1868 '那么我们就相当于找到了':1579 '那么数列':1456 '那么皇后移动时坐标变化的规则':185 '那么直接把':407 '那么第':3654 '那么这两个数的整数部分显然也就正好相差':764 '那在第二章或者第三章里面它一定会开火':2992 '那就完全得看前':2025 '那时候你或许就已经发现了什么':840 '那该怎么办呢':4070 '都不是整数':577 '都不是整数时':611 '都成立':717 '都是':1771 '都是一个广义':1557 '都是固定的':828 '都是无理数':667 '都是递增的':3850 '都有':2413,2565,2588,3271 '都能一步变为':491 '都能一步直接走到棋盘的最左下角':87 '里':52,57 '里减去':1819,1832 '里去':450 '里去了':416,428,479 '里的两数之差更小':462 '里的所有数既无重复又无遗漏地包含了所有的正整数':560 '里的每一个':3366,3370 '里的每一项具体是多少都搞不出来':3941 '里面就涉及到了它们之间的各种更深层的联系':4323 '里面既无重复又无遗漏地包含了每一个正整数':2777 '里面正好既无重复又无遗漏地包含了每一个正整数':338,2217 '问题就没那么简单了':70 '随着':1675 '需要特别指出的是':1766 '非常接近':1192 '靠拢':1120,1690 '面对':2020 '项':2262,2272,2282,2318,2325,2333,2391,2759,2960 '项以外的数对':2744 '项将会分别接在第':2708 '项就是':2361,3987 '项打头的':3040 '项的后面':2712 '项的较小数则是':2405 '项的较小数就是':2381 '项真的就是':2346 '项竖着写成一列':2770 '项里的两数之差就是':2368 '题目是':2584 '首先':83 '首先注意到':572,1351	en	admin
279	看快手如何干掉 Fastjson	{"ver":2,"uid":1,"hash":"SHA1:52a858d554b4c29ac68ac07cae1a3e24b86049a1"}	https://toutiao.io/k/25f53t3	2020-08-15 03:10:08	看快手如何干掉 Fastjson	3a6e1fb61d6e8ba589ff74b4644d07bfadf35404	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.885363	0			'fastjson':2,4 '看快手如何干掉':1,3	zh	
347	Pulsar 与 Kafka 全方位对比（上）：功能、性能、用例	{"ver":2,"uid":1,"hash":"SHA1:fda1f0fb86c4b1c1ac1ead1635f9d80297ab8981"}	https://toutiao.io/k/v9gbk0d	2020-08-17 06:10:08	Pulsar 与 Kafka 全方位对比（上）：功能、性能、用例	dd3957321818d30752298742a4a4ab0b8f248cf0	\N	f	2020-08-17 06:10:00	2020-08-18 00:10:10.66845	0			'kafka':3,11 'pulsar':1,9 '上':5,13 '与':2,10 '全方位对比':4,12 '功能':6,14 '性能':7,15 '用例':8,16	zh	
357	Apple to kill Epic’s accounts on Friday the 28th	{"ver":2,"uid":1,"hash":"SHA1:70d4c05af55a7d808a8a0320a3cf83cdc387a837"}	https://twitter.com/EpicNewsroom/status/1295430127455596544	2020-08-18 00:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24190556"> https://news.ycombinator.com/item?id=24190556 </a>	da4a718557886a1d20614bb47374b7224d2f8b48	\N	f	2020-08-18 00:10:00	2020-08-21 06:10:09.894543	0			'/item?id=24190556':14 '28th':10 'account':6 'appl':1 'comment':11 'epic':4 'friday':8 'kill':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24190556':12	zh	MBCook
281	你不知道的 TypeScript 泛型	{"ver":2,"uid":1,"hash":"SHA1:0f7240004ad8de95e52f22aea6651ae1ee79fb1c"}	https://toutiao.io/k/mm7o2pb	2020-08-15 03:10:08	你不知道的 TypeScript 泛型	c431786dd6d190c973f9b81bb9396678b56dc696	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.895228	0			'typescript':2,5 '你不知道的':1,4 '泛型':3,6	zh	
280	揭开链表的真面目	{"ver":2,"uid":1,"hash":"SHA1:f43a78db62001ad7b6f3331df8bdc47d1b631db4"}	https://toutiao.io/k/rjlq8g3	2020-08-15 03:10:08	揭开链表的真面目	e06e8a5f5f03bbf0079aa1bbd6a5d4c91733917b	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.903919	0			'揭开链表的真面目':1,2	zh	
731	数据同步一致性保障：OPPO 自研 JinS 数据同步框架实践	{"ver":2,"uid":1,"hash":"SHA1:9670af7e8a060f9303aa5aeb755484e52dabb2f9"}	https://toutiao.io/k/58qwcgl	2020-08-29 02:10:09	数据同步一致性保障：OPPO 自研 JinS 数据同步框架实践	8759a259b9f710bca879d4f991fbe1572d272e7b	\N	f	2020-08-29 02:10:00	2020-08-30 00:10:10.203329	0			'jins':4,9 'oppo':2,7 '数据同步一致性保障':1,6 '数据同步框架实践':5,10 '自研':3,8	zh	
735	Java 二进制和位运算，这一万字准能喂饱你	{"ver":2,"uid":1,"hash":"SHA1:b41c7274993b09ca74d8660dc6d60eb8c24f024c"}	https://toutiao.io/k/4kxdwt0	2020-08-29 04:10:18	Java 二进制和位运算，这一万字准能喂饱你	edbf3889c13057f2f86310c137efeead7f05a65c	\N	f	2020-08-29 04:10:00	2020-08-30 00:10:10.210211	0			'java':1,4 '二进制和位运算':2,5 '这一万字准能喂饱你':3,6	zh	
883	携程旅行 App iOS 工程编译优化实践	{"ver":2,"uid":1,"hash":"SHA1:1eac6fc7847f70320a15572f332d9a07ae50c320"}	https://toutiao.io/k/vcjyn2p	2020-09-03 01:10:12	携程旅行 App iOS 工程编译优化实践	93603d7d51c6558f5f77d739d1a572a7149fdcb9	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.952253	0			'app':2,6 'ios':3,7 '工程编译优化实践':4,8 '携程旅行':1,5	zh	
706	RTC 技术科普：什么是视频编码	{"ver":2,"uid":1,"hash":"SHA1:6e92edb679479751cea4f8d35cec3855e83945ca"}	https://toutiao.io/k/i3om210	2020-08-28 01:10:22	RTC 技术科普：什么是视频编码	5eabdfd33f937ca1b07ca8e6654c52875e78570d	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.49244	0			'rtc':1,4 '什么是视频编码':3,6 '技术科普':2,5	zh	
705	作为程序员你不知道 Redis 持久化，如何通过面试？	{"ver":2,"uid":1,"hash":"SHA1:48c79e154a59f087c1068b4b38c0d59bd0ea0aef"}	https://toutiao.io/k/6dwivtm	2020-08-28 01:10:22	作为程序员你不知道 Redis 持久化，如何通过面试？	9647fe959bac0e2e24e5fc40ab109d9ed664a0cc	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.503142	0			'redis':2,6 '作为程序员你不知道':1,5 '如何通过面试':4,8 '持久化':3,7	zh	
881	快醒醒，C# 9 中又来了一堆关键词 init, record, with	{"ver":2,"uid":1,"hash":"SHA1:10ed8984ab2101db7ffd8f9e6ab5c69769ec9fc5"}	https://toutiao.io/k/gqq6vrg	2020-09-03 03:10:09	快醒醒，C# 9 中又来了一堆关键词 init, record, with	ca31b8f9769ac68498f4113e237360fc48277598	\N	f	2020-09-03 01:10:00	2020-09-03 23:10:09.948593	0			'9':3,10 'c':2,9 'init':5,12 'record':6,13 'with':7,14 '中又来了一堆关键词':4,11 '快醒醒':1,8	zh	
248	IMO2016 趣题：Geoff 的青蛙	{"ver":2,"uid":1,"hash":"SHA1:4d1679e110c4db8dc6acc174126350ee65511996"}	http://www.matrix67.com/blog/archives/6851	2016-08-24 01:22:05	<p>2016 年 IMO 的第 6 题（也就是第二天比赛的第 3 题）非常有趣，这恐怕算得上是近十年来 IMO 的所有题目中最有趣的题目之一。平面上有 n ≥ 2 条线段，每两条线段都有一个交点，并且任意三条线段都不交于同一点。 Geoff 打算在每条线段的其中一个端点处放置一只青蛙，并让每只青蛙都朝向它所在线段的另一个端点。然后， Geoff 将会拍 n &#8211; 1 次手。每次拍手时，每只青蛙都立即向前跳到它所在线段的下一个交点处（青蛙们在跳跃过程中始终不会改变方向）。 Geoff 希望巧妙地安排初始时放置青蛙的方法，使得在整个过程中，任意两只青蛙都不会同时到达某个相同的交点。这个题目有两个小问。</p>\n<ol>\n<li>证明：当 n 为奇数时， Geoff 一定有办法实现他的要求。</li>\n<li>证明：当 n 为偶数时， Geoff 永远无法实现他的要求。</li>\n</ol>\n<p><span id="more-6851"></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>下图是 n = 5 时的其中一种可能的线段布局，以及其中一种满足要求的青蛙放法。你可以试一试， n = 5 时的其他放法就不见得满足要求了，而 n 为偶数时的任何一种放法都是不满足要求的。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201608241.gif" alt="" width="540" /></p>\n<p>注意到，在上面这种满足要求的青蛙放法中，任何两只青蛙都不在“相邻”的端点上。这不是巧合。我们接下来说明，把两只青蛙放在“相邻”的端点上，则这两只青蛙必然会相撞。这里，我们可以为“相邻”下一个更加明确的定义。将所有线段充分延长，并与一个充分大的圆相交。把每条线段的端点都改到这些交点处，于是所有线段的所有端点就变为了一个圆周上的 2n 个点。如果两个端点之间的圆弧上没有其他端点，我们就说这两个端点是相邻的。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201608242.gif" alt="" width="480" /></p>\n<p>现在，假设我们把两只青蛙放在了两个相邻的端点上，如上图所示。蓝色的线表示的就是这两只青蛙所走的路，其中实线部分表示这两条路相交前的部分。由于两个端点是相邻的，因此这两条蓝线之间不再夹着其他线段。所有其他线段都是横穿过这两条蓝线的，它们与两条蓝线的交点要么都在虚线部分，要么都在实线部分。这会使得两条蓝色实线上产生出相同数目的交点。于是，两只青蛙将会同时到达两条蓝线的交点处。</p>\n<p>这就说明，把两只青蛙放在相邻的端点上是必死的。在一个满足要求的放法中，任何两只青蛙中间都要间隔至少 1 个端点。然而，我们一共有 n 只青蛙和 2n 个端点，因而这些青蛙必须得恰好每隔 1 个端点放一只。考虑到这一点，我们立即就把第 2 小问解决了。当 n 为偶数时，对于任意一条线段，都有 n &#8211; 1 条线段穿过它，这意味着这条线段的两个端点之间恰好隔着 n &#8211; 1 个端点（不管是算哪边的弧），这是一个奇数。所以，如果每隔 1 个端点放一只青蛙，那么这条线段的其中一端放了青蛙，另外一端也会有只青蛙。这是不符合要求的。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201608243.gif" alt="" width="480" /></p>\n<p>而当 n 为奇数时，每隔 1 个端点放一只青蛙，就会正好让每条线段上都有一只青蛙。容易看出，此时任意两只青蛙之间都会隔着奇数个端点。接下来，我们证明，只要两只青蛙之间隔着奇数个端点，那么这两只青蛙一定不会相撞。如上图所示，我们还是用蓝色的线表示这两只青蛙所走的路。其他的线段分成这样三类：</p>\n<ol>\n<li>从虚线处横穿过这两条蓝线</li>\n<li>从实线处横穿过这两条蓝线</li>\n<li>夹在这两条蓝线之间</li>\n</ol>\n<p>根据刚才的讨论，第一种类型的线段不会在两条蓝色实线上产生交点，第二种类型的线段会在两条蓝色实线上产生相同数目的交点。至于第三种类型的线段，每一条要么与这边的蓝色实线相交，要么与那边的蓝色实线相交。由于两只青蛙之间隔着奇数个端点，因此这种类型的线段有奇数条，在这边的蓝色实线产生的交点数与在那边的蓝色实线产生的交点数就必然是一奇一偶。综合这三种类型的线段，我们最终得出，这些线段在两条蓝色实线上产生的交点数目是不同的，因为数目的奇偶性都不一样。所以，两只青蛙不会相撞。</p>\n<p>回想我们刚才所说的，当 n 为奇数时，间隔着放青蛙会使得每条线段上都各有一只青蛙，并且任意两只青蛙之间都会隔着奇数个端点。这就将成为一种满足要求的放法。于是，我们就完整地证明了第 1 小问的结论，整个问题也就解决了。</p>\n<p>这道题背后有一个有趣的故事。现任 IMO 主席 Geoff Smith 赛前曾经说，他将会以一种特殊的形式与参赛选手互动。最终，谜底揭晓：他成为了 IMO 第 6 题的主人公。</p>\n	51d250e4ede2254315c73f68d7d266f2c5824a88	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.8447	44	http://www.matrix67.com/blog/archives/6851#comments		'1':31,105,114,126,130,136,145,184 '2':20,118 '2016':5 '2n':84,111 '3':12 '5':55,60 '6':9,200 'geoff':3,24,28,36,45,51,191 'imo':7,16,189,198 'imo2016':1 'n':19,30,43,49,54,59,63,109,121,125,129,142,177 'smith':192 '一定有办法实现他的要求':46 '下一个更加明确的定义':79 '下图是':53 '不管是算哪边的弧':132 '两只青蛙不会相撞':174 '两只青蛙将会同时到达两条蓝线的交点处':100 '个点':85 '个端点':106,112,131 '个端点放一只':115 '个端点放一只青蛙':137,146 '为偶数时':50,122 '为偶数时的任何一种放法都是不满足要求的':64 '为奇数时':44,143,178 '主席':190 '也就是第二天比赛的第':11 '于是':99,182 '于是所有线段的所有端点就变为了一个圆周上的':83 '从实线处横穿过这两条蓝线':158 '从虚线处横穿过这两条蓝线':157 '他将会以一种特殊的形式与参赛选手互动':194 '他成为了':197 '以及其中一种满足要求的青蛙放法':57 '任何两只青蛙中间都要间隔至少':104 '任何两只青蛙都不在':67 '任意两只青蛙都不会同时到达某个相同的交点':39 '你可以试一试':58 '使得在整个过程中':38 '假设我们把两只青蛙放在了两个相邻的端点上':89 '其中实线部分表示这两条路相交前的部分':92 '其他的线段分成这样三类':156 '则这两只青蛙必然会相撞':75 '另外一端也会有只青蛙':139 '只要两只青蛙之间隔着奇数个端点':152 '只青蛙和':110 '回想我们刚才所说的':175 '因为数目的奇偶性都不一样':172 '因此这两条蓝线之间不再夹着其他线段':94 '因此这种类型的线段有奇数条':167 '因而这些青蛙必须得恰好每隔':113 '在一个满足要求的放法中':103 '在上面这种满足要求的青蛙放法中':66 '在这边的蓝色实线产生的交点数与在那边的蓝色实线产生的交点数就必然是一奇一偶':168 '夹在这两条蓝线之间':159 '如上图所示':90,154 '如果两个端点之间的圆弧上没有其他端点':86 '如果每隔':135 '它们与两条蓝线的交点要么都在虚线部分':96 '容易看出':148 '对于任意一条线段':123 '将会拍':29 '将所有线段充分延长':80 '小问的结论':185 '小问解决了':119 '就会正好让每条线段上都有一只青蛙':147 '希望巧妙地安排初始时放置青蛙的方法':37 '平面上有':18 '年':6 '并与一个充分大的圆相交':81 '并且任意三条线段都不交于同一点':23 '并且任意两只青蛙之间都会隔着奇数个端点':180 '并让每只青蛙都朝向它所在线段的另一个端点':26 '当':42,48,120,176 '我们一共有':108 '我们可以为':77 '我们就完整地证明了第':183 '我们就说这两个端点是相邻的':87 '我们接下来说明':71 '我们最终得出':170 '我们立即就把第':117 '我们证明':151 '我们还是用蓝色的线表示这两只青蛙所走的路':155 '所以':134,173 '所有其他线段都是横穿过这两条蓝线的':95 '打算在每条线段的其中一个端点处放置一只青蛙':25 '把两只青蛙放在':72 '把两只青蛙放在相邻的端点上是必死的':102 '把每条线段的端点都改到这些交点处':82 '接下来':150 '整个问题也就解决了':186 '时的其中一种可能的线段布局':56 '时的其他放法就不见得满足要求了':61 '最终':195 '条线段':21 '条线段穿过它':127 '根据刚才的讨论':160 '次手':32 '此时任意两只青蛙之间都会隔着奇数个端点':149 '每一条要么与这边的蓝色实线相交':164 '每两条线段都有一个交点':22 '每只青蛙都立即向前跳到它所在线段的下一个交点处':34 '每次拍手时':33 '每隔':144 '永远无法实现他的要求':52 '注意到':65 '然后':27 '然而':107 '现任':188 '现在':88 '由于两个端点是相邻的':93 '由于两只青蛙之间隔着奇数个端点':166 '的所有题目中最有趣的题目之一':17 '的端点上':69,74 '的第':8 '的青蛙':4 '相邻':68,73,78 '第':199 '第一种类型的线段不会在两条蓝色实线上产生交点':161 '第二种类型的线段会在两条蓝色实线上产生相同数目的交点':162 '综合这三种类型的线段':169 '考虑到这一点':116 '而':62 '而当':141 '至于第三种类型的线段':163 '蓝色的线表示的就是这两只青蛙所走的路':91 '要么与那边的蓝色实线相交':165 '要么都在实线部分':97 '证明':41,47 '谜底揭晓':196 '赛前曾经说':193 '趣题':2 '这不是巧合':70 '这个题目有两个小问':40 '这些线段在两条蓝色实线上产生的交点数目是不同的':171 '这会使得两条蓝色实线上产生出相同数目的交点':98 '这就将成为一种满足要求的放法':181 '这就说明':101 '这恐怕算得上是近十年来':15 '这意味着这条线段的两个端点之间恰好隔着':128 '这是一个奇数':133 '这是不符合要求的':140 '这道题背后有一个有趣的故事':187 '这里':76 '那么这两只青蛙一定不会相撞':153 '那么这条线段的其中一端放了青蛙':138 '都有':124 '间隔着放青蛙会使得每条线段上都各有一只青蛙':179 '青蛙们在跳跃过程中始终不会改变方向':35 '非常有趣':14 '题':10,13 '题的主人公':201	en	admin
882	[推荐] 一文带你深扒 ClassLoader 内核，揭开它的神秘面纱	{"ver":2,"uid":1,"hash":"SHA1:b008a4b49be26e9c1b98b8a4c953781fb0acfef3"}	https://toutiao.io/k/r7q7tum	2020-09-09 04:10:11	[推荐] 一文带你深扒 ClassLoader 内核，揭开它的神秘面纱	83e3a180f1097a8da66069d508d768fde85ccd9d	\N	f	2020-09-03 01:10:00	2020-09-10 02:10:10.362123	0			'classloader':3,8 '一文带你深扒':2,7 '内核':4,9 '推荐':1,6 '揭开它的神秘面纱':5,10	zh	
247	趣题：为什么偏偏是 6 格？	{"ver":2,"uid":1,"hash":"SHA1:4a6e692d1c3ab5a7c03eacc559d837a904d8e3e2"}	http://www.matrix67.com/blog/archives/6862	2016-09-02 14:00:51	<p>无穷多个相同大小的正方形格子排成一排，向左右两边无限地延伸。每个格子里都有 0 个、 1 个或多个原子。每一次，你可以对它们做下面两种操作之一：</p>\n<ul>\n<li>选择某个格子，保证该格子内至少含有 1 个原子。将该格子内的其中 1 个原子分裂为 2 个，从而使得该格子内的原子数量减 1 ，两边的邻格里的原子数量分别加 1。</li>\n<li>选择某个格子，保证两边的邻格里均至少含有 1 个原子。从两边的邻格里各取 1 个原子聚合起来，从而使得两边的邻格里的原子数量分别减 1 ，该格子内的原子数量加 1。</li>\n</ul>\n<p>初始时，某个格子里有 1 个原子。现在，你需要在若干次操作之后，让它右移 6 格。也就是说，你需要用若干次操作把下面的第一个图变成第二个图（其中，数字 1 表示该格内的原子数为 1 ）。继续阅读下去之前，你不妨自己先试一试。你可以在纸上画好格子，用硬币、大米、巧克力豆等物体代替原子。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609031.png" alt="" width="572" /></p>\n<p><span id="more-6862"></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>其中一种方法如下。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609032.gif" alt="" width="580" /></p>\n<p>你或许会觉得这里面隐藏着一些规律。我们似乎可以对上面的方法进行扩展，把初始时的那个原子移到它右边的任意一格里，比方说把初始时的那个原子移到它右边第 2 格，或者第 3 格，或者第 7 格的位置。然而，简单地试试，你会发现，这还真的不行。上述方法只适用于右移 6 格的情况。事实上，我们可以证明，如果某个格子里的 1 个原子最终可以变为另外一个格子里的 1 个原子，这两个格子的位置一定相差 6 或者 6 的整倍数。</p>\n<p>让我们像下面这样，为每一个格子都赋一个值，其中 ω = (-1)<sup>1/3</sup> ，即 -1 在复数范围内的一个立方根。注意到 ω 满足 ω<sup>3</sup> + 1 = 0 ，即 (ω + 1)(ω<sup>2</sup> &#8211; ω + 1) = 0 ；而 ω + 1 ≠ 0 ，于是只能是 ω<sup>2</sup> &#8211; ω + 1 = 0 。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201609033.png" alt="" width="580" /></p>\n<p>对于整个棋盘上的任意一种原子排布，我们都可以把每个放有原子的格子里的值加在一起，一个格子里有几个原子，它对应的值就加几次。我们把如此得到的总和叫做此时棋盘上原子排布的特征值。例如，如果 ω<sup>-2</sup> 上有 2 个原子， ω<sup>2</sup> 上有 1 个原子， ω<sup>3</sup> 上有 4 个原子，其他格子都是空的，那么此时棋盘上原子排布的特征值就是 2 · ω<sup>-2</sup> + 1 · ω<sup>2</sup> + 4 · ω<sup>3</sup> 。</p>\n<p>当位于 ω<sup>n</sup> 位置上的原子分裂时，特征值会减小一个 ω<sup>n</sup> ，但会增加一个 ω<sup>n-1</sup> 和一个 ω<sup>n+1</sup> ，所以特征值的变化量为 &#8211; ω<sup>n</sup> + ω<sup>n-1</sup> + ω<sup>n+1</sup> = ω<sup>n-1</sup> · (- ω + 1 + ω<sup>2</sup>) 。然而，之前我们说过， ω 的取值满足 ω<sup>2</sup> &#8211; ω + 1 = 0 。因此，任何一次原子分裂操作都不会改变原子排布的特征值。</p>\n<p>类似地，原子聚合导致的特征值的变化量为 &#8211; ω<sup>n-1</sup> &#8211; ω<sup>n+1</sup> + ω<sup>n</sup> = ω<sup>n-1</sup> · (- 1 &#8211; ω<sup>2</sup> + ω) = 0 。因此，任何一次原子聚合操作也都不会改变原子排布的特征值。</p>\n<p>如果原来整个棋盘上只有 ω<sup>n</sup> 位置上有 1 个原子，后来变得整个棋盘上只有 ω<sup>m</sup> 位置上有 1 个原子，这就意味着 ω<sup>n</sup> = ω<sup>m</sup> ，即 ω<sup>m</sup> / ω<sup>n</sup> = 1 ，即 ω<sup>m-n</sup> = 1 。考虑到 ω = (-1)<sup>1/3</sup> ，因此为了让 ω<sup>m-n</sup> = 1 ，只有可能 m &#8211; n 是 6 的整倍数。这就解答了前面提出的问题。</p>\n<p>我最初是在这里看见的这个问题： <a href="http://blog.sigfpe.com/2007/09/arboreal-isomorphisms-from-nuclear.html">http://blog.sigfpe.com/2007/09/arboreal-isomorphisms-from-nuclear.html</a> 。如果你对这个问题感兴趣的话，你一定会喜欢下面这个类似的但是更经典、更精彩的问题： <a href="http://www.matrix67.com/blog/archives/4595">http://www.matrix67.com/blog/archives/4595</a> 。</p>\n	6b1cd74f7f0ba5c24b48d5c3c8a9393ffeb628d6	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.842675	19	http://www.matrix67.com/blog/archives/6862#comments		'+1':162,168,189 '-1':96,99,159,166,170,187,192,223 '-2':131,147 '/2007/09/arboreal-isomorphisms-from-nuclear.html':240 '/blog/archives/4595':246 '0':8,106,113,117,122,181,196 '1':10,16,19,24,26,29,32,35,37,40,51,53,83,85,105,109,112,116,121,137,148,172,180,193,202,207,215,220,229 '1/3':97,224 '2':21,65,133,145 '3':68 '4':141,150 '6':3,45,78,88,90,234 '7':71 'blog.sigfpe.com':239 'blog.sigfpe.com/2007/09/arboreal-isomorphisms-from-nuclear.html':238 'm':231 'n':219,228,232 'www.matrix67.com':245 'www.matrix67.com/blog/archives/4595':244 'ω':95,102,108,111,115,120,130,146,171,176,179,195,222 'ω2':110,119,135,149,173,178,194 'ω3':104,139,151 'ωm':205,211,213,218,227 'ωm-n':217,226 'ωn':153,156,158,161,164,165,167,169,186,188,190,191,200,210,214 '一个格子里有几个原子':125 '上有':132,136,140 '上述方法只适用于右移':77 '两边的邻格里的原子数量分别加':25 '个':9,22 '个原子':17,30,41,86,134,138,142,203,208 '个原子分裂为':20 '个原子最终可以变为另外一个格子里的':84 '个原子聚合起来':33 '个或多个原子':11 '为什么偏偏是':2 '为每一个格子都赋一个值':93 '之前我们说过':175 '也就是说':47 '事实上':80 '于是只能是':118 '从两边的邻格里各取':31 '从而使得两边的邻格里的原子数量分别减':34 '从而使得该格子内的原子数量减':23 '任何一次原子分裂操作都不会改变原子排布的特征值':183 '任何一次原子聚合操作也都不会改变原子排布的特征值':198 '但会增加一个':157 '位置上有':201,206 '位置上的原子分裂时':154 '你一定会喜欢下面这个类似的但是更经典':242 '你不妨自己先试一试':55 '你会发现':75 '你可以在纸上画好格子':56 '你可以对它们做下面两种操作之一':13 '你或许会觉得这里面隐藏着一些规律':61 '你需要在若干次操作之后':43 '你需要用若干次操作把下面的第一个图变成第二个图':48 '例如':128 '保证两边的邻格里均至少含有':28 '保证该格子内至少含有':15 '其中':49,94 '其中一种方法如下':60 '其他格子都是空的':143 '初始时':38 '即':98,107,212,216 '原子聚合导致的特征值的变化量为':185 '只有可能':230 '后来变得整个棋盘上只有':204 '向左右两边无限地延伸':6 '和一个':160 '因此':182,197 '因此为了让':225 '在复数范围内的一个立方根':100 '大米':58 '如果':129 '如果你对这个问题感兴趣的话':241 '如果原来整个棋盘上只有':199 '如果某个格子里的':82 '它对应的值就加几次':126 '对于整个棋盘上的任意一种原子排布':123 '将该格子内的其中':18 '巧克力豆等物体代替原子':59 '当位于':152 '我们似乎可以对上面的方法进行扩展':62 '我们可以证明':81 '我们把如此得到的总和叫做此时棋盘上原子排布的特征值':127 '我们都可以把每个放有原子的格子里的值加在一起':124 '我最初是在这里看见的这个问题':237 '或者':89 '或者第':67,70 '所以特征值的变化量为':163 '把初始时的那个原子移到它右边的任意一格里':63 '数字':50 '无穷多个相同大小的正方形格子排成一排':5 '是':233 '更精彩的问题':243 '某个格子里有':39 '格':4,46,66,69 '格的位置':72 '格的情况':79 '每一次':12 '每个格子里都有':7 '比方说把初始时的那个原子移到它右边第':64 '注意到':101 '满足':103 '然而':73,174 '特征值会减小一个':155 '现在':42 '用硬币':57 '的取值满足':177 '的整倍数':91,235 '简单地试试':74 '类似地':184 '继续阅读下去之前':54 '考虑到':221 '而':114 '表示该格内的原子数为':52 '让它右移':44 '让我们像下面这样':92 '该格子内的原子数量加':36 '趣题':1 '这两个格子的位置一定相差':87 '这就意味着':209 '这就解答了前面提出的问题':236 '这还真的不行':76 '选择某个格子':14,27 '那么此时棋盘上原子排布的特征值就是':144	en	admin
749	Netflix is now doing per-shot encoding for UHD content	{"ver":2,"uid":1,"hash":"SHA1:4ed672c4cd48e8cf33e6e8ec0d29c20a2258a382"}	https://netflixtechblog.com/optimized-shot-based-encodes-for-4k-now-streaming-47b516b10bbb	2020-08-29 09:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24310104"> https://news.ycombinator.com/item?id=24310104 </a>	1fdbed2aabb1ab19bc65ed95502fe69202a5b4cd	\N	f	2020-08-29 09:10:00	2020-09-01 08:10:09.927035	0			'/item?id=24310104':15 'comment':12 'content':11 'encod':8 'netflix':1 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24310104':13 'per':6 'per-shot':5 'shot':7 'uhd':10	zh	mmcclure
840	Lunar – macOS utility to set brightness and volume on external monitors	{"ver":2,"uid":1,"hash":"SHA1:c7e776822341a4be25f68ffe53e55fd5b44a8c9b"}	https://lunar.fyi/	2020-09-01 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24344045"> https://news.ycombinator.com/item?id=24344045 </a>	f647ee5a35069f074604b18cb706f68fdf386af0	\N	f	2020-09-01 23:10:00	2020-09-04 19:10:08.991626	0			'/item?id=24344045':15 'bright':6 'comment':12 'extern':10 'lunar':1 'maco':2 'monitor':11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24344045':13 'set':5 'util':3 'volum':8	zh	car
11	How to dump the GOSSAFUNC graph for a method	{"ver":2,"uid":1,"hash":"SHA1:700c46309e12f78471c3af4c71677ba36c3f86a7"}	https://dave.cheney.net/2020/06/19/how-to-dump-the-gossafunc-graph-for-a-method	2020-06-19 03:39:34	\n<p>The Go compiler&#8217;s SSA backend contains a facility to produce HTML debugging output of the compilation phases. This post covers how to print the SSA output for function <em>and</em> methods.</p>\n\n\n\n<p>Let&#8217;s start with a sample program which contains a function, a value method, and a pointer method:</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n    "fmt"\n)\n\ntype Numbers struct {\n    vals &#091;]int\n}\n\nfunc (n *Numbers) Add(v int) {\n    n.vals = append(n.vals, v)\n}\n\nfunc (n Numbers) Average() float64 {\n    sum := 0.0\n    for _, num := range n.vals {\n        sum += float64(num)\n    }\n    return sum / float64(len(n.vals))\n}\n\n\nfunc main() {\n    var numbers Numbers\n    numbers.Add(200)\n    numbers.Add(43)\n    numbers.Add(-6)\n    fmt.Println(numbers.Average())\n}</code></pre>\n\n\n\n<p>Control of the SSA debugging output is via the <code>GOSSAFUNC</code> environment variable. This variable takes the name of the function to dump. This is <em>not</em> the functions fully qualified name. For <code>func main</code> above the name of the function is <code>main</code> <em>not</em> <code>main.main</code>.</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>env GOSSAFUNC=main go build</strong>\nruntime\ndumped SSA to ../../go/src/runtime/ssa.html\nt\ndumped SSA to ./ssa.html</pre>\n\n\n\n<p>In this example <code>GOSSAFUNC=main</code> matched both <code>main.main</code> and a function called <code>runtime.main</code>.<span id='easy-footnote-1-4188' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/06/19/how-to-dump-the-gossafunc-graph-for-a-method#easy-footnote-bottom-1-4188' title='If you didn&amp;#8217;t build Go from source then the path to the &lt;code&gt;runtime&lt;/code&gt; package may be read only and you might receive an error. Please don&amp;#8217;t use the &lt;code&gt;sudo&lt;/code&gt; hammer to fix this.'><sup>1</sup></a></span> This is a little unfortunate, but in practice probably not a big deal as, if you&#8217;re performance tuning your code, it won&#8217;t be in a giant spaghetti blob in <code>func main</code>. </p>\n\n\n\n<p>What is more likely is your code will be in a <em>method</em>, so you&#8217;ve probably landed on this post looking for the correct incantation to dump the SSA output for a method.</p>\n\n\n\n<p>To print the SSA debug for the pointer method <code>func (n *Numbers) Add</code>, the equivalent function name is<code>(*Numbers).Add</code>:<span id='easy-footnote-2-4188' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2020/06/19/how-to-dump-the-gossafunc-graph-for-a-method#easy-footnote-bottom-2-4188' title='Please pay attention to the shell quoting.'><sup>2</sup></a></span></p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>env "GOSSAFUNC=(*Numbers).Add" go build</strong>\nt\ndumped SSA to ./ssa.html</pre>\n\n\n\n<p>To print the SSA debug for a value method <code>func (n Numbers) Average</code>, the equivalent function name is <code>(*Numbers).Average</code> <em>even though this is a value method</em>:</p>\n\n\n\n<pre class="wp-block-preformatted">% <strong>env "GOSSAFUNC=(*Numbers).Average" go build</strong>\nt\ndumped SSA to ./ssa.html</pre>\n	61a73581c0fac6048a3797d98abfb1e50997a67e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.209222	0			'-6':107 '/../go/src/runtime/ssa.html':162 '/ssa.html':167,279,317 '0.0':84 '1':181 '2':268 '200':103 '43':105 'a':8,17,45,50,52,56,177,184,192,208,225,246,286,304 'above':143 'add':71,260,267,272 'and':39,55,176 'append':75 'as':195 'average':81,292,299,310 'backend':15 'be':206,223 'big':193 'blob':211 'both':174 'build':157,274,312 'but':187 'called':179 'code':202,221 'compilation':26 'compiler':12 'contains':16,49 'control':110 'correct':238 'covers':30 'deal':194 'debug':252,284 'debugging':22,114 'dump':3,131,241 'dumped':159,164,276,314 'env':153,269,307 'environment':120 'equivalent':262,294 'even':300 'example':170 'facility':18 'float64':82,90,94 'fmt':62 'fmt.println':108 'for':7,37,85,140,236,245,253,285 'fully':137 'func':68,78,97,141,213,257,289 'function':38,51,129,148,178,263,295 'functions':136 'giant':209 'go':11,156,273,311 'gossafunc':5,119,154,171,270,308 'graph':6 'how':1,31 'html':21 'if':196 'import':61 'in':168,188,207,212,224 'incantation':239 'int':67,73 'is':116,133,149,183,216,219,265,297,303 'it':203 'landed':231 'len':95 'let':41 'likely':218 'little':185 'looking':235 'main':60,98,142,150,155,172,214 'main.main':152,175 'matched':173 'method':9,54,58,226,247,256,288,306 'methods':40 'more':217 'n':69,79,258,290 'n.vals':74,76,88,96 'name':126,139,145,264,296 'not':134,151,191 'num':86,91 'numbers':64,70,80,100,101,259,266,271,291,298,309 'numbers.add':102,104,106 'numbers.average':109 'of':24,111,127,146 'on':232 'output':23,36,115,244 'package':59 'performance':199 'phases':27 'pointer':57,255 'post':29,234 'practice':189 'print':33,249,281 'probably':190,230 'produce':20 'program':47 'qualified':138 'range':87 're':198 'return':92 'runtime':158 'runtime.main':180 's':13,42 'sample':46 'so':227 'spaghetti':210 'ssa':14,35,113,160,165,243,251,277,283,315 'start':43 'struct':65 'sum':83,89,93 't':163,205,275,313 'takes':124 'the':4,10,25,34,112,118,125,128,135,144,147,237,242,250,254,261,282,293 'this':28,122,132,169,182,233,302 'though':301 'to':2,19,32,130,161,166,240,248,278,280,316 'tuning':200 'type':63 'unfortunate':186 'v':72,77 'vals':66 'value':53,287,305 'var':99 'variable':121,123 've':229 'via':117 'what':215 'which':48 'will':222 'with':44 'won':204 'you':197,228 'your':201,220	en	Dave Cheney
737	KDD Cup 2020 Debiasing 比赛冠军技术方案及在美团广告的实践	{"ver":2,"uid":1,"hash":"SHA1:ac03a3820d282b209b8d4180a4d4fdddf8046239"}	https://toutiao.io/k/3ctev19	2020-08-29 04:10:18	KDD Cup 2020 Debiasing 比赛冠军技术方案及在美团广告的实践	e87a574db6414cf4870f498a6049f82bd219846b	\N	f	2020-08-29 04:10:00	2020-08-30 00:10:10.21427	0			'2020':3,8 'cup':2,7 'debiasing':4,9 'kdd':1,6 '比赛冠军技术方案及在美团广告的实践':5,10	zh	
841	[推荐] [译] 如何设计一个 JavaScript 插件系统，编程思维比死磕 API 更重要	{"ver":2,"uid":1,"hash":"SHA1:2462d037efb855a6b9ca49b1c3a54ec96b0fbf2d"}	https://toutiao.io/k/kps56d6	2020-09-05 18:10:12	[推荐] [译] 如何设计一个 JavaScript 插件系统，编程思维比死磕 API 更重要	87aa80346911caaf92584fe18a08a33e209e564e	\N	f	2020-09-02 01:10:00	2020-09-10 05:10:14.642248	0			'api':7,15 'javascript':4,12 '如何设计一个':3,11 '推荐':1,9 '插件系统':5,13 '更重要':8,16 '编程思维比死磕':6,14 '译':2,10	zh	
843	编写第一个 .NET 微服务	{"ver":2,"uid":1,"hash":"SHA1:56d35d34ceb4070cdd1b9c470f175514ed3eb61d"}	https://toutiao.io/k/ci832ri	2020-09-02 01:10:13	编写第一个 .NET 微服务	cb41ef31e1e2992ee2402ac4e142d4716f58ef7c	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.918694	0			'net':2,5 '微服务':3,6 '编写第一个':1,4	zh	
839	Why Doctors Hate Their Computers (2018)	{"ver":2,"uid":1,"hash":"SHA1:43e6c7bcaa8566d19153541cc3d630be7f033246"}	https://www.newyorker.com/magazine/2018/11/12/why-doctors-hate-their-computers	2020-09-01 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24336039"> https://news.ycombinator.com/item?id=24336039 </a>	6e876bfecc34cda05c7f6ac8e3c0f5770d3a9796	\N	f	2020-09-01 23:10:00	2020-09-02 06:10:09.685882	0			'/item?id=24336039':10 '2018':6 'comment':7 'comput':5 'doctor':2 'hate':3 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24336039':8	zh	aarestad
842	[推荐] 视频面试传输协议到底是 TCP 还是 UDP	{"ver":2,"uid":1,"hash":"SHA1:f2045daf29662d778a84ec9fc9edc000d208a202"}	https://toutiao.io/k/ukczk89	2020-09-05 20:10:10	[推荐] 视频面试传输协议到底是 TCP 还是 UDP	d673102936e9878121f671a222706cced741adb9	\N	f	2020-09-02 01:10:00	2020-09-10 03:10:13.560837	0			'tcp':3,8 'udp':5,10 '推荐':1,6 '视频面试传输协议到底是':2,7 '还是':4,9	zh	
844	MySQL 复杂 where 语句分析	{"ver":2,"uid":1,"hash":"SHA1:10fa10bc2232889dac0d96e8152958449a509690"}	https://toutiao.io/k/1v9xvkb	2020-09-02 01:10:13	MySQL 复杂 where 语句分析	73cfdf2d5d93004167fdb41a4d01fdbf3cb4d559	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.916574	0			'mysql':1,5 'where':3,7 '复杂':2,6 '语句分析':4,8	zh	
846	Python 到底是强类型语言，还是弱类型语言？	{"ver":2,"uid":1,"hash":"SHA1:b9450ab1f94a9480544acfbe9fd8a61a9eae5e1d"}	https://toutiao.io/k/ugzknje	2020-09-02 01:10:13	Python 到底是强类型语言，还是弱类型语言？	fc419e987e2057bc773d1ea3a7e5a4f55ccd1fed	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.907813	0			'python':1,4 '到底是强类型语言':2,5 '还是弱类型语言':3,6	zh	
461	从图片裁剪来聊聊前端二进制	{"ver":2,"uid":1,"hash":"SHA1:dcab0092f5ebdbad36d8ec369278dbcfe08185fe"}	https://toutiao.io/k/d69blax	2020-08-21 02:10:08	从图片裁剪来聊聊前端二进制	a613b7547fa852df6c9dc591cfca70ba65bd9207	\N	f	2020-08-21 02:10:00	2020-08-21 23:10:08.072148	0			'从图片裁剪来聊聊前端二进制':1,2	zh	
847	为什么不建议在 for 循环里捕捉异常？	{"ver":2,"uid":1,"hash":"SHA1:c550380dd3f15296bb798bf3a99346b0ae2f0676"}	https://toutiao.io/k/h2xjwst	2020-09-02 01:10:13	为什么不建议在 for 循环里捕捉异常？	a83081a10677ace40afc9912c7aa8fee6225f60b	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.912334	0			'for':2,5 '为什么不建议在':1,4 '循环里捕捉异常':3,6	zh	
666	[推荐] Linux 系统优化（内核优化）	{"ver":2,"uid":1,"hash":"SHA1:ac0ceab54aa69024ec28a4e86fd4250b7547fec3"}	https://toutiao.io/k/bopgl5e	2020-08-30 16:10:10	[推荐] Linux 系统优化（内核优化）	7825ea2b7c7506a2ed3fd847996259aab8cf7c8e	\N	f	2020-08-27 02:10:00	2020-09-10 05:10:14.649113	0			'linux':2,6 '内核优化':4,8 '推荐':1,5 '系统优化':3,7	zh	
286	Ghost.org deleted my website	{"ver":2,"uid":1,"hash":"SHA1:3863f4518236a1ea239ea20ef411f40cbbf20c29"}	https://postapathy.substack.com/p/i-was-building-a-new-website-for	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24167058"> https://news.ycombinator.com/item?id=24167058 </a>	456e4ba36a6f1d6fae079bd8c655c37dd15bd17c	\N	f	2020-08-15 19:10:00	2020-08-18 19:10:08.591258	0			'/item?id=24167058':8 'comment':5 'delet':2 'ghost.org':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24167058':6 'websit':4	zh	davidbarker
581	Being OK with not being extraordinary	{"ver":2,"uid":1,"hash":"SHA1:682f3655ca0b58438abcacd1418081a574648ecf"}	https://www.tiffanymatthe.com/not-extraordinary	2020-08-24 21:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24261826"> https://news.ycombinator.com/item?id=24261826 </a>	7cb808ec6e5b96fccd5df2b5af22adf05ccd3780	\N	f	2020-08-24 21:10:00	2020-08-27 20:10:10.157969	0			'/item?id=24261826':10 'comment':7 'extraordinari':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24261826':8 'ok':2	zh	tmatthe
837	Nvidia Unveils GeForce RTX 30 Series GPUs	{"ver":2,"uid":1,"hash":"SHA1:4263d2ca159303da2f366795ea02155fa908d2af"}	https://blogs.nvidia.com/blog/2020/09/01/nvidia-ceo-geforce-rtx-30-series-gpus/	2020-09-01 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24343672"> https://news.ycombinator.com/item?id=24343672 </a>	f8acdf71c8f252f2ef01da60d0f832bbbcf5e27f	\N	f	2020-09-01 21:10:00	2020-09-04 19:10:08.974559	0			'/item?id=24343672':11 '30':5 'comment':8 'geforc':3 'gpus':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24343672':9 'nvidia':1 'rtx':4 'seri':6 'unveil':2	zh	mkaic
671	[推荐] 开发出优秀的 API，构建 RESTful API 的 13 种最佳实践，学会此文就很优秀了	{"ver":2,"uid":1,"hash":"SHA1:c8e0b7b83401a05e4a87b372542be0b6ab40e17a"}	https://toutiao.io/k/jhsjj8v	2020-08-30 19:10:14	[推荐] 开发出优秀的 API，构建 RESTful API 的 13 种最佳实践，学会此文就很优秀了	ffc26815c6eb4a33b8b250f4ac7d166d3783cc28	\N	f	2020-08-27 02:10:00	2020-09-10 05:10:14.662311	0			'13':8,18 'api':3,6,13,16 'restful':5,15 '学会此文就很优秀了':10,20 '开发出优秀的':2,12 '推荐':1,11 '构建':4,14 '的':7,17 '种最佳实践':9,19	zh	
582	Unity Software Inc S-1	{"ver":2,"uid":1,"hash":"SHA1:5481fa23780a210def2eda0ec0424565d08b1bbb"}	https://www.sec.gov/Archives/edgar/data/1810806/000119312520227862/d908875ds1.htm	2020-08-24 21:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24261559"> https://news.ycombinator.com/item?id=24261559 </a>	98294a3fb82aaf6dc18104aa100374d17ba52512	\N	f	2020-08-24 21:10:00	2020-08-27 20:10:10.178691	0			'-1':5 '/item?id=24261559':9 'comment':6 'inc':3 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24261559':7 'softwar':2 'uniti':1	zh	swyx
848	前端智能化实践：从图片识别 UI 样式	{"ver":2,"uid":1,"hash":"SHA1:c8697d5ff02b5a54bfb22b9cf46e3993e38d849a"}	https://toutiao.io/k/j3pywnx	2020-09-02 01:10:13	前端智能化实践：从图片识别 UI 样式	e857c6f1864e56216fadefbd7f37016d9cf985d7	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.914409	0			'ui':3,7 '从图片识别':2,6 '前端智能化实践':1,5 '样式':4,8	zh	
849	Python 工匠：在边界处思考	{"ver":2,"uid":1,"hash":"SHA1:589839964c51c361349b4c7dde6821c4d642bc04"}	https://toutiao.io/k/swwidma	2020-09-02 01:10:13	Python 工匠：在边界处思考	1ecbe5f3c854665559f1398d2bcfe776fc9d63b5	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.905578	0			'python':1,4 '在边界处思考':3,6 '工匠':2,5	zh	
845	Flink 实战采坑记之 Kryo 序列化	{"ver":2,"uid":1,"hash":"SHA1:e3a7d1dd263324d4d4f1ac7f7fbf40896c1d953c"}	https://toutiao.io/k/5atjr0c	2020-09-02 01:10:13	Flink 实战采坑记之 Kryo 序列化	93890f88287e54a7b103b477df9eca0c5f2c8994	\N	f	2020-09-02 01:10:00	2020-09-03 00:10:09.922972	0			'flink':1,5 'kryo':3,7 '实战采坑记之':2,6 '序列化':4,8	zh	
504	The Splitgraph Data Delivery Network – query over 40k public datasets	{"ver":2,"uid":1,"hash":"SHA1:174e62abffbedfae97c63c6511958b06af081da1"}	https://www.splitgraph.com/blog/data-delivery-network-launch	2020-08-21 21:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24233948"> https://news.ycombinator.com/item?id=24233948 </a>	99fdbc4984a9e98da2a34032d1e97cbb0dd276ab	\N	f	2020-08-21 21:10:00	2020-08-24 21:10:12.173313	0			'/item?id=24233948':14 '40k':8 'comment':11 'data':3 'dataset':10 'deliveri':4 'network':5 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24233948':12 'public':9 'queri':6 'splitgraph':2	zh	mildbyte
305	记一次 Sqlalchemy Session 问题	{"ver":2,"uid":1,"hash":"SHA1:9e255c352b910b8d15be32f7e21a948d4f61c1a6"}	https://toutiao.io/k/f4yv4kl	2020-08-16 01:10:09	记一次 Sqlalchemy Session 问题	13699a5403ef5e48546fdab2d0fd3ef469515d8e	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.629184	0			'session':3,7 'sqlalchemy':2,6 '记一次':1,5 '问题':4,8	zh	
302	使用 Hugo 搭建博客	{"ver":2,"uid":1,"hash":"SHA1:98f79b64a863fe6b3e07d0db04e2ab52026dc121"}	https://toutiao.io/k/pcw56h6	2020-08-16 01:10:09	使用 Hugo 搭建博客	899165aebac6ade8a10644edb375f5ff2ab4ba4f	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.631843	0			'hugo':2,5 '使用':1,4 '搭建博客':3,6	zh	
360	微信小游戏背后的技术优化	{"ver":2,"uid":1,"hash":"SHA1:bcb79859ee442b0731eb24162148bc9c29dec282"}	https://toutiao.io/k/lhyjn91	2020-08-18 02:10:08	微信小游戏背后的技术优化	ec2c4a2ba44ce503f367a8a5560227d8a47d010c	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.836376	0			'微信小游戏背后的技术优化':1,2	zh	
304	利用 puppeteer 来录制网页操作导出 GIF 动图	{"ver":2,"uid":1,"hash":"SHA1:65ad482b52c7d70b0171e7d7417a4199e0509e2f"}	https://toutiao.io/k/hj0qn2o	2020-08-16 01:10:09	利用 puppeteer 来录制网页操作导出 GIF 动图	bf5ad750fbde06a5efcbdb69396e5c4be4e46829	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.641272	0			'gif':4,9 'puppeteer':2,7 '利用':1,6 '动图':5,10 '来录制网页操作导出':3,8	zh	
303	周末干嘛啦？别闲着！	{"ver":2,"uid":1,"hash":"SHA1:be01d5c70eca941180df571b94f7d1bfdc527790"}	https://toutiao.io/k/qgn6er5	2020-08-16 01:10:09	周末干嘛啦？别闲着！	90ca6779219ae0779dc4ec8882ba8659836e6b41	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.645468	0			'别闲着':2,4 '周末干嘛啦':1,3	zh	
359	从 0 到 1 搭建业务中台	{"ver":2,"uid":1,"hash":"SHA1:edde19a2371ce9c1692dcfdb6391c38a031886e6"}	https://toutiao.io/k/fonb2xz	2020-08-18 02:10:08	从 0 到 1 搭建业务中台	740eba2356df13f6e6912d1a65603b46eb909e84	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.839228	0			'0':2,7 '1':4,9 '从':1,6 '到':3,8 '搭建业务中台':5,10	zh	
364	LeetCode 题解	{"ver":2,"uid":1,"hash":"SHA1:eb770fbc8a199e5ea1388aa233e5a448d1290166"}	https://toutiao.io/k/hjie8u4	2020-08-18 02:10:08	LeetCode 题解	4895ba754a4818ab459b60537d462b212d8ec59b	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.841834	0			'leetcode':1,3 '题解':2,4	zh	
245	位换记号、排列测试与状态图：杂耍中的数学	{"ver":2,"uid":1,"hash":"SHA1:8a11c2fdf08a61b13da520761eb6fe50c705c301"}	http://www.matrix67.com/blog/archives/6896	2016-10-02 05:08:47	<p>2016 年 7 月 30 日至 8 月 7 日，第 39 届欧洲杂耍大会（European Juggling Convention）在荷兰的阿尔梅勒举行， 8 月 3 日凌晨的搏击之夜（Fight Night）自然再度成为了众人关注的焦点——它是杂耍斗（combat juggling）这项运动最大的赛事。在杂耍斗的圈子里，有两个响当当的大名你必须要知道：德国选手 Jochen Pfeiffer 目前世界排名第二，之前拿过 6 次搏击之夜的冠军；英国选手 Luke Burrage 目前世界排名第一，之前拿过 8 次搏击之夜的冠军。这一年的比赛中，两位老将均以完胜的成绩轻松进入 32 强，并在淘汰赛阶段过关斩将，最终成功在决赛场上相遇。最终，世界排名第二的 Jochen 以 5 比 4 的成绩击败了世界排名第一的 Luke ，夺得了又一个搏击之夜的冠军。</p>\n<p>杂耍斗是一种两人对战类的体育运动。比赛规则非常简单。每局比赛开始时，两名选手各自抛耍 3 个杂耍棒。任何一方都可以故意上前干扰另一方（但只能针对对方手中的或者空中的杂耍棒，不能针对对方的手臂和身体）。谁站到最后，谁就赢得该局。先赢 5 局者获得比赛的胜利。</p>\n<p>典型的一局比赛大致就像下面这样。这是 Jochen 和 Luke 的第 6 局比赛。</p>\n<p style="text-align: center"><video width="94%" controls><source src="http://www.matrix67.com/blogimage_2016/2016092001.mp4" type="video/mp4">Your browser does not support the video tag.</video></p>\n<p><span id="more-6896"></span></p>\n<p>这场决赛确实打得精彩，出现了很多漂亮的瞬间。比如，在第 5 局比赛中， Jochen 做出了一个非常漂亮的防守动作。注意他在最后是如何改变自己的抛耍模式，在不违规的情况下（控制至少 3 个杂耍棒且任意时刻至少有一个杂耍棒在空中）抵挡住对手进攻的。</p>\n<p style="text-align: center"><video width="94%" controls><source src="http://www.matrix67.com/blogimage_2016/2016092002.mp4" type="video/mp4">Your browser does not support the video tag.</video></p>\n<p>第 7 局比赛出现了更有意思的局面： Luke 从对方手中抢来了一个杂耍棒，于是在对方满地捡棒子时，自己居然抛耍起了 4 个杂耍棒！</p>\n<p style="text-align: center"><video width="94%" controls><source src="http://www.matrix67.com/blogimage_2016/2016092003.mp4" type="video/mp4">Your browser does not support the video tag.</video></p>\n<p>不知道有没有人仔细看过视频后，发现了一个有趣的细节： Luke 虽然抛耍起了 4 个杂耍棒，但是他的动作好赖皮呀！用哪只手抛出的杂耍棒，就用哪只手接住，任何一个杂耍棒都没有在两手之间交替。这恐怕不能叫做杂耍吧！这是不是要算违规呀？</p>\n<p>还真不是。两只手各自独立地抛耍 2 个物体，确实是一种基本的杂耍模式。让我们来看三个演示动画，它们分别对应抛耍 3 个物体、抛耍 4 个物体和抛耍 5 个物体时最基本的杂耍模式：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092004.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092005.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092006.gif" alt="" width="190" /></p>\n<p>按照大多数人的理解，在任何一种杂耍模式中，左右两只手一定是交替地、有节拍地不断抛耍小球。也就是说，右手接住某个小球并立即把它重新抛出，片刻后就该轮到左手接住某个小球并把它抛出，再过相同的时间后就又该轮到右手接住某个小球并把它抛出……今后，我们把某只手接住并抛出某个小球叫做一次“接抛”。接抛动作将会以右手、左手、右手、左手的顺序轮流完成。我们假设每次接抛动作都是瞬间完成的，小球停留在手中的时间忽略不计。接下来，我们还会把相邻两次接抛之间的时间叫做“一拍”。我们假设杂耍过程中，每一拍的时长都是相同的。</p>\n<p>上面这些杂耍模式之所以是“最基本的杂耍模式”，其实就是因为，每次接抛动作都是完全相同的。这意味着，每个小球每次都被抛到了相同的高度，都会在空中停留相同的拍数。如果每个小球都在空中停留 3 拍，结果会怎样呢？让我们画个图来分析一下：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092007.png" alt="" width="610" /></p>\n<p>图中，横坐标表示时间，纵坐标表示高度，弧线则表示随着时间的流逝，小球们的高度是如何变化的。每个小球都在空中停留了 3 拍，表现在图上就是，每条弧线都横跨了 3 个区间。由图可知，这里面实际上一共有 3 个小球（我们用 3 种不同的线条分别表示出了它们的轨迹）。此时，每个小球都会交替地来到左手和右手上。</p>\n<p>类似地，如果每个小球都在空中停留 5 拍，我们就需要 5 个小球，才能让双手不会闲下来。可以看到，在这种情况下，每个小球也都会交替地来到左手和右手上。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092008.png" alt="" width="610" /></p>\n<p>然而，如果每个小球都在空中停留 4 拍，情况就不一样了：对于任意一个固定的小球来说，不管它被哪只手扔了出去， 4 拍之后它将回到同一只手中。可以看到，此时对应着小球数为 4 的情况，也就是上面三个动画中的中间那个动画。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092009.png" alt="" width="610" /></p>\n<p>不妨用 n 来表示杂耍模式中的小球数。正因为在这种最基本的杂耍模式中， n 的奇偶性会导致如此大的区别，所以当 n 为奇数和 n 为偶数时，这种杂耍模式的俗名都是不一样的。当 n 为奇数时，所得的杂耍模式叫做“瀑泻”（cascade）；当 n 为偶数时，所得的杂耍模式叫做“喷泉”（fountain）。</p>\n<p>难道当 n = 4 时，就没有什么左右手能互相传递小球的杂耍模式吗？倒也有，比方说用一种叫做“倾盆”（shower）的杂耍模式就行了。事实上，倾盆可以适用于一切的 n ，并且不管 n 是奇数还是偶数，每个小球的位置都会在左右手之间切换。不过，这种模式的问题是——它太水了，还是不像杂耍。让我们还是先来看看 n = 3, 4, 5 时倾盆的演示动画吧：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092010.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092011.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092012.gif" alt="" width="190" /></p>\n<p>也就是说，左手接住并水平抛出某个小球，右手立即接到该球并把它抛到更高的地方；然后左手接住并水平抛出下一个小球，右手立即接到该球并把它抛到更高的地方……倾盆也算是非常基本的一种杂耍模式了，或许你自己没事儿时也偷偷尝试过。搜索与“杂耍”有关的插图插画，画面内容基本上都是一个人把一堆小球从一只手扔到另一只手，所有小球在空中大致排成一个半圆。这表现的其实就是倾盆这种杂耍模式。不过，和瀑泻比起来，倾盆的效果确实差了一些，少了点“左右开弓”的感觉。</p>\n<p>说了半天，当 n = 4 时，究竟有没有什么看起来非常爽，观赏性非常强的玩法呢？有。来看看下面三种 n = 4 时的杂耍模式：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092013.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092014.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092015.gif" alt="" width="190" /></p>\n<p>看了上面这三个动画，你有何感想？我估计，你的第一反应会是：“真牛逼，没想到这背后的水这么深！看着就觉得里面有好多数学原理！”接下来，你就该观察各种细节，或者该冒出各种怪异的想法了：</p>\n<ul>\n<li>“我操，这些动画你丫都是拿什么软件做的呀？”</li>\n<li>“你这网站上写的东西今后肯定是要出书的吧？哼哼，我看到时候这篇文章的动画你怎么处理！”</li>\n<li>“你说这些新的杂耍模式都是谁想出来的，都是怎么想出来的呀？”</li>\n<li>“这三种杂耍模式真的是三种不同的杂耍模式吗？让我看看啊……哦，是，好像确实是不同的。”</li>\n<li>“这三种杂耍模式的循环长度似乎是不一样的，最左边那个的循环长度明显要短得多。”</li>\n<li>“其实中间那个杂耍模式中，右手还是出现了自己扔给自己的情况。哦，左手也出现了这种情况。咦，等等，好像这个杂耍模式中，左右手的动作是完全对称的！”</li>\n<li>“最右边那个图我好像看出些名堂来了。它就是一个抛得更高的 3 球瀑泻，插进去一个简单的水平抛掷。”</li>\n<li>……</li>\n</ul>\n<p>好吧，我先专门说一下这些动画是怎么变出来的吧，不然大家肯定又会问。以前每篇文章的图片和动画都是我用 Mathematica 做的，但这篇文章还真不是。这篇文章中所有杂耍模式的演示动画都是用一个叫做 <a href="https://sourceforge.net/projects/jugglinglab/">Juggling Lab</a> 的开源软件生成的（然后用 ImageMagick 调了一下颜色和线条的粗细）。这个软件在杂耍界里非常有名，它可以生成各种杂耍模式的 GIF 演示动画，极大地方便了人们的交流。</p>\n<p>这篇文章里有这么多动画，以后真的出书时该怎么办呢？那还有啥办法，到时候出书时只能不用这篇文章了呗！所以，大家一定要体会到科技的进步。现在，向其他人展示某种杂耍模式，只需要发个 GIF 动画就行了；但在只有纸媒的时代，这将会变得非常非常困难。《杂耍者世界》（Juggler&#8217;s World）是杂耍界里颇有影响力的杂志。杂志读者曾经问道：为什么不在杂志上教大家一些新的杂耍技巧呢？于是，在 1985 年第 2 期的杂志中，编辑们用一组照片辅以数字和箭头，详细讲解了一个抛耍 4 球的新玩法。自然，效果非常糟糕，至少我看了半天都没看懂。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092016.png" alt="" width="610" /></p>\n<p>就好像跳水中“5253B”表示“向后翻腾两周半转体一周半屈体”一样，要是我们有一套记号，或者说一种“语法”，可以简单有效地表示出各种杂耍模式就好了。人们不但可以借助它进行交流，或许还能通过摆弄这些符号，寻找新的杂耍模式。杂耍模式的很多特征，或许也会反映在这些符号当中。</p>\n<p>刚才对瀑泻和喷泉的分析，让我们自然地想到了这样一种方案：依次记下每次扔出的球会在空中停留几拍，直到完整地记下一个循环节为止。刚才我们展示了三种非常高级的 4 球玩法，让我们仔细分析一下中间那种玩法。不妨从右手扔出最高的那一次球开始算起：这次扔出的球（由右手扔出）要过 5 下才会被接住，我们就用数字 5 来标记；下次扔出的球（由左手扔出）要过 3 下才会被接住，我们就用数字 3 来标记；第三次扔出的球（由右手扔出）要过 4 下才会被接住，我们就用数字 4 来标记……如果把小球的轨迹连同这些数字标记一并画出，大概就是这样：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092017.png" alt="" width="610" /></p>\n<p>杂耍模式能永远持续下去，肯定是因为它在不停地循环。在这个例子中，我们记下的数字形成了 534 循环。我们就用 534 来表示这种杂耍模式。这就是杂耍界最通用的杂耍模式记号——“位换记号”（siteswap）。</p>\n<p>位换记号最早是由谁想出来的，现在已经很难考证了。目前一般认为，位换记号起源于 1985 年左右，它的发明和传播，至少与以下三组人马有着密切的关系：来自加利福尼亚州圣克鲁斯的 Paul Klimek ，来自加利福尼亚理工学院的 Bruce Tiemann 和 Bengt Magnusson ，以及来自英国剑桥的 Michael Day 、Colin Wright 和 Adam Chalcraft 。</p>\n<p>对于杂耍表演者来说，位换记号是非常直观的，因为它记录的本质上就是杂耍时的一个个接抛动作：数字 1 就表示，我应该把刚接到的球近乎水平地扔向另一只手，让另一只手在下一拍立即接到它；数字 2 就表示，我应该把刚接到的球竖直向上扔一点，使得在另一只手完成动作后，正好轮到这只手重新把它接住（实际表演时，人们通常会选择直接把这个小球握在手中停留 2 拍，因为在此期间反正这只手也不需要干别的）；数字 3 就表示，我应该把刚接到的球扔得更高一些，扔出一个抛物线，使得 3 拍之后另一只手正好能接住它……总之，数字越大，就意味着我应该把小球越得越高，并且偶数意味着应该竖直向上扔，奇数意味着应该往另一只手的方向扔。</p>\n<p>事实上，位换记号只告诉了你扔出的球需要多久之后回到手中，而并没有告诉你这个球具体应该怎么扔出去。你可以从胯下扔上来，从身体背后扔过来，扔头上顶一会儿，扔地上反弹回来……只要它能在正确的时候被接住就行了。</p>\n<p>注意，一个杂耍模式的位换记号往往不是唯一的。我们可以对位换记号中的数字进行“循环移位”（cyclic shift），例如把 534 变为 345 和 453 ，它们刻画的显然是同一个杂耍模式。此时，人们通常会选择使用字典序最大的那个记法（也就是说，使用第一位数字最大的记法，如果有多个第一位数字最大的，则使用它们之中第二位数字最大的记法，等等）。另外，人们通常假设，位换记号中不会有大于 9 的数字出现，因为把小球扔这么高是不太现实的。这样的话，每个杂耍模式的位换记号都是一串唯一确定并且没有歧义的数字了。</p>\n<p>我们刚才介绍的那些杂耍模式，用位换记号都该怎么记呢？ 3 球瀑泻、 4 球喷泉、 5 球瀑泻的位换记号分别是 3 、 4 、 5 。果然，它们是最基本的杂耍模式。 3 球倾盆、 4 球倾盆、 5 球倾盆的位换记号分别是 51 、 71 、 91 。这也很容易看出来。</p>\n<p>最后我们展示了三种 4 球玩法，其位换记号从左至右依次为 53 、 534 、 5551 。之前观察到的现象和规律，都可以从这几个位换记号中读出来。左边那个的循环长度确实是最短的，因为它的位换记号的长度就是最短的。整个杂耍模式其实就是两个动作不断重复，右手做个 5 ，左手做个 3 ，右手再做个 5 ，左手再做个 3 。中间那个的位换记号里有偶数，因此它里面就会出现“自己扔给自己”的情况。同时，它的动作是左右对称的，因为它的位换记号的长度为奇数。第一轮的 534 分别对应右、左、右，第二轮的 534 就分别对应左、右、左了。右边那个本质上就是“一个抛得更高的 3 球瀑泻，插进去一个简单的水平抛掷”，它的动作要领显然就是三个相同的大动作加上一个小动作，这不正是 5551 的意思吗？</p>\n<p>不知道大家有没有发现， 53 、 534 、 5551 这几串数字有一个共同特征：数字串里所有数字的平均数都是 4 。事实上，这个规律对于其他几个杂耍模式的位换记号也都成立：位换记号中所有数字的平均数，等于这个杂耍模式中小球的个数。这就是位换记号理论中最著名的一个定理——平均数定理（the average theorem）。这个定理为什么是对的呢？我们介绍一种非常直观的证明方法。</p>\n<p>每个小球每次在空中停留的时间，完全是我的手在抛出它时给予它的。这就好比每次抛出小球都是在给小球加油一样。如果位换记号里有一个数字 4，就表示此时抛出小球的动作相当于给小球加了 4 个单位的油，小球也就会在空中停留 4 个单位的时间，直到最后没油了落回手中，继续接受下一次加油。每个循环刚开始的时候，有些空中的小球消耗的还是上一个循环里加的油；每个循环快结束时，给小球加的油也有一部分会放到下个循环去用。但是，既然这些循环能够一个接一个地无限持续下去，既不会出现剩余的油越积越多的情况，也不会出现油慢慢就不够了的情况，这就说明每个循环里给小球加的油，一定都恰好等于这个循环里所有小球在空中停留的时间之和。</p>\n<p>假设某个杂耍模式有 n 个小球，其位换记号的长度为 l 。在每个循环里，我的手一共给小球加了多少油呢？显然，这等于位换记号里的所有数字之和。在每个循环里，所有小球在空中总共停留了多少时间呢？由于我们有 n 个小球，每个小球都在空中停留了 l 个单位的时间，所以答案就是 n · l 。于是我们得到，位换记号里的所有数字之和等于 n · l ，即 n 等于位换记号里的所有数字之和除以 l 。这正是平均数定理的内容。</p>\n<p>平均数定理有一个重要的推论：瞎写一串数字，不见得是一个合法的位换记号。比方说，如果所有数字的平均数根本就不是整数，那么这串数字就必然不是一个合法的位换记号了。然而，麻烦的是，即使所有数字的平均数是个整数，这串数字也不见得是一个合法的位换记号。比方说， 6114 这串数字满足平均数条件，但它就不是一个合法的位换记号。在 61146114&#8230; 中，第一次抛出的小球和第六次抛出的小球会“撞车”，使得杂耍模式无法持续下去。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092018.png" alt="" width="340" /></p>\n<p>所以，位换记号可以很好地描述杂耍模式，但要想利用位换记号创造新的杂耍模式，还得想想办法才行。</p>\n<p>不妨让我们换个思路：能否对已有的位换记号进行改造，从而得出新的杂耍模式呢？考虑之前提过的 534 模式。现在，如果把 534 改成 633 ，会出现什么有意思的结果？你会发现，整个杂耍模式的循环节长度仍然是 3 ，并且在每一个循环节中，第一次抛出的小球和第三次抛出的小球都会交换落点。所以，原来的位换记号不会出现撞车的情况，新的位换记号也不会出现撞车的情况。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092019.png" alt="" width="540" /></p>\n<p>我们预言： 633 是一种新的合法的位换记号，对应于一种全新的杂耍模式！事实上确实如此：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092020.gif" alt="" width="120" /><img src="http://www.matrix67.com/blogimage_2016/2016092021.png" alt="" width="480" style="margin-bottom: 40px" /></p>\n<p>一般地，如果位换记号中有 a 、 b 两个数字，它们相隔 d 拍的距离，那么把 a 和 b 分别换成什么数字，就能交换它们的落点呢？看看下图，你就知道了：我们应该把 a 换成 b + d ，把 b 换成 a &#8211; d 。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092022.png" alt="" width="540" /></p>\n<p>在数字串中，按此规律修改某两个数字的操作就叫做一次“位换”（site swap）。对合法的位换记号进行位换操作，得到的仍然是合法的位换记号。其实，“位换记号”这个词就是这么来的——它是一种支持位换操作的记号。注意，每次位换既不会改变位换记号的长度，也不会改变位换记号中的所有数字之和。因此，位换操作不会改变所有数字的平均数。这说明，用位换操作得到的新杂耍模式，与原杂耍模式的小球数是相同的。</p>\n<p>位换操作很强大。让我们再给大家展示几个例子。如果你愿意，你甚至可以对 3 球瀑泻进行位换操作。 3 球瀑泻的位换记号是 3 ，里面就只有一个数字，这可怎么做位换呢？没关系，多补几个循环节就行了。比方说，把 3 先扩写成 333 ，然后对第一个数字和第三个数字进行位换，于是得到 531 。那么， 531 就是一个新的杂耍模式。如果我们刚才选择把 3 扩写成 3333 ，但还是对第一个和第三个数字进行位换，得到的当然就是 5313 。类似地，把 3 扩写成 33333 ，位换后还能变出 53133 来……于是，我们知道了， 531, 5313, 53133, 531333, &#8230; 都是合法的位换记号。下面三个动画展示的分别是 531 、 5313 和 53133 的玩法。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092023.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092024.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092025.gif" alt="" width="190" /></p>\n<p>我们还可以对位换之后的结果再做位换。比方说，对 531 的第一个和第二个数字进行位换，于是得到 441 。这就又是一种新的杂耍模式！</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092026.gif" alt="" width="120" /><img src="http://www.matrix67.com/blogimage_2016/2016092027.png" alt="" width="480" style="margin-bottom: 35px" /></p>\n<p>441 模式可以说是人们利用位换记号得到的最大的成果之一。以前，人们凭借想象，发明创造了各种各样的杂耍模式，并给它们起了各种各样的名字。但在位换记号提出之前，由于缺乏系统的研究工具，很多简单的玩法都没被发现。在位换记号理论的帮助下，人们找到了很多新的杂耍模式， 441 模式就是最经典的例子之一。也正因为这样， 441 模式就不再有什么别的名字了。杂耍界的人们直接管它叫 441 。</p>\n<p>我们刚才是用 3 → 333 → 531 → 441 的办法生成的 441 。其实，生成 441 还有很多别的路子。比方说，还是先把 3 扩写成 333 ；接下来，对 333 的第一位和第二位进行位换，于是得到 423 ；循环移位，可以把 423 变成 342 ；再对 342 的第一位和第三位进行位换，就可以得到 441 了。当然，变出 441 并不需要那么复杂，其实 423 能直接变成 441 。这里我们只是想告诉大家，位换操作还可以和循环移位配合着使用。</p>\n<p>1993 年， Allen Knutson 证明了一个非常漂亮的结论：先对某个单数字的位换记号进行扩写，再通过适当的循环移位和位换操作，就能变出一切合法的位换记号！由于循环移位和位换操作都不会改变位换记号的长度和平均数，因此为了得到位换记号长度为 l 的 n 球玩法，我们必须先把单个数字 n 扩写成 l 个数字 n 。所以，接下来我们只需要说明，任何一个位换记号长度为 l 的 n 球玩法，都能从 l 个数字 n 出发，通过循环移位和位换操作得出。</p>\n<p>考虑这样一个位换记号处理算法：</p>\n<ol>\n<li>如果数字串里的所有数字都相同，则输出该数字串，算法结束</li>\n<li>使用循环移位操作，将最大数字挪至第一位，同时使得第二位数字和第一位数字不同</li>\n<li>对第一位数字和第二位数字进行位换操作，然后跳转到第 1 步</li>\n</ol>\n<p>把任意一个合法的、长度为 l 的、平均数为 n 的位换记号输入该算法，都会经过一系列的循环移位和位换操作，最终变成 l 个数字 n 。注意到，如果数字串 A 循环移位后能变成数字串 B ，数字串 B 显然也能通过循环移位变成数字串 A 。另外，容易验证，如果对数字串 A 做一次位换后得到数字串 B ，则在同样的位置上对数字串 B 做一次位换，又会变回成数字串 A 。既然每个合法的位换记号都能变成 l 个数字 n ，那么从 l 个数字 n 出发，也就能反过来变出每个合法的位换记号了。</p>\n<p>等等，这也太简单了吧，好像我们漏掉了什么吧？嗯，是的。我们还得证明：把任意一个合法的位换记号输入该算法，该算法在有限步之后一定会终止。</p>\n<p>首先注意到，由于合法的位换记号经过循环移位和位换操作后仍然是合法的，因此把任意一个合法的位换记号输入进去，算法生成的自始至终都是合法的位换记号。现在，假设在做第 3 步时，数字串的头两个数字是 a 和 b 。根据之前的算法步骤可知， a 是整个数字串中最大的数，并且 a 与 b 不相等。换句话说， a 比 b 至少大 1 。事实上， a 不可能比 b 刚好大 1 ，否则这两个地方扔出的小球会撞车，这就不是一个合法的位换记号了。因此， a 比 b 至少大 2 。第 3 步之后， a 将会变成 b + 1 ， b 将会变成 a &#8211; 1 。这说明，每过一遍第 3 步，数字串中都会有某个最大数减小了 1 ，并且不会因此而引入新的最大数。如果输入的位换记号中所有数字的平均数是 n ，那么所有数字的平均数就一直是 n 。等最大数不断减小，一直减小到 n 了，那么所有的数字都是 n 了，算法也就终止了。到此为止，我们就完整地证明了 Allen Knutson 的结论。</p>\n<p>这个结论有一个非常强大的推论：对于任意一个合法的、长度为 l 的位换记号，将它的各个数字分别与 1, 2, 3, &#8230;, l 对应相加，所得的 l 个结果除以 l 的余数一定是各不相同的。由于除以 l 的余数正好也就只有 0, 1, 2, &#8230;, l &#8211; 1 这 l 种可能，因此上述推论还可以重新叙述为：按上述步骤做加法并取余，所得的 l 个结果正好构成 0, 1, 2, &#8230;, l &#8211; 1 的一个排列。举个例子，在 441 模式中， 4, 4, 1 依次与 1, 2, 3 相加，得到的结果为 5, 6, 4 ，它们除以 3 的余数分别是 2, 0, 1 ，正好是 0, 1, 2 的一个排列。再举个例子，之前我们曾经提到过 53133 模式，其中 5, 3, 1, 3, 3 依次与 1, 2, 3, 4, 5 相加，得到 6, 5, 4, 7, 8 ，它们除以 5 的余数分别为 1, 0, 4, 2, 3 ，正好是 0, 1, 2, 3, 4 的一个排列。我们就说， 441 和 53133 都能通过“排列测试”（permutation test）。</p>\n<p>为什么一切合法的位换记号都能通过排列测试呢？首先，如果位换记号中所有数字都相同，那它显然能通过排列测试。既然由此出发，通过循环移位和位换操作能得出其他一切合法的位换记号，因此我们只需要说明：能通过排列测试的数字串，经过循环移位和位换操作后，也照样能通过排列测试。事实正是如此。</p>\n<p>首先说循环移位。将循环移位过的数字串与 1, 2, 3, &#8230;, l 对应相加，本质上就相当于是将数字串与循环移位过的 1, 2, 3, &#8230;, l 对应相加；而后者会使得所有的余数都循环移动一下，所以如果原来可以形成排列，那么现在依然可以形成排列。比方说，假设某个数字串原本是 a, b, c, d, e ；循环移位后，数字串变成了 c, d, e, a, b 。原来， a, b, c, d, e 应该与 1, 2, 3, 4, 5 对应相加；现在， a, b, c, d, e 就应该与 4, 5, 1, 2, 3 对应相加。把 a + 1 变成 a + 4 之后，除以 5 的余数会怎么变呢？不难看出，如果原来余数是 0 ，现在就会变成 3 ；如果原来余数是 1 ，现在就会变成 4 ； 2 则会变成 0 ， 3 则会变成 1 ， 4 则会变成 2 。换句话说，余数会按照 (0, 1, 2, 3, 4) → (3, 4, 0, 1, 2) 的规律发生变化。然而，把 b + 2 变成 b + 5 ，把 c + 3 变成 c + 1 ，把 d + 4 变成 d + 2 ，把 e + 5 变成 e + 3 ，除以 5 的余数都会按照这样的规律发生变化。所以，如果原来的 5 个余数既无重复又无遗漏地包含了 0, 1, 2, 3, 4 ，按照 (0, 1, 2, 3, 4) → (3, 4, 0, 1, 2) 的规律整体一变后，新的 5 个余数仍然既无重复又无遗漏地包含了 0, 1, 2, 3, 4 。</p>\n<p>然后说位换。假设我们对相隔 d 拍的两个数字 a 、 b 进行位换。如果数字 a 本来应该与 i 相加，那么数字 b 本来就应该与 i + d 相加。相加之后的结果是 a + i 和 b + i + d 。位换后，数字 a 变成了 b + d ，数字 b 变成了 a &#8211; d 。前者还是要与 i 相加，后者还是要与 i + d 的相加。相加之后的结果就是 b + d + i 和 a &#8211; d + i + d = a + i 。看出来了吧！在位换前和位换后，相加之后的结果没变，只不过颠倒了而已。自然，除以 l 的余数也不会变，只是颠倒了而已。</p>\n<p>所以，我们就证明了：一切合法的位换记号都能通过排列测试。反过来，无法通过排列测试的，必然就不是合法的位换记号了。排列测试比我们之前说过的平均数定理检验法更为强大。之前我们说过， 6114 不是一个合法的位换记号，但用平均数定理却无法检验出来。不过，如果换用排列测试来检验，就能立即见效了。 6, 1, 1, 4 分别加 1, 2, 3, 4 可得 7, 3, 4, 8 ，它们除以 4 的余数是 3, 3, 0, 0 。这说明， 6114 不能通过排列测试，它也就不是合法的位换记号了。</p>\n<p>有没有什么数字串，它连排列测试都通得过，但仍然不是合法的位换记号呢？答案是否定的。我们可以证明，能通过排列测试的，也一定都是合法的位换记号。这背后的道理其实很简单。不妨让我们以 l = 4 为例。假设这个长度为 4 的数字串是 a, b, c, d 。如果把数字 a 所在的位置看作第 1 次接抛，那么 a + 1, b + 2, c + 3, d + 4 分别就是这 4 次接抛的落点位置。如果这个数字串能通过排列测试，就说明这 4 个落点正好是某个循环节中的第 1 个点，某个循环节中的第 2 个点，某个循环节中的第 3 个点，以及某个循环节中的第 4 个点（不管是什么顺序）。也就是说，这 4 个落点正好涵盖了循环节中的 4 个不同的地方。把这部分示意图平铺开来，你会发现，每个点都将会恰好有一接和一抛。这就是一个正确的杂耍模式了。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092028.gif" alt="" width="500" /></p>\n<p>于是，我们证明了这样一个非常终极的结论：某个数字串是一个合法的位换记号，当且仅当它能通过排列测试！这又会产生很多有趣的推论。比方说，如果一个数字串能通过排列测试，那么让每个数字都增加或者减小一个相同的常数，得到的数字串显然仍能通过排列测试。因此，给一个位换记号中的每个数字都增加或者减小相同的量，就会得出新的杂耍模式。有的地方把这种改造位换记号的操作叫做“垂直移位”（vertical shift）。例如，对 441 进行垂直移位，可以依次得到 552 、 663 、 774 等，它们都是新的杂耍模式。下面三个动画分别是 552 、 663 和 774 的杂耍模式演示动画。左边那个动画是这篇文章中第一次出现的位换记号里含有数字 2 的情况。之前我们说过，在遇到数字 2 时，表演者通常会选择直接把这个小球握在手中停留 2 拍。另外，可以看到，和之前那些位换记号变换法不同的是，垂直移位可以改变杂耍模式中的小球数。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092029.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092030.gif" alt="" width="190" /><img src="http://www.matrix67.com/blogimage_2016/2016092031.gif" alt="" width="190" /></p>\n<p>1995 年， Martin Probert 发明了一种生成新杂耍模式的傻瓜方法，其原理也可以用排列测试来解释。如果你想要一个循环节长度为 l 、小球数为 n 的新杂耍模式，你就可以先画一个 l × l 的方阵，然后在第 i 行第 j 列填入 n + i &#8211; j 的值。这相当于是在 l × l 的方阵的最左上角填一个 n ，然后按照向右走就减 1 ，向下走就加 1 的规律填充整个方阵。例如，我想要生成一个循环节长度为 5 、小球数为 4 的新杂耍模式，我画出的方阵就应该如左图所示：</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092032.png" alt="" width="470" /></p>\n<p>现在，从中任意选出 5 个方格，但要保证任意两个方格既不同行也不同列，如右图所示。接下来，从左至右读出各列的数字，于是得到 45641 。那么， 45641 就是一个合法的位换记号，并且它的长度为 l ，平均数为 n 。习惯上，我们会把 45641 写作 64145 ，以符合字典序最大的原则。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092033.gif" alt="" width="120" /><img src="http://www.matrix67.com/blogimage_2016/2016092034.png" alt="" width="480" style="margin-bottom: 30px" /></p>\n<p>为了证明如此得到的数字串一定是合法的位换记号，我们只需要说明，如此得到的数字串一定能通过排列测试。也就是说，我们只需要说明，各列所圈的数字分别 +1, +2, &#8230;, +l ，除以 l 的余数正好取遍 0, 1, 2, &#8230;, l &#8211; 1 。为了给第 j 列所圈的数字 +j ，我们可以保持圆圈的位置不变，把这一列数整体循环上移 j 个单位，圆圈里的数就自动地 +j 了。当然，有时也不是真的 +j 了，比如把上图中的第 4 列循环上移 4 个单位，圆圈里的数会从 4 变成 3 ，而不是 8 。不过，这没关系，因为最后我们只关心它除以 l 的余数，只要它除以 l 的余数是对的就行了。然而，如果各列分别循环上移 1, 2, &#8230;, l 个单位后，方阵里的数除以 l 的余数就会形成这样的情况：一行全是 0 ，一行全是 1 ，一行全是 2 ，等等，一直到一行全是 l &#8211; 1 。所以，这些互不同行的圆圈，圈出的数除以 l 的余数正好取遍 0, 1, 2, &#8230;, l &#8211; 1 。</p>\n<p>另外，我们选的这 l 个数的总和，相当于是 l 个 n 之和，再以某种顺序加上 1, 2, 3, &#8230;, l ，再以某种顺序减去 1, 2, 3, &#8230;, l 。因此，我们选的这 l 个数的平均数正好就是 n 。所以，利用 Martin Probert 的傻瓜方法，确实能够得到一个循环节长度为 l 、小球数为 n 的杂耍模式。</p>\n<p>其实，如果知道了排列测试理论，我们还有更直接的办法来生成新的杂耍模式。对于任意正整数 l ，将 0, 1, 2, &#8230;, l &#8211; 1 随意地排成一排，各项依次减去 1, 2, 3, &#8230;, l ，然后每个地方都可以选择再加上任意一个 l 的整倍数（其中小于等于 0 的地方必须加到变正才行），如此得到的一定是合法的位换记号。枚举所有的可能性，我们就能得到所有合法的位换记号（可能会有重复）！可以说，我们终于有了一套描述、分析、生成杂耍模式的全套解决方案。</p>\n<p>当然，位换记号并不能解决杂耍表演者会遇到的全部问题。试想，如果你玩了一段时间的 3 球瀑泻，想换一种 3 球玩法，但却不想停下重来。这就引出了一个问题：从 3 球瀑泻出发，能无缝切换到哪些其他的 3 球玩法，又该如何去切换呢？为了解决这类问题，人们发明了另一种强大的杂耍模式分析工具——状态图（state graph）。</p>\n<p>让我们假设手上的小球永远是 3 个，并且位换记号涉及的数字最高到 5 （即一个小球最多在空中停留 5 拍）。我们可以认为，任何一个接抛动作完成的瞬间，所有 3 个小球就都在空中了；其中 1 个小球刚被抛起，其余小球则早已抛出，正处于上升或者下降的过程中。不管怎样，从此刻算起， 3 个小球落回手中所需要的拍数一定各不相同，并且都不会超过 5 。我们可以用一个 5 位 01 串来表示接下来这 5 拍的“占用”情况，数字 1 表示有小球会落回来，数字 0 表示没有小球会落回来。例如，如果完成某个接抛动作后， 3 个小球分别将在第 1 、 2 、 5 拍之后落回手中，我们就用 11001 来表示此时的状态。可以看出，在 3 球瀑泻中，完成任何一个接抛动作后，状态都是 11100 。</p>\n<p>假设有 x 和 y 两个 01 串。把 x 的第一位去掉，再在最后面添一个数字 0 。如果此时 x 的第 h 位正好是数字 0 ，并且把它改为 1 之后，整个 01 串正好就变成 y 了，我们就说 x 可以通过动作 h 转换为 y 。它的直观意义就是，如果当前状态为 x ，那么下一个接抛动作可以是 h ，该动作完成后状态就会变成 y 。例如， 11100 可以通过动作 4 转换为 11010 ，也可以通过动作 5 转换为 11001 。</p>\n<p>5 位 01 串中有 3 个数字 1 ，这一共有 C(5, 3) = 10 种可能性。让我们在纸上把这 10 种可能性全部写下来。如果某种状态能通过某个动作转换为另一种状态，我们就从前一种状态出发，画一根箭头指向后一种状态，并在路上标出动作的数值。注意，一个状态有可能转换为它本身，例如 11100 能通过动作 3 转换为它本身。我们就画一个箭头，从它出发，绕个小圈，指向它自己。另外，你会发现，以数字 0 开头的状态无法转移到任何其他状态，否则数字 1 的个数就不对了；更直观的说法则是，到了这种状态显然必死，因为下一拍就没有小球接了。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092035.png" alt="" width="545" /></p>\n<p>所以，只要沿着箭头走，路上经过的数字就自动地组成了合法的动作序列！而一个合法的位换记号，比如说 3 、 51 、 441 、 531 、 5313 等等，其实就是这个图上的回路！杂耍模式之间的衔接问题，也就解决了：我们只需要看看，能否从前一个回路的某个节点出发，沿着箭头走到另一个回路里去。比方说，你本来玩着 3 球瀑泻，突然想玩 3 球倾盆了。于是，你可以用动作 4 进行衔接，按照 33&#8230;345151&#8230;51 的规律抛球。什么时候你又想回到 3 球瀑泻的玩法，你就可以用动作 2 进行衔接，按照 5151&#8230;51233&#8230;3 的规律抛球。当然，你也可以用动作 41 进行衔接，按照 5151&#8230;514133&#8230;3 的规律抛球。下图所示的就是位换记号 333451515141 （这次我们有意没按字典序最大原则对其进行重写）及其演示动画，它就是由 3 球瀑泻和 3 球倾盆组成的大循环，中间分别以 4 和 41 衔接。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092036.gif" alt="" width="120" /><img src="http://www.matrix67.com/blogimage_2016/2016092037.png" alt="" width="480" style="margin-bottom: 30px" /></p>\n<p>用这种方法，我们可以搞出像 333451515141 这样很长很长，很复杂很复杂，却没啥实质意义的位换记号——它仅仅是由一些更基本的位换记号拼成的。</p>\n<p>在状态图中，如果一条回路经过了某个重复的节点，我们就可以把它视作两个以该节点为公共节点的小回路。如果某个小回路仍然经过了重复的节点，我们还可以继续把它分解成两个更小的回路，直到每个回路都被分到不可再分（即都分到不再经过重复的节点）。</p>\n<p>如果一个位换记号在状态图中不会经过重复的状态，我们就说这是一个“素位换记号”（prime siteswap）。根据上述推理，如果一个位换记号不是素位换记号，那么它一定能看作是由若干个素位换记号组合而成的。例如， 333451515141 就是由三个 3 、三个 51 和一个 441 组成的。我们前面提到过 531333&#8230;33 的模式，其实也就是由一个 531 和任意多个 3 组成的。</p>\n<p>正如化学元素按一定规律适当组合后，可以得出千千万万的物质一样，素位换记号按一定规律适当组合后，也会得出千千万万的杂耍模式。也就是说，素位换记号对应着杂耍模式的基本组成单元。从这个意义上说，寻找所有的素位换记号，比生成所有合法的位换记号更为重要。为了找出所有的素位换记号，我们只需要在状态图中找出所有不经过重复节点的回路。当小球数为 3 时，所用数字不超过 5 的素位换记号一共有 8 个，它们是：</p>\n<p class="indent">3, 42, 51, 441, 522, 531, 5241, 5511</p>\n<p>把它们掌握了之后，就能变幻出形形色色更复杂的杂耍模式了。</p>\n<p>我们从几个最基本的杂耍模式，说到了位换记号与平均数定理，说到了排列测试与位换记号的生成方法，说到了状态图与素位换记号。但是，刚才的一切仅仅是假设，左右两只手是在交替地接抛一个又一个的小球。如果两只手是同步运作的呢？或者，如果每次可以接抛不止一个小球呢？或者，如果我们有两个杂耍者，他们互相之间还能把小球扔给对方呢？我们又应该用什么记号来表示它们呢？刚才提到的结论能否继续扩展到这些情况呢？感兴趣的朋友不妨看看 Burkard Polster 的 The Mathematics of Juggling 一书。这篇文章中的内容主要也都是从这本书里来的。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/2016092038.gif" alt="" width="150" /> &nbsp;&nbsp; <img src="http://www.matrix67.com/blogimage_2016/2016092039.gif" alt="" width="150" /> &nbsp;&nbsp; <img src="http://www.matrix67.com/blogimage_2016/2016092040.gif" alt="" width="225" /></p>\n<p>整篇文章以视频开头，不妨让我们以视频结尾吧。下面这个视频来自 <a href="https://www.youtube.com/watch?v=e5E84ePfEOw">https://www.youtube.com/watch?v=e5E84ePfEOw</a> 。看了这个视频后你就会了解到，这篇文章探讨的，真的只是最基本最基本的杂耍而已。</p>\n<p style="text-align: center"><video width="94%" controls><source src="http://www.matrix67.com/blogimage_2016/2016092041.mp4" type="video/mp4">Your browser does not support the video tag.</video></p>\n	40a2067f37053f5134a9c8f53d3ef939e6412a88	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.837832	43	http://www.matrix67.com/blog/archives/6896#comments		'+1':1643 '+2':1644 '/watch?v=e5e84epfeow':2120 '0':1106,1119,1145,1148,1179,1184,1277,1286,1295,1302,1338,1344,1351,1358,1459,1460,1649,1698,1712,1757,1772,1842,1873,1879,1945 '01':1832,1867,1884,1913 '1':500,960,1037,1043,1058,1062,1068,1093,1107,1110,1120,1123,1131,1133,1146,1149,1159,1163,1178,1185,1211,1217,1246,1261,1267,1281,1289,1296,1303,1318,1339,1345,1352,1359,1441,1442,1445,1487,1491,1505,1603,1605,1650,1653,1690,1700,1706,1713,1716,1727,1732,1758,1761,1764,1819,1839,1848,1881,1917,1948 '10':1922,1925 '11001':1853,1910 '11010':1906 '11100':1861,1902,1934 '1985':399,475 '1993':918 '1995':1573 '2':147,401,505,512,1051,1094,1108,1121,1134,1144,1150,1164,1181,1186,1212,1218,1247,1262,1284,1292,1297,1304,1309,1324,1340,1346,1353,1360,1446,1493,1508,1560,1564,1567,1651,1691,1702,1714,1728,1733,1759,1765,1849,1990 '2016':4 '3':23,68,105,152,189,199,203,207,210,286,355,444,447,516,521,566,572,577,602,606,626,741,801,803,805,812,822,830,876,888,1018,1053,1065,1095,1135,1142,1158,1160,1161,1165,1182,1187,1213,1219,1248,1263,1279,1287,1298,1300,1315,1330,1341,1347,1349,1361,1447,1451,1457,1458,1495,1511,1677,1729,1734,1766,1786,1789,1794,1797,1806,1816,1825,1846,1857,1915,1921,1936,1958,1972,1975,1987,1995,2004,2011,2013,2045,2058,2072,2080 '30':8 '32':50 '33':1982,2053 '333':814,877,890,893 '3333':824 '33333':832 '333451515141':2007,2022,2043 '342':901,903 '345':545 '345151':1983 '39':15 '4':60,123,137,155,227,232,236,265,287,312,319,405,429,452,455,568,573,579,588,639,655,657,660,1129,1130,1140,1166,1172,1180,1188,1249,1259,1270,1283,1290,1299,1301,1321,1342,1348,1350,1362,1443,1448,1452,1455,1475,1478,1497,1499,1503,1514,1519,1521,1611,1670,1672,1675,1904,1979,2016 '41':1999,2018 '42':2081 '423':896,899,913 '441':855,857,868,871,874,879,881,884,906,910,915,1127,1191,1545,1960,2049,2083 '453':547 '45641':1623,1625,1633 '5':58,76,98,157,216,219,288,436,439,570,574,581,600,604,1138,1157,1167,1171,1176,1250,1260,1273,1312,1327,1332,1336,1356,1609,1616,1809,1811,1828,1830,1834,1850,1908,1911,1920,2075 '51':583,1959,1984,2047,2082 '51233':1994 '514133':2003 '5151':1993,2002 '522':2084 '5241':2086 '5253b':411 '53':591,634 '531':817,819,838,844,852,878,1961,2056,2085 '5313':827,839,845,1962 '53133':834,840,847,1154,1193 '531333':841,2052 '534':463,466,543,592,615,620,635,731,735 '5511':2087 '552':1548,1554 '5551':593,631,636 '6':39,84,1139,1170,1440 '6114':714,1434,1462 '61146114':718 '633':737,748 '64145':1635 '663':1549,1555 '7':6,12,117,1173,1450 '71':584 '774':1550,1557 '8':10,21,46,1174,1453,1679,2077 '9':559 '91':585 'a':754,761,769,776,976,982,986,993,1021,1025,1028,1033,1039,1047,1055,1061,1227,1237,1240,1253,1266,1269,1367,1371,1382,1390,1397,1411,1415,1480,1485,1490 'adam':494 'allen':920,1084 'average':647 'b':755,763,771,774,978,980,988,990,1023,1030,1035,1041,1049,1057,1059,1228,1238,1241,1254,1308,1311,1368,1376,1385,1392,1395,1407,1481,1492 'bengt':486 'browser':87,109,126,2125 'bruce':483 'burkard':2106 'burrage':43 'c':1229,1234,1242,1255,1314,1317,1482,1494,1919 'cascade':256 'chalcraft':495 'colin':491 'combat':29 'convention':19 'cyclic':540 'd':758,772,777,1230,1235,1243,1256,1320,1323,1365,1379,1387,1393,1398,1404,1408,1412,1414,1483,1496 'day':490 'does':88,110,127,2126 'e':1231,1236,1244,1257,1326,1329 'european':17 'fight':25 'fountain':262 'gif':374,386 'graph':1804 'h':1877,1891,1898 'i':1373,1378,1383,1386,1400,1403,1409,1413,1416,1589,1594 'imagemagick':370 'j':1591,1595,1655,1657,1660,1663,1667 'jochen':35,56,80,100 'juggler':391 'juggling':18,30,366,2112 'klimek':481 'knutson':921,1085 'l':678,689,693,697,701,928,935,941,946,964,971,995,999,1090,1096,1099,1101,1104,1109,1112,1117,1122,1214,1220,1423,1474,1580,1585,1586,1598,1599,1628,1645,1647,1652,1683,1686,1692,1695,1705,1710,1715,1719,1722,1730,1735,1738,1747,1755,1760,1767,1769 'lab':367 'luke':42,62,82,119,135 'magnusson':487 'martin':1575,1743 'mathematica':362 'mathematics':2110 'michael':489 'n':240,243,246,248,252,258,264,275,277,285,311,318,675,686,692,696,699,930,933,937,943,948,967,973,997,1001,1071,1073,1076,1079,1582,1593,1601,1630,1724,1740,1749 'night':26 'not':89,111,128,2127 'of':2111 'paul':480 'permutation':1196 'pfeiffer':36 'polster':2107 'prime':2037 'probert':1576,1744 's':392 'shift':541,1542 'shower':271 'site':781 'siteswap':470,2038 'state':1803 'support':90,112,129,2128 'swap':782 'tag':93,115,132,2131 'test':1197 'the':91,113,130,646,2109,2129 'theorem':648 'tiemann':484 'vertical':1541 'video':92,114,131,2130 'world':393 'wright':492 'www.youtube.com':2119 'www.youtube.com/watch?v=e5e84epfeow':2118 'x':1863,1870,1875,1889,1896 'y':1865,1886,1893,1900 'your':86,108,125,2124 '一个抛得更高的':625 '一个杂耍模式的位换记号往往不是唯一的':537 '一个状态有可能转换为它本身':1932 '一书':2113 '一切合法的位换记号都能通过排列测试':1428 '一定都恰好等于这个循环里所有小球在空中停留的时间之和':673 '一拍':178 '一样':414 '一直减小到':1075 '一直到一行全是':1704 '一般地':752 '一行全是':1697,1699,1701 '三个':2046 '上面这些杂耍模式之所以是':181 '下图所示的就是位换记号':2006 '下才会被接住':437,445,453 '下次扔出的球':441 '下面三个动画分别是':1553 '下面三个动画展示的分别是':843 '下面这个视频来自':2117 '不可能比':1040 '不妨从右手扔出最高的那一次球开始算起':432 '不妨用':239 '不妨让我们以':1473 '不妨让我们以视频结尾吧':2116 '不妨让我们换个思路':727 '不是一个合法的位换记号':1435 '不然大家肯定又会问':360 '不相等':1031 '不知道大家有没有发现':633 '不知道有没有人仔细看过视频后':133 '不管它被哪只手扔了出去':231 '不管怎样':1823 '不管是什么顺序':1516 '不能通过排列测试':1463 '不能针对对方的手臂和身体':72 '不见得是一个合法的位换记号':705 '不过':280,303,1437,1680 '不难看出':1275 '与':1029 '与原杂耍模式的小球数是相同的':796 '世界排名第二的':55 '两个':1866 '两个数字':756 '两位老将均以完胜的成绩轻松进入':49 '两只手各自独立地抛耍':146 '两名选手各自抛耍':67 '个':1723,1807,2078 '个不同的地方':1522 '个余数仍然既无重复又无遗漏地包含了':1357 '个余数既无重复又无遗漏地包含了':1337 '个区间':204 '个单位':1661,1673 '个单位后':1693 '个单位的时间':661,690 '个单位的油':658 '个小球':208,220,676,687 '个小球分别将在第':1847 '个小球刚被抛起':1820 '个小球就都在空中了':1817 '个小球落回手中所需要的拍数一定各不相同':1826 '个数字':936,947,972,996,1000,1916 '个数的平均数正好就是':1739 '个数的总和':1720 '个方格':1617 '个杂耍棒':69,124,138 '个杂耍棒且任意时刻至少有一个杂耍棒在空中':106 '个点':1506,1509,1512,1515 '个物体':148,153 '个物体和抛耍':156 '个物体时最基本的杂耍模式':158 '个结果正好构成':1118 '个结果除以':1100 '个落点正好是某个循环节中的第':1504 '个落点正好涵盖了循环节中的':1520 '中':719 '中间分别以':2015 '中间那个的位换记号里有偶数':607 '串':1868 '串中有':1914 '串来表示接下来这':1833 '串正好就变成':1885 '为了找出所有的素位换记号':2069 '为了给第':1654 '为了解决这类问题':1800 '为了证明如此得到的数字串一定是合法的位换记号':1637 '为什么一切合法的位换记号都能通过排列测试呢':1198 '为什么不在杂志上教大家一些新的杂耍技巧呢':396 '为例':1476 '为偶数时':249,259 '为奇数和':247 '为奇数时':253 '举个例子':1125 '之前我们曾经提到过':1153 '之前我们说过':1433,1562 '之前拿过':38,45 '之前观察到的现象和规律':594 '之后':1271,1882 '之和':1725 '也一定都是合法的位换记号':1471 '也不会出现油慢慢就不够了的情况':671 '也不会改变位换记号中的所有数字之和':791 '也会得出千千万万的杂耍模式':2063 '也可以通过动作':1907 '也就是上面三个动画中的中间那个动画':238 '也就是说':163,290,551,1517,1640,2064 '也就能反过来变出每个合法的位换记号了':1003 '也就解决了':1966 '也正因为这样':870 '也照样能通过排列测试':1207 '习惯上':1631 '了':907,1077,1080,1664,1668,1887 '事实上':273,528,640,1038 '事实上确实如此':751 '事实正是如此':1208 '于是':397,836,1527,1977 '于是在对方满地捡棒子时':121 '于是得到':816,854,895,1622 '于是我们得到':694 '人们不但可以借助它进行交流':419 '人们凭借想象':860 '人们发明了另一种强大的杂耍模式分析工具':1801 '人们找到了很多新的杂耍模式':867 '人们通常会选择使用字典序最大的那个记法':550 '人们通常会选择直接把这个小球握在手中停留':511 '人们通常假设':557 '什么时候你又想回到':1986 '今后':167 '从':1793 '从中任意选出':1615 '从它出发':1939 '从对方手中抢来了一个杂耍棒':120 '从左至右读出各列的数字':1621 '从此刻算起':1824 '从而得出新的杂耍模式呢':729 '从身体背后扔过来':532 '从这个意义上说':2066 '他们互相之间还能把小球扔给对方呢':2102 '以':57 '以前':859 '以前每篇文章的图片和动画都是我用':361 '以及来自英国剑桥的':488 '以及某个循环节中的第':1513 '以后真的出书时该怎么办呢':378 '以数字':1944 '以符合字典序最大的原则':1636 '任何一个位换记号长度为':940 '任何一个接抛动作完成的瞬间':1814 '任何一个杂耍棒都没有在两手之间交替':142 '任何一方都可以故意上前干扰另一方':70 '会出现什么有意思的结果':738 '但仍然不是合法的位换记号呢':1467 '但却不想停下重来':1791 '但只能针对对方手中的或者空中的杂耍棒':71 '但在位换记号提出之前':863 '但在只有纸媒的时代':388 '但它就不是一个合法的位换记号':716 '但是':668,2094 '但是他的动作好赖皮呀':139 '但用平均数定理却无法检验出来':1436 '但要保证任意两个方格既不同行也不同列':1618 '但要想利用位换记号创造新的杂耍模式':725 '但还是对第一个和第三个数字进行位换':825 '但这篇文章还真不是':364 '位':1831,1912 '位换':780 '位换后':1388 '位换后还能变出':833 '位换操作不会改变所有数字的平均数':793 '位换操作很强大':797 '位换操作还可以和循环移位配合着使用':917 '位换记号':1,469,786 '位换记号中不会有大于':558 '位换记号中所有数字的平均数':642 '位换记号只告诉了你扔出的球需要多久之后回到手中':529 '位换记号可以很好地描述杂耍模式':724 '位换记号并不能解决杂耍表演者会遇到的全部问题':1783 '位换记号是非常直观的':497 '位换记号最早是由谁想出来的':471 '位换记号起源于':474 '位换记号里的所有数字之和等于':695 '位正好是数字':1878 '余数会按照':1294 '你也可以用动作':1998 '你会发现':739,1524,1943 '你可以从胯下扔上来':531 '你可以用动作':1978 '你就可以先画一个':1584 '你就可以用动作':1989 '你就知道了':767 '你就该观察各种细节':329 '你有何感想':322 '你本来玩着':1971 '你甚至可以对':800 '你的第一反应会是':324 '你说这些新的杂耍模式都是谁想出来的':336 '你这网站上写的东西今后肯定是要出书的吧':333 '使得':520 '使得在另一只手完成动作后':508 '使得杂耍模式无法持续下去':722 '使用循环移位操作':955 '使用第一位数字最大的记法':552 '例如':1543,1607,1844,1901,1933,2042 '例如把':542 '依次与':1132,1162 '依次记下每次扔出的球会在空中停留几拍':426 '倒也有':268 '倾盆':270 '倾盆也算是非常基本的一种杂耍模式了':295 '倾盆可以适用于一切的':274 '倾盆的效果确实差了一些':305 '假设在做第':1017 '假设我们对相隔':1364 '假设有':1862 '假设某个数字串原本是':1226 '假设某个杂耍模式有':674 '假设这个长度为':1477 '做一次位换':991 '做一次位换后得到数字串':987 '做出了一个非常漂亮的防守动作':101 '做的':363 '先对某个单数字的位换记号进行扩写':923 '先扩写成':813 '先赢':75 '其中':1156,1818 '其中小于等于':1771 '其位换记号从左至右依次为':590 '其位换记号的长度为':677 '其余小球则早已抛出':1821 '其原理也可以用排列测试来解释':1578 '其实':785,882,912,1751 '其实中间那个杂耍模式中':345 '其实也就是由一个':2055 '其实就是因为':183 '其实就是这个图上的回路':1964 '典型的一局比赛大致就像下面这样':78 '再举个例子':1152 '再以某种顺序减去':1731 '再以某种顺序加上':1726 '再在最后面添一个数字':1872 '再对':902 '再过相同的时间后就又该轮到右手接住某个小球并把它抛出':166 '再通过适当的循环移位和位换操作':924 '写作':1634 '出发':949,1002 '出现了很多漂亮的瞬间':95 '分别加':1444 '分别对应右':616 '分别就是这':1498 '分别换成什么数字':764 '分析':1780 '列填入':1592 '列循环上移':1671 '列所圈的数字':1656 '则会变成':1285,1288,1291 '则使用它们之中第二位数字最大的记法':554 '则在同样的位置上对数字串':989 '则输出该数字串':953 '刚好大':1042 '刚才对瀑泻和喷泉的分析':424 '刚才我们展示了三种非常高级的':428 '刚才提到的结论能否继续扩展到这些情况呢':2104 '刚才的一切仅仅是假设':2095 '利用':1742 '到了这种状态显然必死':1951 '到时候出书时只能不用这篇文章了呗':380 '到此为止':1082 '前者还是要与':1399 '动画就行了':387 '占用':1836 '即':698 '即一个小球最多在空中停留':1810 '即使所有数字的平均数是个整数':711 '即都分到不再经过重复的节点':2033 '却没啥实质意义的位换记号':2025 '原来':1239 '原来的位换记号不会出现撞车的情况':745 '又会变回成数字串':992 '又该如何去切换呢':1799 '及其演示动画':2009 '反过来':1429 '发明了一种生成新杂耍模式的傻瓜方法':1577 '发明创造了各种各样的杂耍模式':861 '发现了一个有趣的细节':134 '变为':544 '变出':909 '变成':900,1268,1310,1316,1322,1328,1676 '变成了':1391,1396 '另外':556,983,1569,1717,1942 '只不过颠倒了而已':1420 '只是颠倒了而已':1425 '只要它能在正确的时候被接住就行了':535 '只要它除以':1685 '只要沿着箭头走':1954 '只需要发个':385 '可以依次得到':1547 '可以得出千千万万的物质一样':2061 '可以把':898 '可以看出':1855 '可以看到':222,234,1570 '可以简单有效地表示出各种杂耍模式就好了':418 '可以说':1778 '可以通过动作':1890,1903 '可得':1449 '可能会有重复':1777 '右':618,622 '右手':172 '右手做个':599 '右手再做个':603 '右手接住某个小球并立即把它重新抛出':164 '右手立即接到该球并把它抛到更高的地方':292,294 '右手还是出现了自己扔给自己的情况':346 '右边那个本质上就是':624 '各列所圈的数字分别':1642 '各项依次减去':1763 '同时':611 '同时使得第二位数字和第一位数字不同':957 '后者还是要与':1402 '向下走就加':1604 '向其他人展示某种杂耍模式':384 '向后翻腾两周半转体一周半屈体':413 '否则数字':1947 '否则这两个地方扔出的小球会撞车':1044 '和':81,485,493,546,762,846,1022,1192,1384,1410,1556,1864,2017 '和一个':2048 '和之前那些位换记号变换法不同的是':1571 '和任意多个':2057 '和瀑泻比起来':304 '咦':349 '哦':340,347 '哼哼':334 '喷泉':261 '嗯':1007 '因为下一拍就没有小球接了':1952 '因为在此期间反正这只手也不需要干别的':514 '因为它的位换记号的长度为奇数':613 '因为它的位换记号的长度就是最短的':597 '因为它记录的本质上就是杂耍时的一个个接抛动作':498 '因为把小球扔这么高是不太现实的':561 '因为最后我们只关心它除以':1682 '因此':792,1046,1536,1736 '因此上述推论还可以重新叙述为':1114 '因此为了得到位换记号长度为':927 '因此它里面就会出现':608 '因此我们只需要说明':1204 '因此把任意一个合法的位换记号输入进去':1014 '图中':193 '圆圈里的数会从':1674 '圆圈里的数就自动地':1662 '圈出的数除以':1709 '在':398,717,1126,1856 '在不违规的情况下':103 '在任何一种杂耍模式中':160 '在位换前和位换后':1418 '在位换记号理论的帮助下':866 '在数字串中':778 '在杂耍斗的圈子里':32 '在每个循环里':679,683 '在状态图中':2027 '在第':97 '在荷兰的阿尔梅勒举行':20 '在这个例子中':461 '在这种情况下':223 '在遇到数字':1563 '垂直移位':1540 '垂直移位可以改变杂耍模式中的小球数':1572 '多补几个循环节就行了':809 '大家一定要体会到科技的进步':382 '大概就是这样':458 '夺得了又一个搏击之夜的冠军':63 '奇数意味着应该往另一只手的方向扔':527 '好像我们漏掉了什么吧':1006 '好像确实是不同的':342 '好像这个杂耍模式中':351 '好吧':358 '如右图所示':1619 '如果一个位换记号不是素位换记号':2040 '如果一个位换记号在状态图中不会经过重复的状态':2034 '如果一个数字串能通过排列测试':1533 '如果一条回路经过了某个重复的节点':2028 '如果两只手是同步运作的呢':2097 '如果位换记号中所有数字都相同':1200 '如果位换记号中有':753 '如果位换记号里有一个数字':654 '如果你想要一个循环节长度为':1579 '如果你愿意':799 '如果你玩了一段时间的':1785 '如果原来余数是':1276,1280 '如果原来的':1335 '如果各列分别循环上移':1689 '如果完成某个接抛动作后':1845 '如果对数字串':985 '如果当前状态为':1895 '如果我们刚才选择把':821 '如果我们有两个杂耍者':2101 '如果所有数字的平均数根本就不是整数':707 '如果把':734 '如果把小球的轨迹连同这些数字标记一并画出':457 '如果把数字':1484 '如果换用排列测试来检验':1438 '如果数字':1370 '如果数字串':975 '如果数字串里的所有数字都相同':952 '如果有多个第一位数字最大的':553 '如果某个小回路仍然经过了重复的节点':2030 '如果某种状态能通过某个动作转换为另一种状态':1927 '如果此时':1874 '如果每个小球都在空中停留':188,215,226 '如果每次可以接抛不止一个小球呢':2099 '如果知道了排列测试理论':1752 '如果输入的位换记号中所有数字的平均数是':1070 '如果这个数字串能通过排列测试':1501 '如此得到的一定是合法的位换记号':1774 '如此得到的数字串一定能通过排列测试':1639 '它也就不是合法的位换记号了':1464 '它仅仅是由一些更基本的位换记号拼成的':2026 '它们分别对应抛耍':151 '它们刻画的显然是同一个杂耍模式':548 '它们是':2079 '它们是最基本的杂耍模式':576 '它们相隔':757 '它们都是新的杂耍模式':1552 '它们除以':1141,1175,1454 '它可以生成各种杂耍模式的':373 '它太水了':282 '它就是一个抛得更高的':354 '它就是由':2010 '它是一种支持位换操作的记号':788 '它是杂耍斗':28 '它的动作是左右对称的':612 '它的动作要领显然就是三个相同的大动作加上一个小动作':629 '它的发明和传播':477 '它的直观意义就是':1894 '它连排列测试都通得过':1466 '完全是我的手在抛出它时给予它的':652 '完成任何一个接抛动作后':1859 '实际表演时':510 '容易验证':984 '对':851,892,1544 '对于任意一个合法的':1088 '对于任意一个固定的小球来说':230 '对于任意正整数':1754 '对于杂耍表演者来说':496 '对合法的位换记号进行位换操作':783 '对应于一种全新的杂耍模式':750 '对应相加':1097,1215,1221,1251,1264 '对第一位数字和第二位数字进行位换操作':958 '寻找所有的素位换记号':2067 '寻找新的杂耍模式':421 '将':1756 '将会变成':1056,1060 '将它的各个数字分别与':1092 '将循环移位过的数字串与':1210 '将最大数字挪至第一位':956 '小球也就会在空中停留':659 '小球们的高度是如何变化的':197 '小球停留在手中的时间忽略不计':175 '小球数为':1581,1610,1748 '少了点':306 '就会得出新的杂耍模式':1538 '就分别对应左':621 '就可以得到':905 '就好像跳水中':410 '就应该与':1258 '就意味着我应该把小球越得越高':525 '就是一个合法的位换记号':1626 '就是一个新的杂耍模式':820 '就是由三个':2044 '就没有什么左右手能互相传递小球的杂耍模式吗':267 '就用哪只手接住':141 '就能交换它们的落点呢':765 '就能变出一切合法的位换记号':925 '就能变幻出形形色色更复杂的杂耍模式了':2089 '就能立即见效了':1439 '就表示':501,506,517 '就表示此时抛出小球的动作相当于给小球加了':656 '就说明这':1502 '局比赛':85 '局比赛中':99 '局比赛出现了更有意思的局面':118 '局者获得比赛的胜利':77 '届欧洲杂耍大会':16 '左':617 '左了':623 '左右两只手一定是交替地':161 '左右两只手是在交替地接抛一个又一个的小球':2096 '左右开弓':307 '左右手的动作是完全对称的':352 '左手':171 '左手也出现了这种情况':348 '左手做个':601 '左手再做个':605 '左手接住并水平抛出某个小球':291 '左手的顺序轮流完成':173 '左边那个动画是这篇文章中第一次出现的位换记号里含有数字':1559 '左边那个的循环长度确实是最短的':596 '平均数为':966,1629 '平均数定理':645 '平均数定理有一个重要的推论':703 '年':5,919,1574 '年左右':476 '年第':400 '并不需要那么复杂':911 '并且':1027 '并且不会因此而引入新的最大数':1069 '并且不管':276 '并且位换记号涉及的数字最高到':1808 '并且偶数意味着应该竖直向上扔':526 '并且在每一个循环节中':742 '并且它的长度为':1627 '并且把它改为':1880 '并且都不会超过':1827 '并在淘汰赛阶段过关斩将':52 '并在路上标出动作的数值':1930 '并给它们起了各种各样的名字':862 '应该与':1245 '开头的状态无法转移到任何其他状态':1946 '弧线则表示随着时间的流逝':196 '强':51 '当':251,257,310 '当且仅当它能通过排列测试':1530 '当小球数为':2071 '当然':908,1665,1782,1997 '很复杂很复杂':2024 '很多简单的玩法都没被发现':865 '得到':1169 '得到的仍然是合法的位换记号':784 '得到的当然就是':826 '得到的数字串显然仍能通过排列测试':1535 '得到的结果为':1137 '循环':464 '循环移位':539,897 '循环移位后':1232 '循环移位后能变成数字串':977 '德国选手':34 '必然就不是合法的位换记号了':1431 '总之':523 '情况':1837 '情况就不一样了':229 '想换一种':1788 '感兴趣的朋友不妨看看':2105 '我们介绍一种非常直观的证明方法':650 '我们从几个最基本的杂耍模式':2090 '我们会把':1632 '我们假设杂耍过程中':179 '我们假设每次接抛动作都是瞬间完成的':174 '我们刚才介绍的那些杂耍模式':564 '我们刚才是用':875 '我们前面提到过':2051 '我们又应该用什么记号来表示它们呢':2103 '我们只需要在状态图中找出所有不经过重复节点的回路':2070 '我们只需要看看':1967 '我们只需要说明':1638,1641 '我们可以保持圆圈的位置不变':1658 '我们可以对位换记号中的数字进行':538 '我们可以搞出像':2021 '我们可以用一个':1829 '我们可以认为':1813 '我们可以证明':1469 '我们就从前一种状态出发':1928 '我们就可以把它视作两个以该节点为公共节点的小回路':2029 '我们就完整地证明了':1083 '我们就用':465,1852 '我们就用数字':438,446,454 '我们就画一个箭头':1938 '我们就能得到所有合法的位换记号':1776 '我们就证明了':1427 '我们就说':1190,1888 '我们就说这是一个':2035 '我们就需要':218 '我们应该把':768 '我们必须先把单个数字':932 '我们把某只手接住并抛出某个小球叫做一次':168 '我们用':209 '我们知道了':837 '我们终于有了一套描述':1779 '我们记下的数字形成了':462 '我们证明了这样一个非常终极的结论':1528 '我们还会把相邻两次接抛之间的时间叫做':177 '我们还可以对位换之后的结果再做位换':849 '我们还可以继续把它分解成两个更小的回路':2031 '我们还得证明':1009 '我们还有更直接的办法来生成新的杂耍模式':1753 '我们选的这':1718,1737 '我们预言':747 '我估计':323 '我先专门说一下这些动画是怎么变出来的吧':359 '我应该把刚接到的球扔得更高一些':518 '我应该把刚接到的球竖直向上扔一点':507 '我应该把刚接到的球近乎水平地扔向另一只手':502 '我想要生成一个循环节长度为':1608 '我操':331 '我画出的方阵就应该如左图所示':1613 '我的手一共给小球加了多少油呢':680 '我看到时候这篇文章的动画你怎么处理':335 '或者':2098,2100 '或者该冒出各种怪异的想法了':330 '或者说一种':416 '或许也会反映在这些符号当中':423 '或许你自己没事儿时也偷偷尝试过':296 '或许还能通过摆弄这些符号':420 '所以':381,723,744,938,1334,1426,1707,1741,1953 '所以如果原来可以形成排列':1223 '所以当':245 '所以答案就是':691 '所在的位置看作第':1486 '所得的':1098,1116 '所得的杂耍模式叫做':254,260 '所有':1815 '所有小球在空中大致排成一个半圆':301 '所有小球在空中总共停留了多少时间呢':684 '所用数字不超过':2074 '才能让双手不会闲下来':221 '扔出一个抛物线':519 '扔地上反弹回来':534 '扔头上顶一会儿':533 '扩写成':823,831,889,934 '把':773,811,829,1265,1307,1313,1319,1325,1869 '把任意一个合法的':962 '把任意一个合法的位换记号输入该算法':1010 '把它们掌握了之后':2088 '把这一列数整体循环上移':1659 '把这部分示意图平铺开来':1523 '抛耍':154 '抵挡住对手进攻的':107 '拍':190,200,217,228,513,1568,1812 '拍之后另一只手正好能接住它':522 '拍之后它将回到同一只手中':233 '拍之后落回手中':1851 '拍的':1835 '拍的两个数字':1366 '拍的距离':759 '指向它自己':1941 '按上述步骤做加法并取余':1115 '按此规律修改某两个数字的操作就叫做一次':779 '按照':1343,1981,1992,2001 '按照大多数人的理解':159 '换句话说':1032,1293 '换成':770,775 '排列测试':1195 '排列测试与状态图':2 '排列测试比我们之前说过的平均数定理检验法更为强大':1432 '接下来':176,328,891,1620 '接下来我们只需要说明':939 '接抛':169 '接抛动作将会以右手':170 '控制至少':104 '插进去一个简单的水平抛掷':357,628 '搜索与':297 '撞车':721 '改成':736 '效果非常糟糕':408 '数字':499,504,515,1389,1394,1838,1841 '数字串':979 '数字串中都会有某个最大数减小了':1067 '数字串变成了':1233 '数字串的头两个数字是':1020 '数字串里所有数字的平均数都是':638 '数字越大':524 '整个':1883 '整个杂耍模式其实就是两个动作不断重复':598 '整个杂耍模式的循环节长度仍然是':740 '整篇文章以视频开头':2115 '新的':1355 '新的位换记号也不会出现撞车的情况':746 '方阵里的数除以':1694 '无法通过排列测试的':1430 '既不会出现剩余的油越积越多的情况':670 '既然每个合法的位换记号都能变成':994 '既然由此出发':1202 '既然这些循环能够一个接一个地无限持续下去':669 '日':13 '日凌晨的搏击之夜':24 '日至':9 '时':266,313,1565,2073 '时倾盆的演示动画吧':289 '时的杂耍模式':320 '是':341 '是一种新的合法的位换记号':749 '是奇数还是偶数':278 '是整个数字串中最大的数':1026 '是杂耍界里颇有影响力的杂志':394 '是的':1008 '显然':681 '显然也能通过循环移位变成数字串':981 '更直观的说法则是':1950 '最右边那个图我好像看出些名堂来了':353 '最后我们展示了三种':587 '最基本的杂耍模式':182 '最左边那个的循环长度明显要短得多':344 '最终':54 '最终变成':970 '最终成功在决赛场上相遇':53 '月':7,11,22 '有':316 '有两个响当当的大名你必须要知道':33 '有些空中的小球消耗的还是上一个循环里加的油':665 '有关的插图插画':299 '有时也不是真的':1666 '有没有什么数字串':1465 '有的地方把这种改造位换记号的操作叫做':1539 '有节拍地不断抛耍小球':162 '期的杂志中':402 '本来就应该与':1377 '本来应该与':1372 '本质上就相当于是将数字串与循环移位过的':1216 '杂志读者曾经问道':395 '杂耍':298 '杂耍中的数学':3 '杂耍斗是一种两人对战类的体育运动':64 '杂耍模式之间的衔接问题':1965 '杂耍模式的很多特征':422 '杂耍模式能永远持续下去':459 '杂耍界的人们直接管它叫':873 '杂耍者世界':390 '来':835 '来标记':440,448,456 '来看看下面三种':317 '来自加利福尼亚州圣克鲁斯的':479 '来自加利福尼亚理工学院的':482 '来表示杂耍模式中的小球数':241 '来表示此时的状态':1854 '来表示这种杂耍模式':467 '极大地方便了人们的交流':376 '枚举所有的可能性':1775 '果然':575 '某个循环节中的第':1507,1510 '某个数字串是一个合法的位换记号':1529 '根据上述推理':2039 '根据之前的算法步骤可知':1024 '模式':732,1155 '模式中':1128 '模式可以说是人们利用位换记号得到的最大的成果之一':858 '模式就不再有什么别的名字了':872 '模式就是最经典的例子之一':869 '横坐标表示时间':194 '次接抛':1488 '次接抛的落点位置':1500 '次搏击之夜的冠军':40,47 '正因为在这种最基本的杂耍模式中':242 '正处于上升或者下降的过程中':1822 '正好是':1147,1183 '正好轮到这只手重新把它接住':509 '正如化学元素按一定规律适当组合后':2060 '此时':212,549 '此时对应着小球数为':235 '步':961,1066 '步之后':1054 '步时':1019 '每一拍的时长都是相同的':180 '每个小球也都会交替地来到左手和右手上':224 '每个小球每次在空中停留的时间':651 '每个小球每次都被抛到了相同的高度':186 '每个小球的位置都会在左右手之间切换':279 '每个小球都会交替地来到左手和右手上':213 '每个小球都在空中停留了':198,688 '每个循环刚开始的时候':664 '每个循环快结束时':666 '每个杂耍模式的位换记号都是一串唯一确定并且没有歧义的数字了':563 '每个点都将会恰好有一接和一抛':1525 '每局比赛开始时':66 '每条弧线都横跨了':202 '每次位换既不会改变位换记号的长度':790 '每次接抛动作都是完全相同的':184 '每过一遍第':1064 '比':59,1034,1048 '比如':96 '比如把上图中的第':1669 '比如说':1957 '比方说':706,713,810,850,886,1225,1532,1970 '比方说用一种叫做':269 '比生成所有合法的位换记号更为重要':2068 '比赛规则非常简单':65 '没关系':808 '没想到这背后的水这么深':326 '沿着箭头走到另一个回路里去':1969 '注意':536,789,1931 '注意他在最后是如何改变自己的抛耍模式':102 '注意到':974 '演示动画':375 '瀑泻':255 '然后在第':1588 '然后对第一个数字和第三个数字进行位换':815 '然后左手接住并水平抛出下一个小球':293 '然后按照向右走就减':1602 '然后每个地方都可以选择再加上任意一个':1768 '然后用':369 '然后说位换':1363 '然后跳转到第':959 '然而':225,709,1306,1688 '片刻后就该轮到左手接住某个小球并把它抛出':165 '状态图':1802 '状态都是':1860 '现在':383,733,1016,1252,1614 '现在就会变成':1278,1282 '现在已经很难考证了':472 '球倾盆':578,580 '球倾盆了':1976 '球倾盆的位换记号分别是':582 '球倾盆组成的大循环':2014 '球喷泉':569 '球瀑泻':356,567,627,1787,1973 '球瀑泻中':1858 '球瀑泻出发':1795 '球瀑泻和':2012 '球瀑泻的位换记号分别是':571 '球瀑泻的位换记号是':804 '球瀑泻的玩法':1988 '球瀑泻进行位换操作':802 '球玩法':430,589,931,944,1790,1798 '球的新玩法':406 '生成':883 '生成杂耍模式的全套解决方案':1781 '用位换操作得到的新杂耍模式':795 '用位换记号都该怎么记呢':565 '用哪只手抛出的杂耍棒':140 '用这种方法':2020 '由于合法的位换记号经过循环移位和位换操作后仍然是合法的':1013 '由于循环移位和位换操作都不会改变位换记号的长度和平均数':926 '由于我们有':685 '由于缺乏系统的研究工具':864 '由于除以':1103 '由右手扔出':434,450 '由图可知':205 '由左手扔出':442 '画一根箭头指向后一种状态':1929 '画面内容基本上都是一个人把一堆小球从一只手扔到另一只手':300 '的':929,942,965,2108 '的一个排列':1124,1151,1189 '的个数就不对了':1949 '的位换记号':1091 '的位换记号输入该算法':968 '的余数':1684 '的余数一定是各不相同的':1102 '的余数也不会变':1424 '的余数会怎么变呢':1274 '的余数分别为':1177 '的余数分别是':1143 '的余数就会形成这样的情况':1696 '的余数是':1456 '的余数是对的就行了':1687 '的余数正好也就只有':1105 '的余数正好取遍':1648,1711 '的余数都会按照这样的规律发生变化':1333 '的值':1596 '的傻瓜方法':1745 '的办法生成的':880 '的地方必须加到变正才行':1773 '的奇偶性会导致如此大的区别':244 '的开源软件生成的':368 '的情况':237,610,1561 '的意思吗':632 '的感觉':308 '的成绩击败了世界排名第一的':61 '的数字串是':1479 '的数字出现':560 '的整倍数':1770 '的新杂耍模式':1583,1612 '的方阵':1587 '的方阵的最左上角填一个':1600 '的杂耍模式':1750 '的杂耍模式就行了':272 '的杂耍模式演示动画':1558 '的模式':2054 '的玩法':848 '的相加':1405 '的第':83,1876 '的第一个和第二个数字进行位换':853 '的第一位去掉':1871 '的第一位和第三位进行位换':904 '的第一位和第二位进行位换':894 '的素位换记号一共有':2076 '的结论':1086 '的规律发生变化':1305 '的规律填充整个方阵':1606 '的规律抛球':1985,1996,2005 '的规律整体一变后':1354 '目前一般认为':473 '目前世界排名第一':44 '目前世界排名第二':37 '直到完整地记下一个循环节为止':427 '直到最后没油了落回手中':662 '直到每个回路都被分到不可再分':2032 '相加':1136,1168,1374,1380,1401 '相加之后的结果就是':1406 '相加之后的结果是':1381 '相加之后的结果没变':1419 '相当于是':1721 '看了上面这三个动画':321 '看了这个视频后你就会了解到':2121 '看出来了吧':1417 '看看下图':766 '看着就觉得里面有好多数学原理':327 '真牛逼':325 '真的只是最基本最基本的杂耍而已':2123 '瞎写一串数字':704 '确实是一种基本的杂耍模式':149 '确实能够得到一个循环节长度为':1746 '种不同的线条分别表示出了它们的轨迹':211 '种可能':1113 '种可能性':1923 '种可能性全部写下来':1926 '究竟有没有什么看起来非常爽':314 '突然想玩':1974 '第':14,116,1052 '第一次抛出的小球和第三次抛出的小球都会交换落点':743 '第一次抛出的小球和第六次抛出的小球会':720 '第一轮的':614 '第三次扔出的球':449 '第二轮的':619 '等':1551 '等于位换记号里的所有数字之和除以':700 '等于这个杂耍模式中小球的个数':643 '等最大数不断减小':1074 '等等':350,555,1004,1703,1963 '答案是否定的':1468 '算法也就终止了':1081 '算法生成的自始至终都是合法的位换记号':1015 '算法结束':954 '类似地':214,828 '素位换记号':2036 '素位换记号对应着杂耍模式的基本组成单元':2065 '素位换记号按一定规律适当组合后':2062 '纵坐标表示高度':195 '组成的':2050,2059 '经过循环移位和位换操作后':1206 '结果会怎样呢':191 '绕个小圈':1940 '给一个位换记号中的每个数字都增加或者减小相同的量':1537 '给小球加的油也有一部分会放到下个循环去用':667 '继续接受下一次加油':663 '编辑们用一组照片辅以数字和箭头':403 '考虑之前提过的':730 '考虑这样一个位换记号处理算法':951 '而一个合法的位换记号':1956 '而不是':1678 '而后者会使得所有的余数都循环移动一下':1222 '而并没有告诉你这个球具体应该怎么扔出去':530 '肯定是因为它在不停地循环':460 '能否从前一个回路的某个节点出发':1968 '能否对已有的位换记号进行改造':728 '能无缝切换到哪些其他的':1796 '能直接变成':914 '能通过动作':1935 '能通过排列测试的':1470 '能通过排列测试的数字串':1205 '自己居然抛耍起了':122 '自己扔给自己':609 '自然':407,1421 '自然再度成为了众人关注的焦点':27 '至少与以下三组人马有着密切的关系':478 '至少大':1036,1050 '至少我看了半天都没看懂':409 '英国选手':41 '虽然抛耍起了':136 '行第':1590 '衔接':2019 '表演者通常会选择直接把这个小球握在手中停留':1566 '表现在图上就是':201 '表示':412 '表示有小球会落回来':1840 '表示没有小球会落回来':1843 '要是我们有一套记号':415 '要过':435,443,451 '观赏性非常强的玩法呢':315 '让另一只手在下一拍立即接到它':503 '让我们仔细分析一下中间那种玩法':431 '让我们假设手上的小球永远是':1805 '让我们再给大家展示几个例子':798 '让我们在纸上把这':1924 '让我们来看三个演示动画':150 '让我们画个图来分析一下':192 '让我们自然地想到了这样一种方案':425 '让我们还是先来看看':284 '让我看看啊':339 '证明了一个非常漂亮的结论':922 '试想':1784 '该动作完成后状态就会变成':1899 '该算法在有限步之后一定会终止':1011 '详细讲解了一个抛耍':404 '语法':417 '说了半天':309 '说到了位换记号与平均数定理':2091 '说到了排列测试与位换记号的生成方法':2092 '说到了状态图与素位换记号':2093 '谁就赢得该局':74 '谁站到最后':73 '调了一下颜色和线条的粗细':371 '路上经过的数字就自动地组成了合法的动作序列':1955 '转换为':1892,1905,1909 '转换为它本身':1937 '还得想想办法才行':726 '还是不像杂耍':283 '还是先把':887 '还有很多别的路子':885 '还真不是':145 '这':1111,1518 '这一共有':1918 '这一年的比赛中':48 '这三种杂耍模式的循环长度似乎是不一样的':343 '这三种杂耍模式真的是三种不同的杂耍模式吗':338 '这不正是':630 '这个定理为什么是对的呢':649 '这个结论有一个非常强大的推论':1087 '这个规律对于其他几个杂耍模式的位换记号也都成立':641 '这个词就是这么来的':787 '这个软件在杂耍界里非常有名':372 '这串数字也不见得是一个合法的位换记号':712 '这串数字满足平均数条件':715 '这也太简单了吧':1005 '这也很容易看出来':586 '这些互不同行的圆圈':1708 '这些动画你丫都是拿什么软件做的呀':332 '这几串数字有一个共同特征':637 '这又会产生很多有趣的推论':1531 '这可怎么做位换呢':807 '这场决赛确实打得精彩':94 '这将会变得非常非常困难':389 '这就不是一个合法的位换记号了':1045 '这就又是一种新的杂耍模式':856 '这就好比每次抛出小球都是在给小球加油一样':653 '这就引出了一个问题':1792 '这就是一个正确的杂耍模式了':1526 '这就是位换记号理论中最著名的一个定理':644 '这就是杂耍界最通用的杂耍模式记号':468 '这就说明每个循环里给小球加的油':672 '这恐怕不能叫做杂耍吧':143 '这意味着':185 '这是':79 '这是不是要算违规呀':144 '这样很长很长':2023 '这样的话':562 '这次我们有意没按字典序最大原则对其进行重写':2008 '这次扔出的球':433 '这正是平均数定理的内容':702 '这没关系':1681 '这相当于是在':1597 '这种杂耍模式的俗名都是不一样的':250 '这种模式的问题是':281 '这等于位换记号里的所有数字之和':682 '这篇文章中所有杂耍模式的演示动画都是用一个叫做':365 '这篇文章中的内容主要也都是从这本书里来的':2114 '这篇文章探讨的':2122 '这篇文章里有这么多动画':377 '这背后的道理其实很简单':1472 '这表现的其实就是倾盆这种杂耍模式':302 '这说明':794,1063,1461 '这里我们只是想告诉大家':916 '这里面实际上一共有':206 '这项运动最大的赛事':31 '进行位换':1369 '进行垂直移位':1546 '进行衔接':1980,1991,2000 '通过循环移位和位换操作得出':950 '通过循环移位和位换操作能得出其他一切合法的位换记号':1203 '那么':818,1489,1624 '那么下一个接抛动作可以是':1897 '那么从':998 '那么它一定能看作是由若干个素位换记号组合而成的':2041 '那么所有数字的平均数就一直是':1072 '那么所有的数字都是':1078 '那么把':760 '那么数字':1375 '那么现在依然可以形成排列':1224 '那么让每个数字都增加或者减小一个相同的常数':1534 '那么这串数字就必然不是一个合法的位换记号了':708 '那它显然能通过排列测试':1201 '那还有啥办法':379 '都会在空中停留相同的拍数':187 '都会经过一系列的循环移位和位换操作':969 '都可以从这几个位换记号中读出来':595 '都是合法的位换记号':842 '都是怎么想出来的呀':337 '都能从':945 '都能通过':1194 '里面就只有一个数字':806 '长度为':963,1089 '除以':1272,1331,1422,1646 '随意地排成一排':1762 '难道当':263 '首先':1199 '首先注意到':1012 '首先说循环移位':1209 '麻烦的是':710	en	admin
363	rsync 复制文件的一些注意事项	{"ver":2,"uid":1,"hash":"SHA1:0288e5ad9b34e6fdd1f3d3a411b8afdcbc8a5d1d"}	https://toutiao.io/k/qz4uqwp	2020-08-18 02:10:08	rsync 复制文件的一些注意事项	d0f18b6fa536d6ab91ed4774686b1840286bf3e9	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.844133	0			'rsync':1,3 '复制文件的一些注意事项':2,4	zh	
503	Efficiency is dangerous and slowing down makes life better	{"ver":2,"uid":1,"hash":"SHA1:56a268a59b9394cea68d8be78a06e09f41d6e7ab"}	https://psyche.co/ideas/why-efficiency-is-dangerous-and-slowing-down-makes-life-better	2020-08-21 21:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24236489"> https://news.ycombinator.com/item?id=24236489 </a>	34907282cf7fc658a6ab1694625a326a8fe3da06	\N	f	2020-08-21 21:10:00	2020-08-25 22:10:10.491911	0			'/item?id=24236489':13 'better':9 'comment':10 'danger':3 'effici':1 'life':8 'make':7 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24236489':11 'slow':5	zh	joubert
301	[推荐] 丢弃掉那些 BeanUtils 工具类吧，MapStruct 真香	{"ver":2,"uid":1,"hash":"SHA1:715333d1f73a0365a6805966430d231cb7215d6d"}	https://toutiao.io/k/nn7q9kk	2020-08-19 17:10:09	[推荐] 丢弃掉那些 BeanUtils 工具类吧，MapStruct 真香	97b7eabdb0b9bf046982d313aa9de0e78689e633	\N	f	2020-08-16 01:10:00	2020-08-30 14:10:10.815138	0			'beanutils':3,9 'mapstruct':5,11 '丢弃掉那些':2,8 '工具类吧':4,10 '推荐':1,7 '真香':6,12	zh	
361	.NET Core + Ocelot：API 网关	{"ver":2,"uid":1,"hash":"SHA1:8094397598562363af980ee62f5bbcc583c3fbeb"}	https://toutiao.io/k/xxh3674	2020-08-18 02:10:08	.NET Core + Ocelot：API 网关	b445efb37d8da1fa547357a65a8c56b7da5849ba	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.846338	0			'api':4,9 'core':2,7 'net':1,6 'ocelot':3,8 '网关':5,10	zh	
362	Kubernetes 源码解析：HPA 水平自动伸缩如何工作	{"ver":2,"uid":1,"hash":"SHA1:f7157741cc10fac12402321693b5aa3f07068e1b"}	https://toutiao.io/k/vaowlox	2020-08-18 02:10:08	Kubernetes 源码解析：HPA 水平自动伸缩如何工作	5149d78ee94ae124fb33502846c71b0a70b48d4d	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.853943	0			'hpa':3,7 'kubernetes':1,5 '水平自动伸缩如何工作':4,8 '源码解析':2,6	zh	
764	Neuralink Progress Update [video]	{"ver":2,"uid":1,"hash":"SHA1:bc8dbfa621119f52243d99581a8cd5a4dd3d9bc8"}	https://www.youtube.com/watch?v=DVvmgjBL74w&hn=1	2020-08-30 07:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24311152"> https://news.ycombinator.com/item?id=24311152 </a>	7f2b661e6e4b5239f76b5a0cd19c2d97c2d7213d	\N	f	2020-08-30 07:10:00	2020-09-01 08:10:09.954798	0			'/item?id=24311152':8 'comment':5 'neuralink':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24311152':6 'progress':2 'updat':3 'video':4	zh	lelf
250	如果把 3 · n + 1 问题改为 3x · n + 1 问题	{"ver":2,"uid":1,"hash":"SHA1:d901518c9696201fd14846c3189070f998b8367d"}	http://www.matrix67.com/blog/archives/6756	2016-05-02 14:52:06	<p>Collatz 猜想也叫做 3 · n + 1 问题。这可能是数学中最为世人所知的未解之谜。它是如此初等，连小学生都能听懂它的内容；但解决它却如此之难，以至于 Paul Erdős 曾说：“或许现在的数学还没准备好去解决这样的问题。”这究竟是一个什么样的问题呢？让我们来看一下 Collatz 猜想的叙述：</p>\n<blockquote><p>任意取一个正整数 n 。如果 n 是奇数，则把 n 变为 3 · n + 1 ；如果 n 是偶数，则把 n 变为 n/2 。不断重复操作，则最终一定会得到 1 。</p></blockquote>\n<p>举个例子，如果 n = 26 ，那么经过下面 10 步之后，它最终变为了 1 ：</p>\n<p class="indent">26 → 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>\n<p>Collatz 猜想说的就是，这个规律对于所有正整数 n 均是如此。这个问题看起来是如此简单，以至于无数的数学家都掉进了这个坑里。光从这个问题的众多别名，便能看出这个问题害人不浅： Collatz 猜想又叫做 Ulam 猜想、 Kakutani 问题、 Thwaites 猜想、 Hasse 算法、 Syracuse 问题……研究这个问题的人很多，解决这个问题的人却一个没有。后来，人们干脆把它叫做 3 · n + 1 问题，让哪个数学家也不沾光。</p>\n<p>这个问题有多难呢？我们可以从下面的这个例子中略见一斑。虽然从 26 出发只消 10 步就能变成 1 ，但若换一个数，比如 27 ，情况就大不一样了：</p>\n<p class="indent">27 → 82 → 41 → 124 → 62 → 31 → 94 → 47 → 142 → 71 → 214 → 107 → 322 → 161 → 484 → 242 → 121 → 364 → 182 → 91 → 274 → 137 → 412 → 206 → 103 → 310 → 155 → 466 → 233 → 700 → 350 → 175 → 526 → 263 → 790 → 395 → 1186 → 593 → 1780 → 890 → 445 → 1336 → 668 → 334 → 167 → 502 → 251 → 754 → 377 → 1132 → 566 → 283 → 850 → 425 → 1276 → 638 → 319 → 958 → 479 → 1438 → 719 → 2158 → 1079 → 3238 → 1619 → 4858 → 2429 → 7288 → 3644 → 1822 → 911 → 2734 → 1367 → 4102 → 2051 → 6154 → 3077 → 9232 → 4616 → 2308 → 1154 → 577 → 1732 → 866 → 433 → 1300 → 650 → 325 → 976 → 488 → 244 → 122 → 61 → 184 → 92 → 46 → 23 → 70 → 35 → 106 → 53 → 160 → 80 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>\n<p>可见，当 n 的值不同时，从 n 变到 1 的路子是很没规律的。</p>\n<p>有趣的是，如果我们把 Collatz 猜想中的乘以 3 改为乘以任意一个 3<sup>x</sup> （其中 x 的值可由你自由选择），那么 Collatz 猜想就是正确的了。下面我们就来证明这一点。</p>\n<p><span id="more-6756"></span></p>\n<p>&nbsp;</p>\n<p>首先我们证明一个引理：任何一个正整数都可以表示成下面这样：</p>\n<p class="indent">2<sup>a<sub>1</sub></sup> × 3<sup>b<sub>1</sub></sup> + 2<sup>a<sub>2</sub></sup> × 3<sup>b<sub>2</sub></sup> + 2<sup>a<sub>3</sub></sup> × 3<sup>b<sub>3</sub></sup> + &#8230; + 2<sup>a<sub>n</sub></sup> × 3<sup>b<sub>n</sub></sup></p>\n<p>其中 0 ≤ a<sub>1</sub> &lt; a<sub>2</sub> &lt; a<sub>3</sub> &lt; &#8230; &lt; a<sub>n</sub> ，并且 b<sub>1</sub> &gt; b<sub>2</sub> &gt; b<sub>3</sub> &gt; &#8230; &gt; b<sub>n</sub> ≥ 0 。举个例子， 213 = 3<sup>4</sup> + 2<sup>2</sup> × 3<sup>2</sup> + 2<sup>5</sup> × 3 就是一种合法的表示法。</p>\n<p>反证，假设有的数不能用这种方法来表示，那么一定存在一个最小的不能用这种方法来表示的数，不妨把它叫做 y 。显然 y 不能是偶数，否则把 y/2 的表示法中的每一项都再乘以一个 2 ，就能得到 y 的一种合法表示了。如果 y 是奇数呢？无妨假设 3<sup>i</sup> ≤ y &lt; 3<sup>i+1</sup> ，其中 i 是某个适当的正整数。于是， y′ = y &#8211; 3<sup>i</sup> 就是一个偶数，并且 y′/2 &lt; 3<sup>i</sup> 。把 y′/2 的表示法中的每一项都再乘以一个 2 ，再在最前面加上一个 3<sup>i</sup> ，就能得到 y 的一种合法表示了。</p>\n<p>下面我们就来证明，不断地执行 n → 3<sup>x</sup> · n + 1 （当 n 为奇数时）以及 n → n/2 （当 n 为偶数时）的变换，任何一个正整数最终都能变为 1 。还是以 27 为例。问题改版后，把 27 变成 1 的步骤数能大大减少：</p>\n<p class="indent">(((((27 × 3<sup>2</sup> + 1) / 2<sup>2</sup> × 3 + 1) / 2<sup>3</sup> × 3<sup>2</sup> + 1) / 2<sup>4</sup> × 3 + 1) / 2<sup>3</sup> × 3 + 1) / 2<sup>4</sup> = 1</p>\n<p>在这个过程中，我们一共除以了 16 个 2 。也就是说，上式中所有 2 头上的指数之和是 16 。想一想，如果等式两边同时乘以 2<sup>16</sup> ，结果会怎样？结果是，等式左边就不再有除法了：</p>\n<p class="indent">27 × 3<sup>7</sup> + 3<sup>5</sup> +  2<sup>2</sup> × 3<sup>4</sup> + 2<sup>5</sup> × 3<sup>2</sup> + 2<sup>9</sup> × 3 + 2<sup>12</sup> = 2<sup>16</sup></p>\n<p>其中，等式左边的 3<sup>5</sup> + &#8230; + 2<sup>12</sup> ，正好是 2<sup>16</sup> &#8211; 27 × 3<sup>7</sup> 的一个合法的表示法！</p>\n<p>所以，为了证明某个正整数 n 最终能变为 1 ，我们只需要证明，存在适当的 a 和 b ，使得 2<sup>a</sup> &#8211; n · 3<sup>b</sup> 有一个合法的表示法，并且表示法第一项里 3 的指数小于 b 。</p>\n<p>由于 log<sub>3</sub>2 为无理数，因而很容易看出，对于任意的正整数 n ，我们总能找到一个 b ，使得 [n · 3<sup>b</sup>, (n + 1) · 3<sup>b</sup>) 区间内包含某个 2 的整数次幂。把这个 2 的整数次幂记作 2<sup>a</sup> 。既然每一个正整数都有一个合法的表示法，那么 2<sup>a</sup> &#8211; n · 3<sup>b</sup> 也有一个合法的表示法。而 2<sup>a</sup> &#8211; n · 3<sup>b</sup> &lt; 3<sup>b</sup> ，因而它的表示法第一项里 3 的指数一定小于 b 。</p>\n<p>本文最后，让我们再对上一段中第一句话的结论作出一些额外的解释。设想有一个总长为 1 的圆形轨道，轨道上有一个周长为 r 的轮子，其中 r 为某个大于 0 的无理数。在轮子上的某个位置涂一个墨点。让轮子从圆形轨道上的某一位置出发，沿着轨道往前滚动。每次墨点接触轨道时，都会在轨道上留下一个记号（轮子上的墨点不会干掉，滚过已有的记号时也不会反过来沾上墨点）。我们可以证明一个结论：轮子沿着轨道一圈一圈地滚动下去之后，轨道上的各个地方都会稠密地分布着记号。</p>\n<p>首先，任意两个记号的位置都不会重合，否则某个整数倍的 r 就会等于某个整数，这与 r 的无理性相矛盾。因此，轮子转了无穷多圈之后，轨道上也会留下无穷多个记号。取任意大的正整数 N ，把轨道平均分成 N 份，每份的长度都是 1/N 。根据鸽笼原理，一定有两个记号落入了同一份里。这两个记号之间的距离 d 小于 1/N 。不妨假设轮子从先产生的那个记号出发，转了 k 圈之后来到了后产生的那个记号；那么，从此处出发再转上 k, 2k, 3k, &#8230;圈，就会继续得到一系列间隔为 d 的记号。如果正整数 N 足够大，间隔 d 就会足够小，由此产生的记号也就会足够密地分布在整个轨道上了。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201605021.png" alt="" width="600" /></p>\n<p>为什么对于任意的正整数 n ，我们总能找到一个 b ，使得 [n · 3<sup>b</sup>, (n + 1) · 3<sup>b</sup>) 区间内包含某个 2 的整数次幂呢？在对数尺度下，这就化为了刚才讨论的问题。 [n × 3<sup>0</sup>, n × 3<sup>1</sup>), [n × 3<sup>1</sup>, n × 3<sup>2</sup>), [n × 3<sup>2</sup>, n × 3<sup>3</sup>), &#8230; 成为了一个个等长的区间，区间的长度都是 log(3) 。而 2<sup>0</sup>, 2<sup>1</sup>, 2<sup>2</sup>, &#8230; 也就成了一系列的等距点，相邻两个点之间的距离是 log(2) 。如果把 log(3) 的长度看作 1 个单位，那么 log(2) 的长度就是 log(2) / log(3) = log<sub>3</sub>2 个单位，这是一个无理数。这就完全相当于周长为 log<sub>3</sub>2 的轮子沿着总长为 1 的圆形轨道滚动。根据刚才的结论，由此得到的标记将会稠密地分布在这些等长区间内的各种位置，当然也就会有不少标记落进了形如 [n · 3<sup>b</sup>, (n + 1) · 3<sup>b</sup>) 的区间里。</p>\n<p>这个问题出自 <a href="http://www.brand.site.co.il/riddles/201508q.html">http://www.brand.site.co.il/riddles/201508q.html</a> 。</p>\n	df372cfb3a216337ac1de6f8827a9f6c42ea1980	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.848704	33	http://www.matrix67.com/blog/archives/6756#comments		'+1':299 '/2':310,314 '/riddles/201508q.html':597 '0':258,268,468 '1':4,8,14,39,49,58,69,97,107,223,231,327,339,347,351,354,357,360,363,365,406,433,460,532,567,583,591 '1/n':497,503 '10':55,63,105,217 '103':136 '106':211 '107':123 '1079':174 '1132':161 '1154':192 '1186':148 '121':128 '122':203 '124':115 '1276':166 '13':60 '1300':197 '1336':153 '1367':184 '137':133 '142':120 '1438':171 '155':138 '16':65,219,368,375 '160':213 '161':125 '1619':176 '167':156 '1732':194 '175':143 '1780':150 '182':130 '1822':181 '184':205 '2':68,222,288,316,370,373,436,439,535,562,571,574 '20':62,216,556 '2051':186 '206':135 '21':557 '212':391,396 '213':270 '214':122 '2158':173 '216':378,392,398 '22':272,352,385,558 '23':208,355,361 '2308':191 '233':140 '24':358,364 '242':127 '2429':178 '244':202 '25':274,387 '251':158 '26':53,59,103 '263':145 '27':110,112,341,345,349,382,399 '2734':183 '274':132 '283':163 '29':389 '2a':413,441,444,449 '2a1':249 '2a2':251 '2a3':253 '2an':255 '2k':511 '3':2,12,37,95,237,275,353,359,362,390,418,454,554,565,576 '30':540 '3077':188 '31':117,542,544 '310':137 '319':168 '32':273,350,356,388,546,548 '322':124 '3238':175 '325':199 '33':550 '334':155 '34':271,386 '35':210,384,395 '350':142 '364':129 '3644':180 '37':383,400 '377':160 '395':147 '3b':415,431,434,446,451,452,530,533,589,592 '3b1':250 '3b2':252 '3b3':254 '3bn':256 '3i':296,298,306,311,318 '3k':512 '3x':6,239,325 '4':67,221 '40':61,215 '41':114 '4102':185 '412':134 '425':165 '433':196 '445':152 '46':207 '4616':190 '466':139 '47':119 '479':170 '484':126 '4858':177 '488':201 '5':64,218 '502':157 '526':144 '53':212 '566':162 '577':193 '593':149 '61':204 '6154':187 '62':116 '638':167 '650':198 '668':154 '70':209 '700':141 '71':121 '719':172 '7288':179 '754':159 '790':146 '8':66,220 '80':214 '82':113 '850':164 '866':195 '890':151 '91':131 '911':182 '92':206 '9232':189 '94':118 '958':169 '976':200 'a':409 'a1':259 'a2':260 'a3':261 'an':262 'b':411,420,428,456,527 'b1':264 'b2':265 'b3':266 'bn':267 'collatz':10,27,70,79,235,244 'd':501,515,521 'erdős':22 'hasse':87 'i':301 'k':506,510 'kakutani':83 'log':553,561,564,570,573,575 'log32':422,577,581 'n':3,7,13,30,32,35,38,41,44,52,73,96,226,229,324,326,329,332,335,404,414,426,430,432,445,450,492,494,518,525,529,531,539,541,543,545,547,549,588,590 'n/2':46,333 'paul':21 'r':463,466,483,486 'syracuse':89 'thwaites':85 'ulam':81 'www.brand.site.co.il':596 'www.brand.site.co.il/riddles/201508q.html':595 'x':241 'y':281,283,290,293,297,304,305,309,313,320 'y/2':286 '一定有两个记号落入了同一份里':499 '上式中所有':372 '下面我们就来证明':322 '下面我们就来证明这一点':246 '不妨假设轮子从先产生的那个记号出发':504 '不妨把它叫做':280 '不断地执行':323 '不断重复操作':47 '不能是偶数':284 '个':369 '个单位':568,578 '为了证明某个正整数':403 '为什么对于任意的正整数':524 '为例':342 '为偶数时':336 '为奇数时':330 '为无理数':423 '为某个大于':467 '举个例子':50,269 '也就成了一系列的等距点':559 '也就是说':371 '也有一个合法的表示法':447 '于是':303 '人们干脆把它叫做':94 '从':228 '从此处出发再转上':509 '以及':331 '以至于':20 '以至于无数的数学家都掉进了这个坑里':76 '任何一个正整数最终都能变为':338 '任何一个正整数都可以表示成下面这样':248 '任意两个记号的位置都不会重合':481 '任意取一个正整数':29 '份':495 '但若换一个数':108 '但解决它却如此之难':19 '使得':412,429,528 '便能看出这个问题害人不浅':78 '假设有的数不能用这种方法来表示':278 '光从这个问题的众多别名':77 '其中':240,257,300,393,465 '再在最前面加上一个':317 '出发只消':104 '则把':34,43 '则最终一定会得到':48 '区间内包含某个':435,534 '区间的长度都是':552 '反证':277 '取任意大的正整数':491 '变为':36,45 '变到':230 '变成':346 '可见':224 '后来':93 '否则把':285 '否则某个整数倍的':482 '和':410 '因此':488 '因而它的表示法第一项里':453 '因而很容易看出':424 '圈':513 '圈之后来到了后产生的那个记号':507 '在对数尺度下':537 '在轮子上的某个位置涂一个墨点':470 '在这个过程中':366 '均是如此':74 '头上的指数之和是':374 '如果':31,40,51,292 '如果我们把':234 '如果把':1,563 '如果正整数':517 '如果等式两边同时乘以':377 '存在适当的':408 '它是如此初等':17 '它最终变为了':57 '对于任意的正整数':425 '小于':502 '就会等于某个整数':484 '就会继续得到一系列间隔为':514 '就会足够小':522 '就是一个偶数':307 '就是一种合法的表示法':276 '就能得到':289,319 '并且':263,308 '并且表示法第一项里':417 '当':225,328,334 '当然也就会有不少标记落进了形如':587 '情况就大不一样了':111 '想一想':376 '成为了一个个等长的区间':551 '我们一共除以了':367 '我们只需要证明':407 '我们可以从下面的这个例子中略见一斑':101 '我们可以证明一个结论':477 '我们总能找到一个':427,526 '或许现在的数学还没准备好去解决这样的问题':24 '所以':402 '把':312,344 '把轨道平均分成':493 '把这个':438 '改为乘以任意一个':238 '无妨假设':295 '既然每一个正整数都有一个合法的表示法':442 '是偶数':42 '是奇数':33 '是奇数呢':294 '是某个适当的正整数':302 '显然':282 '曾说':23 '最终能变为':405 '有一个合法的表示法':416 '有趣的是':233 '本文最后':457 '根据刚才的结论':585 '根据鸽笼原理':498 '正好是':397 '步之后':56 '步就能变成':106 '每份的长度都是':496 '每次墨点接触轨道时':473 '比如':109 '沿着轨道往前滚动':472 '滚过已有的记号时也不会反过来沾上墨点':476 '猜想':82,86 '猜想中的乘以':236 '猜想也叫做':11 '猜想又叫做':80 '猜想就是正确的了':245 '猜想的叙述':28 '猜想说的就是':71 '由于':421 '由此产生的记号也就会足够密地分布在整个轨道上了':523 '由此得到的标记将会稠密地分布在这些等长区间内的各种位置':586 '的一个合法的表示法':401 '的一种合法表示了':291,321 '的值不同时':227 '的值可由你自由选择':242 '的区间里':593 '的变换':337 '的圆形轨道':461 '的圆形轨道滚动':584 '的指数一定小于':455 '的指数小于':419 '的整数次幂':437 '的整数次幂呢':536 '的整数次幂记作':440 '的无理性相矛盾':487 '的无理数':469 '的步骤数能大大减少':348 '的表示法中的每一项都再乘以一个':287,315 '的记号':516 '的路子是很没规律的':232 '的轮子':464 '的轮子沿着总长为':582 '的长度就是':572 '的长度看作':566 '相邻两个点之间的距离是':560 '研究这个问题的人很多':91 '等式左边就不再有除法了':381 '等式左边的':394 '算法':88 '结果会怎样':379 '结果是':380 '而':448,555 '虽然从':102 '解决这个问题的人却一个没有':92 '让哪个数学家也不沾光':99 '让我们再对上一段中第一句话的结论作出一些额外的解释':458 '让我们来看一下':26 '让轮子从圆形轨道上的某一位置出发':471 '设想有一个总长为':459 '足够大':519 '轨道上也会留下无穷多个记号':490 '轨道上有一个周长为':462 '轨道上的各个地方都会稠密地分布着记号':479 '转了':505 '轮子上的墨点不会干掉':475 '轮子沿着轨道一圈一圈地滚动下去之后':478 '轮子转了无穷多圈之后':489 '还是以':340 '这与':485 '这两个记号之间的距离':500 '这个规律对于所有正整数':72 '这个问题出自':594 '这个问题有多难呢':100 '这个问题看起来是如此简单':75 '这可能是数学中最为世人所知的未解之谜':16 '这就化为了刚才讨论的问题':538 '这就完全相当于周长为':580 '这是一个无理数':579 '这究竟是一个什么样的问题呢':25 '连小学生都能听懂它的内容':18 '那么':243,443,508,569 '那么一定存在一个最小的不能用这种方法来表示的数':279 '那么经过下面':54 '都会在轨道上留下一个记号':474 '问题':9,15,84,90,98 '问题改为':5 '问题改版后':343 '间隔':520 '首先':480 '首先我们证明一个引理':247	en	admin
765	Tower Defense with a twist: all towers must be positioned with CSS Flexbox	{"ver":2,"uid":1,"hash":"SHA1:3b1ddd18780578ce493a1d44e67f1128ba25ba3b"}	http://www.flexboxdefense.com/	2020-08-30 10:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24319989"> https://news.ycombinator.com/item?id=24319989 </a>	e9235db7f195844e924693c02430ef2635d8b709	\N	f	2020-08-30 10:10:00	2020-09-01 21:10:09.546003	0			'/item?id=24319989':17 'comment':14 'css':12 'defens':2 'flexbox':13 'must':8 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24319989':15 'posit':10 'tower':1,7 'twist':5	zh	kissgyorgy
308	AutoUpdater 迁移到 GitHub	{"ver":2,"uid":1,"hash":"SHA1:8f9901c15835647a3205538e08c31dc7b06a2417"}	https://toutiao.io/k/kqq70of	2020-08-16 01:10:09	AutoUpdater 迁移到 GitHub	6cdd60e168cc028456f03368af30801347de03d0	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.634144	0			'autoupdater':1,4 'github':3,6 '迁移到':2,5	zh	
358	What’s Flying Above Us?	{"ver":2,"uid":1,"hash":"SHA1:eb55091b060262ecca03474fc565b825562441ae"}	https://skycircl.es/donate/	2020-08-18 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24188661"> https://news.ycombinator.com/item?id=24188661 </a>	8bb88fe952572d511a662e128d473efc07707396	\N	f	2020-08-18 02:10:00	2020-08-19 20:10:10.23868	0			'/item?id=24188661':9 'comment':6 'fli':3 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24188661':7 'us':5	zh	zuhayeer
306	基于 Kotlin + Netty 实现一个简单的 TCP 自定义协议	{"ver":2,"uid":1,"hash":"SHA1:5029579a6c1b3b2caea249674f7d8aa84b8fb42b"}	https://toutiao.io/k/ndmodxj	2020-08-16 01:10:09	基于 Kotlin + Netty 实现一个简单的 TCP 自定义协议	90f02c59e9a96275fdaccfcbea208f712088b408	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.643379	0			'kotlin':2,8 'netty':3,9 'tcp':5,11 '基于':1,7 '实现一个简单的':4,10 '自定义协议':6,12	zh	
365	深色模式在 Web 端的适配方案	{"ver":2,"uid":1,"hash":"SHA1:c348aebde1f5a8fad4a03c9bac38b2258b3365c5"}	https://toutiao.io/k/03kk4hr	2020-08-18 02:10:08	深色模式在 Web 端的适配方案	1ba223cc755f53f29d2309c387f001b4250e8210	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.856408	0			'web':2,5 '深色模式在':1,4 '端的适配方案':3,6	zh	
307	Asio：创建被动套接字	{"ver":2,"uid":1,"hash":"SHA1:f69141048bdc385aa17acb7befcc47c06a8e0590"}	https://toutiao.io/k/ymrilo7	2020-08-16 01:10:09	Asio：创建被动套接字	dcb84ca5df511afbd02ed6577bf3a43da6e671f6	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.649489	0			'asio':1,3 '创建被动套接字':2,4	zh	
366	为 Linux 系统开启多因素认证	{"ver":2,"uid":1,"hash":"SHA1:978a4f0a48d15c26048a9784219f7df31a807a89"}	https://toutiao.io/k/ftz28qu	2020-08-18 02:10:08	为 Linux 系统开启多因素认证	697c90ea0222ea03e04099856865070ca4510974	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.861146	0			'linux':2,5 '为':1,4 '系统开启多因素认证':3,6	zh	
288	Stanford cancels plans to bring half of undergrads back to campus	{"ver":2,"uid":1,"hash":"SHA1:0677e95f24cee1e5ab921f6bf686db7df5ecf2f0"}	https://stanforddaily.com/2020/08/13/stanford-cancels-plans-to-bring-half-of-undergrads-back-to-campus/	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24157100"> https://news.ycombinator.com/item?id=24157100 </a>	e21678eb591ae5fc1ab96d89cfcc34e5f174aa71	\N	f	2020-08-15 19:10:00	2020-08-18 02:10:08.445291	0			'/item?id=24157100':15 'back':9 'bring':5 'campus':11 'cancel':2 'comment':12 'half':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24157100':13 'plan':3 'stanford':1 'undergrad':8	zh	danso
699	一个工作三年的同事，居然还搞不清深拷贝、浅拷贝...	{"ver":2,"uid":1,"hash":"SHA1:7a68d0e39ac8c350c353439a1f7c2ce7d9a35e56"}	https://toutiao.io/k/oqtp5ib	2020-08-28 01:10:22	一个工作三年的同事，居然还搞不清深拷贝、浅拷贝...	ea41b268021ce6d24a2ba1a962f18dce49bcd9b3	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.485522	0			'一个工作三年的同事':1,4 '居然还搞不清深拷贝':2,5 '浅拷贝':3,6	zh	
289	NSA Owns Everything (2015)	{"ver":2,"uid":1,"hash":"SHA1:0d0e31ae9372141bc0415419961e669d47d79ae9"}	https://blog.thinkst.com/p/if-nsa-has-been-hacking-everything-how.html	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24139828"> https://news.ycombinator.com/item?id=24139828 </a>	45a207c1d6bc4998ab54559af80435be0914278e	\N	f	2020-08-15 19:10:00	2020-08-16 05:10:09.506155	0			'/item?id=24139828':8 '2015':4 'comment':5 'everyth':3 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24139828':6 'nsa':1 'own':2	zh	smokelegend
386	Modeling a Wealth Tax	{"ver":2,"uid":1,"hash":"SHA1:03da70d7af8aafb42491c8c4df7ce4bfe6796266"}	http://paulgraham.com/wtax.html	2020-08-18 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24198172"> https://news.ycombinator.com/item?id=24198172 </a>	645ed939a74b36aad7b4ee872ccf222c61e01a6c	\N	f	2020-08-18 19:10:00	2020-08-21 06:10:09.905799	0			'/item?id=24198172':8 'comment':5 'model':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24198172':6 'tax':4 'wealth':3	zh	tosh
367	浅析 Kubernetes Pod 重启策略和健康检查	{"ver":2,"uid":1,"hash":"SHA1:678a62fb3bbbb50307152324bdfd1958fb255f86"}	https://toutiao.io/k/d3cnluh	2020-08-18 02:10:08	浅析 Kubernetes Pod 重启策略和健康检查	622147534297db8024b473e3d037f495275329ba	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.863273	0			'kubernetes':2,6 'pod':3,7 '浅析':1,5 '重启策略和健康检查':4,8	zh	
505	Launch HN: GitDuck (YC S20) – Zoom for developers with real-time code sharing	{"ver":2,"uid":1,"hash":"SHA1:9197b252d105d9dfd9fcf2d024db062817e8f85f"}	https://news.ycombinator.com/item?id=24228826	2020-08-21 21:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24228826"> https://news.ycombinator.com/item?id=24228826 </a>	4d14b80f57eaa6b99e11fb031a0f0663e27ef6e9	\N	f	2020-08-21 21:10:00	2020-08-22 02:10:08.131616	0			'/item?id=24228826':18 'code':13 'comment':15 'develop':8 'gitduck':3 'hn':2 'launch':1 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24228826':16 'real':11 'real-tim':10 's20':5 'share':14 'time':12 'yc':4 'zoom':6	zh	borisandcrispin
385	Laying the foundation for Rust’s future	{"ver":2,"uid":1,"hash":"SHA1:3ba465e6614be142d1a4b1f5d47fc902cf324f9a"}	https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html	2020-08-18 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24199424"> https://news.ycombinator.com/item?id=24199424 </a>	8b3544717b648f6a6d1cd30fd4cfe16ad53aaa2e	\N	f	2020-08-18 19:10:00	2020-08-21 06:10:09.9087	0			'/item?id=24199424':11 'comment':8 'foundat':3 'futur':7 'lay':1 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24199424':9 'rust':5	zh	steveklabnik
463	vim 的几种模式 mode 和按键映射 map	{"ver":2,"uid":1,"hash":"SHA1:f7e76d0fbb063bdd20bbbeb1e32f476625116fb0"}	https://toutiao.io/k/wlll3jk	2020-08-21 03:10:08	vim 的几种模式 mode 和按键映射 map	84ad9e4d02e74a1e705b1dbc65311674dd1a2fe5	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.074057	0			'map':5,10 'mode':3,8 'vim':1,6 '和按键映射':4,9 '的几种模式':2,7	zh	
322	The best way to exercise self-control is not to exercise it at all	{"ver":2,"uid":1,"hash":"SHA1:844704c32f5cb7161d06f476f7572053154e66c3"}	https://psyche.co/ideas/the-best-way-to-exercise-self-control-is-not-to-exercise-it-at-all	2020-08-16 22:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24170531"> https://news.ycombinator.com/item?id=24170531 </a>	e85daa48f42a56be862c16e07868e73d9cf8af91	\N	f	2020-08-16 22:10:00	2020-08-18 17:10:08.9173	0			'/item?id=24170531':19 'best':2 'comment':16 'control':8 'exercis':5,12 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24170531':17 'self':7 'self-control':6 'way':3	zh	MurizS
368	hox + useRequest：异步数据流管理从未如此轻松自然	{"ver":2,"uid":1,"hash":"SHA1:539f58ffd1679cc1499f489e3310397aa5f38608"}	https://toutiao.io/k/zywv6e3	2020-08-18 02:10:08	hox + useRequest：异步数据流管理从未如此轻松自然	891505da8f1004cee0291b727c9fc2b0d744e7dc	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.865399	0			'hox':1,4 'userequest':2,5 '异步数据流管理从未如此轻松自然':3,6	zh	
369	Python 经典面试题：并发场景的生产消费者模式	{"ver":2,"uid":1,"hash":"SHA1:0992aa121a2a024087835d929a0d50aa875c610a"}	https://toutiao.io/k/r4sp86a	2020-08-18 02:10:08	Python 经典面试题：并发场景的生产消费者模式	ae2061de4d058cd01cd880d77fb690217dbb40cc	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.858665	0			'python':1,4 '并发场景的生产消费者模式':3,6 '经典面试题':2,5	zh	
323	Trump says he is considering pardon for Edward Snowden	{"ver":2,"uid":1,"hash":"SHA1:1c86b8802f6345fc201f90486147f20287ea2d72"}	https://www.reuters.com/article/us-usa-politics-snowden/trump-says-hes-considering-pardon-for-leaker-edward-snowden-idUSKCN25B10Z	2020-08-16 22:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24174265"> https://news.ycombinator.com/item?id=24174265 </a>	5ba548d0743cfc5ea7874e30aa966545b2bb3ea9	\N	f	2020-08-16 22:10:00	2020-08-18 07:10:09.257961	0			'/item?id=24174265':13 'comment':10 'consid':5 'edward':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24174265':11 'pardon':6 'say':2 'snowden':9 'trump':1	zh	elliekelly
370	Cilium 多 K8S 集群 (multi-cluster) 解决方案 ClusterMesh 试手	{"ver":2,"uid":1,"hash":"SHA1:e99e8bbb8f2be91a646d39bbd084a42860e0422a"}	https://toutiao.io/k/4oagbsz	2020-08-18 02:10:08	Cilium 多 K8S 集群 (multi-cluster) 解决方案 ClusterMesh 试手	3b485299b40d9d7ad2a4c932c1c3964a7783ece6	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.869548	0			'cilium':1,11 'cluster':7,17 'clustermesh':9,19 'k8s':3,13 'multi':6,16 'multi-cluster':5,15 '多':2,12 '解决方案':8,18 '试手':10,20 '集群':4,14	zh	
311	揭开数组的真面目	{"ver":2,"uid":1,"hash":"SHA1:d1b2c7c133c4321e84066bcf854207cf280a3c28"}	https://toutiao.io/k/qdry358	2020-08-16 01:10:09	揭开数组的真面目	0abc6a49ad3e4c61898fa1af5343606036d541a3	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.647461	0			'揭开数组的真面目':1,2	zh	
324	Mutt email client 25 years old	{"ver":2,"uid":1,"hash":"SHA1:1ad22621bb67ea299d71db205c7456537639eb1f"}	http://mutt.org/	2020-08-16 22:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24173676"> https://news.ycombinator.com/item?id=24173676 </a>	bab0501bbeaa4a25ccc7c253d1a0f82823a723dc	\N	f	2020-08-16 22:10:00	2020-08-18 15:10:10.432207	0			'/item?id=24173676':10 '25':4 'client':3 'comment':7 'email':2 'mutt':1 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24173676':8 'old':6 'year':5	zh	job
292	Ask HN: Has anyone migrated off containerized infrastructure?	{"ver":2,"uid":1,"hash":"SHA1:68958ad2a48ad1f3211171cbd082cacd25e71a78"}	https://news.ycombinator.com/item?id=24141628	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24141628"> https://news.ycombinator.com/item?id=24141628 </a>	480c23e8e87908720918e9f221aa2a19a93b5771	\N	f	2020-08-15 19:10:00	2020-08-16 05:10:09.514981	0			'/item?id=24141628':12 'anyon':4 'ask':1 'comment':9 'container':7 'hn':2 'infrastructur':8 'migrat':5 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24141628':10	zh	murkt
310	Dubbo 协议解析与 ESA RPC 实践	{"ver":2,"uid":1,"hash":"SHA1:f6adb9fcc6e720a9f1c3bb9944a4879dfa3db8bb"}	https://toutiao.io/k/gsdn4sv	2020-08-16 01:10:09	Dubbo 协议解析与 ESA RPC 实践	2aa0d84612afce995bb89c422aca65613464dc0f	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.636726	0			'dubbo':1,6 'esa':3,8 'rpc':4,9 '协议解析与':2,7 '实践':5,10	zh	
371	Redis migrate 数据迁移工具	{"ver":2,"uid":1,"hash":"SHA1:e25afc24e1dfdd28b250aea4750facecc96ef12f"}	https://toutiao.io/k/fiv94h6	2020-08-18 02:10:08	Redis migrate 数据迁移工具	81908c9fb34746d727898caf75ed8b1ba18b152b	\N	f	2020-08-18 02:10:00	2020-08-18 23:10:08.867408	0			'migrate':2,5 'redis':1,4 '数据迁移工具':3,6	zh	
462	Java 多线程并发读写锁 ReadWriteLock 实现原理剖析	{"ver":2,"uid":1,"hash":"SHA1:44da242b63472bce1ad8e818d97e38dcfffb02a2"}	https://toutiao.io/k/dygj96h	2020-08-21 03:10:08	Java 多线程并发读写锁 ReadWriteLock 实现原理剖析	0e0396f1e6887cb7ffc034fed305131001e84730	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.070151	0			'java':1,5 'readwritelock':3,7 '多线程并发读写锁':2,6 '实现原理剖析':4,8	zh	
266	Go 1.15, serverless Go functions, and a new Go-powered database	{"ver":2,"uid":1,"hash":"SHA1:4caed8372c173483a26ccd0386bd6da8c073cc6d"}	https://golangweekly.com/issues/325	2020-08-14 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#325 — August 14, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/93508/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/93509/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/93510/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1597397113/udzbbfwj18tx6ngbo0ql.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93510/rss" title="blog.golang.org" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Go 1.15 Released</a></span> — Hit up <a href="https://golangweekly.com/link/93511/rss" style=" color: #0099b4;   ">the release notes</a> to go through everything that’s new, but the highlights include <em>substantial</em> improvements to the linker, better allocation in some cases, and various core library improvements. This is a step forward for Go, however, rather than a feature-packed leap. Do note, though, that some people  <a href="https://golangweekly.com/link/93540/rss" style=" color: #0099b4;   ">ran into issues with TLS connections</a> involving certificates without SANs (<a href="https://golangweekly.com/link/93541/rss" style=" color: #0099b4;   ">now fixed</a> in this case but may cause issues elsewhere).</p>\n  <p>The Go Blog </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93512/rss" title="go.googlesource.com" style=" color: #0099b4;    font-size: 1.05em;">Proposal: Register-Based Go Calling Convention</a></span> — This proposal hopes to increase performance (well, throughput) by changing the Go <a href="https://golangweekly.com/link/93513/rss" style=" color: #0099b4;   ">ABI</a>’s stack-based calling convention to a register-based version. This won’t affect most Go developers at a day to day level, but feel free to read on for the gritty details.</p>\n  <p>Austin Clements </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/93514/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/87e97607.png" width="110" height="110" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93514/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Remote Instructor-Led Go, Docker, Kubernetes, &amp; Python Training</a></span> — We offer live-streaming remote training sessions for individual engineers and companies that want to augment their knowledge in Go, Docker, Kubernetes, and Python. We’ve trained over 5,000 engineers via our carefully crafted classes.</p>\n  <p>Ardan Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93515/rss" title="dev.to" style=" color: #0099b4;    font-size: 1.05em;">Why Go Modules Are Faster Than GOPATH</a></span> — The short answer is modules usually end up having to download much less code (in some cases, zero code) for a given set of dependencies. Hurray for progress!</p>\n  <p>Tyler Bui-Palsulich </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93516/rss" title="aws.amazon.com" style=" color: #0099b4;    font-size: 1.05em;">AWS Lambda Now Supports Go on Amazon Linux 2</a></span> — AWS Lambda, Amazon’s serverless platform, has supported Go directly for a while now, but support has now been extended to the newer Amazon Linux 2 runtime.</p>\n  <p>Amazon Web Services </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93517/rss" title="bit.ly" style=" color: #0099b4;    font-size: 1.05em;">Senior Software Engineer at Even (Anywhere)</a></span> — Help people break the paycheck-to-paycheck cycle. Build w/ Go, React Native, GraphQL, Postgres, Bazel. Remote encouraged.</p>\n  <p>EVEN </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93518/rss" title="jobs.lever.co" style=" color: #0099b4;    font-size: 1.05em;">Software Engineer - Want to Build a Platform Ecosystem in Go?</a></span> — Skool is hiring its 2nd backend engineer in Los Angeles, CA. Go, PostgreSQL, Redis, Elasticsearch, Docker. <a href="https://golangweekly.com/link/93518/rss" style=" color: #0099b4;   ">Apply now.</a></p>\n  <p>SKOOL </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93519/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">Find a Job Through Vettery</a></span> — Use Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93520/rss" title="utcc.utoronto.ca" style=" color: #0099b4;    font-size: 1.05em;">How Go 1.15 Improved Converting Small Integer Values to Interfaces</a></span> — This gets in the weeds a bit, but the short answer is a static array of integers that can be pointed to instead of a heap allocation.</p>\n  <p>Chris Siebenmann </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93521/rss" title="schadokar.dev" style=" color: #0099b4;    font-size: 1.05em;">Create a Serverless Go App for AWS Lambda</a></span> — A basic, entry level tutorial to using Go in a serverless context.</p>\n  <p>Shubham Chadokar </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93522/rss" title="hackersandslackers.com" style=" color: #0099b4;    font-size: 1.05em;">Deploying Serverless Go Functions with Netlify</a></span> — It’s a bit convoluted, but the end process of having Go functions in your JAMstack might just be worth it.</p>\n  <p>Todd Birchard </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93523/rss" title="link.sqreen.com" style=" color: #0099b4;    font-size: 1.05em;">The Go Security Checklist</a></span></p>\n  <p>Sqreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93525/rss" title="preslav.me" style=" color: #0099b4;    font-size: 1.05em;">Lessons from Go: Keep Calm and Use the Byte Array</a></span> — Byte arrays are ubiquitious in Go, despite being hidden being abstractions in other languages. And this is a good thing.</p>\n  <p>Preslav Rachev </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/93542/rss" title="www.youtube.com" style=" color: #0099b4;    font-size: 1.05em;">Let's Build a Concurrent Download Manager</a></span> — A practical 20 minute screencast. <a href="https://golangweekly.com/link/93543/rss" style=" color: #0099b4;   ">GitHub repo.</a></p>\n  <p>Muhammad Usman </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93524/rss" title="t.co" style=" color: #0099b4;    font-size: 1.05em;">What Is the Extension Interface Pattern in Go?</a></span></p>\n  <p>Emmanuel Sys </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/93526/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/uvrzfbyv9fovg8eqb0d0.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93526/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Multiple Progress Bar: Progress Bars for Go CLI Apps</a></span> — Straightforward textual progress bars with support for rendering <em>multiple</em> bars at the same time (such as for tasks running concurrently). <a href="https://golangweekly.com/link/93527/rss" style=" color: #0099b4;   ">v5.3.0</a> just came out.</p>\n  <p>Vladimir Bauer </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93528/rss" title="immudb.io" style=" color: #0099b4;    font-size: 1.05em;">immudb: A Lightweight, High-Speed Immutable Database</a></span> — An open source data that boasts <em>no data mutation APIs</em> at all and a ‘tamper-evident’ history system. It’s built in Go. <a href="https://golangweekly.com/link/93529/rss" style=" color: #0099b4;   ">GitHub repo.</a></p>\n  <p>immudb </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93530/rss" title="www.datadoghq.com" style=" color: #0099b4;    font-size: 1.05em;">Optimize Your Go Applications in One Place</a></span> — Datadog APM enables you to visualize how requests propagate through your distributed infrastructure. Try it for free today.</p>\n  <p>Datadog APM <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93531/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Excelize 2.3: A Library for Reading and Writing Excel Files</a></span> — Read and write XLSX files, set and read cell values, add charts. <a href="https://golangweekly.com/link/93532/rss" style=" color: #0099b4;   ">v2.3.0</a> lets you set cell values concurrently, and provides some new APIs for improved access to formatting and columns.</p>\n  <p>360 Enterprise Security Group, Endpoint Security, inc. </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93533/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Dynamo: An Expressive DynamoDB Library</a></span> — This week’s new release <a href="https://golangweekly.com/link/93534/rss" style=" color: #0099b4;   ">improves support for null and empty values.</a></p>\n  <p>Greg Greg </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93535/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Oscar: Next Generation Building Tool for Nothing</a></span> — <em>Yes, this is a joke/lighthearted project!</em> You’d use this to make it look like you’re being productive when you’re not (<a href="https://golangweekly.com/link/93536/rss" style=" color: #0099b4;   ">obligatory xkcd reference</a>).</p>\n  <p>dongdong </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93537/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Got: Go Package and CLI Tool for Downloading Large Files Over HTTP Faster</a></span> — The technique used is to concurrently download numerous ranges of the desired file which can be quicker in many cases (but may also be frowned upon if it causes extra load).</p>\n  <p>Mohamed El Bahja </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93538/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">httpmock: Easy Mocking of HTTP Responses From External Resources</a></span></p>\n  <p>Jared Morse </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93539/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Sarama: A Go Client Library for Apache Kafka 0.8+</a></span></p>\n  <p>Shopify </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/325/rss" width="1" height="1" />	9deb10b6c1ca7149254cfa594511cf7f5b42cbf3	\N	f	2020-08-14 14:10:00	2020-09-10 05:10:12.746504	0			'0.8':790 '000':198 '1.15':2,25,371 '14':15 '2':255,281 '2.3':624 '20':506 '2020':16 '2nd':327 '325':13 '360':664 '5':197 '500':358 'a':7,60,68,129,142,235,267,318,343,384,391,403,409,416,425,438,492,500,504,561,581,625,700,783 'abi':121 'abstractions':485 'access':659 'add':643 'affect':137 'all':579 'allocation':49,405 'also':759 'amazon':253,258,279,283 'an':568,672 'and':6,53,179,191,356,470,489,580,629,634,639,652,662,685,727 'angeles':332 'answer':217,389 'anywhere':292 'apache':788 'apis':577,656 'apm':603,621 'app':412 'applications':598 'apply':339 'apps':533 'ardan':205 'are':211,477 'array':393,474 'arrays':476 'as':549 'at':141,290,354,544,578 'augment':184 'august':14 'austin':157 'aws':247,256,414 'backend':328 'bahja':770 'bar':527 'bars':529,537,543 'based':105,125,132 'basic':417 'bauer':559 'bazel':309 'be':398,454,752,760 'been':274 'being':482,484,714 'better':48 'birchard':458 'bit':385,439 'blog':101 'boasts':573 'break':295 'bui':245 'bui-palsulich':244 'build':302,317,499 'building':693 'built':589 'but':39,94,147,270,386,441,757 'by':117 'byte':473,475 'ca':333 'calling':107,126 'calm':469 'came':556 'can':397,751 'carefully':202 'case':93 'cases':52,231,756 'cause':96 'causes':765 'cell':641,649 'certificates':86 'chadokar':429 'changing':118 'charts':644 'checklist':462 'chris':406 'classes':204 'clements':158 'cli':532,728 'client':785 'code':228,233,523 'columns':663 'companies':180,359 'concurrent':501 'concurrently':553,651,742 'connect':350 'connections':84 'context':427 'convention':108,127 'converting':373 'convoluted':440 'core':55 'crafted':203 'create':408 'cycle':301 'd':704 'data':571,575 'database':12,567 'datadog':602,620 'day':143,145 'dependencies':239 'deploying':430 'desired':748 'despite':481 'details':156 'developers':140 'directly':265 'distributed':613 'do':73 'docker':164,189,338 'dongdong':723 'download':225,502,743 'downloading':731 'dynamo':671 'dynamodb':674 'easy':772 'ecosystem':320 'el':769 'elasticsearch':337 'elsewhere':98 'emmanuel':521 'empty':686 'enables':604 'encouraged':311 'end':221,443 'endpoint':668 'engineer':289,314,329 'engineers':178,199 'enterprise':665 'entry':418 'even':291,312 'everything':35 'evident':584 'excel':631 'excelize':623 'expressive':673 'extended':275 'extension':516 'external':778 'extra':766 'faster':212,736 'feature':70 'feature-packed':69 'feel':148 'file':749 'files':632,637,733 'find':342 'fixed':90 'for':63,153,176,234,241,266,363,413,530,540,550,617,627,657,683,695,730,787 'formatting':661 'fortune':357 'forward':62 'free':149,362,618 'from':466,777 'frowned':761 'functions':5,433,448 'generation':692 'gets':380 'github':509,592 'given':236 'go':1,4,10,22,24,33,64,100,106,120,139,163,188,209,251,264,304,322,334,370,411,423,432,447,460,467,480,520,531,591,597,725,784 'go-powered':9 'good':493 'gopath':214 'got':724 'graphql':307 'greg':688,689 'gritty':155 'group':667 'has':262,272 'having':223,446 'heap':404 'help':293 'hidden':483 'high':564 'high-speed':563 'highlights':41 'hiring':325,352 'history':585 'hit':27 'hopes':111 'how':369,608 'however':65 'http':735,775 'httpmock':771 'hurray':240 'if':763 'immudb':560,594 'immutable':566 'improved':372,658 'improvements':44,57 'improves':681 'in':50,91,187,229,321,330,381,424,449,479,486,519,590,599,754 'inc':670 'include':42 'increase':113 'individual':177 'infrastructure':614 'instead':401 'instructor':161 'instructor-led':160 'integer':375 'integers':395 'interface':517 'interfaces':378 'into':80 'involving':85 'is':59,218,324,390,491,514,699,740 'issues':81,97 'it':360,436,456,587,616,709,764 'its':326 'jamstack':451 'jared':780 'job':344,365 'job-seekers':364 'jobs':286 'joke/lighthearted':701 'just':453,555 'kafka':789 'keep':468 'knowledge':186 'kubernetes':165,190 'labs':206 'lambda':248,257,415 'languages':488 'large':732 'leap':72 'led':162 'less':227 'lessons':465 'let':497 'lets':646 'level':146,419 'library':56,626,675,786 'lightweight':562 'like':711 'linker':47 'linux':254,280 'live':171 'live-streaming':170 'load':767 'look':710 'los':331 'make':708 'manager':503 'managers':353 'many':755 'may':95,758 'might':452 'minute':507 'mocking':773 'modules':210,219 'mohamed':768 'morse':781 'most':138 'much':226 'muhammad':511 'multiple':525,542 'mutation':576 'native':306 'netlify':435 'new':8,38,655,679 'newer':278 'next':691 'no':574 'not':719 'note':74 'notes':31 'nothing':696 'now':89,249,269,273,340 'null':684 'numerous':744 'obligatory':720 'of':238,394,402,445,746,774 'offer':169 'on':19,152,252 'one':600 'open':569 'optimize':595 'oscar':690 'other':487 'our':201 'out':557 'over':196,734 'package':726 'packed':71 'palsulich':246 'pattern':518 'paycheck':298,300 'paycheck-to-paycheck':297 'people':78,294 'performance':114 'place':601 'platform':261,319 'pointed':399 'postgres':308 'postgresql':335 'powered':11 'practical':505 'preslav':495 'process':444 'productive':715 'progress':242,526,528,536 'project':702 'propagate':610 'proposal':102,110 'provides':653 'python':166,192 'quicker':753 'rachev':496 'ran':79 'ranges':745 'rather':66 're':713,718 'react':305 'read':18,151,633,640 'reading':628 'redis':336 'reference':722 'register':104,131 'register-based':103,130 'release':30,680 'released':26 'remote':159,173,310 'rendering':541 'repo':510,593 'requests':609 'resources':779 'responses':776 'running':552 'runtime':282 's':37,122,259,361,437,498,588,678 'same':546 'sans':88 'sarama':782 'screencast':508 'security':461,666,669 'seekers':366 'senior':287 'serverless':3,260,410,426,431 'services':285 'sessions':175 'set':237,638,648 'shopify':791 'short':216,388 'shubham':428 'siebenmann':407 'skool':323,341 'small':374 'software':288,313 'some':51,77,230,654 'source':570 'speed':565 'sponsor':207,464,622 'sqreen':463 'stack':124 'stack-based':123 'startups':355 'static':392 'step':61 'straightforward':534 'streaming':172 'substantial':43 'such':548 'support':271,539,682 'supported':263 'supports':250 'sys':522 'system':586 't':136 'tamper':583 'tamper-evident':582 'tasks':551 'technique':738 'textual':535 'than':67,213 'that':36,76,181,396,572 'the':20,29,40,46,99,119,154,215,277,296,382,387,442,459,472,515,545,737,747 'their':185 'thing':494 'this':58,92,109,134,379,490,676,698,706 'though':75 'through':34,345,611 'throughput':116 'time':547 'tls':83 'to':32,45,112,128,144,150,183,224,276,299,316,349,377,400,421,606,660,707,741 'today':619 'todd':457 'tool':694,729 'tools':524 'trained':195 'training':167,174 'try':615 'tutorial':420 'tutorials':368 'tyler':243 'ubiquitious':478 'unsubscribe':17 'up':28,222 'upon':762 'use':347,471,705 'used':739 'using':422 'usman':512 'usually':220 'v2.3.0':645 'v5.3.0':554 'values':376,642,650,687 'various':54 've':194 'version':133 'vettery':346,348,367 'via':200 'visualize':607 'vladimir':558 'w':303 'want':182,315 'we':168,193 'web':21,284 'weeds':383 'week':677 'weekly':23 'well':115 'what':513 'when':716 'which':750 'while':268 'why':208 'with':82,351,434,538 'without':87 'won':135 'worth':455 'write':635 'writing':630 'xkcd':721 'xlsx':636 'yes':697 'you':605,647,703,712,717 'your':450,596,612 'zero':232		
464	MacBook Pro 电池维修记	{"ver":2,"uid":1,"hash":"SHA1:875d59210dd0dce2de6989a50ac6b6f6ab8f4c01"}	https://toutiao.io/k/nuls8kx	2020-08-21 03:10:08	MacBook Pro 电池维修记	58e767dd02e973d1584478d6d176dd15e4ecc49b	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.075937	0			'macbook':1,4 'pro':2,5 '电池维修记':3,6	zh	
465	[推荐] 全网最通透的 Java 8 版本特性讲解	{"ver":2,"uid":1,"hash":"SHA1:8bb72e2a2cfcb7a2c988639dd41b45b2b42b4104"}	https://toutiao.io/k/vbmfzum	2020-08-24 21:10:12	[推荐] 全网最通透的 Java 8 版本特性讲解	87a2e5d2e01e648d01b0c75c2f3d86f59fe4ac76	\N	f	2020-08-21 03:10:00	2020-09-04 15:10:24.983896	0			'8':4,9 'java':3,8 '全网最通透的':2,7 '推荐':1,6 '版本特性讲解':5,10	zh	
703	搭建 K8S 集群之 node 节点部署	{"ver":2,"uid":1,"hash":"SHA1:5441eb2ec7fc11ba68a193d002cdf714f67f9e32"}	https://toutiao.io/k/4ar6i06	2020-08-28 01:10:22	搭建 K8S 集群之 node 节点部署	b17baa60e5ea294dc0e158c8482e2e14a16953a8	\N	f	2020-08-28 01:10:00	2020-08-29 00:10:08.488072	0			'k8s':2,7 'node':4,9 '搭建':1,6 '节点部署':5,10 '集群之':3,8	zh	
467	从架构到源码：一文了解 Flutter 渲染机制	{"ver":2,"uid":1,"hash":"SHA1:da21042f42b07e366ff24c0be3aa5f693de514d6"}	https://toutiao.io/k/rrs00zt	2020-08-21 03:10:08	从架构到源码：一文了解 Flutter 渲染机制	4463bcee0be22ddeb104c3b4714de1b8b35d60d1	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.083682	0			'flutter':3,7 '一文了解':2,6 '从架构到源码':1,5 '渲染机制':4,8	zh	
469	对抗攻击之利用水印生成对抗样本	{"ver":2,"uid":1,"hash":"SHA1:011fd13bd731c5f602ef07263b4ef9b04f888fe8"}	https://toutiao.io/k/afevejz	2020-08-21 03:10:08	对抗攻击之利用水印生成对抗样本	fecc78bb3e2c4e5412f43615872b3f505f9e7922	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.08747	0			'对抗攻击之利用水印生成对抗样本':1,2	zh	
470	10 个最好用的在线配色网站推荐	{"ver":2,"uid":1,"hash":"SHA1:9ee726a305795452b4e947fb8e65005d6471eaa9"}	https://toutiao.io/k/cx7a4mp	2020-08-21 03:10:08	10 个最好用的在线配色网站推荐	716d7f76461d4fa5ab525d8078712089f6b0d097	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.089366	0			'10':1,3 '个最好用的在线配色网站推荐':2,4	zh	
473	知道吗？容器镜像也可以延迟拉取	{"ver":2,"uid":1,"hash":"SHA1:2aff7e9457143bca746bc17f4be521eebf4dd418"}	https://toutiao.io/k/vcutmwu	2020-08-21 03:10:08	知道吗？容器镜像也可以延迟拉取	1c68550d63eba4c11ba08b7f7ddb35ad61670ebb	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.097402	0			'容器镜像也可以延迟拉取':2,4 '知道吗':1,3	zh	
707	Thanos 与 VictoriaMetrics，谁才是打造大型 Prometheus 监控系统的王者？	{"ver":2,"uid":1,"hash":"SHA1:6d7d7ec75a3548de3ee1187d2f41933a5677ee66"}	https://toutiao.io/k/oolya77	2020-08-28 03:10:09	Thanos 与 VictoriaMetrics，谁才是打造大型 Prometheus 监控系统的王者？	848b71ca25d8b88662570347aa7d0db3ff9c2a41	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.509535	0			'prometheus':5,11 'thanos':1,7 'victoriametrics':3,9 '与':2,8 '监控系统的王者':6,12 '谁才是打造大型':4,10	zh	
293	Mozilla signs fresh Google search deal	{"ver":2,"uid":1,"hash":"SHA1:e773788c1234b2660dcc9f90eaf7d7667e7b6224"}	https://www.theregister.com/2020/08/14/mozilla_google_search/	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24156813"> https://news.ycombinator.com/item?id=24156813 </a>	eff00bdcc42f7d06a6a783aedc3c6b9ef1fc493e	\N	f	2020-08-15 19:10:00	2020-08-18 02:10:08.465988	0			'/item?id=24156813':10 'comment':7 'deal':6 'fresh':3 'googl':4 'mozilla':1 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24156813':8 'search':5 'sign':2	zh	teraku
290	Amazon's ML University is making its online courses available to the public	{"ver":2,"uid":1,"hash":"SHA1:7c82f51313b12d135d4a9ca92fa41b90217a2954"}	https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24167034"> https://news.ycombinator.com/item?id=24167034 </a>	d13205c8ea4c42933b260d16e52441cb03872fc4	\N	f	2020-08-15 19:10:00	2020-08-18 19:10:08.586624	0			'/item?id=24167034':17 'amazon':1 'avail':10 'comment':14 'cours':9 'make':6 'ml':3 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24167034':15 'onlin':8 'public':13 'univers':4	zh	karxxm
309	首家强化学习大规模落地工业应用，快手是如何做到的？	{"ver":2,"uid":1,"hash":"SHA1:6f681dd173bd1c60412958b01c9b11fa986983df"}	https://toutiao.io/k/rvwz7yj	2020-08-16 01:10:09	首家强化学习大规模落地工业应用，快手是如何做到的？	b5f2c24dfa424dfef9da5e0288bf18141b8dd2fc	\N	f	2020-08-16 01:10:00	2020-08-16 22:10:08.63896	0			'快手是如何做到的':2,4 '首家强化学习大规模落地工业应用':1,3	zh	
472	如何编写一篇技术 BLOG	{"ver":2,"uid":1,"hash":"SHA1:38fc1bdaa8b8b9b20f352b7aadd90e4b9ab2dbaf"}	https://toutiao.io/k/3rrdanp	2020-08-21 03:10:08	如何编写一篇技术 BLOG	57c9d6fc55bef5c292f902e592c2b7a4a26f1c17	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.091793	0			'blog':2,4 '如何编写一篇技术':1,3	zh	
468	[推荐] 英语学习指南	{"ver":2,"uid":1,"hash":"SHA1:775cff558212dce13274b1212598edec8dc17789"}	https://toutiao.io/k/m9lrd6m	2020-08-24 19:10:09	[推荐] 英语学习指南	b61ea8059fc0f3c7d69aefd083ef25b828d1f764	\N	f	2020-08-21 03:10:00	2020-09-04 13:10:10.712245	0			'推荐':1,3 '英语学习指南':2,4	zh	
294	Mozilla’s Uncertain Future	{"ver":2,"uid":1,"hash":"SHA1:87e8d6647fc5637ccdaded3ad09b4ad84de12056"}	https://civilityandtruth.com/2020/08/13/mozillas-uncertain-future/	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24166385"> https://news.ycombinator.com/item?id=24166385 </a>	d9f1201c75f0e0ffdff8168ec1f0b93a7037b3af	\N	f	2020-08-15 19:10:00	2020-08-18 19:10:08.602649	0			'/item?id=24166385':8 'comment':5 'futur':4 'mozilla':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24166385':6 'uncertain':3	zh	jonathankoren
474	数据结构与算法：归并排序	{"ver":2,"uid":1,"hash":"SHA1:48f9a53199a5ed76d193d0a3174aefe7f0e6dfdf"}	https://toutiao.io/k/9l2wkb9	2020-08-21 03:10:08	数据结构与算法：归并排序	38928ad5c7b8c19aafb952ce750e61ab8235e646	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.103107	0			'归并排序':2,4 '数据结构与算法':1,3	zh	
471	语雀的技术架构演进之路	{"ver":2,"uid":1,"hash":"SHA1:81d6f27d2b455eeb1f51bb39e1ea46e60fc07e67"}	https://toutiao.io/k/qt9yjv5	2020-08-21 03:10:08	语雀的技术架构演进之路	62b2057a1308f09a3a6bc3b191b34b29ba6f427a	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.085569	0			'语雀的技术架构演进之路':1,2	zh	
708	程序员进阶系列：年少不懂爱加加，懂了已是猿中人	{"ver":2,"uid":1,"hash":"SHA1:095f5ce581eb1415b858307c9925d7ce54aab2d1"}	https://toutiao.io/k/niuc8fh	2020-08-28 03:10:09	程序员进阶系列：年少不懂爱加加，懂了已是猿中人	40f8fdc1914e94e704f775ea793ef13ac8844868	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.507397	0			'年少不懂爱加加':2,5 '懂了已是猿中人':3,6 '程序员进阶系列':1,4	zh	
709	Google Cloud 服务网格：Traffic Director 与 Anthos Service Mesh 的左右互搏	{"ver":2,"uid":1,"hash":"SHA1:370a69c29027073c12800e4dbd50c7df055c6dd5"}	https://toutiao.io/k/h86exeb	2020-08-28 03:10:09	Google Cloud 服务网格：Traffic Director 与 Anthos Service Mesh 的左右互搏	13141c7f64e78d967d38077c7c7245cc7eae33cd	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.511622	0			'anthos':7,17 'cloud':2,12 'director':5,15 'google':1,11 'mesh':9,19 'service':8,18 'traffic':4,14 '与':6,16 '服务网格':3,13 '的左右互搏':10,20	zh	
372	Dependency	{"ver":2,"uid":1,"hash":"SHA1:0b185efd34e0f92b6e85e72597cc04ff403e75a2"}	https://xkcd.com/2347/	2020-08-18 04:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24193278"> https://news.ycombinator.com/item?id=24193278 </a>	85f784d7f106a20115d9e7e8f8263d220ab4abe1	\N	f	2020-08-18 04:10:00	2020-08-21 06:10:09.892082	0			'/item?id=24193278':5 'comment':2 'depend':1 'news.ycombinator.com':4 'news.ycombinator.com/item?id=24193278':3	zh	kjhughes
284	Dear Google Cloud: Your Deprecation Policy Is Killing You	{"ver":2,"uid":1,"hash":"SHA1:b62c8594dd287e96c7377df54028a111e0735f6f"}	https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc	2020-08-15 17:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24165445"> https://news.ycombinator.com/item?id=24165445 </a>	c0fa27df72dbe2865da862442fd485e032f8948f	\N	f	2020-08-15 17:10:00	2020-08-18 19:10:08.559798	0			'/item?id=24165445':13 'cloud':3 'comment':10 'dear':1 'deprec':5 'googl':2 'kill':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24165445':11 'polici':6	zh	bigiain
477	是谁动了我的 DOM？	{"ver":2,"uid":1,"hash":"SHA1:6458a3b16a3669fd36b6d4a94ad71306876787a8"}	https://toutiao.io/k/5olqidi	2020-08-21 03:10:08	是谁动了我的 DOM？	8900f9949c749df115259b64a8a926be091a9bc7	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.101129	0			'dom':2,4 '是谁动了我的':1,3	zh	
291	A free video streaming service that runs on a ESP32	{"ver":2,"uid":1,"hash":"SHA1:04b17cd92888401d2a112b32c66f2696f8d9e4af"}	https://github.com/rossumur/espflix	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24150029"> https://news.ycombinator.com/item?id=24150029 </a>	5607f0bc996fff3f3bc58bc9e3e464cdb2178d3d	\N	f	2020-08-15 19:10:00	2020-08-17 06:10:07.793509	0			'/item?id=24150029':14 'comment':11 'esp32':10 'free':2 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24150029':12 'run':7 'servic':5 'stream':4 'video':3	zh	juanpabloaj
655	Is TDD Dead? (2014)	{"ver":2,"uid":1,"hash":"SHA1:435f1c27702818436b9eefbdb4f0308c81e17835"}	https://martinfowler.com/articles/is-tdd-dead/	2020-08-26 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24281195"> https://news.ycombinator.com/item?id=24281195 </a>	c67d24f4e963ecd5b9bc1e44a3d33ca2d64246b1	\N	f	2020-08-26 20:10:00	2020-08-29 04:10:17.731266	0			'/item?id=24281195':8 '2014':4 'comment':5 'dead':3 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24281195':6 'tdd':2	zh	cik
295	Air pollution is worse than we thought	{"ver":2,"uid":1,"hash":"SHA1:03868cee33b338ffa7e86a70bcf053457110ed8a"}	https://www.vox.com/energy-and-environment/2020/8/12/21361498/climate-change-air-pollution-us-india-china-deaths	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24143979"> https://news.ycombinator.com/item?id=24143979 </a>	f6d7c9df3157a5b68f2e0fd27ad36f28b330708e	\N	f	2020-08-15 19:10:00	2020-08-16 20:10:10.535862	0			'/item?id=24143979':11 'air':1 'comment':8 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24143979':9 'pollut':2 'thought':7 'wors':4	zh	elorant
287	I Love MDN, or the cult of the free in action	{"ver":2,"uid":1,"hash":"SHA1:c39eddae61d512b21d132be6233d62d8a29515b3"}	https://www.quirksmode.org/blog/archives/2020/08/i_love_mdn_or_t.html	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24159244"> https://news.ycombinator.com/item?id=24159244 </a>	97a817c2a2c54f57447da56174d3e1d8f00f13c1	\N	f	2020-08-15 19:10:00	2020-08-18 02:10:08.440058	0			'/item?id=24159244':15 'action':11 'comment':12 'cult':6 'free':9 'love':2 'mdn':3 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24159244':13	zh	MindGods
478	[推荐] 高并发系统三大利器之缓存	{"ver":2,"uid":1,"hash":"SHA1:4f733403c5c191940191a21d6a07ef29eb0add85"}	https://toutiao.io/k/gbvhdf1	2020-08-25 05:10:10	[推荐] 高并发系统三大利器之缓存	7560a6b002facc923a83245201649c7fda9d2052	\N	f	2020-08-21 03:10:00	2020-09-04 13:10:10.705408	0			'推荐':1,3 '高并发系统三大利器之缓存':2,4	zh	
476	王者荣耀背后的实时大数据平台用了什么黑科技？	{"ver":2,"uid":1,"hash":"SHA1:12a4f0034e1d7568f5825f268554b762a80d2b68"}	https://toutiao.io/k/22ay1p0	2020-08-21 03:10:08	王者荣耀背后的实时大数据平台用了什么黑科技？	9ecaa45a3c17427e6146ab08525867d12a23aeb1	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.09472	0			'王者荣耀背后的实时大数据平台用了什么黑科技':1,2	zh	
475	MT-BERT 在文本检索任务中的实践	{"ver":2,"uid":1,"hash":"SHA1:bcfd55e07a5fdcc95fa59a42609c8e2d8760c94c"}	https://toutiao.io/k/ewzrlmv	2020-08-21 03:10:08	MT-BERT 在文本检索任务中的实践	47e9afc07d4067dfcd62869f3569c58b945c11f1	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.099236	0			'bert':3,7 'mt':2,6 'mt-bert':1,5 '在文本检索任务中的实践':4,8	zh	
124	Python and Go : Part I - gRPC	{"ver":2,"uid":1,"hash":"SHA1:21fd92c8050673a5dd563be454b0fd64146a83c9"}	https://www.ardanlabs.com/blog/2020/06/python-go-grpc.html	2020-06-08 00:00:00	Series Index Python and Go: Part I - gRPC\nPython and Go: Part II - Extending Python With Go\nPython and Go: Part III - Packaging Python Code\nIntroduction Like tools, programming languages tend to solve problems they are designed to. You can use a knife to tighten a screw, but it&rsquo;s better to use a screwdriver. Plus there is less chance of you getting hurt in the process.	4b55b107a8bda53158f37d6f6b9424fb350da179	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.390895	0			'better':57 'chanc':66 'code':31 'design':43 'extend':20 'get':69 'go':3,11,17,23,26 'grpc':6,14 'hurt':70 'ii':19 'iii':28 'index':8 'introduct':32 'knife':49 'languag':36 'less':65 'like':33 'packag':29 'part':4,12,18,27 'plus':62 'problem':40 'process':73 'program':35 'python':1,9,15,21,24,30 'screw':53 'screwdriv':61 'seri':7 'solv':39 'tend':37 'tighten':51 'tool':34 'use':47,59	en	
712	基于 Proxy 的线程通信新方案	{"ver":2,"uid":1,"hash":"SHA1:d463dabe44b0183f8f1531a8f47e23a8316030e4"}	https://toutiao.io/k/vdfadri	2020-08-28 03:10:09	基于 Proxy 的线程通信新方案	c73855779f07d44185121d6e9aa1041ee6d57c3e	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.524332	0			'proxy':2,5 '基于':1,4 '的线程通信新方案':3,6	zh	
710	10 年测试，第一课	{"ver":2,"uid":1,"hash":"SHA1:906142450a12cc4ecc2217414f76632b343c0a0e"}	https://toutiao.io/k/6tqte0l	2020-08-28 03:10:09	10 年测试，第一课	f51dc97faf896990aacb8e8a3ae7d9bbfd8e8ae3	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.513853	0			'10':1,4 '年测试':2,5 '第一课':3,6	zh	
711	Go 内存管理之代码的逃逸分析	{"ver":2,"uid":1,"hash":"SHA1:0a32f2ef1734013c0090bac16d36578a3fc968be"}	https://toutiao.io/k/sn4xvrd	2020-08-28 03:10:09	Go 内存管理之代码的逃逸分析	5f54c601cc05217ea7a023ce024695113701f616	\N	f	2020-08-28 03:10:00	2020-08-29 00:10:08.515871	0			'go':1,3 '内存管理之代码的逃逸分析':2,4	zh	
454	微服务全链路异步化实践	{"ver":2,"uid":1,"hash":"SHA1:a3c733e5db5b2434ed6f73aab405acd2ca247973"}	https://toutiao.io/k/w8j691c	2020-08-20 05:10:10	微服务全链路异步化实践	a65d2661db28904797cec1dc3875a1c7caed6c0b	\N	f	2020-08-20 05:10:00	2020-08-21 00:10:48.697326	0			'微服务全链路异步化实践':1,2	zh	
453	创业是格局与思维的放大器	{"ver":2,"uid":1,"hash":"SHA1:5ca024f7aa86ee2781c3ddf1b3360a42ebd91626"}	https://toutiao.io/k/uc0e8kr	2020-08-20 05:10:10	创业是格局与思维的放大器	9372f169f47c47667887d7150df9fb9e938239e4	\N	f	2020-08-20 05:10:00	2020-08-21 00:10:48.699273	0			'创业是格局与思维的放大器':1,2	zh	
349	MicroPython	{"ver":2,"uid":1,"hash":"SHA1:aa02486dec4ff2d7983df7b93fb2510701eb30b0"}	https://micropython.org/	2020-08-17 08:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24166861"> https://news.ycombinator.com/item?id=24166861 </a>	44c7a67bacc6145ac93e13938b60e63919a09c0e	\N	f	2020-08-17 08:10:00	2020-08-18 17:10:08.925141	0			'/item?id=24166861':5 'comment':2 'micropython':1 'news.ycombinator.com':4 'news.ycombinator.com/item?id=24166861':3	zh	neilpanchal
348	Isoflow – Infrastructure Diagrams	{"ver":2,"uid":1,"hash":"SHA1:d10e856c0376ab7f8cd7f6e4bd91fa46d45f86a1"}	https://isoflow.io/	2020-08-17 08:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24168152"> https://news.ycombinator.com/item?id=24168152 </a>	8e555a8d4b1732ec6ccf2e89cfed495293487669	\N	f	2020-08-17 08:10:00	2020-08-18 04:10:08.961313	0			'/item?id=24168152':7 'comment':4 'diagram':3 'infrastructur':2 'isoflow':1 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24168152':5	zh	willemlabu
298	Show HN: I'm 15 and made a bedtime calculator with React JavaScript	{"ver":2,"uid":1,"hash":"SHA1:cab1a398f7370c23ed5a6139469d859276721399"}	https://www.sleepsources.com/bed-time-calculator/	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24139339"> https://news.ycombinator.com/item?id=24139339 </a>	e2cbf457ecbe46a8e8d5245e834697e165a75f69	\N	f	2020-08-15 19:10:00	2020-08-16 05:10:09.521411	0			'/item?id=24139339':17 '15':5 'bedtim':9 'calcul':10 'comment':14 'hn':2 'javascript':13 'm':4 'made':7 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24139339':15 'react':12 'show':1	zh	joshternyak
452	浅谈蓝队反制手段	{"ver":2,"uid":1,"hash":"SHA1:e6c2ef4eb2b390cdcd862e41a14d892a946170f9"}	https://toutiao.io/k/3n8uwrx	2020-08-20 05:10:10	浅谈蓝队反制手段	680e1f6cb87e0c18009a9009c01ef970bd34dc0b	\N	f	2020-08-20 05:10:00	2020-08-21 00:10:48.701164	0			'浅谈蓝队反制手段':1,2	zh	
296	Epic Games releases "Nineteen Eighty-Fortnite" ad	{"ver":2,"uid":1,"hash":"SHA1:ea251cdf7dffc1b9b09e9d6d5eec1e3258606f37"}	https://www.youtube.com/watch?v=euiSHuaw6Q4	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24148204"> https://news.ycombinator.com/item?id=24148204 </a>	d86b66fb0d1b4c53342db8bff8db4fa884331d6a	\N	f	2020-08-15 19:10:00	2020-08-17 06:10:07.799593	0			'/item?id=24148204':12 'ad':8 'comment':9 'eighti':6 'eighty-fortnit':5 'epic':1 'fortnit':7 'game':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24148204':10 'nineteen':4 'releas':3	zh	pizza
121	Generics Part 01: Basic Syntax	{"ver":2,"uid":1,"hash":"SHA1:c7d1375f9499ec08057e8a133c7e3a42e887a824"}	https://www.ardanlabs.com/blog/2020/07/generics-01-basic-syntax.html	2020-07-23 00:00:00	Changes The draft is a living document which means these posts will need to change over time. This section documents when changes have taken place to this post.\n21/08/20 : Moving forward with the generics design draft\nSeries Index Generics Part 01: Basic Syntax\nGenerics Part 02: Underlying Types\nIntroduction In this series of posts about generics in Go, I will present code and teach to the different aspects of the current generics draft.	83e3ec51d97813a2a3ebee49f4a8e371cdd8edcc	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.383102	0			'01':3,46 '02':51 '21/08/20':34 'aspect':73 'basic':4,47 'chang':6,20,27 'code':67 'current':76 'design':40 'differ':72 'document':12,25 'draft':8,41,78 'forward':36 'generic':1,39,44,49,61,77 'go':63 'index':43 'introduct':54 'live':11 'mean':14 'move':35 'need':18 'part':2,45,50 'place':30 'post':16,33,59 'present':66 'section':24 'seri':42,57 'syntax':5,48 'taken':29 'teach':69 'time':22 'type':53 'under':52	en	
319	Using machine learning to recreate photorealistic portraits of Roman Emperors	{"ver":2,"uid":1,"hash":"SHA1:8a89209db4901a4c47924ad12cbbd43f2a008a99"}	https://voshart.com/ROMAN-EMPEROR-PROJECT	2020-08-16 18:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24172603"> https://news.ycombinator.com/item?id=24172603 </a>	e6f8ca64d09f9088ab26babc549a827d6262fb4c	\N	f	2020-08-16 18:10:00	2020-08-18 19:10:08.617786	0			'/item?id=24172603':14 'comment':11 'emperor':10 'learn':3 'machin':2 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24172603':12 'photorealist':6 'portrait':7 'recreat':5 'roman':9 'use':1	zh	elorant
151	Creating the Art for Gopher Kart	{"ver":2,"uid":1,"hash":"SHA1:fd4817fe251a4416778c1fa8e3b6e3869c8ae5e9"}	https://www.ardanlabs.com/blog/2018/08/creating-the-art-for-gopher-kart.html	2018-08-14 00:00:00	In the months leading up to GopherCon, my wife Jamilet and I had come up with the idea of creating a “small” browser-based game for the convention using the racing theme. Neither of us had ever worked on a game before and we had no idea what was involved. However, we knew we wanted to design and build something special for the awesome Gopher community.\nThe original idea was to create a game where Gophers raced each other around a track.	bf17fa8b82bfdfd87cf83c9ed7f56091df635927	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.447835	0			'around':87 'art':3 'awesom':71 'base':31 'browser':30 'browser-bas':29 'build':66 'come':20 'communiti':73 'convent':35 'creat':1,26,79 'design':64 'ever':44 'game':32,48,81 'gopher':5,72,83 'gophercon':13 'howev':58 'idea':24,54,76 'involv':57 'jamilet':16 'kart':6 'knew':60 'lead':10 'month':9 'neither':40 'origin':75 'race':38,84 'small':28 'someth':67 'special':68 'theme':39 'track':89 'us':42 'use':36 'want':62 'wife':15 'work':45	en	
272	数据源管理：分布式 NoSQL 系统，Cassandra 集群管理	{"ver":2,"uid":1,"hash":"SHA1:36d73582e3451bf5d9f994c2831aea6f04cb1029"}	https://toutiao.io/k/ct1wjj2	2020-08-15 03:10:08	数据源管理：分布式 NoSQL 系统，Cassandra 集群管理	cb340950ce0e04babb880a5b8b149078dad7d4b9	\N	f	2020-08-15 03:10:00	2020-08-15 23:10:08.890712	0			'cassandra':5,11 'nosql':3,9 '分布式':2,8 '数据源管理':1,7 '系统':4,10 '集群管理':6,12	zh	
299	Report: Most Americans have no real choice in internet providers	{"ver":2,"uid":1,"hash":"SHA1:c5ddcde8ebb37e335c5610b23a53e7ccb7513a14"}	https://ilsr.org/report-most-americans-have-no-real-choice-in-internet-providers/	2020-08-15 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24162831"> https://news.ycombinator.com/item?id=24162831 </a>	68bd45f3dcf38403010f77328766395e13314aaa	\N	f	2020-08-15 19:10:00	2020-08-17 13:10:07.65121	0			'/item?id=24162831':14 'american':3 'choic':7 'comment':11 'internet':9 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24162831':12 'provid':10 'real':6 'report':1	zh	rmason
506	Fast.ai releases new deep learning course, libraries, and book	{"ver":2,"uid":1,"hash":"SHA1:f420e1cb6c522051b4df9b9d9cf42e6d15ef9d8a"}	https://www.fast.ai/2020/08/21/fastai2-launch/	2020-08-22 16:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24237207"> https://news.ycombinator.com/item?id=24237207 </a>	4261f8597f81e573ff8f4a822b4e094921ac7751	\N	f	2020-08-21 22:10:00	2020-08-25 22:10:10.486935	0			'/item?id=24237207':13 'book':9 'comment':10 'cours':6 'deep':4 'fast.ai':1 'learn':5 'librari':7 'new':3 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24237207':11 'releas':2	zh	amardeep
519	An Update on MDN Web Docs	{"ver":2,"uid":1,"hash":"SHA1:0a0baa8e3ddf3c07e3ae26a5476e60fab2ac54bc"}	https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs/	2020-08-22 05:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24237512"> https://news.ycombinator.com/item?id=24237512 </a>	ec05412d6ec816fd2c035bd49f1bc4e9a4571889	\N	f	2020-08-22 05:10:00	2020-08-25 22:10:10.547324	0			'/item?id=24237512':10 'comment':7 'doc':6 'mdn':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24237512':8 'updat':2 'web':5	zh	weinzierl
455	为什么微信推荐这么快？	{"ver":2,"uid":1,"hash":"SHA1:7762b6ba20fb1c005b826d3d8024668461c990fc"}	https://toutiao.io/k/0ebjtus	2020-08-20 05:10:10	为什么微信推荐这么快？	e9bd1ed30a39c1c78ef46595de263928f25f6793	\N	f	2020-08-20 05:10:00	2020-08-21 00:10:48.695365	0			'为什么微信推荐这么快':1,2	zh	
456	3000 类别，20 万个标注，山师等推出大规模 Logo 检测数据集：LogoDet-3K	{"ver":2,"uid":1,"hash":"SHA1:23aaa77e1275322f836d8dac960d336cf64946bb"}	https://toutiao.io/k/mwu3ins	2020-08-20 05:10:10	3000 类别，20 万个标注，山师等推出大规模 Logo 检测数据集：LogoDet-3K	0f501895ac008ab3f745664610d176d9f0ffe633	\N	f	2020-08-20 05:10:00	2020-08-21 00:10:48.702969	0			'20':3,13 '3000':1,11 '3k':10,20 'logo':6,16 'logodet':9,19 'logodet-3k':8,18 '万个标注':4,14 '山师等推出大规模':5,15 '检测数据集':7,17 '类别':2,12	zh	
321	[推荐] 图解：通用搜索引擎背后的技术点	{"ver":2,"uid":1,"hash":"SHA1:0ce9649ff93f2c892744fa1ed5e4dc6002e0c9a8"}	https://toutiao.io/k/l5wu4f9	2020-08-16 18:10:09	[推荐] 图解：通用搜索引擎背后的技术点	26efab256c6e6a02281d39a3fc3cbff8022af0eb	\N	f	2020-08-16 18:10:00	2020-08-27 12:10:09.960604	0			'图解':2,5 '推荐':1,4 '通用搜索引擎背后的技术点':3,6	zh	
320	[推荐] 为什么我们放弃了 Vue？Vue 和 React 深度对比	{"ver":2,"uid":1,"hash":"SHA1:d21153e80025fa6b2c461a85a8ce82241492cf17"}	https://toutiao.io/k/wtofrd2	2020-08-16 18:10:09	[推荐] 为什么我们放弃了 Vue？Vue 和 React 深度对比	e7596adcc5dcb055343be18c7889502d6d02ee7f	\N	f	2020-08-16 18:10:00	2020-08-27 15:10:13.178931	0			'react':6,13 'vue':3,4,10,11 '为什么我们放弃了':2,9 '和':5,12 '推荐':1,8 '深度对比':7,14	zh	
716	实时数仓在滴滴的实践和落地	{"ver":2,"uid":1,"hash":"SHA1:fbf03a36a1ffdfe3524728d06ae35b69a9713826"}	https://toutiao.io/k/8g42wm9	2020-08-28 04:10:10	实时数仓在滴滴的实践和落地	5207925cc72de31f9e602bacd56dbb36fe598600	\N	f	2020-08-28 04:10:00	2020-08-29 00:10:08.520211	0			'实时数仓在滴滴的实践和落地':1,2	zh	
715	我想贪图安逸，但又不甘心，怎么办？	{"ver":2,"uid":1,"hash":"SHA1:c141b5321fb51935580bfff199b66fd44a5989ed"}	https://toutiao.io/k/0ta5lxe	2020-08-28 04:10:10	我想贪图安逸，但又不甘心，怎么办？	27ed2b29d67948891b45f0b2671c8c12ced1c31d	\N	f	2020-08-28 04:10:00	2020-08-29 00:10:08.52228	0			'但又不甘心':2,5 '怎么办':3,6 '我想贪图安逸':1,4	zh	
714	分布式系统入门之路	{"ver":2,"uid":1,"hash":"SHA1:9cee3ef646769b1bddb2c07f48e8347404fa10f1"}	https://toutiao.io/k/myqyxe0	2020-08-28 04:10:10	分布式系统入门之路	ade852a15e816705f07f962e551b4b19804cc5b4	\N	f	2020-08-28 04:10:00	2020-08-29 00:10:08.498918	0			'分布式系统入门之路':1,2	zh	
717	彻底弄懂 TCP 协议：从三次握手说起	{"ver":2,"uid":1,"hash":"SHA1:713a91922d7bbb7b4bfd7bb9073099b635853290"}	https://toutiao.io/k/g6ttk6b	2020-08-28 04:10:10	彻底弄懂 TCP 协议：从三次握手说起	41b33d01cb7e2c0a978ff505c5215b66a7cfd75b	\N	f	2020-08-28 04:10:00	2020-08-29 00:10:08.517941	0			'tcp':2,6 '从三次握手说起':4,8 '协议':3,7 '彻底弄懂':1,5	zh	
47	Fixing Language Display Problems in Ubuntu Games	{"ver":2,"uid":1,"hash":"SHA1:d8110fc534ce0fa256c7b0f79faee9da33861fa2"}	https://leimao.github.io/blog/Ubuntu-Game-Language-Display-Problems-Fix/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Because many game engines, such as Unity, have supported Linux systems, more and more games are now available for Linux on Steam. However, sometimes there are language display issues when we try to play games in Linux using non-English languages. In this blog post, I would like to discuss how to solve such language display problems.</p>\n\n<h3 id="the-escapists-2-language-display-problem">The Escapists 2 Language Display Problem</h3>\n\n<p><a href="https://store.steampowered.com/app/641990/The_Escapists_2/">“The Escapists 2”</a> is a popular game on Steam which supports multiple languages including Chinese. However, when I tried to play the game using Chinese in Ubuntu 20.04 LTS, I got Chinese display problems. There is almost no Chinese characters displayed in the menu.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-28-Ubuntu-Game-Language-Display-Problems-Fix/fix-before.png" style="width: 100%; height: 100%" />\n    <figcaption>The Escapists 2 - No Chinese</figcaption>\n</figure>\n</div>\n\n<p>It turns out that the game engine of “The Escapists 2”, Unity, uses the Chinese font <a href="https://packages.ubuntu.com/focal/fonts-wqy-microhei"><code class="language-plaintext highlighter-rouge">wqy-microhei</code></a> for this particular game. If this Chinese font was not installed in the system, the game will not complain and display no Chinese. To solve this problem, we would have to install the Chinese font accordingly. In our case,</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update\n<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>fonts-wqy-microhei\n</code></pre></div></div>\n\n<p>With the Chinese font <code class="language-plaintext highlighter-rouge">wqy-microhei</code> installed, now the game would display Chinese correctly.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-06-28-Ubuntu-Game-Language-Display-Problems-Fix/fix-after.png" style="width: 100%; height: 100%" />\n    <figcaption>The Escapists 2 - Chinese Fixed</figcaption>\n</figure>\n</div>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>When there are non-English language display problems in Linux games, it is highly likely that the Linux system misses some fonts corresponding to the language. Unfortunately, I don’t know a way to determine which font the system misses. But usually finding out all the fonts that the game engine would probably use for the language and install all of them would work.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://steamcommunity.com/app/641990/discussions/2/2381701715727190942/?l=norwegian&amp;ctp=2#c2381701715726199126">The Chinese Display Problems in “The Escapists 2”</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Ubuntu-Game-Language-Display-Problems-Fix/">Fixing Language Display Problems in Ubuntu Games</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on June 28, 2020.</p>	fad063db3c36a4c5ad75b53d467b53f695478d0d	\N	f	2020-08-14 05:06:00	2020-09-06 18:10:10.755454	0			'2':69,75,119,132,207,285 '20.04':100 '2020':308 '28':307 'accord':176 'almost':109 'apt':181,184 'avail':26 'blog':53 'book':304 'case':179 'charact':112 'chines':87,97,104,111,121,136,147,163,174,192,203,208,279 'complain':159 'correct':204 'correspond':235 'determin':247 'discuss':59 'display':3,36,65,71,105,113,161,202,219,280,288 'engin':12,128,263 'english':49,217 'escapist':68,74,118,131,206,284 'final':210 'find':255 'fix':1,209,286 'font':137,148,175,187,193,234,249,259 'fonts-wqy-microhei':186 'game':7,11,23,43,79,95,127,144,156,200,223,262,292 'got':103 'high':226 'howev':31,88 'includ':86 'instal':151,172,185,197,271 'introduct':8 'issu':37 'june':306 'know':243 'languag':2,35,50,64,70,85,218,238,269,287 'lei':297,300 'like':57,227 'linux':18,28,45,222,230 'log':303 'lts':101 'mani':10 'mao':298,301 'menu':116 'microhei':140,189,196 'miss':232,252 'multipl':84 'non':48,216 'non-english':47,215 'origin':294 'particular':143 'play':42,93 'popular':78 'post':54 'probabl':265 'problem':4,66,72,106,167,220,281,289 'publish':295 'refer':277 'remark':211 'solv':62,165 'sometim':32 'steam':30,81 'sudo':180,183 'support':17,83 'system':19,154,231,251 'tri':40,91 'turn':123 'ubuntu':6,99,291 'unfortun':239 'uniti':15,133 'updat':182 'use':46,96,134,266 'usual':254 'way':245 'work':276 'would':56,169,201,264,275 'wqi':139,188,195 'wqy-microhei':138,194	en	Lei Mao
981	[Rust][权限控制][Casbin] Rust 下成熟好用的权限控制库	{"ver":2,"uid":1,"hash":"SHA1:807ccbf0d8e3b9c4a63981f8eff9b6e8b71a76a0"}	https://rustcc.cn/article?id=3893e140-54ce-478d-9399-71dca43ecbe7	2020-09-01 08:50:19	<h1>什么是<a href="https://github.com/casbin/casbin-rs" rel="noopener noreferrer">Casbin-rs</a></h1>\n<p><a href="https://github.com/casbin/casbin" rel="noopener noreferrer">Casbin</a>是罗阳博士主导开发的基于 Go 语言的权限控制库。它支持 ACL, RBAC, ABAC 等常用的访问控制模型。</p>\n<p><a href="https://github.com/casbin/casbin-rs" rel="noopener noreferrer">Casbin-rs</a>则是 Rust 语言下的移植， 相比 Go 语言版本有更高的速度和内存安全保障。</p>\n<h1>Casbin 做了什么</h1>\n<ol>\n<li>Casbin 的配置文件由两部分组成， 一个是 Configuration 文件（可以理解为模型配置文件）， 配置了模型（ Model ）选用，分组（ Group ）配置，定义请求（ Request ）和策略（ Policy ）结构，再有就是匹配器（ Matcher ）的配置，这些在后文由叙述。另外一个就是策略（ Policy ）的盛放容器， 这个可以是 csv 文件，也可以是数据库（ MySQL/PostgreSQl ）。容器中的 Policies 都衍生于 Model 的配置</li>\n<li>支持 RBAC 中的多层角色继承，不止主体可以有角色，资源也可以具有角色</li>\n<li>支持超级用户，如 root 或 Administrator，超级用户可以不受授权策略的约束访问任意资源</li>\n<li>支持多种内置的操作符，如 keyMatch，方便对路径式的资源进行管理，如 /book/1 可以映射到 /book/:id</li>\n</ol>\n<h1>Casbin 不做什么</h1>\n<ol>\n<li>身份认证 authentication(即验证用户的用户名、密码)，casbin 只负责访问控制。应该有其他专门的组件负责身份认证，然后由 casbin 进行访问控制，二者是相互配合的关系。</li>\n<li>管理用户列表或角色列表。Casbin 认为由项目自身来管理用户、角色列表更为合适，用户通常有他们的密码，但是 Casbin 的设计思想并不是把 它作为一个存储密码的容器。而是存储 RBAC 方案中用户和角色之间的映射关系。</li>\n</ol>\n<h1>一个例子</h1>\n<h2>模型配置</h2>\n<pre><code>// model.conf\n# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act\n</code></pre>\n<p>这是一个模型定义文件， 其中<code>sub</code>代表访问资源的用户， <code>obj</code>表示要访问的资源， <code>act</code>表示对资源执行的操作。如果在 Web 的情形中，可以理解为，sub 对应用户名，obj 对应访问的 URL Path，act 代表 HTTP 动作(GET/POST/PUT).</p>\n<p>在这里，Request Definition 告诉我们请求是什么构成，一共三个。Policy Defination 有什么构成，和前面的同理。Policy Effect 告诉我们什么时候规则是有效的，而 Matcher 告诉我们当请求和策略满足一定关系才可以返回真（允许操作）。如上，意思就很明白。</p>\n<p>如果我们要加入一个超级管理员，它可以执行任何操作，可以这样写：</p>\n<pre><code>[matchers]\nm = r.sub == p.sub &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act || r.sub == "root"\n</code></pre>\n<h2>策略配置</h2>\n<pre><code>p, alice, data1, read\np, bob, data2, write\n</code></pre>\n<p>上述的配合上文的模型配置表达的意思就是，alice 可以读 data1，bob 可以写 data2</p>\n<h1>Casbin Rust 生态</h1>\n<p>主仓库:</p>\n<p><a href="https://github.com/casbin/casbin-rs/" rel="noopener noreferrer">Casbin-RS</a>: 目前支持所有 Casbin Go 版本支持的特性，正在活跃开发中</p>\n<p>目前 Casbin Rust 正稳步发展中，目前支持的组件有：</p>\n<ul>\n<li><a href="https://github.com/casbin-rs/diesel-adapter" rel="noopener noreferrer">Casbin Diesel Adaper</a>: 使用 Rust 目前最火的 ORM 类库开发的适配器，支持 MySQL/PostgreSQL/SQLite</li>\n<li><a href="https://github.com/hackerchai/actix-casbin-auth" rel="noopener noreferrer">Casbin Actix-web Middleware</a>: Rust 最由名气的 Web 框架当属 Actix-web，性能霸榜。Casbin 支持 Actix 中间件,自动为请求进行权限管理</li>\n<li><a href="https://github.com/hackerchai/actix-casbin" rel="noopener noreferrer">Casbin Actix-web Actor</a>: Actix 框架下对 Casbin 进行二次封装，方便在 Actix-web 中使用，封装了常用函数</li>\n<li><a href="https://github.com/casbin-rs/sqlx-adapter" rel="noopener noreferrer">Casbin Sqlx Adapter</a>: 支持完全异步的数据库中间件，性能更好，基于 Sqlx 。支持 MySQL/PostgreSQL</li>\n</ul>\n<p>基于 Actix-web 开发，使用 Casbin 中间件鉴权， 使用 JWT 用户授权的例子：</p>\n<ul>\n<li><a href="https://github.com/casbin-rs/examples/tree/master/actix-middleware-example" rel="noopener noreferrer">Casbin Actix-web Real World App</a></li>\n</ul>\n<p>此外 Casbin 拥有强大的文档支持和社区依托：</p>\n<ul>\n<li><a href="https://casbin.org" rel="noopener noreferrer">Casbin 官网</a> <a href="https://casbin.org/docs/en/overview" rel="noopener noreferrer">Casbin 文档</a></li>\n<li><a href="https://forum.casbin.org" rel="noopener noreferrer">Casbin 论坛</a></li>\n<li>Casbin 同时支持除了 Go，Rust 以外六种语言：Mode.js, PHP, Python, C#(.NET), C++, Java</li>\n</ul>\n<p><strong>最后希望各位看官走过路过，别忘了给一个 Star 支持一下我们的开发</strong></p>\n	9ac5787e43a4fadabae5c9db1745d7bc81afffd9	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.19673	0			'/book':79 '/book/1':77 'abac':15 'acl':13 'act':116,124,157 'actix':238,246,251,256,259,265,280,291 'actix-web':237,245,255,264,279,290 'actor':258 'act表示对资源执行的操作':146 'adaper':228 'adapter':271 'administrator':70 'alice':195,203 'allow':133 'app':295 'authentication':84 'bob':199,206 'c':313,315 'casbin':3,18,25,27,81,87,91,95,100,209,214,217,222,226,236,249,254,261,269,284,289,297,299,301,303,305 'casbin-rs':213 'casbin-rs则是':17 'casbin是罗阳博士主导开发的基于':9 'configuration':30 'csv':52 'data1':196,205 'data2':200,208 'defination':168 'definition':110,112,118,120,164 'diesel':227 'e':129 'effect':126,128,172 'get/post/put':161 'go':10,23,218,307 'group':37 'http':159 'id':80 'java':316 'jwt':287 'keymatch':74 'm':136,184 'matcher':45,175 'matchers':134,135,183 'middleware':240 'mode.js':310 'model':34,59 'model.conf':108 'mysql/postgresql':55,277 'mysql/postgresql/sqlite':235 'net':314 'obj':115,123,153 'obj表示要访问的资源':145 'orm':232 'p':121,194,198 'p.act':142,190 'p.eft':132 'p.obj':140,188 'p.sub':138,186 'path':156 'php':311 'policies':57 'policy':42,49,117,119,125,127,167,171 'python':312 'r':113 'r.act':141,189 'r.obj':139,187 'r.sub':137,185,191 'rbac':14,62,104 'read':197 'real':293 'request':40,109,111,163 'root':68,192 'rs':8,215 'rs则是':19 'rust':1,4,20,210,223,230,241,308 'some':130 'sqlx':270,275 'star':319 'sub':114,122,151 'url':155 'web':148,239,243,247,257,266,281,292 'where':131 'world':294 'write':201 '一个例子':106 '一个是':29 '一共三个':166 '上述的配合上文的模型配置表达的意思就是':202 '下成熟好用的权限控制库':5 '不做什么':82 '不止主体可以有角色':64 '中使用':267 '中的多层角色继承':63 '中间件':252 '中间件鉴权':285 '主仓库':212 '也可以是数据库':54 '二者是相互配合的关系':93 '什么是casbin':7 '什么是casbin-rs':6 '代表':158 '以外六种语言':309 '但是':99 '使用':229,283,286 '做了什么':26 '允许操作':177 '其中sub代表访问资源的用户':144 '再有就是匹配器':44 '分组':36 '别忘了给一个':318 '动作':160 '即验证用户的用户名':85 '另外一个就是策略':48 '只负责访问控制':88 '可以写':207 '可以映射到':78 '可以理解为':150 '可以理解为模型配置文件':32 '可以读':204 '可以这样写':182 '同时支持除了':306 '告诉我们什么时候规则是有效的':173 '告诉我们当请求和策略满足一定关系才可以返回真':176 '告诉我们请求是什么构成':165 '和前面的同理':170 '和策略':41 '在这里':162 '基于':274,278 '如':67,73,76 '如上':178 '如果在':147 '如果我们要加入一个超级管理员':180 '它作为一个存储密码的容器':102 '它可以执行任何操作':181 '它支持':12 '官网':300 '定义请求':39 '容器中的':56 '密码':86 '对应用户名':152 '对应访问的':154 '封装了常用函数':268 '应该有其他专门的组件负责身份认证':89 '开发':282 '性能更好':273 '性能霸榜':248 '意思就很明白':179 '或':69 '拥有强大的文档支持和社区依托':298 '支持':61,234,250,276 '支持一下我们的开发':320 '支持多种内置的操作符':72 '支持完全异步的数据库中间件':272 '支持超级用户':66 '文件':31,53 '文档':302 '方便在':263 '方便对路径式的资源进行管理':75 '方案中用户和角色之间的映射关系':105 '最后希望各位看官走过路过':317 '最由名气的':242 '有什么构成':169 '权限控制':2 '框架下对':260 '框架当属':244 '模型配置':107 '正在活跃开发中':220 '正稳步发展中':224 '此外':296 '然后由':90 '版本支持的特性':219 '生态':211 '用户授权的例子':288 '用户通常有他们的密码':98 '的情形中':149 '的盛放容器':50 '的设计思想并不是把':101 '的配置':46,60 '的配置文件由两部分组成':28 '目前':221 '目前支持所有':216 '目前支持的组件有':225 '目前最火的':231 '相比':22 '等常用的访问控制模型':16 '策略配置':193 '管理用户列表或角色列表':94 '类库开发的适配器':233 '结构':43 '而':174 '而是存储':103 '自动为请求进行权限管理':253 '角色列表更为合适':97 '认为由项目自身来管理用户':96 '论坛':304 '语言下的移植':21 '语言版本有更高的速度和内存安全保障':24 '语言的权限控制库':11 '资源也可以具有角色':65 '超级用户可以不受授权策略的约束访问任意资源':71 '身份认证':83 '这个可以是':51 '这些在后文由叙述':47 '这是一个模型定义文件':143 '进行二次封装':262 '进行访问控制':92 '选用':35 '都衍生于':58 '配置':38 '配置了模型':33		
957	We didn't encrypt your password, we hashed it	{"ver":2,"uid":1,"hash":"SHA1:124b0bd5379900df878df9d629ee081b9c6cf6f2"}	https://www.troyhunt.com/we-didnt-encrypt-your-password-we-hashed-it-heres-what-that-means/	2020-09-05 09:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24378617"> https://news.ycombinator.com/item?id=24378617 </a>	8cffc4b7989cf71364e45f915e8886d41c7f3dcb	\N	f	2020-09-05 09:10:00	2020-09-08 17:10:10.449506	0			'/item?id=24378617':13 'comment':10 'didn':2 'encrypt':4 'hash':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24378617':11 'password':6	zh	mrzool
1076	Why I link to Wayback Machine instead of original web content	{"ver":2,"uid":1,"hash":"SHA1:75891aa1a8f805ffc6eb65dcea116bb5b5d2a7ac"}	https://hawaiigentech.com/post/commentary/why-i-link-to-waybackmachine-instead/	2020-09-08 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24406193"> https://news.ycombinator.com/item?id=24406193 </a>	6e7da6f6ddbd5667e88f69d9fccbf77dd7cb44ec	\N	f	2020-09-08 15:10:00	2020-09-10 05:10:14.177767	0			'/item?id=24406193':15 'comment':12 'content':11 'instead':7 'link':3 'machin':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24406193':13 'origin':9 'wayback':5 'web':10	zh	puggo
199	Queue Your Way To Scalability	{"ver":2,"uid":1,"hash":"SHA1:1ac1691309f2888dd9fea5e4888868538cef0b5d"}	https://www.ardanlabs.com/blog/2013/12/queue-your-way-to-scalability.html	2013-12-20 00:00:00	Introduction\nThe first thing I did when I started programming in Go was begin porting my Windows utilities classes and service frameworks over to Linux. This is what I did when I moved from C++ to C#. Thank goodness, I soon learned about Iron.IO and the services they offered. Then it hit me, if I wanted true scalability, I needed to start building worker tasks that could be queued to run anywhere at any time.	2a01508c0849f803cdf4974b0638f0c01113e75e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.540502	0			'anywher':77 'begin':19 'build':68 'c':40,42 'class':24 'could':72 'first':8 'framework':27 'go':17 'good':44 'hit':57 'introduct':6 'iron.io':49 'learn':47 'linux':30 'move':38 'need':65 'offer':54 'port':20 'program':15 'queu':74 'queue':1 'run':76 'scalabl':5,63 'servic':26,52 'soon':46 'start':14,67 'task':70 'thank':43 'thing':9 'time':80 'true':62 'util':23 'want':61 'way':3 'window':22 'worker':69	en	
1077	Bash Pitfalls	{"ver":2,"uid":1,"hash":"SHA1:38362f173a95c27cd6eb0aa73ab5ea7b02c58d86"}	https://mywiki.wooledge.org/BashPitfalls	2020-09-08 15:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24401085"> https://news.ycombinator.com/item?id=24401085 </a>	482ef299b59c6edcf1874ae092990820868f1c55	\N	f	2020-09-08 15:10:00	2020-09-09 11:10:12.871361	0			'/item?id=24401085':6 'bash':1 'comment':3 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24401085':4 'pitfal':2	zh	aaron-santos
466	[译] 如果你只知道 go test 用于单元测试就太 LOW 了	{"ver":2,"uid":1,"hash":"SHA1:33d3e5ba4a65336d9832dcc8ba86e651dd629277"}	https://toutiao.io/k/a62743e	2020-08-21 03:10:08	[译] 如果你只知道 go test 用于单元测试就太 LOW 了	a8497a86f91e960ac9cd00d291287d5cd6a77bb6	\N	f	2020-08-21 03:10:00	2020-08-21 23:10:08.08181	0			'go':3,10 'low':6,13 'test':4,11 '了':7,14 '如果你只知道':2,9 '用于单元测试就太':5,12 '译':1,8	zh	
738	American Academy of Sleep Medicine calls for elimination of daylight saving time	{"ver":2,"uid":1,"hash":"SHA1:12d92734e430ffbfbb78d474e00e31186bbe3238"}	https://aasm.org/american-academy-of-sleep-medicine-calls-for-elimination-of-daylight-saving-time/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24312545"> https://news.ycombinator.com/item?id=24312545 </a>	8c1de698f348c343a4cd01fa0dce602590bfa6ca	\N	f	2020-08-29 06:10:00	2020-09-01 08:10:09.881688	0			'/item?id=24312545':16 'academi':2 'american':1 'call':6 'comment':13 'daylight':10 'elimin':8 'medicin':5 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24312545':14 'save':11 'sleep':4 'time':12	zh	oftenwrong
892	Apache Flink 漫谈系列：流表对偶 (duality) 性	{"ver":2,"uid":1,"hash":"SHA1:4504cf925141cb005d1a8adf049944df509642a8"}	https://toutiao.io/k/14oj69r	2020-09-03 06:10:09	Apache Flink 漫谈系列：流表对偶 (duality) 性	750078ca3f61604a0659fe1fb6cf9dda534bfe32	\N	f	2020-09-03 06:10:00	2020-09-03 23:10:09.963607	0			'apache':1,7 'duality':5,11 'flink':2,8 '性':6,12 '流表对偶':4,10 '漫谈系列':3,9	zh	
890	测试 10 年，10 节课（五）：单独测试是有风险的	{"ver":2,"uid":1,"hash":"SHA1:68a304ff4aafca2b9bfb56c9c403e6433c1a75d8"}	https://toutiao.io/k/i1vvuuz	2020-09-03 06:10:09	测试 10 年，10 节课（五）：单独测试是有风险的	97366e9b54c58821c8a689e8b4a70aed4abb2347	\N	f	2020-09-03 06:10:00	2020-09-03 23:10:09.961722	0			'10':2,4,9,11 '五':6,13 '单独测试是有风险的':7,14 '年':3,10 '测试':1,8 '节课':5,12	zh	
331	如何复用一套代码满足多样化的需求？	{"ver":2,"uid":1,"hash":"SHA1:3e53f91acb120c9279c96afc59d94c8d666c620d"}	https://toutiao.io/k/x35vow3	2020-08-17 00:10:14	如何复用一套代码满足多样化的需求？	9b7c32f15220643575943d838e00841654fcb09b	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.636905	0			'如何复用一套代码满足多样化的需求':1,2	zh	
739	Show HN: Healthcare Is Dumb	{"ver":2,"uid":1,"hash":"SHA1:c77a5bffe40ea8b8a69442c9855b2f2e84ff23b0"}	https://healthcareisdumb.com/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24309237"> https://news.ycombinator.com/item?id=24309237 </a>	48f1b22fa5f6a2e05d50104165e5fde3774d01de	\N	f	2020-08-29 06:10:00	2020-09-01 08:10:09.911415	0			'/item?id=24309237':9 'comment':6 'dumb':5 'healthcar':3 'hn':2 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24309237':7 'show':1	zh	antcas
481	Uber and Lyft shutdown in California averted as judge grants emergency stay	{"ver":2,"uid":1,"hash":"SHA1:e862524a85b2101180b912480c0f3fe4e9fbf05f"}	https://www.theverge.com/2020/8/20/21377841/uber-lyft-california-judge-block-emergency-stay-employees	2020-08-21 04:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24227340"> https://news.ycombinator.com/item?id=24227340 </a>	6cc3588239031c65fa9c83d99ab688a74e97ece0	\N	f	2020-08-21 04:10:00	2020-08-24 01:10:07.591218	0			'/item?id=24227340':16 'avert':7 'california':6 'comment':13 'emerg':11 'grant':10 'judg':9 'lyft':3 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24227340':14 'shutdown':4 'stay':12 'uber':1	zh	badwolf
894	在 View 上使用挂起函数（实战）	{"ver":2,"uid":1,"hash":"SHA1:34a45f687cb8cf4987a8e9c59e46be99ac63006b"}	https://toutiao.io/k/wv1lsqy	2020-09-03 06:10:09	在 View 上使用挂起函数（实战）	95b7190e0a47757d3f175e9f34dc62d76e589bc1	\N	f	2020-09-03 06:10:00	2020-09-03 23:10:09.965437	0			'view':2,6 '上使用挂起函数':3,7 '在':1,5 '实战':4,8	zh	
327	Facebook 对 Golang 依赖注入的实现	{"ver":2,"uid":1,"hash":"SHA1:fbbddcd79e4bac9465cfd7e9ba6b8478c0c496cf"}	https://toutiao.io/k/aiwwan4	2020-08-17 00:10:14	Facebook 对 Golang 依赖注入的实现	75a8c4139b26e6e1d6c2bc9da5451d34e6bef7b4	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.639532	0			'facebook':1,5 'golang':3,7 '依赖注入的实现':4,8 '对':2,6	zh	
329	Kubernetes 如何改变美团的云基础设施？	{"ver":2,"uid":1,"hash":"SHA1:3b9ea04ee1e4286482b18c5cae20d02a83da1520"}	https://toutiao.io/k/cur5n7m	2020-08-17 00:10:14	Kubernetes 如何改变美团的云基础设施？	5a2052c3d540306aa54443f5783b8637f0c02f4b	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.647028	0			'kubernetes':1,3 '如何改变美团的云基础设施':2,4	zh	
326	学 C 语言和学 C++ 它有毛关系吗？	{"ver":2,"uid":1,"hash":"SHA1:3bba563de1b6ba49801f06d78a8b76138feff4ea"}	https://toutiao.io/k/c7jl9z4	2020-08-17 15:10:09	学 C 语言和学 C++ 它有毛关系吗？	0f4bad7ad68c5c91a4b36a773d43b5dae6f58ce1	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.64942	0			'c':2,4,7,9 '学':1,6 '它有毛关系吗':5,10 '语言和学':3,8	zh	
330	LeetCode (100)：相同的树	{"ver":2,"uid":1,"hash":"SHA1:4bbcf8739e390c821fd470bb647fc08e7a55836a"}	https://toutiao.io/k/pag73bk	2020-08-17 00:10:14	LeetCode (100)：相同的树	a6a7ffa93fea7d62e44120c540800206d45d14dc	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.659975	0			'100':2,5 'leetcode':1,4 '相同的树':3,6	zh	
373	Apple, Epic, and the App Store	{"ver":2,"uid":1,"hash":"SHA1:eb7c81c67b4d9e2fd094415b4bca37e8567615a1"}	https://stratechery.com/2020/apple-epic-and-the-app-store/	2020-08-18 04:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24189153"> https://news.ycombinator.com/item?id=24189153 </a>	9508a3240580edee5825bb24ff19d2734ae47ae5	\N	f	2020-08-18 04:10:00	2020-08-21 06:10:09.919815	0			'/item?id=24189153':10 'app':5 'appl':1 'comment':7 'epic':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24189153':8 'store':6	zh	kaboro
893	滴滴数据通道服务演进之路	{"ver":2,"uid":1,"hash":"SHA1:e0227c6b7de23f486a9c039e858fe6fe2d8069ad"}	https://toutiao.io/k/nbncsx6	2020-09-03 06:10:09	滴滴数据通道服务演进之路	8cabbb4ace07e280dee02e406e3b752421c89dec	\N	f	2020-09-03 06:10:00	2020-09-03 23:10:09.959597	0			'滴滴数据通道服务演进之路':1,2	zh	
482	[推荐] HBase/TiDB 都在用的数据结构：LSM Tree，不得了解一下？	{"ver":2,"uid":1,"hash":"SHA1:8ffcb0f7b01377f70ddb378d23d22b9ef932bf36"}	https://toutiao.io/k/v90if5y	2020-08-21 04:10:09	[推荐] HBase/TiDB 都在用的数据结构：LSM Tree，不得了解一下？	59b69f9c22e9fb246e725739199582c24bafc299	\N	f	2020-08-21 04:10:00	2020-08-25 12:10:09.681705	0			'hbase/tidb':2,8 'lsm':4,10 'tree':5,11 '不得了解一下':6,12 '推荐':1,7 '都在用的数据结构':3,9	zh	
971	【Rust日报】2020-09-05	{"ver":2,"uid":1,"hash":"SHA1:bf173900da513f797cb063b311207de8d7b6eba5"}	https://rustcc.cn/article?id=38916d30-7e52-44fa-9fab-f64ec79d519c	2020-09-05 13:51:45	<h3>微软在c++静态分析工具实现了一些rust的安全规则</h3>\n<p>Rust和c++是两种流行的系统编程语言。多年来，c++的焦点一直放在性能上。我们越来越多地听到来自客户和安全研究人员的呼吁，认为c++语言应该有更强的安全保证。 Visual Studio 2019 version 16.7 在c++的核心检查中包含了四个新规则，以将Rust的一些安全特性合并到c++中。</p>\n<p><a href="https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/" rel="noopener noreferrer">文章链接</a>，https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/</p>\n<h3>在Nightly Rust的路径修整</h3>\n<p>就在昨天，这个<a href="https://github.com/rust-lang/rust/pull/73996" rel="noopener noreferrer">Rust PR</a>(我正在做的)每晚都被合并到Rust中，这对编译器错误有着广泛的影响。</p>\n<p>在这篇文章中，我描述了这种变化以及从中可以期待什么。</p>\n<p>在错误中完整路径的问题：\n如下所示的简单程序将导致类型错误。</p>\n<pre><code>fn main() {\n    let a = vec![vec![String::from("a")]];\n    let b = vec![String::from("b")];\n    a == b;\n}\n</code></pre>\n<p>类型错误可以描述为:<code>cannot compare between values of the types Vec&lt;Vec&lt;String&gt;&gt; and Vec&lt;String&gt;</code>。在PR改变之前，这几乎是错误信息的第一行，其余的错误信息提供了更多关于特征的细节:</p>\n<pre><code>error[E0277]: can't compare `std::vec::Vec&lt;std::string::String&gt;` with `std::string::String`\n --&gt; example.rs:5:7\n  |\n5 |     a == b;\n  |       ^^ no implementation for `std::vec::Vec&lt;std::string::String&gt; == std::string::String`\n  |\n  = help: the trait `std::cmp::PartialEq&lt;std::string::String&gt;` is not implemented for `std::vec::Vec&lt;std::string::String&gt;`\n  = note: required because of the requirements on the impl of `std::cmp::PartialEq&lt;std::vec::Vec&lt;std::string::String&gt;&gt;` for `std::vec::Vec&lt;std::vec::Vec&lt;std::string::String&gt;&gt;`\n</code></pre>\n<p>值得注意的是，在上述错误中，造成认知负担的最大因素是类型和特征的完整合格路径(例如std::vec:: vec)。对很多人来说，它的可读性有很大的不同。</p>\n<p><a href="https://blog.aloni.org/posts/path-trimming-in-rust-nightly/" rel="noopener noreferrer">文章链接</a>，https://blog.aloni.org/posts/path-trimming-in-rust-nightly/</p>\n<h3>窥视Rust枚举（enum）的内部</h3>\n<p>在我的twitch频道最近的Rust问答环节中，有人问了一个看起来很简单的问题:为什么像SmartString或SmolStr这样的小字符串类型和string一样大小，而像SmallVec这样的小vec类型却比vec大?</p>\n<p>我知道我刚刚用了形容词simple，但事实是:为了理解这个问题，我们需要一些背景知识。</p>\n<p><a href="https://fasterthanli.me/articles/peeking-inside-a-rust-enum" rel="noopener noreferrer">文章链接</a>，https://fasterthanli.me/articles/peeking-inside-a-rust-enum</p>\n<hr>\n<p>From 日报小组 <a href="https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" rel="noopener noreferrer">TOM</a></p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	f70bf7cad76bc454e5a796efda22f06742248162	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.184067	0			'-05':4 '-09':3 '/articles/peeking-inside-a-rust-enum':180 '/cppblog/new-safety-rules-in-c-core-check/':27 '/posts/path-trimming-in-rust-nightly/':165 '16.7':19 '2019':17 '2020':2 '5':91 '7':90 'a':43,48,55,92 'and':68 'b':50,54,56,93 'because':127 'between':60 'blog.aloni.org':164 'blog.aloni.org/posts/path-trimming-in-rust-nightly/':163 'c':10 'can':76 'cannot':58 'cmp':110,136 'compare':59,78 'devblogs.microsoft.com':26 'devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/':25 'e0277':75 'enum':167 'error':74 'example.rs:5':89 'fasterthanli.me':179 'fasterthanli.me/articles/peeking-inside-a-rust-enum':178 'fn':40 'for':96,118,144 'from':47,53,181 'help':106 'impl':133 'implementation':95 'implemented':117 'is':115 'let':42,49 'main':41 'no':94 'not':116 'note':125 'of':62,128,134 'on':131 'partialeq':111,137 'pr':32 'required':126 'requirements':130 'rustcc论坛':185 'rust和c':7 'rust日报':1 'rust的路径修整':29 'rust语言中文社区':188 'std':79,82,86,97,100,103,109,112,119,122,135,138,141,145,148,151 'string':46,52,67,70,83,84,87,88,101,102,104,105,113,114,123,124,142,143,152,153 'studio':16 't':77 'the':63,107,129,132 'tom':183 'trait':108 'types':64 'values':61 'vec':44,45,51,65,66,69,80,81,98,99,120,121,139,140,146,147,149,150,158,159 'version':18 'visual':15 'with':85 '中':23 '为了理解这个问题':175 '为什么像smartstring或smolstr这样的小字符串类型和string一样大小':171 '以将rust的一些安全特性合并到c':22 '但事实是':174 '例如std':157 '值得注意的是':154 '其余的错误信息提供了更多关于特征的细节':73 '在c':20 '在nightly':28 '在pr改变之前':71 '在上述错误中':155 '在我的twitch频道最近的rust问答环节中':169 '在这篇文章中':36 '在错误中完整路径的问题':38 '多年来':9 '如下所示的简单程序将导致类型错误':39 '它的可读性有很大的不同':161 '对很多人来说':160 '就在昨天':30 '微信公众号':187 '微软在c':5 '我们越来越多地听到来自客户和安全研究人员的呼吁':12 '我们需要一些背景知识':176 '我描述了这种变化以及从中可以期待什么':37 '我正在做的':33 '我知道我刚刚用了形容词simple':173 '支持rss':186 '文章链接':24,162,177 '日报小组':182 '是两种流行的系统编程语言':8 '有人问了一个看起来很简单的问题':170 '每晚都被合并到rust中':34 '的内部':168 '的核心检查中包含了四个新规则':21 '的焦点一直放在性能上':11 '社区学习交流平台订阅':184 '窥视rust枚举':166 '类型错误可以描述为':57 '而像smallvec这样的小vec类型却比vec大':172 '认为c':13 '语言应该有更强的安全保证':14 '这个rust':31 '这几乎是错误信息的第一行':72 '这对编译器错误有着广泛的影响':35 '造成认知负担的最大因素是类型和特征的完整合格路径':156 '静态分析工具实现了一些rust的安全规则':6		
334	深入浅出 GFS（分布式文件存储）	{"ver":2,"uid":1,"hash":"SHA1:efa9da16762d181b78de5a8267c836b3f9cf4b7f"}	https://toutiao.io/k/bjuxka6	2020-08-17 00:10:14	深入浅出 GFS（分布式文件存储）	26883258cea821f9d49f16b6178b661bc1e0ea28	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.661923	0			'gfs':2,5 '分布式文件存储':3,6 '深入浅出':1,4	zh	
332	懂程序员的产品经理是什么样子？	{"ver":2,"uid":1,"hash":"SHA1:5400c25e490db56baa1b0c240715fe6d29321a09"}	https://toutiao.io/k/odvsl62	2020-08-17 00:10:14	懂程序员的产品经理是什么样子？	6d0b9a9bbf1e3e1cd6767b274a7737cb12743a74	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.644506	0			'懂程序员的产品经理是什么样子':1,2	zh	
656	Jacques Cousteau’s grandson wants to build the ISS of the sea	{"ver":2,"uid":1,"hash":"SHA1:843c263a39ce0210ddcc4b6421fefb61b6b1a799"}	https://www.smithsonianmag.com/innovation/jacques-cousteaus-grandson-wants-to-build-international-space-station-of-the-sea-180975635/	2020-08-26 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24280576"> https://news.ycombinator.com/item?id=24280576 </a>	5a145220c7b2be19b08e062cac59daccfda8e290	\N	f	2020-08-26 21:10:00	2020-08-29 04:10:17.76967	0			'/item?id=24280576':16 'build':7 'comment':13 'cousteau':2 'grandson':4 'iss':9 'jacqu':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24280576':14 'sea':12 'want':5	zh	YeGoblynQueenne
328	[推荐] ​Linux CPU 性能优化指南	{"ver":2,"uid":1,"hash":"SHA1:5cd941c7e4f83962b4731fe99feaf2d85257c382"}	https://toutiao.io/k/e6zbho6	2020-08-20 17:10:10	[推荐] ​Linux CPU 性能优化指南	79325ccac7edab7f19148024af36c2ecf3b37b2a	\N	f	2020-08-17 00:10:00	2020-08-31 16:10:10.800194	0			'cpu':3,7 'linux':2,6 '性能优化指南':4,8 '推荐':1,5	zh	
479	[推荐] 美国如果把根域名服务器封了，中国会从网络上消失？	{"ver":2,"uid":1,"hash":"SHA1:a68478c9110ae2470f180127e17fafff90d31bf0"}	https://toutiao.io/k/yitvf34	2020-08-24 18:10:09	[推荐] 美国如果把根域名服务器封了，中国会从网络上消失？	8e64a156a006adb8f738a4a8e367aab366b2de0d	\N	f	2020-08-21 03:10:00	2020-09-04 15:10:24.981915	0			'中国会从网络上消失':3,6 '推荐':1,4 '美国如果把根域名服务器封了':2,5	zh	
687	SEC Modernizes the Accredited Investor Definition	{"ver":2,"uid":1,"hash":"SHA1:e8b24b234986e3863e2efe0c9d0f31353608c501"}	https://www.sec.gov/news/press-release/2020-191	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24282258"> https://news.ycombinator.com/item?id=24282258 </a>	b7fd0fa6a1a8182d246c3a2873135ba62ede66b5	\N	f	2020-08-27 22:10:00	2020-08-28 17:10:20.112735	0			'/item?id=24282258':10 'accredit':4 'comment':7 'definit':6 'investor':5 'modern':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24282258':8 'sec':1	zh	cdiddy2
688	Wind and solar are cheaper than thought, admits UK government	{"ver":2,"uid":1,"hash":"SHA1:d26e982e0d031e83e94975607c1b1c679773b2e8"}	https://www.carbonbrief.org/wind-and-solar-are-30-50-cheaper-than-thought-admits-uk-government	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24295309"> https://news.ycombinator.com/item?id=24295309 </a>	889b289d3a542e023d340ee2f8729184c31be48c	\N	f	2020-08-27 22:10:00	2020-08-31 05:10:09.27906	0			'/item?id=24295309':14 'admit':8 'cheaper':5 'comment':11 'govern':10 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24295309':12 'solar':3 'thought':7 'uk':9 'wind':1	zh	open-source-ux
60	How to stop procrastinating by using the Fogg Behavior Model	{"ver":2,"uid":1,"hash":"SHA1:567c671f0dedc5f906ed8fb9b41539d55fea93d2"}	https://www.deprocrastination.co/blog/how-to-stop-procrastinating-by-using-the-fogg-behavior-model	2020-08-14 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24120275"> https://news.ycombinator.com/item?id=24120275 </a>	22e2e1353c57bf25797e8d821c6b4386f373bb0a	\N	f	2020-08-14 05:06:00	2020-08-15 17:10:08.280066	0			'/item?id=24120275':14 'behavior':9 'comment':11 'fogg':8 'model':10 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24120275':12 'procrastin':4 'stop':3 'use':6	zh	vitabenes
333	AI 技术如何打造智能语音质检系统	{"ver":2,"uid":1,"hash":"SHA1:7f1755f200b659f1779df325a06831611ff0e4b6"}	https://toutiao.io/k/wx36ke3	2020-08-17 00:10:14	AI 技术如何打造智能语音质检系统	7ea9a7febcda5eb41e1c63e9f19c9fb3c287f18d	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.651718	0			'ai':1,3 '技术如何打造智能语音质检系统':2,4	zh	
335	遇到困难的时候你会和谁说	{"ver":2,"uid":1,"hash":"SHA1:c3eeb32995e2550dbd0e486802bd18f1064eb04b"}	https://toutiao.io/k/d1qirzo	2020-08-17 00:10:14	遇到困难的时候你会和谁说	6d5abe6f4c72ed538ccc0e0d62e74050c57c3ba8	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.653843	0			'遇到困难的时候你会和谁说':1,2	zh	
336	Python 函数为什么会默认返回 None？	{"ver":2,"uid":1,"hash":"SHA1:c8657554aa7a5f83aeba19e1f937235ef5bfa4a0"}	https://toutiao.io/k/5ldsr7i	2020-08-17 00:10:14	Python 函数为什么会默认返回 None？	715f53cf7848cc43f6bdd4a1c308f319b6f8bae7	\N	f	2020-08-17 00:10:00	2020-08-18 00:10:10.655908	0			'none':3,6 'python':1,4 '函数为什么会默认返回':2,5	zh	
325	[推荐] 收藏! 超全的 GitHub 计算机算法、机器学习、深度学习的面试指南集锦	{"ver":2,"uid":1,"hash":"SHA1:24f8bfa6fc96757e70e48658969a4ac230ef33b7"}	https://toutiao.io/k/kumhh9k	2020-08-20 17:10:10	[推荐] 收藏! 超全的 GitHub 计算机算法、机器学习、深度学习的面试指南集锦	d5af89cf04666aa3da7b6b81c28147eb7560ed0f	\N	f	2020-08-17 00:10:00	2020-08-31 16:10:10.828025	0			'github':4,11 '推荐':1,8 '收藏':2,9 '机器学习':6,13 '深度学习的面试指南集锦':7,14 '计算机算法':5,12 '超全的':3,10	zh	
1087	资料 | Git 魔法.pdf	{"ver":2,"uid":1,"hash":"SHA1:c0274c184c1bd1c45a06eea4baa3d8125734b221"}	https://toutiao.io/k/poerfhe	2020-09-09 01:10:10	资料 | Git 魔法.pdf	09faf38e570f290e2eafb62c118bdd7534a49039	\N	f	2020-09-09 01:10:00	2020-09-10 00:10:10.153275	0			'git':2,6 'pdf':4,8 '资料':1,5 '魔法':3,7	zh	
1086	Tech firms face growing resentment of parent employees during Covid-19	{"ver":2,"uid":1,"hash":"SHA1:444964f88a28ac802adf3aabbc92817e23b6e0c0"}	https://www.cnet.com/news/tech-firms-face-growing-resentment-of-parent-employees-during-covid-19/	2020-09-09 01:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24393178"> https://news.ycombinator.com/item?id=24393178 </a>	6fe99c5945c790d1af132489082ca7cdaf1941d0	\N	f	2020-09-09 01:10:00	2020-09-10 05:10:14.175483	0			'-19':11 '/item?id=24393178':15 'comment':12 'covid':10 'employe':8 'face':3 'firm':2 'grow':4 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24393178':13 'parent':7 'resent':5 'tech':1	zh	walterbell
691	Signifier – a Brutalist response to 17th century typefaces	{"ver":2,"uid":1,"hash":"SHA1:fcec4a93e4667e2b9ba032645308e0eebdd716a0"}	https://klim.co.nz/blog/signifier-design-information/	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24274003"> https://news.ycombinator.com/item?id=24274003 </a>	44d29dac5a34fba714381e6377762850a4e7fae3	\N	f	2020-08-27 22:10:00	2020-08-28 04:10:10.155897	0			'/item?id=24274003':12 '17th':6 'brutalist':3 'centuri':7 'comment':9 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24274003':10 'respons':4 'signifi':1 'typefac':8	zh	firloop
692	Show HN: ztext.js – JavaScript library that makes any font 3D	{"ver":2,"uid":1,"hash":"SHA1:056daa9f92cd4432bbedf80df13eeeae29902abc"}	https://bennettfeely.com/ztext/	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24286335"> https://news.ycombinator.com/item?id=24286335 </a>	2fd6c6f5ca9b67457843019a066b00128cbf21c9	\N	f	2020-08-27 22:10:00	2020-08-28 04:10:10.158017	0			'/item?id=24286335':14 '3d':10 'comment':11 'font':9 'hn':2 'javascript':4 'librari':5 'make':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24286335':12 'show':1 'ztext.js':3	zh	bennettfeely
689	Preparing Our Partners for iOS 14	{"ver":2,"uid":1,"hash":"SHA1:a0cbf55f9b88c7378e8416869b0f9326326b5760"}	https://www.facebook.com/business/news/preparing-our-partners-for-ios-14-launch/	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24284613"> https://news.ycombinator.com/item?id=24284613 </a>	5b89cb694af65bd5229c4eef271f8608e40aa981	\N	f	2020-08-27 22:10:00	2020-08-28 08:10:09.099418	0			'/item?id=24284613':10 '14':6 'comment':7 'io':5 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24284613':8 'partner':3 'prepar':1	zh	danielamitay
974	[杭州] 资深Rust服务器程序员  30k ~ 60k	{"ver":2,"uid":1,"hash":"SHA1:a2ed345df58815a74df4889fc2e9d37c9d272827"}	https://rustcc.cn/article?id=f6a2e739-f0fa-428e-98bc-dfffd4085b8f	2020-09-04 06:37:32	<h3>公司概括</h3>\n<p>北京范飞科技有限公司是一家成立于2016年的App工作室，在公司正式成立之前核心团队已一起共事超过3年。历经多年的积累，范飞已经成长为集项目选型、开发、推广和运营一体的全能型App工作室，年纯利润超过2千万人民币。</p>\n<p>对用户，范飞崇尚用最好的技术为其提供最优的体验，并凭借体验优势占领市场第一位以获得丰厚的利润。对员工，范飞只接纳最优秀且愿意承担创业风险的人才，公司致力于全员共同创造利润最大化，并将利润回馈给团队成员，给予其所创造价值正比的回报，最终实现为员工创造更高生活品质的目标。</p>\n<p>公司目前的产品线横跨社交，健身，娱乐等多个领域，在移动端，桌面，网页都有技术布局。如果你对自己的技术自信，并想通过创造力获得更丰厚的报酬，那么这个团队就是为你而准备。</p>\n<h3>我们需要什么样的人才：</h3>\n<p>1、脱离翻译工具无障碍阅读英文技术文档；</p>\n<p>2、精通Rust，熟悉若干其它语言，比如Go，精通Linux；</p>\n<p>3、精通至少下列数据库: MySQL, Redis；</p>\n<p>4、至少有下列云平台经验：AWS，GCE；</p>\n<p>5、有大数据，高可用服务的项目核心开发经验。</p>\n<h3>岗位职责：</h3>\n<p>1、负责公司App的后端开发；</p>\n<p>2、负责公司内部平台的开发；</p>\n<p>3、参与产品技术架构设计；</p>\n<p>4、解决各种技术问题。</p>\n<h3>其他要求：</h3>\n<p>1、良好的沟通能力；</p>\n<p>2、品行优良；</p>\n<p>3、有创业精神。</p>\n<h3>我们提供：</h3>\n<p>1、精英型团队，我们所有开发成员均是资深级别；</p>\n<p>2、免费午餐/零食/饮料，iMac/MBP任选；</p>\n<p>3、与利润挂钩的年终奖金；</p>\n<p>4、入职即可享受7、12、17天（视工龄定）带薪年假；</p>\n<p>5、提供各种节假日福利及生日礼品，年度员工关怀体检。</p>\n<h3>条件稍逊者可应聘中级Rust服务器程序员，20k ~ 30k</h3>\n<h3>工作地点：</h3>\n<p>Base 杭州（分公司筹备阶段，前期可远程办公，具体地点确定后再到办公室办公）。</p>\n<p>简历投递：hr@fansup.mobi</p>\n	5c991b458146d86d01113014db0eb12bcb58559a	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.19117	0			'1':32,51,60,67 '12':80 '17天':81 '2':34,53,62,70 '20k':88 '3':39,55,64,76 '30k':3,89 '4':43,57,78 '5':47,84 '60k':4 'aws':45 'base':91 'gce':46 'hr@fansup.mobi':97 'imac/mbp':74 'mysql':41 'redis':42 '与利润挂钩的年终奖金':77 '任选':75 '健身':23 '免费午餐':71 '入职即可享受7':79 '公司概括':5 '公司目前的产品线横跨社交':22 '公司致力于全员共同创造利润最大化':18 '其他要求':59 '具体地点确定后再到办公室办公':95 '分公司筹备阶段':93 '前期可远程办公':94 '北京范飞科技有限公司是一家成立于2016年的app工作室':6 '历经多年的积累':8 '参与产品技术架构设计':56 '品行优良':63 '在公司正式成立之前核心团队已一起共事超过3年':7 '在移动端':25 '如果你对自己的技术自信':28 '娱乐等多个领域':24 '对员工':16 '对用户':13 '岗位职责':50 '工作地点':90 '带薪年假':83 '年度员工关怀体检':86 '年纯利润超过2千万人民币':12 '并凭借体验优势占领市场第一位以获得丰厚的利润':15 '并将利润回馈给团队成员':19 '并想通过创造力获得更丰厚的报酬':29 '开发':10 '我们所有开发成员均是资深级别':69 '我们提供':66 '我们需要什么样的人才':31 '推广和运营一体的全能型app工作室':11 '提供各种节假日福利及生日礼品':85 '最终实现为员工创造更高生活品质的目标':21 '有创业精神':65 '有大数据':48 '条件稍逊者可应聘中级rust服务器程序员':87 '杭州':1,92 '桌面':26 '比如go':37 '熟悉若干其它语言':36 '简历投递':96 '精英型团队':68 '精通linux':38 '精通rust':35 '精通至少下列数据库':40 '给予其所创造价值正比的回报':20 '网页都有技术布局':27 '脱离翻译工具无障碍阅读英文技术文档':33 '至少有下列云平台经验':44 '良好的沟通能力':61 '范飞只接纳最优秀且愿意承担创业风险的人才':17 '范飞崇尚用最好的技术为其提供最优的体验':14 '范飞已经成长为集项目选型':9 '视工龄定':82 '解决各种技术问题':58 '负责公司app的后端开发':52 '负责公司内部平台的开发':54 '资深rust服务器程序员':2 '那么这个团队就是为你而准备':30 '零食':72 '饮料':73 '高可用服务的项目核心开发经验':49		
690	How the Sacklers shifted $10.8B of an opioid fortune built on OxyContin	{"ver":2,"uid":1,"hash":"SHA1:50c156ee57a1a4f2b6e55f5200291707ae4fd143"}	https://www.bloomberg.com/graphics/2020-sackler-family-money/	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24281068"> https://news.ycombinator.com/item?id=24281068 </a>	49c8663cb8e4e1521036a099ca9a7d1209025959	\N	f	2020-08-27 22:10:00	2020-08-28 15:10:10.609921	0			'/item?id=24281068':17 '10.8':5 'b':6 'built':11 'comment':14 'fortun':10 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24281068':15 'opioid':9 'oxycontin':13 'sackler':3 'shift':4	zh	pseudolus
693	US indictments of piracy group members throw top-tier piracy world into chaos	{"ver":2,"uid":1,"hash":"SHA1:46b57cee28f4787042e34f5cbd3fbd66a10882ca"}	https://torrentfreak.com/us-indictments-and-raids-of-piracy-group-members-in-the-scene-throw-top-tier-piracy-world-into-chaos-200826/	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24280772"> https://news.ycombinator.com/item?id=24280772 </a>	689981520a952d582e2889913595ee9f18ad2579	\N	f	2020-08-27 22:10:00	2020-08-27 22:10:09.783678	0			'/item?id=24280772':18 'chao':14 'comment':15 'group':5 'indict':2 'member':6 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24280772':16 'piraci':4,11 'throw':7 'tier':10 'top':9 'top-tier':8 'us':1 'world':12	zh	Cantbekhan
694	Hands-on WebAssembly	{"ver":2,"uid":1,"hash":"SHA1:3c16f3d5101774b16bb0d98b3d3f04f9e08c6189"}	https://evilmartians.com/chronicles/hands-on-webassembly-try-the-basics	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24279912"> https://news.ycombinator.com/item?id=24279912 </a>	ffcae20e42baba2f278631e94d77de4c2525fd98	\N	f	2020-08-27 22:10:00	2020-08-27 22:10:09.787364	0			'/item?id=24279912':8 'comment':5 'hand':2 'hands-on':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24279912':6 'webassembl':4	zh	progapandist
695	Cat vs. panel heater: which is better?	{"ver":2,"uid":1,"hash":"SHA1:852035423717880e61af10f41dcc43be9ec807ad"}	https://www.oneroof.co.nz/news/38319	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24276702"> https://news.ycombinator.com/item?id=24276702 </a>	1bdcdc5d7b1f55a70d6aa98023540d89fca06731	\N	f	2020-08-27 22:10:00	2020-08-27 22:10:09.791009	0			'/item?id=24276702':11 'better':7 'cat':1 'comment':8 'heater':4 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24276702':9 'panel':3 'vs':2	zh	sillybilly
973	【Rust日报】2020-09-04 Rust 2021 Roadmap 计划	{"ver":2,"uid":1,"hash":"SHA1:cbfe2ab4f45c420a03b8fbb590d9d52a9db73c88"}	https://rustcc.cn/article?id=78b5a57f-30c0-4e47-b088-2c200b357aa8	2020-09-04 10:30:47	<h1>Rust 2021 Roadmap 计划</h1>\n<p>Rust的2021 Edition提上日程了，官方发布了一篇博客提到未来几周会同步进行两项重要的任务：</p>\n<p>1）进行2020年Rust开发者问卷调查</p>\n<p>2）希望每一位Rust开发者可以写一篇关于对Rust未来展望的博客，并且提交到<a href="https://forms.gle/Hv41uA5qJEY89XRm7" rel="noopener noreferrer">Google表单页</a></p>\n<p>博客链接: <a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html" rel="noopener noreferrer">https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html</a></p>\n<h1>Rust 核心团队成员 RalfJung 的PhD 毕业论文</h1>\n<p>Ralf 说：</p>\n<p>「\n完成了！ 我的论文终于完成了。 因此，如果您一直想深入了解我对Rust的研究（以及更多），可以阅读我的论文。 它有近300页，应该会让您忙一阵子。 ;）</p>\n<p>这也意味着，经过六年多的学习，我成为博士生的时间已经结束了。实际上，我当了十多年的学生了，是时候结束了。 真是奇怪的感觉。</p>\n<p>接下来肯定会继续做很多 Rusty 的事情，从事更多技术性的工作，研究迄今为止还没有研究过的东西。\n」</p>\n<p>论文简介：</p>\n<p>论文提出了两个项目，这些项目为Rust的正式基础奠定了基础，使我们能够更好地理解和发展这一重要语言：RustBelt和Stacked Borrows。</p>\n<p>RustBelt是Rust类型系统的形式化模型，并具有健全的内存和线程安全性证明。 该模型旨在验证Rust标准库中许多复杂API的安全性，尽管这些API的实现使用了Unsafe的语言功能。</p>\n<p>Stacked Borrows  是对Rust规范的建议扩展，它使编译器可以使用Rust类型的强别名信息来更好地分析和优化其正在编译的代码。 不仅可以正式评估该规范的适当性，还可以在实现了Stacked Borrows语义的Rust的Miri解释器的实际版本中运行真实的Rust代码。</p>\n<p>RustBelt建立在Iris（语言无关的框架）之上，该框架在Coq proof assistant中实现，用于构建更高阶的并发分离（ higher-order concurrent separation）逻辑。 本文首先介绍了Iris，并解释了Iris 如何从一些简单的成分中衍生出复杂的高级推理原理。 在RustBelt中，该技术被关键地用来引入生命周期逻辑，该逻辑提供了新颖的借用分离逻辑说明，这是Rust类型系统的关键突出特性。</p>\n<p>链接：<a href="https://www.ralfj.de/blog/2020/09/03/phd.html" rel="noopener noreferrer">https://www.ralfj.de/blog/2020/09/03/phd.html</a></p>\n<p>论文下载地址： <a href="https://people.mpi-sws.org/~jung/thesis.html" rel="noopener noreferrer">https://people.mpi-sws.org/~jung/thesis.html</a></p>\n<h1>nrc 宣布退出 Rust Core Team</h1>\n<p>nrc 是 Rust Core Team 的元老，为 Rust 做了很多贡献。</p>\n<p>他退出 Core Team 的原因：</p>\n<ol>\n<li>2019年就加入了 PingCAP ，专注于 数据库，只在业余时间为 Rust 贡献。</li>\n<li>今年他的二女儿马上要出生了，业余时间估计是没有了</li>\n<li>主要专注于PingCAP 数据库的工作</li>\n</ol>\n<p>所以，只能选择离开 Rust Core Team 了。并表示，在未来有时间的话，还是会回来给Rust做贡献的，离开只是暂时的。</p>\n<p>链接：<a href="https://www.ncameron.org/blog/leaving-the-rust-core-team/" rel="noopener noreferrer">https://www.ncameron.org/blog/leaving-the-rust-core-team/</a></p>\n<p>--\nFrom 日报小组 Folyd, broono</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=78b5a57f-30c0-4e47-b088-2c200b357aa8" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	5d9a769f9cc3c5ddbc2c7ae651494b1a14fc3124	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.188792	0			'-04':4 '-09':3 '/2020/09/03/planning-2021-roadmap.html':24 '/blog/2020/09/03/phd.html':92 '/blog/leaving-the-rust-core-team/':139 '/~jung/thesis.html':96 '1':16 '2':18 '2019年就加入了':115 '2020':2 '2021':6,10 'assistant中实现':74 'blog.rust-lang.org':23 'blog.rust-lang.org/2020/09/03/planning-2021-roadmap.html':22 'borrows':57,63 'borrows语义的rust的miri解释器的实际版本中运行真实的rust代码':68 'broono':143 'concurrent':79 'core':100,105,112,129 'edition提上日程了':14 'folyd':142 'from':140 'higher':77 'higher-order':76 'nrc':97,102 'order':78 'people.mpi-sws.org':95 'people.mpi-sws.org/~jung/thesis.html':94 'pingcap':116 'proof':73 'ralf':30 'ralfjung':27 'roadmap':7,11 'rust':5,9,25,99,104,109,120,128 'rustbelt和stacked':56 'rustbelt建立在iris':69 'rustbelt是rust类型系统的形式化模型':58 'rustcc论坛':145 'rusty':48 'rust日报':1 'rust的2021':13 'rust语言中文社区':148 'separation':80 'stacked':62 'team':101,106,113,130 'www.ncameron.org':138 'www.ncameron.org/blog/leaving-the-rust-core-team/':137 'www.ralfj.de':91 'www.ralfj.de/blog/2020/09/03/phd.html':90 '不仅可以正式评估该规范的适当性':66 '专注于':117 '业余时间估计是没有了':123 '为':108 '主要专注于pingcap':124 '之上':71 '了':131 '今年他的二女儿马上要出生了':122 '从事更多技术性的工作':50 '他退出':111 '以及更多':36 '使我们能够更好地理解和发展这一重要语言':55 '做了很多贡献':110 '博客链接':21 '只在业余时间为':119 '只能选择离开':127 '可以阅读我的论文':37 '因此':34 '在rustbelt中':85 '在未来有时间的话':133 '如何从一些简单的成分中衍生出复杂的高级推理原理':84 '如果您一直想深入了解我对rust的研究':35 '它使编译器可以使用rust类型的强别名信息来更好地分析和优化其正在编译的代码':65 '它有近300页':38 '完成了':32 '官方发布了一篇博客提到未来几周会同步进行两项重要的任务':15 '实际上':43 '宣布退出':98 '尽管这些api的实现使用了unsafe的语言功能':61 '希望每一位rust开发者可以写一篇关于对rust未来展望的博客':19 '并且提交到google表单页':20 '并具有健全的内存和线程安全性证明':59 '并表示':132 '并解释了iris':83 '应该会让您忙一阵子':39 '微信公众号':147 '我当了十多年的学生了':44 '我成为博士生的时间已经结束了':42 '我的论文终于完成了':33 '所以':126 '接下来肯定会继续做很多':47 '支持rss':146 '数据库':118 '数据库的工作':125 '日报小组':141 '是':103 '是对rust规范的建议扩展':64 '是时候结束了':45 '本文首先介绍了iris':82 '核心团队成员':26 '毕业论文':29 '用于构建更高阶的并发分离':75 '的phd':28 '的事情':49 '的元老':107 '的原因':114 '真是奇怪的感觉':46 '研究迄今为止还没有研究过的东西':51 '社区学习交流平台订阅':144 '离开只是暂时的':135 '经过六年多的学习':41 '计划':8,12 '论文下载地址':93 '论文提出了两个项目':53 '论文简介':52 '该技术被关键地用来引入生命周期逻辑':86 '该框架在coq':72 '该模型旨在验证rust标准库中许多复杂api的安全性':60 '该逻辑提供了新颖的借用分离逻辑说明':87 '语言无关的框架':70 '说':31 '贡献':121 '还可以在实现了stacked':67 '还是会回来给rust做贡献的':134 '这也意味着':40 '这些项目为rust的正式基础奠定了基础':54 '这是rust类型系统的关键突出特性':88 '进行2020年rust开发者问卷调查':17 '逻辑':81 '链接':89,136		
742	RFC8890: The Internet Is for End Users	{"ver":2,"uid":1,"hash":"SHA1:2e0c29df76940f58d1122cc900cbaa7a13345557"}	https://www.mnot.net/blog/2020/08/28/for_the_users	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24302427"> https://news.ycombinator.com/item?id=24302427 </a>	d0f24109b4de1caa46be2a6a59fd7b34f0a9ae19	\N	f	2020-08-29 06:10:00	2020-08-31 18:10:10.970863	0			'/item?id=24302427':11 'comment':8 'end':6 'internet':3 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24302427':9 'rfc8890':1 'user':7	zh	pimterry
654	Arwes – Futuristic Sci-Fi / Cyberpunk Graphical User Interface Framework	{"ver":2,"uid":1,"hash":"SHA1:1e5d64c805f758c8d65d34ae834afc78cf4b5a7d"}	https://arwes.dev/	2020-08-26 18:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24282270"> https://news.ycombinator.com/item?id=24282270 </a>	5cb4ad8bf7a02d2cf5c1ddc446c0533734edbbef	\N	f	2020-08-26 18:10:00	2020-08-29 04:10:17.701701	0			'/item?id=24282270':14 'arw':1 'comment':11 'cyberpunk':6 'fi':5 'framework':10 'futurist':2 'graphic':7 'interfac':9 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24282270':12 'sci':4 'sci-fi':3 'user':8	zh	keiferski
507	Grover's Algorithm	{"ver":2,"uid":1,"hash":"SHA1:06d97379a97f651a2ef80f226d73ff24b759fbb2"}	https://leimao.github.io/blog/Grover-Algorithm/	2020-08-22 00:10:07	<h3 id="introduction">Introduction</h3>\n\n<p>Grover’s algorithm is a quantum computing algorithm invented to search from <strong>unstructured</strong> database using less than $O(\\sqrt{N})$ queries. Comparing to $O(N)$ which is the best asymptotical complexity that a classical search algorithm could achieve for unstructured database, Grover’s algorithm is significantly better.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss Grover’s algorithm and its caveats in details.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<p>From the <a href="https://leimao.github.io/blog/Simon-Algorithm/">property of Hadamard operator</a>, we have already known that</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}} | \\mathbf{0} \\rangle &amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\\\\n\\end{align}\\]\n\n<p>We denote it using $| \\mathbf{s} \\rangle$ for our convenience.</p>\n\n\\[\\begin{align}\n| \\mathbf{s} \\rangle &amp;= H^{\\otimes {n}} | \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\\\\n\\end{align}\\]\n\n<p>The following equation would be useful for this article.</p>\n\n\\[\\begin{align}\n2 | \\mathbf{s} \\rangle \\langle \\mathbf{s} | - I &amp;= 2 \\Big( H^{\\otimes {n}} | \\mathbf{0} \\rangle \\Big) \\otimes_{\\text{outer}} \\Big( H^{\\otimes {n}} | \\mathbf{0} \\rangle \\Big) - I \\\\\n&amp;= 2 \\Big( H^{\\otimes {n}} | \\mathbf{0} \\rangle \\Big) \\Big( H^{\\otimes {n}} | \\mathbf{0} \\rangle \\Big)^{\\dagger} - I \\\\\n&amp;= 2 H^{\\otimes {n}} | \\mathbf{0} \\rangle | \\mathbf{0} \\rangle^{\\dagger}  H^{\\otimes {n} \\dagger} - I \\\\\n&amp;= 2 H^{\\otimes {n}} \\big(| \\mathbf{0} \\rangle \\langle \\mathbf{0} |\\big)  H^{\\otimes {n}} - I \\\\\n&amp;= 2 H^{\\otimes {n}} \\big(| \\mathbf{0} \\rangle \\langle \\mathbf{0} |\\big)  H^{\\otimes {n}} - H^{\\otimes {n}} I H^{\\otimes {n}} \\\\\n&amp;= H^{\\otimes {n}} \\big(2 | \\mathbf{0} \\rangle \\langle \\mathbf{0} | - I \\big) H^{\\otimes {n}} \\\\\n\\end{align}\\]\n\n<p>where $| \\mathbf{s} \\rangle \\langle \\mathbf{s} |$ is the outer product of $| \\mathbf{s} \\rangle$ and $| \\mathbf{s} \\rangle$ and the $\\otimes_{\\text{outer}}$ is the outer product. Note that outer product $\\otimes_{\\text{outer}}$ is a little bit different from Kronecker product which we have used $\\otimes$ to denote in the previous articles.</p>\n\n<p><br /></p>\n\n<p>Let’s check what $| \\mathbf{s} \\rangle \\langle \\mathbf{s} |$ is.</p>\n\n\\[\\begin{align}\n| \\mathbf{s} \\rangle \\langle \\mathbf{s} | &amp;= \\bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\bigg) \\otimes_{\\text{outer}} \\bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\bigg) \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\otimes_{\\text{outer}} | \\mathbf{y} \\rangle \\\\\n&amp;= \\frac{1}{2^n} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } \\sum_{ \\mathbf{y} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\langle \\mathbf{y} | \\\\\n&amp;= \\frac{1}{2^n} \n\\begin{bmatrix} \n    1 &amp; 1 &amp; \\cdots &amp; 1 \\\\\n    1 &amp; 1 &amp; \\cdots &amp; 1 \\\\\n    \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\\n    1 &amp; 1 &amp; \\cdots &amp; 1 \\\\\n\\end{bmatrix}_{2^n \\times 2^n} \\\\\n&amp;= \\frac{1}{2^n} J_{2^n \\times 2^n} \\\\\n\\end{align}\\]\n\n<p>where $J$ is the unit matrix.</p>\n\n<p><br /></p>\n\n<p>We further define matrix $A$</p>\n\n\\[\\begin{align}\nA &amp;= | \\mathbf{s} \\rangle \\langle \\mathbf{s} | \\\\\n&amp;= \\frac{1}{2^n} J_{2^n \\times 2^n} \\\\\n\\end{align}\\]\n\n<p>We would like to further show that matrix $2A - I$ is unitary.</p>\n\n<p><br /></p>\n\n<p>It is trivial to see that $A^{\\dagger} = A$, therefore, $(2A - I)^{\\dagger} = 2A - I$. Because</p>\n\n\\[\\begin{align}\n(2A - I)^{\\dagger} (2A - I) &amp;= (2A - I) (2A - I)^{\\dagger} \\\\\n&amp;= (2A - I)^2 \\\\\n&amp;= 4A^2 - 4A + I \\\\\n&amp;= \\frac{4}{2^{2n}} 2^n J_{2^n \\times 2^n} - \\frac{4}{2^n} J_{2^n \\times 2^n} + I \\\\\n&amp;= 0 + I \\\\\n&amp;= I \\\\\n\\end{align}\\]\n\n<p>This concludes the proof that $2A - I$ is unitary.</p>\n\n<p><br /></p>\n\n<p>In addition, $2A - I$ is actually an reflection matrix that could reflect the vector $| \\mathbf{x} \\rangle$ about $| \\mathbf{s} \\rangle$.</p>\n\n\\[\\begin{align}\n| \\mathbf{x}^{\\prime} \\rangle&amp;= (2A - I) | \\mathbf{x} \\rangle \\\\\n&amp;= (2 | \\mathbf{s} \\rangle \\langle \\mathbf{s} | - I) | \\mathbf{x} \\rangle \\\\\n&amp;= 2 | \\mathbf{s} \\rangle \\langle \\mathbf{s} | | \\mathbf{x} \\rangle - | \\mathbf{x} \\rangle \\\\\n&amp;= 2 | \\mathbf{s} \\rangle ( \\langle \\mathbf{s} | | \\mathbf{x} \\rangle ) - | \\mathbf{x} \\rangle \\\\\n&amp;= 2 | \\mathbf{s} \\rangle \\langle \\mathbf{s}, \\mathbf{x} \\rangle - | \\mathbf{x} \\rangle \\\\\n&amp;= 2 \\langle \\mathbf{s}, \\mathbf{x} \\rangle | \\mathbf{s} \\rangle - | \\mathbf{x} \\rangle \\\\\n\\end{align}\\]\n\n<p>Typically, given a normalized unit vector $\\mathbf{n}$, and a vector $\\mathbf{x}$, the reflected vector of vector $\\mathbf{x}$ about $\\mathbf{n}$ is</p>\n\n\\[\\mathbf{x}^{\\prime} = 2 \\langle \\mathbf{n}, \\mathbf{x} \\rangle \\mathbf{n} - \\mathbf{x}\\]\n\n<p>This is high-school math. If the reader forgot how to understand this, please refer to the blog post <a href="http://paulbourke.net/geometry/reflected/">“Calculating the Reflected Ray”</a>.</p>\n\n<p><br /></p>\n\n<p>This concludes the proof that $2A - I$ is a reflection matrix about $| \\mathbf{s} \\rangle$.</p>\n\n<h3 id="identity-search-problem">Identity Search Problem</h3>\n\n<p>Suppose we have an array of items $\\{v_0, v_1, \\cdots, v_{n-1}\\}$, and we would like to find a target item $v_g$ to find from the array. Using a classical algorithm, we have to go through the entire array, that is we retrieve items one by one from the array and compare them against the target item. The asymptotic complexity for the worst case and the average case are both $O(n)$.</p>\n\n<p><br /></p>\n\n<p>It seems that $O(n)$ is the best we could do for a search problem using a classical algorithm. How could we know where is target item is in the array without going through the entire array? However, using a quantum algorithm, we would be able to complete a search in $O(\\sqrt{n})$. In the next sections, we would see how we could achieve this.</p>\n\n<p><br /></p>\n\n<p>Suppose all the items are distinct and there is only one item matching the query, the search problem could be modeled using a given function $f: \\{0,1\\}^n \\rightarrow \\{0,1\\}$, and we are assured that there exits exactly one binary string $\\mathbf{x}^\\ast$, such that</p>\n\n\\[\\begin{align}\nf(\\mathbf{x}) &amp;= \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x} = \\mathbf{x}^\\ast$}\\\\\n      0 &amp; \\text{when $\\mathbf{x} \\neq \\mathbf{x}^\\ast$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>The search problem is converted to find $\\mathbf{x}^\\ast$.</p>\n\n<h3 id="grovers-algorithm">Grover’s Algorithm</h3>\n\n<h4 id="quantum-oracle-circuit">Quantum Oracle Circuit</h4>\n\n<p>The following quantum oracle circuit is used for phase inversion in the Grover’s algorithm.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/oracle.png" style="width: 75%; height: 75%" />\n    <figcaption>Quantum Oracle Circuit</figcaption>\n</figure>\n</div>\n\n<p>This quantum oracle circuit has been well discussed in my previous article on <a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa algorithm</a>. We have known that</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= (-1)^{f(\\mathbf{x})} |\\mathbf{x}\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>If the top input qubits to $U_f$ is an equal superposition, i.e.,</p>\n\n\\[\\begin{align}\n| \\mathbf{s} \\rangle &amp;= H^{\\otimes {n}} | \\mathbf{0} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\\\\n\\end{align}\\]\n\n<p>what will the top output qubits be?</p>\n\n<p><br /></p>\n\n<p>Because we have assumed that there is only one $\\mathbf{x} = \\mathbf{x}^\\ast$, such that $f(\\mathbf{x}) = 1$, and for $\\mathbf{x} \\neq \\mathbf{x}^\\ast$ we have $f(\\mathbf{x}) = 0$,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\frac{1}{\\sqrt{2^n}} \\Bigg( \\sum_{\\mathbf{x} \\neq \\mathbf{x}^\\ast}^{} (-1)^{0} |\\mathbf{x}\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Bigg) + \\frac{1}{\\sqrt{2^n}} (-1)^{1} |\\mathbf{x}^\\ast \\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\Bigg( \\sum_{\\mathbf{x} \\neq \\mathbf{x}^\\ast}^{} |\\mathbf{x}\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Bigg) - \\frac{1}{\\sqrt{2^n}} |\\mathbf{x}^\\ast \\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\Bigg( \\sum_{\\mathbf{x} \\neq \\mathbf{x}^\\ast}^{} \\frac{1}{\\sqrt{2^n}} |\\mathbf{x}\\rangle - \\frac{1}{\\sqrt{2^n}} |\\mathbf{x}^\\ast \\rangle \\Bigg) \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>This means that for the top output qubits, although we have equal probability to observe each of the base qubit states, the phase amplitude of the base qubit $|\\mathbf{x}^\\ast \\rangle$ is different from all the others! That is also to say, the phase of the top input qubits is \n$\\big[ \\frac{1}{\\sqrt{2^n}}, \\frac{1}{\\sqrt{2^n}}, \\cdots, \\frac{1}{\\sqrt{2^n}} \\big]$, but the phase of the output qubits becomes $\\big[ \\frac{1}{\\sqrt{2^n}}, \\cdots, \\frac{1}{\\sqrt{2^n}}, -\\frac{1}{\\sqrt{2^n}}, \\frac{1}{\\sqrt{2^n}},\\cdots, \\frac{1}{\\sqrt{2^n}} \\big]$.</p>\n\n<h4 id="phase-diffusion-circuit">Phase Diffusion Circuit</h4>\n\n<p>Now, in order to find $| \\mathbf{x}^\\ast \\rangle$, the strategy becomes straightforward. We just have to find out the base qubits state whose phase amplitude is different from others. The question is, how to find it?</p>\n\n<p><br /></p>\n\n<p>Let’s do some dummy trials. If we send the top output qubits to another identical quantum oracle circuit, the phase will go back to $\\big[ \\frac{1}{\\sqrt{2^n}}, \\frac{1}{\\sqrt{2^n}}, \\cdots, \\frac{1}{\\sqrt{2^n}} \\big]$. The readers could verify this on you own. This means we have gone back to the origin. We should probably do something differently.</p>\n\n<p><br /></p>\n\n<p>What Grover found was actually very smart. The average of the phase amplitudes $\\big[ \\frac{1}{\\sqrt{2^n}}, \\cdots, \\frac{1}{\\sqrt{2^n}}, -\\frac{1}{\\sqrt{2^n}}, \\frac{1}{\\sqrt{2^n}},\\cdots, \\frac{1}{\\sqrt{2^n}} \\big]$ is a value only a little bit smaller than $\\frac{1}{\\sqrt{2^n}}$, because the majority of the phase amplitudes are $\\frac{1}{\\sqrt{2^n}}$, and only one phase amplitude corresponding to $|\\mathbf{x}^\\ast \\rangle$, which we denote as $\\alpha_{\\mathbf{x}^{\\ast}}$, is $-\\frac{1}{\\sqrt{2^n}}$. If we could <em>inverse the phase amplitude about the mean</em>, the absolute value of $\\alpha_{\\mathbf{x}^{\\ast}}$ will become the largest among all the phase amplitudes.</p>\n\n<p><br /></p>\n\n<p>Specifically, at time step $t$, suppose the phase amplitude for each base qubits state $|\\mathbf{x} \\rangle$ is $\\alpha_{\\mathbf{x}, t}$. The average of the phase amplitudes $\\mu_t$ is</p>\n\n\\[\\mu_t = \\frac{1}{2^n} \\sum_{\\mathbf{x} \\in \\{0,1\\}^n}^{} \\alpha_{\\mathbf{x}, t}\\]\n\n<p>After the <em>inversion about the mean</em>, the phase amplitudes would become</p>\n\n\\[\\begin{align}\n\\alpha_{\\mathbf{x}, t}^{\\prime} &amp;= (\\mu_t - \\alpha_{\\mathbf{x}, t}) + \\mu_t \\\\\n&amp;= 2\\mu_t - \\alpha_{\\mathbf{x}, t} \\\\\n\\end{align}\\]\n\n<p>To do this in a matrix multiplication fashion, we denote $\\boldsymbol{\\mu}_t = [ \\underbrace{\\mu_t, \\mu_t, \\cdots, \\mu_t}_{2^n} ]$.</p>\n\n\\[\\begin{align}\n\\boldsymbol{\\mu}_t &amp;= \\frac{1}{2^n} J_{2^n \\times 2^n} \\boldsymbol{\\alpha}_{t} \\\\\n &amp;= A \\boldsymbol{\\alpha}_{t} \\\\\n\\end{align}\\]\n\n<p>Where $A$ is the matrix we defined in the prerequisites.</p>\n\n\\[\\begin{align}\n\\boldsymbol{\\alpha}_{t}^{\\prime} &amp;= 2 \\boldsymbol{\\mu}_t - \\boldsymbol{\\alpha}_{t} \\\\\n&amp;= 2 A \\boldsymbol{\\alpha}_{t} - \\boldsymbol{\\alpha}_{t} \\\\\n&amp;= ( 2 A - I ) \\boldsymbol{\\alpha}_{t} \\\\\n\\end{align}\\]\n\n<p>We notice that we have proved $2 A - I$ is a unitary matrix in the prerequisites, and therefore it could become a valid quantum gate!</p>\n\n<p><br /></p>\n\n<p>Starting from time step $t = 0$, where the phase amplitudes are $\\big[ \\frac{1}{\\sqrt{2^n}}, \\cdots, \\frac{1}{\\sqrt{2^n}}, -\\frac{1}{\\sqrt{2^n}}, \\frac{1}{\\sqrt{2^n}},\\cdots, \\frac{1}{\\sqrt{2^n}} \\big]$. After the <em>inversion about the mean</em>, all the phase amplitudes have become positive and $\\alpha_{\\mathbf{x}^{\\ast}}$ is the largest (slightly larger than all the others), which means that if we observe the top qubits we would have slightly larger chance of observing $|\\mathbf{x}^\\ast \\rangle$. The problem is that the it is not large enough for the $|\\mathbf{x}^\\ast \\rangle$ to be observed for sure. We would have to find out a way to further enhance $\\alpha_{\\mathbf{x}^{\\ast}}$, the amplitude of $|\\mathbf{x}^\\ast \\rangle$.</p>\n\n<p><br /></p>\n\n<p>If we apply the top qubits to the quantum oracle again, the largest amplitude corresponding to $|\\mathbf{x}^\\ast \\rangle$, $\\alpha_{\\mathbf{x}^{\\ast}}$, would become negative. We further do  <em>inversion about the mean</em>, $\\alpha_{\\mathbf{x}^{\\ast}}$ would become positive again and it would become even larger. The phase amplitude amplification process could be illustrated using the following figures.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/t-0-0.png" style="width: 85%; height: 85%" />\n    <figcaption>Phase Amplitudes After Quantum Oracle ($\\boldsymbol{\\alpha}_{t=0}$)</figcaption>\n</figure>\n</div>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/t-0-1.png" style="width: 85%; height: 85%" />\n    <figcaption>Phase Amplitudes After Inversion About Mean ($\\boldsymbol{\\alpha}_{t=0}^{\\prime}$)</figcaption>\n</figure>\n</div>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/t-1-0.png" style="width: 85%; height: 85%" />\n    <figcaption>Phase Amplitudes After Quantum Oracle ($\\boldsymbol{\\alpha}_{t=1}$)</figcaption>\n</figure>\n</div>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/t-1-1.png" style="width: 85%; height: 85%" />\n    <figcaption>Phase Amplitudes After Inversion About Mean ($\\boldsymbol{\\alpha}_{t=1}^{\\prime}$)</figcaption>\n</figure>\n</div>\n\n<p>In fact, with less than $O(\\sqrt{2^n})$ iterations, we could make $\\alpha_{\\mathbf{x}^{\\ast}}$ much larger than the rest of amplitudes so that we have nearly larger probability of observing $|\\mathbf{x}^\\ast \\rangle$ from the top qubits. If we do more than $O(\\sqrt{2^n})$ iterations, $\\alpha_{\\mathbf{x}^{\\ast}}$ would become smaller and the probability of observing $|\\mathbf{x}^\\ast \\rangle$ from the top qubits would become smaller. Let’s see how we could prove this.</p>\n\n<p><br /></p>\n\n<p>A relatively trivial proof is first to prove</p>\n\n<ul>\n  <li>$\\alpha_{\\mathbf{x}^{\\ast}, t+1} \\geq \\alpha_{\\mathbf{x}^{\\ast}, t} + \\frac{1}{\\sqrt{2^n}}$ for $\\alpha_{\\mathbf{x}^{\\ast}, t} \\leq \\frac{1}{2}$ and $n \\neq 2$.</li>\n  <li>$\\alpha_{\\mathbf{x}^{\\ast}, t+1} \\leq \\alpha_{\\mathbf{x}^{\\ast}, t} + \\frac{2}{\\sqrt{2^n}}$ for any $t$.</li>\n</ul>\n\n<p>followed by showing that</p>\n\n<ul>\n  <li>$\\alpha_{\\mathbf{x}^{\\ast}, \\frac{\\sqrt{2^n}}{8}} \\geq 0.1$</li>\n</ul>\n\n<p>These three proofs are trivial to show. The readers could try to derive them using the elemental algebra. If getting stuck, please refer to the <a href="https://leimao.github.io/downloads/blog/2020-08-22-Grover-Algorithm/lecture04.pdf">lecture notes</a> from CMU.</p>\n\n<p><br /></p>\n\n<p>This means with exactly $\\frac{\\sqrt{2^n}}{8}$ iterations, the probability of observing $|\\mathbf{x}^\\ast \\rangle$ from the top qubits is greater than $0.01$. Although $0.01$ is still not a high probability, we could repeat the process a constant number of times $k$, say $k = 1000$ times, we should expect that there is an observation that shows at least $10$ times among the $1000$ observations, which is significantly higher than the number of other individual observations. The most frequent observation would just be the $|\\mathbf{x}^\\ast \\rangle$ that we are looking for. The number of query we have conducted is $\\frac{k\\sqrt{2^n}}{8}$, so asymptotically the query complexity is $O(\\sqrt{2^n})$. $2^n$ is the total number of items $N$ in the database. We could also rewrite the query complexity to be $O(N)$.</p>\n\n<p><br /></p>\n\n<p>There are two others ways to show that the query complexity is $O(\\sqrt{2^n})$ which are much more elegant.</p>\n\n<p><br /></p>\n\n<p>The most elegant proof is a geometric proof. It is the simplest proof regarding the form, but might be difficult for some of the readers who are not familiar with geometry and linear algebra.</p>\n\n<p><br /></p>\n\n<p>Consider a plane spanned by $|\\mathbf{s}\\rangle$ and $|\\mathbf{x}^{\\ast}\\rangle$, we have another vector</p>\n\n\\[\\begin{align}\n|\\mathbf{s}^{\\prime}\\rangle &amp;= \\frac{1}{\\sqrt{2^n - 1}} \\sum_{\\mathbf{x} \\neq \\mathbf{x}^\\ast}^{} |\\mathbf{x}\\rangle \\\\\n&amp;= \\frac{\\sqrt{2^n}}{\\sqrt{2^n - 1}} |\\mathbf{s}\\rangle - \\frac{1}{\\sqrt{2^n - 1}} |\\mathbf{x}^{\\ast}\\rangle \\\\\n\\end{align}\\]\n\n<p>Therefore, $|\\mathbf{s}^{\\prime}\\rangle$ is also on the same plane.</p>\n\n<p><br /></p>\n\n<p>In addition, $|\\mathbf{s}^{\\prime}\\rangle$ and $|\\mathbf{x}^{\\ast}\\rangle$ are orthogonal because</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{s}^{\\prime}, \\mathbf{x}^{\\ast}\\rangle = 0\n\\end{align}\\]\n\n<p>Applying the quantum oracle circuit only change the direction of the amplitude of $|\\mathbf{x}^{\\ast}\\rangle$, and the amplitudes of the rest of $|\\mathbf{x}\\rangle$ remain unchanged. So it is a reflection about $|\\mathbf{s}^{\\prime}\\rangle$.</p>\n\n<p><br /></p>\n\n<p>In the first iteration, the reflection angle $\\frac{\\theta}{2}$ could be calculated using inner product.</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{s}, \\mathbf{s}^{\\prime}\\rangle &amp;= \\Bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\Bigg) \\Bigg( \\frac{1}{\\sqrt{2^n - 1}} \\sum_{\\mathbf{x} \\neq \\mathbf{x}^\\ast}^{} |\\mathbf{x}\\rangle \\Bigg) \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\frac{1}{\\sqrt{2^n - 1}} (2^n - 1) \\\\\n&amp;= \\sqrt{\\frac{2^n - 1}{2^n}} \\\\\n&amp;= |\\mathbf{s}| |\\mathbf{s}^{\\prime}| \\cos{\\frac{\\theta}{2}} \\\\\n&amp;= 1 \\times 1 \\cos{\\frac{\\theta}{2}} \\\\\n&amp;= \\cos{\\frac{\\theta}{2}} \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n\\cos{\\frac{\\theta}{2}} &amp;= \\sqrt{\\frac{2^n - 1}{2^n}} \\\\\n\\sin{\\frac{\\theta}{2}} &amp;= \\frac{1}{\\sqrt{2^n}} \\\\\n\\end{align}\\]\n\n<p>When $n$ is large, $\\frac{1}{\\sqrt{2^n}}$ is a extremely small value, so we have</p>\n\n\\[\\begin{align}\n\\sin{\\frac{\\theta}{2}} &amp;= \\frac{\\theta}{2} \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\\\\n\\end{align}\\]\n\n<p>So</p>\n\n\\[\\theta = \\frac{2}{\\sqrt{2^n}}\\]\n\n<p>As we have discussed in the prerequisites, applying $2A - I$ to $|\\mathbf{x}\\rangle$ is reflecting $|\\mathbf{x}\\rangle$ about $|\\mathbf{s}\\rangle$. So here after reflecting $|\\mathbf{s}\\rangle$ about $|\\mathbf{s}^{\\prime}\\rangle$, we further reflect the state vector about the original $|\\mathbf{s}\\rangle$. Wikipedia has a diagram illustrating this.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/Grovers_algorithm_geometry.png" style="width: 30%; height: 30%" />\n    <figcaption>Grover's Algorithm Geometric Proof</figcaption>\n</figure>\n</div>\n\n<p>Starting from a state vector which has an angle of $\\frac{\\pi - \\theta}{2}$, after each iteration, the state vector moves angle $\\theta$ closer to $|\\mathbf{x}^{\\ast}\\rangle$, before it finally diverges from $|\\mathbf{x}^{\\ast}\\rangle$.</p>\n\n<p><br /></p>\n\n<p>The amplitude of $|\\mathbf{x}^{\\ast}\\rangle$, $\\alpha_{\\mathbf{x}^{\\ast}}$, is the projection of $|\\mathbf{x}\\rangle$ to $|\\mathbf{x}^{\\ast}\\rangle$. In our case, the more close $|\\mathbf{x}\\rangle$ is to $|\\mathbf{x}^{\\ast}\\rangle$ geometrically, the larger $\\alpha_{\\mathbf{x}^{\\ast}}$ it is. Suppose the number of iterations we conducted is $k$, the angle the state vector and $|\\mathbf{x}^{\\ast}\\rangle$ is $\\frac{\\pi}{2} - (k + \\frac{1}{2})\\theta$. The probability of observing $|\\mathbf{x}^{\\ast}\\rangle$ from the top qubits is</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{w} \\rangle^2 &amp;= \\cos^2 \\bigg( \\frac{\\pi}{2} - (k + \\frac{1}{2})\\theta \\bigg) \\\\\n&amp;= \\sin^2\\bigg( (k + \\frac{1}{2})\\theta \\bigg) \\\\\n\\end{align}\\]\n\n<p>To maximize the probability of observing $|\\mathbf{x}^{\\ast}\\rangle$ from the top qubits, we have</p>\n\n\\[\\begin{align}\n(k + \\frac{1}{2})\\theta &amp;= \\frac{\\pi}{2} \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\nk &amp;= \\frac{\\pi}{2\\theta} - \\frac{1}{2} \\\\\n&amp;\\approx \\frac{\\pi \\sqrt{2^n}}{4} - \\frac{1}{2} \\\\\n&amp;\\approx \\frac{\\pi \\sqrt{2^n}}{4}\\\\\n\\end{align}\\]\n\n<p>Therefore, the asymptotically the query complexity is $O(\\sqrt{2^n})$.</p>\n\n<p><br /></p>\n\n<p>This concludes the proof.</p>\n\n<p><br /></p>\n\n<p>There is another algebraic proof which could be found on <a href="https://en.wikipedia.org/wiki/Grover%27s_algorithm#Algebraic_proof_of_correctness">Wikipedia</a>. The readers could refer to it if interested in. I will skip the formal proof in this article.</p>\n\n<h4 id="grovers-algorithm-1">Grover’s Algorithm</h4>\n\n<p>To summarize, Grover’s algorithm could be represented using the following diagram. To find an exact match to the query from the database, we only have to run Grover’s algorithm $O(2^n)$ times.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-22-Grover-Algorithm/grover.png" style="width: 75%; height: 75%" />\n    <figcaption>Grover's Quantum Circuit</figcaption>\n</figure>\n</div>\n\n<h4 id="quantum-circuit-high-level-design">Quantum Circuit High-Level Design</h4>\n\n<p>If we treat the quantum oracle circuit as a quantum gate $U_x$ (not $U_f$ but including $U_f$) that takes in $n$ qubits and outputs $n$ qubits, to design the quantum oracle circuit for the identity query,</p>\n\n\\[\\begin{align}\nf(\\mathbf{x}) &amp;= \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x} = \\mathbf{x}^\\ast$}\\\\\n      0 &amp; \\text{when $\\mathbf{x} \\neq \\mathbf{x}^\\ast$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>$U_x$ must have the information of $\\mathbf{x}^\\ast$.</p>\n\n\\[U_x = I - 2 | \\mathbf{x}^\\ast \\rangle \\langle \\mathbf{x}^\\ast |\\]\n\n<p>It is easy to verify that $U_x$ is unitary and flipping the amplitude of $| \\mathbf{x}^\\ast \\rangle$.</p>\n\n\\[\\begin{align}\nU_x | \\mathbf{x}^\\ast \\rangle &amp;= - | \\mathbf{x}^\\ast \\rangle \\\\\nU_x | \\mathbf{x} \\rangle &amp;= | \\mathbf{x} \\rangle \\qquad \\forall \\mathbf{x} \\neq \\mathbf{x}^\\ast \\\\\n\\end{align}\\]\n\n<p>The design of the quantum diffusion circuit has been discussed earlier in the prerequisites, which is $2 | \\mathbf{s} \\rangle \\langle \\mathbf{s} | - I$.</p>\n\n<h4 id="more-than-one-matches">More Than One Matches</h4>\n\n<p>In the above derivations, we have an assumption that there is only one item matching the query in the database. What if we have multiple items matching the query in the database? Suppose there are $k$ items matching the query in the database, what is the asymptotical query complexity of finding one item matching the query from the database?</p>\n\n<p><br /></p>\n\n<p>We extended the Grover’s algorithm geometric proof. Suppose, the $k$ matching items are $S$ = $\\{ |\\mathbf{x}_{1}^{\\ast}\\rangle$, $|\\mathbf{x}_{2}^{\\ast}\\rangle$, $\\cdots$, $|\\mathbf{x}_{k}^{\\ast}\\rangle \\}$.</p>\n\n<p><br /></p>\n\n<p>We define two vectors.</p>\n\n\\[\\begin{align}\n|\\mathbf{s}^{\\prime}\\rangle &amp;= \\frac{1}{\\sqrt{2^n - k}} \\sum_{\\mathbf{x} \\notin S} |\\mathbf{x}\\rangle \\\\\n|\\mathbf{s}^{\\prime\\prime}\\rangle &amp;= \\frac{1}{\\sqrt{k}} \\sum_{\\mathbf{x} \\in S} |\\mathbf{x}\\rangle \\\\\n\\end{align}\\]\n\n<p><br /></p>\n\n<p>For any $i \\in [1,k]$, Consider a plane spanned by $|\\mathbf{s}\\rangle$ and $|\\mathbf{s}^{\\prime\\prime}\\rangle$, $|\\mathbf{s}^{\\prime}\\rangle$ is also on the same plane, because</p>\n\n\\[|\\mathbf{s}^{\\prime}\\rangle = |\\mathbf{s}\\rangle - |\\mathbf{s}^{\\prime\\prime}\\rangle\\]\n\n<p>Therefore, $|\\mathbf{s}^{\\prime}\\rangle$ is also on the same plane.</p>\n\n<p><br /></p>\n\n<p>In addition, $|\\mathbf{s}^{\\prime}\\rangle$ and $|\\mathbf{s}^{\\prime\\prime}\\rangle$ are orthogonal because</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{s}^{\\prime}, \\mathbf{s}^{\\prime\\prime}\\rangle = 0\n\\end{align}\\]\n\n<p>Similar to what we did previously,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{s}, \\mathbf{s}^{\\prime}\\rangle &amp;= \\Bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{ \\mathbf{x} \\in \\{0,1\\}^n } | \\mathbf{x} \\rangle \\Bigg) \\Bigg( \\frac{1}{\\sqrt{2^n - k}} \\sum_{\\mathbf{x} \\notin S}^{} |\\mathbf{x}\\rangle \\Bigg) \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\frac{1}{\\sqrt{2^n - k}} (2^n - k) \\\\\n&amp;= \\sqrt{\\frac{2^n - k}{2^n}} \\\\\n&amp;= |\\mathbf{s}| |\\mathbf{s}^{\\prime}| \\cos{\\frac{\\theta}{2}} \\\\\n&amp;= 1 \\times 1 \\cos{\\frac{\\theta}{2}} \\\\\n&amp;= \\cos{\\frac{\\theta}{2}} \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n\\cos{\\frac{\\theta}{2}} &amp;= \\sqrt{\\frac{2^n - k}{2^n}} \\\\\n\\sin{\\frac{\\theta}{2}} &amp;= \\sqrt{\\frac{k}{2^n}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\sin{\\frac{\\theta}{2}} &amp;\\approx \\frac{\\theta}{2} \\\\\n&amp;\\approx \\sqrt{\\frac{k}{2^n}} \\\\\n\\end{align}\\]\n\n\\[\\theta \\approx 2\\sqrt{\\frac{k}{2^n}}\\]\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{w} \\rangle^2 &amp;= \\cos^2 \\bigg( \\frac{\\pi}{2} - (k + \\frac{1}{2})\\theta \\bigg) \\\\\n&amp;= \\sin^2\\bigg( (k + \\frac{1}{2})\\theta \\bigg) \\\\\n\\end{align}\\]\n\n<p>To maximize the probability of observing one of the $S$ = $\\{ |\\mathbf{x}_{1}^{\\ast}\\rangle$, $|\\mathbf{x}_{2}^{\\ast}\\rangle$, $\\cdots$, $|\\mathbf{x}_{k}^{\\ast}\\rangle \\}$, from the top qubits, we have</p>\n\n\\[\\begin{align}\n(k + \\frac{1}{2})\\theta &amp;= \\frac{\\pi}{2} \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\nk &amp;= \\frac{\\pi}{2\\theta} - \\frac{1}{2} \\\\\n&amp;\\approx \\frac{\\pi \\sqrt{\\frac{2^n}{k}}}{4} - \\frac{1}{2} \\\\\n&amp;\\approx \\frac{\\pi \\sqrt{\\frac{2^n}{k}}}{4}\\\\\n\\end{align}\\]\n\n<p>Therefore, the asymptotically the query complexity is $O(\\sqrt{\\frac{2^n}{k}})$. As long as $1 \\leq k \\ll 2^n$, the asymptotically the query complexity is still $O(\\sqrt{2^n})$</p>\n\n<p><br /></p>\n\n<p>This concludes the proof. The entire proof is very similar to the one for the single one targe assumption one. In fact, the single one targe assumption one is just a special case of this more general one.</p>\n\n<h3 id="practical-grovers-algorithm">Practical Grover’s Algorithm</h3>\n\n<h4 id="unstructured-instead-of-structured">Unstructured Instead of Structured</h4>\n\n<p>It seems that there is something unusual for Grover’s algorithm. Since the quantum oracle circuit already has the target index information, and the designer must have known that, why the fuck do we have to run the Grover’s algorithm?! Is Grover’s algorithm actually useful in practice?! I think people got confused because Grover’s algorithm was designed for querying an unstructured database instead of a structured database, and the databases we commonly know are structured database. As we have seen, the input to Grover’s algorithm is a superposition of $2^n$ base states, and this is an unstructured database containing $2^n$ items. Common structured databases uses tree structure or hashing, but unstructured database stores data linearly. While the asymptotical query complexity of the algorithms that we commonly use for structured database are $O(\\log{N})$ for tree-structured database and $O(1)$ for hashing based database, the asymptotical query complexity of the classical algorithms for unstructured database is $O(N)$.</p>\n\n<h4 id="possible-useful-scenario">Possible Useful Scenario</h4>\n\n<p>OK, this did not answer why we have to run the Grover’s algorithm. In fact, querying something that is identical to the ones in the unstructured database by running Grover’s algorithm does not make sense, since we have to know where the identical ones are in the unstructured database in order to design the quantum oracle circuits. What’s making Grover’s algorithm powerful is that by carefully designing the quantum oracle circuits, we could actually query something that matches the patterns we specified!</p>\n\n<p><br /></p>\n\n<p>For example, instead of having a simple query $\\mathbf{x} = \\mathbf{x}^\\ast$,</p>\n\n\\[\\begin{align}\nf(\\mathbf{x}) &amp;= \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x} = \\mathbf{x}^\\ast$}\\\\\n      0 &amp; \\text{when $\\mathbf{x} \\neq \\mathbf{x}^\\ast$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>We could design a more sophisticated query for some patterns that the quantum oracle circuit does not know the exact answers, for example,</p>\n\n\\[\\begin{align}\nf(\\mathbf{x}) &amp;= \n    \\begin{cases}\n      1 &amp; \\text{when $\\mathbf{x}_{0:\\frac{n}{2}} + \\mathbf{x}_{\\frac{n}{2}:n} = \\mathbf{w}^\\ast$}\\\\\n      0 &amp; \\text{when $\\mathbf{x}_{0:\\frac{n}{2}} + \\mathbf{x}_{\\frac{n}{2}:n} \\neq \\mathbf{w}^\\ast$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>where $\\mathbf{x}_{0:\\frac{n}{2}}$ is the first half of the bits, $\\mathbf{x}_{\\frac{n}{2}:n}$ is the second half of the bits, and $\\mathbf{w}^\\ast$ is the query bits.</p>\n\n<p><br /></p>\n\n<p>Using a classical search algorithm, it would take $O(N)$ to go through the entire unstructured database. Using Grover’s algorithm, as long as the number of targets in the database is significantly smaller than $\\sqrt{N}$, we could always find all of them by running Grover’s algorithm $O(\\sqrt{N})$ times. However, designing such quantum oracle circuit might not be as trivial as the one that used for query the identical match which we have discussed early in this article.</p>\n\n<p><br /></p>\n\n<p>More generally, if we could design quantum oracle circuits that does</p>\n\n\\[\\begin{align}\nf(\\mathbf{x}) &amp;= \n    \\begin{cases}\n      1 &amp; \\text{when $g(\\mathbf{x}) = \\mathbf{w}^\\ast$}\\\\\n      0 &amp; \\text{when $g(\\mathbf{x}) \\neq \\mathbf{w}^\\ast$}\\\\\n    \\end{cases} \n\\end{align}\\]\n\n<p>for any specific $g$, and the number of targets in the database is significantly smaller than $\\sqrt{N}$, we could always find all of them by running Grover’s algorithm $O(\\sqrt{N})$ times.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>In practice, Grover’s algorithm is not as useful as what I expected. But I could be short-sighted.</p>\n\n<h3 id="miscellaneous">Miscellaneous</h3>\n\n<p>Where is <a href="https://en.wikipedia.org/wiki/Lov_Grover">Lov Grover</a> right now? Was not able to find him Bell Labs anymore. Have not heard any news from him in recent years.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/downloads/blog/2020-08-22-Grover-Algorithm/lecture04.pdf">Grover’s Algorithm</a></li>\n  <li><a href="https://quantumcomputing.stackexchange.com/questions/2110/grovers-algorithm-where-is-the-list">Grover’s Algorithm in Practice</a></li>\n  <li><a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch Algorithm</a></li>\n  <li><a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa Algorithm</a></li>\n  <li><a href="https://leimao.github.io/blog/Inner-Product/">Inner Product and Inner Product Space</a></li>\n  <li><a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker Product In Circuits</a></li>\n  <li><a href="https://leimao.github.io/blog/Quantum-System-States/">Quantum System States</a></li>\n  <li><a href="/downloads/blog/2020-07-26-Simon-Algorithm/lecture06.pdf">Boolean Fourier Analysis and Simon’s Algorithm</a></li>\n  <li><a href="https://www.amazon.com/Quantum-Computing-Computer-Scientists-Yanofsky/dp/0521879965">Quantum Computing for Computer Scientists</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Grover-Algorithm/">Grover's Algorithm</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 22, 2020.</p>	34c7889739005a5e9774aa4399632daa01ce0b67	\N	f	2020-08-22 00:10:00	2020-09-10 05:10:13.408891	0			'+1':2129,2160 '-1':784,1048,1165,1184 '0':87,98,125,136,169,180,190,198,208,211,225,229,241,245,263,267,358,378,393,400,420,427,579,778,938,942,975,1057,1087,1098,1146,1166,1172,1192,1216,1234,1268,1650,1808,2002,2012,2513,2590,3143,3468,3496,4085,4133,4146,4151,4172,4313 '0.01':2244,2246 '0.1':2189 '1':90,99,128,137,350,359,370,379,386,394,401,413,421,428,437,442,443,445,446,447,449,454,455,457,466,498,780,939,943,967,1059,1090,1099,1132,1153,1174,1180,1185,1194,1199,1218,1224,1236,1249,1257,1270,1329,1334,1340,1355,1361,1366,1371,1377,1449,1454,1460,1503,1509,1514,1519,1525,1540,1553,1578,1643,1651,1721,1816,1822,1827,1832,1838,2022,2032,2137,2149,2440,2444,2462,2467,2471,2582,2591,2599,2603,2616,2621,2625,2628,2633,2645,2647,2669,2677,2688,2710,2891,2924,2933,2959,2976,2986,3135,3331,3356,3375,3392,3488,3497,3505,3520,3525,3549,3551,3630,3639,3657,3681,3698,3710,3739,3949,4077,4128,4304 '10':2280 '1000':2266,2284 '2':92,130,155,163,184,203,219,235,261,352,372,387,414,438,460,463,467,470,473,499,502,505,551,553,558,560,563,566,570,573,576,625,636,649,662,675,717,1046,1062,1092,1150,1155,1177,1182,1197,1201,1221,1226,1239,1251,1259,1273,1331,1336,1342,1357,1363,1368,1373,1379,1451,1456,1462,1505,1511,1516,1521,1527,1542,1555,1580,1644,1683,1713,1722,1725,1728,1755,1762,1770,1784,1818,1824,1829,1834,1840,2041,2082,2139,2150,2154,2168,2170,2185,2225,2325,2336,2338,2375,2442,2457,2460,2469,2564,2584,2601,2618,2623,2626,2631,2634,2644,2651,2655,2664,2667,2670,2675,2679,2690,2705,2708,2712,2719,2721,2794,2888,2892,2915,2917,2921,2925,2929,2934,2960,2964,2973,2977,2982,2987,2992,3006,3076,3169,3243,3336,3358,3490,3507,3522,3527,3530,3535,3538,3548,3555,3559,3568,3571,3574,3579,3583,3592,3596,3601,3607,3611,3621,3623,3627,3631,3635,3640,3662,3682,3686,3695,3699,3705,3711,3717,3733,3743,3754,3895,3906,4136,4141,4154,4159,4175,4187 '2020':4467 '22':4466 '2a':517,531,534,539,542,544,546,549,589,595,620,757,2731 '2n':559 '4':557,569,2984,2994,3708,3720 '4a':552,554 '8':2187,2227,2327 'abl':891,4392 'absolut':1593 'achiev':42,910 'actual':598,1492,3847,4048 'addit':594,2490,3443 'algebra':2207,2415,3015 'algorithm':3,7,12,40,48,63,804,864,887,1000,1018,1038,2778,3043,3048,3074,3319,3797,3812,3842,3846,3859,3890,3930,3961,3984,4003,4035,4208,4224,4252,4356,4367,4412,4415,4419,4423,4443,4451 'align':82,105,117,143,154,274,341,476,489,508,538,583,615,689,961,987,1044,1064,1079,1105,1148,1275,1669,1691,1716,1738,1750,1777,2434,2477,2504,2515,2572,2657,2660,2682,2701,2715,2908,2938,2956,2966,2969,2996,3129,3155,3198,3226,3350,3387,3458,3470,3478,3561,3564,3586,3588,3604,3614,3644,3678,3688,3691,3722,4071,4097,4122,4168,4298,4326 'alpha':1572,1596,1627,1653,1670,1677,1686,1731,1735,1752,1760,1765,1768,1774,1857,1923,1954,1968,2000,2010,2020,2030,2047,2085,2124,2131,2142,2155,2162,2179,2826,2860 'alreadi':78,3818 'also':1316,2352,2484,3413,3437 'although':1284,2245 'alway':4243,4347 'among':1604,2282 'amplif':1985 'amplitud':1299,1410,1500,1550,1561,1588,1608,1617,1636,1665,1812,1852,1928,1947,1984,1995,2004,2015,2024,2057,2527,2535,2820,3191 'analysi':4439 'angl':2561,2789,2802,2876 'anoth':1436,2431,3014 'answer':3975,4118 'anymor':4398 'appli':1936,2516,2730 'approx':2978,2988,3593,3597,3606,3700,3712 'array':774,800,812,823,876,882 'articl':152,328,1033,3040,4285 'assum':1116 'assumpt':3262,3774,3782 'assur':947 'ast':957,974,983,997,1126,1140,1164,1188,1210,1230,1247,1263,1306,1392,1566,1575,1599,1860,1889,1905,1926,1932,1952,1957,1971,2050,2069,2088,2099,2127,2134,2145,2158,2165,2182,2235,2307,2427,2451,2474,2498,2511,2531,2610,2808,2817,2824,2829,2840,2855,2863,2883,2900,2947,3142,3151,3165,3172,3177,3195,3203,3207,3224,3332,3337,3343,3658,3663,3669,4069,4084,4093,4145,4164,4199,4312,4322 'asymptot':34,832,2329,2999,3301,3725,3746,3925,3955 'august':4465 'averag':840,1496,1632 'back':1445,1478 'base':1294,1302,1405,1620,3897,3952 'becom':1352,1396,1601,1667,1798,1854,1959,1973,1979,2090,2106 'begin':81,116,153,340,440,488,537,614,960,965,1043,1078,1147,1668,1715,1749,2433,2503,2571,2659,2700,2907,2955,2968,3128,3133,3197,3349,3457,3477,3563,3587,3613,3677,3690,4070,4075,4121,4126,4297,4302 'bell':4396 'best':33,853 'better':51 'big':164,171,175,182,185,192,193,200,223,230,239,246,260,269,1327,1344,1353,1381,1447,1464,1501,1529,1814,1842 'bigg':348,364,368,384,1157,1178,1203,1222,1240,1265,2580,2596,2597,2614,2918,2927,2930,2936,3486,3502,3503,3518,3624,3633,3636,3642 'binari':953 'bit':313,1536,4182,4195,4203 'blog':54,746 'bmatrix':441,459 'boldsymbol':1702,1717,1730,1734,1751,1756,1759,1764,1767,1773,1999,2009,2019,2029 'book':4463 'boolean':4437 'calcul':748,2567 'care':4040 'case':837,841,966,985,2844,3134,3153,3788,4076,4095,4127,4166,4303,4324 'caveat':66 'cdot':444,448,456,781,1338,1359,1375,1458,1507,1523,1710,1820,1836,3339,3665 'chanc':1884 'chang':2522 'check':331 'circuit':1003,1008,1021,1025,1384,1440,2520,3082,3084,3095,3123,3233,3817,4029,4045,4112,4262,4294,4433 'classic':38,803,863,3960,4206 'close':2847 'closer':2804 'cmu':2218 'common':3876,3909,3933 'compar':26,825 'complet':893 'complex':35,833,2332,2356,2371,3002,3303,3728,3749,3927,3957 'comput':11,4445,4447 'conclud':585,753,3009,3757 'conduct':2320,2872 'confus':3855 'consid':2416,3394 'constant':2259 'contain':3905 'conveni':115 'convert':992 'correspond':1562,1948 'cos':2641,2648,2652,2661,2916,3545,3552,3556,3565,3622 'could':41,603,855,866,909,930,1467,1584,1797,1987,2045,2113,2199,2254,2351,2565,3018,3025,3049,4047,4099,4242,4290,4346,4378 'dagger':201,213,217,528,533,541,548 'data':3921 'databas':18,45,2349,3066,3274,3286,3297,3313,3866,3871,3874,3880,3904,3911,3919,3937,3946,3953,3964,3998,4021,4220,4234,4338 'defin':485,1745,3346 'denot':107,324,1570,1701 'deriv':2202,3258 'design':3088,3119,3228,3826,3861,4025,4041,4100,4258,4291 'detail':68 'deutsch':1036,4418,4421 'deutsch-jozsa':1035,4420 'diagram':2773,3055 'differ':314,1309,1412,1487 'difficult':2401 'diffus':1383,3232 'direct':2524 'discuss':60,1029,2726,3236,4281 'distinct':917 'diverg':2813 'dummi':1426 'earli':4282 'earlier':3237 'easi':3180 'eleg':2381,2384 'element':2206 'end':104,142,273,458,475,507,582,688,984,986,1063,1104,1274,1690,1737,1776,2476,2514,2656,2681,2714,2937,2965,2995,3152,3154,3225,3386,3469,3560,3585,3603,3643,3687,3721,4094,4096,4165,4167,4323,4325 'enhanc':1922 'enough':1900 'entir':811,881,3761,4218 'equal':1075,1287 'equat':146 'even':1980 'exact':951,2222,3059,4117 'exampl':4058,4120 'exit':950 'expect':2270,4375 'extend':3315 'extrem':2694 'f':937,962,1049,1072,1129,1143,3104,3108,3130,4072,4123,4299 'fact':2035,3777,3986 'familiar':2410 'fashion':1699 'figur':1993 'final':2812,4361 'find':790,797,994,1389,1402,1420,1916,3057,3305,4244,4348,4394 'first':2121,2557,4178 'flip':3189 'follow':145,1005,1992,2175,3054 'foral':3218 'forgot':737 'form':2397 'formal':3036 'found':1490,3020 'fourier':4438 'frac':89,127,349,369,385,412,436,465,497,556,568,1056,1089,1152,1171,1179,1191,1198,1215,1223,1233,1248,1256,1267,1328,1333,1339,1354,1360,1365,1370,1376,1448,1453,1459,1502,1508,1513,1518,1524,1539,1552,1577,1642,1720,1815,1821,1826,1831,1837,2136,2148,2167,2183,2223,2322,2439,2455,2466,2562,2581,2598,2615,2620,2630,2642,2649,2653,2662,2666,2673,2676,2687,2703,2706,2709,2718,2791,2886,2890,2919,2923,2932,2958,2962,2971,2975,2979,2985,2989,3355,3374,3487,3504,3519,3524,3534,3546,3553,3557,3566,3570,3577,3581,3590,3594,3599,3609,3625,3629,3638,3680,3684,3693,3697,3701,3704,3709,3713,3716,3732,4134,4139,4152,4157,4173,4185 'frequent':2299 'fuck':3833 'function':936 'g':795,4307,4316,4330 'gate':1802,3099 'general':3792,4287 'geometr':2388,2779,2857,3320 'geometri':2412 'geq':2130,2188 'get':2209 'given':691,935 'go':808,878,1444,4215 'gone':1477 'got':3854 'greater':2242 'grover':1,5,46,61,998,1016,1489,2776,3041,3046,3072,3079,3317,3795,3810,3840,3844,3857,3888,3982,4001,4033,4222,4250,4354,4365,4387,4410,4413,4449 'h':83,121,165,176,186,194,204,214,220,231,236,247,250,254,257,270,1083 'hadamard':74 'half':4179,4192 'hash':3916,3951 'heard':4401 'high':731,2251,3086 'high-level':3085 'high-school':730 'higher':2289 'howev':883,4257 'i.e':1077 'ident':767,1437,3126,3991,4015,4276 'illustr':1989,2774 'includ':3106 'index':3822 'individu':2295 'inform':3161,3823 'inner':2569,4424,4427 'input':1068,1324,3886 'instead':3799,3867,4059 'interest':3030 'introduct':4 'invent':13 'invers':1013,1585,1659,1845,1964,2006,2026 'item':776,793,817,830,872,915,923,2345,3268,3280,3291,3307,3326,3908 'iter':2043,2084,2228,2558,2797,2870 'j':469,478,501,562,572,1724 'jozsa':1037,4422 'k':2263,2265,2323,2874,2889,2922,2931,2957,2970,3290,3324,3342,3360,3377,3393,3509,3529,3532,3537,3573,3582,3600,3610,3628,3637,3668,3679,3692,3707,3719,3735,3741 'know':868,3877,4012,4115 'known':79,1041,3829 'kroneck':316,4430 'lab':4397 'langl':159,227,243,265,279,336,345,433,494,629,640,653,666,676,718,2505,2573,2909,3174,3247,3459,3479,3615 'larg':1899,2686 'larger':1865,1883,1981,2052,2063,2859 'largest':1603,1863,1946 'least':2279 'lectur':2215 'lei':4456,4459 'leq':2147,2161,3740 'less':20,2037 'let':329,1422,2108 'level':3087 'like':58,511,788 'linear':2414,3922 'littl':312,1535 'll':3742 'log':3940,4462 'long':3737,4226 'look':2312 'lov':4386 'major':1546 'make':2046,4006,4032 'mao':4457,4460 'match':924,3060,3254,3269,3281,3292,3308,3325,4052,4277 'math':733 'mathbf':86,95,101,110,118,124,133,139,156,160,168,179,189,197,207,210,224,228,240,244,262,266,276,280,287,291,333,337,342,346,355,361,375,381,390,397,403,409,417,424,430,434,491,495,607,611,616,622,626,630,633,637,641,643,646,650,654,656,659,663,667,669,672,677,679,682,685,696,701,708,711,714,719,721,724,726,764,955,963,970,972,978,981,995,1050,1052,1080,1086,1095,1101,1122,1124,1130,1135,1138,1144,1159,1162,1167,1186,1205,1208,1211,1228,1242,1245,1253,1261,1304,1390,1564,1573,1597,1623,1628,1647,1654,1671,1678,1687,1858,1887,1903,1924,1930,1950,1955,1969,2048,2067,2086,2097,2125,2132,2143,2156,2163,2180,2233,2305,2421,2425,2435,2446,2449,2452,2463,2472,2479,2491,2496,2506,2509,2529,2540,2551,2574,2576,2587,2593,2605,2608,2611,2636,2638,2734,2739,2743,2750,2754,2767,2806,2815,2822,2827,2834,2838,2848,2853,2861,2881,2898,2910,2912,2945,3131,3138,3140,3146,3149,3163,3170,3175,3193,3201,3205,3211,3214,3219,3222,3244,3248,3329,3334,3340,3351,3362,3366,3369,3379,3383,3399,3403,3408,3419,3423,3426,3432,3444,3449,3460,3463,3480,3482,3493,3499,3511,3515,3540,3542,3616,3618,3655,3660,3666,4065,4067,4073,4080,4082,4088,4091,4124,4131,4137,4143,4149,4155,4162,4170,4183,4197,4300,4308,4310 'matrix':482,486,516,601,762,1697,1743,1790 'maxim':2940,3646 'mean':1277,1474,1591,1662,1848,1871,1967,2008,2028,2220 'might':2399,4263 'miscellan':4383 'model':932 'move':2801 'mu':1637,1640,1675,1681,1684,1703,1706,1708,1711,1718,1757 'much':2051,2379 'multipl':1698,3279 'must':3158,3827 'n':24,29,85,93,100,123,131,138,167,178,188,196,206,216,222,233,238,249,252,256,259,272,353,360,373,380,388,395,402,415,422,429,439,461,464,468,471,474,500,503,506,561,564,567,571,574,577,697,712,720,725,783,845,850,899,940,1085,1093,1100,1156,1183,1202,1227,1252,1260,1332,1337,1343,1358,1364,1369,1374,1380,1452,1457,1463,1506,1512,1517,1522,1528,1543,1556,1581,1645,1652,1714,1723,1726,1729,1819,1825,1830,1835,1841,2042,2083,2140,2152,2171,2186,2226,2326,2337,2339,2346,2360,2376,2443,2458,2461,2470,2585,2592,2602,2619,2624,2627,2632,2635,2668,2671,2680,2684,2691,2713,2722,2983,2993,3007,3077,3112,3116,3359,3491,3498,3508,3523,3528,3531,3536,3539,3572,3575,3584,3602,3612,3706,3718,3734,3744,3755,3896,3907,3941,3967,4135,4140,4142,4153,4158,4160,4174,4186,4188,4213,4240,4255,4344,4359 'near':2062 'negat':1960 'neq':980,1137,1161,1207,1244,2153,2448,2607,3148,3221,4090,4161,4319 'news':4403 'next':902 'normal':693 'note':303,2216 'notic':1779 'notin':3364,3513 'number':2260,2292,2315,2343,2868,4229,4333 'o':22,28,844,849,897,2039,2080,2334,2359,2373,3004,3075,3730,3752,3939,3948,3966,4212,4253,4357 'observ':1290,1875,1886,1909,2066,2096,2232,2275,2285,2296,2300,2897,2944,3650 'ok':3971 'one':818,820,922,952,1121,1559,3253,3267,3306,3651,3768,3772,3775,3780,3783,3793,3994,4016,4270 'oper':75 'oracl':1002,1007,1020,1024,1439,1943,1998,2018,2519,3094,3122,3816,4028,4044,4111,4261,4293 'order':1387,4023 'origin':1481,2766,4453 'orthogon':2501,3455 'other':1313,1414,1869,2364 'otim':84,122,166,172,177,187,195,205,215,221,232,237,248,251,255,258,271,296,307,322,365,406,1055,1084,1170,1190,1214,1232,1266 'outer':174,284,298,301,305,309,367,408 'output':1110,1282,1350,1433,3115 'pattern':4054,4107 'peopl':3853 'phase':1012,1298,1320,1347,1382,1409,1442,1499,1549,1560,1587,1607,1616,1635,1664,1811,1851,1983,1994,2003,2014,2023 'pi':2792,2887,2920,2963,2972,2980,2990,3626,3685,3694,3702,3714 'plane':2418,2488,3396,3417,3441 'pleas':742,2211 'posit':1855,1974 'possibl':3968 'post':55,747 'power':4036 'practic':3794,3850,4364,4417 'prerequisit':69,1748,1793,2729,3240 'previous':327,1032,3476 'prime':618,716,1674,1754,2013,2033,2437,2481,2493,2508,2553,2578,2640,2756,3353,3371,3372,3405,3406,3410,3421,3428,3429,3434,3446,3451,3452,3462,3465,3466,3484,3544 'probabl':1288,1484,2064,2094,2230,2252,2895,2942,3648 'problem':769,860,929,990,1892 'process':1986,2257 'product':285,302,306,317,2570,4425,4428,4431 'project':2832 'proof':587,755,2119,2192,2385,2389,2394,2780,3011,3016,3037,3321,3759,3762 'properti':72 'prove':1783,2114,2123 'publish':4454 'qquad':3217 'quantum':10,886,1001,1006,1019,1023,1438,1801,1942,1997,2017,2518,3081,3083,3093,3098,3121,3231,3815,4027,4043,4110,4260,4292,4434,4444 'qubit':1069,1111,1283,1295,1303,1325,1351,1406,1434,1621,1878,1939,2074,2104,2240,2905,2952,3113,3117,3674 'queri':25,926,2317,2331,2355,2370,3001,3063,3127,3271,3283,3294,3302,3310,3727,3748,3863,3926,3956,3987,4049,4064,4104,4202,4274 'question':1416 'rangl':88,103,112,120,126,141,158,170,181,191,199,209,212,226,242,264,278,289,293,335,344,363,383,405,411,432,493,609,613,619,624,628,635,639,645,648,652,658,661,665,671,674,681,684,687,723,766,1047,1054,1058,1060,1082,1088,1103,1151,1169,1173,1175,1189,1193,1195,1213,1217,1219,1231,1235,1237,1255,1264,1269,1271,1307,1393,1567,1625,1890,1906,1933,1953,2070,2100,2236,2308,2423,2428,2438,2454,2465,2475,2482,2494,2499,2512,2532,2542,2554,2579,2595,2613,2736,2741,2745,2752,2757,2769,2809,2818,2825,2836,2841,2850,2856,2884,2901,2914,2948,3173,3196,3204,3208,3213,3216,3246,3333,3338,3344,3354,3368,3373,3385,3401,3407,3411,3422,3425,3430,3435,3447,3453,3467,3485,3501,3517,3620,3659,3664,3670 'ray':751 'reader':736,1466,2198,2406,3024 'recent':4407 'refer':743,2212,3026,4409 'reflect':600,604,704,750,761,2549,2560,2738,2749,2760 'regard':2395 'relat':2117 'remain':2543 'remark':4362 'repeat':2255 'repres':3051 'rest':2055,2538 'retriev':816 'rewrit':2353 'right':4388 'rightarrow':941 'run':3071,3838,3980,4000,4249,4353 'say':1318,2264 'scenario':3970 'school':732 'scientist':4448 'search':15,39,768,859,895,928,989,4207 'second':4191 'section':903 'see':525,906,2110 'seem':847,3803 'seen':3884 'send':1430 'sens':4007 'short':4381 'short-sight':4380 'show':514,2177,2196,2277,2367 'sight':4382 'signific':50,2288,4236,4340 'similar':3471,3765 'simon':4441 'simpl':4063 'simplest':2393 'sin':2672,2702,2928,3576,3589,3634 'sinc':3813,4008 'singl':3771,3779 'skip':3034 'slight':1864,1882 'small':2695 'smaller':1537,2091,2107,4237,4341 'smart':1494 'someth':1486,3807,3988,4050 'sophist':4103 'space':4429 'span':2419,3397 'special':3787 'specif':1609,4329 'specifi':4056 'sqrt':23,91,129,351,371,898,1061,1091,1154,1176,1181,1196,1200,1220,1225,1238,1250,1258,1272,1330,1335,1341,1356,1362,1367,1372,1378,1450,1455,1461,1504,1510,1515,1520,1526,1541,1554,1579,1817,1823,1828,1833,1839,2040,2081,2138,2169,2184,2224,2324,2335,2374,2441,2456,2459,2468,2583,2600,2617,2622,2629,2665,2678,2689,2711,2720,2981,2991,3005,3357,3376,3489,3506,3521,3526,3533,3569,3580,3598,3608,3703,3715,3731,3753,4239,4254,4343,4358 'start':1803,2781 'state':1296,1407,1622,2762,2784,2799,2878,3898,4436 'step':1612,1806 'still':2248,3751 'store':3920 'straightforward':1397 'strategi':1395 'string':954 'structur':3801,3870,3879,3910,3914,3936,3945 'stuck':2210 'sum':94,132,354,374,389,396,416,423,1094,1158,1204,1241,1646,2445,2586,2604,3361,3378,3492,3510 'summar':3045 'superposit':1076,3893 'suppos':770,912,1614,2866,3287,3322 'sure':1911 'system':4435 'take':3110,4211 'targ':3773,3781 'target':792,829,871,3821,4231,4335 'text':173,297,308,366,407,968,976,3136,3144,4078,4086,4129,4147,4305,4314 'therefor':530,1795,2478,2658,2967,2997,3431,3562,3689,3723 'theta':2563,2643,2650,2654,2663,2674,2704,2707,2717,2793,2803,2893,2926,2935,2961,2974,3547,3554,3558,3567,3578,3591,3595,3605,3632,3641,3683,3696 'think':3852 'three':2191 'time':462,472,504,565,575,1611,1727,1805,2262,2267,2281,2646,3078,3550,4256,4360 'top':1067,1109,1281,1323,1432,1877,1938,2073,2103,2239,2904,2951,3673 'total':2342 'treat':3091 'tree':3913,3944 'tree-structur':3943 'tri':2200 'trial':1427 'trivial':523,2118,2194,4267 'two':2363,3347 'typic':690 'u':1071,3100,3103,3107,3156,3166,3184,3199,3209 'unchang':2544 'underbrac':1705 'understand':740 'unit':481,694 'unitari':520,592,1789,3187 'unstructur':17,44,3798,3865,3903,3918,3963,3997,4020,4219 'unusu':3808 'use':19,109,149,321,801,861,884,933,1010,1990,2204,2568,3052,3848,3912,3934,3969,4204,4221,4272,4371 'v':777,779,782,794 'valid':1800 'valu':1532,1594,2696 'varphi':1045,1149 'vdot':450,451,452,453 'vector':606,695,700,705,707,2432,2763,2785,2800,2879,3348 'verifi':1468,3182 'w':2913,3619,4144,4163,4198,4311,4321 'way':1919,2365 'well':1028 'whose':1408 'wikipedia':2770,3022 'without':877 'worst':836 'would':57,147,510,787,889,905,1666,1880,1913,1958,1972,1978,2089,2105,2301,4210 'x':96,102,134,140,356,362,376,382,391,404,418,431,608,617,623,634,644,647,657,660,670,673,680,686,702,709,715,722,727,956,964,971,973,979,982,996,1051,1053,1096,1102,1123,1125,1131,1136,1139,1145,1160,1163,1168,1187,1206,1209,1212,1229,1243,1246,1254,1262,1305,1391,1565,1574,1598,1624,1629,1648,1655,1672,1679,1688,1859,1888,1904,1925,1931,1951,1956,1970,2049,2068,2087,2098,2126,2133,2144,2157,2164,2181,2234,2306,2426,2447,2450,2453,2473,2497,2510,2530,2541,2588,2594,2606,2609,2612,2735,2740,2807,2816,2823,2828,2835,2839,2849,2854,2862,2882,2899,2911,2946,3101,3132,3139,3141,3147,3150,3157,3164,3167,3171,3176,3185,3194,3200,3202,3206,3210,3212,3215,3220,3223,3330,3335,3341,3363,3367,3380,3384,3494,3500,3512,3516,3617,3656,3661,3667,4066,4068,4074,4081,4083,4089,4092,4125,4132,4138,4150,4156,4171,4184,4301,4309,4318 'y':398,410,425,435 'year':4408	en	Lei Mao
850	Amazon drivers are hanging smartphones in trees to get more work	{"ver":2,"uid":1,"hash":"SHA1:3640894816dd0e70008867efb164b3058726f7ff"}	https://www.bloomberg.com/news/articles/2020-09-01/amazon-drivers-are-hanging-smartphones-in-trees-to-get-more-work	2020-09-02 03:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24342540"> https://news.ycombinator.com/item?id=24342540 </a>	6f4330dec2687b7f31d9f0cd6c192d1a308b3df6	\N	f	2020-09-02 03:10:00	2020-09-04 19:10:09.001824	0			'/item?id=24342540':15 'amazon':1 'comment':12 'driver':2 'get':9 'hang':4 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24342540':13 'smartphon':5 'tree':7 'work':11	zh	Umofomia
852	A Saudi prince's attempt to silence critics on Twitter	{"ver":2,"uid":1,"hash":"SHA1:afbc3daf1e4b7ae14c7f5776db41e0b6e53fcde6"}	https://www.wired.com/story/mohammed-bin-salman-twitter-investigation/	2020-09-02 03:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24342948"> https://news.ycombinator.com/item?id=24342948 </a>	27e19a10ba877754287ccd591d17b7a3a17a9c61	\N	f	2020-09-02 03:10:00	2020-09-04 19:10:09.024357	0			'/item?id=24342948':14 'attempt':5 'comment':11 'critic':8 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24342948':12 'princ':3 'saudi':2 'silenc':7 'twitter':10	zh	leoschwartz
480	New academic journal only publishes 'unsurprising' research rejected by others	{"ver":2,"uid":1,"hash":"SHA1:6ced1f6051460a5fd4ffa267c6c209b2e67a229e"}	https://www.cbc.ca/radio/asithappens/as-it-happens-thursday-edition-1.5146761/new-academic-journal-only-publishes-unsurprising-research-rejected-by-others-1.5146765	2020-08-21 04:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24229269"> https://news.ycombinator.com/item?id=24229269 </a>	4f32682a55ad13de2df21107495897d2869e1bbc	\N	f	2020-08-21 04:10:00	2020-08-24 04:10:08.215958	0			'/item?id=24229269':14 'academ':2 'comment':11 'journal':3 'new':1 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24229269':12 'other':10 'publish':5 'reject':8 'research':7 'unsurpris':6	zh	apsec112
673	New Racket Language Website	{"ver":2,"uid":1,"hash":"SHA1:c5712e1d806bdb56bb8aca1e761bcdf003d8a3fe"}	https://racket-lang.org/	2020-08-27 04:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24283478"> https://news.ycombinator.com/item?id=24283478 </a>	d26d8ec5ae651350720228136e66fc4e0e2c7a52	\N	f	2020-08-27 04:10:00	2020-08-29 04:10:17.767285	0			'/item?id=24283478':8 'comment':5 'languag':3 'new':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24283478':6 'racket':2 'websit':4	zh	kamaal
851	Why has college gotten so expensive in the last 30 years? A blank check in 1993	{"ver":2,"uid":1,"hash":"SHA1:e5c05b547227a70eef03a3caa3688af16da37719"}	https://medium.com/@andrewghobrial/why-has-college-gotten-so-expensive-in-the-last-30-years-3505af9aded8	2020-09-02 03:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24343572"> https://news.ycombinator.com/item?id=24343572 </a>	5f1b655eda48fbc19a403b5bc5a591414a4833a4	\N	f	2020-09-02 03:10:00	2020-09-04 19:10:08.99974	0			'/item?id=24343572':20 '1993':16 '30':10 'blank':13 'check':14 'colleg':3 'comment':17 'expens':6 'gotten':4 'last':9 'news.ycombinator.com':19 'news.ycombinator.com/item?id=24343572':18 'year':11	zh	KoftaBob
740	Zoom is now critical infrastructure – that’s a concern	{"ver":2,"uid":1,"hash":"SHA1:42b3005a42c41389b229f24ca63aa57b1a9904bb"}	https://www.brookings.edu/blog/techtank/2020/08/27/zoom-is-now-critical-infrastructure-thats-a-concern/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24306833"> https://news.ycombinator.com/item?id=24306833 </a>	e7a789e4e4587aafa0263692758f394b621f8bf8	\N	f	2020-08-29 06:10:00	2020-08-31 18:10:10.962713	0			'/item?id=24306833':13 'comment':10 'concern':9 'critic':4 'infrastructur':5 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24306833':11 'zoom':1	zh	ohjeez
741	Intel's “cripple AMD” function (2019)	{"ver":2,"uid":1,"hash":"SHA1:6c88c475ddc8e1693b11f76bbd184124a695b9c4"}	https://www.agner.org/forum/viewtopic.php?f=1&t=6	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24307596"> https://news.ycombinator.com/item?id=24307596 </a>	f77e6d1893cc50899e10a3c1d6b315c778372a1b	\N	f	2020-08-29 06:10:00	2020-08-31 20:10:09.818811	0			'/item?id=24307596':10 '2019':6 'amd':4 'comment':7 'crippl':3 'function':5 'intel':1 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24307596':8	zh	arto
674	Borg：Google 集群管理大杀器	{"ver":2,"uid":1,"hash":"SHA1:21d0c3d28f3b233d71af5e527996c55effe860d2"}	https://toutiao.io/k/fie19lr	2020-08-27 04:10:10	Borg：Google 集群管理大杀器	2d96f09d36b90a0fcd7cc54e10e0eb3d03955255	\N	f	2020-08-27 04:10:00	2020-08-27 22:10:10.077635	0			'borg':1,4 'google':2,5 '集群管理大杀器':3,6	zh	
3	Serverless in the wild: characterizing and optimising the serverless workload at a large cloud provider	{"ver":2,"uid":1,"hash":"SHA1:86b1c7daf1f52f48b1509c97fa838cada452a100"}	https://blog.acolyer.org/2020/03/20/serverless-in-the-wild/	2020-03-20 06:00:00	\n<div class="wp-block-jetpack-markdown"><p><a href="https://arxiv.org/abs/2003.03423">Serverless in the wild: characterizing and optimising the serverless workload at a large cloud provider</a>, Shahrad et al., arXiv 2020</p>\n<p><em>This is a fresh-from-the-arXivs paper that Jonathan Mace (@mpi_jcmace) drew my attention to on Twitter last week, thank you Jonathan!</em></p>\n<p>It&#8217;s a classic trade-off: the quality of service offered (better service presumably driving more volume at the same cost point), vs the cost to provide that service.  It&#8217;s a trade-off at least, so long as a classic assumption holds, that a higher quality product costs more to produce/provide. This assumption seems to be deeply ingrained in many of us &#8211; explaining for example why higher cost goods are often implicitly associated with higher quality. Every once in a while though  a point in the design space can be discovered where we don&#8217;t have to trade-off quality and cost, where we can have both a higher quality product <em>and</em> a lower unit cost.</p>\n<p>Today&#8217;s paper analyses serverless workloads on Azure (the characterisation of those workloads is interesting in its own right), where users want fast function start times (avoiding cold starts), and the cloud provider wants to minimise resources consumed (costs). With fine-grained, usage based billing, resources used to keep function execution environments warm eat directly into margins. The authors demonstrate a policy combining keep-alive times for function runtimes with pre-warming, that dominates the currently popular strategy of simply keeping a function execution environment around for a period of time after it has been used, in the hope that it will be re-used. Using this policy, users see much fewer cold starts, while the cloud provider uses fewer resources. It&#8217;s the difference between the red (state-of-the-practice) and green (this paper) policies in the chart below. Win-win!</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-15.jpeg?w=480" alt=""></p>\n<blockquote>\n<p>We propose a practical resource management policy that significantly reduces the number of function cold starts, while spending fewer resources than state-of-the-practice policies.</p>\n</blockquote>\n<p>Before we get to how the policy works, first lets take a look at what the paper tells us about real production serverless workloads on Azure (all function invocations across all of Azure, July 15th-28th, 2019). Those insights inform the policy design.</p>\n<p>###Serverless in the real world, a service provider&#8217;s perspective</p>\n<p>The dataset includes invocation counts, execution times, memory usage, and metadata (e.g., trigger type) for every function invoked across Azure for the days in question. In Azure functions are logically grouped in applications, and its the application that is the unit of scheduling and resource allocation.</p>\n<p>Over half of all apps have only one function, 95% have at most 10 functions, and 0.04% have more than 100 functions. Looking at invocations overall, the number of functions within an applications turns out not to be a useful predictor of invocation frequency. Applications with more functions show only a very slight tendency for those functions to be invoked more often. The most popular way to trigger a function execution is an HTTP request. Only 2.2% of functions have an event-based trigger, but these represent 27.4% of all invocations. Meanwhile many functions have a timer-based trigger, but they only account for 2% of all invocations. I.e., events happen much more frequently than timer expiry!</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-2.jpeg?w=480" alt=""></p>\n<p>Timer-based triggers are great for predicting when a function will be invoked, but 86% of applications either have no timer, or have a combination of timer and other triggers.</p>\n<p>The number of invocations per day can vary by over 8 orders of magnitude across functions and applications, implying very different levels of resource requirements.</p>\n<blockquote>\n<p>&#8230; the vast majority of applications and functions are invoked, on average, very infrequently&#8230; 45% of applications are invoked once per hour or less on average, and 81% of the applications are invoked once per minute or less on average. This suggests that the cost of keeping these applications warm, relative to their total execution (billable) time, can be prohibitively high.</p>\n</blockquote>\n<p>An analysis of the inter-arrival times (IATs) of those function executions shows that real IAT distributions are more complex than simple periodic or memoryless distributions. For many applications, predicting IATs is not trivial.</p>\n<p>When functions <em>do</em> execute, the amount of time they execute for is comparatively short (50% of functions execute for 1s or less).</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-7.jpeg?w=480" alt=""></p>\n<blockquote>\n<p>The main implication is that the function execution times are at the same order of magnitude as the cold start times reported for major providers. This makes avoiding and/or optimizing cold starts extremely important for the overall performance of a FaaS offering.</p>\n</blockquote>\n<p>Moreover, for most applications the average execution time is at least two orders of magnitude smaller than the average IAT.</p>\n<p>There is also wide variation in memory consumption, but no strong correlation between invocation frequency and memory allocation, or between memory allocation and execution time.</p>\n<p>In short, most functions are invoked infrequently with short lifetimes, and it&#8217;s expensive to keep these resident. But the task of predicting when a function will next be invoked is non-trivial.</p>\n<h3>When and how long to keep a function execution environment alive</h3>\n<p>From a service provider perspective, there are two important questions that govern  application performance and resource consumption:</p>\n<ul>\n<li>When (if at all) should an application execution enviroment be <em>pre-warmed</em> in anticipation of a forthcoming invocation, and</li>\n<li>After an application execution environment has been loaded into memory, how long should it be kept alive for (<em>keep-alive</em>). (Not this definition starts from the moment of pre-warming, if an application is pre-warmed)</li>\n</ul>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-9.jpeg?w=480" alt=""></p>\n<p>The answers to these questions need to be different for each application as we have seen. In the absence of any strong correlations we can piggy-back off of, that means we need to learn the behaviour of each function &#8211; but we need to do so with low tracking and execution overheads.</p>\n<p>The solution is a <em>hybrid histogram</em> policy that adjusts to the invocation frequencies and patterns of each application.  It has three main components:</p>\n<ul>\n<li>A <em>range-limited</em> histogram capturing idle time (IT) distribution for each application. Each 1-minute wide bin captures the number of ITs of the corresponding length that have occured, for ITs of up to 4 hours. The head of this distribution (taken at the 5th percentile) is used to set the pre-warming window, and the tail (taken at the 99th percentile) is used to set the keep-alive window.</li>\n</ul>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-11.jpeg?w=480" alt=""></p>\n<ul>\n<li>A <em>standard keep-alive</em> policy used when not enough ITs have been observed yet, or the IT distribution is undergoing change. The histogram is most effective when the coefficient of variation is higher than some threshold. Below this the standard keep-alive is used, which  has no pre-warming and a <em>four-hour</em> keep-alive time. &quot;<em>This conservative choice of keep-alive window seeks to minimize the number of cold starts while the histogram is learning a new architecture</em>.&quot;</li>\n<li>When an application experiences many out-of-bound (more than 4 hour) idle times the histogram approach is never going to work well. For these applications a more expensive <a href="https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average">ARIMA</a> model is used to predict idle time. This model is computed off the critical path, and only needed for a minority of invocations so computation needs are manageable.</li>\n</ul>\n<p>It all comes together like this:</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/azure-serverless-fig-10.jpeg?w=480" alt=""></p>\n<h3>The hybrid policy in action</h3>\n<p>The hybrid policy is evaluated both with a simulation based on the full Azure trace, and an Open Whisk based implementation replaying a section of it. We saw one of the headline results at the top of this post in Fig 15: the hybrid policy significantly reduces the number of cold starts while also lowering memory waste.</p>\n<blockquote>\n<p>The 10-minute fixed keep-alive policy [current cloud provider approach] involves ~2.5x more cold starts at the 75th percentile while using the same amount of memory as our histogram with a range of 4 hours&#8230; Overall, the hybrid policies form a parallel, more optimal Pareto frontier (green curve) than the fixed policies (red curve).</p>\n</blockquote>\n<p>If you&#8217;re interested in diving deeper, the evaluation also shows the contribution made by the histogram range-limiting, by the checking of histogram representativeness to fall back to the standard keep-alive policy, and by the use of ARIMA models of out-of-bound idle time applications.</p>\n<blockquote>\n<p>We achieve these positive results despite having deliberately designed our policy for simplicity and practicality: (1) histogram bins have a resolution of 1-minute, (2) histograms have a maximum range, (3) they do not require any complicated model updates, and (4) when the histogram does not work well we revert to simple and effective alternatives.</p>\n</blockquote>\n<p>Coming soon to a cloud provider near you no doubt!</p>\n</div>\n	275c904a84625c02167d6c57e3081386745bf68a	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.11586	4	https://blog.acolyer.org/2020/03/20/serverless-in-the-wild/#comments		'0.04':473 '1':1047,1441,1448 '10':470,1319 '100':477 '15':1302 '15th':392 '15th-28th':391 '1s':746 '2':563,1450 '2.2':533 '2.5':1331 '2019':394 '2020':35 '27.4':545 '28th':393 '3':1456 '4':1068,1202,1354,1466 '45':645 '50':741 '5th':1078 '75th':1338 '8':617 '81':658 '86':591 '95':466 '99th':1095 'absenc':975 'account':561 'achiev':1427 'across':386,429,621 'action':1260 'adjust':1018 'al':33 'aliv':247,880,934,938,1104,1110,1149,1165,1173,1324,1409 'alloc':456,828,832 'also':813,1314,1384 'altern':1480 'amount':732,1344 'analys':184 'analysi':693 'and/or':777 'answer':958 'anticip':912 'app':461 'applic':443,447,489,501,593,624,636,647,661,679,721,794,893,904,920,952,968,1027,1045,1193,1217,1425 'approach':1208,1329 'architectur':1190 'arima':1221,1416 'around':269 'arriv':698 'arxiv':34,43 'associ':136 'assumpt':104,116 'attent':52 'author':240 'averag':642,656,670,796,809 'avoid':207,776 'azur':188,382,389,430,437,1274 'back':984,1403 'base':225,540,556,578,1270,1280 'behaviour':994 'better':73 'bill':226 'billabl':686 'bin':1050,1443 'bound':1199,1422 'captur':1038,1051 'chang':1127 'character':5,20 'characteris':190 'chart':325 'check':1397 'choic':1169 'classic':64,103 'cloud':14,29,212,301,1327,1485 'coeffici':1135 'cold':208,297,344,767,779,1181,1311,1334 'combin':244,601 'come':1252,1481 'compar':739 'complex':712 'complic':1462 'compon':1032 'comput':1232,1246 'conserv':1168 'consum':218 'consumpt':818,897 'contribut':1387 'correl':822,979 'correspond':1058 'cost':82,86,111,131,166,180,219,675 'count':415 'critic':1235 'current':259,1326 'curv':1368,1374 'dataset':412 'day':433,612 'deeper':1381 'deepli':120 'definit':941 'deliber':1433 'demonstr':241 'design':150,400,1434 'despit':1431 'differ':309,627,965 'direct':236 'discov':154 'distribut':709,718,1042,1074,1124 'dive':1380 'domin':257 'doubt':1490 'drew':50 'drive':76 'e.g':422 'eat':235 'effect':1132,1479 'either':594 'enough':1115 'enviro':906 'environ':233,268,879,922 'et':32 'evalu':1265,1383 'event':539,568 'event-bas':538 'everi':140,426 'exampl':128 'execut':232,267,416,527,685,704,730,736,744,756,797,834,878,905,921,1008 'expens':849,1220 'experi':1194 'expiri':575 'explain':126 'extrem':781 'faa':789 'fall':1402 'fast':203 'fewer':296,304,348 'fig':1301 'fine':222 'fine-grain':221 'first':365 'fix':1321,1371 'form':1360 'forthcom':915 'four':1161 'four-hour':1160 'frequenc':500,825,1022 'frequent':572 'fresh':40 'fresh-from-the-arxiv':39 'frontier':1366 'full':1273 'function':204,231,250,266,343,384,427,438,465,471,478,486,504,513,526,535,551,586,622,638,703,728,743,755,839,861,877,997 'get':359 'go':1211 'good':132 'govern':892 'grain':223 'great':581 'green':319,1367 'group':441 'half':458 'happen':569 'head':1071 'headlin':1292 'high':691 'higher':108,130,138,173,1139 'histogram':1015,1037,1129,1185,1207,1349,1391,1399,1442,1451,1469 'hold':105 'hope':282 'hour':652,1069,1162,1203,1355 'http':530 'hybrid':1014,1257,1262,1304,1358 'i.e':567 'iat':700,708,723,810 'idl':1039,1204,1227,1423 'implement':1281 'impli':625 'implic':751 'implicit':135 'import':782,889 'includ':413 'inform':397 'infrequ':644,842 'ingrain':121 'insight':396 'inter':697 'inter-arriv':696 'interest':195,1378 'invoc':385,414,481,499,548,566,610,824,916,1021,1244 'invok':428,516,589,640,649,663,841,865 'involv':1330 'jcmace':49 'jonathan':46,60 'juli':390 'keep':230,246,264,677,851,875,937,1103,1109,1148,1164,1172,1323,1408 'keep-al':245,936,1102,1108,1147,1163,1171,1322,1407 'kept':933 'larg':13,28 'last':56 'learn':992,1187 'least':98,801 'length':1059 'less':654,668,748 'let':366 'level':628 'lifetim':845 'like':1254 'limit':1036,1394 'load':925 'logic':440 'long':100,873,929 'look':369,479 'low':1005 'lower':178,1315 'mace':47 'made':1388 'magnitud':620,764,805 'main':750,1031 'major':634,772 'make':775 'manag':335,1249 'mani':123,550,720,1195 'margin':238 'maximum':1454 'mean':988 'meanwhil':549 'memori':418,817,827,831,927,1316,1346 'memoryless':717 'metadata':421 'minim':1177 'minimis':216 'minor':1242 'minut':666,1048,1320,1449 'model':1222,1230,1417,1463 'moment':945 'moreov':791 'mpi':48 'much':295,570 'near':1487 'need':962,990,1000,1239,1247 'never':1210 'new':1189 'next':863 'non':868 'non-trivi':867 'number':341,484,608,1053,1179,1309 'observ':1119 'occur':1062 'offer':72,790 'often':134,518 'one':464,1289 'open':1278 'optim':778,1364 'optimis':7,22 'order':618,762,803 'out-of-bound':1196,1419 'overal':482,785,1356 'overhead':1009 'paper':44,183,321,373 'parallel':1362 'pareto':1365 'path':1236 'pattern':1024 'per':611,651,665 'percentil':1079,1096,1339 'perform':786,894 'period':272,715 'perspect':410,885 'piggi':983 'piggy-back':982 'point':83,147 'polici':243,292,322,336,356,363,399,1016,1111,1258,1263,1305,1325,1359,1372,1410,1436 'popular':260,521 'posit':1429 'post':1299 'practic':317,333,355,1440 'pre':254,909,948,955,1086,1156 'pre-warm':253,908,947,954,1085,1155 'predict':583,722,858,1226 'predictor':497 'presum':75 'produce/provide':114 'product':110,175,378 'prohibit':690 'propos':331 'provid':15,30,88,213,302,408,773,884,1328,1486 'qualiti':69,109,139,164,174 'question':435,890,961 'rang':1035,1352,1393,1455 'range-limit':1034,1392 're':288,1377 're-us':287 'real':377,404,707 'red':312,1373 'reduc':339,1307 'relat':681 'replay':1282 'report':770 'repres':544,1400 'request':531 'requir':631,1460 'resid':853 'resolut':1446 'resourc':217,227,305,334,349,455,630,896 'result':1293,1430 'revert':1475 'right':199 'runtim':251 'saw':1288 'schedul':453 'section':1284 'see':294 'seek':1175 'seem':117 'seen':972 'serverless':1,9,16,24,185,379,401 'servic':71,74,90,407,883 'set':1083,1100 'shahrad':31 'short':740,837,844 'show':505,705,1385 'signific':338,1306 'simpl':714,1477 'simpli':263 'simplic':1438 'simul':1269 'slight':509 'smaller':806 'solut':1011 'soon':1482 'space':151 'spend':347 'standard':1107,1146,1406 'start':205,209,298,345,768,780,942,1182,1312,1335 'state':314,352 'state-of-the-practic':313,351 'strategi':261 'strong':821,978 'suggest':672 'tail':1091 'take':367 'taken':1075,1092 'task':856 'tell':374 'tendenc':510 'thank':58 'though':145 'three':1030 'threshold':1142 'time':206,248,274,417,687,699,734,757,769,798,835,1040,1166,1205,1228,1424 'timer':555,574,577,597,603 'timer-bas':554,576 'today':181 'togeth':1253 'top':1296 'total':684 'trace':1275 'track':1006 'trade':66,95,162 'trade-off':65,94,161 'trigger':423,524,541,557,579,606 'trivial':726,869 'turn':490 'twitter':55 'two':802,888 'type':424 'undergo':1126 'unit':179,451 'updat':1464 'us':125,375 'usag':224,419 'use':228,279,289,290,303,496,1081,1098,1112,1151,1224,1341,1414 'user':201,293 'vari':614 'variat':815,1137 'vast':633 'volum':78 'vs':84 'want':202,214 'warm':234,255,680,910,949,956,1087,1157 'wast':1317 'way':522 'week':57 'well':1214,1473 'whisk':1279 'wide':814,1049 'wild':4,19 'win':328,329 'win-win':327 'window':1088,1105,1174 'within':487 'work':364,1213,1472 'workload':10,25,186,193,380 'world':405 'x':1332 'yet':1120	en	Adrian Colyer
457	How to contact Google SRE by dropping a shell in Cloud SQL	{"ver":2,"uid":1,"hash":"SHA1:fad3c4bb6722f3c7bd1f18c47d82c3bdd9e3c000"}	https://offensi.com/2020/08/18/how-to-contact-google-sre-dropping-a-shell-in-cloud-sql/	2020-08-20 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24216009"> https://news.ycombinator.com/item?id=24216009 </a>	63a6aeff4b476d6e3b5461e241c917c831e1c466	\N	f	2020-08-20 07:10:00	2020-08-24 01:10:07.567603	0			'/item?id=24216009':16 'cloud':11 'comment':13 'contact':3 'drop':7 'googl':4 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24216009':14 'shell':9 'sql':12 'sre':5	zh	fanf2
313	To the future occupants of my office at the MIT Media Lab	{"ver":2,"uid":1,"hash":"SHA1:eb6019d9703e70a2de974cfce9221cb7f7c59089"}	http://www.ethanzuckerman.com/blog/2020/08/15/to-the-future-occupants-of-my-office-at-the-mit-media-lab/	2020-08-16 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24172245"> https://news.ycombinator.com/item?id=24172245 </a>	0c743e89e01905b8a01305b06c22796fdd13f437	\N	f	2020-08-16 07:10:00	2020-08-18 19:10:08.577093	0			'/item?id=24172245':16 'comment':13 'futur':3 'lab':12 'media':11 'mit':10 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24172245':14 'occup':4 'offic':7	zh	app4soft
314	Write Your Own Virtual Machine	{"ver":2,"uid":1,"hash":"SHA1:296553b2d9145292b322da3b37d60f36f3a63b06"}	https://justinmeiners.github.io/lc3-vm/	2020-08-16 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24166137"> https://news.ycombinator.com/item?id=24166137 </a>	af1e096842d028cb74616798dc62e888d5b126dd	\N	f	2020-08-16 07:10:00	2020-08-18 13:10:09.981661	0			'/item?id=24166137':9 'comment':6 'machin':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24166137':7 'virtual':4 'write':1	zh	ChankeyPathak
718	Safari adopts the Chrome/Firefox extension model	{"ver":2,"uid":1,"hash":"SHA1:f977b625058c1e199cac8d3469b21629d155ae62"}	https://developer.apple.com/news/?id=kuswih5l	2020-08-28 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24300548"> https://news.ycombinator.com/item?id=24300548 </a>	3c04ddee898a1f70e9233659f7674f3567c049b3	\N	f	2020-08-28 06:10:00	2020-08-31 18:10:10.943171	0			'/item?id=24300548':10 'adopt':2 'chrome/firefox':4 'comment':7 'extens':5 'model':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24300548':8 'safari':1	zh	soheilpro
676	细说 firewalld 和 iptables	{"ver":2,"uid":1,"hash":"SHA1:8b3356b1c9d738ce3abd1016c17e63906e15479e"}	https://toutiao.io/k/12uihi7	2020-08-27 04:10:10	细说 firewalld 和 iptables	0d83e8a9d248ad8bc053467ddcd43a62f1056fc7	\N	f	2020-08-27 04:10:00	2020-08-27 22:10:10.091577	0			'firewalld':2,6 'iptables':4,8 '和':3,7 '细说':1,5	zh	
315	Why the Mauritius oil spill is so serious	{"ver":2,"uid":1,"hash":"SHA1:682bf3e39d71665d776a571f51fe1fe5ee3ebe10"}	https://www.bbc.com/news/world-africa-53754751	2020-08-16 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24149114"> https://news.ycombinator.com/item?id=24149114 </a>	4142a85ddc6242c54649bc1bcbcbcb0d3a604f83	\N	f	2020-08-16 07:10:00	2020-08-16 07:10:08.634476	0			'/item?id=24149114':12 'comment':9 'mauritius':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24149114':10 'oil':4 'serious':8 'spill':5	zh	irontinkerer
853	Ask HN: Who is hiring? (September 2020)	{"ver":2,"uid":1,"hash":"SHA1:a339d04abad71e63eec14be980814cc1777f98f8"}	https://news.ycombinator.com/item?id=24342498	2020-09-02 03:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24342498"> https://news.ycombinator.com/item?id=24342498 </a>	cb71656903c0043b5ea327a0bec1ef07ed3c2b93	\N	f	2020-09-02 03:10:00	2020-09-04 19:10:09.014232	0			'/item?id=24342498':11 '2020':7 'ask':1 'comment':8 'hire':5 'hn':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24342498':9 'septemb':6	zh	whoishiring
675	玩转 Prometheus（六）：实现自定义的 COLLECTOR	{"ver":2,"uid":1,"hash":"SHA1:807c4aa63cc846726f625a6ef3b8f60a7944d184"}	https://toutiao.io/k/uykz6vk	2020-08-27 04:10:10	玩转 Prometheus（六）：实现自定义的 COLLECTOR	e8ee60a790ec4958ae58a193dfaf7210e51b3138	\N	f	2020-08-27 04:10:00	2020-08-27 22:10:10.093751	0			'collector':5,10 'prometheus':2,7 '六':3,8 '实现自定义的':4,9 '玩转':1,6	zh	
677	[译] 被低估的 CSS 滤镜：drop-shadow	{"ver":2,"uid":1,"hash":"SHA1:fa38846683722e6a1ddaa371bed61241ccd6090d"}	https://toutiao.io/k/3dhwy38	2020-08-27 04:10:10	[译] 被低估的 CSS 滤镜：drop-shadow	2c71c20be5c6dfd78bf5ee3baa0e1e30e2ccc0bf	\N	f	2020-08-27 04:10:00	2020-08-27 22:10:10.095641	0			'css':3,10 'drop':6,13 'drop-shadow':5,12 'shadow':7,14 '滤镜':4,11 '被低估的':2,9 '译':1,8	zh	
678	.NET Core + Kubernetes：Helm	{"ver":2,"uid":1,"hash":"SHA1:3f038738d1c32b50a41e8337de8a4f9bb117151c"}	https://toutiao.io/k/korprjv	2020-08-27 04:10:10	.NET Core + Kubernetes：Helm	8002a2c8cd9093a00119215e3e7006f4511c6881	\N	f	2020-08-27 04:10:00	2020-08-27 22:10:10.097748	0			'core':2,6 'helm':4,8 'kubernetes':3,7 'net':1,5	zh	
855	软件产品创新与宇宙奇点大爆炸	{"ver":2,"uid":1,"hash":"SHA1:a04ceb336fa9ec7cd68398b5fd7d3ac086e96a28"}	https://toutiao.io/k/geoff5q	2020-09-02 03:10:12	软件产品创新与宇宙奇点大爆炸	84bec734aca205ed6d08cc1c636ba4b3a7496a73	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.920903	0			'软件产品创新与宇宙奇点大爆炸':1,2	zh	
857	Python 的 GIL	{"ver":2,"uid":1,"hash":"SHA1:d62a7e86387f0010936007997217570c0bc938a4"}	https://toutiao.io/k/vcchwk0	2020-09-02 03:10:12	Python 的 GIL	7cc96fe043026e0b0d42babaf8cbf6757d7c78e6	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.925113	0			'gil':3,6 'python':1,4 '的':2,5	zh	
858	PHP mt_rand 伪随机数安全探讨	{"ver":2,"uid":1,"hash":"SHA1:83ec20864003489d45923059525e44c3c870b417"}	https://toutiao.io/k/8p3kr8n	2020-09-02 03:10:12	PHP mt_rand 伪随机数安全探讨	83977d01528db21db3e379bbaff3d9354549f139	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.929394	0			'mt':2,6 'php':1,5 'rand':3,7 '伪随机数安全探讨':4,8	zh	
854	30 个网站产品落地页免费模板	{"ver":2,"uid":1,"hash":"SHA1:2d20eaee999ef0cffca232246da36093fd276be6"}	https://toutiao.io/k/qrs55xl	2020-09-02 03:10:12	30 个网站产品落地页免费模板	7e450702fc2c616c643354e0e4c61b5c47b8b0bd	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.900561	0			'30':1,3 '个网站产品落地页免费模板':2,4	zh	
856	强大精简的爬虫框架 Colly，能否取代 Scrapy？	{"ver":2,"uid":1,"hash":"SHA1:e320c4a3ee50aecde126a2aecc43e9bf79285f9d"}	https://toutiao.io/k/jjnj85i	2020-09-02 03:10:12	强大精简的爬虫框架 Colly，能否取代 Scrapy？	696954f1182789c784772e8de46e17bee8852535	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.910106	0			'colly':2,6 'scrapy':4,8 '强大精简的爬虫框架':1,5 '能否取代':3,7	zh	
679	The potentially revolutionary Celera 500L aircraft	{"ver":2,"uid":1,"hash":"SHA1:7568a35691c44238d3e910d06a16e359aefffd4b"}	https://www.thedrive.com/the-war-zone/36016/the-potentially-revolutionary-celera-500l-officially-breaks-cover	2020-08-27 10:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24288821"> https://news.ycombinator.com/item?id=24288821 </a>	469966394666e9460869e43ae51afc00a484e9e5	\N	f	2020-08-27 10:10:00	2020-08-30 04:10:10.033379	0			'/item?id=24288821':10 '500l':5 'aircraft':6 'celera':4 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24288821':8 'potenti':2 'revolutionari':3	zh	tomohawk
255	[推荐] Spring Cloud 应用在 Kubernetes 上的最佳实践：线上发布（可灰度）	{"ver":2,"uid":1,"hash":"SHA1:ecd82e0c759f27037b156c3d77bc2c9b38b627d6"}	https://toutiao.io/k/h8luia3	2020-08-14 06:10:09	[推荐] Spring Cloud 应用在 Kubernetes 上的最佳实践：线上发布（可灰度）	e90510b2d288a7a99ffacaedab5f64adad9f4764	\N	f	2020-08-14 06:10:00	2020-08-16 16:10:12.90061	0			'cloud':3,11 'kubernetes':5,13 'spring':2,10 '上的最佳实践':6,14 '可灰度':8,16 '应用在':4,12 '推荐':1,9 '线上发布':7,15	zh	
508	Leaked S-1 screenshots show Palantir losing $579M in 2019	{"ver":2,"uid":1,"hash":"SHA1:9403995c5c500700c074c326a90d6841ff1a8f61"}	https://techcrunch.com/2020/08/21/leaked-s-1-screenshots-show-palantir-losing-579m-in-2019/	2020-08-22 00:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24235654"> https://news.ycombinator.com/item?id=24235654 </a>	e9028acedd87ed1f45c3fb97afe08952aed9899c	\N	f	2020-08-22 00:10:00	2020-08-24 20:10:08.6173	0			'-1':3 '/item?id=24235654':14 '2019':10 '579m':8 'comment':11 'leak':1 'lose':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24235654':12 'palantir':6 'screenshot':4 'show':5	zh	rvz
719	A Short Guide to Minimal Web Development (2018)	{"ver":2,"uid":1,"hash":"SHA1:1fe30e1d26284ab02436c7d2c787675ed66788d4"}	https://meiert.com/en/blog/minimal-web-development/	2020-08-28 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24294171"> https://news.ycombinator.com/item?id=24294171 </a>	a4c5bda9d96b1959ef0dc4dc4412e3a00f090aaa	\N	f	2020-08-28 06:10:00	2020-08-30 10:10:09.707917	0			'/item?id=24294171':12 '2018':8 'comment':9 'develop':7 'guid':3 'minim':5 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24294171':10 'short':2 'web':6	zh	uberswe
859	RECSYS 系列 |  浅谈学术界和工业界的 10 种深度推荐系统技术	{"ver":2,"uid":1,"hash":"SHA1:6518dd22d947c22a3f327363bd90d07613299ef6"}	https://toutiao.io/k/63zxa6x	2020-09-02 03:10:12	RECSYS 系列 |  浅谈学术界和工业界的 10 种深度推荐系统技术	5ec0fe7f85f634789554767a3a41aaa16b5f3e6e	\N	f	2020-09-02 03:10:00	2020-09-03 00:10:09.92719	0			'10':4,9 'recsys':1,6 '浅谈学术界和工业界的':3,8 '种深度推荐系统技术':5,10 '系列':2,7	zh	
744	Ham radio is not dying, it's evolving	{"ver":2,"uid":1,"hash":"SHA1:fcdc0c2c6a240486fc4498becde359045d2a5be2"}	http://k0lwc.com/ham-radio-is-dying-no-its-not-its-evolving/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24303952"> https://news.ycombinator.com/item?id=24303952 </a>	33fa67733d7fc51ddd965bf97fe78aec7a9bfdc9	\N	f	2020-08-29 06:10:00	2020-08-31 18:10:10.964894	0			'/item?id=24303952':12 'comment':9 'die':5 'evolv':8 'ham':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24303952':10 'radio':2	zh	lightlyused
657	MixedName – Bilingual baby name finder	{"ver":2,"uid":1,"hash":"SHA1:b3ffcc4b257e81bbb396be8b217f6e6b80e16a46"}	https://mixedname.com/	2020-08-27 00:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24286065"> https://news.ycombinator.com/item?id=24286065 </a>	f082f1b7acb82d5a0f450e6a74bb95ed6dd69662	\N	f	2020-08-27 00:10:00	2020-08-30 04:10:10.029313	0			'/item?id=24286065':9 'babi':3 'bilingu':2 'comment':6 'finder':5 'mixednam':1 'name':4 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24286065':7	zh	capableweb
743	Powell’s says it won’t sell books on Amazon anymore	{"ver":2,"uid":1,"hash":"SHA1:958ea991c83f71546c37df0b71954f5b087beaff"}	https://www.oregonlive.com/silicon-forest/2020/08/powells-says-it-wont-sell-books-on-amazon-anymore-we-must-take-a-stand.html	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24301940"> https://news.ycombinator.com/item?id=24301940 </a>	e56a13f0689bb9f062e1dd967e0b13e3c14eae48	\N	f	2020-08-29 06:10:00	2020-08-31 18:10:10.966881	0			'/item?id=24301940':15 'amazon':10 'anymor':11 'book':8 'comment':12 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24301940':13 'powel':1 'say':3 'sell':7 'won':5	zh	gscott
387	Generics Part 02: Underlying Types	{"ver":2,"uid":1,"hash":"SHA1:a18cb505d271b570efdd7138205f59e03c31d25c"}	https://www.ardanlabs.com/blog/2020/08/generics-02-underlying-types.html	2020-08-18 00:00:00	Changes The draft is a living document which means these posts will need to change over time. This section documents when changes have taken place to this post.\n21/08/20 : Moving forward with the generics design draft\nSeries Index Generics Part 01: Basic Syntax\nGenerics Part 02: Underlying Types\nIntroduction In the previous post, I showed you how to write a generic function in Go using the proposed syntax from the generics draft document.	768eb62317d2837cb170eae891e8fef0dbce8879	\N	f	2020-08-18 20:10:00	2020-09-10 05:10:15.377483	0			'01':46 '02':3,51 '21/08/20':34 'basic':47 'chang':6,20,27 'design':40 'document':12,25,78 'draft':8,41,77 'forward':36 'function':67 'generic':1,39,44,49,66,76 'go':69 'index':43 'introduct':54 'live':11 'mean':14 'move':35 'need':18 'part':2,45,50 'place':30 'post':16,33,58 'previous':57 'propos':72 'section':24 'seri':42 'show':60 'syntax':48,73 'taken':29 'time':22 'type':5,53 'under':4,52 'use':70 'write':64	en	
242	Thread Pooling in Go Programming	{"ver":2,"uid":1,"hash":"SHA1:0e09806375393f1670e436d32b3da33338b950f8"}	https://www.ardanlabs.com/blog/2013/05/thread-pooling-in-go-programming.html	2013-05-31 00:00:00	After working in Go for some time now, I learned how to use an unbuffered channel to build a pool of goroutines. I like this implementation better than what is implemented in this post. &nbsp;That being said, this post still has value in what it describes.\nhttps://github.com/goinggo/work\nIntroduction\nIn my world of server development thread pooling has been the key to building robust code on the Microsoft stack.	64ee3894914b80ef87d0b9bb38664876be51d2f0	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.623439	0			'/goinggo/work':54 'better':32 'build':23,69 'channel':21 'code':71 'describ':51 'develop':61 'github.com':53 'github.com/goinggo/work':52 'go':4,9 'goroutin':27 'implement':31,36 'introduct':55 'key':67 'learn':15 'like':29 'microsoft':74 'pool':2,25,63 'post':39,44 'program':5 'robust':70 'said':42 'server':60 'stack':75 'still':45 'thread':1,62 'time':12 'unbuff':20 'use':18 'valu':47 'work':7 'world':58	en	
256	[推荐] Java 线程池深度揭秘	{"ver":2,"uid":1,"hash":"SHA1:585aac37a566a2f64f64ada3e7cd09337199fe82"}	https://toutiao.io/k/prh2qvl	2020-08-14 06:10:09	[推荐] Java 线程池深度揭秘	ecdc4ab864ae7a39db39853a9851c4aa192bc4b7	\N	f	2020-08-14 06:10:00	2020-08-21 15:10:08.38356	0			'java':2,5 '推荐':1,4 '线程池深度揭秘':3,6	zh	
746	Show HN: Muse – Tool for Thought on iPad	{"ver":2,"uid":1,"hash":"SHA1:b4a54cbed795872365612b76dc6dc9c7ec274951"}	https://launch-preview.museapp.com/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24294397"> https://news.ycombinator.com/item?id=24294397 </a>	30f743b05a540fdc697dbf5f61eaa15285494d4a	\N	f	2020-08-29 06:10:00	2020-08-30 14:10:10.475132	0			'/item?id=24294397':12 'comment':9 'hn':2 'ipad':8 'muse':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24294397':10 'show':1 'thought':6 'tool':4	zh	adamwiggins
297	Fungus at Chernobyl absorbs nuclear radiation via radiosynthesis	{"ver":2,"uid":1,"hash":"SHA1:f1b43237a76cd74bd07708e5110eaddda3f0aa5c"}	https://www.technologynetworks.com/applied-sciences/videos/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464	2020-08-16 22:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24166994"> https://news.ycombinator.com/item?id=24166994 </a>	0e767fa82080335668f35d91705cb95ea5caf690	\N	f	2020-08-15 19:10:00	2020-08-18 19:10:08.614984	0			'/item?id=24166994':12 'absorb':4 'chernobyl':3 'comment':9 'fungus':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24166994':10 'nuclear':5 'radiat':6 'radiosynthesi':8 'via':7	zh	karimford
745	One Year with ThinkPad and Linux (From MacBook Pro)	{"ver":2,"uid":1,"hash":"SHA1:5f969faefb74c5aa93e459ccdb6c0577c935139c"}	https://drikerf.com/one-year-with-thinkpad-and-linux-from-macbook-pro/	2020-08-29 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24303938"> https://news.ycombinator.com/item?id=24303938 </a>	d14ed48774258677ab4b01c45cf244ecf0b3309c	\N	f	2020-08-29 06:10:00	2020-08-30 16:10:09.521294	0			'/item?id=24303938':13 'comment':10 'linux':6 'macbook':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24303938':11 'one':1 'pro':9 'thinkpad':4 'year':2	zh	drikerf
8	Building an elastic query engine on disaggregated storage	{"ver":2,"uid":1,"hash":"SHA1:abdc749c83a8c0444ea80b407ee21f378209a17b"}	https://blog.acolyer.org/2020/03/09/snowflake/	2020-03-09 06:00:20	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/system/files/nsdi20-paper-vuppalapati.pdf">Building an elastic query engine on disaggregated storage</a>, Vuppalapati, NSDI&#8217;20</p>\n<p>This paper describes the design decisions behind the <a href="https://www.snowflake.com/">Snowflake</a> cloud-based data warehouse. As the saying goes, &#8216;all snowflakes are special&#8217; &#8211; but what is it exactly that&#8217;s special about this one?</p>\n<p>When I think about cloud-native architectures, I think about <em>disaggregation</em> (enabling each resource type to scale independently), <em>fine-grained units of resource allocation</em> (enabling rapid response to changing workload demands, i.e. elasticity), and <em>isolation</em> (keeping tenants apart). Through a study of customer workloads it is revealed that Snowflake scores well on these fronts at a high level, but once you zoom in there are challenges remaining.</p>\n<blockquote>\n<p>This paper presents Snowflake design and implementation along with a discussion on how recent changes in cloud infrastructure (emerging hardware, fine-grained billing, etc.) have altered the many assumptions that guided the design and optimization of the Snowflake system.</p>\n</blockquote>\n<h3>From shared-nothing to disaggregation</h3>\n<p>Traditional data warehouse systems are largely based on <em>shared-nothing</em> designs: persistent data is partitioned across a set of nodes, each responsible for its local data. Analysed from the perspective of cloud-native design this presents a number of issues:</p>\n<ul>\n<li>CPU, memory, storage, and bandwidth resources are all aggregated at each node, and can&#8217;t be scaled independently, making it hard to fit a workload efficiently across multiple dimensions.</li>\n<li>The unit of resource allocation is coarse-grained (a node) and the static partitioning makes elasticity difficult.</li>\n<li>An increasingly large fraction of data in modern workloads comes from less predictable and highly variable sources</li>\n</ul>\n<blockquote>\n<p>For such workloads, shared-nothing architectures beget high cost, inflexibility, poor performance, and inefficiency, which hurts production applications and cluster deployments.</p>\n</blockquote>\n<p>Snowflake is a data warehouse designed to overcome these limitations, and the fundamental mechanism by which it achieves this is the decoupling (disaggregation) of compute and storage. Customer data is persisted in S3 (or the equivalent services when running on Azure or GCP), and compute is handled in EC2 instances. If all data was read from S3 every time, performance would suffer, so of course Snowflake has a caching layer &#8211; a distributed ephemeral storage service shared by all the nodes in a warehouse. The caching use case may be the most familiar, but in fact it&#8217;s not the primary purpose of the ephemeral storage service. The primary purpose is to handle the (potentially large volumes of) intermediate data that is generated by query operators (e.g. joins) during query processing. Tenant isolation is achieved by provisioning a separate virtual warehouse (VW) for each tenant.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/snowflake-fig-1.jpeg?w=480" alt=""></p>\n<h3>Workload characteristics</h3>\n<p>The design of Snowflake is influenced by the characteristics of the workloads it needs to support. The paper is based on data collected for ~70 million queries executed over a period of 14 days.</p>\n<ul>\n<li>About 28% of queries are read-only, with the amount of data being read varying over 9 orders of magnitude. Query volume spikes during working hours.</li>\n<li>About 13% of queries are write-only, with the amount of data being written varying over 8 orders of magnitude.</li>\n<li>The remainder are read-write queries, with a read-write ratio varying over multiple orders of magnitude</li>\n</ul>\n<p>The queries also require varying amounts of intermediate data to be processed during their execution. Some queries can exchange hundreds of gigabytes or even terabytes of intermediate data. Predicting the volume of intermediate data generated by a query is &quot;hard, or even impossible&quot; for most queries. Intermediate data sizes vary over multiple orders of magnitude across queries, and have little or no correlation with the amount of persistent data read or the expected execution time of the query.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/snowflake-fig-3.jpeg?w=640" alt=""></p>\n<h3>Disaggregation (or not)</h3>\n<p>So far we&#8217;ve seen that the persistent storage and compute layers are disaggregated in Snowflake: able to be scaled independently, and with all persistent storage accessible from any node. But the ephemeral storage service for intermediate data is <em>not</em> based on S3. It&#8217;s a three-tier with in-memory data on a node spilling to local SSDs when needed, which in turn spill over to S3 if they are exhausted. The main two tiers of this storage system therefore, are not disaggregated and are tied to the compute nodes. When not required for intermediate data, the same ephemeral storage is used as a write-through cache for frequently accessed persistent data. A consistent hashing scheme maps data to nodes.</p>\n<p>Ideally intermediate data would fit entirely in memory, or at least in SSDs, without spilling to S3. Given the coupling of compute, memory, and SSDs this proves challenging to provision for. As we&#8217;ve saw earlier, the volume of intermediate data can vary across orders of magnitude, and predicting how much will be generated is difficult.</p>\n<p>The first of these challenges could be addressed by decoupling compute and ephemeral storage (future work). Since prediction is difficult, fine-grained elasticity of the ephemeral storage layer would also be required.</p>\n<p>The amount of ephemeral storage available for caching is much smaller than a typical customer&#8217;s overall persistent data volume &#8211; the cache can accommodate just 0.1% of the persistent data on average. Nevertheless, access patterns mean that hit rates of close to 80% for read-only queries and 60% for read-write queries can be achieved.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/snowflake-fig-5.jpeg?w=640" alt=""></p>\n<blockquote>\n<p>Since end-to-end query performance depends on both cache hit rate for persistent data files and I/O throughput for intermediate data, it is important to optimize how the ephemeral storage system splits capacity between the two. Although we currently use the simple policy of always prioritizing intermediate data, it may not be the optimal policy with respect to end-to-end performance objectives.</p>\n</blockquote>\n<h3>Elasticity</h3>\n<p>Persistent storage elasticity is provided by the underlying stores (e.g. S3 on AWS). A virtual warehouse comprises a set of compute nodes, and compute elasticity is achieved by adding or removing nodes on an on-demand basis. By using a pre-warmed pool of nodes, compute elasticity can be provided at a granularity of tens of seconds. Given that Snowflake uses consistent hashing (with work stealing) to assign tasks to nodes where the persistent data they need to access resides, adding or removing nodes can require large amounts of data to be reshuffled. Snowflake does this lazily: after a reconfiguration consistent hashing may send a task to the new home node for a partition, which won&#8217;t have that data yet. At this point the data will be read from persistent storage and cached. Eventually the data in the old home node will be evicted from the cache there too.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/snowflake-fig-7.jpeg?w=480" alt=""></p>\n<p>Warehouse scaling is currently fairly coarse-grained, and requires customers to request resizing. Inter-query arrivals times vary much more frequently than customers resize their warehouses. More than 80% of customers don&#8217;t request resizing for their warehouses at all. Ideally Snowflake would support auto-scaling both between queries (work is in progress on this) and also during execution of an individual query (resource consumption can vary significantly in a query&#8217;s lifetime).</p>\n<p>Going further, Snowflake would like to explore serverless platforms for their auto-scaling, high elasticity, and fine-grained billing.</p>\n<blockquote>\n<p>&#8230; The key barrier for Snowflake to transition to existing serverless infrastructures is their lack of support for isolation, both in terms of security and performance.</p>\n</blockquote>\n<p>The <a href="https://blog.acolyer.org/2020/03/02/firecracker/">Firecracker paper</a> suggests to me this doesn&#8217;t have to be the case, but it would certainly require a disaggregated ephemeral storage solution which seems the bigger challenge to me.</p>\n<h3>Isolation</h3>\n<p>Tenant isolation in Snowdflake is at the virtual warehouse level (every customer gets their own VW). VWs achieve &quot;<em>fairly good, but not ideal, average CPU utilization; however other resources are usually underutilized on average</em>&quot;.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/snowflake-fig-10.jpeg?w=640" alt=""></p>\n<blockquote>\n<p>While we were aware of this performance isolation versus utilization tradeoff when we designed Snowflake, recent trends are pushing us to revisit this design choice. Specifically, maintaining a pool of pre-warmed instances was cost-efficient when infrastructure providers used to charge at an hourly granularity; however, recent moves to per-second pricing by all major cloud infrastructure providers has raised interesting challenges.</p>\n</blockquote>\n<p>Snowflake would like to reduce their operational costs, and customers would also like finer-grained pricing. &quot;<em>With per-second billing, we cannot charge unused cycles on pre-warmed nodes to any particular customer</em>&quot;. To cross this bridge Snowflake will need to rethink the isolation model, multiplexing customer demands across a set of shared resources. Of course, this has to be done whilst retaining strong isolation properties. The two key resources that need to be isolated are compute and ephemeral storage. Compute isolation in a data center context has been well studied, memory and storage isolation less so.</p>\n<p>For ephemeral storage the challenge is fairly sharing cache across tenants, and being able to scale to meet the demands of one tenant without impacting others (e.g. the lazy consistent hashing scheme as currently employed would cause multiple tenants to see cache misses, not just the one triggering the resize). [FairRide][FairRide] is cited as one potentially relevant piece of prior work here.</p>\n<p>The memory issue is both important (memory utilisation in VWs is currently low, and DRAM is expensive) and difficult to address. It requires both a disaggregated memory solution for independent scaling, and an efficient mechanism to share that disaggregated memory across multiple tenants.</p>\n<h3>The scorecard</h3>\n<blockquote>\n<p>&#8230;Snowflake achieves compute and storage elasticity, as well as high-performance in a multi-tenancy setting. As Snowflake has grown to serve thousands of customers executing millions of queries on petabytes of data every day, we consider ourselves at least partially successful. However, &#8230; our study highlights some of the shortcomings of our current design and implementation and highlights new research challenges that may be of interest to the broader systems and networking communities.</p>\n</blockquote>\n</div>\n	a514270589926cd3ef8d599f8f8921da53af1e9d	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.124349	1	https://blog.acolyer.org/2020/03/09/snowflake/#comments		'0.1':862 '13':504 '14':474 '20':19 '28':477 '60':886 '70':466 '8':520 '80':879,1144 '9':493 'abl':640,1481 'access':650,737,870,1042 'accommod':860 'achiev':313,429,894,988,1285,1577 'across':184,236,598,791,1419,1477,1571 'ad':990,1044 'address':811,1551 'aggreg':218 'alloc':78,243 'along':129 'also':545,834,1173,1379 'alter':148 'although':933 'alway':941 'amount':486,513,548,608,838,1051 'analys':195 'apart':92 'applic':292 'architectur':60,280 'arriv':1131 'assign':1031 'assumpt':151 'auto':1161,1202 'auto-sc':1160,1201 'avail':842 'averag':868,1291,1301 'aw':974 'awar':1305 'azur':336 'bandwidth':214 'barrier':1213 'base':31,174,461,664 'basi':999 'beget':281 'behind':26 'bigger':1263 'bill':145,1210,1389 'bridg':1407 'broader':1646 'build':1,9 'cach':364,380,734,844,858,905,1097,1111,1476,1509 'cannot':1391 'capac':929 'case':382,1249 'caus':1504 'center':1456 'certain':1253 'challeng':120,775,808,1264,1367,1472,1638 'chang':83,136 'characterist':441,450 'charg':1345,1392 'choic':1326 'cite':1521 'close':877 'cloud':30,58,138,201,1361 'cloud-bas':29 'cloud-nat':57,200 'cluster':294 'coars':246,1120 'coarse-grain':245,1119 'collect':464 'come':266 'communiti':1650 'compris':978 'comput':320,340,634,715,769,814,982,985,1009,1447,1451,1578 'consid':1614 'consist':741,1025,1064,1497 'consumpt':1181 'context':1457 'correl':605 'cost':283,1338,1375 'cost-effici':1337 'could':809 'coupl':767 'cours':360,1426 'cpu':210,1292 'cross':1405 'current':935,1117,1501,1542,1630 'custom':97,323,851,1124,1138,1146,1279,1377,1403,1417,1602 'cycl':1394 'data':32,169,181,194,262,299,324,348,414,463,488,515,551,570,576,590,611,661,677,722,739,745,750,788,855,866,910,917,944,1038,1053,1083,1089,1100,1455,1610 'day':475,1612 'decis':25 'decoupl':317,813 'demand':85,998,1418,1487 'depend':902 'deploy':295 'describ':22 'design':24,126,155,179,203,301,443,1315,1325,1631 'difficult':256,803,823,1549 'dimens':238 'disaggreg':7,15,64,167,318,621,637,709,1256,1556,1569 'discuss':132 'distribut':367 'doesn':1243 'done':1431 'dram':1545 'e.g':421,971,1494 'earlier':783 'ec2':344 'effici':235,1339,1564 'elast':3,11,87,255,827,961,964,986,1010,1205,1581 'emerg':140 'employ':1502 'enabl':65,79 'end':897,899,956,958 'end-to-end':896,955 'engin':5,13 'entir':753 'ephemer':368,399,656,725,816,830,840,925,1257,1449,1469 'equival':331 'etc':146 'even':566,584 'eventu':1098 'everi':353,1278,1611 'evict':1108 'exact':46 'exchang':561 'execut':469,557,616,1175,1603 'exhaust':697 'exist':1219 'expect':615 'expens':1547 'explor':1196 'fact':390 'fair':1118,1286,1474 'fairrid':1518,1519 'familiar':387 'far':625 'file':911 'fine':73,143,825,1208 'fine-grain':72,142,824,1207 'finer':1382 'finer-grain':1381 'firecrack':1237 'first':805 'fit':232,752 'fraction':260 'frequent':736,1136 'front':108 'fundament':308 'futur':818 'gcp':338 'generat':417,577,801 'get':1280 'gigabyt':564 'given':765,1021 'go':1190 'goe':37 'good':1287 'grain':74,144,247,826,1121,1209,1383 'granular':1016,1349 'grown':1597 'guid':153 'handl':342,407 'hard':230,582 'hardwar':141 'hash':742,1026,1065,1498 'high':111,271,282,1204,1586 'high-perform':1585 'highlight':1623,1635 'hit':874,906 'home':1073,1104 'hour':502,1348 'howev':1294,1350,1620 'hundr':562 'hurt':290 'i.e':86 'i/o':913 'ideal':748,1156,1290 'impact':1492 'implement':128,1633 'import':920,1536 'imposs':585 'in-memori':674 'increas':258 'independ':71,227,644,1560 'individu':1178 'ineffici':288 'inflex':284 'influenc':447 'infrastructur':139,1221,1341,1362 'instanc':345,1335 'inter':1129 'inter-queri':1128 'interest':1366,1643 'intermedi':413,550,569,575,589,660,721,749,787,916,943 'isol':89,427,1228,1267,1269,1309,1414,1435,1445,1452,1465 'issu':209,1533 'join':422 'keep':90 'key':1212,1439 'lack':1224 'larg':173,259,410,1050 'layer':365,635,832 'lazi':1496 'lazili':1060 'least':758,1617 'less':268,1466 'level':112,1277 'lifetim':1189 'like':1194,1370,1380 'limit':305 'littl':602 'local':193,683 'low':1543 'magnitud':496,523,542,597,794 'main':699 'maintain':1328 'major':1360 'make':228,254 'mani':150 'map':744 'may':383,946,1066,1640 'mean':872 'mechan':309,1565 'meet':1485 'memori':211,676,755,770,1462,1532,1537,1557,1570 'million':467,1604 'miss':1510 'model':1415 'modern':264 'move':1352 'much':798,846,1134 'multi':1591 'multi-ten':1590 'multipl':237,539,594,1505,1572 'multiplex':1416 'nativ':59,202 'need':455,686,1040,1410,1442 'network':1649 'nevertheless':869 'new':1072,1636 'node':188,221,249,375,653,680,716,747,983,993,1008,1034,1047,1074,1105,1399 'noth':165,178,279 'nsdi':18 'number':207 'object':960 'old':1103 'on-demand':996 'one':52,1489,1514,1523 'oper':420,1374 'optim':157,922,950 'order':494,521,540,595,792 'other':1493 'overal':853 'overcom':303 'paper':21,123,459,1238 'partial':1618 'particular':1402 'partit':183,253,1077 'pattern':871 'per':1355,1387 'per-second':1354,1386 'perform':286,355,901,959,1235,1308,1587 'period':472 'persist':180,326,610,631,648,738,854,865,909,962,1037,1094 'perspect':198 'petabyt':1608 'piec':1526 'platform':1198 'point':1087 'polici':939,951 'pool':1006,1330 'poor':285 'potenti':409,1524 'pre':1004,1333,1397 'pre-warm':1003,1332,1396 'predict':269,571,796,821 'present':124,205 'price':1357,1384 'primari':395,403 'prior':1528 'priorit':942 'process':425,554 'product':291 'progress':1169 'properti':1436 'prove':774 'provid':966,1013,1342,1363 'provis':431,777 'purpos':396,404 'push':1320 'queri':4,12,419,424,468,479,497,506,530,544,559,580,588,599,620,884,891,900,1130,1165,1179,1187,1606 'rais':1365 'rapid':80 'rate':875,907 'ratio':536 'read':350,482,490,528,534,612,882,889,1092 'read-on':481,881 'read-writ':527,533,888 'recent':135,1317,1351 'reconfigur':1063 'reduc':1372 'relev':1525 'remain':121 'remaind':525 'remov':992,1046 'request':1126,1149 'requir':546,719,836,1049,1123,1254,1553 'research':1637 'reshuffl':1056 'resid':1043 'resiz':1127,1139,1150,1517 'resourc':67,77,215,242,1180,1296,1424,1440 'respect':953 'respons':81,190 'retain':1433 'rethink':1412 'reveal':101 'revisit':1323 'run':334 's3':328,352,666,693,764,972 'saw':782 'say':36 'scale':70,226,643,1115,1162,1203,1483,1561 'scheme':743,1499 'score':104 'scorecard':1575 'second':1020,1356,1388 'secur':1233 'see':1508 'seem':1261 'seen':628 'send':1067 'separ':433 'serv':1599 'serverless':1197,1220 'servic':332,370,401,658 'set':186,980,1421,1593 'share':164,177,278,371,1423,1475,1567 'shared-noth':163,176,277 'shortcom':1627 'signific':1184 'simpl':938 'sinc':820,895 'size':591 'smaller':847 'snowdflak':1271 'snowflak':28,39,103,125,160,296,361,445,639,1023,1057,1157,1192,1215,1316,1368,1408,1576,1595 'solut':1259,1558 'sourc':273 'special':41,49 'specif':1327 'spike':499 'spill':681,690,762 'split':928 'ssds':684,760,772 'static':252 'steal':1029 'storag':8,16,212,322,369,400,632,649,657,704,726,817,831,841,926,963,1095,1258,1450,1464,1470,1580 'store':970 'strong':1434 'studi':95,1461,1622 'success':1619 'suffer':357 'suggest':1239 'support':457,1159,1226 'system':161,171,705,927,1647 'task':1032,1069 'ten':1018 'tenanc':1592 'tenant':91,426,439,1268,1478,1490,1506,1573 'terabyt':567 'term':1231 'therefor':706 'think':55,62 'thousand':1600 'three':671 'three-tier':670 'throughput':914 'tie':712 'tier':672,701 'time':354,617,1132 'tradeoff':1312 'tradit':168 'transit':1217 'trend':1318 'trigger':1515 'turn':689 'two':700,932,1438 'type':68 'typic':850 'under':969 'underutil':1299 'unit':75,240 'unus':1393 'us':1321 'use':381,728,936,1001,1024,1343 'usual':1298 'util':1293,1311 'utilis':1538 'vari':491,518,537,547,592,790,1133,1183 'variabl':272 've':627,781 'versus':1310 'virtual':434,976,1275 'volum':411,498,573,785,856 'vuppalapati':17 'vw':436,1283 'vws':1284,1540 'warehous':33,170,300,378,435,977,1114,1141,1153,1276 'warm':1005,1334,1398 'well':105,1460,1583 'whilst':1432 'without':761,1491 'won':1079 'work':501,819,1028,1166,1529 'workload':84,98,234,265,276,440,453 'would':356,751,833,1158,1193,1252,1369,1378,1503 'write':509,529,535,732,890 'write-on':508 'write-through':731 'written':517 'yet':1084 'zoom':116	en	Adrian Colyer
6	When correlation (or lack of it) can be causation	{"ver":2,"uid":1,"hash":"SHA1:c8ab588bacf06663853d303244fc1c1d94a25d45"}	https://blog.acolyer.org/2020/03/13/correlation-x-2/	2020-03-13 06:00:00	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/conference/nsdi20/presentation/mehta">Rex: preventing bugs and misconfiguration in large services using correlated change analysis</a>, Mehta et al., NSDI&#8217;20</p>\n<p>and</p>\n<p><a href="https://www.usenix.org/conference/nsdi20/presentation/zhai">Check before you change: preventing correlated failures in service updates</a>, Zhai et al., NSDI&#8217;20</p>\n<p>Today&#8217;s post is a double header. I&#8217;ve chosen two papers from NSDI&#8217;20 that are both about correlation. <em>Rex</em> is a tool widely deployed across Microsoft that checks for correlations you don&#8217;t have but probably should have: it looks at files changed in commits and warns developers if files frequently changed with them have not been changed. <em>CloudCanary</em> on the other hand is about detecting correlations you <em>do</em> have, but probably don&#8217;t want: it looks for potential causes of correlated failures across a system, and can make targeted recommendations for improving your system reliability.</p>\n<h3>Improving system reliability through correlation</h3>\n<p>&quot;If you change the <em>foo</em> setting, don&#8217;t forget that you also need to update all the clients&#8230;&quot;</p>\n<blockquote>\n<p>Large-scale services run on a foundation of very large codebases and configuration repositories. To run uninterrupted a service not only depends on correct code, but also on correct network and security configuration, and suitable deployment specification. This causes various dependencies both within and across components/sources of the service which emerge organically. When an engineer changes a certain region of code or configuration, these dependencies require them to make changes to other code or configuration regions&#8230;. Engineers, with no documentation or specification to go by, often miss making necessary changes to code or configuration files. <strong>This can delay deployment, increase security risks and, in some cases, even disrupt the service completely. Disruptions due to such correlations are surprisingly frequent</strong>.</p>\n</blockquote>\n<p>Rex is aimed at eliminating these disruptions. Widely deployed at Microsoft, including the Office 365 and Azure teams, it caught 4,926 changes over a period of 14 months, some of which could have led to severe service disruption. &quot;<em>Rex has had significant impact in avoiding bad deployments, services outages, build breaks, and buggy commits</em>.&quot;</p>\n<p>The following table highlights some examples of correlated change requirements to give a feel for the kind of things we&#8217;re talking about: everything from failing to update javascript tests through to coordinated changes of data center rack configuration files.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rex-table-1.jpeg?w=640" alt=""></p>\n<p>For developers&#8217; Rex&#8217;s advisories appear as comments on pull-requests, alerting developers to potential correlated changes that might need to be investigated before merging.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rex-fig-4.jpeg?w=480" alt=""></p>\n<p>Rex works by mining commit logs to find correlated changes (at the file level). In the first stage, called <em>change rule discovery</em> Rex uses association mining over six months of commit log data: the FP-Growth algorithm is used to find frequent item-sets (sets of files that change together very often), and then these items sets are turned into <em>change rules</em>. Take a frequent item-set <strong>F</strong>, partioned into subsets <strong>X</strong> and <strong>Y</strong>. A rule suggesting the files in <strong>Y</strong> should be changed if all the files in <strong>X</strong> are changed is added if the confidence in the rule is above a threshold. Confidence is defined as the number of times all the files in <strong>F</strong> change together, divided by the number of times all the files in <strong>X</strong> change together.</p>\n<p>The second stage refines the discovered change rules. First Rex looks at the changes introduced to files in <strong>X</strong> and creates the most specific generalisation of the differences as a regular expression (i.e., the most specific regular expression that captures all of the changes in the set). Then it guards change rules with a test that the difference is matched by the discovered regex.</p>\n<p>The models for a given repository are fine-tuned on a daily basis. The actions of developers in response to Rex&#8217;s suggestions (i.e., whether or not the PR is modified to include changes to the suggested files) is used to determine whether a suggestion was a true- or false-positive.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rex-fig-1.jpeg?w=480" alt=""></p>\n<blockquote>\n<p>Rex currently runs on 360 repositories, and its adoption is increasing rapidly&#8230; Rex has had significant impact in avoiding bad deployments, service outages, build breaks, and buggy commits.</p>\n</blockquote>\n<h3>Improving system reliability by removing correlations</h3>\n<p>Fault-graphs model all of the structural dependencies between components in a system and can be used to identify weak links &#8211; i.e. points in the graph with larger blast radii.</p>\n<blockquote>\n<p>A fault graph is a layered DAG representing the logical relationships between component faults within a given system&#8230; The root node in a fault graph represents a target service fault, which indicates the failure of the entire service. The rest of the nodes are intermediate faults, which describe how basic faults may cause larger service disruptions.</p>\n</blockquote>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/cloudcanary-fig-2.jpeg?w=520" alt=""></p>\n<p>Prior to CloudCanary, the state-of-the-art for fault graphs was <em>one-shot</em> service audits: discovering and analysing fault-graphs was too intensive a process to be used for real-time audits during operation. CloudCanary contains two key components:</p>\n<ul>\n<li><strong>SnapAudit</strong> uses an incremental auditing algorithm that identifies differential fault graphs capturing the delta between the before and after state of the service following an update. To speed up analysis, SnapAudit then turns a differential fault graph into a boolean formula and uses a a high performance MinCostSAT solver. The goal of the analysis is to extract <em>minimal risk groups</em>. A <em>risk group</em> is a set of components such that if they all failed the service will fail. A <em>minimal</em> risk group is one that ceases to be a risk group if any one component is removed from it.</li>\n</ul>\n<blockquote>\n<p>The top-k risk groups of a given fault graph G are a ranked list of minimal risk groups by size or failure probability. Extracting minimal risk groups in a fault graph is NP-hard.</p>\n</blockquote>\n<ul>\n<li><strong>DepBooster</strong> allows an operation to specify a reliability goals, and then generates a set of improvement plans to enable the system to meet that goal. Reliability goals can be specified as combination of risk group size goals (e.g., no minimal risk group should contain less than 3 items), and failure probability goals. If the specified goals are not currently satisfied by the system, then DepBooster generates improvement plans consisting of <em>move</em> and <em>add replica</em> actions.</li>\n</ul>\n<blockquote>\n<p>Our results show that SnapAudit can identify correlated failure root causes in a 1,183,360 component service within 8 minutes, 200x faster than the state-of-the-art systems, and the DepBooster can find high-quality improvement plans within minutes.</p>\n</blockquote>\n<p>The evaluation of CloudCanary includes an analysis of a &#8216;real-world update trace collected from a major service provider.&#8217; The trace contains over 300 updates ranging from software updates to microservices to changes to power sources and network switches. It makes a compelling case for the deployment of this kind of real-time analysis:</p>\n<ul>\n<li>CloudCanary found 50+ risk groups in the microservice updates, and the operator confirmed that 96% of these could lead to correlated failures.</li>\n<li>CloudCanary found 10+ risk groups in power sources. The operators confirmed that all of them could lead to correlated failures, and 30% of them had actually led to service downtime in the past.</li>\n<li>CloudCanary found 30+ network risk groups, including ToR/aggregation switches, and shared fiber. All of these were confirmed by the operators.</li>\n</ul>\n<p>The fault graphs and risk groups that CloudCanary finds are another great tool in your resilience engineering toolbox, and a great compliment to chaos engineering techniques.</p>\n</div>\n	61a632612bb0c62d28d0ed41a25bc58d8d40100f	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.120951	1	https://blog.acolyer.org/2020/03/13/correlation-x-2/#comments		'1':1046 '10':1156 '14':311 '183':1047 '20':26,42,57 '200x':1054 '3':1004 '30':1175,1189 '300':1100 '360':661,1048 '365':298 '4':304 '50':1134 '8':1052 '926':305 '96':1146 'across':69,128,209 'action':619,1032 'actual':1179 'ad':501 'add':1030 'adopt':665 'advisori':383 'aim':286 'al':24,40 'alert':391 'algorithm':442,827 'allow':959 'also':157,191 'analys':798 'analysi':21,851,875,1082,1131 'anoth':1217 'appear':384 'art':786,1062 'associ':429 'audit':795,814,826 'avoid':329,675 'azur':300 'bad':330,676 'basi':617 'basic':771 'blast':720 'boolean':861 'break':335,681 'bug':12 'buggi':337,683 'build':334,680 'call':423 'captur':579,833 'case':270,1120 'caught':303 'caus':124,203,774,1043 'causat':9 'ceas':907 'center':375 'certain':222 'chang':20,31,87,96,102,148,220,234,254,306,347,372,396,414,424,455,467,491,499,525,538,546,553,583,590,638,1109 'chao':1230 'check':28,72 'chosen':52 'client':163 'cloudcanari':103,780,817,1079,1132,1154,1187,1214 'code':189,225,237,256 'codebas':175 'collect':1090 'combin':989 'comment':386 'commit':89,338,409,435,684 'compel':1119 'complet':275 'compliment':1228 'compon':701,734,821,889,916,1049 'components/sources':210 'confid':504,512 'configur':177,197,227,239,258,377 'confirm':1144,1164,1203 'consist':1026 'contain':818,1001,1098 'coordin':371 'correct':188,193 'correl':2,19,33,62,74,111,126,145,280,346,395,413,690,1040,1152,1172 'could':316,1149,1169 'creat':560 'current':658,1016 'dag':728 'daili':616 'data':374,437 'defin':514 'delay':262 'delta':835 'depboost':958,1022,1066 'depend':186,205,229,699 'deploy':68,200,263,292,331,677,1123 'describ':769 'detect':110 'determin':646 'develop':92,380,392,621 'differ':567,597 'differenti':830,856 'discov':545,602,796 'discoveri':426 'disrupt':272,276,290,322,777 'divid':527 'document':244 'doubl':48 'downtim':1183 'due':277 'e.g':995 'elimin':288 'emerg':215 'enabl':976 'engin':219,241,1223,1231 'entir':758 'et':23,39 'evalu':1077 'even':271 'everyth':362 'exampl':344 'express':571,577 'extract':878,946 'f':475,524 'fail':364,895,899 'failur':34,127,755,944,1007,1041,1153,1173 'fals':655 'false-posit':654 'faster':1055 'fault':692,723,735,745,751,767,772,788,800,831,857,930,952,1208 'fault-graph':691,799 'feel':352 'fiber':1198 'file':86,94,259,378,417,453,486,495,522,535,556,642 'find':412,446,1068,1215 'fine':612 'fine-tun':611 'first':421,548 'follow':340,845 'foo':150 'forget':154 'formula':862 'found':1133,1155,1188 'foundat':171 'fp':440 'fp-growth':439 'frequent':95,283,447,471 'g':932 'generalis':564 'generat':969,1023 'give':350 'given':608,738,929 'go':248 'goal':872,966,982,984,994,1009,1013 'graph':693,717,724,746,789,801,832,858,931,953,1209 'great':1218,1227 'group':881,884,903,912,926,940,949,992,999,1136,1158,1192,1212 'growth':441 'guard':589 'hand':107 'hard':957 'header':49 'high':867,1070 'high-qual':1069 'highlight':342 'i.e':572,628,713 'identifi':710,829,1039 'impact':327,673 'improv':137,141,685,973,1024,1072 'includ':295,637,1080,1193 'increas':264,667 'increment':825 'indic':753 'intens':804 'intermedi':766 'introduc':554 'investig':402 'item':449,462,473,1005 'item-set':448,472 'javascript':367 'k':924 'key':820 'kind':355,1126 'lack':4 'larg':16,165,174 'large-scal':164 'larger':719,775 'layer':727 'lead':1150,1170 'led':318,1180 'less':1002 'level':418 'link':712 'list':936 'log':410,436 'logic':731 'look':84,121,550 'major':1093 'make':133,233,252,1117 'match':599 'may':773 'meet':980 'mehta':22 'merg':404 'microservic':1107,1139 'microsoft':70,294 'might':398 'mincostsat':869 'mine':408,430 'minim':879,901,938,947,997 'minut':1053,1075 'misconfigur':14 'miss':251 'model':605,694 'modifi':635 'month':312,433 'move':1028 'necessari':253 'need':158,399 'network':194,1114,1190 'node':742,764 'np':956 'np-hard':955 'nsdi':25,41,56 'number':517,530 'offic':297 'often':250,458 'one':792,905,915 'one-shot':791 'oper':816,961,1143,1163,1206 'organ':216 'outag':333,679 'paper':54 'partion':476 'past':1186 'perform':868 'period':309 'plan':974,1025,1073 'point':714 'posit':656 'post':45 'potenti':123,394 'power':1111,1160 'pr':633 'prevent':11,32 'prior':778 'probabl':80,116,945,1008 'process':806 'provid':1095 'pull':389 'pull-request':388 'qualiti':1071 'rack':376 'radii':721 'rang':1102 'rank':935 'rapid':668 're':359 'real':812,1086,1129 'real-tim':811,1128 'real-world':1085 'recommend':135 'refin':543 'regex':603 'region':223,240 'regular':570,576 'relationship':732 'reliabl':140,143,687,965,983 'remov':689,918 'replica':1031 'repositori':178,609,662 'repres':729,747 'request':390 'requir':230,348 'resili':1222 'respons':623 'rest':761 'result':1034 'rex':10,63,284,323,381,405,427,549,625,657,669 'risk':266,880,883,902,911,925,939,948,991,998,1135,1157,1191,1211 'root':741,1042 'rule':425,468,483,507,547,591 'run':168,180,659 'satisfi':1017 'scale':166 'second':541 'secur':196,265 'servic':17,36,167,183,213,274,321,332,678,750,759,776,794,844,897,1050,1094,1182 'set':151,450,451,463,474,586,887,971 'sever':320 'share':1197 'shot':793 'show':1035 'signific':326,672 'six':432 'size':942,993 'snapaudit':822,852,1037 'softwar':1104 'solver':870 'sourc':1112,1161 'specif':201,246,563,575 'specifi':963,987,1012 'speed':849 'stage':422,542 'state':783,841,1059 'state-of-the-art':782,1058 'structur':698 'subset':478 'suggest':484,627,641,649 'suitabl':199 'surpris':282 'switch':1115,1195 'system':130,139,142,686,704,739,978,1020,1063 'tabl':341 'take':469 'talk':360 'target':134,749 'team':301 'techniqu':1232 'test':368,594 'thing':357 'threshold':511 'time':519,532,813,1130 'today':43 'togeth':456,526,539 'tool':66,1219 'toolbox':1224 'top':923 'top-k':922 'tor/aggregation':1194 'trace':1089,1097 'true':652 'tune':613 'turn':465,854 'two':53,819 'uninterrupt':181 'updat':37,160,366,847,1088,1101,1105,1140 'use':18,428,444,644,708,809,823,864 'various':204 've':51 'want':119 'warn':91 'weak':711 'whether':629,647 'wide':67,291 'within':207,736,1051,1074 'work':406 'world':1087 'x':479,497,537,558 'y':481,488 'zhai':38	en	Adrian Colyer
7	Characterizing, modeling, and benchmarking RocksDB key-value workloads at Facebook	{"ver":2,"uid":1,"hash":"SHA1:e1f0a1ddd02b19fd88238f090fa65581bd41e3af"}	https://blog.acolyer.org/2020/03/11/rocks-db-at-facebook/	2020-03-11 06:15:26	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/system/files/fast20-cao_zhichao.pdf">Characterizing, modeling, and benchmarking RocksDB key-value workloads at Facebook</a>, Cao et al., FAST&#8217;20</p>\n<p>You get good at what you practice. Or in the case of key-value stores, what you benchmark. So if you want to design a system that will offer good real-world performance, it&#8217;s really useful to have benchmarks that accurately represent real-world workloads. In this paper, Facebook analyse three of their real-world RocksDB workloads and find (surprise!) that they all look quite different. More interesting, is that there are important differences between the way these real-world workloads behave, and workloads generated by the venerable YCSB benchmark.</p>\n<blockquote>\n<p>Therefore, using the benchmarking results of YCSB  as guidance for production might cause some misleading results&#8230; To address this issue, we propose a key-range based modelling and develop a benchmark that can better emulate the workloads of real-world key-value stores. This benchmark can synthetically generate more precise key-value queries that represent the reads and writes of key-value stores to the underlying storage system.</p>\n</blockquote>\n<p>The tracing, replay, and analysis tools developed for this work are released in open source as <a href="https://github.com/facebook/rocksdb/wiki/RocksDB-Trace%2C-Replay%2C-Analyzer%2C-and-Workload-Generation">part of the latest RocksDB release</a>, and the new benchmark is now part of the <a href="https://github.com/facebook/rocksdb/wiki/Benchmarking-tools">db_bench</a> benchmarking tool.</p>\n<p><strong>TL;DR</strong>: YCSB workload generation doesn&#8217;t take into account the distribution of hot key locations within the key space. That matters if your store reads data in (multi-key) blocks. Modeling the key range distribution for hot keys produces more realistic synthetic workloads.</p>\n<h3>RocksDB essentials</h3>\n<p>RocksDB is a key-value (KV) store derived from LevelDB by Facebook and optimised for SSDs. It&#8217;s used by Facebook, Alibaba, Yahoo, LinkedIn, and more. It has the usual get, put, and delete operations, as well as an <code>Iterator</code> operation for scanning a range of consecutive K-V pairs from a given start key, a <code>DeleteRange</code> operation to delete a range of keys, and a <code>Merge</code> operation for read-modify-writes. Merge stores write deltas in RocksDB, and these deltas can be stacked or combined. Getting a key requires combining all previously stored deltas using a user-provided combine function.</p>\n<p>Internally RocksDB uses a Log-Structured Merge Tree to maintain KV-pairs. <em>ColumnFamilies</em> have their own in-memory write buffer which is flushed to the file system when full and stored as a _<em>Sorted Sequence Table</em> (SST) file.  There are multiple levels of SST files, with downward merges when one level reaches its capacity limit.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-1.jpeg?w=520" alt=""></p>\n<h3>Three workloads</h3>\n<p>The paper examines three different uses of RocksDB at Facebook:</p>\n<ol>\n<li><strong>UDB</strong>, the underlying storage engine for the MySQL databases storing the social graph data. All cache read misses and all writes go through UDB servers, with SQL queries being converted into RocksDB queries. For one representative UDB server, about 10.2 billion queries were handled in a 14-day period. Gets and Puts dominate the workload.</li>\n<li><strong>ZippyDB</strong>, a distributed KV-store using RocksDB for storage nodes, used to store metadata for photos and other objects in object storage. Upper layer queries in ZippyDB are mapped directly to RocksDB. It&#8217;s a read-intensive workload handling about 420 million queries a day on a representative node.</li>\n<li><strong>UP2X</strong> is a distributed key-value store built to support counters and other statistics (e.g. user activity counts) used in AI/ML prediction and inferencing. UP2X makes heavy use of the Merge operation for updates. It handled about 111 million queries a day on a representative node, dominated by Merge.</li>\n</ol>\n<h3>Under the microscope</h3>\n<p>Given how different these use cases are, it&#8217;s not suprising that they stress RocksDB in different ways. The authors compare the workloads along the following dimensions:</p>\n<ul>\n<li>Query mix (e.g. gets vs puts vs merges vs iterators&#8230;)</li>\n<li>Query volume (qps)</li>\n<li>The sizes of keys and their values</li>\n<li>The key access frequency distribution (hot keys)</li>\n<li>The key-range distribution of hot keys</li>\n</ul>\n<p>The most interesting of these turns out to be the key-range distribution for hot keys. Let&#8217;s zip through the other dimensions first and then we can come back to that.</p>\n<h4>Query mix</h4>\n<p>Get is the most frequently used query type for UDB and ZippyDB, with Merge dominating UP2X queries (over 90%). Within the same application, the query mix can vary by column family.</p>\n<h4>Query volume</h4>\n<p>Per server, per day, an average of just over 700M queries for UDB, 420 million for ZippyDB, and 111 million for UP2X. Some column families in UDB show strong diurnal patterns, whereas the access patterns for ZippyDB and UP2X show only slight variations.</p>\n<h4>Key and value sizes</h4>\n<p>Key sizes are generally small with a narrow distribution. Value sizes have a large standard deviation, with the largest value sizes appearing in the UDB application.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-8.jpeg?w=520" alt=""></p>\n<h4>Key access frequency distribution</h4>\n<p>For UDB and ZippyDB, most keys are cold and the majority of KV-pairs are rarely updated. For UDB, many read requests for popular data will be handled by the upper cache tiers and so never hit RocksDB. Less than 3% of keys are accessed in a 24 hour period.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-3.jpeg?w=520" alt=""></p>\n<p>ZippyDB shows average key access counts of 15 get operations per day, and only 1 put or delete operation.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-5.jpeg?w=480" alt=""></p>\n<p>For UPX about 50% of the KV-pairs accessed by Get, and 25% of the KV-Pairs accessed by Merge are hot.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-6.jpeg?w=480" alt=""></p>\n<h4>The key-range distribution of hot keys</h4>\n<p>This turns out to be one of the most important factors in being able to generate synthetic YCSB workloads that mirror Facebook workloads. It matters because RocksDB reads from storage in data blocks (e.g. 16KB). So if a workload has good key locality many less reads from storage will be needed.</p>\n<blockquote>\n<p>The heat maps of the three use cases show a strong key-space locality. Hot KV-pairs are closely located in the key-space. The time series figures of Delete and SingleDelete for UDB and Merge for UP2X show strong temporal locality. For some query types, KV-pairs in some key-ranges are intensively accessed during a short period of time.</p>\n</blockquote>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-10.jpeg?w=520" alt=""></p>\n<p>ZippyDB&#8217;s hot keys are concentrated in several key ranges:</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-11.jpeg?w=480" alt=""></p>\n<p>A small range of KV-pairs are intensively called during UP2X Merge in half-an-hour:</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-13.jpeg?w=480" alt=""></p>\n<p>And UP2X is interesting here for the clear boundary between hot and cold KV-pairs for gets:</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-12.jpeg?w=480" alt=""></p>\n<h3>Better benchmarks</h3>\n<p>Armed with the detailed traces for these workloads, the key question is whether or not they can be accurately replicated with YCSB:</p>\n<blockquote>\n<p>Researchers usually consider the workloads generated by YCSB to be close to real-world workloads.</p>\n</blockquote>\n<p>YCSB lets you tune the query type ratio, KV-pair hotness distribution, and value size distribution. But it doesn&#8217;t let you control the key-range distribution of hot keys. Does that matter? The authors generated YCSB workloads to get as close as possible to the parameters of the ZippyDB workload (used as typical distributed KV-store) and measured the resulting storage I/O statistics to compare them to those from the real workloads being emulated (e.g. block reads, block cache hits, read-bytes, write-bytes).</p>\n<p>The YCSB workload showed very high read amplification (7.7x block reads, 6.2x bytes) compared to the true ZippyDB workload.</p>\n<blockquote>\n<p>This evaluation shows that, even though the overall query statistics (e.g., query number, average value size, and KV-pair access distribution) generated by YCSB are close to those of ZippyDB workloads, the RocksDB storage I/O statistics are actually quite different. <code>db_bench</code> has a similar situation. Therefore, using the benchmarking result of YCSB as guidance for production might causes some misleading results&#8230;. The main factor that causes this serious read amplification and fewer storage wries is the ignorance of the key-space locality.</p>\n</blockquote>\n<p>The obvious thing to do therefore, is to consider the key-range distribution when generating operations for a synthetic workload.  The key space is split into ranges (using the average number of KV-pairs per SST as the range size), and the average accesses per KV-pair of each key-range is calculated and fit to the distribution model with the minimal fit standard error to the real workload (e.g. Power, Exponential, Webull, Pareto, Sine). This technique is integrated into <code>db_bench</code>.  A QPS model controls the time intervals between two successive queries. When a query is generated:</p>\n<ul>\n<li>The query type is drawn from the query type probability distribution</li>\n<li>The key size and value size are determined from the fitted models for size</li>\n<li><em>A key-range is chosen based on the key-range access probabilities</em></li>\n<li>A key within the chosen range is selected based on the distribution of KV-pair access counts</li>\n</ul>\n<p>The following chart shows that the resulting workload (<code>Prefix_dist</code>) is much closer to the true statistics (normalised line) than any of the YCSB generated workloads.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/rocksdb-bench-fig-14.jpeg?w=520" alt=""></p>\n<blockquote>\n<p>In the future, we will further improve YCSB workload generation. with key-range distribution. Also, we will collect, analyze, and model the workloads in other dimensions, such as correlations between queries, the correlation between KV-pair hotness and KV-pair sizes, and the inclusion of additional statistics like query latency and cache status.</p>\n</blockquote>\n</div>\n	678eb34f44f0e389716a960ad08d2baa362164f0	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.122712	0	https://blog.acolyer.org/2020/03/11/rocks-db-at-facebook/#respond		'1':885 '10.2':493 '111':598,761 '14':500 '15':878 '16kb':956 '20':27 '24':868 '25':903 '3':861 '420':551,756 '50':893 '6.2':1227 '7.7':1223 '700m':752 '90':728 'abl':935 'access':662,776,817,865,875,899,909,1032,1256,1366,1460,1478 'account':241 'accur':71,1105 'activ':577 'actual':1274 'addit':1554 'address':141 'ai/ml':581 'al':25 'alibaba':301 'along':636 'also':1521 'amplif':1222,1307 'analys':81 'analysi':201 'analyz':1525 'appear':811 'applic':732,815 'arm':1087 'author':632,1161 'averag':748,873,1249,1351,1365 'back':705 'base':150,1454,1470 'behav':115 'bench':229,1278,1406 'benchmark':4,15,46,69,123,127,155,171,222,230,1086,1286 'better':158,1085 'billion':494 'block':263,954,1204,1206,1225 'boundari':1075 'buffer':406 'built':568 'byte':1211,1214,1229 'cach':469,852,1207,1560 'calcul':1377 'call':1058 'cao':23 'capac':440 'case':38,618,980 'caus':136,1295,1303 'character':1,12 'chart':1482 'chosen':1453,1466 'clear':1074 'close':993,1119,1168,1262 'closer':1492 'cold':827,1079 'collect':1524 'column':739,766 'columnfamili':398 'combin':367,372,382 'come':704 'compar':633,1193,1230 'concentr':1044 'consecut':326 'consid':1111,1329 'control':1148,1410 'convert':483 'correl':1535,1539 'count':578,876,1479 'counter':571 'data':258,467,845,953 'databas':462 'day':501,555,602,746,882 'db':228,1277,1405 'delet':313,340,888,1005 'deleterang':337 'delta':357,362,376 'deriv':287 'design':52 'detail':1090 'determin':1441 'develop':153,203 'deviat':805 'differ':98,106,448,615,629,1276 'dimens':639,698,1532 'direct':539 'dist':1489 'distribut':243,268,511,563,664,671,688,798,819,918,1137,1141,1153,1181,1257,1334,1382,1433,1473,1520 'diurnal':772 'doesn':237,1144 'domin':506,607,724 'downward':433 'dr':233 'drawn':1427 'e.g':575,642,955,1203,1246,1394 'emul':159,1202 'engin':458 'error':1389 'essenti':278 'et':24 'evalu':1237 'even':1240 'examin':446 'exponenti':1396 'facebook':11,22,80,291,300,453,943 'factor':932,1301 'famili':740,767 'fast':26 'fewer':1309 'figur':1003 'file':412,424,431 'find':91 'first':699 'fit':1379,1387,1444 'flush':409 'follow':638,1481 'frequenc':663,818 'frequent':714 'full':415 'function':383 'futur':1508 'general':793 'generat':118,174,236,937,1114,1162,1258,1336,1422,1504,1515 'get':29,310,368,503,643,710,879,901,1084,1166 'given':333,613 'go':475 'good':30,58,962 'graph':466 'guidanc':132,1291 'half':1064 'half-an-hour':1063 'handl':497,549,596,848 'heat':974 'heavi':587 'high':1220 'hit':857,1208 'hot':245,270,665,673,690,913,920,988,1041,1077,1136,1155,1544 'hour':869,1066 'i/o':1190,1271 'ignor':1314 'import':105,931 'improv':1512 'in-memori':402 'inclus':1552 'inferenc':584 'integr':1403 'intens':547,1031,1057 'interest':100,677,1070 'intern':384 'interv':1413 'issu':143 'iter':319,649 'k':328 'k-v':327 'key':7,18,41,148,167,178,189,246,250,262,266,271,283,335,344,370,565,656,661,666,669,674,686,691,786,790,816,825,863,874,916,921,963,985,998,1028,1042,1047,1096,1151,1156,1318,1332,1343,1374,1435,1450,1458,1463,1518 'key-rang':147,668,685,915,1027,1150,1331,1373,1449,1457,1517 'key-spac':984,997,1317 'key-valu':6,17,40,166,177,188,282,564 'kv':285,396,513,833,897,907,990,1023,1054,1081,1134,1183,1254,1355,1369,1476,1542,1547 'kv-pair':395,832,896,906,989,1022,1053,1080,1133,1253,1354,1368,1475,1541,1546 'kv-store':512,1182 'larg':803 'largest':808 'latenc':1558 'latest':216 'layer':533 'less':859,966 'let':692,1126,1146 'level':428,437 'leveldb':289 'like':1556 'limit':441 'line':1498 'linkedin':303 'local':964,987,1017,1320 'locat':247,994 'log':389 'log-structur':388 'look':96 'main':1300 'maintain':394 'major':830 'make':586 'mani':840,965 'map':538,975 'matter':253,946,1159 'measur':1186 'memori':404 'merg':347,354,391,434,591,609,647,723,911,1011,1061 'metadata':523 'microscop':612 'might':135,1294 'million':552,599,757,762 'minim':1386 'mirror':942 'mislead':138,1297 'miss':471 'mix':641,709,735 'model':2,13,151,264,1383,1409,1445,1527 'modifi':352 'much':1491 'multi':261 'multi-key':260 'multipl':427 'mysql':461 'narrow':797 'need':972 'never':856 'new':221 'node':519,559,606 'normalis':1497 'number':1248,1352 'object':528,530 'obvious':1322 'offer':57 'one':436,488,927 'open':210 'oper':314,320,338,348,592,880,889,1337 'optimis':293 'overal':1243 'pair':330,397,834,898,908,991,1024,1055,1082,1135,1255,1356,1370,1477,1543,1548 'paper':79,445 'paramet':1173 'pareto':1398 'part':213,225 'pattern':773,777 'per':743,745,881,1357,1367 'perform':62 'period':502,870,1036 'photo':525 'popular':844 'possibl':1170 'power':1395 'practic':34 'precis':176 'predict':582 'prefix':1488 'previous':374 'probabl':1432,1461 'produc':272 'product':134,1293 'propos':145 'provid':381 'put':311,505,645,886 'qps':652,1408 'queri':180,481,486,495,534,553,600,640,650,708,716,726,734,741,753,1020,1130,1244,1247,1417,1420,1424,1430,1537,1557 'question':1097 'quit':97,1275 'rang':149,267,324,342,670,687,917,1029,1048,1051,1152,1333,1348,1361,1375,1451,1459,1467,1519 'rare':836 'ratio':1132 'reach':438 'read':184,257,351,470,546,841,949,967,1205,1210,1221,1226,1306 'read-byt':1209 'read-intens':545 'read-modify-writ':350 'real':60,74,86,112,164,1122,1199,1392 'real-world':59,73,85,111,163,1121 'realist':274 'realli':65 'releas':208,218 'replay':199 'replic':1106 'repres':72,182,489,558,605 'request':842 'requir':371 'research':1109 'result':128,139,1188,1287,1298,1486 'rocksdb':5,16,88,217,277,279,359,385,451,485,516,541,627,858,948,1269 'scan':322 'select':1469 'sequenc':421 'seri':1002 'serious':1305 'server':478,491,744 'sever':1046 'short':1035 'show':770,782,872,981,1014,1218,1238,1483 'similar':1281 'sine':1399 'singledelet':1007 'situat':1282 'size':654,789,791,800,810,1140,1251,1362,1436,1439,1447,1549 'slight':784 'small':794,1050 'social':465 'sort':420 'sourc':211 'space':251,986,999,1319,1344 'split':1346 'sql':480 'ssds':295 'sst':423,430,1358 'stack':365 'standard':804,1388 'start':334 'statist':574,1191,1245,1272,1496,1555 'status':1561 'storag':195,457,518,531,951,969,1189,1270,1310 'store':43,169,191,256,286,355,375,417,463,514,522,567,1184 'stress':626 'strong':771,983,1015 'structur':390 'success':1416 'support':570 'supris':623 'surpris':92 'synthet':173,275,938,1340 'system':54,196,413 'tabl':422 'take':239 'techniqu':1401 'tempor':1016 'therefor':124,1283,1326 'thing':1323 'though':1241 'three':82,442,447,978 'tier':853 'time':1001,1038,1412 'tl':232 'tool':202,231 'trace':198,1091 'tree':392 'true':1233,1495 'tune':1128 'turn':680,923 'two':1415 'type':717,1021,1131,1425,1431 'typic':1180 'udb':454,477,490,719,755,769,814,821,839,1009 'under':194,456 'up2x':560,585,725,764,781,1013,1060,1068 'updat':594,837 'upper':532,851 'upx':891 'use':66,125,298,377,386,449,515,520,579,588,617,715,979,1178,1284,1349 'user':380,576 'user-provid':379 'usual':309,1110 'v':329 'valu':8,19,42,168,179,190,284,566,659,788,799,809,1139,1250,1438 'vari':737 'variat':785 'vener':121 'volum':651,742 'vs':644,646,648 'want':50 'way':109,630 'webul':1397 'well':316 'wherea':774 'whether':1099 'within':248,729,1464 'work':206 'workload':9,20,76,89,114,117,161,235,276,443,508,548,635,940,944,960,1094,1113,1124,1164,1177,1200,1217,1235,1267,1341,1393,1487,1505,1514,1529 'world':61,75,87,113,165,1123 'wri':1311 'write':186,353,356,405,474,1213 'write-byt':1212 'x':1224,1228 'yahoo':302 'ycsb':122,130,234,939,1108,1116,1125,1163,1216,1260,1289,1503,1513 'zip':694 'zippydb':509,536,721,759,779,823,871,1039,1176,1234,1266	en	Adrian Colyer
720	Python AsyncIO Event Loop	{"ver":2,"uid":1,"hash":"SHA1:e50d8d0c38b26d7754bf26499ade1d8242915065"}	https://leimao.github.io/blog/Python-AsyncIO-Event-Loop/	2020-08-29 08:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Python <code class="language-plaintext highlighter-rouge">asyncio</code> is a library for efficient single-thread concurrent applications. Ever since I started to use it, unlike Python <code class="language-plaintext highlighter-rouge">multiprocessing</code> and <code class="language-plaintext highlighter-rouge">threading</code>, it has been like a mysterious black box to me. Although I could still use <code class="language-plaintext highlighter-rouge">asyncio</code> for some simple high-level concurrent applications by taking advantage of the open source <code class="language-plaintext highlighter-rouge">asyncio</code> libraries, such as <code class="language-plaintext highlighter-rouge">asyncssh</code> and <code class="language-plaintext highlighter-rouge">httpx</code>, I have no idea how those <code class="language-plaintext highlighter-rouge">asyncio</code> libraries were implemented from scratch. To understand the <code class="language-plaintext highlighter-rouge">asyncio</code> mechanism, it might be necessary to look at its low level implementation details.</p>\n\n<p><br /></p>\n\n<p>Event loop is the core of Python <code class="language-plaintext highlighter-rouge">asyncio</code>. Every <code class="language-plaintext highlighter-rouge">coroutine</code>, <code class="language-plaintext highlighter-rouge">Future</code>, or <code class="language-plaintext highlighter-rouge">Task</code> would be scheduled as <code class="language-plaintext highlighter-rouge">callback</code> and be executed by an event loop. In this blog post, I would like to look into Python event loop at the low-level implementation superficially.</p>\n\n<h3 id="event-loop">Event Loop</h3>\n\n<p>Although <code class="language-plaintext highlighter-rouge">asyncio</code> widely uses <code class="language-plaintext highlighter-rouge">coroutine</code>, <code class="language-plaintext highlighter-rouge">Future</code>, or <code class="language-plaintext highlighter-rouge">Task</code>, it is not necessary to use them in order to run tasks on an event loop. Event loop ultimately runs scheduled <code class="language-plaintext highlighter-rouge">callback</code>s. To see this, let’s check the implementation of <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/base_events.py#L557"><code class="language-plaintext highlighter-rouge">loop.run_forever</code></a> from Python 3.8.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">run_forever</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""Run until stop() is called."""</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_check_closed</span><span class="p">()</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_check_running</span><span class="p">()</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_set_coroutine_origin_tracking</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_debug</span><span class="p">)</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_thread_id</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">get_ident</span><span class="p">()</span>\n\n        <span class="n">old_agen_hooks</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">get_asyncgen_hooks</span><span class="p">()</span>\n        <span class="n">sys</span><span class="p">.</span><span class="n">set_asyncgen_hooks</span><span class="p">(</span><span class="n">firstiter</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_asyncgen_firstiter_hook</span><span class="p">,</span>\n                               <span class="n">finalizer</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">_asyncgen_finalizer_hook</span><span class="p">)</span>\n        <span class="k">try</span><span class="p">:</span>\n            <span class="n">events</span><span class="p">.</span><span class="n">_set_running_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>\n            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_run_once</span><span class="p">()</span>\n                <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_stopping</span><span class="p">:</span>\n                    <span class="k">break</span>\n        <span class="k">finally</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_stopping</span> <span class="o">=</span> <span class="bp">False</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_thread_id</span> <span class="o">=</span> <span class="bp">None</span>\n            <span class="n">events</span><span class="p">.</span><span class="n">_set_running_loop</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_set_coroutine_origin_tracking</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>\n            <span class="n">sys</span><span class="p">.</span><span class="n">set_asyncgen_hooks</span><span class="p">(</span><span class="o">*</span><span class="n">old_agen_hooks</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>Without going into the details, our gut feeling tells us that the key function call in the <code class="language-plaintext highlighter-rouge">run_forever</code> is the <code class="language-plaintext highlighter-rouge">self._run_once()</code>. The <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/base_events.py#L1784"><code class="language-plaintext highlighter-rouge">self._run_once</code></a> function is described as follows.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">_run_once</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""Run one full iteration of the event loop.\n        This calls all currently ready callbacks, polls for I/O,\n        schedules the resulting callbacks, and finally schedules\n        'call_later' callbacks.\n        """</span>\n</code></pre></div></div>\n\n<p>This information is somewhat reflected in the <a href="https://docs.python.org/3.8/library/asyncio-eventloop.html#asyncio.loop.run_forever">loop.run_forever</a> documentation. Event loop must have loops and run iteration by iteration, otherwise its name would not have been event loop. But what exactly is an iteration of the event loop? Before checking the actual implementation, I imagined an iteration of even loop is a fixed finite length of time frame where <code class="language-plaintext highlighter-rouge">callbacks</code> could be executed. We could use a <code class="language-plaintext highlighter-rouge">for</code>/<code class="language-plaintext highlighter-rouge">while</code> loop in the iteration and the end of iteration could be determined by measuring the UNIX time at the end of each <code class="language-plaintext highlighter-rouge">for</code>/<code class="language-plaintext highlighter-rouge">while</code> execution. But this raises a problem. What if there is a <code class="language-plaintext highlighter-rouge">callback</code> that takes very long time to run in the <code class="language-plaintext highlighter-rouge">for</code>/<code class="language-plaintext highlighter-rouge">while</code> loop and keeps blocking the thread, then the fixed length of the time frame could not be guaranteed. It turns out that the design of an actual event loop iteration in Python is somewhat similar but more delicate.</p>\n\n<p><br /></p>\n\n<p>All the scheduled <code class="language-plaintext highlighter-rouge">callbacks</code> for the current event loop iteration are placed in <code class="language-plaintext highlighter-rouge">self._ready</code>. By looking at the implementation superficially, it seems that we have a (heap/priority) queue of scheduled <code class="language-plaintext highlighter-rouge">callbacks</code>, some of which might have been delayed and canceled. Although the <code class="language-plaintext highlighter-rouge">loop.run_forever</code> runs forever, it does have timeout for each event loop iteration. For the “call later” <code class="language-plaintext highlighter-rouge">callbacks</code> that are scheduled to run after the current UNIX time, they are not ready so they will not be put into the <code class="language-plaintext highlighter-rouge">self._ready</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">sched_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">)</span>\n        <span class="k">if</span> <span class="p">(</span><span class="n">sched_count</span> <span class="o">&gt;</span> <span class="n">_MIN_SCHEDULED_TIMER_HANDLES</span> <span class="ow">and</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_timer_cancelled_count</span> <span class="o">/</span> <span class="n">sched_count</span> <span class="o">&gt;</span>\n                <span class="n">_MIN_CANCELLED_TIMER_HANDLES_FRACTION</span><span class="p">):</span>\n            <span class="c1"># Remove delayed calls that were cancelled if their number\n</span>            <span class="c1"># is too high\n</span>            <span class="n">new_scheduled</span> <span class="o">=</span> <span class="p">[]</span>\n            <span class="k">for</span> <span class="n">handle</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">:</span>\n                <span class="k">if</span> <span class="n">handle</span><span class="p">.</span><span class="n">_cancelled</span><span class="p">:</span>\n                    <span class="n">handle</span><span class="p">.</span><span class="n">_scheduled</span> <span class="o">=</span> <span class="bp">False</span>\n                <span class="k">else</span><span class="p">:</span>\n                    <span class="n">new_scheduled</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">handle</span><span class="p">)</span>\n\n            <span class="n">heapq</span><span class="p">.</span><span class="n">heapify</span><span class="p">(</span><span class="n">new_scheduled</span><span class="p">)</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span> <span class="o">=</span> <span class="n">new_scheduled</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_timer_cancelled_count</span> <span class="o">=</span> <span class="mi">0</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="c1"># Remove delayed calls that were cancelled from head of queue.\n</span>            <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">_cancelled</span><span class="p">:</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_timer_cancelled_count</span> <span class="o">-=</span> <span class="mi">1</span>\n                <span class="n">handle</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">)</span>\n                <span class="n">handle</span><span class="p">.</span><span class="n">_scheduled</span> <span class="o">=</span> <span class="bp">False</span>\n\n        <span class="n">timeout</span> <span class="o">=</span> <span class="bp">None</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_ready</span> <span class="ow">or</span> <span class="bp">self</span><span class="p">.</span><span class="n">_stopping</span><span class="p">:</span>\n            <span class="n">timeout</span> <span class="o">=</span> <span class="mi">0</span>\n        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">:</span>\n            <span class="c1"># Compute the desired timeout.\n</span>            <span class="n">when</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">_when</span>\n            <span class="n">timeout</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">when</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">time</span><span class="p">()),</span> <span class="n">MAXIMUM_SELECT_TIMEOUT</span><span class="p">)</span>\n\n        <span class="n">event_list</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_selector</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_process_events</span><span class="p">(</span><span class="n">event_list</span><span class="p">)</span>\n\n        <span class="c1"># Handle 'later' callbacks that are ready.\n</span>        <span class="n">end_time</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">_clock_resolution</span>\n        <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">:</span>\n            <span class="n">handle</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n            <span class="k">if</span> <span class="n">handle</span><span class="p">.</span><span class="n">_when</span> <span class="o">&gt;=</span> <span class="n">end_time</span><span class="p">:</span>\n                <span class="k">break</span>\n            <span class="n">handle</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_scheduled</span><span class="p">)</span>\n            <span class="n">handle</span><span class="p">.</span><span class="n">_scheduled</span> <span class="o">=</span> <span class="bp">False</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_ready</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">handle</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>Only the <code class="language-plaintext highlighter-rouge">callbacks</code> in the <code class="language-plaintext highlighter-rouge">self._ready</code> will be executed in order.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1"># This is the only place where callbacks are actually *called*.\n</span>        <span class="c1"># All other places just add them to ready.\n</span>        <span class="c1"># Note: We run all currently scheduled callbacks, but not any\n</span>        <span class="c1"># callbacks scheduled by callbacks run this time around --\n</span>        <span class="c1"># they will be run the next time (after another I/O poll).\n</span>        <span class="c1"># Use an idiom that is thread-safe without using locks.\n</span>        <span class="n">ntodo</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_ready</span><span class="p">)</span>\n        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ntodo</span><span class="p">):</span>\n            <span class="n">handle</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_ready</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>\n            <span class="k">if</span> <span class="n">handle</span><span class="p">.</span><span class="n">_cancelled</span><span class="p">:</span>\n                <span class="k">continue</span>\n            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_debug</span><span class="p">:</span>\n                <span class="k">try</span><span class="p">:</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">_current_handle</span> <span class="o">=</span> <span class="n">handle</span>\n                    <span class="n">t0</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>\n                    <span class="n">handle</span><span class="p">.</span><span class="n">_run</span><span class="p">()</span>\n                    <span class="n">dt</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">t0</span>\n                    <span class="k">if</span> <span class="n">dt</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">slow_callback_duration</span><span class="p">:</span>\n                        <span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span><span class="s">'Executing %s took %.3f seconds'</span><span class="p">,</span>\n                                       <span class="n">_format_handle</span><span class="p">(</span><span class="n">handle</span><span class="p">),</span> <span class="n">dt</span><span class="p">)</span>\n                <span class="k">finally</span><span class="p">:</span>\n                    <span class="bp">self</span><span class="p">.</span><span class="n">_current_handle</span> <span class="o">=</span> <span class="bp">None</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="n">handle</span><span class="p">.</span><span class="n">_run</span><span class="p">()</span>\n        <span class="n">handle</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># Needed to break cycles when an exception occurs.\n</span></code></pre></div></div>\n\n<p>This means that in an event loop iteration, the number of <code class="language-plaintext highlighter-rouge">callbacks</code> being executed is dynamically determined. It does not have fixed time frame, it does not have an fixed number of <code class="language-plaintext highlighter-rouge">callbacks</code> to run. Everything is dynamically scheduled and thus is very flexible.</p>\n\n<p><br /></p>\n\n<p>Notice that this <code class="language-plaintext highlighter-rouge">self._run_once</code> is only called in the <code class="language-plaintext highlighter-rouge">loop.run_forever</code> method, but not others. Let’s further check the more commonly used method <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/base_events.py#L580">loop.run_until_complete</a> which is being called by <code class="language-plaintext highlighter-rouge">asyncio.run</code> under the hood.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">run_until_complete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">future</span><span class="p">):</span>\n        <span class="s">"""Run until the Future is done.\n        If the argument is a coroutine, it is wrapped in a Task.\n        WARNING: It would be disastrous to call run_until_complete()\n        with the same coroutine twice -- it would wrap it in two\n        different Tasks and that can't be good.\n        Return the Future's result, or raise its exception.\n        """</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_check_closed</span><span class="p">()</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_check_running</span><span class="p">()</span>\n\n        <span class="n">new_task</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">futures</span><span class="p">.</span><span class="n">isfuture</span><span class="p">(</span><span class="n">future</span><span class="p">)</span>\n        <span class="n">future</span> <span class="o">=</span> <span class="n">tasks</span><span class="p">.</span><span class="n">ensure_future</span><span class="p">(</span><span class="n">future</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">self</span><span class="p">)</span>\n        <span class="k">if</span> <span class="n">new_task</span><span class="p">:</span>\n            <span class="c1"># An exception is raised if the future didn't complete, so there\n</span>            <span class="c1"># is no need to log the "destroy pending task" message\n</span>            <span class="n">future</span><span class="p">.</span><span class="n">_log_destroy_pending</span> <span class="o">=</span> <span class="bp">False</span>\n\n        <span class="n">future</span><span class="p">.</span><span class="n">add_done_callback</span><span class="p">(</span><span class="n">_run_until_complete_cb</span><span class="p">)</span>\n        <span class="k">try</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">run_forever</span><span class="p">()</span>\n        <span class="k">except</span><span class="p">:</span>\n            <span class="k">if</span> <span class="n">new_task</span> <span class="ow">and</span> <span class="n">future</span><span class="p">.</span><span class="n">done</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">future</span><span class="p">.</span><span class="n">cancelled</span><span class="p">():</span>\n                <span class="c1"># The coroutine raised a BaseException. Consume the exception\n</span>                <span class="c1"># to not log a warning, the caller doesn't have access to the\n</span>                <span class="c1"># local task.\n</span>                <span class="n">future</span><span class="p">.</span><span class="n">exception</span><span class="p">()</span>\n            <span class="k">raise</span>\n        <span class="k">finally</span><span class="p">:</span>\n            <span class="n">future</span><span class="p">.</span><span class="n">remove_done_callback</span><span class="p">(</span><span class="n">_run_until_complete_cb</span><span class="p">)</span>\n        <span class="k">if</span> <span class="ow">not</span> <span class="n">future</span><span class="p">.</span><span class="n">done</span><span class="p">():</span>\n            <span class="k">raise</span> <span class="nb">RuntimeError</span><span class="p">(</span><span class="s">'Event loop stopped before Future completed.'</span><span class="p">)</span>\n\n        <span class="k">return</span> <span class="n">future</span><span class="p">.</span><span class="n">result</span><span class="p">()</span>\n</code></pre></div></div>\n\n<p>The most prominent function call is <code class="language-plaintext highlighter-rouge">self.run_forever()</code> surprisingly. But where are the <code class="language-plaintext highlighter-rouge">Future</code> scheduled as <code class="language-plaintext highlighter-rouge">callbacks</code> in the event loop. <a href="https://github.com/python/cpython/blob/master/Lib/asyncio/tasks.py#L654"><code class="language-plaintext highlighter-rouge">tasks.ensure_future</code></a> which takes both <code class="language-plaintext highlighter-rouge">Future</code> and <code class="language-plaintext highlighter-rouge">loop</code> as inputs scheduled the <code class="language-plaintext highlighter-rouge">callback</code>s. In the <code class="language-plaintext highlighter-rouge">tasks.ensure_future</code>, it calls <code class="language-plaintext highlighter-rouge">loop.create_task(coro_or_future)</code> to set the <code class="language-plaintext highlighter-rouge">callback</code> schedules in the event loop. Also note that there is additional <code class="language-plaintext highlighter-rouge">callback</code> <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/base_events.py#L184"><code class="language-plaintext highlighter-rouge">_run_until_complete_cb</code></a> added to the event loop so that the <code class="language-plaintext highlighter-rouge">self.run_forever()</code> will not actually run forever.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ensure_future</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n    <span class="s">"""Wrap a coroutine or an awaitable in a future.\n    If the argument is a Future, it is returned directly.\n    """</span>\n    <span class="k">if</span> <span class="n">coroutines</span><span class="p">.</span><span class="n">iscoroutine</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="n">loop</span> <span class="o">=</span> <span class="n">events</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n        <span class="n">task</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="n">create_task</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">)</span>\n        <span class="k">if</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">:</span>\n            <span class="k">del</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n        <span class="k">return</span> <span class="n">task</span>\n    <span class="k">elif</span> <span class="n">futures</span><span class="p">.</span><span class="n">isfuture</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">loop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">futures</span><span class="p">.</span><span class="n">_get_loop</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'The future belongs to a different loop than '</span>\n                             <span class="s">'the one specified as the loop argument'</span><span class="p">)</span>\n        <span class="k">return</span> <span class="n">coro_or_future</span>\n    <span class="k">elif</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isawaitable</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">):</span>\n        <span class="k">return</span> <span class="n">ensure_future</span><span class="p">(</span><span class="n">_wrap_awaitable</span><span class="p">(</span><span class="n">coro_or_future</span><span class="p">),</span> <span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="s">'An asyncio.Future, a coroutine or an awaitable is '</span>\n                        <span class="s">'required'</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>The <code class="language-plaintext highlighter-rouge">loop.create_task</code> is a public interface and the <a href="(https://docs.python.org/3.8/library/asyncio-eventloop.html?highlight=create_task#asyncio.loop.create_task)">documentation</a> could be found from the Python website.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">create_task</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coro</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="s">"""Schedule a coroutine object.\n        Return a task object.\n        """</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_check_closed</span><span class="p">()</span>\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_task_factory</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="n">task</span> <span class="o">=</span> <span class="n">tasks</span><span class="p">.</span><span class="n">Task</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>\n            <span class="k">if</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">:</span>\n                <span class="k">del</span> <span class="n">task</span><span class="p">.</span><span class="n">_source_traceback</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="n">task</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_task_factory</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">coro</span><span class="p">)</span>\n            <span class="n">tasks</span><span class="p">.</span><span class="n">_set_task_name</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>\n\n        <span class="k">return</span> <span class="n">task</span>\n</code></pre></div></div>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>Although we did not go through all the code about the event loop, we have become more knowledgeable about how a Python event loop executes call backs.</p>\n\n\n  <p><a href="https://leimao.github.io/blog/Python-AsyncIO-Event-Loop/">Python AsyncIO Event Loop</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 27, 2020.</p>	2660924f86c220b202076bccd45158659f3c7363	\N	f	2020-08-28 07:10:00	2020-09-10 05:10:13.402895	0			'-1':1174,1291 '0':588,604,620,629,634,661 '1':607 '2020':1349 '27':1348 '3.8':187 '3f':776 'access':1016 'actual':343,441,693,1121 'ad':1109 'add':699 'addit':1103 'advantag':56 'agen':205,239 'also':1098 'although':40,144,493,1303 'anoth':729 'applic':17,53 'argument':891,1143,1211 'around':720 'asyncgen':208,211,236 'asyncio':2,7,45,61,74,83,104,145,1331 'asyncio.future':1235 'asyncio.run':873 'asyncssh':65 'august':1347 'await':1137,1225,1240 'back':1329 'baseexcept':1002 'becom':1318 'belong':1199 'black':36 'block':418 'blog':124 'book':1345 'box':37 'break':225,666,791 'call':196,255,283,298,510,558,592,694,847,871,907,1048,1083,1328 'callback':114,173,287,294,300,361,404,456,483,512,649,676,691,709,713,716,770,808,829,981,1026,1060,1077,1092,1104 'caller':1012 'cancel':492,552,561,595,605 'cb':985,1030,1108 'check':179,341,859 'code':1311 'common':862 'complet':867,880,910,964,984,1029,1041,1107 'comput':623 'conclus':1302 'concurr':16,52 'consum':1003 'continu':755 'core':101 'coro':1086,1127,1153,1167,1179,1192,1213,1218,1226,1264,1282,1296 'coroutin':106,148,894,914,999,1134,1237,1269 'coroutines.iscoroutine':1152 'could':42,362,366,379,429,1253 'count':537,542,550 'creat':1261 'current':285,459,520,707 'cycl':792 'def':188,270,877,1124,1260 'del':1172,1289 'delay':490,557,591 'delic':452 'describ':267 'design':438 'desir':625 'destroy':973 'detail':96,245 'determin':381,813 'didn':962 'differ':922,1202 'direct':1150 'disastr':905 'document':310,1252 'doesn':1013 'done':888,980,1025 'dt':764,768,781 'durat':771 'dynam':812,834 'effici':12 'elif':621,1177,1216 'els':578,589,785,1231,1292 'end':376,389,653,664 'ensur':1125,1222 'even':350 'event':3,97,120,133,142,166,168,280,311,328,338,442,460,505,640,645,802,1036,1063,1096,1112,1162,1314,1325,1332 'events._set_running_loop':218,231 'events.get':1161 'ever':18 'everi':105 'everyth':832 'exact':332 'except':795,938,956,989,1005 'execut':117,364,393,682,773,810,1327 'fals':228,234,577,612,671,978 'feel':248 'final':215,226,296,782,1023 'finit':355 'firstit':213 'fix':354,423,818,826 'flexibl':840 'follow':269 'for/while':369,392,414 'forev':184,190,259,309,496,498,851,988,1051,1118,1123 'format':778 'found':1255 'fraction':555 'frame':359,428,820 'full':276 'function':254,265,1047 'futur':107,149,882,886,932,945,946,948,949,961,1040,1057,1066,1070,1081,1088,1126,1129,1140,1146,1155,1169,1181,1194,1198,1215,1220,1223,1228 'future._log_destroy_pending':977 'future.add':979 'future.cancelled':997 'future.done':994,1033 'future.exception':1021 'future.remove':1024 'future.result':1043 'futures._get_loop':1191 'futures.isfuture':944,1178 'go':242,1307 'good':929 'guarante':432 'gut':247 'handl':546,554,571,580,608,647,659,667,673,751,760,779,780,787 'handle._cancelled':575,754 'handle._run':763,786 'handle._scheduled':576,611,670 'handle._when':663 'head':597 'heap/priority':479 'heapq.heapify':581 'heapq.heappop':609,668 'high':50,567 'high-level':49 'hood':876 'hook':206,209,212,237,240 'httpx':67 'i/o':290,730 'idea':71 'ident':203 'idiom':734 'imagin':346 'implement':77,95,140,181,344,471 'inform':302 'input':1074 'inspect.isawaitable':1217 'interfac':1249 'introduct':5 'iter':277,318,320,335,348,373,378,444,462,507,804 'keep':417 'key':253 'knowledg':1320 'later':299,511,648 'lei':1338,1341 'len':538,744 'length':356,424 'let':177,856 'level':51,94,139 'librari':10,62,75 'like':33,128 'list':641,646 'local':1019 'lock':742 'log':971,1008,1344 'logger.warning':772 'long':408 'look':90,130,468 'loop':4,98,121,134,143,167,169,281,312,315,329,339,351,370,415,443,461,506,803,950,1037,1064,1072,1097,1113,1130,1157,1160,1163,1183,1188,1203,1210,1229,1230,1283,1315,1326,1333 'loop.create':1084,1165,1244 'loop.run':183,308,495,850,865 'low':93,138 'low-level':137 'mao':1339,1342 'max':633 'maximum':637 'mean':798 'measur':383 'mechan':84 'messag':976 'method':852,864 'might':86,487 'min':543,551,632 'multiprocess':27 'must':313 'mysteri':35 'name':323,1265,1285,1286,1299 'necessari':88,155 'need':789,969 'new':568,582,585,941,953,991 'new_scheduled.append':579 'next':726 'none':230,232,614,784,788,1131,1159,1186,1266,1279 'note':703,1099 'notic':841 'ntodo':743,750 'number':564,806,827 'object':1270,1274 'occur':796 'old':204,238 'one':275,1206 'open':59 'order':160,684 'origin':1335 'other':855 'otherwis':321 'pend':974 'place':464,689,697 'poll':288,731 'post':125 'problem':398 'promin':1046 'public':1248 'publish':1336 'put':532 'python':1,6,26,103,132,186,446,1258,1324,1330 'queue':480,599 'rais':396,936,958,1000,1022,1034,1195,1232 'rang':749 'readi':286,526,652,702 'reflect':305 'remov':556,590 'requir':1242 'result':293,934 'return':930,1042,1149,1175,1212,1221,1271,1300 'run':162,171,189,192,258,271,274,317,411,497,517,705,717,724,831,878,883,908,982,1027,1105,1122 'runtimeerror':1035 'safe':739 'sched':536,541,549 'schedul':112,172,291,297,455,482,515,544,569,583,586,708,714,835,1058,1075,1093,1267 'scratch':79 'second':777 'see':175 'seem':474 'select':638 'self':191,219,273,881,951,1263,1284,1295 'self._asyncgen_finalizer_hook':216 'self._asyncgen_firstiter_hook':214 'self._check_closed':197,939,1275 'self._check_running':198,940 'self._clock_resolution':656 'self._current_handle':759,783 'self._debug':200,757 'self._process_events':644 'self._ready':466,535,616,679,745 'self._ready.append':672 'self._ready.popleft':752 'self._run_once':222,262,264,844 'self._scheduled':539,573,584,601,603,610,622,628,658,660,669 'self._selector.select':642 'self._set_coroutine_origin_tracking':199,233 'self._stopping':224,227,618 'self._task_factory':1277,1294 'self._thread_id':201,229 'self._timer_cancelled_count':548,587,606 'self.run':987,1050,1117 'self.slow':769 'self.time':636,655,762,765 'set':1090 'similar':449 'simpl':48 'sinc':19 'singl':14 'single-thread':13 'somewhat':304,448 'sourc':60 'specifi':1207 'start':21 'still':43 'stop':194,1038 'superfici':141,472 'surpris':1052 'sys.get':207 'sys.set':210,235 't0':761,766 'take':55,406,1068 'task':109,151,163,900,923,942,954,975,992,1020,1085,1164,1166,1176,1245,1262,1273,1280,1293,1298,1301 'task._source_traceback':1171,1173,1288,1290 'tasks._set_task_name':1297 'tasks.ensure':947,1065,1080 'tasks.task':1281 'tell':249 'thread':15,29,420,738 'thread-saf':737 'threading.get':202 'thus':837 'time':358,386,409,427,522,654,665,719,727,819 'timeout':502,613,619,626,631,639,643 'timer':545,553 'took':775 'tri':217,758,986 'true':221 'turn':434 'twice':915 'two':921 'typeerror':1233 'ultim':170 'understand':81 'unix':385,521 'unlik':25 'us':250 'use':23,44,147,157,367,732,741,863 'valueerror':1196 'warn':901,1010 'websit':1259 'wide':146 'without':241,740 'would':110,127,324,903,917 'wrap':897,918,1132,1224	en	Lei Mao
523	VTM: A Text-Based Desktop Environment	{"ver":2,"uid":1,"hash":"SHA1:45cf79c3f44cd83fc349d592213cbf6abb089a9e"}	https://vtm.netxs.online/	2020-08-22 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24243521"> https://news.ycombinator.com/item?id=24243521 </a>	b3db0e51b91991b8247324bb794de8a22de700a5	\N	f	2020-08-22 19:10:00	2020-08-25 22:10:10.507232	0			'/item?id=24243521':11 'base':5 'comment':8 'desktop':6 'environ':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24243521':9 'text':4 'text-bas':3 'vtm':1	zh	mssdvd
794	Players are fixing Microsoft Flight Simulator’s monuments with Google Maps	{"ver":2,"uid":1,"hash":"SHA1:470f95a5383afcc0db4e7bcb23c599b836bc1f71"}	https://www.rockpapershotgun.com/2020/08/28/players-are-fixing-microsoft-flight-simulators-missing-monuments-with-google-maps/	2020-08-31 12:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24324813"> https://news.ycombinator.com/item?id=24324813 </a>	e5ff343179e45245408060ed4b0f01f7a92f1e83	\N	f	2020-08-31 12:10:00	2020-09-02 18:10:09.830826	0			'/item?id=24324813':15 'comment':12 'fix':3 'flight':5 'googl':10 'map':11 'microsoft':4 'monument':8 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24324813':13 'player':1 'simul':6	zh	danso
9	Millions of tiny databases	{"ver":2,"uid":1,"hash":"SHA1:2a840a226ad08a46c241436e9541a4e26cd65c57"}	https://blog.acolyer.org/2020/03/04/millions-of-tiny-databases/	2020-03-04 06:00:41	\n<div class="wp-block-jetpack-markdown"><p><a href="https://www.usenix.org/conference/nsdi20/presentation/brooker">Millions of tiny databases</a>, Brooker et al., NSDI&#8217;20</p>\n<p>This paper is a real joy to read. It takes you through the thinking processes and engineering practices behind the design of a key part of the control plane for AWS Elastic Block Storage (EBS): the <em>Physalia</em> database that stores configuration information.</p>\n<blockquote>\n<p>In the same spirit as <a href="https://blog.acolyer.org/2015/03/05/paxos-made-live/">Paxos Made Live</a>, this paper describes the details, choices and tradeoffs that are required to put a consensus system into production.</p>\n</blockquote>\n<p>The core algorithms (chain-replication, Paxos-based consensus) aren&#8217;t the stars of the show here, instead the paper focuses on how these algorithms are deployed, and the software engineering practices behind the creation of a mission-critical production system employing them.</p>\n<h3>A guiding principle</h3>\n<p>Engineering decisions involve making lots of trade-offs. If you want to emerge with a coherent design, then it&#8217;s well worth spending some time thinking about the principle(s) by which you&#8217;re going to make them. For Physalia, and for AWS more generally, the guiding principle is <em>minimise the blast radius</em>.</p>\n<blockquote>\n<p>Over the decade since [the introduction of Availability Zones], our thinking on failure and availability has continued to evolve, and we paid increasing attention to <strong>blast radius</strong> and correlation of failure. Not only do we work to make outages rare and short, we work to reduce the number of resources and customers that they affect, an approach we call <strong>blast radius reduction</strong>.  This philosophy is reflected in everything from the size of our datacenter, to the design of our services, to operational practices.</p>\n</blockquote>\n<h3>Requirements</h3>\n<p>To understand the additional forces shaping the design of Physalia, we need to spend a few moments explaining what it actually does!</p>\n<p>You&#8217;d probably prefer it if your EBS volume didn&#8217;t fail (lose data, or become unavailable).  EBS uses chain replication for availability, with data flowing from client to primary to replica. Once the chain is setup, this all happens without any external coordination. But if a failure does occur, the chain needs to be reconfigured. Updates to the replication group need to be atomic, ordered, and durable.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/physalia-fig-1.jpeg?w=480" alt=""></p>\n<p>Most of the time the workload is light. But in the event of a large-scale failure there will be a sudden burst of load as many chains need to be reconfigured at once. Thus the <em>configuration master</em> is under stress just when you need it the most.</p>\n<blockquote>\n<p>This work is latency critical, because volume IO is blocked until it is complete. It requires strong consistency, because any eventual consistency would make the replication protocol incorrect. It is also most critical at the most challenging time: during large-scale failures.</p>\n</blockquote>\n<p>Physalia is designed to offer consistency and high-availability, even under network partitions. It is designed to fail gracefully and partially, and to strongly avoid large-scale failures. And, of course, it is designed to minimise the blast radius of any failures that do occur.</p>\n<h3>Physalia in the large</h3>\n<p>When I think about minimising blast radius, I immediately think of bulkheads. The bulkhead design pattern suggests partitioning a system so that failure of one partition doesn&#8217;t impact the others. If Physalia was designed as one large configuration database for all of EBS, that would be a huge blast radius should it ever fail. So Physalia doesn&#8217;t do that. Instead &#8211; and the clue is in the paper title, &#8216;Millions of tiny databases&#8217; &#8211; Physalia is constructed as a large number of <em>cells</em>, each serving a small number of clients. If a cell fails, the vast majority of clients will be unaffected.</p>\n<blockquote>\n<p>Our core observation is that we do not require all keys to be available to all clients. In fact, each key needs to be available at only three points in the network: the AWS EC2 instance that is the client of the volume, the primary copy, and the replica copy. Through careful placement, based on our system&#8217;s knowledge of network and power topology, we can significantly increase the probability that Physalia is available to the clients that matter for the keys that matter to those clients.</p>\n</blockquote>\n<p>A Physalia installation, or <em>colony</em>, is made up of many cells. Cells are spread across a mesh of nodes (each node running on a single server). A node may participate in many cells. A cell manages the data of a single partition key, and cells are mutually independent.</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/physalia-fig-2.jpeg?w=640" alt=""></p>\n<p>Reconfiguration in Physalia happens all the time &#8211; not just in response to failures.  Physalia cells are actively moved to be close to their clients by replacing far-away nodes with closer ones, one node at a time. When a node joins or re-joins a cell it needs to be brought up to speed, a process the authors call <em>teaching</em>. There are three modes of teaching:</p>\n<ul>\n<li>In <strong>bulk</strong> mode, most suitable for new nodes, a bulk snapshot of the cell state is transfered to the learner node from an existing cell node (the teacher)</li>\n<li>In <strong>log-based</strong> mode, the teacher ships a segment of the log to the learner, enabling the learning to catch-up through replay. This mode works best for nodes re-joining after a partition or pause.</li>\n<li>My favourite mode, just because the name is so great, is the <strong>whack-a-mole</strong> mode. Whack-a-mole is used when a learner has gaps in its log that can&#8217;t be filled by a teacher in the cell. In this case the learner actively tries to propose a no-op transition in the vacant log position (we&#8217;re using Paxos here). Either the acceptors will accept the no-op transition, or the learning will discover and subsequently propose another value through this process.</li>\n</ul>\n<h3>Millions of tiny cells</h3>\n<blockquote>\n<p>The division of a colony into a large number of cells is our main tools for reducing radius in Physalia. Each node is only used by a small subset of cells, and each cell is only used by a small subset of clients.</p>\n</blockquote>\n<p>Cells are constructed as consensus-based distributed state machines that use Paxos to reach agreement. Cells have seven nodes. The number seven was carefully chosen:</p>\n<ul>\n<li>Durability improves exponentially with larger cell size</li>\n<li>Larger cells have better tolerance of tail latency (e.g. a slow node experiencing a GC pause)</li>\n<li>A sweet-spot between availability in the face of small numbers of uncorrelated node failures, and availability in the face of large numbers of failures</li>\n</ul>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/physalia-fig-4.jpeg?w=520" alt=""></p>\n<p>The relatively small transaction rate, and very small data sizes, made the overheads of larger cells manageable.</p>\n<h3>The many aspects of availability</h3>\n<blockquote>\n<p>State-machine replication using consensus is a popular approach for building systems that tolerate faults in single machines, and uncorrelated failures of a small number of machines. In theory, systems built using this pattern can achieve extremely high availability. In practice, however, achieving high availability is challenging. Studies across three decades have found that software, operations, and scale drive downtime in systems designed to tolerate hardware faults. Few studies consider a factor that is especially important to cloud customers: large-scale correlated failures which affect many cloud resources at the same time.</p>\n</blockquote>\n<p>Physalia uses multiple techniques to increase availability and minimise blast radius. Due to the many cell design, a given client only cares about the availability of the cell storing its own data. If the other cells go down (or are unreachable due to a partition) that client will be unaffected. One desirable property therefore, is that in the event of a partition, a client&#8217;s Physalia database will be on the same side of the partition as the client. Clever placement of cells across nodes can maximise the chances of this:</p>\n<blockquote>\n<p>Reducing the number of network devices between the Physalia database and its clients reduces the possibility of a network partition forming between them for the simple reason that fewer devices means there&#8217;s less to go wrong.</p>\n</blockquote>\n<p>Physalia&#8217;s placement engine takes a number of factors into consideration, to continuously optimise for the probability that a volume will be available when its client EC2 instance is available.</p>\n<p>Limiting the number of cells dependent on a given node, and the number of clients dependent on a given cell, also helps to minimise the blast radius. This is particulary useful in limiting the effects of <em>poison pills</em> and <em>correlated failures</em>.</p>\n<blockquote>\n<p>In a typical distributed state machine design, each node is processing the same updates and the same messages in the same order. This leads the software on the machines to be in the same state. In our experience, this is a common cause of outages in real-world systems: redundancy does not add availability if failures are highly correlated. Having all copies of the software in the same state tends to trigger the same bugs in each copy at the same time, causing multiple nodes to fail, either partially or completely, at the same time.</p>\n</blockquote>\n<p>A poison pill transaction is one such example &#8211; a transaction which passes validition and is accepted in the log, but cannot be applied without causing an error.</p>\n<p>Alongside the system design, availability is also a function of operational practices. Incremental deployment (phased rollouts) is &#8216;<em>a required operational practice for highly available systems</em>.&#8217; The fault tolerant mechanisms built into the system can mask failures from the deployment system though, until they have built to a critical mass (e.g., a majority of nodes). So as well as partitioning the system into millions of tiny databases, the blast radius of bad rollouts is contained by partitioning the system into many different <em>colours</em>.</p>\n<blockquote>\n<p>Operational practices at AWS already separate operational tasks by region and availability zone, ensuring that operations are not performed across many of these units at the same time. Physalia goes a step further than this practice, by introducing the notion of <strong>colors</strong>. Each cell is assigned a color, and each cell is constructed only of nodes of the same color. The control plane ensures that colorv are evenly spread around the datacenter&#8230; When software deployments and other operations are performed, they proceed color-by-color.</p>\n</blockquote>\n<h3>Gaining confidence</h3>\n<p>Testing a large-scale distributed system is far from easy. AWS use a whole battery of approaches to gain confidence in the design and implementation of Physalia.</p>\n<blockquote>\n<p>The challenge of testing a system like Physalia is as large as the challenge of designing and building it. Testing needs to cover not only the happy case, but also a wide variety of error cases.</p>\n</blockquote>\n<p>Key components of the testing (and test-driven-design) strategy include:</p>\n<ul>\n<li>Using TLA+ (&quot;<em>it proved exceptionally useful in the development of Physalia</em>&quot;) to: write specifications of the protocols to ensure they were deeply understood; to model check correctness and liveness properties using the TLC model checker; and as a format for protocol documentation.</li>\n<li>Using abstractions and dependency injection to create a test harness (&#8216;<em>simworld</em>&#8216;) in which distributed systems tests can be written and run inside the IDE without the need to spin up actual test clusters etc. (Reminds me of one of the design goals of a certain framework in the enterprise application development space <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ).</li>\n<li>Using <a href="https://jepsen.io/">Jepsen</a> to make sure that API responses remained linearizable under network failure cases.</li>\n<li>Performing a number of <em>game days</em> against physical deployments of Physalia.</li>\n</ul>\n<blockquote>\n<p>Our code reviews, simworld tests, and design meetings frequently referred back to the TLA+ models of our protocols to resolve ambiguities in Java code or written communication. We highly recommend TLA+ (and its Pluscal dialect) for this use.</p>\n</blockquote>\n<h3>Before and After</h3>\n<p>Section 5 in the paper summarises the production experience of deploying Physalia in AWS. I&#8217;m already well over my target length with this post, so I&#8217;ll keep it brief here and refer you to the paper for the full details. A picture in this case is worth many words: here are the availability charts for EBS, before and after Physalia deployment (the green line)!</p>\n<p><img src="https://blog.acolyer.org/wp-content/uploads/2020/03/physalia-fig-8-9.jpeg?w=520" alt=""></p>\n<p>And I&#8217;ll finish with this one final lesson I can&#8217;t resist highlighting:</p>\n<blockquote>\n<p>Postel&#8217;s famous robustness principle (be conservative in what you do, be liberal in what you accept from others) does not apply to distributed state machines: they should not access transactions they only partially understand and allow the consensus protocol to treat them as temporarily failed.</p>\n</blockquote>\n</div>\n	106676650eea0c21696d923410841b17cb0dc488	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.125928	12	https://blog.acolyer.org/2020/03/04/millions-of-tiny-databases/#comments		'20':13 '5':1929 'abstract':1811 'accept':943,1510,2024 'acceptor':941 'access':2037 'achiev':1142,1149 'across':704,1155,1283,1623 'activ':754,920 'actual':288,1840 'add':1452 'addit':271 'affect':238,1192 'agreement':1024 'al':11 'algorithm':84,107 'allow':2044 'alongsid':1522 'alreadi':1608,1944 'also':437,1378,1528,1749 'ambigu':1907 'anoth':957 'api':1868 'appli':1517,2029 'applic':1859 'approach':240,1115,1709 'aren':92 'around':1673 'aspect':1103 'assign':1649 'atom':354 'attent':207 'author':797 'avail':191,198,312,459,616,627,676,1063,1075,1105,1145,1151,1206,1224,1350,1357,1453,1526,1545,1615,1982 'avoid':475 'aw':44,173,636,1607,1703,1941 'away':766 'back':1897 'bad':1592 'base':90,656,837,1015 'batteri':1707 'becom':305 'behind':32,115 'best':862 'better':1045 'blast':182,209,243,489,506,550,1209,1383,1589 'block':46,416 'brief':1958 'brooker':9 'brought':790 'bug':1474 'build':1117,1737 'built':1137,1551,1566 'bulk':807,815 'bulkhead':512,514 'burst':381 'call':242,798 'cannot':1515 'care':654,1033,1221 'case':917,1747,1755,1875,1974 'catch':855 'catch-up':854 'caus':1441,1482,1519 'cell':583,593,700,701,722,724,734,752,785,819,830,914,965,976,996,999,1009,1025,1040,1043,1099,1215,1227,1235,1282,1362,1377,1647,1654 'certain':1854 'chain':86,309,324,341,386 'chain-repl':85 'challeng':443,1153,1721,1733 'chanc':1288 'chart':1983 'check':1793 'checker':1802 'choic':69 'chosen':1034 'clever':1279 'client':317,590,599,619,642,679,689,761,1008,1219,1246,1263,1278,1303,1353,1372 'close':758 'closer':769 'cloud':1184,1194 'clue':565 'cluster':1842 'code':1888,1910 'coher':146 'coloni':694,970 'color':1645,1651,1663,1687,1689 'color-by-color':1686 'colorv':1669 'colour':1603 'common':1440 'communic':1913 'complet':420,1490 'compon':1757 'confid':1691,1712 'configur':54,395,539 'consensus':78,91,1014,1111,2046 'consensus-bas':1013 'conserv':2014 'consid':1176 'consider':1338 'consist':424,428,455 'construct':577,1011,1656 'contain':1595 'continu':200,1340 'control':41,1665 'coordin':333 'copi':648,652,1461,1477 'core':83,604 'correct':1794 'correl':212,1189,1397,1458 'cours':482 'cover':1742 'creat':1816 'creation':117 'critic':122,411,439,1569 'custom':235,1185 'd':291 'data':303,314,727,1092,1231 'databas':4,8,51,540,574,1266,1300,1587 'datacent':257,1675 'day':1881 'decad':186,1157 'decis':131 'deepli':1789 'depend':1363,1373,1813 'deploy':109,1535,1560,1678,1884,1938,1990 'describ':66 'design':34,147,260,275,452,466,485,515,535,1169,1216,1405,1525,1715,1735,1765,1850,1893 'desir':1251 'detail':68,1969 'develop':1776,1860 'devic':1296,1320 'dialect':1921 'didn':299 'differ':1602 'discov':953 'distribut':1016,1402,1697,1823,2031 'divis':967 'document':1809 'doesn':527,558 'downtim':1166 'drive':1165 'driven':1764 'due':1211,1241 'durabl':357,1035 'e.g':1050,1571 'easi':1702 'eb':48,297,307,544,1985 'ec2':637,1354 'effect':1392 'either':939,1487 'elast':45 'emerg':143 'employ':125 'enabl':850 'engin':30,113,130,1331 'ensur':1617,1667,1786 'enterpris':1858 'error':1521,1754 'especi':1181 'et':10 'etc':1843 'even':460,1671 'event':369,1258 'eventu':427 'ever':554 'everyth':251 'evolv':202 'exampl':1502 'except':1772 'exist':829 'experi':1436,1936 'experienc':1054 'explain':285 'exponenti':1037 'extern':332 'extrem':1143 'face':1066,1078 'fact':621 'factor':1178,1336 'fail':301,468,555,594,1486,2053 'failur':196,214,337,375,449,479,493,523,750,1073,1083,1127,1190,1398,1455,1557,1874 'famous':2010 'far':765,1700 'far-away':764 'fault':1121,1173,1548 'favourit':874 'fewer':1319 'fill':908 'final':2001 'finish':1997 'flow':315 'focus':103 'forc':272 'form':1311 'format':1806 'found':1159 'framework':1855 'frequent':1895 'full':1968 'function':1530 'gain':1690,1711 'game':1880 'gap':900 'gc':1056 'general':175 'given':1218,1366,1376 'go':165,1236,1326 'goal':1851 'goe':1633 'grace':469 'great':882 'green':1992 'group':350 'guid':128,177 'happen':329,741 'happi':1746 'har':1819 'hardwar':1172 'help':1379 'high':458,1144,1150,1457,1544,1915 'high-avail':457 'highlight':2007 'howev':1148 'huge':549 'ide':1833 'immedi':509 'impact':529 'implement':1717 'import':1182 'improv':1036 'includ':1767 'incorrect':434 'increas':206,670,1205 'increment':1534 'independ':737 'inform':55 'inject':1814 'insid':1831 'instal':692 'instanc':638,1355 'instead':100,562 'introduc':1641 'introduct':189 'involv':132 'io':414 'java':1909 'jepsen':1863 'join':779,783,867 'joy':19 'keep':1956 'key':37,613,623,684,732,1756 'knowledg':661 'larg':373,447,477,500,538,580,973,1080,1187,1695,1730 'large-scal':372,446,476,1186,1694 'larger':1039,1042,1098 'latenc':410,1049 'lead':1422 'learn':852,951 'learner':825,849,898,919 'length':1949 'less':1324 'lesson':2002 'liber':2020 'light':365 'like':1726 'limit':1358,1390 'line':1993 'lineariz':1871 'live':63,1796 'll':1955,1996 'load':383 'log':836,846,903,932,1513 'log-bas':835 'lose':302 'lot':134 'm':1943 'machin':1018,1108,1124,1133,1404,1427,2033 'made':62,696,1094 'main':979 'major':597,1573 'make':133,167,221,430,1865 'manag':725,1100 'mani':385,699,721,1102,1193,1214,1601,1624,1977 'mask':1556 'mass':1570 'master':396 'matter':681,686 'maximis':1286 'may':718 'mean':1321 'mechan':1550 'meet':1894 'mesh':706 'messag':1416 'million':1,5,571,962,1584 'minimis':180,487,505,1208,1381 'mission':121 'mission-crit':120 'mode':803,808,838,860,875,889 'model':1792,1801,1901 'mole':888,893 'moment':284 'move':755 'multipl':1202,1483 'mutual':736 'name':879 'need':279,342,351,387,403,624,787,1740,1836 'network':462,634,663,1295,1309,1873 'new':812 'no-op':925,945 'node':708,710,717,767,772,778,813,826,831,864,987,1028,1053,1072,1284,1367,1407,1484,1575,1659 'notion':1643 'nsdi':12 'number':231,581,588,974,1030,1069,1081,1131,1293,1334,1360,1370,1878 'observ':605 'occur':339,496 'off':138 'offer':454 'one':525,537,770,771,1250,1500,1847,2000 'op':927,947 'oper':265,1162,1532,1541,1604,1610,1619,1681 'optimis':1341 'order':355,1420 'other':531,2026 'outag':222,1443 'overhead':1096 'paid':205 'paper':15,65,102,569,1932,1965 'part':38 'partial':471,1488,2041 'particip':719 'particulari':1387 'partit':463,518,526,731,870,1244,1261,1275,1310,1580,1597 'pass':1506 'pattern':516,1140 'paus':872,1057 'paxo':61,89,937,1021 'paxos-bas':88 'perform':1622,1683,1876 'phase':1536 'philosophi':247 'physalia':50,170,277,450,497,533,557,575,674,691,740,751,985,1200,1265,1299,1328,1632,1719,1727,1778,1886,1939,1989 'physic':1883 'pictur':1971 'pill':1395,1497 'placement':655,1280,1330 'plane':42,1666 'pluscal':1920 'point':631 'poison':1394,1496 'popular':1114 'posit':933 'possibl':1306 'post':1952 'postel':2008 'power':665 'practic':31,114,266,1147,1533,1542,1605,1639 'prefer':293 'primari':319,647 'principl':129,159,178,2012 'probabl':292,672,1344 'proceed':1685 'process':28,795,961,1409 'product':81,123,1935 'properti':1252,1797 'propos':923,956 'protocol':433,1784,1808,1904,2047 'prove':1771 'put':76 'radius':183,210,244,490,507,551,983,1210,1384,1590 'rare':223 'rate':1088 're':164,782,866,935 're-join':781,865 'reach':1023 'read':21 'real':18,1446 'real-world':1445 'reason':1317 'recommend':1916 'reconfigur':345,390,738 'reduc':229,982,1291,1304 'reduct':245 'redund':1449 'refer':1896,1961 'reflect':249 'region':1613 'relat':1085 'remain':1870 'remind':1844 'replac':763 'replay':858 'replic':87,310,349,432,1109 'replica':321,651 'requir':74,267,422,611,1540 'resist':2006 'resolv':1906 'resourc':233,1195 'respons':748,1869 'review':1889 'robust':2011 'rollout':1537,1593 'run':711,1830 'scale':374,448,478,1164,1188,1696 'section':1928 'segment':843 'separ':1609 'serv':585 'server':715 'servic':263 'setup':326 'seven':1027,1031 'shape':273 'ship':841 'short':225 'show':98 'side':1272 'signific':669 'simpl':1316 'simworld':1820,1890 'sinc':187 'singl':714,730,1123 'size':254,1041,1093 'slow':1052 'small':587,993,1005,1068,1086,1091,1130 'snapshot':816 'softwar':112,1161,1424,1464,1677 'space':1861 'specif':1781 'speed':793 'spend':153,281 'spin':1838 'spirit':59 'spot':1061 'spread':703,1672 'star':95 'state':820,1017,1107,1403,1433,1468,2032 'state-machin':1106 'step':1635 'storag':47 'store':53,1228 'strategi':1766 'stress':399 'strong':423,474 'studi':1154,1175 'subsequ':955 'subset':994,1006 'sudden':380 'suggest':517 'suitabl':810 'summaris':1933 'sure':1866 'sweet':1060 'sweet-spot':1059 'system':79,124,520,659,1118,1136,1168,1448,1524,1546,1554,1561,1582,1599,1698,1725,1824 'tail':1048 'take':23,1332 'target':1948 'task':1611 'teach':799,805 'teacher':833,840,911 'techniqu':1203 'temporarili':2052 'tend':1469 'test':1692,1723,1739,1760,1763,1818,1825,1841,1891 'test-driven-design':1762 'theori':1135 'therefor':1253 'think':27,156,194,503,510 'though':1562 'three':630,802,1156 'thus':393 'time':155,361,444,744,775,1199,1481,1494,1631 'tini':3,7,573,964,1586 'titl':570 'tla':1769,1900,1917 'tlc':1800 'toler':1046,1120,1171,1549 'tool':980 'topolog':666 'trade':137 'trade-off':136 'tradeoff':71 'transact':1087,1498,1504,2038 'transfer':822 'transit':928,948 'treat':2049 'tri':921 'trigger':1471 'typic':1401 'unaffect':602,1249 'unavail':306 'uncorrel':1071,1126 'understand':269,2042 'understood':1790 'unit':1627 'unreach':1240 'updat':346,1412 'use':308,895,936,990,1002,1020,1110,1138,1201,1388,1704,1768,1773,1798,1810,1862,1924 'vacant':931 'validit':1507 'valu':958 'varieti':1752 'vast':596 'volum':298,413,645,1347 'want':141 'well':151,1578,1945 'whack':886,891 'whack-a-mol':885,890 'whole':1706 'wide':1751 'without':330,1518,1834 'word':1978 'work':219,227,408,861 'workload':363 'world':1447 'worth':152,1976 'would':429,546 'write':1780 'written':1828,1912 'wrong':1327 'zone':192,1616	en	Adrian Colyer
680	Why Johnny Won't Upgrade	{"ver":2,"uid":1,"hash":"SHA1:fb5fae61d255da344d4260789f0db1ce92121318"}	https://jacquesmattheij.com/why-johnny-wont-upgrade/	2020-08-27 12:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24281728"> https://news.ycombinator.com/item?id=24281728 </a>	46224b11758220fe4c39bbf7da086460433a5a19	\N	f	2020-08-27 12:10:00	2020-08-29 04:10:17.72104	0			'/item?id=24281728':9 'comment':6 'johnni':2 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24281728':7 'upgrad':5 'won':3	zh	janvdberg
128	Modules Part 05: Gopls Improvements	{"ver":2,"uid":1,"hash":"SHA1:bf2c14928858d09969b18d682fe07f2f3a2cc699"}	https://www.ardanlabs.com/blog/2020/04/modules-05-gopls-improvements.html	2020-04-08 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nPrelude This is a guest post written by Rohan Challa, a member of the Go team working on gopls.\nThis document is a follow up to Bill Kennedy’s post on projects, dependencies and gopls. His post showed that gopls did not work well with modules, particularly when adding and removing dependencies from a project inside of your editor.	fcc75d9378a6ea0a03ec29904eaf1bb7fb9967bb	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.399877	0			'05':3 'ad':73 'athen':21 'bill':51 'challa':34 'checksum':19 'depend':12,57,76 'document':45 'editor':83 'follow':48 'go':39 'gopl':4,14,22,43,59,64 'guest':29 'improv':5,23 'index':7 'insid':80 'kennedi':52 'member':36 'minim':15 'mirror':18 'modul':1,70 'part':2 'particular':71 'post':30,54,61 'prelud':25 'project':11,56,79 'remov':75 'rohan':33 'select':17 'seri':6 'show':62 'team':40 'vendor':24 'version':16 'well':68 'work':41,67 'written':31	en	
232	Object Oriented Programming in Go	{"ver":2,"uid":1,"hash":"SHA1:a312b06d1485de24a3a70cb1e986f4201bd6827d"}	https://www.ardanlabs.com/blog/2013/07/object-oriented-programming-in-go.html	2013-07-10 00:00:00	Someone asked a question on the forum today on how to gain the benefits of inheritance without embedding. It is really important for everyone to think in terms of Go and not the&nbsp;languages&nbsp;they are leaving behind. I can&rsquo;t tell you much code I removed from my early Go implementations because it wasn&rsquo;t necessary. The&nbsp;language designers have years of experience and knowledge. Hindsight is helping to create a language that is fast, lean and really fun to code in.	7d6e695615ffc2f92feeb5ae3b7f9635ba2c0761	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.60475	0			'ask':7 'behind':43 'benefit':19 'code':50,87 'creat':76 'design':65 'earli':55 'embed':23 'everyon':29 'experi':69 'fast':81 'forum':12 'fun':85 'gain':17 'go':5,35,56 'help':74 'hindsight':72 'implement':57 'import':27 'inherit':21 'knowledg':71 'languag':39,64,78 'lean':82 'leav':42 'much':49 'necessari':62 'object':1 'orient':2 'program':3 'question':9 'realli':26,84 'remov':52 'someon':6 'tell':47 'term':33 'think':31 'today':13 'wasn':60 'without':22 'year':67	en	
540	Persisting as a solo founder	{"ver":2,"uid":1,"hash":"SHA1:0a1f024f4ce1baa2573d48b5998d7ac4fd11df23"}	https://vishnu.tech/posts/persistence/	2020-08-23 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24251403"> https://news.ycombinator.com/item?id=24251403 </a>	bb0257b0936861112b1b009e9293db6d29b1a711	\N	f	2020-08-23 20:10:00	2020-08-27 20:10:10.164283	0			'/item?id=24251403':9 'comment':6 'founder':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24251403':7 'persist':1 'solo':4	zh	vishnumohandas
972	rust ide推荐	{"ver":2,"uid":1,"hash":"SHA1:62a0abb368af6aec3ef5e1b9ba23b23ef37081e6"}	https://rustcc.cn/article?id=b83a06a0-6eda-4df1-8a05-0a92c76fac11	2020-09-05 03:10:25	<p>大佬们都是用啥ide的啊， 感觉vscode+rls好难用，碰到宏函数就拉跨。。。不能跳转也无法补全，这也太辣鸡了。。。</p>\n	ff53060a71fcc493e8939f47b289b6d80bd6b8bf	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.186395	0			'ide推荐':2 'rls好难用':5 'rust':1 '不能跳转也无法补全':7 '大佬们都是用啥ide的啊':3 '感觉vscode':4 '碰到宏函数就拉跨':6 '这也太辣鸡了':8		
10	Firecracker: lightweight virtualization for serverless applications	{"ver":2,"uid":1,"hash":"SHA1:794609ac0194aeef68316bef384da584c6de8f0a"}	https://blog.acolyer.org/2020/03/02/firecracker/	2020-03-02 06:00:56	\n<p><a href="https://www.usenix.org/conference/nsdi20/presentation/agache">Firecracker: lightweight virtualisation for serverless applications</a>, Agache et al., NSDI&#8217;20</p>\n\n\n\n<p>Finally the NSDI&#8217;20 papers have opened up to the public (as of last week), and what a great looking crop of papers it is. We looked at a couple of papers that had pre-prints available last week, today we&#8217;ll be looking at one of the most anticipated papers of this year&#8217;s crop: Amazon&#8217;s <em>Firecracker</em>.</p>\n\n\n\n<p><a href="https://firecracker-microvm.github.io/">Firecracker</a> is the virtual machine monitor (VMM) that powers AWS Lambda and AWS Fargate, and has been used in production at AWS since 2018. Firecracker is open source, and there are a number of projects that make it easy to work with outside of the AWS environment too, including <a href="https://www.weave.works/oss/firekube/">Weave Firekube</a> (disclaimer: Accel is an investor in Weaveworks). Firekube exists because none of the existing alternatives (virtualisation, containers or language-specific vms) met the combined needs of multi-tenant efficiency and strong isolation in the AWS environment.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>The traditional view is that there is a choice between virtualization with strong security and high overhead, and container technologies with weaker security and minimal overhead. This tradeoff is unacceptable to public infrastructure providers, who need both strong security and minimal overhead.</p></blockquote>\n\n\n\n<h3>Approaches to isolation</h3>\n\n\n\n<p>The first version of AWS Lambda was built using Linux containers. Multiple functions for the same customer would run inside a single VM, and workloads for different customers ran in different VMs. Thus containers provided isolation between functions, and virtualisation provided the (stronger) isolation between accounts. This approach puts some limitations on packing efficiency, and also necessitates a container trade-off between security and code compatibility based on the types of syscalls containers are allowed to make.</p>\n\n\n\n<p>A modern commodity server can contain up to 1TB of RAM, and Lambda functions can use as little as 128MB. So you need up to 8000 functions on a server to fill the RAM (more in practice due to soft allocation). This also makes any solution very sensitive to per-function (per isolation unit) overheads.</p>\n\n\n\n<p>The ideal isolation solution would have the following properties:</p>\n\n\n\n<ul><li>Strong isolation (multiple functions on the same hardware, protected against privilege escalation, information disclosure, covert channels, and other risks).</li><li>The ability to run thousands of functions on a single machine with minimal waste</li><li>Close to native performance</li><li>Support for arbitrary Linux binaries and libraries without code changes or recompilation</li><li>Fast start-up and tear-down of functions</li><li>Soft-allocation support whereby each function consumes only the resources it needs (up to its limit), not the amount it is actually entitled to.</li></ul>\n\n\n\n<h4>The problem with containers</h4>\n\n\n\n<p>Containers on a host share a single OS kernel, relying on isolation mechanisms built into the kernel for protection.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>The fact that containers rely on syscall limitations for their security represents at tradeoff between security and compatibility.</p></blockquote>\n\n\n\n<p>A realistic container enviroment might need access to hundreds of sys calls, together with the <code>/proc</code> and <code>/sys</code> kernel interfaces. One solution for syscalls is to move some of the kernel functionality into userspace, leaving a smaller surface area to secure. That helps protect against privilege escalation, but the richness of <code>/proc</code> and friends means that protecting against covert communication channels is still challenging.</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-1.jpeg?w=480" alt="" /></figure>\n\n\n\n<h4>The problem with language VMs</h4>\n\n\n\n<p>Language-specific VMs, such as V8 isolates, are a non-starter in the AWS Lambda use case because Lambda and Fargate need to be able to support arbitrary binaries.</p>\n\n\n\n<h4>The problem with virtualisation</h4>\n\n\n\n<p>Virtualisation has challenges with density, overheads, and startup times. Approaches such as unikernels can help with this, but once again the AWS requirement to be able to run unmodified code rules these out. General-purpose hypervisors and virtual machine monitors (VMMs) are also quite large, leading to a large trusted compute base (TCB). The popular combination of KVM + QEMU runs to over 1M lines of code and requires up to 270 unique syscalls.</p>\n\n\n\n<h3>The design of Firecracker</h3>\n\n\n\n<p>All of the existing approaches we just examined involve trade-offs that AWS didn&#8217;t want to make. By building Firecracker specifically for serverless and container applications, it was possible to make simplifying assumptions opening up a new design point.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>Developing a VMM for a clear set of goals, and where we could make assumptions about the properties and requirements of guests, was significantly easier than developing one suitable for all uses. These simplifying assumptions are reflected in Firecracker&#8217;s design and implementation.</p></blockquote>\n\n\n\n<p>What we really want is the isolation characteristics of virtualisation, with the lightweight overheads of containers. &#8220;<em>From an isolation perspective, the most compelling benefit is that it moves the security-critical interface from the OS boundary to a boundary supported in hardware and comparatively simpler software</em>&#8220;.</p>\n\n\n\n<p>At the core of Firecracker therefore is a new VMM that uses the Linux Kernel&#8217;s KVM infrastructure to provide minimal virtual machines (<em>MicroVMs</em>), that support modern Linux <em>hosts</em>, and Linux and OSv <em>guests</em>. It&#8217;s about 50kloc of Rust &#8211; i.e. a significantly smaller code footprint, and in a safe language. Wherever possible Firecracker makes use of components already built into Linux (e.g. for block IO, process scheduling and memory management, and the TUN/TAP virtual network interfaces). By targeting container and serverless workloads, Firecracker needs to support only a limited number of emulated devices, many less than QEMU (e.g. , no support for USB, video, and audio devices). <code>virtio</code> is used for network and block devices. Firecracker devices offer built-in rate limiters sufficient for AWS&#8217; needs, although still considerably less flexible than Linux <code>cgroups</code>.</p>\n\n\n\n<blockquote class="wp-block-quote"><p>We implemented performance limits in Firecracker where there was a compelling reason: enforcing rate limits in device emulation allows us to strongly control the amount of VMM and host kernel CPU time that a guest can consume, and we do not trust the guest to implement its own limits. Where we did not have a compelling reason to add the functionality to Firecracker, we used the capabilities of the host OS.</p></blockquote>\n\n\n\n<p>In addition to the VMM, Firecracker also exposes a REST API used to configure, manage, start, and stop MicroVMs.</p>\n\n\n\n<p>If you <em>are</em> thinking of deploying Firecracker in a production environment (rather than just using the one that AWS sells), then there are detailed <a href="https://github.com/firecracker-microvm/firecracker/blob/master/docs/prod-host-setup.md">guidelines and recommendations on current side-channel mitigation best-practices</a> for production hosts.</p>\n\n\n\n<h3>Integrating Firecracker into AWS</h3>\n\n\n\n<p>Inside AWS Lamba Firecracker MicroVMs are used to serve trillions of events per month for hundreds of thousands of customers. A <em>Worker Manager</em> routes incoming requests to workers, with sticky routing for a given function to a small number of hosts. Lambda <em>workers</em> offer a number of <em>slots</em>, with each slot being used for many serial invocations of a single function in a MicroVM. If no slot is currently available for a requested function, the <em>Placement service</em> will allocate a slot using time-based leasing.</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-2.jpeg?w=480" alt="" /></figure>\n\n\n\n<p>Each worker runs hundreds or thousands of MicroVMs. One Firecracker <em>MicroManager</em> process is launched for each MicroVM, with responisibilty for creating and managing the MicroVM, providing device emulation, and handling exits. Communication with the MicroVM is over a TCP/IP socket.</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-3.jpeg?w=480" alt="" /></figure>\n\n\n\n<p>A <em>jailer</em> implements a wrapper around Firecracker which places it into a restrictive sandbox before it boots the guest.</p>\n\n\n\n<h3>Production experience</h3>\n\n\n\n<p>Firecracker MicroVMs boot in around 100ms, 150ms if you also include the API call processing time.</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-5-6.jpeg?w=520" alt="" /></figure>\n\n\n\n<p>The memory overhead is very low, at around 3MB per MicroVM (compared to 13MB for Cloud Hypervisor, and 131MB for QEMU).</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-7.jpeg?w=520" alt="" /></figure>\n\n\n\n<p>The current weakness of Firecracker is block IO performance. Firecracker (and Cloud Hypervisor) is limited to around 13,000 IOPS (52 MB/s at 4kB), whereas the same hardware is capable of over 340,000 read IOPS (1GB/s at 4kB).</p>\n\n\n\n<figure class="wp-block-image"><img src="https://blog.acolyer.org/wp-content/uploads/2020/02/firecracker-fig-8-9.jpeg?w=520" alt="" /></figure>\n\n\n\n<p>The authors expect significant improvements to be made in this area, but the gap to the near bare-metal performance offered by PCI pass-through will not be fully closed as the hardware is not yet up to the task of supporting thousands of ephemeral VMs.</p>\n\n\n\n<p>Memory and CPU over-subscriptions ration have been tested up to 20x without problems, and production ratios of up to 10x have been used.</p>\n\n\n\n<h3>The last word</h3>\n\n\n\n<blockquote class="wp-block-quote"><p>In addition to the short-term success, Firecracker will be the bais for future investments and improvements in the virtualization space, including exploring new areas for virtualization technology. We are excited to see Firecracker being picked up by the container community, and believe that there is a great opportunity to move from Linux containers to virtualization as the standard for container isolation across the industry.</p></blockquote>\n	6245c34b807730b3af1df756d90ce49b95b31cf4	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.12755	3	https://blog.acolyer.org/2020/03/02/firecracker/#comments		'/proc':491,527 '/sys':493 '000':1259,1274 '100ms':1209 '10x':1349 '128mb':309 '13':1258 '131mb':1238 '13mb':1233 '150ms':1210 '1gb/s':1277 '1m':643 '1tb':298 '20':17,21 '2018':101 '20x':1340 '270':651 '340':1273 '3mb':1228 '4kb':1264,1279 '50kloc':826 '52':1261 '8000':315 'abil':375 'abl':571,605 'accel':130 'access':482 'account':257 'across':1419 'actual':432 'add':982 'addit':996,1357 'agach':13 'al':15 'alloc':330,412,1135 'allow':287,942 'alreadi':847 'also':267,332,623,1001,1213 'altern':143 'although':916 'amazon':75 'amount':429,948 'anticip':68 'api':1005,1216 'applic':6,12,685 'approach':209,259,589,662 'arbitrari':392,574 'area':514,1290,1381 'around':1188,1208,1227,1257 'assumpt':692,713,733 'audio':894 'author':1281 'avail':55,1126 'aw':87,90,99,123,165,216,560,601,671,914,1032,1056,1058 'bai':1368 'bare':1298 'bare-met':1297 'base':279,632,1141 'believ':1399 'benefit':765 'best':1048 'best-practic':1047 'binari':394,575 'block':853,902,1247 'boot':1199,1206 'boundari':778,781 'build':678 'built':219,452,848,908 'built-in':907 'call':487,1217 'capabl':990,1270 'case':563 'cgroup':923 'challeng':539,582 'chang':399 'channel':370,536,1045 'characterist':749 'choic':175 'clear':704 'close':1311 'cloud':1235,1252 'code':277,398,609,646,833 'combin':153,636 'commod':292 'communic':535,1174 'communiti':1397 'compar':786,1231 'compat':278,475 'compel':764,934,979 'compon':846 'comput':631 'configur':1008 'consider':918 'consum':417,960 'contain':145,185,222,245,270,285,295,438,439,461,478,684,757,868,1396,1410,1417 'control':946 'core':791 'could':711 'coupl':47 'covert':369,534 'cpu':954,1330 'creat':1163 'critic':773 'crop':38,74 'current':1042,1125,1242 'custom':228,239,1076 'densiti':584 'deploy':1019 'design':655,697,739 'detail':1037 'develop':699,725 'devic':882,895,903,905,940,1169 'didn':672 'differ':238,242 'disclaim':129 'disclosur':368 'due':327 'e.g':851,887 'easi':116 'easier':723 'effici':159,265 'emul':881,941,1170 'enforc':936 'entitl':433 'enviro':479 'environ':124,166,1024 'ephemer':1326 'escal':366,522 'et':14 'event':1068 'examin':665 'excit':1387 'exist':137,142,661 'exit':1173 'expect':1282 'experi':1203 'explor':1379 'expos':1002 'fact':459 'fargat':91,567 'fill':321 'final':18 'firecrack':1,7,77,78,102,657,679,737,793,842,872,904,929,986,1000,1020,1054,1060,1152,1189,1204,1245,1250,1364,1390 'firekub':128,136 'first':213 'flexibl':920 'follow':353 'footprint':834 'friend':529 'fulli':1310 'function':224,249,303,316,341,358,380,416,507,984,1091,1117,1130 'functionssoft':411 'functionssoft-alloc':410 'futur':1370 'gap':1293 'general':614 'general-purpos':613 'given':1090 'goal':707 'great':36,1404 'guest':720,822,958,967,1201 'guidelin':1038 'handl':1172 'hardwar':362,784,1268,1314 'help':518,594 'high':182 'host':442,817,952,993,1052,1097 'hundr':484,1072,1146 'hypervisor':616,1236,1253 'i.e':829 'ideal':347 'implement':741,925,969,1185 'improv':1284,1373 'includ':126,1214,1378 'incom':1081 'industri':1421 'inform':367 'infrastructur':199,806 'insid':231,1057 'integr':1053 'interfac':495,774,865 'invest':1371 'investor':133 'invoc':1113 'involv':666 'io':854,1248 'iop':1260,1276 'isol':162,211,247,255,343,348,356,450,552,748,760,1418 'jailer':1184 'kernel':447,455,494,506,803,953 'kvm':638,805 'lamba':1059 'lambda':88,217,302,561,565,1098 'languag':148,543,546,839 'language-specif':147,545 'larg':625,629 'last':31,56,1354 'launch':1156 'lead':626 'leas':1142 'leav':510 'less':884,919 'librari':396 'lightweight':2,8,754 'limit':262,426,465,878,911,927,938,972,1255 'line':644 'linux':221,393,802,816,819,850,922,1409 'littl':307 'll':60 'look':37,44,62 'low':1225 'machin':82,384,619,811 'made':1287 'make':114,289,333,676,690,712,843 'manag':859,1009,1079,1165 'mani':883,1111 'mb/s':1262 'mean':530 'mechan':451 'memori':858,1221,1328 'met':151 'metal':1299 'micromanag':1153 'microvm':812,1013,1061,1120,1150,1159,1167,1177,1205,1230 'might':480 'minim':191,207,386,809 'mitig':1046 'modern':291,815 'monitor':83,620 'month':1070 'move':502,769,1407 'multi':157 'multi-ten':156 'multipl':223,357 'nativ':389 'near':1296 'necessit':268 'need':154,202,312,422,481,568,873,915 'network':864,900 'new':696,797,1380 'non':556 'non-start':555 'none':139 'nsdi':16,20 'number':110,879,1095,1102 'off':669 'offer':906,1100,1301 'one':64,496,726,1030,1151 'open':24,104,693 'opportun':1405 'os':446,777,994 'osv':821 'outsid':120 'over-subscript':1331 'overhead':183,192,208,345,585,755,1222 'pack':264 'paper':22,40,49,69 'pass':1305 'pass-through':1304 'pci':1303 'per':340,342,1069,1229 'per-funct':339 'perform':926,1249,1300 'performancesupport':390 'perspect':761 'pick':1392 'place':1191 'placement':1132 'point':698 'popular':635 'possibl':688,841 'power':86 'practic':326,1049 'pre':53 'pre-print':52 'print':54 'privileg':365,521 'problem':436,541,577,1342 'process':855,1154,1218 'product':97,1023,1051,1202,1344 'project':112 'properti':354,716 'protect':363,457,519,532 'provid':200,246,252,808,1168 'public':28,198 'purpos':615 'put':260 'qemu':639,886,1240 'quit':624 'ram':300,323 'ran':240 'rate':910,937 'rather':1025 'ratio':1345 'ration':1334 'read':1275 'realist':477 'realli':744 'reason':935,980 'recommend':1040 'recompilationfast':401 'reflect':735 'reli':448,462 'repres':469 'request':1082,1129 'requir':602,648,718 'resourc':420 'responisibilti':1161 'rest':1004 'restrict':1195 'rich':525 'risk':373 'rout':1080,1087 'rule':610 'run':230,377,607,640,1145 'rust':828 'safe':838 'sandbox':1196 'schedul':856 'secur':180,189,205,275,468,473,516,772 'security-crit':771 'see':1389 'sell':1033 'sensit':337 'serial':1112 'serv':1065 'server':293,319 'serverless':5,11,682,870 'servic':1133 'set':705 'share':443 'short':1361 'short-term':1360 'side':1044 'side-channel':1043 'signific':722,831,1283 'simpler':787 'simplifi':691,732 'sinc':100 'singl':233,383,445,1116 'slot':1104,1107,1123,1137 'small':1094 'smaller':512,832 'socket':1182 'soft':329 'softwar':788 'solut':335,349,497 'sourc':105 'space':1377 'specif':149,547,680 'standard':1415 'start':403,1010 'start-up':402 'starter':557 'startup':587 'sticki':1086 'still':538,917 'stop':1012 'strong':161,179,204,355,945 'stronger':254 'subscript':1333 'success':1363 'suffici':912 'suitabl':727 'support':413,573,782,814,875,889,1323 'surfac':513 'sys':486 'syscal':284,464,499,653 'target':867 'task':1321 'tcb':633 'tcp/ip':1181 'tear':407 'tear-down':406 'technolog':186,1384 'tenant':158 'term':1362 'test':1337 'therefor':794 'think':1017 'thousand':378,1074,1148,1324 'thus':244 'time':588,955,1140,1219 'time-bas':1139 'today':58 'togeth':488 'trade':272,668 'trade-off':271,667 'tradeoff':194,471 'tradit':168 'trillion':1066 'trust':630,965 'tun/tap':862 'type':282 'unaccept':196 'unikernel':592 'uniqu':652 'unit':344 'unmodifi':608 'us':943 'usb':891 'use':95,220,305,562,730,800,844,898,988,1006,1028,1063,1109,1138,1352 'userspac':509 'v8':551 'version':214 'video':892 'view':169 'virtio':896 'virtual':3,81,177,618,810,863,1376,1383,1412 'virtualis':9,144,251,579,580,751 'vm':234 'vmm':84,701,798,950,999 'vmms':621 'vms':150,243,544,548,1327 'want':674,745 'wasteclos':387 'weak':1243 'weaker':188 'weav':127 'weavework':135 'week':32,57 'wherea':1265 'wherebi':414 'wherev':840 'without':397,1341 'word':1355 'work':118 'worker':1078,1084,1099,1144 'workload':236,871 'would':229,350 'wrapper':1187 'year':72 'yet':1317	en	Adrian Colyer
258	[推荐] 面试官：知道时间轮算法吗？在 Netty 和 Kafka 中如何应用的？	{"ver":2,"uid":1,"hash":"SHA1:ccee77472c20fa7fba7f1f4587f45049e14e80bb"}	https://toutiao.io/k/x0uwux4	2020-08-14 07:10:09	[推荐] 面试官：知道时间轮算法吗？在 Netty 和 Kafka 中如何应用的？	49c79ce3e5363df0ca928955d7f48cc674930e4a	\N	f	2020-08-14 07:10:00	2020-08-19 13:10:10.962375	0			'kafka':7,15 'netty':5,13 '中如何应用的':8,16 '和':6,14 '在':4,12 '推荐':1,9 '知道时间轮算法吗':3,11 '面试官':2,10	zh	
512	Elasticsearch Client Bulk 死锁问题处理	{"ver":2,"uid":1,"hash":"SHA1:17ad2765a42e0322a33587c31b277abacbaa63eb"}	https://toutiao.io/k/g3xb2pz	2020-08-22 03:10:09	Elasticsearch Client Bulk 死锁问题处理	f263efeff41845f88fa01e8b527659c3405958ee	\N	f	2020-08-22 03:10:00	2020-08-22 23:10:08.376394	0			'bulk':3,7 'client':2,6 'elasticsearch':1,5 '死锁问题处理':4,8	zh	
516	iPadOS 13.4 + 键盘 + 鼠标：让你的旧 iPad 重获新生	{"ver":2,"uid":1,"hash":"SHA1:8ffe1fa69d2fcacf1702d7f8b0479ecee37fe0a8"}	https://toutiao.io/k/ocb41t3	2020-08-22 03:10:09	iPadOS 13.4 + 键盘 + 鼠标：让你的旧 iPad 重获新生	f8af4ff1a16c642a2aa00bdbbf2e37ad5b4892a7	\N	f	2020-08-22 03:10:00	2020-08-22 23:10:08.384315	0			'13.4':2,9 'ipad':6,13 'ipados':1,8 '让你的旧':5,12 '重获新生':7,14 '键盘':3,10 '鼠标':4,11	zh	
515	[译] Nodejs 与 Golang 的比较：Web 开发人员选择哪个最佳？	{"ver":2,"uid":1,"hash":"SHA1:70f6c9d9efa19a972dc4be626fba7b965cae2435"}	https://toutiao.io/k/n10bb7z	2020-08-22 03:10:09	[译] Nodejs 与 Golang 的比较：Web 开发人员选择哪个最佳？	208a9a4239539a2da5f1bb842b75f26f7d21fb11	\N	f	2020-08-22 03:10:00	2020-08-22 23:10:08.380357	0			'golang':4,11 'nodejs':2,9 'web':6,13 '与':3,10 '开发人员选择哪个最佳':7,14 '的比较':5,12 '译':1,8	zh	
260	[推荐] 这些 MQ 概念你都懂吗：死信队列、重试队列、消息回溯等	{"ver":2,"uid":1,"hash":"SHA1:6fb5e07490805ec18f79da7549faaa894b8a2a84"}	https://toutiao.io/k/w7mh66i	2020-08-14 07:10:09	[推荐] 这些 MQ 概念你都懂吗：死信队列、重试队列、消息回溯等	ff24fdccfac90a7d526d4bee3681444c480430cb	\N	f	2020-08-14 07:10:00	2020-08-14 16:10:08.122775	0			'mq':3,10 '推荐':1,8 '概念你都懂吗':4,11 '死信队列':5,12 '消息回溯等':7,14 '这些':2,9 '重试队列':6,13	zh	
510	[推荐] 滴滴 ElasticSearch 千万级 TPS 写入性能翻倍技术剖析	{"ver":2,"uid":1,"hash":"SHA1:55d55b986feb12dd54f5fde0d81610dfbb898400"}	https://toutiao.io/k/q5376fl	2020-08-25 17:10:08	[推荐] 滴滴 ElasticSearch 千万级 TPS 写入性能翻倍技术剖析	97f7a9bcc6b05eef43754534b616aeb9a6f87163	\N	f	2020-08-22 03:10:00	2020-09-05 15:10:08.065814	0			'elasticsearch':3,9 'tps':5,11 '写入性能翻倍技术剖析':6,12 '千万级':4,10 '推荐':1,7 '滴滴':2,8	zh	
259	[推荐] 字节跳动表格存储中的事务	{"ver":2,"uid":1,"hash":"SHA1:e56b53136583ad7f1018308a60cfe3df6a3ea62f"}	https://toutiao.io/k/u9v4j30	2020-08-14 07:10:09	[推荐] 字节跳动表格存储中的事务	a318c921142b263043ff93a2a54bbd5f0f428bbb	\N	f	2020-08-14 07:10:00	2020-08-20 15:10:09.755183	0			'字节跳动表格存储中的事务':2,4 '推荐':1,3	zh	
513	[推荐] Shell 编码规范	{"ver":2,"uid":1,"hash":"SHA1:d110e37a9acaaee155ef7b43dee2d48df6e8d4e3"}	https://toutiao.io/k/jbo65f6	2020-08-25 17:10:08	[推荐] Shell 编码规范	6a3ec6166474e1c2b58d58352ee9e7d65d5af811	\N	f	2020-08-22 03:10:00	2020-09-05 16:10:09.973059	0			'shell':2,5 '推荐':1,4 '编码规范':3,6	zh	
509	Ride through Wuppertal on ‘the flying train’ in clear footage from 1902	{"ver":2,"uid":1,"hash":"SHA1:4a8ddbd9f9165ec2e3d62c95a999fe6411181d3f"}	https://www.thisiscolossal.com/2020/08/the-flying-train-moma/	2020-08-22 03:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24235035"> https://news.ycombinator.com/item?id=24235035 </a>	41f68efe518cc983b1ebcbf6f93c456a5ddd3502	\N	f	2020-08-22 03:10:00	2020-08-25 13:10:09.290924	0			'/item?id=24235035':16 '1902':12 'clear':9 'comment':13 'fli':6 'footag':10 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24235035':14 'ride':1 'train':7 'wuppert':3	zh	gmays
514	[推荐] 十个问题弄清 JVM & GC（二）	{"ver":2,"uid":1,"hash":"SHA1:70cbde82ba1ba7e7caaaac8c3db2677ec0ef86cc"}	https://toutiao.io/k/v2dq9lz	2020-08-28 01:10:22	[推荐] 十个问题弄清 JVM & GC（二）	90d3d949a94744b2a1e18d95aa3856d1c0d3529b	\N	f	2020-08-22 03:10:00	2020-09-05 16:10:09.979108	0			'gc':4,9 'jvm':3,8 '二':5,10 '十个问题弄清':2,7 '推荐':1,6	zh	
257	Ensure Join or Detach Before Thread Destruction in C++	{"ver":2,"uid":1,"hash":"SHA1:761302ae6d6d8a27fc03d38913243a7a328d8765"}	https://leimao.github.io/blog/CPP-Ensure-Join-Detach-Before-Thread-Destruction/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>When we write multithread C++ programs, we might be curious why we always have to call <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> for the new threads. In some scenarios, if we forgot to call <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> for the new threads, there might be peculiar program crashes which are hard to troubleshoot.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the consequence of not calling <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> for the new threads, and some of the methods that could make sure that <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> for the new threads are always called.</p>\n\n<h3 id="consequences-for-no-join-or-detach">Consequences for No Join or Detach</h3>\n\n<p>The consequence of not calling <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> for the new threads is program termination due to <a href="https://en.cppreference.com/w/cpp/error/terminate"><code class="language-plaintext highlighter-rouge">std::terminate</code></a> was called.</p>\n\n<p><br /></p>\n\n<p>Let’s check the following example. The main function in the main thread instantiated a <code class="language-plaintext highlighter-rouge">new_thread</code> which sleeps 5 seconds, then the main thread itself sleeps 1 second before it goes out of the scope.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example.cpp</span>\n<span class="c1">// g++ -std=c++14 example.cpp -lpthread -o example</span>\n<span class="cp">#include &lt;iostream&gt;\n#include &lt;thread&gt;\n</span>\n<span class="kt">void</span> <span class="nf">thread_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">sleep_seconds</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">verbose</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">id</span> <span class="n">this_id</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">();</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping for "</span> <span class="o">&lt;&lt;</span> <span class="n">sleep_seconds</span> <span class="o">&lt;&lt;</span> <span class="s">" seconds ..."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span> <span class="n">sleep_duration</span><span class="p">{</span><span class="n">sleep_seconds</span><span class="p">};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping complete! "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">new_thread</span><span class="p">{</span><span class="n">thread_sleep</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nb">true</span><span class="p">};</span>\n    <span class="n">thread_sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>\n    <span class="c1">// new_thread.join();</span>\n    <span class="c1">// new_thread.detach();</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n    <span class="c1">// new_thread destructor will be called</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>We compiled the program using the following command.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ -std=c++14 example.cpp -lpthread -o example\n</code></pre></div></div>\n\n<p>When we executed the program, the program crashed.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./example\nThread 139772469839680 sleeping for 1 seconds ...\nThread 139772469835520 sleeping for 5 seconds ...\nThread 139772469839680 sleeping complete! \nterminate called without an active exception\nAborted (core dumped)\n</code></pre></div></div>\n\n<p>This is because, when the execution of the main function finished, the destructor of <code class="language-plaintext highlighter-rouge">new_thread</code> will be automatically called for garbage collection. In the description of the destructor <a href="https://en.cppreference.com/w/cpp/thread/thread/~thread"><code class="language-plaintext highlighter-rouge">std::thread::~thread</code></a>, If <code class="language-plaintext highlighter-rouge">*this</code> has an associated thread (<code class="language-plaintext highlighter-rouge">joinable() == true</code>), <code class="language-plaintext highlighter-rouge">std::terminate()</code> is called. If the <code class="language-plaintext highlighter-rouge">std::thread</code> object has been called with <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code>, <code class="language-plaintext highlighter-rouge">joinable()</code> would become <code class="language-plaintext highlighter-rouge">false</code>, otherwise it is always <code class="language-plaintext highlighter-rouge">true</code>. Because <code class="language-plaintext highlighter-rouge">new_thread</code> had been called with <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> before its destructor was called, <code class="language-plaintext highlighter-rouge">joinable()</code> was <code class="language-plaintext highlighter-rouge">true</code> and <code class="language-plaintext highlighter-rouge">std::terminate()</code> was called and the C++ runtime was killed.</p>\n\n<p><br /></p>\n\n<p>Although it terminates the program brutally, such design has its rationale. Without the <code class="language-plaintext highlighter-rouge">std::terminate()</code> mechanism in the destructor <code class="language-plaintext highlighter-rouge">std::thread::~thread</code>, if the users wanted to do <code class="language-plaintext highlighter-rouge">join()</code>, but forgot to call <code class="language-plaintext highlighter-rouge">join()</code>, the <code class="language-plaintext highlighter-rouge">new_thread</code> will run in the background just like the <code class="language-plaintext highlighter-rouge">detach()</code> behaviors. This might cause undefined behaviors.</p>\n\n<h3 id="caveats">Caveats</h3>\n\n<p>In addition to forget writing <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> in the code, which is easy to find out, sometimes we have written <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> in the code but they were not called due to exceptions. This will also results in program crash and might be difficult to troubleshoot.</p>\n\n<p><br /></p>\n\n<p>The most conventional way is to add <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> in the <code class="language-plaintext highlighter-rouge">catch</code> block.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example.cpp</span>\n<span class="c1">// g++ -std=c++14 example.cpp -lpthread -o example</span>\n<span class="cp">#include &lt;iostream&gt;\n#include &lt;thread&gt;\n</span>\n<span class="kt">void</span> <span class="nf">thread_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">sleep_seconds</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">verbose</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">id</span> <span class="n">this_id</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">();</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping for "</span> <span class="o">&lt;&lt;</span> <span class="n">sleep_seconds</span> <span class="o">&lt;&lt;</span> <span class="s">" seconds ..."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span> <span class="n">sleep_duration</span><span class="p">{</span><span class="n">sleep_seconds</span><span class="p">};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping complete! "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">void</span> <span class="nf">broken_func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">{</span><span class="s">"Runtime error!"</span><span class="p">};</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">new_thread</span><span class="p">{</span><span class="n">thread_sleep</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nb">true</span><span class="p">};</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">thread_sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>\n        <span class="n">broken_func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n        <span class="c1">// join new_thread in the catch block</span>\n        <span class="c1">// since the other join will never be called if there is an exception in the try block</span>\n        <span class="k">if</span> <span class="p">(</span><span class="n">new_thread</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>\n        <span class="p">{</span>\n            <span class="n">new_thread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="p">}</span>\n        <span class="k">throw</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">new_thread</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>There are other ways to deal with the thread issue, such as using RAII.</p>\n\n<p><br /></p>\n\n<p>We could create an instance of <code class="language-plaintext highlighter-rouge">ThreadGuard</code> right after the <code class="language-plaintext highlighter-rouge">std::thread</code> object is created. This instance of <code class="language-plaintext highlighter-rouge">ThreadGuard</code> would make sure the <code class="language-plaintext highlighter-rouge">std::thread</code> object always call <code class="language-plaintext highlighter-rouge">join()</code> or <code class="language-plaintext highlighter-rouge">detach()</code> before going out of scope.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example.cpp</span>\n<span class="c1">// g++ -std=c++14 example.cpp -lpthread -o example</span>\n<span class="cp">#include &lt;iostream&gt;\n#include &lt;thread&gt;\n</span>\n<span class="k">class</span> <span class="nc">ThreadGuard</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="k">explicit</span> <span class="n">ThreadGuard</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&amp;</span> <span class="n">t_</span><span class="p">)</span> <span class="o">:</span> <span class="n">t</span><span class="p">(</span><span class="n">t_</span><span class="p">)</span> <span class="p">{}</span>\n    <span class="o">~</span><span class="n">ThreadGuard</span><span class="p">()</span>\n    <span class="p">{</span>\n        <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>\n        <span class="p">{</span>\n            <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="n">ThreadGuard</span><span class="p">(</span><span class="n">ThreadGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>\n    <span class="n">ThreadGuard</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ThreadGuard</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>\n<span class="nl">private:</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="kt">void</span> <span class="nf">thread_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">sleep_seconds</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">verbose</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">id</span> <span class="n">this_id</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">();</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping for "</span> <span class="o">&lt;&lt;</span> <span class="n">sleep_seconds</span> <span class="o">&lt;&lt;</span> <span class="s">" seconds ..."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span> <span class="n">sleep_duration</span><span class="p">{</span><span class="n">sleep_seconds</span><span class="p">};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping complete! "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">void</span> <span class="nf">broken_func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">{</span><span class="s">"Runtime error!"</span><span class="p">};</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">new_thread</span><span class="p">{</span><span class="n">thread_sleep</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nb">true</span><span class="p">};</span>\n    <span class="c1">// g's destructor will always be called even if an exception throws in the try block</span>\n    <span class="n">ThreadGuard</span> <span class="n">g</span><span class="p">(</span><span class="n">new_thread</span><span class="p">);</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">thread_sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>\n        <span class="n">broken_func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n        <span class="k">throw</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>Implementing some <code class="language-plaintext highlighter-rouge">std::thread</code> wrapper is also not a bad idea. Boost has a <a href="https://www.boost.org/doc/libs/1_74_0/doc/html/thread/ScopedThreads.html"><code class="language-plaintext highlighter-rouge">ScopedThreads</code></a> library whose wrapper implementation is similar to the following <code class="language-plaintext highlighter-rouge">ScopedThread</code> class.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example.cpp</span>\n<span class="c1">// g++ -std=c++14 example.cpp -lpthread -o example</span>\n<span class="cp">#include &lt;iostream&gt;\n#include &lt;thread&gt;\n</span>\n<span class="k">class</span> <span class="nc">ScopedThread</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="k">explicit</span> <span class="n">ScopedThread</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t_</span><span class="p">)</span> <span class="o">:</span> <span class="n">t</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">t_</span><span class="p">))</span>\n    <span class="p">{</span>\n        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">t</span><span class="p">.</span><span class="n">joinable</span><span class="p">())</span>\n        <span class="p">{</span>\n            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">logic_error</span><span class="p">(</span><span class="s">"No thread"</span><span class="p">);</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n    <span class="o">~</span><span class="n">ScopedThread</span><span class="p">()</span>\n    <span class="p">{</span>\n        <span class="n">t</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="n">ScopedThread</span><span class="p">(</span><span class="n">ScopedThread</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>\n    <span class="n">ScopedThread</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">ScopedThread</span> <span class="k">const</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>\n<span class="nl">private:</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="kt">void</span> <span class="nf">thread_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">sleep_seconds</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">verbose</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">::</span><span class="n">id</span> <span class="n">this_id</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">get_id</span><span class="p">();</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping for "</span> <span class="o">&lt;&lt;</span> <span class="n">sleep_seconds</span> <span class="o">&lt;&lt;</span> <span class="s">" seconds ..."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span> <span class="n">sleep_duration</span><span class="p">{</span><span class="n">sleep_seconds</span><span class="p">};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">);</span>\n    <span class="k">if</span> <span class="p">(</span><span class="n">verbose</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">this_id</span> <span class="o">&lt;&lt;</span> <span class="s">" sleeping complete! "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">void</span> <span class="nf">broken_func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">{</span><span class="s">"Runtime error!"</span><span class="p">};</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">func</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">ScopedThread</span> <span class="n">st</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">{</span><span class="n">thread_sleep</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nb">true</span><span class="p">}};</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">thread_sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>\n        <span class="n">broken_func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n        <span class="k">throw</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">try</span>\n    <span class="p">{</span>\n        <span class="n">func</span><span class="p">();</span>\n    <span class="p">}</span>\n    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<h3 id="notes">Notes</h3>\n\n<p>Although program termination during C++ program development and test helps us to find out the missing <code class="language-plaintext highlighter-rouge">join()</code> and <code class="language-plaintext highlighter-rouge">detach()</code> during runtime, if the program is not well tested and the missing <code class="language-plaintext highlighter-rouge">join()</code> and <code class="language-plaintext highlighter-rouge">detach()</code> go into the deployment, it will be a big headache to realize. We don’t want our program to crash during deployment! Try to think of all the possible scenarios, catch the exceptions and deal with them appropriately!</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://www.manning.com/books/c-plus-plus-concurrency-in-action-second-edition">C++ Concurrency in Action, 2nd Edition, Chapter 2</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/CPP-Ensure-Join-Detach-Before-Thread-Destruction/">Ensure Join or Detach Before Thread Destruction in C++</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 13, 2020.</p>	6f41ecb88ffac582d55defe4a87e2fd90e9d4b3c	\N	f	2020-08-14 07:10:00	2020-09-10 05:10:13.414043	0			'+14':168,269,521,722,918 '/example':282 '0':251,653,873,1057 '1':155,246,287,609,857,1041 '13':1177 '139772469835520':290 '139772469839680':284,296 '2':1153 '2020':1178 '2nd':1150 '5':147,242,293,604,832,1036 'abort':305 'action':1149 'activ':303 'add':509 'addit':456 'also':492,894 'although':402,1073 'alway':23,99,371,708,838 'appropri':1144 'associ':344 'august':1176 'automat':326 'background':443 'bad':897 'becom':366 'behavior':448,453 'big':1115 'block':516,629,646,849 'blog':62 'book':1174 'bool':183,536,764,968 'boost':899 'broken':588,611,816,859,1020,1043 'brutal':407 'c':9,15,167,268,398,520,721,917,1077,1146,1162 'call':26,41,73,100,111,127,257,300,327,351,359,378,387,395,434,486,637,709,840 'catch':515,613,628,658,861,878,1045,1062,1137 'caus':451 'caveat':454 'cerr':619,664,867,884,1051,1068 'chapter':1152 'check':130 'chrono':210,563,791,995 'class':731,913,927 'code':465,481 'collect':330 'command':265 'compil':259 'complet':231,298,584,812,1016 'concurr':1147 'consequ':70,101,108 'const':614,659,747,752,862,879,951,956,1046,1063 'convent':505 'core':306 'could':87,683 'cout':198,226,551,579,779,807,983,1011 'crash':54,281,496,1126 'creat':684,696 'curious':20 'deal':673,1141 'delet':748,753,952,957 'deploy':1110,1128 'descript':333 'design':409 'destruct':7,1160 'destructor':254,320,336,385,420,836 'detach':4,29,44,76,93,106,114,363,382,447,462,478,512,712,1091,1106,1157 'develop':1079 'difficult':500 'discuss':68 'due':122,487 'dump':307 'durat':213,222,566,575,794,803,998,1007 'e':617,662,865,882,1049,1066 'e.what':620,665,868,885,1052,1069 'easi':468 'edit':1151 'endl':208,233,561,586,622,667,789,814,870,887,993,1018,1054,1071 'ensur':1,1154 'error':593,595,821,823,944,1025,1027 'even':841 'exampl':133,172,273,525,726,922 'example.cpp':164,169,270,517,522,718,723,914,919 'except':304,489,616,642,661,844,864,881,1048,1065,1139 'execut':276,313 'explicit':734,930 'fals':367,610,858,1042 'find':470,1085 'finish':318 'follow':132,264,911 'forget':458 'forgot':39,432 'func':589,597,612,657,817,825,860,877,1021,1029,1044,1061 'function':136,317 'g':165,266,518,719,834,851,915 'garbag':329 'get':193,546,774,978 'go':714,1107 'goe':159 'hard':57 'headach':1116 'help':1082 'id':187,189,194,201,229,540,542,547,554,582,768,770,775,782,810,972,974,979,986,1014 'idea':898 'implement':888,906 'includ':173,175,526,528,727,729,923,925 'instanc':686,698 'instanti':141 'int':180,234,533,596,654,761,824,874,965,1028,1058 'introduct':10 'iostream':174,527,728,924 'issu':677 'join':2,27,42,74,91,104,112,361,380,430,435,460,476,510,623,633,710,1089,1104,1155 'joinabl':346,364,388 'kill':401 'lei':1167,1170 'let':128 'librari':903 'like':66,445 'log':1173 'logic':943 'lpthread':170,271,523,724,920 'main':135,139,151,235,316,655,875,1059 'make':88,702 'mao':1168,1171 'mechan':417 'method':85 'might':18,50,450,498 'miss':1088,1103 'move':937 'multithread':14 'never':635 'new':32,47,79,96,117,143,238,252,322,374,437,600,624,828,852 'new_thread.detach':249 'new_thread.join':248,649,651 'new_thread.joinable':648 'note':1072 'o':171,272,524,725,921 'object':356,694,707 'oper':750,954 'origin':1164 'otherwis':368 'peculiar':52 'possibl':1135 'post':63 'privat':754,958 'program':16,53,120,261,278,280,406,495,1074,1078,1096,1124 'public':733,929 'publish':1165 'raii':681 'rational':412 'realiz':1118 'refer':1145 'result':493 'return':250,652,872,1056 'right':689 'run':440 'runtim':399,592,594,820,822,1024,1026,1093 'scenario':36,1136 'scope':163,717 'scopedthread':902,912,928,931,947,949,950,953,955,1030 'second':148,156,182,205,206,211,215,288,294,535,558,559,564,568,763,786,787,792,796,967,990,991,996,1000 'similar':908 'sinc':630 'sleep':146,154,179,181,202,204,212,214,219,221,230,241,245,285,291,297,532,534,555,557,565,567,572,574,583,603,608,760,762,783,785,793,795,800,802,811,831,856,964,966,987,989,997,999,1004,1006,1015,1035,1040 'sometim':472 'st':1031 'std':124,166,185,190,197,207,209,216,225,232,236,267,337,348,354,392,415,421,519,538,543,550,560,562,569,578,585,591,598,615,618,621,660,663,666,692,705,720,736,755,766,771,778,788,790,797,806,813,819,826,863,866,869,880,883,886,890,916,932,936,942,959,970,975,982,992,994,1001,1010,1017,1023,1032,1047,1050,1053,1064,1067,1070 'sure':89,703 't.join':744,948 't.joinable':743,940 'termin':121,125,299,349,393,404,416,1075 'test':1081,1100 'think':1131 'thread':6,33,48,80,97,118,140,144,152,176,178,186,192,199,218,227,237,239,240,244,253,283,289,295,323,338,339,345,355,375,422,423,438,529,531,539,545,552,571,580,599,601,602,607,625,676,693,706,730,737,756,759,767,773,780,799,808,827,829,830,853,855,891,926,933,946,960,963,971,977,984,1003,1012,1033,1034,1039,1159 'threadguard':688,700,732,735,741,745,746,749,751,850 'throw':590,650,818,845,871,941,1022,1055 'tri':606,645,656,848,854,876,1038,1060,1129 'troubleshoot':59,502 'true':243,247,347,372,390,605,833,1037 'undefin':452 'us':1083 'use':262,680 'user':426 'verbos':184,196,224,537,549,577,765,777,805,969,981,1009 'void':177,530,587,758,815,962,1019 'want':427,1122 'way':506,671 'well':1099 'whose':904 'without':301,413 'would':65,365,701 'wrapper':892,905 'write':13,459 'written':475	en	Lei Mao
517	Raft 算法之领导人选举	{"ver":2,"uid":1,"hash":"SHA1:9f91dfc200e20764504f187dd73323038ab119d4"}	https://toutiao.io/k/2l2d2pu	2020-08-22 03:10:09	Raft 算法之领导人选举	cb4074e49cf898a2630bd6833f79012a983dece9	\N	f	2020-08-22 03:10:00	2020-08-22 23:10:08.382289	0			'raft':1,3 '算法之领导人选举':2,4	zh	
518	[推荐] Superset，基于 Web 的开源 BI 工具，GitHub 三万 star	{"ver":2,"uid":1,"hash":"SHA1:334f1ffb853b664c8892d7f8f0c5162d920b9c95"}	https://toutiao.io/k/uyj2p7w	2020-09-04 22:10:09	[推荐] Superset，基于 Web 的开源 BI 工具，GitHub 三万 star	eb63055e12517e813a83ed3a5aae06c5c90f498f	\N	f	2020-08-22 03:10:00	2020-09-05 13:10:09.044209	0			'bi':6,16 'github':8,18 'star':10,20 'superset':2,12 'web':4,14 '三万':9,19 '基于':3,13 '工具':7,17 '推荐':1,11 '的开源':5,15	zh	
544	从电源问题出发，带你揭秘新体系结构范式 COA	{"ver":2,"uid":1,"hash":"SHA1:9c260a5ba6339e19003885f43d6f548f6daf007f"}	https://toutiao.io/k/emgf3k6	2020-08-24 01:10:07	从电源问题出发，带你揭秘新体系结构范式 COA	143dc632a0cf5fb6ac8448d053e8c4871943a0c1	\N	f	2020-08-24 01:10:00	2020-08-25 00:10:08.944888	0			'coa':3,6 '从电源问题出发':1,4 '带你揭秘新体系结构范式':2,5	zh	
1090	K8s 上的 Go 服务怎么扩容、发版更新、回滚、平滑重启？教你用 Deployment 全搞定	{"ver":2,"uid":1,"hash":"SHA1:14d528cede2854f1f18641607d628479115587fa"}	https://toutiao.io/k/qbkjrv0	2020-09-09 02:10:12	K8s 上的 Go 服务怎么扩容、发版更新、回滚、平滑重启？教你用 Deployment 全搞定	8cf649d000a0272df9b1774152a4ae29453798b1	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.150984	0			'deployment':9,19 'go':3,13 'k8s':1,11 '上的':2,12 '全搞定':10,20 '发版更新':5,15 '回滚':6,16 '平滑重启':7,17 '教你用':8,18 '服务怎么扩容':4,14	zh	
543	记一次网络请求连接超时的事故	{"ver":2,"uid":1,"hash":"SHA1:11a8ce280946b12aa21452c4e0ccb7051b477787"}	https://toutiao.io/k/6ypc6qi	2020-08-24 01:10:07	记一次网络请求连接超时的事故	d6767e5fb47e786a4be8f4968c2d24b7c82efc93	\N	f	2020-08-24 01:10:00	2020-08-25 00:10:08.928219	0			'记一次网络请求连接超时的事故':1,2	zh	
1089	试用了 2000 多个拓展，最后只留下了这 50 个	{"ver":2,"uid":1,"hash":"SHA1:cc55b0aab6892ea02412dfa32d792f2b337fc1e0"}	https://toutiao.io/k/1yhz4eh	2020-09-09 02:10:12	试用了 2000 多个拓展，最后只留下了这 50 个	916f55489f80a3f2f671fb11d4f860684a73560f	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.155469	0			'2000':2,8 '50':5,11 '个':6,12 '多个拓展':3,9 '最后只留下了这':4,10 '试用了':1,7	zh	
1094	[译] CGO 如何生成兼容 C 的结构体？	{"ver":2,"uid":1,"hash":"SHA1:3769b5334e3a9e7402bbd039f69f0714311e2583"}	https://toutiao.io/k/1tbwqey	2020-09-09 02:10:12	[译] CGO 如何生成兼容 C 的结构体？	c27d26553d18b19dbb1454ccca483fc92bbda62d	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.172062	0			'c':4,9 'cgo':2,7 '如何生成兼容':3,8 '的结构体':5,10 '译':1,6	zh	
1092	不要让远程办公成为团队协作的绊脚石	{"ver":2,"uid":1,"hash":"SHA1:e5f84ee14ca9c8d06aa500d17863e119ca0d30f6"}	https://toutiao.io/k/rqxhxxd	2020-09-09 02:10:12	不要让远程办公成为团队协作的绊脚石	3d8889e3a84638ec432389079579473068d43799	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.169997	0			'不要让远程办公成为团队协作的绊脚石':1,2	zh	
1096	Hive SQL 使用过程中的奇怪现象	{"ver":2,"uid":1,"hash":"SHA1:accd8d8e31735f3ba312540b260c028bc1122f1f"}	https://toutiao.io/k/oisaipn	2020-09-09 02:10:12	Hive SQL 使用过程中的奇怪现象	54f47f954bafb36fd1bbc046a46a26a4d2a1b7bb	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.179853	0			'hive':1,4 'sql':2,5 '使用过程中的奇怪现象':3,6	zh	
1095	创建对象的最佳方式是什么？	{"ver":2,"uid":1,"hash":"SHA1:38ee97e6a372c56df78af74eabb867933f303cbf"}	https://toutiao.io/k/pv6tv2d	2020-09-09 02:10:12	创建对象的最佳方式是什么？	6f5e453ca09e3d349938a65e49aa39bdc00bd0ee	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.15759	0			'创建对象的最佳方式是什么':1,2	zh	
1091	数据湖技术 Iceberg 的探索与实践	{"ver":2,"uid":1,"hash":"SHA1:df5f5c5a64893ac5d365d108307f76a0b8d99514"}	https://toutiao.io/k/e60xpun	2020-09-09 02:10:12	数据湖技术 Iceberg 的探索与实践	c677391213dce6e4a8f66cb5729401c6906b432f	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.168107	0			'iceberg':2,5 '数据湖技术':1,4 '的探索与实践':3,6	zh	
1044	BitTorrent v2	{"ver":2,"uid":1,"hash":"SHA1:feb4dbc0f38f211b35abad2f1fdc7ed1ef5abbbe"}	https://blog.libtorrent.org/2020/09/bittorrent-v2/	2020-09-07 23:10:13	Comments: <a href="https://news.ycombinator.com/item?id=24401999"> https://news.ycombinator.com/item?id=24401999 </a>	e9f73589984517c4fbcd80da5534374e82715283	\N	f	2020-09-07 23:10:00	2020-09-10 05:10:14.165814	0			'/item?id=24401999':6 'bittorr':1 'comment':3 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24401999':4 'v2':2	zh	jakobdabo
993	Common color mistakes and how to avoid them	{"ver":2,"uid":1,"hash":"SHA1:383e2372c4650ac7221048d4b4ee1c086105e79c"}	https://blog.datawrapper.de/beautifulcolors/	2020-09-06 18:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24391049"> https://news.ycombinator.com/item?id=24391049 </a>	62cf2fa04baea09a4f8eaa72f9805c45d64c9088	\N	f	2020-09-06 18:10:00	2020-09-10 05:10:14.168366	0			'/item?id=24391049':12 'avoid':7 'color':2 'comment':9 'common':1 'mistak':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24391049':10	zh	hunvreus
1093	社招面试经历	{"ver":2,"uid":1,"hash":"SHA1:7e471c57010cb53db895ae10594dc2ccf2e2cf2f"}	https://toutiao.io/k/yvm0wbe	2020-09-09 02:10:12	社招面试经历	6116ef851fde4e70ac28c5619515eab8ce06bdb5	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.166096	0			'社招面试经历':1,2	zh	
114	[推荐] 保姆级教程，手把手教你实现一个 Spring Boot 的 starter	{"ver":2,"uid":1,"hash":"SHA1:5015c9fe522243f1e80397ff14d195afde0765e4"}	https://toutiao.io/k/jax48ch	2020-08-14 06:10:09	[推荐] 保姆级教程，手把手教你实现一个 Spring Boot 的 starter	3c9fae056aebfed5c4e499748880a495a60ebdc7	\N	f	2020-08-14 05:06:00	2020-08-20 15:10:09.751139	0			'boot':5,12 'spring':4,11 'starter':7,14 '保姆级教程':2,9 '手把手教你实现一个':3,10 '推荐':1,8 '的':6,13	zh	
1	What’s happening with The Morning Paper?	{"ver":2,"uid":1,"hash":"SHA1:e2cc8a20046fa056e2e3c92f7bd4ea6801b709c6"}	https://blog.acolyer.org/2020/07/08/whats-happening-with-the-morning-paper/	2020-07-08 10:32:24	\n<div class="wp-block-jetpack-markdown"><p>I hope things have been going well for you during the various stages of covid-19 lockdowns. In the UK where I am things are just starting to ease, although it looks like I’ll still be working remotely for a considerable time to come.</p>\n<p>Lockdown so far has been bittersweet for me. Two deaths in my extended family, neither covid related, but both with funerals impacted, and one life-threatening incident in my immediate family (all ok now thank goodness, but it was very stressful at the time!). At the same time it’s been a wonderful opportunity to spend more quality time with my family and I’m grateful for that.</p>\n<p>Covid-19, the lack of in-person schooling for children, and fully remote working have interrupted my routines just like they have for many others. I’ve still been studying pretty hard (it’s almost a form of relaxation and retreat for me), but in a different subject area. <strong>My current intention is to pick up The Morning Paper again for the new academic term, starting in September</strong>. I’ll no doubt have a huge backlog of interesting papers to look at by then &#8211; if you’ve encountered any on your travels that you think I ought to be reading, please do let me know.</p>\n<h2>The Morning Paper is now strattically rendered.</h2>\n<p>There is one exciting thing that’s happened with The Morning Paper during this lockdown period though, but you’ll need to look closely to spot it! Last year I spent some time looking at the <a href="https://jamstack.org">JAM Stack</a> and became enthused by the benefits of statically rendered sites. So when I saw <a href="https://www.strattic.com/">Strattic</a> it immediately resonated with me. Strattic take a WordPress site and convert it into a static site. Visitors to the site get a super-fast browsing experience, publishers continue to be able to use the WordPress authoring experience and plug-in ecosystem, and attackers have next to no surface area to attack (WP has always been a key target due to its popularity and large surface area) because the only public-facing resources are static pages. I’m pleased to say that <a href="https://techcrunch.com/2020/02/26/strattic-raises-6-5m-to-bring-static-wordpress-to-the-masses">Accel invested</a>!</p>\n<p>For historical reasons, The Morning Paper has always been hosted on WordPress (at WordPress.com, which I was very happy with, not wanting to maintain my own WordPress installation). Over the last few weeks though, The Morning Paper has moved over to Strattic. What you should mostly see is much faster page-loads. The commenting system has also changed (as it can no longer rely on server-side WordPress components), but all existing comments have been imported. I do lose the site analytics (number of visitors etc.) that came for free with WordPress.com. There are JAMStack options for restoring that, but I prefer not to track visitors at all. One nice side-benefit to this is that I can finally get more control over the rendering of math in posts (which should also work better for those of you using screen-reading devices). I do need to go back over old posts and update them to replace the WordPress <code>$latex</code> math prefix with the straightforward and more conventional plain <code>$</code> delimiting, and I’ll be working my way through them over the next couple of weeks.</p>\n<p>A huge thank you to the team at Strattic for helping me with the migration. If like many companies you’re powering a website or blog with WordPress, it’s well worth checking them out!</p>\n</div>\n	09994f4aab9d17aa4e95ef7cbda066692db84989	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.112319	0	https://blog.acolyer.org/2020/07/08/whats-happening-with-the-morning-paper/#respond		'-19':23,123 'abl':320 'academ':186 'accel':373 'almost':157 'also':432,509 'although':37 'alway':344,382 'analyt':458 'area':171,339,356 'attack':333,341 'author':325 'back':526 'backlog':198 'becam':274 'benefit':278,489 'better':511 'bittersweet':58 'blog':588 'brows':314 'came':464 'chang':433 'check':595 'children':132 'close':258 'come':52 'comment':429,449 'compani':581 'compon':445 'consider':49 'continu':317 'control':499 'convent':545 'convert':299 'coupl':560 'covid':22,68,122 'current':173 'death':62 'delimit':547 'devic':520 'differ':169 'doubt':194 'due':349 'eas':36 'ecosystem':331 'encount':210 'enthus':275 'etc':462 'excit':238 'exist':448 'experi':315,326 'extend':65 'face':362 'famili':66,84,115 'far':55 'fast':313 'faster':424 'final':496 'form':159 'free':466 'fulli':134 'funer':73 'get':309,497 'go':13,525 'good':89 'grate':119 'happen':3,242 'happi':393 'hard':154 'help':573 'histor':376 'hope':9 'host':384 'huge':197,564 'immedi':83,289 'impact':74 'import':452 'in-person':127 'incid':80 'instal':402 'intent':174 'interest':200 'interrupt':138 'invest':374 'jam':271 'jamstack':471 'key':347 'know':227 'lack':125 'larg':354 'last':262,405 'latex':537 'let':225 'life':78 'life-threaten':77 'like':40,142,579 'll':42,192,254,550 'load':427 'lockdown':24,53,249 'longer':438 'look':39,203,257,268 'lose':455 'm':118,368 'maintain':398 'mani':146,580 'math':504,538 'migrat':577 'morn':6,180,229,245,379,410 'most':420 'move':413 'much':423 'need':255,523 'neither':67 'new':185 'next':335,559 'nice':486 'number':459 'ok':86 'old':528 'one':76,237,485 'opportun':107 'option':472 'other':147 'ought':219 'page':366,426 'page-load':425 'paper':7,181,201,230,246,380,411 'period':250 'person':129 'pick':177 'plain':546 'pleas':223,369 'plug':329 'plug-in':328 'popular':352 'post':506,529 'power':584 'prefer':478 'prefix':539 'pretti':153 'public':361 'public-fac':360 'publish':316 'qualiti':111 're':583 'read':222,519 'reason':377 'relat':69 'relax':161 'reli':439 'remot':46,135 'render':234,281,502 'replac':534 'reson':290 'resourc':363 'restor':474 'retreat':163 'routin':140 'saw':286 'say':371 'school':130 'screen':518 'screen-read':517 'see':421 'septemb':190 'server':442 'server-sid':441 'side':443,488 'side-benefit':487 'site':282,297,304,308,457 'spend':109 'spent':265 'spot':260 'stack':272 'stage':20 'start':34,188 'static':280,303,365 'still':43,150 'straightforward':542 'strattic':233,287,293,416,571 'stress':94 'studi':152 'subject':170 'super':312 'super-fast':311 'surfac':338,355 'system':430 'take':294 'target':348 'team':569 'term':187 'thank':88,565 'thing':10,31,239 'think':217 'though':251,408 'threaten':79 'time':50,97,101,112,267 'track':481 'travel':214 'two':61 'uk':27 'updat':531 'use':322,516 'various':19 've':149,209 'visitor':305,461,482 'want':396 'way':554 'websit':586 'week':407,562 'well':14,593 'wonder':106 'wordpress':296,324,386,401,444,536,590 'wordpress.com':388,468 'work':45,136,510,552 'worth':594 'wp':342 'year':263	en	Adrian Colyer
545	Raft 算法之集群成员变更	{"ver":2,"uid":1,"hash":"SHA1:ce5fc8ea7e325579a32e64adeabf5bd4bed704b4"}	https://toutiao.io/k/l6me8fz	2020-08-24 01:10:07	Raft 算法之集群成员变更	8c0334c37a19c0af65d3514911a108dfdaac3d3d	\N	f	2020-08-24 01:10:00	2020-08-25 00:10:08.936674	0			'raft':1,3 '算法之集群成员变更':2,4	zh	
1040	Tech workers flee Belarus as IT haven takes authoritarian turn	{"ver":2,"uid":1,"hash":"SHA1:fdb4523610ed3a4a9de4844fe8fb635778a6519c"}	https://www.bloombergquint.com/businessweek/belarus-protests-tech-workers-flee-as-country-takes-authoritarian-turn	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24392905"> https://news.ycombinator.com/item?id=24392905 </a>	94c0ef34137726b7f5942c6a174601bece68f65d	\N	f	2020-09-07 19:10:00	2020-09-08 05:10:10.869183	0			'/item?id=24392905':14 'authoritarian':9 'belarus':4 'comment':11 'flee':3 'haven':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24392905':12 'take':8 'tech':1 'turn':10 'worker':2	zh	warpech
906	Iranian law prohibits merge of PR from Israeli?	{"ver":2,"uid":1,"hash":"SHA1:6e5bec0476623b7c8dce60537d099d9968ab9517"}	https://github.com/armancodes/laravel-download-link/pull/9#issuecomment-683417436	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24364793"> https://news.ycombinator.com/item?id=24364793 </a>	14fefbb749ba7d10d1cf0e15f2338d8c1156ebc9	\N	f	2020-09-03 20:10:00	2020-09-05 18:10:10.429921	0			'/item?id=24364793':12 'comment':9 'iranian':1 'isra':8 'law':2 'merg':4 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24364793':10 'pr':6 'prohibit':3	zh	jonahbenton
895	How I built a keyboard/video/mouse switch for my two 4k monitors	{"ver":2,"uid":1,"hash":"SHA1:c59625ce86718db34c27169c682e24a5fa821bbe"}	https://haim.dev/posts/2020-07-28-dual-monitor-kvm/	2020-09-03 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24357308"> https://news.ycombinator.com/item?id=24357308 </a>	4f7e2989046e62267acda819ae645c874168c03d	\N	f	2020-09-03 07:10:00	2020-09-06 22:10:10.346779	0			'/item?id=24357308':15 '4k':10 'built':3 'comment':12 'keyboard/video/mouse':5 'monitor':11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24357308':13 'switch':6 'two':9	zh	car
542	[推荐] 微服务技术栈：API 网关中心，落地实现方案	{"ver":2,"uid":1,"hash":"SHA1:5e934af8f929b102ba48b640776aa8283daa8a88"}	https://toutiao.io/k/5fjxacf	2020-08-27 17:10:13	[推荐] 微服务技术栈：API 网关中心，落地实现方案	05f11ca3f63ac0fdc7c055193c5c732f45f10f42	\N	f	2020-08-24 01:10:00	2020-09-07 15:10:13.962531	0			'api':3,8 '微服务技术栈':2,7 '推荐':1,6 '网关中心':4,9 '落地实现方案':5,10	zh	
101	[推荐] 高并发系统三大利器之限流	{"ver":2,"uid":1,"hash":"SHA1:e46d772a6925d576a22164d924c5d26a0a5ef47f"}	https://toutiao.io/k/1514ax3	2020-08-19 02:10:09	[推荐] 高并发系统三大利器之限流	28c1fd4cb0d34364e271a4fbeca40ec555a6e175	\N	f	2020-08-14 05:06:00	2020-08-28 15:10:10.976451	0			'推荐':1,3 '高并发系统三大利器之限流':2,4	zh	
946	Costs of running a Python webapp for 55k monthly users	{"ver":2,"uid":1,"hash":"SHA1:523267bcce69d83980c1ea1915cb1ec028d46b5e"}	https://keepthescore.co/blog/posts/costs-of-running-webapp/	2020-09-04 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24372084"> https://news.ycombinator.com/item?id=24372084 </a>	e9f3bdbb1c22d999ead9fe9a20ae067d62cb08cb	\N	f	2020-09-04 23:10:00	2020-09-07 17:10:10.074112	0			'/item?id=24372084':14 '55k':8 'comment':11 'cost':1 'month':9 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24372084':12 'python':5 'run':3 'user':10 'webapp':6	zh	caspii
148	Scheduling In Go : Part III - Concurrency	{"ver":2,"uid":1,"hash":"SHA1:478e0004b817b6766c8c9074be0313ee89de1177"}	https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html	2018-12-05 00:00:00	Prelude This is the third post in a three part series that will provide an understanding of the mechanics and semantics behind the scheduler in Go. This post focuses on concurrency.\nIndex of the three part series:\n1) Scheduling In Go : Part I - OS Scheduler\n2) Scheduling In Go : Part II - Go Scheduler\n3) Scheduling In Go : Part III - Concurrency\nIntroduction When I’m solving a problem, especially if it’s a new problem, I don’t initially think about whether concurrency is a good fit or not.	5634baeb097ecdca8cd767cefc5c98b904dd1cc4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.442034	0			'1':44 '2':52 '3':60 'behind':28 'concurr':6,37,66,88 'especi':74 'fit':92 'focus':35 'go':3,32,47,55,58,63 'good':91 'ii':57 'iii':5,65 'index':38 'initi':84 'introduct':67 'm':70 'mechan':25 'new':79 'os':50 'part':4,16,42,48,56,64 'post':12,34 'prelud':7 'problem':73,80 'provid':20 'schedul':1,30,45,51,53,59,61 'semant':27 'seri':17,43 'solv':71 'think':85 'third':11 'three':15,41 'understand':22 'whether':87	en	
1046	LeetCode (28)：实现 strStr()	{"ver":2,"uid":1,"hash":"SHA1:9c479b460e82aca8e7b785374fff753250f510cc"}	https://toutiao.io/k/xogyblt	2020-09-08 01:10:11	LeetCode (28)：实现 strStr()	201ee037567bd4637e5a2a8b86fead56ed3e2b94	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.488444	0			'28':2,6 'leetcode':1,5 'strstr':4,8 '实现':3,7	zh	
1045	工具 | 京东 App 后台中间件	{"ver":2,"uid":1,"hash":"SHA1:ca8d1b989d9f809a43f4883cabcfb4d51a7cdd90"}	https://toutiao.io/k/0ren1cq	2020-09-08 01:10:11	工具 | 京东 App 后台中间件	1b387f80a2648b91e5b1607e6ccbd85527ce4fb4	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.490765	0			'app':3,7 '京东':2,6 '后台中间件':4,8 '工具':1,5	zh	
389	Umami: Self-hosted open-source alternative to Google Analytics	{"ver":2,"uid":1,"hash":"SHA1:075c8e4dca6355bd78f19a525ba71570b045bed0"}	https://umami.is/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24198329"> https://news.ycombinator.com/item?id=24198329 </a>	582fae0454b6021d4c7da578ac2009b502fab637	\N	f	2020-08-18 21:10:00	2020-08-21 06:10:09.888917	0			'/item?id=24198329':15 'altern':8 'analyt':11 'comment':12 'googl':10 'host':4 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24198329':13 'open':6 'open-sourc':5 'self':3 'self-host':2 'sourc':7 'umami':1	zh	bananaoomarang
265	Feds say Yale discriminates against Asian, white applicants	{"ver":2,"uid":1,"hash":"SHA1:40c41a52e9add42e45fbb874a04de2b4d2c69289"}	https://apnews.com/e97f08eb935989840bda430bb7a32e15	2020-08-14 08:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24149352"> https://news.ycombinator.com/item?id=24149352 </a>	b7236459a12366bbc084d82c4492129c7c26eb2c	\N	f	2020-08-14 08:10:00	2020-08-17 06:10:07.755975	0			'/item?id=24149352':12 'applic':8 'asian':6 'comment':9 'discrimin':4 'fed':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24149352':10 'say':2 'white':7 'yale':3	zh	pizza
390	Popular seafood species in sharp decline around the world	{"ver":2,"uid":1,"hash":"SHA1:e75a38104d6129ea34211a3c852399f00df5a4ab"}	https://news.ubc.ca/2020/07/21/popular-seafood-species-in-sharp-decline-around-the-world/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24199767"> https://news.ycombinator.com/item?id=24199767 </a>	eba281358627ac1828a30a4bea2f9c185c577cbd	\N	f	2020-08-18 21:10:00	2020-08-21 06:10:09.943808	0			'/item?id=24199767':13 'around':7 'comment':10 'declin':6 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24199767':11 'popular':1 'seafood':2 'sharp':5 'speci':3 'world':9	zh	InInteraction
1047	[译] Vue.js 构建工具比较	{"ver":2,"uid":1,"hash":"SHA1:875bcd24125b53973a848e41dc2f12d0c196ec99"}	https://toutiao.io/k/za7y69r	2020-09-08 01:10:11	[译] Vue.js 构建工具比较	93559a593177f31237b08f24a1e2e199127681d0	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.501671	0			'vue.js':2,5 '构建工具比较':3,6 '译':1,4	zh	
546	macOS Security and Privacy Guide	{"ver":2,"uid":1,"hash":"SHA1:4134745f86de607481499ca4f06d2f6b4048ad3e"}	https://github.com/drduh/macOS-Security-and-Privacy-Guide	2020-08-24 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24242890"> https://news.ycombinator.com/item?id=24242890 </a>	a33799234d53bb9a8d89f94288619af32d09cb8d	\N	f	2020-08-24 02:10:00	2020-08-25 07:10:10.182702	0			'/item?id=24242890':9 'comment':6 'guid':5 'maco':1 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24242890':7 'privaci':4 'secur':2	zh	Nginx487
228	Understanding Pointers and Memory Allocation	{"ver":2,"uid":1,"hash":"SHA1:1c999493470b84c1e0da20614f9966f2b6381cb9"}	https://www.ardanlabs.com/blog/2013/07/understanding-pointers-and-memory.html	2013-07-27 00:00:00	In the documentation provided by the Go language team you will find great information on pointers and memory allocation. Here is a link to that documentation:\nhttp://golang.org/doc/faq#Pointers\nWe need to start with the understanding that all variables contain a value. Based on the type that variable represents will determine how we can use it to manipulate the memory it contains. Read this post to learn more:&nbsp;Understanding Type In Go	eb3a467cd76107147013859b07c7a2e31de67e71	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.596493	0			'/doc/faq#pointers':34 'alloc':5,24 'base':48 'contain':45,67 'determin':56 'document':8,31 'find':17 'go':12,77 'golang.org':33 'golang.org/doc/faq#pointers':32 'great':18 'inform':19 'languag':13 'learn':72 'link':28 'manipul':63 'memori':4,23,65 'need':36 'pointer':2,21 'post':70 'provid':9 'read':68 'repres':54 'start':38 'team':14 'type':51,75 'understand':1,41,74 'use':60 'valu':47 'variabl':44,53	en	
547	Ketamine that's injected during arrests draws new scrutiny	{"ver":2,"uid":1,"hash":"SHA1:ef761150055806c45b6b6ac48d00f8ba5b90d207"}	https://abcnews.go.com/Health/wireStory/ketamine-injected-arrests-draws-scrutiny-72542386	2020-08-24 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24249369"> https://news.ycombinator.com/item?id=24249369 </a>	ea83f6bccbb2ad1026f6c0ce99b2dc65ea5b1505	\N	f	2020-08-24 02:10:00	2020-08-25 13:10:09.288901	0			'/item?id=24249369':13 'arrest':6 'comment':10 'draw':7 'inject':4 'ketamin':1 'new':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24249369':11 'scrutini':9	zh	seigando
1049	Golang 汇编入门知识总结	{"ver":2,"uid":1,"hash":"SHA1:a2c0c9382292e61f9bc2fbf5def6caa5eef91639"}	https://toutiao.io/k/hol28ow	2020-09-08 01:10:11	Golang 汇编入门知识总结	9a894e6c036f76875f87b3da5d02a7f56cc9dd5b	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.493177	0			'golang':1,3 '汇编入门知识总结':2,4	zh	
392	Mindfulness and meditation can worsen depression and anxiety	{"ver":2,"uid":1,"hash":"SHA1:896315d7f7184ae99c54e72daee92e830f2701a1"}	https://www.newscientist.com/article/2251840-mindfulness-and-meditation-can-worsen-depression-and-anxiety/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24185710"> https://news.ycombinator.com/item?id=24185710 </a>	6ab81f0fd4578b1b851e3c4065a39ab1a104399a	\N	f	2020-08-18 21:10:00	2020-08-19 17:10:08.913956	0			'/item?id=24185710':12 'anxieti':8 'comment':9 'depress':6 'medit':3 'mind':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24185710':10 'worsen':5	zh	ingve
267	Factorio 1.0	{"ver":2,"uid":1,"hash":"SHA1:537698719d901781a4ea6b3a2ba6466395e4d5b2"}	https://factorio.com/blog/post/fff-360	2020-08-14 14:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24155609"> https://news.ycombinator.com/item?id=24155609 </a>	a7149fca2ac4e1c3b82bf6c37ae935e692609aa2	\N	f	2020-08-14 14:10:00	2020-08-18 02:10:08.387395	0			'/item?id=24155609':6 '1.0':2 'comment':3 'factorio':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24155609':4	zh	Akronymus
235	Running Go Programs as a Background Process	{"ver":2,"uid":1,"hash":"SHA1:373bed8e036718da897fc4777b9cf94d05742307"}	https://www.ardanlabs.com/blog/2013/06/running-go-programs-as-background.html	2013-06-24 00:00:00	I have been writing Windows services in C/C++ and then in C# since 1999. Now that I am writing server based software in Go for the Linux OS I am completely lost. What is even more&nbsp;frustrating,&nbsp;is that for the first time the OS I am developing on (Mac OSX) is not the operating system I will be deploying my code on. That will be for another blog post.\nI want to run my code as a background process (daemon) on my Mac.	608aab028d4f4f5e28051d80a68aab5917ee261d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.61067	0			'1999':21 'anoth':75 'background':6,86 'base':28 'blog':76 'c':19 'c/c':15 'code':69,83 'complet':38 'daemon':88 'deploy':67 'develop':55 'even':42 'first':49 'frustrat':44 'go':2,31 'linux':34 'lost':39 'mac':57,91 'oper':62 'os':35,52 'osx':58 'post':77 'process':7,87 'program':3 'run':1,81 'server':27 'servic':13 'sinc':20 'softwar':29 'system':63 'time':50 'want':79 'window':12 'write':11,26	en	
1050	DDD：降低甚至消除问题域和解决方案域的壁垒	{"ver":2,"uid":1,"hash":"SHA1:b919e79302543d863761d4179a1f5bafa2c837fe"}	https://toutiao.io/k/q1yw3ra	2020-09-08 01:10:11	DDD：降低甚至消除问题域和解决方案域的壁垒	144e3c5f761dd202787abfc89e2448ce12d49802	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.497562	0			'ddd':1,3 '降低甚至消除问题域和解决方案域的壁垒':2,4	zh	
1048	算法工程师的数学基础：如何理解概率分布函数和概率密度函数	{"ver":2,"uid":1,"hash":"SHA1:a64612f09e0e20586f217ee1ccd3f769bbbfee64"}	https://toutiao.io/k/5ntsdsw	2020-09-08 01:10:11	算法工程师的数学基础：如何理解概率分布函数和概率密度函数	38f9c59e41d7e611a2fc29677ecce393a30fc26f	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.503792	0			'如何理解概率分布函数和概率密度函数':2,4 '算法工程师的数学基础':1,3	zh	
391	Dear Apple: Your Services Are No Longer Required	{"ver":2,"uid":1,"hash":"SHA1:e6f6380f5c0c1d4b9f6510ce991d123e686950ed"}	https://lowendmac.com/2020/dear-apple-your-services-are-no-longer-required/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24201651"> https://news.ycombinator.com/item?id=24201651 </a>	35fae42fc8b806dfe8a862cae941b6cb88f2e4b3	\N	f	2020-08-18 21:10:00	2020-08-21 06:10:09.925043	0			'/item?id=24201651':12 'appl':2 'comment':9 'dear':1 'longer':7 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24201651':10 'requir':8 'servic':4	zh	raydev
393	Architecture of the Nintendo DS	{"ver":2,"uid":1,"hash":"SHA1:1740d73393401282db2d4031ec90a1f2400a6492"}	https://www.copetti.org/projects/consoles/nintendo-ds/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24195751"> https://news.ycombinator.com/item?id=24195751 </a>	7dce5ad68e260e1a293b01c808c32747023ccd30	\N	f	2020-08-18 21:10:00	2020-08-21 06:10:09.957018	0			'/item?id=24195751':9 'architectur':1 'comment':6 'ds':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24195751':7 'nintendo':4	zh	Polylactic_acid
939	Digital pregnancy tests have an internal paper test	{"ver":2,"uid":1,"hash":"SHA1:87052b83c47518e9480f082f8b132b099e06db5d"}	https://twitter.com/Foone/status/1301707401024827392	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24371703"> https://news.ycombinator.com/item?id=24371703 </a>	f6d5c4fdde6df1c679525f8d32f30a835cb4353e	\N	f	2020-09-04 20:10:00	2020-09-07 17:10:10.041711	0			'/item?id=24371703':12 'comment':9 'digit':1 'intern':6 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24371703':10 'paper':7 'pregnanc':2 'test':3,8	zh	nsriv
1051	史诗级 Java 低时延调优案例（一）	{"ver":2,"uid":1,"hash":"SHA1:c8606f88c2fae0327ca79f54ac3d3cfda54925b4"}	https://toutiao.io/k/ywhve25	2020-09-08 01:10:11	史诗级 Java 低时延调优案例（一）	fcee53a1e18dc7734d119fa578011f6c43407398	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.486074	0			'java':2,6 '一':4,8 '低时延调优案例':3,7 '史诗级':1,5	zh	
1052	Python 一键批量下载抖音无水印视频	{"ver":2,"uid":1,"hash":"SHA1:982feba1369297fafddeb84bb3b4a69aa34ab5a2"}	https://toutiao.io/k/5disjh5	2020-09-08 01:10:11	Python 一键批量下载抖音无水印视频	e73b21b529f35bd41107bf8c292d80b6e7dd0cc7	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.499604	0			'python':1,3 '一键批量下载抖音无水印视频':2,4	zh	
137	Integration Testing in Go: Part II - Set-up and Writing Tests	{"ver":2,"uid":1,"hash":"SHA1:9e10a92b0b373acfd5ef68c17953bf567c57de2e"}	https://www.ardanlabs.com/blog/2019/10/integration-testing-in-go-set-up-and-writing-tests.html	2019-10-03 00:00:00	Prelude This post is the 2nd installment of a 2 part series about integration testing. You can read the first installment, which is about executing tests in a restricted environment using Docker. The example repository that this post draws it examples from can be found here.\nIntroduction ”More than the act of testing, the act of designing tests is one of the best bug preventers known.” - Boris Beizer	1d7ccb61c21e752a573e4a58151acd60d2d245ba	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.419119	0			'2':22 '2nd':18 'act':63,67 'beizer':80 'best':75 'bori':79 'bug':76 'design':69 'docker':44 'draw':51 'environ':42 'exampl':46,53 'execut':37 'first':32 'found':57 'go':4 'ii':6 'instal':19,33 'integr':1,26 'introduct':59 'known':78 'one':72 'part':5,23 'post':15,50 'prelud':13 'prevent':77 'read':30 'repositori':47 'restrict':41 'seri':24 'set':8 'set-up':7 'test':2,12,27,38,65,70 'use':43 'write':11	en	
394	USPS Files Patent for a Blockchain-Based Voting System	{"ver":2,"uid":1,"hash":"SHA1:c6e3ae7952c5dbaaaa44fc5595e90a287b37aaca"}	https://heraldsheets.com/us-postal-service-usps-files-patent-for-blockchain-based-voting-system/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24176151"> https://news.ycombinator.com/item?id=24176151 </a>	6480a365c491a7b9452a3a61b21bdc05389df32e	\N	f	2020-08-18 21:10:00	2020-08-19 10:10:13.168826	0			'/item?id=24176151':14 'base':8 'blockchain':7 'blockchain-bas':6 'comment':11 'file':2 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24176151':12 'patent':3 'system':10 'usp':1 'vote':9	zh	seigando
551	软件开发项目里千万要避开的几种人	{"ver":2,"uid":1,"hash":"SHA1:6c2abdc6619d4fb270db0453d238d34eaab70779"}	https://toutiao.io/k/wi6a6vk	2020-08-24 02:10:08	软件开发项目里千万要避开的几种人	34f099b744f49ec8c827f5a67721ff211d762021	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.923972	0			'软件开发项目里千万要避开的几种人':1,2	zh	
549	Over three billion people worldwide now play video games, study reports	{"ver":2,"uid":1,"hash":"SHA1:0cc8da524267e7b2a94a21f6025e768e57003dcd"}	https://nintendosmash.com/over-three-billion-people-worldwide-now-play-video-games-study-reports/	2020-08-24 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24239234"> https://news.ycombinator.com/item?id=24239234 </a>	559ca686cc793c7f03ec556f26d6db13316684d3	\N	f	2020-08-24 02:10:00	2020-08-24 20:10:08.620086	0			'/item?id=24239234':15 'billion':3 'comment':12 'game':9 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24239234':13 'peopl':4 'play':7 'report':11 'studi':10 'three':2 'video':8 'worldwid':5	zh	Gamermeme
550	程序员戴耳机敲代码，到底在听啥？	{"ver":2,"uid":1,"hash":"SHA1:ea432a3b7e98d4dc3603cb91033d771571541ed9"}	https://toutiao.io/k/drl9p2q	2020-08-24 02:10:08	程序员戴耳机敲代码，到底在听啥？	3fb331808c962be885544eb3cbf70711780e25a6	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.926215	0			'到底在听啥':2,4 '程序员戴耳机敲代码':1,3	zh	
553	“锟斤拷” 的前世今生	{"ver":2,"uid":1,"hash":"SHA1:7da83c5b3a811aadd1bea83fdce5f2b1b2470028"}	https://toutiao.io/k/pv95vn7	2020-08-24 02:10:08	“锟斤拷” 的前世今生	bac83be6dff51b19de91be78631384373d4d09ab	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.940923	0			'的前世今生':2,4 '锟斤拷':1,3	zh	
552	[译] 更有效使用 GitHub 的 4 个技巧	{"ver":2,"uid":1,"hash":"SHA1:a844c738fd0c5e742f9b6b6812ac1adbd690ea07"}	https://toutiao.io/k/3oswfvq	2020-08-24 02:10:08	[译] 更有效使用 GitHub 的 4 个技巧	959f86e877f2d70f2bc4ea5fbca1a5dcd8860fa0	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.942905	0			'4':5,11 'github':3,9 '个技巧':6,12 '更有效使用':2,8 '的':4,10 '译':1,7	zh	
557	Apache Pulsar 在 BIGO 的性能调优实战（上）	{"ver":2,"uid":1,"hash":"SHA1:774c3447267b83158b17484b4753e2b8234e36bb"}	https://toutiao.io/k/vd8iqvp	2020-08-24 02:10:09	Apache Pulsar 在 BIGO 的性能调优实战（上）	de1387135aec681b9fed38a14bee73d8cedb4ec6	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.946885	0			'apache':1,7 'bigo':4,10 'pulsar':2,8 '上':6,12 '在':3,9 '的性能调优实战':5,11	zh	
558	这是一份 pip 常用命令小结	{"ver":2,"uid":1,"hash":"SHA1:b7fa1b1806550d719cc0906462c89e5f5931f7ce"}	https://toutiao.io/k/cv1z9qw	2020-08-24 02:10:09	这是一份 pip 常用命令小结	cbc9e172d81dc611e9c4a088cf2cb7432c7496c6	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.94888	0			'pip':2,5 '常用命令小结':3,6 '这是一份':1,4	zh	
397	Show HN: I made an extension to watch Netflix films with screenplays in sync	{"ver":2,"uid":1,"hash":"SHA1:f7a8f2f1a616e7d7b7dfccc51b6caa2f94d8028d"}	https://screenplaysubs.com/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24178295"> https://news.ycombinator.com/item?id=24178295 </a>	280dca26f41a01b3972aa00cd06bdfbad8974d3f	\N	f	2020-08-18 21:10:00	2020-08-19 06:10:08.376942	0			'/item?id=24178295':18 'comment':15 'extens':6 'film':10 'hn':2 'made':4 'netflix':9 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24178295':16 'screenplay':12 'show':1 'sync':14 'watch':8	zh	justEgan
1054	如何提高代码质量	{"ver":2,"uid":1,"hash":"SHA1:33a193be1333e95cab6e68101dd37a8b169478cb"}	https://toutiao.io/k/b5x6wql	2020-09-08 01:10:11	如何提高代码质量	e20606aa553e08ce235157cab29a31569c2af5f5	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.495301	0			'如何提高代码质量':1,2	zh	
556	RecyclerView Adapter 系列之集成 Lifecycle	{"ver":2,"uid":1,"hash":"SHA1:f0b07bbd43a3fabde4570bb37e548177a54e098b"}	https://toutiao.io/k/tpcgkbv	2020-08-24 02:10:09	RecyclerView Adapter 系列之集成 Lifecycle	c3926b5f1706c61ec3f58e6c0b275dbb96280076	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.952815	0			'adapter':2,6 'lifecycle':4,8 'recyclerview':1,5 '系列之集成':3,7	zh	
1055	终于弄明白了 Singleton, Transient, Scoped 的作用域是如何实现的	{"ver":2,"uid":1,"hash":"SHA1:dfddfea89d6718bf1729cd4cc3e5edec048bad51"}	https://toutiao.io/k/qq1az5m	2020-09-08 08:10:10	终于弄明白了 Singleton, Transient, Scoped 的作用域是如何实现的	184ab6efe6ac8a4c60f2c621d6afef56c22d1217	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.505955	0			'scoped':4,9 'singleton':2,7 'transient':3,8 '的作用域是如何实现的':5,10 '终于弄明白了':1,6	zh	
396	Mailto: ?attach=~/ parameter allows including arbitrary files on disk	{"ver":2,"uid":1,"hash":"SHA1:09d017168127f817331dc6a33e8a18f25e5747e4"}	https://twitter.com/jensvoid/status/1295357952480751616	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24196625"> https://news.ycombinator.com/item?id=24196625 </a>	d06340e1290a409eee1ecdd541a0772682da8f8c	\N	f	2020-08-18 21:10:00	2020-08-20 05:10:10.202438	0			'/item?id=24196625':13 'allow':4 'arbitrari':6 'attach':2 'comment':10 'disk':9 'file':7 'includ':5 'mailto':1 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24196625':11 'paramet':3	zh	Garbage
398	Linux PinePhone has physical kill switches for its cameras, mic, data, BT, Wi-Fi	{"ver":2,"uid":1,"hash":"SHA1:7903dd394f8666b5ffcffd015031a0aec597c36b"}	https://www.androidpolice.com/2020/08/15/this-smartphone-has-physical-kill-switches-for-its-cameras-microphone-data-bluetooth-and-wi-fi/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24184091"> https://news.ycombinator.com/item?id=24184091 </a>	e8093e674d78c6a477b52d4dc74eb296770b47ed	\N	f	2020-08-18 21:10:00	2020-08-18 23:10:08.529424	0			'/item?id=24184091':19 'bt':12 'camera':9 'comment':16 'data':11 'fi':15 'kill':5 'linux':1 'mic':10 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24184091':17 'physic':4 'pinephon':2 'switch':6 'wi':14 'wi-fi':13	zh	ashitlerferad
399	Pure Skill Minesweeper	{"ver":2,"uid":1,"hash":"SHA1:e05b51fb8414f437025a364d5c184e51b1cd679f"}	https://github.andrewt.net/mines/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24181772"> https://news.ycombinator.com/item?id=24181772 </a>	3cddfc08afcee7f45471614bafb5e694a6feb3ce	\N	f	2020-08-18 21:10:00	2020-08-18 23:10:08.532172	0			'/item?id=24181772':7 'comment':4 'minesweep':3 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24181772':5 'pure':1 'skill':2	zh	ColinWright
559	高并发下比 AtomicLong 性能更好的 LongAdder	{"ver":2,"uid":1,"hash":"SHA1:b1eda7f72d11142a83a22957e70d9f7b5f06a36a"}	https://toutiao.io/k/oa38hlw	2020-08-24 02:10:09	高并发下比 AtomicLong 性能更好的 LongAdder	a6d5242a1d6c22f685e94726d7843177f3017722	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.932214	0			'atomiclong':2,6 'longadder':4,8 '性能更好的':3,7 '高并发下比':1,5	zh	
555	为什么说软件架构设计很重要？	{"ver":2,"uid":1,"hash":"SHA1:63fe7772b394c29c83c44d360be544b69f7cd291"}	https://toutiao.io/k/tbn2cum	2020-08-24 02:10:08	为什么说软件架构设计很重要？	16aa7bb6c12e1e7bcafb95f95110ec1f87e888ce	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.938667	0			'为什么说软件架构设计很重要':1,2	zh	
721	Zoom still don't understand GDPR	{"ver":2,"uid":1,"hash":"SHA1:141d3f2170bd92cc8a0d13c834e6056d9bbc5055"}	https://www.threatspike.com/blog/zoom_cookies.html	2020-08-28 10:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24300036"> https://news.ycombinator.com/item?id=24300036 </a>	3881afe3b0354186a80b956a67611f5b21ab3acb	\N	f	2020-08-28 10:10:00	2020-08-31 05:10:09.25687	0			'/item?id=24300036':10 'comment':7 'gdpr':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24300036':8 'still':2 'understand':5 'zoom':1	zh	andrewnicolalde
160	For Range Semantics	{"ver":2,"uid":1,"hash":"SHA1:068f6936d7360d9de83c50c84af4868b89d54531"}	https://www.ardanlabs.com/blog/2017/06/for-range-semantics.html	2017-06-27 00:00:00	Prelude These are good posts to read first to better understand the material presented in this post:\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics\nThe idea of value and pointer semantics are everywhere in the Go programming language. As stated before in those earlier posts, semantic consistency is critical for integrity and readability.	f7532291e75c3e663bbb0983e8f5c26af70101a4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.46517	0			'1':27 '2':34 '3':40 '4':46 'analysi':39 'better':13 'consist':75 'critic':77 'data':50 'design':47 'earlier':72 'escap':38 'everywher':61 'first':11 'four':24 'go':64 'good':7 'idea':54 'index':21 'integr':79 'languag':28,35,41,66 'materi':16 'mechan':29,36,42 'memori':44 'part':25 'philosophi':48 'pointer':33,58 'post':8,20,73 'prelud':4 'present':17 'profil':45 'program':65 'rang':2 'read':10 'readabl':81 'semant':3,52,59,74 'seri':26 'stack':31 'state':68 'understand':14 'valu':56	en	
162	Language Mechanics On Memory Profiling	{"ver":2,"uid":1,"hash":"SHA1:c0b74f0548a5416b5b5ce3fc8165398f8053c7da"}	https://www.ardanlabs.com/blog/2017/06/language-mechanics-on-memory-profiling.html	2017-06-01 00:00:00	Prelude This is the third post in a four part series that will provide an understanding of the mechanics and design behind pointers, stacks, heaps, escape analysis and value/pointer semantics in Go. This post focuses on heaps and escape analysis.\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics	ab9b743219f3d3ff87ff7219c74b3eb923ed1714	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.469142	0			'1':52 '2':59 '3':65 '4':71 'analysi':32,45,64 'behind':27 'data':75 'design':26,72 'escap':31,44,63 'focus':40 'four':14,49 'go':37 'heap':30,42 'index':46 'languag':1,53,60,66 'mechan':2,24,54,61,67 'memori':4,69 'part':15,50 'philosophi':73 'pointer':28,58 'post':11,39 'prelud':6 'profil':5,70 'provid':19 'semant':35,77 'seri':16,51 'stack':29,56 'third':10 'understand':21 'value/pointer':34	en	
395	2.5M Medical Records Leaked by AI Company	{"ver":2,"uid":1,"hash":"SHA1:e8ac2cde0c06e898f06b20cfbcc4bbd25e68458c"}	https://securethoughts.com/medical-data-of-auto-accident-victims-exposed-online/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24194747"> https://news.ycombinator.com/item?id=24194747 </a>	6cce45601159d5404512cb14b0cecdb8dc13ff50	\N	f	2020-08-18 21:10:00	2020-08-20 17:10:09.950094	0			'/item?id=24194747':12 '2.5':1 'ai':7 'comment':9 'compani':8 'leak':5 'm':2 'medic':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24194747':10 'record':4	zh	wglb
484	Citibank's $900M Blunder	{"ver":2,"uid":1,"hash":"SHA1:bdba30b69ec068e5e6bf0269e89e8a76829feb43"}	https://finshots.in/archive/citibank-billion-dollar-blunder/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24222045"> https://news.ycombinator.com/item?id=24222045 </a>	8503bb30ee76686a28dae60ab2119f70b88aa33e	\N	f	2020-08-21 08:10:00	2020-08-23 23:10:09.585003	0			'/item?id=24222045':8 '900m':3 'blunder':4 'citibank':1 'comment':5 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24222045':6	zh	superasn
485	My kid can’t handle a virtual education, and neither can I	{"ver":2,"uid":1,"hash":"SHA1:30231c6ce8736cc4732c4a6d289d5f4a660b3391"}	https://www.theatlantic.com/ideas/archive/2020/08/kindergartener-virtual-education/615316/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24214570"> https://news.ycombinator.com/item?id=24214570 </a>	96eeb252be9455e3ee9540628caa2826e586f20d	\N	f	2020-08-21 08:10:00	2020-08-23 10:10:08.506868	0			'/item?id=24214570':16 'comment':13 'educ':8 'handl':5 'kid':2 'neither':10 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24214570':14 'virtual':7	zh	magnifique
616	Pieter Levels Makes $600k a Year from Nomad List and Remote OK	{"ver":2,"uid":1,"hash":"SHA1:5385c5c1fb582b4eeebf8a76ec905a32b36e0074"}	https://www.nocsdegree.com/pieter-levels-learn-coding/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24259201"> https://news.ycombinator.com/item?id=24259201 </a>	63aa7497dc386bae17863dc449c1ed7de247976a	\N	f	2020-08-26 00:10:00	2020-08-27 02:10:09.418736	0			'/item?id=24259201':16 '600k':4 'comment':13 'level':2 'list':9 'make':3 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24259201':14 'nomad':8 'ok':12 'pieter':1 'remot':11 'year':6	zh	Pete-Codes
609	Kindle collects a surprisingly large amount of data	{"ver":2,"uid":1,"hash":"SHA1:97747bdc8881a0d0f39c5f7e2d9442af454b3cca"}	https://nullsweep.com/kindle-collects-a-surprisingly-large-amount-of-data/	2020-08-25 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24270971"> https://news.ycombinator.com/item?id=24270971 </a>	f0573bb244c6b0443b1b740d58c0205710ed8783	\N	f	2020-08-25 19:10:00	2020-08-27 20:10:10.174698	0			'/item?id=24270971':12 'amount':6 'collect':2 'comment':9 'data':8 'kindl':1 'larg':5 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24270971':10 'surpris':4	zh	BCharlie
483	Lightroom app update wipes users' photos and presets, Adobe says not recoverable	{"ver":2,"uid":1,"hash":"SHA1:68903d247a4673d65d7c8baeccc79156cc4e25eb"}	https://petapixel.com/2020/08/20/lightroom-app-update-wipes-users-photos-and-presets-adobe-says-they-are-not-recoverable/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24229864"> https://news.ycombinator.com/item?id=24229864 </a>	5605be9b0b82768b916217c890849c0d8acbea2f	\N	f	2020-08-21 08:10:00	2020-08-25 22:10:10.496144	0			'/item?id=24229864':16 'adob':9 'app':2 'comment':13 'lightroom':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24229864':14 'photo':6 'preset':8 'recover':12 'say':10 'updat':3 'user':5 'wipe':4	zh	fraXis
388	Facebook account now required to login to Oculus devices	{"ver":2,"uid":1,"hash":"SHA1:0b1f7ddfeac6ef27284fb3b4151eeaf146a678d9"}	https://www.oculus.com/blog/a-single-way-to-log-into-oculus-and-unlock-social-features/	2020-08-18 23:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24201306"> https://news.ycombinator.com/item?id=24201306 </a>	d5a84da314925282c605352bbe98c67702da847d	\N	f	2020-08-18 21:10:00	2020-08-21 06:10:09.876785	0			'/item?id=24201306':13 'account':2 'comment':10 'devic':9 'facebook':1 'login':6 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24201306':11 'oculus':8 'requir':4	zh	superted
606	Asana S-1	{"ver":2,"uid":1,"hash":"SHA1:25188833606e1e471276d272931058db7efe3407"}	https://www.sec.gov/Archives/edgar/data/1477720/000119312520228462/d855753ds1.htm	2020-08-25 09:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24265430"> https://news.ycombinator.com/item?id=24265430 </a>	85fc45815751a9af7b38a1483c6f004dca77a762	\N	f	2020-08-25 09:10:00	2020-08-27 20:10:10.206182	0			'-1':3 '/item?id=24265430':7 'asana':1 'comment':4 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24265430':5	zh	sean_lynch
617	Streaming Is Laying Bare How Big ISPs and Big Tech Work Together Against Users	{"ver":2,"uid":1,"hash":"SHA1:8eb05a13f802b8921d1d0fbc8fcd1f5ca9e727c9"}	https://www.eff.org/deeplinks/2020/06/streaming-laying-bare-how-big-isps-big-tech-and-big-media-work-together-against	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24258216"> https://news.ycombinator.com/item?id=24258216 </a>	c353313048a0f78784a51181267a384c69a0a44d	\N	f	2020-08-26 00:10:00	2020-08-26 20:10:09.050774	0			'/item?id=24258216':18 'bare':4 'big':6,9 'comment':15 'isp':7 'lay':3 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24258216':16 'stream':1 'tech':10 'togeth':12 'user':14 'work':11	zh	torgian
615	Challenge to scientists: does your ten-year-old code still run?	{"ver":2,"uid":1,"hash":"SHA1:e4772d485d5a60a0a88394a2a007ad3e8a7f5834"}	https://www.nature.com/articles/d41586-020-02462-7	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24260337"> https://news.ycombinator.com/item?id=24260337 </a>	2911c5010c5e7bb74c5e0d6927c192fc313ef5c8	\N	f	2020-08-26 00:10:00	2020-08-27 08:10:10.877874	0			'/item?id=24260337':16 'challeng':1 'code':10 'comment':13 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24260337':14 'old':9 'run':12 'scientist':3 'still':11 'ten':7 'ten-year-old':6 'year':8	zh	sohkamyung
24	Internets of interest: Warner Losh on the first ten years of UNIX	{"ver":2,"uid":1,"hash":"SHA1:214a26f71bc0ae24d750a8afdaffb6ddc5efa981"}	https://dave.cheney.net/2019/11/16/internets-of-interest-warner-losh-on-the-first-ten-years-of-unix	2019-11-16 11:22:19	\n<p>UNIX turns 50 this year which means 7th edition Research UNIX is that 40. <br></p>\n\n\n\n<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">\n<iframe title="7th Edition Unix at 40 by Warner Losh" width="625" height="352" src="https://www.youtube.com/embed/FTlzaDgzPY8?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n</div></figure>\n	1a0b16dc3aba303c3ae0abd1aaa63c35827b2d00	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.234648	0			'40':26 '50':15 '7th':20 'edition':21 'first':8 'interest':3 'internets':1 'is':24 'losh':5 'means':19 'of':2,11 'on':6 'research':22 'ten':9 'that':25 'the':7 'this':16 'turns':14 'unix':12,13,23 'warner':4 'which':18 'year':17 'years':10	en	Dave Cheney
405	京东商城订单模块 Swift 探索	{"ver":2,"uid":1,"hash":"SHA1:29450791741fc5511862b61d03365c7b2cfc862e"}	https://toutiao.io/k/qezitnz	2020-08-19 01:10:08	京东商城订单模块 Swift 探索	a2ad89e8ff3f4a1e6c395482944e49e0604ca430	\N	f	2020-08-19 01:10:00	2020-08-19 20:10:10.634542	0			'swift':2,5 '京东商城订单模块':1,4 '探索':3,6	zh	
554	你的系统可用性 5 个 9 了吗？	{"ver":2,"uid":1,"hash":"SHA1:41c865f3b0dbe7ecfccae72df97f0547513834f5"}	https://toutiao.io/k/kfbevck	2020-08-24 02:10:08	你的系统可用性 5 个 9 了吗？	50e4adcb719b8a173744fd953b848ab656f9b0eb	\N	f	2020-08-24 02:10:00	2020-08-25 00:10:08.93017	0			'5':2,7 '9':4,9 '个':3,8 '了吗':5,10 '你的系统可用性':1,6	zh	
403	[推荐] 一道有意思的腾讯算法面试题	{"ver":2,"uid":1,"hash":"SHA1:317c364d3906d203b8821a79b63e690db26e6aa3"}	https://toutiao.io/k/wui7yqj	2020-08-22 17:10:09	[推荐] 一道有意思的腾讯算法面试题	5c193d543d26d611f18a6b85a00c5a6218aaeab0	\N	f	2020-08-19 01:10:00	2020-09-02 12:10:11.762837	0			'一道有意思的腾讯算法面试题':2,4 '推荐':1,3	zh	
548	Blockchain, the Solution for Almost Nothing	{"ver":2,"uid":1,"hash":"SHA1:fd24e5ad5c44cdca46c8cb5cd1628d3a7973c6ee"}	https://thecorrespondent.com/655/blockchain-the-amazing-solution-for-almost-nothing/84495599980-95473476	2020-08-24 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24241488"> https://news.ycombinator.com/item?id=24241488 </a>	37888811a80756c71972d5a8021cfeeec1e8a4f3	\N	f	2020-08-24 02:10:00	2020-08-24 23:10:09.932056	0			'/item?id=24241488':10 'almost':5 'blockchain':1 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24241488':8 'noth':6 'solut':3	zh	dotcoma
489	'Coup 53' tells the story of 1953 campaign by MI6 and CIA to oust Iran's leader	{"ver":2,"uid":1,"hash":"SHA1:413d429ad64e19555b49479e1d603b3f82371010"}	https://www.npr.org/2020/08/18/903505983/coup-53-tells-the-true-story-of-the-cia-s-campaign-to-oust-iran-s-leader	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24212576"> https://news.ycombinator.com/item?id=24212576 </a>	9f540925f62427658679be077f58f6147fecc8b5	\N	f	2020-08-21 08:10:00	2020-08-22 14:10:08.474524	0			'/item?id=24212576':21 '1953':7 '53':2 'campaign':8 'cia':12 'comment':18 'coup':1 'iran':15 'leader':17 'mi6':10 'news.ycombinator.com':20 'news.ycombinator.com/item?id=24212576':19 'oust':14 'stori':5 'tell':3	zh	AndrewBissell
490	How Shopify reduced storefront response times with a rewrite	{"ver":2,"uid":1,"hash":"SHA1:154849c7329f85a0155fe12e79e6b940543a7be0"}	https://engineering.shopify.com/blogs/engineering/how-shopify-reduced-storefront-response-times-rewrite	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24228651"> https://news.ycombinator.com/item?id=24228651 </a>	d2b262bbb85a7090d20fb9920ba2453d4f7c7ef6	\N	f	2020-08-21 08:10:00	2020-08-24 04:10:08.256874	0			'/item?id=24228651':13 'comment':10 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24228651':11 'reduc':3 'respons':5 'rewrit':9 'shopifi':2 'storefront':4 'time':6	zh	vaillancourtmax
618	Navy F/A-18 squadron commander's take on AI repeatedly beating real pilot	{"ver":2,"uid":1,"hash":"SHA1:1bf59518f40b67b8d6ac31cbc23ddf05580f1694"}	https://www.thedrive.com/the-war-zone/35947/navy-f-a-18-squadron-commanders-take-on-ai-repeatedly-beating-real-pilot-in-dogfight	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24265513"> https://news.ycombinator.com/item?id=24265513 </a>	ab370accbe326cca08b5c09b85709701ef72e693	\N	f	2020-08-26 00:10:00	2020-08-26 18:10:10.043623	0			'/item?id=24265513':16 'ai':8 'beat':10 'command':4 'comment':13 'f/a-18':2 'navi':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24265513':14 'pilot':12 'real':11 'repeat':9 'squadron':3 'take':6	zh	tomohawk
400	Xplain – Explaining X11 for the rest of us (2017)	{"ver":2,"uid":1,"hash":"SHA1:c91af75328981ffcb8c3b18e2e9eeb0eda443f0d"}	https://magcius.github.io/xplain/article/	2020-08-19 01:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24197528"> https://news.ycombinator.com/item?id=24197528 </a>	fdd08e6f897d832c9fec76461f7d1cfb6459ac4f	\N	f	2020-08-19 01:10:00	2020-08-21 02:10:08.769032	0			'/item?id=24197528':13 '2017':9 'comment':10 'explain':2 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24197528':11 'rest':6 'us':8 'x11':3 'xplain':1	zh	pcr910303
404	书单丨5 本经典著作描绘 C++ 学习路线图	{"ver":2,"uid":1,"hash":"SHA1:2951557ed645dbe1c90a6ef0a902db6fcb2c743c"}	https://toutiao.io/k/tlr1sb8	2020-08-19 01:10:08	书单丨5 本经典著作描绘 C++ 学习路线图	8f13ef6674efa8db8b161f2c52bd042a38aee11c	\N	f	2020-08-19 01:10:00	2020-08-19 20:10:10.620986	0			'c':3,7 '书单丨5':1,5 '学习路线图':4,8 '本经典著作描绘':2,6	zh	
488	The Kush civilization flourished in Sudan nearly 5K years ago	{"ver":2,"uid":1,"hash":"SHA1:1eb238c46e2c58a208fb034438dbd3928b0e43e6"}	https://www.smithsonianmag.com/travel/sudan-land-kush-meroe-ancient-civilization-overlooked-180975498/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24223899"> https://news.ycombinator.com/item?id=24223899 </a>	139326910b8e7c2eed8689529556b812c24199ad	\N	f	2020-08-21 08:10:00	2020-08-23 06:10:10.119278	0			'/item?id=24223899':14 '5k':8 'ago':10 'civil':3 'comment':11 'flourish':4 'kush':2 'near':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24223899':12 'sudan':6 'year':9	zh	pseudolus
620	Mark Zuckerberg Stoked Washington’s Fears About TikTok	{"ver":2,"uid":1,"hash":"SHA1:124e0383e9932fde0b9c8a071759a5a65347e10b"}	https://www.wsj.com/articles/facebook-ceo-mark-zuckerberg-stoked-washingtons-fears-about-tiktok-11598223133	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24256000"> https://news.ycombinator.com/item?id=24256000 </a>	980fe76c3a899bf563417c15dabcb063672baa8d	\N	f	2020-08-26 00:10:00	2020-08-26 05:10:10.306878	0			'/item?id=24256000':12 'comment':9 'fear':6 'mark':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24256000':10 'stoke':3 'tiktok':8 'washington':4 'zuckerberg':2	zh	ra7
1088	运维自动化工具 Ansible 原理及意义	{"ver":2,"uid":1,"hash":"SHA1:e8c4c15582a019ce0be459e2e09ace8c5c7d4283"}	https://toutiao.io/k/j618xnl	2020-09-09 02:10:12	运维自动化工具 Ansible 原理及意义	1818cd59e2ca508b4f8c6fecc7ff1b7087ac1fd2	\N	f	2020-09-09 02:10:00	2020-09-10 00:10:10.148414	0			'ansible':2,5 '原理及意义':3,6 '运维自动化工具':1,4	zh	
619	How I helped fix Canadaʼs Covid Alert app	{"ver":2,"uid":1,"hash":"SHA1:0f60367de25ecf100f3638d312549128293d6936"}	https://seancoates.com/blogs/how-i-helped-fix-canadas-covid-alert-app	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24262236"> https://news.ycombinator.com/item?id=24262236 </a>	339e9407a2ba82157a68f9b6a0a43059803f01d9	\N	f	2020-08-26 00:10:00	2020-08-26 13:10:10.708197	0			'/item?id=24262236':12 'alert':7 'app':8 'canadaʼ':5 'comment':9 'covid':6 'fix':4 'help':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24262236':10	zh	todsacerdoti
494	Theheadless.dev – open source Puppeteer and Playwright knowledge base	{"ver":2,"uid":1,"hash":"SHA1:8ec7f31d8779788c89f671a53a060363a90b7f48"}	https://theheadless.dev/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24209073"> https://news.ycombinator.com/item?id=24209073 </a>	e5a295dc59abaaa215fd324e19ca5b4584938301	\N	f	2020-08-21 08:10:00	2020-08-21 18:10:08.424791	0			'/item?id=24209073':12 'base':8 'comment':9 'knowledg':7 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24209073':10 'open':2 'playwright':6 'puppet':4 'sourc':3 'theheadless.dev':1	zh	tnolet
493	What harm do minimum wages do?	{"ver":2,"uid":1,"hash":"SHA1:7603207c3dc9a6b8598a677ca197e0c577451c6a"}	https://www.economist.com/schools-brief/2020/08/15/what-harm-do-minimum-wages-do	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24213325"> https://news.ycombinator.com/item?id=24213325 </a>	f9d8a359be774e1d2e4a4c8a6315510547e7d327	\N	f	2020-08-21 08:10:00	2020-08-22 03:10:09.546116	0			'/item?id=24213325':10 'comment':7 'harm':2 'minimum':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24213325':8 'wage':5	zh	prostoalex
621	Openwifi: Linux mac80211 compatible full-stack 802.11/Wi-Fi design based on SDR	{"ver":2,"uid":1,"hash":"SHA1:8cef16e9b1958dc24aac21328a93acd03afa253a"}	https://github.com/open-sdr/openwifi	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24273919"> https://news.ycombinator.com/item?id=24273919 </a>	240fe54bf1e5492e29e4ae589672e8d96e4e790c	\N	f	2020-08-26 00:10:00	2020-08-29 04:10:17.746856	0			'/item?id=24273919':17 '/wi-fi':9 '802.11':8 'base':11 'comment':14 'compat':4 'design':10 'full':6 'full-stack':5 'linux':2 'mac80211':3 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24273919':15 'openwifi':1 'sdr':13 'stack':7	zh	homarp
562	浅谈 PHP 无回显命令执行的利用	{"ver":2,"uid":1,"hash":"SHA1:579c36bfc38eef27c6266b153c12b81d5c5c8fee"}	https://toutiao.io/k/ovsr9s1	2020-08-24 04:10:08	浅谈 PHP 无回显命令执行的利用	599729ee11d98865383667a970ca256e5a0926fc	\N	f	2020-08-24 04:10:00	2020-08-25 00:10:08.957137	0			'php':2,5 '无回显命令执行的利用':3,6 '浅谈':1,4	zh	
561	Kubernetes 控制器：副本集 ReplicaSet	{"ver":2,"uid":1,"hash":"SHA1:28433166cb7c37f104f3eec41d63937ade6698b0"}	https://toutiao.io/k/ittpel3	2020-08-24 04:10:08	Kubernetes 控制器：副本集 ReplicaSet	debea718ba8b5e442e33b7803d7d7115559cd8cf	\N	f	2020-08-24 04:10:00	2020-08-25 00:10:08.958996	0			'kubernetes':1,5 'replicaset':4,8 '副本集':3,7 '控制器':2,6	zh	
407	JetCache 埋点的骚操作，不服不行啊	{"ver":2,"uid":1,"hash":"SHA1:16392794548f401774b623a2a19019237c68aa24"}	https://toutiao.io/k/3gn5idg	2020-08-19 04:10:09	JetCache 埋点的骚操作，不服不行啊	3b5bc07d9d3e0c37371aa6436eac6d2a4c92446d	\N	f	2020-08-19 01:10:00	2020-08-19 20:10:10.632373	0			'jetcache':1,4 '不服不行啊':3,6 '埋点的骚操作':2,5	zh	
406	[推荐] 有了 MinIO，你还会用 FastDFS 么？	{"ver":2,"uid":1,"hash":"SHA1:5dd68b9e0e5ef9b0f9df80409d27db69ea518cec"}	https://toutiao.io/k/smg6nko	2020-08-22 23:10:08	[推荐] 有了 MinIO，你还会用 FastDFS 么？	58d7d50fc2c29258c77b28026444f5b59fe7c504	\N	f	2020-08-19 01:10:00	2020-09-02 16:10:10.832432	0			'fastdfs':5,11 'minio':3,9 '么':6,12 '你还会用':4,10 '推荐':1,7 '有了':2,8	zh	
408	这应该是最适合国内用户的 K3s HA 方案	{"ver":2,"uid":1,"hash":"SHA1:878e298bb19d38ef116ef5da8635fe12ea5972e5"}	https://toutiao.io/k/vsp7iq7	2020-08-19 01:10:08	这应该是最适合国内用户的 K3s HA 方案	5817a18464087eda4dfb8af1f260c1a915fbca8b	\N	f	2020-08-19 01:10:00	2020-08-19 20:10:10.636791	0			'ha':3,7 'k3s':2,6 '方案':4,8 '这应该是最适合国内用户的':1,5	zh	
487	The Suspected Poisoning of Alexey Navalny, Putin’s Most Prominent Adversary	{"ver":2,"uid":1,"hash":"SHA1:c88b956bd95466edee7e05e73f066cdf8238373b"}	https://www.newyorker.com/news/our-columnists/the-suspected-poisoning-of-alexey-navalny-putins-most-prominent-adversary	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24224165"> https://news.ycombinator.com/item?id=24224165 </a>	50746a3d5a3cc161c7c27931dcb77f4034b77824	\N	f	2020-08-21 08:10:00	2020-08-22 23:10:08.080715	0			'/item?id=24224165':15 'adversari':11 'alexey':5 'comment':12 'navalni':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24224165':13 'poison':3 'promin':10 'putin':7 'suspect':2	zh	jseliger
564	[译] 如何使得你的 Go 命令行程序变得友好？	{"ver":2,"uid":1,"hash":"SHA1:7b7ba79965c7f8bfc343c2e70827cd980e35f55b"}	https://toutiao.io/k/q8idzqf	2020-08-24 04:10:08	[译] 如何使得你的 Go 命令行程序变得友好？	9c59ef996b6aab97b9debef549eaa77281f9c945	\N	f	2020-08-24 04:10:00	2020-08-25 00:10:08.954936	0			'go':3,7 '命令行程序变得友好':4,8 '如何使得你的':2,6 '译':1,5	zh	
402	[推荐] 史上最全的 vim 快捷键文档/手册/大全/帮助/指南	{"ver":2,"uid":1,"hash":"SHA1:a2f97529ec8a48c7b29f82f4b5dda602758551e5"}	https://toutiao.io/k/dx4z66j	2020-08-22 17:10:09	[推荐] 史上最全的 vim 快捷键文档/手册/大全/帮助/指南	c86f12a780a6286d55cffad67d050adf1f3cf3d5	\N	f	2020-08-19 01:10:00	2020-09-02 16:10:10.838816	0			'vim':3,11 '史上最全的':2,10 '大全':6,14 '帮助':7,15 '快捷键文档':4,12 '手册':5,13 '指南':8,16 '推荐':1,9	zh	
495	Show HN: Handwritten.js – Convert typed text to realistic handwriting	{"ver":2,"uid":1,"hash":"SHA1:b14446048e129dc4a3d320d266a595081f0ea6e7"}	https://github.com/alias-rahil/handwritten.js#README.md	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24205416"> https://news.ycombinator.com/item?id=24205416 </a>	686abdfe96fa00e584eee0b218521049f8deae61	\N	f	2020-08-21 08:10:00	2020-08-21 15:10:08.194068	0			'/item?id=24205416':13 'comment':10 'convert':4 'handwrit':9 'handwritten.js':3 'hn':2 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24205416':11 'realist':8 'show':1 'text':6 'type':5	zh	alias-rahil
622	Making money building Shopify micro-SaaS apps	{"ver":2,"uid":1,"hash":"SHA1:25644b9973a096347bf9e66a1984994a9e90ea2d"}	https://www.preetamnath.com/blog/building-your-first-micro-saas-app-on-shopify	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24261192"> https://news.ycombinator.com/item?id=24261192 </a>	ccdfb900e7e9830dd9c0b2529ac0dae36be1398a	\N	f	2020-08-26 00:10:00	2020-08-26 11:10:13.614612	0			'/item?id=24261192':12 'app':8 'build':3 'comment':9 'make':1 'micro':6 'micro-saa':5 'money':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24261192':10 'saa':7 'shopifi':4	zh	gk1
497	Gmail and Google Drive Outage	{"ver":2,"uid":1,"hash":"SHA1:e0309700844e3842c7561d2322ff5fa3bef74e5f"}	https://www.google.com/appsstatus#hl=en&v=status	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24220278"> https://news.ycombinator.com/item?id=24220278 </a>	4ab6700cefa45e5f2c4e5ecd1143328533b936ff	\N	f	2020-08-21 08:10:00	2020-08-21 21:10:07.873084	0			'/item?id=24220278':9 'comment':6 'drive':4 'gmail':1 'googl':3 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24220278':7 'outag':5	zh	severb
409	聊一聊 Redis 数据内部存储使用到的数据结构	{"ver":2,"uid":1,"hash":"SHA1:b79d86ee2fdb6bdfb6acdd5786523cbb6a5792cc"}	https://toutiao.io/k/cyf3oyp	2020-08-19 01:10:08	聊一聊 Redis 数据内部存储使用到的数据结构	da0f2a1912768fc9881c688263e1996af790c681	\N	f	2020-08-19 01:10:00	2020-08-19 20:10:10.630206	0			'redis':2,5 '数据内部存储使用到的数据结构':3,6 '聊一聊':1,4	zh	
496	Netflix Conductor: Open-source workflow orchestration engine	{"ver":2,"uid":1,"hash":"SHA1:34ebeb0f8a730e04f0962c9f9ce46529ce27acaf"}	https://netflix.github.io/conductor/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24214735"> https://news.ycombinator.com/item?id=24214735 </a>	71760dc9e57877a15f9269a518ac99ebdd11987b	\N	f	2020-08-21 08:10:00	2020-08-21 22:10:08.636586	0			'/item?id=24214735':12 'comment':9 'conductor':2 'engin':8 'netflix':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24214735':10 'open':4 'open-sourc':3 'orchestr':7 'sourc':5 'workflow':6	zh	swyx
410	[推荐] Tomcat 高并发之道原理拆解与性能调优	{"ver":2,"uid":1,"hash":"SHA1:2135a4b37b7a7affafd947fbae160e7c721de5a8"}	https://toutiao.io/k/htijp2l	2020-08-22 17:10:09	[推荐] Tomcat 高并发之道原理拆解与性能调优	65304256ccc1656b8486bf5b92dc0b8c46439c83	\N	f	2020-08-19 01:10:00	2020-09-02 12:10:11.773323	0			'tomcat':2,5 '推荐':1,4 '高并发之道原理拆解与性能调优':3,6	zh	
624	Zoom Partial Outages	{"ver":2,"uid":1,"hash":"SHA1:982997fee08188c043e9e0cad36ab06c696dcaf8"}	https://status.zoom.us/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24260269"> https://news.ycombinator.com/item?id=24260269 </a>	736c862fafcb350a074f38a448af84c7b68c0e3a	\N	f	2020-08-26 00:10:00	2020-08-26 03:10:10.143482	0			'/item?id=24260269':7 'comment':4 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24260269':5 'outag':3 'partial':2 'zoom':1	zh	surfingninjas
560	跨越鸿沟：计算机视觉-学术界与工业界的 GAP 有多大？	{"ver":2,"uid":1,"hash":"SHA1:250e6bd5dcff81409028dcac46c1eec9cda3e382"}	https://toutiao.io/k/rh0msrp	2020-08-24 04:10:08	跨越鸿沟：计算机视觉-学术界与工业界的 GAP 有多大？	d273d2bfa508c26b7d2685df8309e90915a93a96	\N	f	2020-08-24 04:10:00	2020-08-25 00:10:08.934498	0			'gap':5,11 '学术界与工业界的':4,10 '有多大':6,12 '计算机视觉':3,9 '计算机视觉-学术界与工业界的':2,8 '跨越鸿沟':1,7	zh	
563	一文讲懂数据库隔离级别	{"ver":2,"uid":1,"hash":"SHA1:a2b71f4a5644ba95d957198907086d57ff957266"}	https://toutiao.io/k/efelr53	2020-08-24 04:10:08	一文讲懂数据库隔离级别	9aca98e45679fd9c105501299d83ce9988107621	\N	f	2020-08-24 04:10:00	2020-08-25 00:10:08.950896	0			'一文讲懂数据库隔离级别':1,2	zh	
579	Never run ‘python’ in your downloads folder	{"ver":2,"uid":1,"hash":"SHA1:070194f21ca15cb501513fa179a732189820a694"}	https://glyph.twistedmatrix.com/2020/08/never-run-python-in-your-downloads-folder.html	2020-08-24 10:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24250418"> https://news.ycombinator.com/item?id=24250418 </a>	a2a602d925681aac50a6ee0a4abecd895fda473c	\N	f	2020-08-24 10:10:00	2020-08-25 07:10:10.184861	0			'/item?id=24250418':11 'comment':8 'download':6 'folder':7 'never':1 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24250418':9 'python':3 'run':2	zh	ingve
626	Jeffrey Epstein’s Harvard connections show how money can distort research	{"ver":2,"uid":1,"hash":"SHA1:1c4a6570ac1044b6d0dad9678b6a8792e395af75"}	https://www.scientificamerican.com/article/jeffrey-epsteins-harvard-connections-show-how-money-can-distort-research/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24259936"> https://news.ycombinator.com/item?id=24259936 </a>	2e385f791eb6d2080dde27fa8ef58e462f5bd07d	\N	f	2020-08-26 00:10:00	2020-08-26 00:10:09.489966	0			'/item?id=24259936':15 'comment':12 'connect':5 'distort':10 'epstein':2 'harvard':4 'jeffrey':1 'money':8 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24259936':13 'research':11 'show':6	zh	LinuxBender
623	What the interns have wrought, 2020 edition	{"ver":2,"uid":1,"hash":"SHA1:b49ea268edded23caf2b860959257af9c16a863f"}	https://blog.janestreet.com/what-the-interns-have-wrought-2020/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24271898"> https://news.ycombinator.com/item?id=24271898 </a>	b339e33ea56e4a3a9176832bb7134a97ffa512a7	\N	f	2020-08-26 00:10:00	2020-08-26 05:10:10.308724	0			'/item?id=24271898':11 '2020':6 'comment':8 'edit':7 'intern':3 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24271898':9 'wrought':5	zh	yminsky
625	Automotive Grade Linux	{"ver":2,"uid":1,"hash":"SHA1:bfc90c623be1f74a74aaa8ffd077b31a42cadc4c"}	https://www.automotivelinux.org/	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24259016"> https://news.ycombinator.com/item?id=24259016 </a>	6e54c9be79c60ee936638df1b2983cac079edf60	\N	f	2020-08-26 00:10:00	2020-08-26 02:10:08.641729	0			'/item?id=24259016':7 'automot':1 'comment':4 'grade':2 'linux':3 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24259016':5	zh	known
1099	图解 DataX 核心设计原理	{"ver":2,"uid":1,"hash":"SHA1:806fd9a16db188d826f366efabbbd07f25d5bf81"}	https://toutiao.io/k/v1hn7ub	2020-09-09 03:10:11	图解 DataX 核心设计原理	3f7f37df09a3feb87271a1db3826df9f5464fe94	\N	f	2020-09-09 03:10:00	2020-09-10 00:10:10.175926	0			'datax':2,5 '图解':1,4 '核心设计原理':3,6	zh	
1098	比能力更重要的是你的底层操作系统	{"ver":2,"uid":1,"hash":"SHA1:f1e78f9f374718c7b28c2a37b8ef18dcacd85494"}	https://toutiao.io/k/9okrprb	2020-09-09 03:10:11	比能力更重要的是你的底层操作系统	62ec2a5dab3f253b10715298d2e15d780be1d287	\N	f	2020-09-09 03:10:00	2020-09-10 00:10:10.161597	0			'比能力更重要的是你的底层操作系统':1,2	zh	
1100	提升开发效率 N 倍的 20+ 命令行神器（附 demo）	{"ver":2,"uid":1,"hash":"SHA1:f210e9c52245c8419cd72cb34169864bcb53448e"}	https://toutiao.io/k/nims2je	2020-09-09 03:10:11	提升开发效率 N 倍的 20+ 命令行神器（附 demo）	9292f41988f0c041b0958b323cf77a9ae5a5309e	\N	f	2020-09-09 03:10:00	2020-09-10 00:10:10.163773	0			'20':4,11 'demo':7,14 'n':2,9 '倍的':3,10 '命令行神器':5,12 '提升开发效率':1,8 '附':6,13	zh	
411	[推荐] Redis 五大对象	{"ver":2,"uid":1,"hash":"SHA1:ea24db8a053c8590c9ec2772886342818323998b"}	https://toutiao.io/k/djlfguy	2020-08-24 08:10:11	[推荐] Redis 五大对象	193b27b560bd7b614af2040cde0a6612e994081a	\N	f	2020-08-19 02:10:00	2020-09-02 16:10:10.849179	0			'redis':2,5 '五大对象':3,6 '推荐':1,4	zh	
1101	学会 wire 依赖注入、cron 定时任务其实就这么简单	{"ver":2,"uid":1,"hash":"SHA1:44116e5e959c798c19e51a69c2788a36c010482c"}	https://toutiao.io/k/ek1ow76	2020-09-09 03:10:11	学会 wire 依赖注入、cron 定时任务其实就这么简单	d452ddd4089bb14cde6d0167c261ec0ccd44f305	\N	f	2020-09-09 03:10:00	2020-09-10 00:10:10.177818	0			'cron':4,9 'wire':2,7 '依赖注入':3,8 '学会':1,6 '定时任务其实就这么简单':5,10	zh	
111	[推荐] 数据库压力降低 90%，携程机票订单缓存系统实践	{"ver":2,"uid":1,"hash":"SHA1:4e4c6ea7c51e18b84bd13015cdccea2b2751bb97"}	https://toutiao.io/k/ityut7e	2020-08-14 06:10:09	[推荐] 数据库压力降低 90%，携程机票订单缓存系统实践	7531975fd7eeeafe1d39c2194be48b810b45f443	\N	f	2020-08-14 05:06:00	2020-08-22 16:10:08.436398	0			'90':3,7 '推荐':1,5 '携程机票订单缓存系统实践':4,8 '数据库压力降低':2,6	zh	
223	Understanding Slices in Go Programming	{"ver":2,"uid":1,"hash":"SHA1:d91924f00711cc241fe609743d6678ca14ce8690"}	https://www.ardanlabs.com/blog/2013/08/understanding-slices-in-go-programming.html	2013-08-15 00:00:00	Since I started programming in Go the concept and use of slices has been confusing. This is something completely new to me. They look like an array, and feel like an array, but they are much more than an array. I am constantly reading how slices are used quite a bit by Go programmers and I think it is finally time for me to understand what slices are all about.	0156123504e383d7e4406303bbf2d81d86a5c8c9	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.586602	0			'array':32,37,45 'bit':56 'complet':24 'concept':13 'confus':20 'constant':48 'feel':34 'final':65 'go':4,11,58 'like':30,35 'look':29 'much':41 'new':25 'program':5,9 'programm':59 'quit':54 'read':49 'sinc':6 'slice':2,17,51,72 'someth':23 'start':8 'think':62 'time':66 'understand':1,70 'use':15,53	en	
567	Matrix – An open network for secure, decentralized communication	{"ver":2,"uid":1,"hash":"SHA1:ea59bbf6daa231bb558d352d838deb1e07160fb0"}	https://matrix.org/	2020-08-24 06:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24239564"> https://news.ycombinator.com/item?id=24239564 </a>	133c9b66e29b47c4a1a202f06961492ee03b8c29	\N	f	2020-08-24 06:10:00	2020-08-24 06:10:08.173823	0			'/item?id=24239564':12 'comment':9 'communic':8 'decentr':7 'matrix':1 'network':4 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24239564':10 'open':3 'secur':6	zh	dunefox
566	College Notebook of Isaac Newton	{"ver":2,"uid":1,"hash":"SHA1:d81ba18c9793cba9c951e5bbeba755b6f1dd99e9"}	http://cudl.lib.cam.ac.uk/view/MS-ADD-04000/	2020-08-24 06:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24233820"> https://news.ycombinator.com/item?id=24233820 </a>	69ccd40fab86dc5f989903970c6ff8c018da8eaa	\N	f	2020-08-24 06:10:00	2020-08-24 12:10:10.43222	0			'/item?id=24233820':9 'colleg':1 'comment':6 'isaac':4 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24233820':7 'newton':5 'notebook':2	zh	Insanity
565	Moreutils – Unix tools that nobody thought to write (2012)	{"ver":2,"uid":1,"hash":"SHA1:76422a1a5d71610efa471d230d3fb399f2a69104"}	https://joeyh.name/code/moreutils/	2020-08-24 06:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24241986"> https://news.ycombinator.com/item?id=24241986 </a>	d9e848796fdf2ba0b61264318897284c162fe799	\N	f	2020-08-24 06:10:00	2020-08-24 08:10:11.157598	0			'/item?id=24241986':13 '2012':9 'comment':10 'moreutil':1 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24241986':11 'nobodi':5 'thought':6 'tool':3 'unix':2 'write':8	zh	pmoriarty
414	掌握这些 Go 语言特性，你的水平将提高 N 个档次（二）	{"ver":2,"uid":1,"hash":"SHA1:c24c9020e63459103bd529dcf273f361170f68e9"}	https://toutiao.io/k/r4z7515	2020-08-19 02:10:09	掌握这些 Go 语言特性，你的水平将提高 N 个档次（二）	5a8df7cb5cbc9f60ca18045c5b1d09c809eeb07b	\N	f	2020-08-19 02:10:00	2020-08-19 20:10:10.62784	0			'go':2,9 'n':5,12 '个档次':6,13 '二':7,14 '你的水平将提高':4,11 '掌握这些':1,8 '语言特性':3,10	zh	
412	从实际案例讲 Deno 的应用场景	{"ver":2,"uid":1,"hash":"SHA1:f397d3c9cae9298c05fba57b796e94f08c98f5f3"}	https://toutiao.io/k/5j4z6w5	2020-08-19 02:10:09	从实际案例讲 Deno 的应用场景	b4918b74ab4f76d1877c6db3d81acbe4383732ac	\N	f	2020-08-19 02:10:00	2020-08-19 20:10:10.641406	0			'deno':2,5 '从实际案例讲':1,4 '的应用场景':3,6	zh	
413	微软开源计算机视觉专题库（含分类、检测、分割、关键点、跟踪、动作识别等主流方向）	{"ver":2,"uid":1,"hash":"SHA1:1655a1bcc12aca2385d8c29a67ab1ba40948903c"}	https://toutiao.io/k/dmih94k	2020-08-19 02:10:09	微软开源计算机视觉专题库（含分类、检测、分割、关键点、跟踪、动作识别等主流方向）	e34306a7468b0f3e0b47b6de11b029ccf05c163b	\N	f	2020-08-19 02:10:00	2020-08-19 20:10:10.645712	0			'关键点':5,12 '分割':4,11 '动作识别等主流方向':7,14 '含分类':2,9 '微软开源计算机视觉专题库':1,8 '检测':3,10 '跟踪':6,13	zh	
486	Showing a sunrise/sunset realtime 24/7 with the use of unsecured CCTV cameras	{"ver":2,"uid":1,"hash":"SHA1:8d3d6bd9ff46b2d42d071703faad4eaff403ff2e"}	https://driesdepoorter.be/24h-sunrise-sunset/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24208905"> https://news.ycombinator.com/item?id=24208905 </a>	6c2e13f7b4ba3e51d87138b6ce7b92565f7acd12	\N	f	2020-08-21 08:10:00	2020-08-21 19:10:09.540721	0			'/item?id=24208905':16 '24/7':5 'camera':12 'cctv':11 'comment':13 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24208905':14 'realtim':4 'show':1 'sunrise/sunset':3 'unsecur':10 'use':8	zh	driesdep
401	Ask HN: How do you switch off from work, particularly when working from home?	{"ver":2,"uid":1,"hash":"SHA1:1e82d489eea17d62ea2fc7a915ba0c6fb1b44f66"}	https://news.ycombinator.com/item?id=24196433	2020-08-19 01:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24196433"> https://news.ycombinator.com/item?id=24196433 </a>	fffccd95e54942fc3c0590704ae61c5bcd8919e9	\N	f	2020-08-19 01:10:00	2020-08-20 19:10:08.346434	0			'/item?id=24196433':18 'ask':1 'comment':15 'hn':2 'home':14 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24196433':16 'particular':10 'switch':6 'work':9,12	zh	OnWriting
300	Kosmonaut: web browser from scratch in Rust	{"ver":2,"uid":1,"hash":"SHA1:8dc5b2caf082835f0086782bcd2ba511344b8a7f"}	https://github.com/twilco/kosmonaut	2020-08-15 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24170201"> https://news.ycombinator.com/item?id=24170201 </a>	25f941d374c9d65682260006f6d833374fe99cf1	\N	f	2020-08-15 21:10:00	2020-08-18 19:10:08.546491	0			'/item?id=24170201':11 'browser':3 'comment':8 'kosmonaut':1 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24170201':9 'rust':7 'scratch':5 'web':2	zh	adamnemecek
416	入门：Apache Pulsar 项目成长史	{"ver":2,"uid":1,"hash":"SHA1:d3fb4762b36508c4ab5bc3b1b9ecc2ee00fc5667"}	https://toutiao.io/k/z7m3tiz	2020-08-19 04:10:09	入门：Apache Pulsar 项目成长史	4890bce7aa71220f426b5e7502aec144baa66687	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.625606	0			'apache':2,6 'pulsar':3,7 '入门':1,5 '项目成长史':4,8	zh	
491	Germany begins 3-year universal-basic-income trial	{"ver":2,"uid":1,"hash":"SHA1:bb3261db67d0a1252fc77f6c3c44167d2f2e4450"}	https://www.businessinsider.com/germany-begins-universal-basic-income-trial-three-years-2020-8	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24212628"> https://news.ycombinator.com/item?id=24212628 </a>	d7ba4b3b443367bf5529d4ea062996b75fe589cf	\N	f	2020-08-21 08:10:00	2020-08-22 07:10:08.401069	0			'/item?id=24212628':13 '3':3 'basic':7 'begin':2 'comment':10 'germani':1 'incom':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24212628':11 'trial':9 'univers':6 'universal-basic-incom':5 'year':4	zh	tosh
1053	Kotlin 源码里成吨的 noinline 和 crossinline 是干嘛的？看完这个视频你转头也写了一吨	{"ver":2,"uid":1,"hash":"SHA1:ba23d950fcaa4878c6c67834ebc372f363633c6e"}	https://toutiao.io/k/xvi1d56	2020-09-08 01:10:11	Kotlin 源码里成吨的 noinline 和 crossinline 是干嘛的？看完这个视频你转头也写了一吨	07977ddf216f79b968b254b2bef676ad03b35a5f	\N	f	2020-09-08 01:10:00	2020-09-08 23:10:11.507914	0			'crossinline':5,12 'kotlin':1,8 'noinline':3,10 '和':4,11 '是干嘛的':6,13 '源码里成吨的':2,9 '看完这个视频你转头也写了一吨':7,14	zh	
1056	Go：gops 如何与 Go 运行时交互？	{"ver":2,"uid":1,"hash":"SHA1:07d35273c50a9e77e947554c72b52cd75a8ae6c5"}	https://toutiao.io/k/wnm57uf	2020-09-08 02:10:12	Go：gops 如何与 Go 运行时交互？	4481f6fe16d393ee8529932558d202bf6f5af54d	\N	f	2020-09-08 02:10:00	2020-09-08 23:10:11.513834	0			'go':1,4,6,9 'gops':2,7 '如何与':3,8 '运行时交互':5,10	zh	
415	工具 vs 产品 And 知识 vs 思维	{"ver":2,"uid":1,"hash":"SHA1:93c78130c69275d9930dec0636396a9745790418"}	https://toutiao.io/k/ex0jj5x	2020-08-19 04:10:09	工具 vs 产品 And 知识 vs 思维	c059e9bbe88aebe287330a8c61535e9f0d287de5	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.611175	0			'and':4,11 'vs':2,6,9,13 '产品':3,10 '工具':1,8 '思维':7,14 '知识':5,12	zh	
1057	火花四射，当字体设计遇上机器学习	{"ver":2,"uid":1,"hash":"SHA1:8937ace6cde4828e06bac699202db7440a0fc761"}	https://toutiao.io/k/39b75s7	2020-09-08 02:10:12	火花四射，当字体设计遇上机器学习	7045f54f70fc39b1c17ce8a67e470af392f6e7a1	\N	f	2020-09-08 02:10:00	2020-09-08 23:10:11.517501	0			'当字体设计遇上机器学习':2,4 '火花四射':1,3	zh	
418	力扣刷题插件	{"ver":2,"uid":1,"hash":"SHA1:77c6e52b344c4df9d952a1513f0877988ac2c55b"}	https://toutiao.io/k/95wkuy1	2020-08-19 04:10:09	力扣刷题插件	cd8f1eda5a2889a650cd871444bf7815f2707c8a	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.639054	0			'力扣刷题插件':1,2	zh	
417	开源：如何实现一个 iOS AOP 框架？	{"ver":2,"uid":1,"hash":"SHA1:073972dfd58ccd9349c7ef39bf12b61c6432d0fb"}	https://toutiao.io/k/0umo6ma	2020-08-19 04:10:09	开源：如何实现一个 iOS AOP 框架？	094f0220f17d466c481b3eaf0163ddf8fa29de7f	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.643597	0			'aop':4,9 'ios':3,8 '如何实现一个':2,7 '开源':1,6 '框架':5,10	zh	
419	如何学习一些比较复杂的技术概念	{"ver":2,"uid":1,"hash":"SHA1:4f8bb3f49f38bb3b3ac65af7af1172dbb4d721b7"}	https://toutiao.io/k/g6y71kw	2020-08-19 04:10:09	如何学习一些比较复杂的技术概念	6b58c2795573294bee5e15943ae6a4826b667cf9	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.650044	0			'如何学习一些比较复杂的技术概念':1,2	zh	
375	图解 Vue 异步更新原理	{"ver":2,"uid":1,"hash":"SHA1:17031150e3df22f28f8bd05f92300eb05f5015cd"}	https://toutiao.io/k/1psu8sr	2020-08-18 07:10:09	图解 Vue 异步更新原理	654e955b52043cbcc92eb5bd7dc9f313a4ea074f	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.848622	0			'vue':2,5 '图解':1,4 '异步更新原理':3,6	zh	
627	Global Mass Surveillance – The Fourteen Eyes	{"ver":2,"uid":1,"hash":"SHA1:b05a7b19e001b7ea2351098de7f6b6bf339a6093"}	https://www.privacytools.io/providers/#ukusa	2020-08-26 02:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24272244"> https://news.ycombinator.com/item?id=24272244 </a>	5ed7842255e732b3cf0878b1e46e7ca59a3e2e4e	\N	f	2020-08-26 02:10:00	2020-08-29 04:10:17.759974	0			'/item?id=24272244':10 'comment':7 'eye':6 'fourteen':5 'global':1 'mass':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24272244':8 'surveil':3	zh	latexr
629	[推荐] 如何做一个懂产品的程序员？	{"ver":2,"uid":1,"hash":"SHA1:b3148560f2fd8578d9d70a7f89f350eccd6b1e82"}	https://toutiao.io/k/xeriwdj	2020-09-07 02:10:16	[推荐] 如何做一个懂产品的程序员？	7b49867f00f58501a0a0b7b1cebe0b4308a970f9	\N	f	2020-08-26 02:10:00	2020-09-09 16:10:10.675427	0			'如何做一个懂产品的程序员':2,4 '推荐':1,3	zh	
376	Uniswap 非权威开发指南（v2 版）	{"ver":2,"uid":1,"hash":"SHA1:d2bc620cab472ab49046b36d2a013014329a9e55"}	https://toutiao.io/k/75bnd0g	2020-08-18 07:10:09	Uniswap 非权威开发指南（v2 版）	58d8cd01490589f4a17b6760f214e1314cf54cc3	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.850824	0			'uniswap':1,5 'v2':3,7 '版':4,8 '非权威开发指南':2,6	zh	
374	Apple expands independent repair program to Mac after US antitrust investigation	{"ver":2,"uid":1,"hash":"SHA1:488f5f4b82d4e4b23e8d5f3e4338efd57ec0cc23"}	https://techcrunch.com/2020/08/17/apple-expands-its-independent-repair-program-to-mac-after-us-antitrust-investigation-examined-companys-repair-policies/	2020-08-18 07:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24190661"> https://news.ycombinator.com/item?id=24190661 </a>	2dbf60b475ce4a0840b79df5878a39ee27d1331d	\N	f	2020-08-18 07:10:00	2020-08-21 06:10:09.935349	0			'/item?id=24190661':15 'antitrust':10 'appl':1 'comment':12 'expand':2 'independ':3 'investig':11 'mac':7 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24190661':13 'program':5 'repair':4 'us':9	zh	irontinkerer
420	没想到 Shell 命令竟然还能这么玩？（Shell 玩转大数据分析）	{"ver":2,"uid":1,"hash":"SHA1:ca841ad8987de9e119caec5cfcec46426e5ef057"}	https://toutiao.io/k/0ah1n1b	2020-08-19 04:10:09	没想到 Shell 命令竟然还能这么玩？（Shell 玩转大数据分析）	f8c319da1995c4ffe62b9057d133b1a77dfd7a52	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.647869	0			'shell':2,4,7,9 '命令竟然还能这么玩':3,8 '没想到':1,6 '玩转大数据分析':5,10	zh	
421	Kubernetes 源码解析：Informer	{"ver":2,"uid":1,"hash":"SHA1:27b5fee5b62bb05f2acd751ef53cf3ef0939a7e5"}	https://toutiao.io/k/icop0p6	2020-08-19 04:10:09	Kubernetes 源码解析：Informer	06c1fc05bc56598ddf17017e24064ce3486e404b	\N	f	2020-08-19 04:10:00	2020-08-19 20:10:10.652293	0			'informer':3,6 'kubernetes':1,4 '源码解析':2,5	zh	
568	格密码学进阶02：Lattice Trapdoors Cont’d（格中陷门下篇）	{"ver":2,"uid":1,"hash":"SHA1:ca4fd2c67874967cc0bb2dd242c9b2533030fb7d"}	http://blog.higashi.tech/2020/08/20/trapdoor_02.html	2020-08-20 07:00:00	<h3 id="前期回顾">前期回顾</h3>\n\n<p>上一期，我们了解了格密码学中的一个非常重要的primitive，即Trapdoor（陷门）。</p>\n\n<p>如果快速回顾一下的话，我们学到最重要的莫非就是<strong>基于SIS与LWE的两个单向函数</strong>（OWF）的构造了。</p>\n\n<p>基于SIS的OWF \\(f_\\mathbf{A}\\)的构造如下：我们选择一个随机分布的矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)。这个OWF的输入是一个短向量\\(\\mathbf{x} \\in \\mathbb{Z}_{\\{0, \\pm1\\}}^m\\)，输出则是：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q\\]\n\n<p>基于LWE的OWF \\(g_\\mathbf{A}\\)的构造是这样的：我们同样选择随机分布的\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)。这个OWF的输入是一个任意的向量\\(\\mathbf{s} \\in \\mathbb{Z}_q^m\\)，与一个在噪音分布空间内的噪音向量\\(\\mathbf{e} \\in \\mathcal{X}_B\\)，输出为：</p>\n\n\\[g_\\mathbf{A}(\\mathbf{s, e}) = \\mathbf{s}^t \\mathbf{A} + \\mathbf{e}^t \\text{ mod }q\\]\n\n<p>如果我们比较这两个OWF的输入与输出空间之间的映射的话，我们会发现基于SIS的OWF是<strong>满射</strong>（surjective）的，而基于LWE的OWF是<strong>单射</strong>（injective）的。</p>\n\n<p>我们还讲到了\\(f_\\mathbf{A}, g_\\mathbf{A}\\)这两个OWF，如果我们有了Trapdoor构造出了对应的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)，那么这两个反函数输出的特点也会和原本的OWF相对应。\\(f_\\mathbf{A}^{-1}\\)会输出很多种符合要求的解的一个高斯分布，而\\(g_\\mathbf{A}^{-1}\\)则只会输出一个唯一的解。</p>\n\n<p>随后，我们对Lattice中的Trapdoor到底长什么样子做了一个简单的探索：看到了所谓的<strong>Type 1 Trapdoor</strong>其实就是OWF对应的Lattice \\(\\Lambda\\)的一组好的基向量（good basis），符合了短并且近似垂直的特性。基于此类Trapdoor，我们还大概了解了一下如何解决格中的一些难题（比如CVP）。</p>\n\n<p>上期的最后，我们抛砖引玉介绍了一下Type 2 Trapdoor的存在以及它的各种优点。这一期我们就来看看Type 2 Trapdoor到底是什么。</p>\n\n<h3 id="构造trapdoor第二类格陷门type-2-lattice-trapdoor">构造Trapdoor：第二类格陷门（Type 2 Lattice Trapdoor）</h3>\n\n<p>我们上期提到过，第一类格陷门是基于格本身的几何特点来构造的。虽然理解起来比较容易，但是实际上构造起来并不现实。</p>\n\n<p>第二类格陷门是Micciancio与Peikert在MP12中提出的一种新的陷门构造。这一类的构造并不依靠几何结构，而是依靠对于矩阵\\(\\mathbf{A}\\)的<strong>随机分布</strong>这一属性的更深理解。</p>\n\n<p>我们都知道，如果想要获得一个<strong>平均随机分布</strong>（<strong>Uniform Random</strong>）的随机矩阵，我们只需要平均随机地取\\(m \\times n\\)个随机数，然后放进矩阵\\(\\mathbf{A}\\)里就完成了。</p>\n\n<p>但是这并不是唯一的构造平均随机分布矩阵的方法。我们可以在随机选取的矩阵\\(\\mathbf{A}\\)上再叠加一些别的东西，比如说任意的另一个矩阵，最后得到的叠加仍然是随机分布的！一个很简单的例子就是<strong>One-Time Pad</strong>（OTP）流加密算法。在OTP中，我们随机生成一段密钥，并且通过XOR叠加到原本的原文上，最后得到的密文也是呈随机分布的。<strong>这一随机分布的特性导致了OTP系统的安全性</strong>。</p>\n\n<p>同理，我们第二类格陷门的思路一样——我们在矩阵\\(\\mathbf{A}\\)中引入一些特殊的结构，使得它具有一些方便我们构造Trapdoor的能力，然后通过随机分布的这一特性把这一特殊结构给掩盖起来，这样看到\\(\\mathbf{A}\\)的人，并不知道这个矩阵是真随机生成的，还是通过我们的Type 2 Trapdoor的方法生成的了。</p>\n\n<p>我们先不用担心这里的Trapdoor到底长什么样子，因为我们的最终目标是构造描述过的两个OWF \\(f_\\mathbf{A}, g_\\mathbf{A}\\)的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)。拥有了Type 2这一特性之后，MP12指出，我们可以通过非常简单的三个步骤来构造出我们想要的反函数。</p>\n\n<h4 id="构造f_mathbfa-1-g_mathbfa-1的三步操作">构造\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)的三步操作</h4>\n\n<p>接下来，我们来看看MP12是如何尝试构造反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)的。其中一共分为三步：</p>\n\n<ol>\n  <li>选择一个构造非常简单的<strong>Gadget Matrix</strong>（<strong>工具矩阵</strong>）\\(\\mathbf{G}\\)，并且基于此矩阵构造出同样的函数\\(f_\\mathbf{G}, g_\\mathbf{G}\\)。在此过程中，因为\\(\\mathbf{G}\\)的特殊构造，我们可以非常轻松的得到并且计算\\(f_\\mathbf{G}^{-1}, g_\\mathbf{G}^{-1}\\)。</li>\n  <li>通过上述描述的随机分布的特性，我们把\\(\\mathbf{G}\\)“嵌入“到随机矩阵\\(\\mathbf{A}\\)中，并且得到对应的Trapdoor矩阵\\(\\mathbf{R}\\)。表面上看\\(\\mathbf{A}\\)是呈平均随机分布的，但是只要我们知道\\(\\mathbf{R}\\)的值，我们就可以通过非常简单的矩阵相乘与线性变换，从\\(\\mathbf{A}\\)还原到\\(\\mathbf{G}\\)。</li>\n  <li>最后，我们根据第二部构造的这一特点构造出我们想要得到的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)。</li>\n</ol>\n\n<p>下面，我们就来逐步详细的走一遍，复现这一过程。</p>\n\n<h3 id="第一步工具矩阵下的单向函数">第一步：工具矩阵下的“单向函数”</h3>\n\n<p>我们知道，原本的\\(f_\\mathbf{A}, g_\\mathbf{A}\\)都是单向函数，是因为函数中包括的矩阵\\(\\mathbf{A}\\)是呈平均随机分布的。我们的第一步就是弱化这个矩阵——能否我们<strong>选择一个特殊结构的矩阵</strong>，可以打破这个矩阵构造成的\\(f\\)与\\(g\\)函数的单向性。</p>\n\n<p>这里说的特殊矩阵，其实就是我们称呼的<strong>Gadget Matrix</strong>（<strong>工具矩阵</strong>）\\(\\mathbf{G}\\)了。</p>\n\n<p>工具矩阵并不是什么复杂的东西，其实就是一个<strong>提前选好公开，并且结构非常简单的矩阵</strong>。为了更方便理解，我们不妨先来看看这个矩阵的第一行\\(\\mathbf{g}\\)——我们也可以称之为Gadget Vector（工具向量）。</p>\n\n<p>我们首先定义<strong>工具向量</strong>\\(\\mathbf{g}\\)为：</p>\n\n\\[\\mathbf{g} = \\begin{bmatrix}\n1&amp;2&amp;4&amp;\\cdots&amp;2^{k-1}\n\\end{bmatrix}\n\\in \\mathbb{Z}_q^{1 \\times k}\\]\n\n<p>为了方便计算和理解，我们这里定义模组为\\(q = 2^k\\)。这个向量其实就是依次排列的2的幂，结构非常简单。</p>\n\n<p>基于这个工具向量，我们可以定义一个迷你版本的\\(f_\\mathbf{g}, g_\\mathbf{g}\\)：</p>\n\n\\[f_\\mathbf{g}(\\mathbf{x}) = \\mathbf{gx} \\text{ mod }q\\\\\ng_\\mathbf{g}(s, \\mathbf{e}) = s \\cdot \\mathbf{g} + \\mathbf{e} \\text{ mod }q\\]\n\n<p>这里的\\(s\\)就是一个\\(\\mathbb{Z}_q\\)中的数值，我们可以理解为是原本的\\(g_\\mathbf{A}\\)中的输入向量\\(\\mathbf{s}\\)中的一个元素。</p>\n\n<p>这个迷你版的单向函数其实和完整版的结构一样，只是我们取了问题矩阵中的一行，<strong>缩小了输出的维度</strong>而已。由于工具矩阵\\(\\mathbf{g}\\)的特殊构造，我们会发现，我们这里构造的这两个“迷你单向函数”一点也不单向。不仅如此，我们可以很容易的从输出的结果还原出原本的输入。</p>\n\n<h4 id="计算g_mathbfg的反函数g_mathbfg-1">计算\\(g_\\mathbf{g}\\)的反函数\\(g_\\mathbf{g}^{-1}\\)</h4>\n\n<p>我们首先来看一看基于LWE的\\(g_\\mathbf{g}\\)。如果我们把\\(\\mathbf{g}\\)向量的具体构造带入进表达式中，那么这个求解\\(g_\\mathbf{g}\\)的反函数\\(g_\\mathbf{g}^{-1}\\)可以被表达为：</p>\n\n\\[\\text{Given }g_\\mathbf{g}(s, \\mathbf{e}) = s \\cdot \\mathbf{g} + \\mathbf{e} = \\begin{bmatrix}\ns + e_0 &amp; 2s + e_1 &amp; \\cdots &amp; 2^{k-1}s + e_{k-1}\n\\end{bmatrix},\\\\ \\text{Find }s.\\]\n\n<p>换句话说，我们这里的目标就是基于\\(s + e_0, 2s + e_1, \\dots, 2^{k-1} + e_{k-1}\\)这么一系列\\(k\\)个取值还原出原本的\\(s\\)来。</p>\n\n<p>由于我们之前定义了\\(q = 2^k\\)，所以\\(\\mathbb{Z}_q\\)中的所有数字都可以被\\(k\\) bits来表达。我们先来看最后的一项\\(2^{k-1}s + e_{k-1}\\)。因为\\(s\\)是一个\\(k\\) bits的数字，所以乘上了\\(2^{k-1}\\)就可以理解为把整个数字往左left shift了\\(k-1\\)位，即\\(s \\ll k-1\\)。这样就等于是我们把原本的\\(s\\)的最低位\\(s_0\\)一下子往左挪到了最高位上，然后剩下的其他位上都是0！</p>\n\n<p>随后，虽然我们还是会加上一个噪音\\(e_0\\)，但是我们知道噪音的取值空间\\(\\mathcal{X}_B\\)远远小于\\(q\\)，所以加上这一个噪音就并不会改变我们最高位上的值。这样一来，我们就可以靠观测\\(2^{k-1}s + e_{k-1}\\)的最高位上的数值，就能知道\\(s\\)的最低位\\(s_0\\)啦。</p>\n\n<p>现在我们依靠这个方法成功的提取出了\\(s_0\\)，接下来我们就看下一项\\(2^{k-2}s + e_{k-2}\\)。我们发现，其实这就等于是把\\(s\\)的值往左挪了\\(k-2\\)位，即\\(s \\ll k-2\\)。这样的话，原本\\(s\\)的倒数第二位\\(s_1\\)会被挪到最高位上，然后\\(s_0\\)会跟着被挪到第二位上。</p>\n\n\\[2^{k-2}s + e_{k-2} = 2^{k-1}s_1 + 2^{k-2}s_0 + e_{k-2}\\]\n\n<p>因为我们已经推测出\\(s_0\\)的值了，这个时候我们只需要把\\(s_0\\)从我们的表达式中减去，即减去\\(2^{k-2} s_0\\)，我们就可以得到和上面一样的表达式，然后通过观察最高位的值推出\\(s_1\\)了。</p>\n\n<p>继续使用这个算法依次的处理所有的\\(k\\)项之后，我们也就成功的还原出了\\(s\\)这个\\(k\\)-bit数字的每一位，从而还原出\\(s\\)了。这也就是反函数\\(g_\\mathbf{g}^{-1}\\)的全貌了：输入一个\\(k\\)项的乘积结果，用上述的算法还原出\\(k\\)格bits，然后重组成\\(s\\)输出。</p>\n\n<p>这里我们观察一下噪音的上限：只要噪音的取值上限\\(B\\)不超过\\(2^{k-1}\\)，即不会干扰最高位上面的值，那么就不会影响我们的反函数算法了。因为我们定义了\\(q = 2^k\\)，所以转换到这里的话，噪音的的取值范围则不能大于\\(q/2\\)。这一上限和LWE问题中对于噪音的分布上限的要求是一样的。在LWE中，\\(\\mathbb{Z}_q = [-q/2, q/2)\\)，\\(\\mathcal{X}_B = [-q/4, q/4)\\)。</p>\n\n<h4 id="计算f_mathbfg的反函数f_mathbfg-1">计算\\(f_\\mathbf{g}\\)的反函数\\(f_\\mathbf{g}^{-1}\\)</h4>\n\n<p>解决了LWE的迷你单向函数，接下来我们来看看基于SIS的迷你单向函数\\(f_\\mathbf{g}\\)。我们知道\\(f\\)函数是一个满射、有碰撞存在的函数，所以对应的我们的反函数\\(f_\\mathbf{g}^{-1}\\)应该可以输出一个高斯分布的解\\(\\mathbf{x}\\)并且使得：</p>\n\n\\[\\langle \\mathbf{g, x} \\rangle = u \\text{ mod }q\\]\n\n<p>这里的\\(u\\)是一个\\(\\mathbb{Z}_q\\)中的数字。现在我们来尝试找到符合这一要求的\\(\\mathbf{x}\\)。</p>\n\n<p>一看到这个问题，我们马上可以想到一个思路：因为\\(\\mathbf{g}\\)正好是由2的幂组成，所以很理所当然的我们就可以直接把\\(u\\)这个数字分解成\\(k\\)个bits，然后每一个bit正好对应\\(\\mathbf{x}\\)向量的一项，就搞定了。</p>\n\n<p>但是我们需要注意到的是，虽然这个方法找到的\\(\\mathbf{x}\\)符合上述的等式，但是这个算法是<strong>deterministic</strong>（确定）的！这也就代表无论运行这个算法多少次，我们最后都只会得到一模一样的\\(\\mathbf{x}\\)。然而这样的输出并不符合我们之前所期待的高斯分布的要求。</p>\n\n<p>那么到底要如何生成我们所希望的高斯分布呢？我们这里介绍一种最简单方法：<strong>穷举法</strong>（brute force）。</p>\n\n<p>因为向量\\(\\mathbf{g}\\)是一个已知的结构，并且输入的\\(\\mathbf{x}\\)的分布区域很局限，即\\(\\mathbf{x} \\in \\mathbb{Z}_{\\{0,\\pm1\\}}^m\\) ，那我们完全就可以在看到\\(u\\)之前穷举出所有可能的\\(\\mathbf{x}\\)的值和对应的\\(\\langle \\mathbf{g, x } \\rangle\\)，然后再根据输出值把所有可能的输入都存起来。这样的话，当我们看到\\(u\\)之后，只需要去找到可以生成\\(u\\)的一系列输入\\(\\mathbf{x, x', x'', \\dots}\\)，然后依次输出就可以了。</p>\n\n<p>因为我们需要一个高斯分布的结果，所以我们穷举的步骤如下：</p>\n\n<ol>\n  <li>根据高斯分布，从\\(\\mathbb{Z}_{\\{0, \\pm1\\}}^m\\)中抽取一个\\(\\mathbf{x}\\)。</li>\n  <li>计算\\(u = \\langle \\mathbf{g, x} \\rangle \\in \\mathbb{Z}_q\\)，并且保存结果。</li>\n  <li>重复第一步，直到\\(\\mathbb{Z}_q\\)空间的每一个数字都被覆盖。</li>\n</ol>\n\n<p>一共需要重复多少次才可以结束穷举的过程呢？我们观察发现，给定任意随机的\\(\\mathbf{x}\\)，那么得到对应的\\(u\\)的结果在\\(\\mathbb{Z}_q\\)中大概也是均匀随机分布的。那么我们就可以把问题转化成：我们在\\(\\mathbb{Z}_q\\)空间中要取多少个随机数，才可以遍历整个\\(\\mathbb{Z}_q\\)空间？</p>\n\n<p>这其实就是一个经典的<strong>赠券收集问题</strong>（<strong>Coupon Collecting Problem</strong>），当我们生成\\(q \\log{q}\\)个随机的\\(\\mathbf{x}\\)之后，我们就可以大概率的相信整个输出空间\\(\\mathbb{Z}_q\\)已经被遍历啦。当我们完成这一步，构建出这个数据库之后，我们就可以非常轻松的反转\\(f_\\mathbf{g}\\)了。</p>\n\n<p>穷举法虽然很容易理解，但是不幸的是<strong>复杂度太高</strong>了。一旦\\(q\\)变得很大，那么这个算法马上就变得效率很低。MP12的原文中也提到了这一点，并且提出了一个更加高效的方法。具体的实现方法我们就不多说了，不过大概的思路就是从最低位开始“二进制”分解\\(u\\)，不过我们选择每个bit的时候，我们不仅选择0或者1，而是我们在\\(2\\mathbb{Z} + b\\)的coset（伴集）中随机选择。</p>\n\n<h4 id="从工具向量延伸到工具矩阵">从工具向量延伸到工具矩阵</h4>\n\n<p>现在我们已经掌握了如何计算迷你版本的SIS与LWE\\(f_\\mathbf{g}, g_\\mathbf{g}\\)的反函数\\(f_\\mathbf{g}^{-1}, g_\\mathbf{g}^{-1}\\)。下一步，我们需要扩展这个定义到真正的SIS和LWE OWF。</p>\n\n<p>我们知道\\(\\mathbf{g}\\)是由2的幂组成的，其实真正的工具矩阵\\(\\mathbf{G}\\)构造大致相同，只是维度扩展成了\\(n\\)行：</p>\n\n\\[\\mathbf{G} = \\mathbf{I}_n \\otimes \\mathbf{g} = \\begin{bmatrix}\n\\cdots\\mathbf{g}\\cdots&amp;&amp;&amp;\\\\\n&amp;\\cdots\\mathbf{g}\\cdots&amp;&amp;\\\\\n&amp;&amp;\\ddots&amp;\\\\\n&amp;&amp;&amp;\\cdots\\mathbf{g}\\cdots\n\\end{bmatrix} \\in \\mathbb{Z}_q^{n \\times nk}\\]\n\n<p>这样一来，我们真正的单向函数\\(f_\\mathbf{G}, g_\\mathbf{G}\\)就是：</p>\n\n\\[f_\\mathbf{G}(\\mathbf{x}) = \\mathbf{Gx} \\text{ mod q}\\\\\ng_\\mathbf{G}(\\mathbf{s, e}) = \\mathbf{s}^t \\mathbf{G} + \\mathbf{e}^t \\text{ mod }q\\]\n\n<p>因为\\(\\mathbf{G}\\)的构造和\\(\\mathbf{g}\\)大致相同，所以反函数的计算就很简单了：我们可以把\\(f_\\mathbf{G}^{-1}, g_\\mathbf{G}^{-1}\\)分解成\\(n\\)个平行的\\(f_\\mathbf{g}^{-1}, g_\\mathbf{g}^{-1}\\)，然后<strong>依次求解之后，再按照应该的维度组合起来</strong>，就搞定啦。</p>\n\n<h3 id="第二步从mathbfg出发生成mathbfa">第二步：从\\(\\mathbf{G}\\)出发，生成\\(\\mathbf{A}\\)</h3>\n\n<p>知道了如何计算基于\\(\\mathbf{G}\\)的SIS和LWE的反函数\\(f_\\mathbf{G}^{-1}, g_\\mathbf{G}^{-1}\\)之后，我们距离构造真正的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)已经不远了！其实现在的路线已经很清晰了，我们只要想办法可以从基于\\(\\mathbf{A}\\)的SIS/LWE规约到基于\\(\\mathbf{G}\\)的问题，那就可以使用我们上一步得到的反函数来计算结果了。</p>\n\n<p>现在我们来看看如何把\\(\\mathbf{G}\\)和\\(\\mathbf{A}\\)联系起来。</p>\n\n<p>之前有所提到过，构造SIS与LWE问题的矩阵\\(\\mathbf{A}\\)其实就有一个要求，即这个矩阵需要看上去是平均随机分布的。我们可以尝试构造出如下的\\(\\mathbf{A}\\)的结构：</p>\n\n\\[\\mathbf{B} \\in_{Uniform} \\mathbb{Z}_q^{n \\times m'}, \\mathbf{R} \\in_{Gaussian} \\mathbb{Z}_q^{m' \\times n \\log{q}}\\\\\n\\mathbf{A} = [\\mathbf{B} \\vert \\mathbf{G}] \\cdot \\begin{bmatrix}\n\\mathbf{I}&amp;\\mathbf{R}\\\\\n\\mathbf{0}&amp;\\mathbf{I}\n\\end{bmatrix}\n= [\\mathbf{B \\vert G - BR}]\\]\n\n<p>其中，\\(\\mathbf{B}\\)是一个平均分布的\\(n \\times m'\\)维度的随机矩阵，\\(\\mathbf{R}\\)是一个高斯分布的\\(m' \\times n \\log{q}\\)维度的随机矩阵。</p>\n\n<p>这样构造的\\(\\mathbf{A}\\)是不是平均随机分布的呢？我们不妨先来了解一个定理，即<strong>Leftover Hash Lemma</strong>。</p>\n\n<p>LHL指出，如果我们选择的\\(\\mathbf{B, R}\\)矩阵的维度中，只要\\(m' \\approx n \\log{q}\\)，那么这两个矩阵的乘积\\(\\mathbf{BR}\\)的随机分布近似于平均随机分布\\(\\mathbf{U}\\)：</p>\n\n\\[(\\mathbf{B, BR}) \\approx (\\mathbf{B, U})\\]\n\n<p>这样一来，我们在看回我们这里定义的\\(\\mathbf{A} = [\\mathbf{B \\vert G - BR}]\\)。因为\\(\\mathbf{BR}\\)是平均随机分布的，所以\\(\\mathbf{G - BR}\\)也是平均随机分布的（因为\\(\\mathbf{G}\\)矩阵是一个已知不变的常数矩阵）。再加上左半边平均随机选择的\\(\\mathbf{B}\\)，我们就可以充分证明矩阵\\(\\mathbf{A}\\)是一个平均随机分布的矩阵了！</p>\n\n<p>现在，我们拥有了一个看似是平均随机分布的\\(\\mathbf{A}\\)，如果我们公布\\(\\mathbf{A}\\)出去，没有人会知道这个矩阵究竟是随机生成的，还是通过我们这里的方法用\\(\\mathbf{B, R, G}\\)生成的。更重要的是，一旦知道\\(\\mathbf{R}\\)的值的话，我们就可以非常轻松的从\\(\\mathbf{A}\\)还原到\\(\\mathbf{G}\\)：</p>\n\n\\[\\mathbf{A} \\cdot \n\\begin{bmatrix}\n\\mathbf{R}\\\\\n\\mathbf{I}\n\\end{bmatrix}\n = \\mathbf{G}\\]\n\n<p>这里的随机高斯分布矩阵\\(\\mathbf{R}\\)，就是我们这个构造的<strong>Trapdoor</strong>了！如果不知道\\(\\mathbf{R}\\)，那么\\(\\mathbf{A}\\)就是一个纯随机生成的矩阵。但是一旦知道了\\(\\mathbf{R}\\)的话，我们就可以很快速的把\\(\\mathbf{A}\\)还原成原本的\\(\\mathbf{G}\\)。</p>\n\n<h3 id="第三步从f_mathbfa-1-g_mathbfa-1规约到f_mathbfg-1-g_mathbfg-1">第三步：从\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)规约到\\(f_\\mathbf{G}^{-1}, g_\\mathbf{G}^{-1}\\)</h3>\n\n<p><strong>我们的Trapdoor构造大业终于要完工了</strong>。第二步完成之后，我们的矩阵\\(\\mathbf{A}\\)就变成了一个拥有Trapdoor的特殊矩阵。</p>\n\n<p>我们把拥有Trapdoor的\\(\\mathbf{A}\\)放入原本的SIS和LWE的单向函数中。如果不知道Trapdoor的话，那么这两个OWF应该和原来一样，无法计算反函数。现在，由于我们构造了这个矩阵，所以我们也就知道Trapdoor \\(\\mathbf{R}\\)。接下来要做的，就是基于Trapdoor的特性，尝试构造原本不可能完成的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)。</p>\n\n<h4 id="构造g_mathbfa的反函数g_mathbfa-1">构造\\(g_\\mathbf{A}\\)的反函数\\(g_\\mathbf{A}^{-1}\\)</h4>\n\n<p>和之前一样，我们都知道基于LWE的单向函数\\(g\\)比较好对付，因为这个函数的单射特性导致了反函数只会有唯一的解。所以我们先来看看，<strong>怎么通过Trapdoor来求解LWE</strong>。</p>\n\n<p>我们再重新看一下计算LWE的反函数的问题描述：</p>\n\n\\[\\text{Given }\\mathbf{b}^t = \\mathbf{s}^t \\mathbf{A} + \\mathbf{e}^t \\text{ mod }q,\\\\\n\\text{Find unique }(\\mathbf{s, e})\\]\n\n<p>因为我们知道了矩阵\\(\\mathbf{A}\\)的特殊结构与Trapdoor \\(\\mathbf{R}\\)，我们可以直接把LWE的结果乘上陷门矩阵：</p>\n\n\\[\\mathbf{b}^t \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} = \\mathbf{s}^t \\mathbf{G} + \\mathbf{e}^t \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix}\\]\n\n<p>我们观察得到的结果可以发现，这和我们之前的\\(g_\\mathbf{G}\\)的结果非常相似。唯一不同的在于最后的噪音项，之前是\\(\\mathbf{e}^t\\)，而现在是\\(\\mathbf{e}^t \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix}\\)。</p>\n\n<p>然而，我们其实并不在乎噪音的具体数值，只要噪音向量\\(\\mathbf{e}^t \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix}\\)的每一项的大小不超过\\([-q/4, q/4)\\)的范围，那就可以还原出\\(\\mathbf{s}\\)的值了。我们可以直接使用\\(g_\\mathbf{G}^ {-1}\\)来计算\\(\\mathbf{s}\\)：</p>\n\n\\[\\mathbf{s} = g_\\mathbf{A}^{-1}(\\mathbf{b}^t) = g_\\mathbf{G}^{-1}(\\mathbf{b}^t \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix})\\]\n\n<p>是不是非常简单？这也就是LWE构造的格密码学算法的特点，计算过程非常的简单并且优雅。</p>\n\n<h4 id="规约f_mathbfa的反函数f_mathbfa-1">规约\\(f_\\mathbf{A}\\)的反函数\\(f_\\mathbf{A}^{-1}\\)</h4>\n\n<p>解决了LWE之后，我们现在来看SIS的反函数。</p>\n\n<p>我们在上一期的文章中讲到，因为有碰撞的存在，所以SIS OWF的反函数\\(f_\\mathbf{A}^{-1}\\)不会输出一个唯一的结果，而是一组结果的高斯分布。我们再回顾一下SIS反函数的定义：</p>\n\n\\[\\text{Given } \\mathbf{u} = f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q,\\\\\n\\text{Sample } \\mathbf{x'} \\leftarrow f_\\mathbf{A}^{-1}(\\mathbf{u})\\]\n\n<p><img src="/assets/images/lattice/image-20200815235800774.png" alt="image-20200815235800774" /></p>\n\n<p>MP12中给出的这张离散高斯分布的图代表了这个反函数输出不同的值的可能性。越靠近中心，那么对应的概率越高。</p>\n\n<p>现在，我们已知了结果向量\\(\\mathbf{u}\\)，我们可以首先通过<strong>工具矩阵下的SIS反函数</strong>\\(f_\\mathbf{G}^{-1}\\)随机的抽取一个符合要求的preimage \\(\\mathbf{z}\\)：</p>\n\n\\[\\mathbf{z} \\leftarrow f_\\mathbf{G}^{-1}(\\mathbf{u})\\]\n\n<p>然后，我们只需要计算这个preimage \\(\\mathbf{z}\\)和Trapdoor矩阵的乘积，就能得到我们想要的结果\\(\\mathbf{x}\\)了：</p>\n\n\\[\\mathbf{x} = f_\\mathbf{A}^{-1}(\\mathbf{u}) = \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} \\cdot \\mathbf{z}\\]\n\n<p>我们可以快速的验证一下这个解\\(\\mathbf{x}\\)的正确性：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} = \\mathbf{A} \\cdot \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} \\cdot \\mathbf{z} = \\mathbf{Gz} = \\mathbf{u} \\text{ mod }q\\]\n\n<p>验证通过！这下我们构造的反函数就能够成功的生成的\\(\\mathbf{x}\\)了。是不是大功告成了？不幸的是，我们这儿的反函数\\(f_\\mathbf{A}^{-1}\\)有一个巨大的问题。</p>\n\n<p>问题出在，我们这个反函数输出的值的<strong>随机分布又出了问题</strong>。但是不是我们之前已经确保\\(f_\\mathbf{G}^{-1}\\)的输出是随机高斯分布了吗？但是我们发现，一旦我们把\\(\\mathbf{z}\\)乘上我们的Trapdoor \\(\\mathbf{R}\\)之后，整个随机分布又发生了改变。</p>\n\n<p><img src="/assets/images/lattice/image-20200819015023120.png" alt="image-20200819015023120" /></p>\n\n<p>根据MP12中所述的，如果我们观察这个反函数输出的\\(\\mathbf{x} = \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} \\cdot \\mathbf{z}\\)的<strong>Covariance</strong>（协方差）的话，我们会发现这个协方差会暴露我们的Trapdoor \\(\\mathbf{R}\\)的信息：</p>\n\n\\[\\Sigma = \\mathbb{E}_\\mathbf{x}[\\mathbf{x \\cdot x}^t] = \\mathbb{E}_\\mathbf{z}[\\mathbf{R \\cdot z z}^t \\mathbf{\\cdot R}^t] \\approx \\sigma^2 \\cdot \\mathbf{RR}^t\\]\n\n<p>这里的\\(\\sigma\\)代表了原本\\(\\mathbf{z}\\)的高斯分布的一个半径系数。这样的非标准高斯分布的协方差会导致的问题就是，如果我们利用这个Trapdoor生成了太多的反函数的解\\(\\mathbf{x}\\)之后，别人就可以直接通过观测\\(\\mathbf{x}\\)的分布猜出我们的Trapdoor来。这对于这个体系的安全性是致命的。</p>\n\n<p>如果我们希望反函数的输出为高斯分布的话，那么我们需要输出的\\(\\mathbf{x}\\)的协方差为高斯分布的协方差，即\\(\\sigma^2 \\mathbf{I}\\)。然而我们现在的\\(\\sigma^2 \\cdot \\mathbf{RR}^t\\)和想要的还差一段距离。</p>\n\n<p>那怎么办？Peikert在2010年提出了<strong>pertubation method</strong>，即我们可以加入额外的随机数来补上缺少的这部分协方差。</p>\n\n<p><img src="/assets/images/lattice/image-20200820001444137.png" alt="image-20200820001444137" /></p>\n\n<p>即然我们有了一个协方差为\\(\\mathbf{RR}^t\\)的高斯分布，我们只需要补上一个\\((\\sigma^2 \\mathbf{I} - \\mathbf{RR}^t)\\)的高斯分布，两者加起来的话，仍然是一个高斯分布。这是因为高斯分布之间相互的卷积还会是高斯分布（Convolution of Gaussians）。</p>\n\n<p>这样一来，MP12提出了如下的修改方法，可以使得反函数\\(f_\\mathbf{A}^{-1}\\)输出均匀高斯分布的结果：</p>\n\n<ol>\n  <li>首先，我们随机从\\((\\sigma^2 \\mathbf{I} - \\mathbf{RR}^t)\\)的分布中抽取一个向量\\(\\mathbf{p}\\)。</li>\n  <li>随后，我们就跟之前一样，使用\\(f_\\mathbf{G}^{-1}\\)来找到一个\\(\\mathbf{z}\\)使得\\(\\mathbf{Gz = u - Ap}\\)。</li>\n  <li>最后，我们输出\\(\\mathbf{x = p + \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} \\cdot z}\\)。</li>\n</ol>\n\n<p>我们快速的来验证一下这个方案的正确性。</p>\n\n\\[\\mathbf{Ax} = \\mathbf{Ap} + \\mathbf{A} \\begin{bmatrix}\\mathbf{R}\\\\\\mathbf{I}\\end{bmatrix} \\cdot z = \\mathbf{Ap + Gz} = \\mathbf{u}\\]\n\n<p>这样一来，我们就彻底搞定了SIS单向函数的反函数\\(f_\\mathbf{A}^{-1}\\)了。</p>\n\n<h3 id="篇尾小结">篇尾小结</h3>\n\n<p>经过这三步构造之后，我们就成功的复现了MP12中的Lattice Trapdoor了！最后，我们再总结一下我们到底做了什么。</p>\n\n<p>我们了解了一个<strong>万能的工具矩阵</strong>\\(\\mathbf{G}\\)。只要我们能够把问题规约到基于\\(\\mathbf{G}\\)的SIS或者LWE上来，那么问题一下子就变得好解了。</p>\n\n<p>上期的时候介绍Type 1 Trapdoor的时候，我们提到了Type 2其实蕴涵了Type 1在里面。这其实就是因为如果我们的SIS与LWE问题都基于\\(\\mathbf{G}\\)的话，我们就可以很快的找到一组\\(\\mathbf{G}\\)对应的Lattice \\(\\Lambda(\\mathbf{G})\\)的短基向量：</p>\n\n\\[\\mathbf{G} \\cdot \\begin{bmatrix}\n2&amp;0&amp;0&amp;\\cdots&amp;0\\\\\n-1&amp;2&amp;0&amp;\\cdots&amp;0\\\\\n0&amp;-1&amp;2&amp;\\cdots&amp;0\\\\\n0&amp;0&amp;-1&amp;\\cdots&amp;0\\\\\n\\vdots&amp;\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\\n0&amp;0&amp;0&amp;\\cdots&amp;2\\\\\n0&amp;0&amp;0&amp;\\cdots&amp;-1\n\\end{bmatrix} = 0 \\text{ mod }q\\]\n\n<p>这个短基向量矩阵其实就是\\(\\mathbf{G}\\)的Type 1 Trapdoor了。</p>\n\n<p>这也就是说，其实Type 2 Trapdoor的精髓在于，我们掌握了一个随机的Trapdoor \\(\\mathbf{R}\\)，让我们可以把一个随机的SIS/LWE问题<strong>转化</strong>到基于\\(\\mathbf{G}\\)的SIS/LWE问题上。然后由于我们已经知道了\\(\\mathbf{G}\\)的Type 1 Trapdoor，我们就可以求解SIS/LWE问题啦。</p>\n\n<p>总的来说，要构造带有Trapdoor的SIS/LWE单向函数的话，我们只需要选取平均分布的\\(\\mathbf{B}\\)和高斯分布的\\(\\mathbf{R}\\)，随后构造\\(\\mathbf{A} = [\\mathbf{B \\vert G - BR}]\\)，作为SIS/LWE的单向函数的问题矩阵。只要掌握了Trapdoor \\(\\mathbf{R}\\)，任何人都可以有效的计算这两个单向函数的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)。这就是Lattice Trapdoor的全貌了。</p>\n\n<p>了解完Lattice Trapdoor这一强大的工具之后，我们下一期开始就可以来学习基于Trapdoor的一些进阶的Lattice体系：<strong>Identity-based Encryption</strong>（身份加密，IBE）。</p>\n\n<h3 id="references">References</h3>\n\n<p>本文内容主要参考于IIT Madras的教授<a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>的讲座。</p>\n\n<p>The contents of this post is summarized from Prof. <a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>’s talk at Simon’s Institute.</p>	d04edd5b3e5e1f8f322c15bbf90b98ce0734ce86	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.150279	0			'-1':118,122,127,133,231,235,244,248,255,259,283,287,320,324,382,468,485,512,516,533,536,556,560,569,573,579,602,606,657,702,719,749,763,975,979,1074,1078,1085,1089,1108,1112,1118,1122,1343,1347,1352,1356,1381,1385,1394,1512,1521,1528,1552,1562,1588,1602,1612,1629,1686,1694,1822,1842,1893,1937,1943,1949,1966,2031,2035 '-2':620,624,630,636,650,654,662,667,679 '/lwe':1129,1987,1992,2001,2005,2022 '0':37,505,526,584,590,612,616,646,664,670,674,681,835,869,1189,1933,1934,1936,1939,1941,1942,1946,1947,1948,1951,1957,1958,1959,1962,1963,1964,1969 '1':138,376,389,508,529,642,659,685,1910,1977,1998 '1在里面':1914 '2':150,153,158,217,377,380,395,510,531,544,554,567,600,618,648,655,660,677,717,724,956,1753,1781,1786,1803,1827,1932,1938,1944,1961,1981 '2s':506,527 '2其实蕴涵了type':1913 '2这一特性之后':237 '4':378 'a':19,23,43,54,58,84,92,109,112,117,121,126,132,169,183,188,207,213,223,226,230,234,243,247,254,258,295,302,311,319,323,335,338,342,442,1100,1117,1121,1127,1140,1145,1150,1175,1218,1252,1276,1281,1284,1300,1305,1326,1334,1342,1346,1361,1365,1380,1384,1389,1393,1412,1427,1520,1547,1551,1561,1572,1587,1628,1649,1655,1685,1821,1872,1892,2015,2030,2034 'agrawal':2061 'agrawal的讲座':2050 'ap':1850,1870,1884 'approx':1232,1245,1751 'at':2064 'ax':47,1576,1653,1868 'b':80,594,715,738,959,1153,1177,1195,1201,1227,1243,1247,1254,1273,1289,1406,1433,1523,1530,2009,2017 'based':2043 'basis':143 'begin':374,501,1002,1182,1307,1436,1453,1477,1492,1533,1632,1657,1709,1856,1873,1930 'bits来表达':552 'bits的数字':565 'bit数字的每一位':694 'bmatrix':375,384,502,518,1003,1018,1183,1193,1308,1314,1437,1443,1454,1460,1478,1484,1493,1499,1534,1540,1633,1639,1658,1664,1710,1716,1857,1863,1874,1880,1931,1968 'br':1198,1238,1244,1257,1260,1265,2020 'brute':819 'cdot':424,496,1181,1306,1435,1452,1476,1491,1532,1640,1656,1665,1717,1734,1743,1748,1754,1787,1864,1881,1929 'cdots':379,509,1004,1007,1008,1011,1013,1016,1935,1940,1945,1950,1960,1965 'collecting':918 'cont':4 'contents':2052 'convolution':1813 'coupon':917 'd':5 'ddots':1012,1955 'dots':530,861 'e':76,87,94,422,428,494,500,504,507,514,525,528,534,558,589,604,622,652,665,1050,1057,1414,1424,1450,1470,1474,1489,1729,1738 'encryption':2044 'end':383,517,1017,1192,1313,1442,1459,1483,1498,1539,1638,1663,1715,1862,1879,1967 'f':17,41,107,115,124,221,228,241,252,268,280,317,333,347,401,407,742,746,752,756,760,936,965,972,1028,1035,1071,1082,1105,1115,1340,1349,1378,1545,1549,1559,1570,1585,1599,1609,1626,1647,1683,1691,1819,1839,1890,2028 'find':520,1420 'force':820 'from':2058 'g':52,82,110,119,130,224,232,245,256,266,270,271,273,277,282,284,286,291,314,321,336,349,356,364,370,373,403,404,406,409,417,419,426,440,452,461,463,465,467,470,472,475,478,480,482,484,489,491,498,699,701,744,748,754,762,770,791,823,846,879,938,967,968,970,974,976,978,985,989,995,1001,1006,1010,1015,1030,1031,1033,1037,1045,1047,1055,1064,1067,1073,1075,1077,1084,1086,1088,1096,1103,1107,1109,1111,1119,1132,1137,1180,1197,1256,1264,1269,1291,1303,1316,1337,1344,1351,1353,1355,1382,1387,1391,1397,1448,1463,1465,1509,1511,1518,1525,1527,1601,1611,1693,1841,1903,1906,1917,1921,1925,1928,1975,1990,1996,2019,2032 'gaussian':1165 'gaussians':1815 'given':488,1404,1567 'good':142 'gx':413,1041 'gz':1669,1848,1885 'hash':1222 'i':997,1185,1191,1312,1441,1458,1482,1497,1538,1637,1662,1714,1783,1805,1829,1861,1878 'ibe':2046 'identity':2042 'identity-based':2041 'in':24,34,59,69,77,385,832,882,1019,1154,1164 'injective':104 'institute':2067 'is':2056 'k':381,391,396,511,515,532,535,538,545,551,555,559,564,568,572,578,601,605,619,623,629,635,649,653,656,661,666,678,688,693,705,708,718,725,796 'lambda':140,1923 'langle':768,844,877 'lattice':2,159 'leftarrow':1584,1608 'lemma':1223 'lhl指出':1224 'll':577,634 'log':922,1172,1213,1234 'm':30,39,65,73,177,837,871,1161,1169,1205,1210,1231 'madras的教授shweta':2049 'mathbb':25,35,60,70,386,435,547,731,780,833,867,883,889,901,907,912,929,957,1020,1156,1166,1728,1737 'mathbf':18,22,32,42,44,46,53,57,67,75,83,85,88,91,93,108,111,116,120,125,131,168,182,187,206,212,222,225,229,233,242,246,253,257,265,269,272,276,281,285,290,294,298,301,305,310,313,318,322,334,337,341,355,363,369,372,402,405,408,410,412,418,421,425,427,441,444,451,462,466,471,474,479,483,490,493,497,499,700,743,747,753,761,765,769,785,790,799,805,813,822,826,830,841,845,857,873,878,896,925,937,966,969,973,977,984,988,994,996,1000,1005,1009,1014,1029,1032,1036,1038,1040,1046,1048,1051,1054,1056,1063,1066,1072,1076,1083,1087,1095,1099,1102,1106,1110,1116,1120,1126,1131,1136,1139,1144,1149,1152,1162,1174,1176,1179,1184,1186,1188,1190,1194,1200,1207,1217,1226,1237,1240,1242,1246,1251,1253,1259,1263,1268,1272,1275,1280,1283,1288,1295,1299,1302,1304,1309,1311,1315,1318,1322,1325,1329,1333,1336,1341,1345,1350,1354,1360,1364,1373,1379,1383,1388,1392,1405,1408,1411,1413,1422,1426,1429,1432,1438,1440,1444,1447,1449,1455,1457,1464,1469,1473,1479,1481,1488,1494,1496,1505,1510,1514,1516,1519,1522,1526,1529,1535,1537,1546,1550,1560,1568,1571,1573,1575,1582,1586,1589,1596,1600,1604,1606,1610,1613,1617,1621,1624,1627,1630,1634,1636,1641,1644,1648,1650,1652 'mathcal':78,592,736 'matrix':263,353 'method':1794 'mod':49,97,415,430,775,1043,1060,1417,1578,1673,1971 'mp12中给出的这张离散高斯分布的图代表了这个反函数输出不同的值的可能性':1591 'mp12指出':238 'mp12提出了如下的修改方法':1817 'mp12的原文中也提到了这一点':946 'n':28,63,179,992,998,1023,1080,1159,1171,1203,1212,1233 'nk':1025 'of':1814,2053 'otimes':999 'otp':196 'owf':14,982 'owf的反函数':1558 'p':1835,1855 'pad':195 'peikert在2010年提出了pertubation':1793 'pm1':38,836,870 'post':2055 'problem':919 'prof':2059 'q':27,50,62,72,98,388,394,416,431,437,543,549,596,723,733,776,782,885,891,903,909,914,921,923,931,943,1022,1044,1061,1158,1168,1173,1214,1235,1418,1579,1674,1972 'q/2':728,734,735 'q/4':739,740,1501,1502 'r':299,306,1163,1187,1208,1228,1290,1296,1310,1319,1323,1330,1374,1430,1439,1456,1480,1495,1536,1635,1660,1702,1712,1725,1742,1749,1859,1876,1985,2012,2026 'random':174 'rangle':772,848,881 'references':2047 'rr':1756,1789,1798,1807,1831 's':68,86,89,420,423,433,445,492,495,503,513,521,524,540,557,562,576,581,583,603,609,611,615,621,627,633,639,641,645,651,658,663,669,673,680,684,691,696,711,1049,1052,1409,1423,1445,1506,1515,1517,2062,2066 'sample':1581 'shift了':571 'shweta':2060 'sigma':1727,1752,1759,1780,1785,1802,1826 'simon':2065 'summarized':2057 'surjective':101 't':90,95,1053,1058,1407,1410,1415,1434,1446,1451,1471,1475,1490,1524,1531,1736,1746,1750,1757,1790,1799,1808,1832 'talk':2063 'text':48,96,414,429,487,519,774,1042,1059,1403,1416,1419,1566,1577,1580,1672,1970 'the':2051 'this':2054 'time':194 'times':29,64,178,390,1024,1160,1170,1204,1211 'trapdoor':160,1999 'trapdoors':3 'trapdoor了':1898,1978 'trapdoor其实就是owf对应的lattice':139 'trapdoor到底是什么':154 'trapdoor的全貌了':2037 'trapdoor的存在以及它的各种优点':151 'trapdoor的方法生成的了':218 'trapdoor的时候':1911 'trapdoor的精髓在于':1982 'trapdoor这一强大的工具之后':2039 'type':157 'u':773,778,794,839,852,855,876,899,952,1241,1248,1569,1590,1597,1614,1631,1671,1849,1887 'uniform':173,1155 'unique':1421 'vdots':1952,1953,1954,1956 'vector':366 'vert':1178,1196,1255,2018 'x':33,45,79,411,593,737,766,771,786,800,806,814,827,831,842,847,858,859,860,874,880,897,926,1039,1574,1583,1622,1625,1645,1651,1678,1708,1731,1733,1735,1767,1771,1777,1854 'z':26,36,61,71,387,436,548,732,781,834,868,884,890,902,908,913,930,958,1021,1157,1167,1605,1607,1618,1642,1667,1699,1719,1740,1744,1745,1762,1845,1865,1882 '一下子往左挪到了最高位上':585 '一个很简单的例子就是one':193 '一个很简单的例子就是one-time':192 '一共需要重复多少次才可以结束穷举的过程呢':893 '一旦':942 '一旦我们把':1697 '一旦知道':1294 '一点也不单向':457 '一看到这个问题':787 '上一期':8 '上再叠加一些别的东西':189 '上期的时候介绍type':1909 '上期的最后':148 '下一步':980 '下面':325 '不仅如此':458 '不会输出一个唯一的结果':1563 '不幸的是':1681 '不超过':716 '不过大概的思路就是从最低位开始':949 '不过我们选择每个bit的时候':953 '与':348 '与一个在噪音分布空间内的噪音向量':74 '两者加起来的话':1810 '个bits':797 '个取值还原出原本的':539 '个平行的':1081 '个随机数':180 '个随机的':924 '中':296 '中大概也是均匀随机分布的':904 '中引入一些特殊的结构':208 '中抽取一个':872 '中的一个元素':446 '中的所有数字都可以被':550 '中的数值':438 '中的数字':783 '中的输入向量':443 '中随机选择':962 '为':371 '为了方便计算和理解':392 '为了更方便理解':361 '之前是':1468 '之前有所提到过':1142 '之前穷举出所有可能的':840 '之后':853,927,1113,1703,1768 '乘上我们的trapdoor':1700 '也是平均随机分布的':1266 '了':357,686,697,939,1623,1679,1894 '了解完lattice':2038 '二进制':950 '仍然是一个高斯分布':1811 '从':309,866,1094,1339 '从工具向量延伸到工具矩阵':963 '从我们的表达式中减去':675 '从而还原出':695 '代表了原本':1760 '任何人都可以有效的计算这两个单向函数的反函数':2027 '会被挪到最高位上':643 '会跟着被挪到第二位上':647 '会输出很多种符合要求的解的一个高斯分布':128 '伴集':961 '但是一旦知道了':1328 '但是不幸的是复杂度太高了':941 '但是不是我们之前已经确保':1690 '但是只要我们知道':304 '但是实际上构造起来并不现实':164 '但是我们发现':1696 '但是我们知道噪音的取值空间':591 '但是我们需要注意到的是':803 '但是这个算法是deterministic':808 '但是这并不是唯一的构造平均随机分布矩阵的方法':185 '位':574,631 '作为sis':2021 '使得':1846 '使得它具有一些方便我们构造trapdoor的能力':209 '使用':1838 '其中':1199 '其中一共分为三步':261 '其实type':1980 '其实就是一个提前选好公开':359 '其实就是我们称呼的gadget':352 '其实就有一个要求':1146 '其实现在的路线已经很清晰了':1124 '其实真正的工具矩阵':987 '其实这就等于是把':626 '具体的实现方法我们就不多说了':948 '再加上左半边平均随机选择的':1271 '再按照应该的维度组合起来':1091 '出去':1285 '出发':1097 '函数是一个满射':757 '函数的单向性':350 '分解':951 '分解成':1079 '则只会输出一个唯一的解':134 '别人就可以直接通过观测':1769 '到随机矩阵':293 '前期回顾':7 '协方差':1721 '单向函数':330 '单向函数的话':2006 '即':575,632,829,1779 '即leftover':1221 '即trapdoor':10 '即不会干扰最高位上面的值':720 '即减去':676 '即我们可以加入额外的随机数来补上缺少的这部分协方差':1795 '即然我们有了一个协方差为':1796 '即这个矩阵需要看上去是平均随机分布的':1147 '原本':638 '原本的':332 '变得很大':944 '只是我们取了问题矩阵中的一行':448 '只是维度扩展成了':991 '只要':1230 '只要噪音向量':1487 '只要噪音的取值上限':714 '只要我们能够把问题规约到基于':1904 '只要掌握了trapdoor':2024 '只需要去找到可以生成':854 '可以使得反函数':1818 '可以打破这个矩阵构造成的':346 '可以被表达为':486 '同理':203 '向量的一项':801 '向量的具体构造带入进表达式中':476 '和':1138 '和trapdoor矩阵的乘积':1619 '和之前一样':1395 '和想要的还差一段距离':1791 '和高斯分布的':2010 '唯一不同的在于最后的噪音项':1467 '啦':613 '噪音的的取值范围则不能大于':727 '因为':275,561,789,1062,1258,1267 '因为向量':821 '因为我们定义了':722 '因为我们已经推测出':668 '因为我们的最终目标是构造描述过的两个owf':220 '因为我们知道了矩阵':1425 '因为我们需要一个高斯分布的结果':863 '因为有碰撞的存在':1556 '因为这个函数的单射特性导致了反函数只会有唯一的解':1399 '在lwe中':730 '在otp中':198 '在此过程中':274 '基于lwe的owf':51 '基于sis的owf':16 '基于此类trapdoor':145 '基于这个工具向量':399 '复现这一过程':327 '大致相同':1068 '如果不知道':1321 '如果不知道trapdoor的话':1367 '如果快速回顾一下的话':12 '如果想要获得一个平均随机分布':172 '如果我们公布':1282 '如果我们利用这个trapdoor生成了太多的反函数的解':1765 '如果我们希望反函数的输出为高斯分布的话':1774 '如果我们把':473 '如果我们有了trapdoor构造出了对应的反函数':114 '如果我们比较这两个owf的输入与输出空间之间的映射的话':99 '如果我们观察这个反函数输出的':1706 '如果我们选择的':1225 '对应的lattice':1922 '尝试构造原本不可能完成的反函数':1377 '就变成了一个拥有trapdoor的特殊矩阵':1362 '就可以理解为把整个数字往左left':570 '就搞定了':802 '就搞定啦':1092 '就是':1034 '就是一个':434 '就是一个纯随机生成的矩阵':1327 '就是基于trapdoor的特性':1376 '就是我们这个构造的trapdoor了':1320 '就能得到我们想要的结果':1620 '就能知道':608 '嵌入':292 '工具向量':367 '工具矩阵':264,354 '工具矩阵下的':329 '工具矩阵并不是什么复杂的东西':358 '已经不远了':1123 '已经被遍历啦':932 '并不知道这个矩阵是真随机生成的':215 '并且使得':767 '并且保存结果':886 '并且基于此矩阵构造出同样的函数':267 '并且得到对应的trapdoor矩阵':297 '并且提出了一个更加高效的方法':947 '并且结构非常简单的矩阵':360 '并且输入的':825 '并且通过xor叠加到原本的原文上':200 '应该可以输出一个高斯分布的解':764 '当我们完成这一步':933 '当我们生成':920 '当我们看到':851 '怎么通过trapdoor来求解lwe':1401 '总的来说':2003 '我们上期提到过':161 '我们下一期开始就可以来学习基于trapdoor的一些进阶的lattice体系':2040 '我们不仅选择0或者1':954 '我们不妨先来了解一个定理':1220 '我们不妨先来看看这个矩阵的第一行':362 '我们也可以称之为gadget':365 '我们也就成功的还原出了':690 '我们了解了一个万能的工具矩阵':1901 '我们了解了格密码学中的一个非常重要的primitive':9 '我们会发现':454 '我们会发现基于sis的owf是满射':100 '我们会发现这个协方差会暴露我们的trapdoor':1723 '我们先不用担心这里的trapdoor到底长什么样子':219 '我们先来看最后的一项':553 '我们其实并不在乎噪音的具体数值':1486 '我们再回顾一下sis反函数的定义':1565 '我们再总结一下我们到底做了什么':1900 '我们再重新看一下计算lwe的反函数的问题描述':1402 '我们发现':625 '我们只要想办法可以从基于':1125 '我们只需要平均随机地取':176 '我们只需要补上一个':1801 '我们只需要计算这个preimage':1616 '我们只需要选取平均分布的':2007 '我们可以在随机选取的矩阵':186 '我们可以定义一个迷你版本的':400 '我们可以尝试构造出如下的':1148 '我们可以很容易的从输出的结果还原出原本的输入':459 '我们可以快速的验证一下这个解':1643 '我们可以把':1070 '我们可以理解为是原本的':439 '我们可以直接使用':1508 '我们可以直接把lwe的结果乘上陷门矩阵':1431 '我们可以通过非常简单的三个步骤来构造出我们想要的反函数':239 '我们可以非常轻松的得到并且计算':279 '我们可以首先通过工具矩阵下的sis反函数':1598 '我们同样选择随机分布的':56 '我们在':906 '我们在上一期的文章中讲到':1555 '我们在看回我们这里定义的':1250 '我们在矩阵':205 '我们学到最重要的莫非就是基于sis与lwe的两个单向函数':13 '我们对lattice中的trapdoor到底长什么样子做了一个简单的探索':136 '我们就可以充分证明矩阵':1274 '我们就可以大概率的相信整个输出空间':928 '我们就可以很快的找到一组':1919 '我们就可以很快速的把':1332 '我们就可以得到和上面一样的表达式':682 '我们就可以求解sis':2000 '我们就可以通过非常简单的矩阵相乘与线性变换':308 '我们就可以非常轻松的从':1298 '我们就可以非常轻松的反转':935 '我们就可以靠观测':599 '我们就彻底搞定了sis单向函数的反函数':1889 '我们就成功的复现了mp12中的lattice':1897 '我们就来逐步详细的走一遍':326 '我们就跟之前一样':1837 '我们已知了结果向量':1595 '我们快速的来验证一下这个方案的正确性':1866 '我们把':289 '我们把拥有trapdoor的':1363 '我们抛砖引玉介绍了一下type':149 '我们拥有了一个看似是平均随机分布的':1279 '我们掌握了一个随机的trapdoor':1983 '我们提到了type':1912 '我们最后都只会得到一模一样的':812 '我们来看看mp12是如何尝试构造反函数':251 '我们根据第二部构造的这一特点构造出我们想要得到的反函数':316 '我们现在来看sis的反函数':1554 '我们的trapdoor构造大业终于要完工了':1357 '我们的矩阵':1359 '我们的第一步就是弱化这个矩阵':344 '我们真正的单向函数':1027 '我们知道':331,755,983 '我们第二类格陷门的思路一样':204 '我们观察发现':894 '我们观察得到的结果可以发现':1461 '我们距离构造真正的反函数':1114 '我们输出':1852 '我们还大概了解了一下如何解决格中的一些难题':146 '我们还讲到了':106 '我们这个反函数输出的值的随机分布又出了问题':1689 '我们这儿的反函数':1682 '我们这里介绍一种最简单方法':817 '我们这里定义模组为':393 '我们这里构造的这两个':455 '我们这里的目标就是基于':523 '我们选择一个随机分布的矩阵':21 '我们都知道':171 '我们都知道基于lwe的单向函数':1396 '我们随机从':1825 '我们随机生成一段密钥':199 '我们需要扩展这个定义到真正的sis和lwe':981 '我们首先定义工具向量':368 '我们首先来看一看基于lwe的':469 '我们马上可以想到一个思路':788 '所以':546,1262 '所以sis':1557 '所以乘上了':566 '所以加上这一个噪音就并不会改变我们最高位上的值':597 '所以反函数的计算就很简单了':1069 '所以对应的我们的反函数':759 '所以很理所当然的我们就可以直接把':793 '所以我们也就知道trapdoor':1372 '所以我们先来看看':1400 '所以我们穷举的步骤如下':864 '所以转换到这里的话':726 '才可以遍历整个':911 '拥有了type':236 '换句话说':522 '接下来':250 '接下来我们就看下一项':617 '接下来我们来看看基于sis的迷你单向函数':751 '接下来要做的':1375 '放入原本的sis和lwe的单向函数中':1366 '整个随机分布又发生了改变':1704 '无法计算反函数':1369 '是一个':563,779 '是一个已知的结构':824 '是一个平均分布的':1202 '是一个平均随机分布的矩阵了':1277 '是一个高斯分布的':1209 '是不是大功告成了':1680 '是不是平均随机分布的呢':1219 '是不是非常简单':1541 '是呈平均随机分布的':303,343 '是因为函数中包括的矩阵':340 '是平均随机分布的':1261 '是由2的幂组成的':986 '更重要的是':1293 '最后':315,1851,1899 '最后得到的叠加仍然是随机分布的':191 '最后得到的密文也是呈随机分布的':201 '有一个巨大的问题':1687 '有碰撞存在的函数':758 '本文内容主要参考于iit':2048 '来':541 '来找到一个':1843 '来计算':1513 '构建出这个数据库之后':934 '构造':240,1386 '构造sis与lwe问题的矩阵':1143 '构造trapdoor':155 '构造大致相同':990 '根据mp12中所述的':1705 '根据高斯分布':865 '格bits':709 '格中陷门下篇':6 '格密码学进阶02':1 '正好是由2的幂组成':792 '比如cvp':147 '比如说任意的另一个矩阵':190 '比较好对付':1398 '没有人会知道这个矩阵究竟是随机生成的':1286 '流加密算法':197 '然后':644,1615 '然后依次求解之后':1090 '然后依次输出就可以了':862 '然后再根据输出值把所有可能的输入都存起来':849 '然后剩下的其他位上都是0':586 '然后放进矩阵':181 '然后每一个bit正好对应':798 '然后由于我们已经知道了':1994 '然后通过观察最高位的值推出':683 '然后通过随机分布的这一特性把这一特殊结构给掩盖起来':210 '然后重组成':710 '然而':1485 '然而我们现在的':1784 '然而这样的输出并不符合我们之前所期待的高斯分布的要求':815 '现在':1278,1370,1594 '现在我们依靠这个方法成功的提取出了':614 '现在我们已经掌握了如何计算迷你版本的sis与lwe':964 '现在我们来尝试找到符合这一要求的':784 '现在我们来看看如何把':1135 '生成':1098 '生成的':1292 '用上述的算法还原出':707 '由于工具矩阵':450 '由于我们之前定义了':542 '由于我们构造了这个矩阵':1371 '的':102,105,260,810 '的coset':960 '的covariance':1720 '的sis':1128,1991 '的sis和lwe的反函数':1104 '的sis或者lwe上来':1907 '的type':1976,1997 '的一系列输入':856 '的一组好的基向量':141 '的三步操作':249 '的人':214 '的信息':1726 '的倒数第二位':640 '的值':307 '的值了':671,1507 '的值和对应的':843 '的值往左挪了':628 '的值的话':1297 '的全貌了':703 '的分布中抽取一个向量':1833 '的分布区域很局限':828 '的分布猜出我们的trapdoor来':1772 '的协方差为高斯分布的协方差':1778 '的单向函数的问题矩阵':2023 '的反函数':227,464,481,745,971,1390,1548 '的最低位':582,610 '的最高位上的数值':607 '的构造了':15 '的构造和':1065 '的构造如下':20 '的构造是这样的':55 '的正确性':1646 '的每一项的大小不超过':1500 '的特殊构造':278,453 '的特殊结构与trapdoor':1428 '的短基向量':1926 '的结构':1151 '的结果在':900 '的结果非常相似':1466 '的范围':1503 '的话':1331,1722,1918 '的输出是随机高斯分布了吗':1695 '的问题':1133 '的随机分布近似于平均随机分布':1239 '的随机分布这一属性的更深理解':170 '的随机矩阵':175 '的高斯分布':1800,1809 '的高斯分布的一个半径系数':1763 '直到':888 '看到了所谓的type':137 '知道了如何计算基于':1101 '矩阵是一个已知不变的常数矩阵':1270 '矩阵的维度中':1229 '确定':809 '穷举法':818 '穷举法虽然很容易理解':940 '空间':915 '空间中要取多少个随机数':910 '空间的每一个数字都被覆盖':892 '符合上述的等式':807 '符合了短并且近似垂直的特性':144 '第一步':328 '第一类格陷门是基于格本身的几何特点来构造的':162 '第三步':1338 '第二步':1093 '第二步完成之后':1358 '第二类格陷门':156 '第二类格陷门是micciancio与peikert在mp12中提出的一种新的陷门构造':165 '篇尾小结':1895 '经过这三步构造之后':1896 '结构非常简单':398 '给定任意随机的':895 '继续使用这个算法依次的处理所有的':687 '维度的随机矩阵':1206,1215 '缩小了输出的维度而已':449 '而':129 '而基于lwe的owf是单射':103 '而是一组结果的高斯分布':1564 '而是依靠对于矩阵':167 '而是我们在':955 '而现在是':1472 '联系起来':1141 '能否我们选择一个特殊结构的矩阵':345 '虽然我们还是会加上一个噪音':588 '虽然理解起来比较容易':163 '虽然这个方法找到的':804 '行':993 '表面上看':300 '要构造带有trapdoor的sis':2004 '规约':1544 '规约到':1348 '规约到基于':1130 '解决了lwe之后':1553 '解决了lwe的迷你单向函数':750 '计算':460,741,875 '计算过程非常的简单并且优雅':1543 '让我们可以把一个随机的sis':1986 '越靠近中心':1592 '身份加密':2045 '输入一个':704 '输出':712 '输出为':81 '输出则是':40 '输出均匀高斯分布的结果':1823 '还原到':312,1301 '还原成原本的':1335 '还是通过我们的type':216 '还是通过我们这里的方法用':1287 '这一上限和lwe问题中对于噪音的分布上限的要求是一样的':729 '这一期我们就来看看type':152 '这一类的构造并不依靠几何结构':166 '这一随机分布的特性导致了otp系统的安全性':202 '这下我们构造的反函数就能够成功的生成的':1676 '这两个owf':113 '这个':692 '这个owf的输入是一个任意的向量':66 '这个owf的输入是一个短向量':31 '这个向量其实就是依次排列的2的幂':397 '这个数字分解成':795 '这个时候我们只需要把':672 '这个短基向量矩阵其实就是':1973 '这个迷你版的单向函数其实和完整版的结构一样':447 '这么一系列':537 '这也就代表无论运行这个算法多少次':811 '这也就是lwe构造的格密码学算法的特点':1542 '这也就是反函数':698 '这也就是说':1979 '这其实就是一个经典的赠券收集问题':916 '这其实就是因为如果我们的sis与lwe问题都基于':1915 '这和我们之前的':1462 '这对于这个体系的安全性是致命的':1773 '这就是lattice':2036 '这是因为高斯分布之间相互的卷积还会是高斯分布':1812 '这样一来':598,1026,1249,1816,1888 '这样就等于是我们把原本的':580 '这样构造的':1216 '这样的话':637,850 '这样的非标准高斯分布的协方差会导致的问题就是':1764 '这样看到':211 '这里我们观察一下噪音的上限':713 '这里的':432,777,1758 '这里的随机高斯分布矩阵':1317 '这里说的特殊矩阵':351 '远远小于':595 '迷你单向函数':456 '选择一个构造非常简单的gadget':262 '通过上述描述的随机分布的特性':288 '那么':1324 '那么到底要如何生成我们所希望的高斯分布呢':816 '那么对应的概率越高':1593 '那么就不会影响我们的反函数算法了':721 '那么得到对应的':898 '那么我们就可以把问题转化成':905 '那么我们需要输出的':1775 '那么这两个owf应该和原来一样':1368 '那么这两个反函数输出的特点也会和原本的owf相对应':123 '那么这两个矩阵的乘积':1236 '那么这个求解':477 '那么这个算法马上就变得效率很低':945 '那么问题一下子就变得好解了':1908 '那就可以使用我们上一步得到的反函数来计算结果了':1134 '那就可以还原出':1504 '那怎么办':1792 '那我们完全就可以在看到':838 '都是单向函数':339 '里就完成了':184 '重复第一步':887 '问题上':1993 '问题出在':1688 '问题啦':2002 '问题转化到基于':1988 '陷门':11 '随后':135,587,1836 '随后构造':2013 '随机的抽取一个符合要求的preimage':1603 '项之后':689 '项的乘积结果':706 '首先':1824 '验证通过':1675		
569	格密码学进阶01：Lattice Trapdoors（格中陷门）	{"ver":2,"uid":1,"hash":"SHA1:5afba1bf68038635e258942dfd641ada51ea45a9"}	http://blog.higashi.tech/2020/08/15/trapdoor_01.html	2020-08-15 07:00:00	<h3 id="写在前面">写在前面</h3>\n\n<p>前一段时间写完基于格的GSW全同态加密系统（FHE）后，笔者对格产生了很大的兴趣。由于上学期在学校上的CS355（高阶密码学）讲完FHE之后就结课了，所以还有很多关于格的知识没有讲到。</p>\n\n<p>正如开学的时候CS355第一节课上说的一样：对于其他专业的学生来说，这会是你们密码学方向学习的最后一节课。但是对于密码学方向的人来说，这将会是你们<strong>真正入门密码学的第一节课</strong>。</p>\n\n<p>这节课结束之后，后面就没有系统性的课程了。在过去的两个月内，为了更加全面的学习格密码学，笔者只好去网上与各个学校搜刮讲座和课件，拼凑起来从头开始学习Lattice的基础定义和几大难题。对于格有一个大致的了解之后，就可以看懂更加进阶的东西，比如<strong>IBE</strong>、<strong>ABE</strong>、<strong>NIZK</strong>、<strong>Multilinear Map</strong>、<strong>iO</strong>等等。了解完一圈下来，不得不说格密码学真的是万能的一个密码学分支，可以基本上实现所有密码学的应用（Crypto-Complete）。</p>\n\n<p>关于Lattice-based Crypto的入门知识，有兴趣的大家可以去看笔者的【Lattice学习笔记】这一专题。在这里就假设大家对格已经有一个大致的了解了。从这一期开始，我们开一个新的专题【格密码学进阶】，学习一下更加进阶的格密码学的算法和构造。</p>\n\n<p>这一期，我们来看看格密码学中的一个非常重要的工具：<strong>Trapdoor Functions</strong>（陷门函数）。</p>\n\n<h3 id="trapdoor-function陷门函数简介">Trapdoor Function（陷门函数）简介</h3>\n\n<p><strong>Trapdoor Function</strong>（TDF），即<strong>陷门函数</strong>，是一个密码学中非常常见的一个基础工具。简单的概括一下的话，TDF就是一个普通的函数\\(f: D \\rightarrow R\\)，即输入空间为\\(D\\)，输出空间为\\(R\\)。这个函数有两个非常重要的特性：</p>\n\n<ol>\n  <li>首先，如果只知道这个函数的本身，那么这个函数就是一个<strong>单向函数</strong>（OWF）。单向函数是什么意思呢，就是给定一个输入\\(x\\)，我们可以非常快速（efficient）地计算\\(f(x)\\)。但是如果我们只能看到这个函数的输出\\(f(x)\\)的话，我们很难从这个值推算出原本输入\\(x\\)的值来。</li>\n  <li>虽然OWF的定义在密码学应用上很有用了（比如可以构造出PRG、PRF、Hash Function等等），但是TDF更加特殊的属性是，在生成一个TDF实例的时候，我们会额外生成一个这个函数的一个Trapdoor \\(t\\)。如果不知道Trapdoor \\(t\\)的值，那么原本的TDF仍然是一个OWF。但是如果一旦有人知道了Trapdoor \\(t\\)，那么就可以直接打破单向性，即可以有效的从\\(f(x)\\)中还原回\\(x\\)出来。</li>\n</ol>\n\n<p><img src="/assets/images/lattice/1200px-Trapdoor_permutation.png" alt="Trapdoor function - Wikipedia" /></p>\n\n<p>Wikipedia上对于TDF使用了上述的一张图片来解释。理解起来很简单：从\\(D\\)到\\(R\\)很容易，但是从\\(R\\)到\\(D\\)很困难。但是如果知道了Trapdoor \\(t\\)，那么从\\(R\\)到\\(D\\)也会非常简单。</p>\n\n<p>TDF在密码学上的应用多不胜数，比如我们最常见的RSA加密算法就基于RSA的一个TDF。在RSA一开始的密钥生成的过程中，我们会生成一对加密和解密的密钥\\((e, d)\\)。我们可以基于这一对密钥来定义RSA的TDF：</p>\n\n\\[f_{RSA}(m) = m^e \\text{ mod }N\\\\\nf_{RSA}^{-1}(c) = c^d \\text{ mod }N\\\\\nf_{RSA}^{-1}(f_{RSA}(m)) = (m^e)^d = m \\text{ mod }N\\]\n\n<p>因为大整数的有限域（\\(\\text{mod }N\\)）中，已知\\(m^e\\)的话，我们很难还原出一开始的\\(m\\)。但是如果我们知道了这个系统的Trapdoor \\(t = d\\)的话，那么我们就可以直接计算\\(m^{ed}\\)然后还原出最初的\\(m\\)来。</p>\n\n<p>其他的TDF也是类似的样子，我们在生成这个OWF函数实例的时候预先预留好一个“后门”，即Trapdoor，然后知道这个后门的人就可以轻松的打破单向性。</p>\n\n<p>如果我们要把TDF的概念带到格中来的话，首先我们需要来看看，Lattice当中我们都知道哪些OWF的构造。</p>\n\n<h3 id="sis与lwe的owf结构">SIS与LWE的OWF结构</h3>\n\n<p>看过前面的一系列文章（尤其<strong>是Lattice学习笔记</strong>）的朋友们应该对此不太陌生了。这里我们再来重新回顾一下Lattice中的两大难题：<strong>Short Integer Solution</strong>（SIS）与<strong>Learning With Errors</strong>（LWE）。</p>\n\n<h4 id="基于sis的单向函数f_mathbfa">基于SIS的单向函数\\(f_\\mathbf{A}\\)</h4>\n\n<p>首先我们先看<strong>SIS</strong>问题。</p>\n\n<p>SIS相对来说结构比较简单，我们需要随机生成一个矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)作为公开的部分。然后SIS问题就是，给定\\(\\mathbf{A}\\)，能否找到一个“短向量”\\(\\mathbf{x} \\in \\mathbb{Z}_{\\{0, \\pm1\\}}^m\\)（一般来说为了方便计算，我们会把短向量定义为每个维度都是一个bit的向量），使得：</p>\n\n\\[\\mathbf{Ax} = 0 \\text{ mod }q\\]\n\n<p>这样一个求解短向量的问题（即SIS），在格密码学中被公认是一个困难的问题。同理，我们可以根据SIS的难度来构造一个OWF \\(f_\\mathbf{A}\\):</p>\n\n\\[\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}: f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q\\]\n\n<p>我们得到的这个函数\\(f_\\mathbf{A}\\)被Ajtai在1996年被证明为是一个单向函数（OWF）。具体的证明可以参考【Lattice学习笔记】中的对应内容，简单的说就是求解\\(f_\\mathbf{A}^{-1}\\)可以被规约到在Lattice \\(\\Lambda(\\mathbf{A})\\)的对偶格中求解<strong>CVP</strong>问题，而CVP又是另一个公认的格中难题。</p>\n\n<p>在选择\\(f_\\mathbf{A}\\)的参数的时候，我们一般会把\\(q\\)压的比较小，使得这个OWF是一个<strong>满射</strong>（surjective）的函数，这代表了会有多个不同的短向量\\(\\mathbf{x}, \\mathbf{y}\\)，使得：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}) = f_\\mathbf{A}(\\mathbf{y})\\]\n\n<p>这一满射的特性决定了SIS OWF一定会有碰撞（Collision）的存在。但是这个OWF还有另一个特殊的属性：它是抵抗碰撞的（<strong>Collision Resistant</strong>）。这代表了就算这个OWF存在碰撞，我们也无法有效的根据一个已知的\\(\\mathbf{x}\\)，找到另一个对应的\\(\\mathbf{y}\\)来。</p>\n\n<h4 id="基于lwe的单向函数g_mathbfa">基于LWE的单向函数\\(g_\\mathbf{A}\\)</h4>\n\n<p>接下来我们看格中另一个难题，<strong>LWE</strong>。LWE问题具体的我们在之前的文章中很详细的描述过了，这里我们就跳过介绍直接讲定义。</p>\n\n<p>一个LWE问题实例包含了一个随机生成的矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)，一个随机生成的向量\\(\\mathbf{s} \\in \\mathbb{Z}_q^m\\)，还有一个错误分布区间\\(\\mathcal{X}_B\\)。一般为了方便理解，我们会把\\(\\mathbf{A}\\)拆分为\\(n\\)个随机生成的向量\\(\\mathbf{a_1, \\dots, a_n}\\)来看待。</p>\n\n<p>简短的概括LWE问题的话，那么就是<strong>带有噪音的内积</strong>问题。假设有一个未知的向量\\(\\mathbf{s}\\)，我们的目标是猜出这个向量的值来。LWE问题给了我们一系列的随机向量\\(\\mathbf{a}_1, \\dots, \\mathbf{a}_n\\)，并且还给我们看这些向量和未知向量\\(\\mathbf{s}\\)的带噪音内积：</p>\n\n\\[\\mathbf{b}_i \\leftarrow \\langle \\mathbf{a}_i, \\mathbf{s} \\rangle + \\mathbf{e}_i :\\mathbf{e}_i \\in \\mathcal{X}_B\\]\n\n<p>其中的噪音部分就是从噪音分布中随机选取的。我们一共可以看到\\(n\\)格内积的值。如果用矩阵的方式来表示的话：</p>\n\n\\[\\mathbf{b} = \\mathbf{As} + \\mathbf{e}\\]\n\n<p>如果给定了\\(\\mathbf{A}\\)和一组有噪音的内积\\(\\mathbf{b}\\)的话，LWE问题定义了从\\(\\mathbf{A, b}\\)中还原出原本的位置向量\\(\\mathbf{s}\\)是困难的。</p>\n\n<p>和上面的SIS一样，基于这个问题的困难性，我们可以开发出一个新的OWF出来：</p>\n\n\\[g_\\mathbf{A}(\\mathbf{s}, \\mathbf{e}) = \\mathbf{s}^t \\mathbf{A} + \\mathbf{e}^t \\in \\mathbb{Z}_q^m\\]\n\n<p>这个OWF的输出其实就是LWE中的\\(\\mathbf{b}\\)本身了。因为LWE是困难的，所以我们就算看到了\\(\\mathbf{A}, \\mathbf{b}\\)，我们也不能推算出这个OWF的输入\\(\\mathbf{s}, \\mathbf{e}\\)来。所以根据LWE的困难度，我们就可以定义这个OWF的单向性了。相比起上面SIS需要依靠CVP问题的规约来完成证明，LWE的安全性证明简单了不少。</p>\n\n<p>LWE OWF的一个特性在于它是<strong>单射</strong>（injective）的。和满射不同，所有的LWE问题（只要各项参数选择符合要求）都有一个<strong>唯一的解</strong>。</p>\n\n<h3 id="f_mathbfa与g_mathbfa的反函数与preimage-sampleable-functionpsf">\\(f_\\mathbf{A}\\)与\\(g_\\mathbf{A}\\)的反函数与Preimage Sampleable Function（PSF）</h3>\n\n<p>了解完基于SIS的OWF \\(f_\\mathbf{A}\\)和基于LWE的OWF \\(g_\\mathbf{A}\\)之后，我们现在来尝试引入Trapdoor的概念。</p>\n\n<p>首先，我们先不要着急想Trapdoor到底是个啥。是个向量还是矩阵还是数字并不重要。我们先思考一下， <strong>假如我们已经拥有了这么一个神奇的Trapdoor</strong>，我们可以做什么。</p>\n\n<p>现在我们的\\(f_\\mathbf{A}\\)和\\(g_\\mathbf{A}\\)已经满足了单向性的属性，即我们可以快速的计算这个函数，但是无法从函数的输出结果有效地还原出输入来。根据前面对于TDF的描述，如果我们已知了Trapdoor，那么理应我们就可以构造出这个OWF的反函数来。这样的话，上面描述的两种OWF构成的反函数\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)分别会是什么样子的呢？</p>\n\n<p>基于LWE的\\(g_\\mathbf{A}\\)的反函数最简单，因为它是单射的（即每个输出都有一个<strong>唯一的输入解</strong>），所以\\(g_\\mathbf{A}^{-1}\\)会输出唯一的一对满足条件的输入\\(\\mathbf{s}, \\mathbf{e}\\)。</p>\n\n<p>基于SIS的\\(f_\\mathbf{A}\\)就不太一样了，因为这个函数是满射的（即<strong>碰撞</strong>存在），所以\\(f_\\mathbf{A}^{-1}\\)应该会在所有满足条件的答案中，随机选择输出的一个\\(\\mathbf{x'}\\)。在安全性的考虑上，这个“随机选择”的过程必须要是一个高斯分布，并且反函数输出的\\(\\mathbf{x}'\\)应该需要和输入空间\\(\\mathbb{Z}_{\\{0, \\pm1\\}}^m\\)中符合要求的解的分布大致相同。</p>\n\n<p><img src="/assets/images/lattice/image-20200815235800774.png" alt="image-20200815235800774" /></p>\n\n<p>上面的图就是Micciancio和Peikert在MP12这篇paper中对于\\(f_\\mathbf{A}^{-1}\\)的输出空间分布的一个大概的描绘。在MP12中，他们把满足这类分布的一对满射函数与其反函数\\(f_\\mathbf{A}, f_\\mathbf{A}^{-1}\\)称作为<strong>Preimage Sampleable Function</strong>（PSF）。</p>\n\n<p>具体是什么意思呢？其实很简单，这就是在说我们使用\\(f_\\mathbf{A}\\)和\\(f_\\mathbf{A}^{-1}\\)可以生成同样的一组概率分布。</p>\n\n<p><img src="/assets/images/lattice/image-20200816000219182.png" alt="image-20200816000219182" /></p>\n\n<p>如同图上所绘，我们首先使用\\(f_\\mathbf{A}\\)：我们在\\(\\mathbb{Z}_{\\{0, \\pm1\\}}^m\\)中抽取高斯分布的随机向量，然后统计下来所有通过\\(f_\\mathbf{A}(\\cdot)\\)之后结果等于一个任意选择的向量\\(\\mathbf{y}\\)的向量\\(\\mathbf{x, x', x'', \\dots}\\)。</p>\n\n<p>随后，我们使用\\(f_\\mathbf{A}^{-1}\\)：我们随机的选择一个输出空间中的向量\\(\\mathbf{y}\\)，然后使用\\(f_\\mathbf{A}^{-1}(\\mathbf{y})\\)这个反函数来还原一系列符合要求的输入\\(\\mathbf{x, x', x'', \\dots}\\)。</p>\n\n<p>PSF的定义就是，我们使用上述两种方法生成的\\(\\mathbf{y, x, x', x', \\dots}\\)在概率上的分布是computationally相同的。也就是说，如果我们看到一组符合分布要求的\\(\\mathbf{y, x, x', x', \\dots}\\)，我们无法分辨这组随机的向量组合到底是选定随机的输入通过\\(f_\\mathbf{A}\\)生成的，还是选定随机的输出通过\\(f_\\mathbf{A}^{-1}\\)生成的。</p>\n\n<p>这个概念现在看起来可能比较晦涩，但是PSF的定义对于后续的构造十分有用，尤其是在证明基于格的NIZK的零知识属性上极为重要。这里留做一个悬念，等我们学完前序的内容后，再回来详细的研究这一点。</p>\n\n<h3 id="构造trapdoor第一类陷门type-1-lattice-trapdoor">构造Trapdoor：第一类陷门（Type 1 Lattice Trapdoor）</h3>\n\n<p>当我们了解完Lattice中最有名的两大OWF和他们对应的理想中的反函数的大致构造（和输入输出分布）之后，我们就可以开始实战构造Trapdoor了。</p>\n\n<p>系统性的分类的话，Lattice Trapdoor大致分为两种。我们首先着重了解一下第一种：<strong>基于Lattice的几何构造</strong>形成的Trapdoor。</p>\n\n<h4 id="基向量的好坏">基向量的好坏</h4>\n\n<p><img src="/assets/images/lattice/image-20200816002009970.png" alt="image-20200816002009970" /></p>\n\n<p>如果我们随机的生成一个Lattice（如上图所示），虽然格点是固定的，但是我们可以选取不同的<strong>基向量</strong>（basis vector）来描述这个Lattice。</p>\n\n<p>一组代表了Lattice结构的基向量，其实具有<strong>好坏</strong>之分。好的基向量（good basis）可以让我们非常直观的求解很多格中的问题。然而坏的基向量（bad basis）则反之。</p>\n\n<p><img src="/assets/images/lattice/image-20200816002112414.png" alt="image-20200816002112414" /></p>\n\n<p>我们首先选出这个格中最好的一组基向量\\(\\mathbf{v}_1, \\mathbf{v}_2\\)。我们发现，这一组向量很短，并且几乎是相互垂直的。这两个属性代表了这一组基向量构成的Determinant的基础空间（Parallelpiped）具有近似于长方体的形状。</p>\n\n<p><img src="/assets/images/lattice/image-20200816002534826.png" alt="image-20200816002534826" /></p>\n\n<p>在这种结构内，求解CVP问题是很简单的。假如我们拥有一个\\(\\mathbb{R}^n\\)的任意的点\\(\\mathbf{t}\\)，要找到距离这个点最近的格点\\(\\mathbf{v} \\in \\Lambda(\\mathbf{v}_1, \\mathbf{v}_2)\\)，我们只需要看这个点到底在哪一个长方体（Parallelpiped）内，然后直接输出这个长方体中心对应的格点就可以了。</p>\n\n<p>现在我们来看坏基的大致结构。</p>\n\n<p><img src="/assets/images/lattice/image-20200816002927731.png" alt="image-20200816002927731" /></p>\n\n<p>我们可以选择两个不同的基向量\\(\\mathbf{v}_1', \\mathbf{v}_2'\\)作为这个Lattice的新的基。这一组基就没有之前的结构那么的完美：基向量之间靠的距离很近，并且长度也很长。</p>\n\n<p><img src="/assets/images/lattice/image-20200816003035072.png" alt="image-20200816003035072" /></p>\n\n<p>现在我们基于这一组坏的基组成的Parallelpiped分割一下多维空间。我们会发现这些平行多面体的形状非常的狭长，所以上面描述的CVP的解法就不管用了。</p>\n\n<p>比如说图中距离黄点最近的格点就是在它右下方的红点，但是这个黄点却坐落在它左上角的红点代表的Parallelpiped上。所以如果我们直接用上述的方法来解CVP的话，那么很大可能性我们会找错点，找到并不是最近的那个格点上。</p>\n\n<h4 id="基向量好坏的不对称性">基向量好坏的不对称性</h4>\n\n<p>基于我们上面的观察，我们可以发现Lattice系统中的一个不对称性：</p>\n\n<p>如果给定了一组坏的基（bad basis），那么在这个基的格中的SVP、CVP、SIS等常见问题都是困难的。但是反之，如果我们给了一组好的基（简短、近似垂直），这些格中的问题就会变得非常好解决。</p>\n\n<p>我们都知道，如果一个数学系统出现了如上的不对称性的话，那么我们就可以把这一特性拿来用做密码学。这也就是<strong>第一类格陷门</strong>的精髓了。</p>\n\n<p>这也就是说，对于一个Lattice \\(\\Lambda\\)来说，我们可以尝试找到两种表述方式：</p>\n\n<ol>\n  <li>第一种方式就是一个随机的矩阵\\(\\mathbf{A}\\)，也就是一组随机的（坏的）基。基于这个矩阵，我们可以轻松的通过线性组合这些基向量来构造出格点，但是无法从格点还原回我们原本的线性组合来。</li>\n  <li>第二种方式就是一个短矩阵\\(\\mathbf{A}_\\text{short}\\)，这个矩阵就是一组近似相互垂直并且短的（好的）基。基于这个矩阵，我们就可以快速的把格点拆分回原本的线性组合，甚至是求解一些格中困难的问题，比如SVP、CVP等等。</li>\n</ol>\n\n<p>对于\\(g_\\mathbf{A}\\)来说，我们可以通过\\(\\mathbf{A}_\\text{short}\\)来快速的求解CVP然后找出\\(\\mathbf{s}\\)。同理，对于\\(f_\\mathbf{A}\\)来说，这一组短的基可以帮助我们成功的找到一组均匀高斯分布的\\(\\mathbf{x}, \\mathbf{x}', \\mathbf{x}'', \\dots\\)。</p>\n\n<h4 id="type-1-trapdoor的问题">Type 1 Trapdoor的问题</h4>\n\n<p>第一类格陷门基于几何上的特点，所以非常好理解。然而，给定一个随机选择的\\(\\mathbf{A}\\)的话，到底该如何生成\\(\\mathbf{A}_\\text{short}\\)呢？这个问题在几何上就很难找到答案了。</p>\n\n<p>所以一般来说，Type 1的格陷门是为了<strong>方便、强化我们对于Trapdoor的理解</strong>而存在的，但是构造Type 1的格陷门相对来说比较困难。虽然当我们得到了对应的\\(\\mathbf{A}_\\text{short}\\)之后，我们就可以很简单的计算\\(f_\\mathbf{A}^{-1}, g_\\mathbf{A}^{-1}\\)，但是实际使用中，我们不会使用这一类的陷门。</p>\n\n<h3 id="下一期第二类格陷门type-2-lattice-trapdoor">下一期：第二类格陷门（Type 2 Lattice Trapdoor）</h3>\n\n<p>了解完Type 1 Trapdoor之后，想必大家对于Lattice TDF的大致构造和工作方式应该有了个大概的了解了。然而，Type 1的问题在于这个Trapdoor矩阵\\(\\mathbf{A}_\\text{short}\\)的构造并不简单，所以对于我们真正构造使用Lattice TDF没有太大的帮助。</p>\n\n<p>MP12这一篇paper中，主要描述了他们构造的新一类的Trapdoor，即<strong>Type 2 Trapdoor</strong>。这一类的Trapdoor虽然并不是像Type 1一样的一组短的基向量，但是Type 2的Trapdoor和Type 1一样强大（可以轻松的构造反函数），并且更加高效。</p>\n\n<p>更加神奇的是，当我们拥有Type 2 Trapdoor之后，我们可以利用这个Trapdoor来构造Type 1 Trapdoor需要的短向量矩阵\\(\\mathbf{A}_\\text{short}\\)。所以等我们学会Type 2的构造之后，我们可以回头再看看Type 1是如何生成的。</p>\n\n<p>由于篇幅原因，这一期就说到这里啦。我们下期再见。</p>\n\n<h3 id="credits">Credits</h3>\n\n<p>本文内容主要参考于IIT Madras的教授<a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>的讲座。</p>\n\n<p>The contents of this post is summarized from Prof. <a href="https://www.cse.iitm.ac.in/~shwetaag/">Shweta Agrawal</a>’s talk at Simon’s Institute.</p>	03d1e5be591c7f15c57761c435b806e2d70822c8	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.153364	0			'-1':153,162,295,551,555,568,585,608,618,633,666,674,709,912,916 '0':243,251,600,643 '1':384,398,720,753,779,791,880,926,957 '1一样强大':949 '1一样的一组短的基向量':946 '1是如何生成的':966 '1的格陷门是为了方便':898 '1的格陷门相对来说比较困难':901 '1的问题在于这个trapdoor矩阵':932 '2':756,782,794,922,943,954 '2的trapdoor和type':948 '2的构造之后':964 'a':218,223,235,262,264,274,285,294,299,305,321,326,348,355,378,383,386,397,401,413,441,448,459,468,484,507,511,519,523,535,539,550,554,560,567,577,584,607,614,617,628,632,639,650,665,673,703,708,832,841,855,859,869,887,891,904,911,915,934,960 'abe':28 'agrawal':984 'agrawal的讲座':973 'as':436 'at':987 'ax':250,278 'b':374,408,427,434,444,449,479,486 'bad':747,811 'based':41 'basis':737,744,748,812 'c':154,155 'cdot':651 'collision':331,335 'complete':38 'contents':975 'credits':970 'crypto':37 'crypto-complete':36 'crypto的入门知识':42 'cvp':814 'cvp等等':851 'd':68,72,120,127,134,141,156,168,186 'dots':385,399,660,682,690,699,878 'e':140,147,167,180,419,422,438,463,470,491,573 'ed':190 'efficient':84 'errors':213 'f':67,86,89,112,143,151,160,163,216,260,272,283,292,303,319,324,505,517,533,548,575,582,605,612,615,626,630,637,648,663,671,701,706,867,909 'fhe':7 'from':981 'function':57,61,514,621 'functions':54 'function等等':99 'g':346,457,509,521,537,552,558,565,853,913 'good':743 'hash':98 'i':409,414,420,423 'in':224,240,265,356,366,424,472,775 'injective':499 'institute':990 'integer':208 'io等等':32 'is':979 'lambda':297,776,827 'langle':411 'lattice':2,721,728,923 'lattice学习笔记':44,289 'lattice当中我们都知道哪些owf的构造':201 'leftarrow':410 'lwe':214,350,497 'lwe的安全性证明简单了不少':496 'lwe问题具体的我们在之前的文章中很详细的描述过了':351 'lwe问题定义了从':446 'lwe问题给了我们一系列的随机向量':395 'm':145,146,165,166,169,179,183,189,192,230,245,271,362,370,476,602,645 'madras的教授shweta':972 'map':31 'mathbb':225,241,266,357,367,473,598,641,766 'mathbf':217,222,234,238,249,261,263,273,275,277,284,293,298,304,314,316,320,322,325,327,339,342,347,354,364,377,382,392,396,400,404,407,412,415,418,421,433,435,437,440,443,447,451,458,460,462,464,467,469,478,483,485,488,490,506,510,518,522,534,538,549,553,559,566,570,572,576,583,588,595,606,613,616,627,631,638,649,653,656,664,668,672,675,678,685,694,702,707,751,754,770,773,777,780,789,792,831,840,854,858,863,868,872,874,876,886,890,903,910,914,933,959 'mathcal':372,425 'mod':149,158,171,175,253,280 'mp12这一篇paper中':940 'multilinear':30 'n':150,159,172,176,228,269,360,380,387,402,430,768 'nizk':29 'of':976 'owf':79,287 'owf一定会有碰撞':330 'owf的一个特性在于它是单射':498 'parallelpiped':761,784 'pm1':244,601,644 'post':978 'prf':97 'prof':982 'psf':515,622 'psf的定义就是':683 'q':227,254,268,281,308,359,369,475 'r':70,74,122,125,132,767 'rangle':417 'resistant':336 'rightarrow':69 'rsa':144,152,161,164 's':365,393,405,416,452,461,465,489,571,864,985,989 'sampleable':513,620 'short':207,843,861,893,906,936,962 'shweta':983 'simon':988 'sis':210 'sis与lwe的owf结构':202 'sis相对来说结构比较简单':220 'sis等常见问题都是困难的':815 'solution':209 'summarized':980 'surjective':311 't':103,105,109,130,185,466,471,771 'talk':986 'tdf':62 'tdf在密码学上的应用多不胜数':136 'tdf就是一个普通的函数':66 'tdf没有太大的帮助':939 'tdf的大致构造和工作方式应该有了个大概的了解了':929 'text':148,157,170,174,252,279,842,860,892,905,935,961 'the':974 'this':977 'times':229,270,361 'trapdoor':53,56,60,722,924,944 'trapdoors':3 'trapdoor之后':927,955 'trapdoor大致分为两种':729 'trapdoor的问题':881 'trapdoor需要的短向量矩阵':958 'type':719,879,897,921,931 'v':752,755,774,778,781,790,793 'vector':738 'wikipedia上对于tdf使用了上述的一张图片来解释':117 'with':212 'x':82,87,90,93,113,115,239,276,315,323,340,373,426,589,596,657,658,659,679,680,681,687,688,689,696,697,698,873,875,877 'y':317,328,343,654,669,676,686,695 'z':226,242,267,358,368,474,599,642 '一个lwe问题实例包含了一个随机生成的矩阵':353 '一个随机生成的向量':363 '一组代表了lattice结构的基向量':740 '一般为了方便理解':375 '一般来说为了方便计算':246 '上面描述的两种owf构成的反函数':547 '上面的图就是micciancio和peikert在mp12这篇paper中对于':604 '下一期':919 '不得不说格密码学真的是万能的一个密码学分支':34 '与':508 '与learning':211 '个随机生成的向量':381 '中':177 '中抽取高斯分布的随机向量':646 '中的对应内容':290 '中符合要求的解的分布大致相同':603 '中还原出原本的位置向量':450 '中还原回':114 '为了更加全面的学习格密码学':22 '主要描述了他们构造的新一类的trapdoor':941 '之后':524,725,907 '之后结果等于一个任意选择的向量':652 '也会非常简单':135 '也就是一组随机的':833 '也就是说':692 '了解完type':925 '了解完一圈下来':33 '了解完基于sis的owf':516 '从':119 '从这一期开始':47 '他们把满足这类分布的一对满射函数与其反函数':611 '会输出唯一的一对满足条件的输入':569 '但是psf的定义对于后续的构造十分有用':712 '但是tdf更加特殊的属性是':100 '但是type':947 '但是从':124 '但是反之':816 '但是如果一旦有人知道了trapdoor':108 '但是如果我们只能看到这个函数的输出':88 '但是如果我们知道了这个系统的trapdoor':184 '但是如果知道了trapdoor':129 '但是实际使用中':917 '但是对于密码学方向的人来说':17 '但是我们可以选取不同的基向量':736 '但是无法从函数的输出结果有效地还原出输入来':542 '但是无法从格点还原回我们原本的线性组合来':838 '但是构造type':900 '但是这个owf还有另一个特殊的属性':333 '但是这个黄点却坐落在它左上角的红点代表的parallelpiped上':803 '作为公开的部分':231 '作为这个lattice的新的基':795 '使得':248,318 '使得这个owf是一个满射':310 '假如我们已经拥有了这么一个神奇的trapdoor':530 '假如我们拥有一个':765 '假设有一个未知的向量':391 '关于lattice':40 '关于lattice-based':39 '其中的噪音部分就是从噪音分布中随机选取的':428 '其他的tdf也是类似的样子':194 '其实具有好坏之分':741 '其实很简单':624 '具体是什么意思呢':623 '具体的证明可以参考':288 '具有近似于长方体的形状':762 '内':785 '再回来详细的研究这一点':716 '写在前面':5 '出来':116 '分别会是什么样子的呢':556 '则反之':749 '到':121,126,133 '到底该如何生成':889 '前一段时间写完基于格的gsw全同态加密系统':6 '单向函数是什么意思呢':80 '即sis':256 '即trapdoor':197 '即type':942 '即可以有效的从':111 '即我们可以快速的计算这个函数':541 '即每个输出都有一个唯一的输入解':563 '即碰撞存在':580 '即输入空间为':71 '即陷门函数':63 '压的比较小':309 '只要各项参数选择符合要求':503 '可以基本上实现所有密码学的应用':35 '可以生成同样的一组概率分布':634 '可以被规约到在lattice':296 '可以让我们非常直观的求解很多格中的问题':745 '可以轻松的构造反函数':950 '同理':258,865 '后':8 '后门':196 '后面就没有系统性的课程了':20 '呢':894 '和':536,629 '和一组有噪音的内积':442 '和上面的sis一样':454 '和基于lwe的owf':520 '和满射不同':501 '和输入输出分布':724 '因为lwe是困难的':481 '因为大整数的有限域':173 '因为它是单射的':562 '因为这个函数是满射的':579 '在mp12中':610 '在rsa一开始的密钥生成的过程中':138 '在安全性的考虑上':590 '在格密码学中被公认是一个困难的问题':257 '在概率上的分布是computationally相同的':691 '在生成一个tdf实例的时候':101 '在过去的两个月内':21 '在这种结构内':763 '在这里就假设大家对格已经有一个大致的了解了':46 '在选择':302 '地计算':85 '坏的':834 '基':835,846 '基于lattice的几何构造形成的trapdoor':731 '基于lwe的':557 '基于lwe的单向函数':345 '基于sis的':574 '基于sis的单向函数':215 '基于我们上面的观察':808 '基于这个矩阵':836,847 '基于这个问题的困难性':455 '基向量之间靠的距离很近':797 '基向量好坏的不对称性':807 '基向量的好坏':732 '好的':845 '好的基向量':742 '如上图所示':734 '如同图上所绘':635 '如果一个数学系统出现了如上的不对称性的话':822 '如果不知道trapdoor':104 '如果只知道这个函数的本身':77 '如果我们已知了trapdoor':544 '如果我们看到一组符合分布要求的':693 '如果我们给了一组好的基':817 '如果我们要把tdf的概念带到格中来的话':199 '如果我们随机的生成一个lattice':733 '如果用矩阵的方式来表示的话':432 '如果给定了':439 '如果给定了一组坏的基':810 '学习一下更加进阶的格密码学的算法和构造':50 '它是抵抗碰撞的':334 '对于':852,866 '对于一个lattice':826 '对于其他专业的学生来说':15 '对于格有一个大致的了解之后':25 '尤其是lattice学习笔记':204 '尤其是在证明基于格的nizk的零知识属性上极为重要':713 '就不太一样了':578 '就可以看懂更加进阶的东西':26 '就是给定一个输入':81 '已知':178 '已经满足了单向性的属性':540 '并且几乎是相互垂直的':759 '并且反函数输出的':594 '并且更加高效':951 '并且还给我们看这些向量和未知向量':403 '并且长度也很长':798 '应该会在所有满足条件的答案中':586 '应该需要和输入空间':597 '强化我们对于trapdoor的理解而存在的':899 '当我们了解完lattice中最有名的两大owf和他们对应的理想中的反函数的大致构造':723 '当我们拥有type':953 '很困难':128 '很容易':123 '想必大家对于lattice':928 '我们一共可以看到':429 '我们一般会把':307 '我们下期再见':969 '我们不会使用这一类的陷门':918 '我们也不能推算出这个owf的输入':487 '我们也无法有效的根据一个已知的':338 '我们会发现这些平行多面体的形状非常的狭长':800 '我们会把':376 '我们会把短向量定义为每个维度都是一个bit的向量':247 '我们会生成一对加密和解密的密钥':139 '我们会额外生成一个这个函数的一个trapdoor':102 '我们使用':662 '我们使用上述两种方法生成的':684 '我们先不要着急想trapdoor到底是个啥':527 '我们先思考一下':529 '我们发现':757 '我们只需要看这个点到底在哪一个长方体':783 '我们可以做什么':531 '我们可以利用这个trapdoor来构造type':956 '我们可以发现lattice系统中的一个不对称性':809 '我们可以回头再看看type':965 '我们可以基于这一对密钥来定义rsa的tdf':142 '我们可以尝试找到两种表述方式':829 '我们可以开发出一个新的owf出来':456 '我们可以根据sis的难度来构造一个owf':259 '我们可以轻松的通过线性组合这些基向量来构造出格点':837 '我们可以选择两个不同的基向量':788 '我们可以通过':857 '我们可以非常快速':83 '我们在':640 '我们在生成这个owf函数实例的时候预先预留好一个':195 '我们就可以定义这个owf的单向性了':494 '我们就可以开始实战构造trapdoor了':726 '我们就可以很简单的计算':908 '我们就可以快速的把格点拆分回原本的线性组合':848 '我们开一个新的专题':48 '我们很难从这个值推算出原本输入':92 '我们很难还原出一开始的':182 '我们得到的这个函数':282 '我们无法分辨这组随机的向量组合到底是选定随机的输入通过':700 '我们来看看格密码学中的一个非常重要的工具':52 '我们现在来尝试引入trapdoor的概念':525 '我们的目标是猜出这个向量的值来':394 '我们都知道':821 '我们随机的选择一个输出空间中的向量':667 '我们需要随机生成一个矩阵':221 '我们首先使用':636 '我们首先着重了解一下第一种':730 '我们首先选出这个格中最好的一组基向量':750 '所以':564,581 '所以一般来说':896 '所以上面描述的cvp的解法就不管用了':801 '所以如果我们直接用上述的方法来解cvp的话':804 '所以对于我们真正构造使用lattice':938 '所以我们就算看到了':482 '所以根据lwe的困难度':493 '所以等我们学会type':963 '所以还有很多关于格的知识没有讲到':13 '所以非常好理解':883 '所有的lwe问题':502 '找到另一个对应的':341 '找到并不是最近的那个格点上':806 '拆分为':379 '拼凑起来从头开始学习lattice的基础定义和几大难题':24 '接下来我们看格中另一个难题':349 '是一个密码学中非常常见的一个基础工具':64 '是个向量还是矩阵还是数字并不重要':528 '是困难的':453 '更加神奇的是':952 '有兴趣的大家可以去看笔者的':43 '本文内容主要参考于iit':971 '本身了':480 '来':193,344,492 '来快速的求解cvp然后找出':862 '来描述这个lattice':739 '来看待':388 '来说':828,856,870 '构造trapdoor':717 '根据前面对于tdf的描述':543 '格中陷门':4 '格内积的值':431 '格密码学进阶':49 '格密码学进阶01':1 '正如开学的时候cs355第一节课上说的一样':14 '比如ibe':27 '比如svp':850 '比如可以构造出prg':96 '比如我们最常见的rsa加密算法就基于rsa的一个tdf':137 '比如说图中距离黄点最近的格点就是在它右下方的红点':802 '求解cvp问题是很简单的':764 '然后sis问题就是':232 '然后使用':670 '然后直接输出这个长方体中心对应的格点就可以了':786 '然后知道这个后门的人就可以轻松的打破单向性':198 '然后统计下来所有通过':647 '然后还原出最初的':191 '然而':884,930 '然而坏的基向量':746 '现在我们基于这一组坏的基组成的parallelpiped分割一下多维空间':799 '现在我们来看坏基的大致结构':787 '现在我们的':532 '理解起来很简单':118 '甚至是求解一些格中困难的问题':849 '生成的':704,710 '由于上学期在学校上的cs355':10 '由于篇幅原因':967 '的':500 '的任意的点':769 '的值':106 '的值来':94 '的函数':312 '的参数的时候':306 '的反函数与preimage':512 '的反函数最简单':561 '的向量':655 '的存在':332 '的对偶格中求解cvp问题':300 '的带噪音内积':406 '的朋友们应该对此不太陌生了':205 '的构造并不简单':937 '的话':91,181,187,445,888 '的输出空间分布的一个大概的描绘':609 '的过程必须要是一个高斯分布':593 '相比起上面sis需要依靠cvp问题的规约来完成证明':495 '看过前面的一系列文章':203 '短向量':237 '称作为preimage':619 '笔者只好去网上与各个学校搜刮讲座和课件':23 '笔者对格产生了很大的兴趣':9 '第一种方式就是一个随机的矩阵':830 '第一类格陷门基于几何上的特点':882 '第一类陷门':718 '第二种方式就是一个短矩阵':839 '第二类格陷门':920 '等我们学完前序的内容后':715 '简介':59 '简单的概括一下的话':65 '简单的说就是求解':291 '简短':818 '简短的概括lwe问题的话':389 '系统性的分类的话':727 '给定':233 '给定一个随机选择的':885 '而cvp又是另一个公认的格中难题':301 '能否找到一个':236 '虽然owf的定义在密码学应用上很有用了':95 '虽然当我们得到了对应的':902 '虽然格点是固定的':735 '被ajtai在1996年被证明为是一个单向函数':286 '要找到距离这个点最近的格点':772 '讲完fhe之后就结课了':12 '输出空间为':73 '近似垂直':819 '还是选定随机的输出通过':705 '还有一个错误分布区间':371 '这一专题':45 '这一期':51 '这一期就说到这里啦':968 '这一满射的特性决定了sis':329 '这一类的trapdoor虽然并不是像type':945 '这一组向量很短':758 '这一组基就没有之前的结构那么的完美':796 '这一组短的基可以帮助我们成功的找到一组均匀高斯分布的':871 '这两个属性代表了这一组基向量构成的determinant的基础空间':760 '这个':591 '这个owf的输出其实就是lwe中的':477 '这个函数有两个非常重要的特性':75 '这个反函数来还原一系列符合要求的输入':677 '这个概念现在看起来可能比较晦涩':711 '这个矩阵就是一组近似相互垂直并且短的':844 '这个问题在几何上就很难找到答案了':895 '这也就是第一类格陷门的精髓了':824 '这也就是说':825 '这些格中的问题就会变得非常好解决':820 '这代表了会有多个不同的短向量':313 '这代表了就算这个owf存在碰撞':337 '这会是你们密码学方向学习的最后一节课':16 '这将会是你们真正入门密码学的第一节课':18 '这就是在说我们使用':625 '这样一个求解短向量的问题':255 '这样的话':546 '这节课结束之后':19 '这里我们再来重新回顾一下lattice中的两大难题':206 '这里我们就跳过介绍直接讲定义':352 '这里留做一个悬念':714 '那么从':131 '那么原本的tdf仍然是一个owf':107 '那么在这个基的格中的svp':813 '那么就可以直接打破单向性':110 '那么就是带有噪音的内积问题':390 '那么很大可能性我们会找错点':805 '那么我们就可以把这一特性拿来用做密码学':823 '那么我们就可以直接计算':188 '那么理应我们就可以构造出这个owf的反函数来':545 '那么这个函数就是一个单向函数':78 '都有一个唯一的解':504 '陷门函数':55,58 '随后':661 '随机选择':592 '随机选择输出的一个':587 '首先':76,526 '首先我们先看sis问题':219 '首先我们需要来看看':200 '高阶密码学':11		
570	Lattice学习笔记09：Ring-SIS与Ideal Lattice	{"ver":2,"uid":1,"hash":"SHA1:65a1a2e8929babe6742f74372e2986224e6378ed"}	http://blog.higashi.tech/2020/08/10/lattice_09.html	2020-08-10 07:00:00	<p>本文取材于Vinod Vaikuntanathan的讲义。讲义本身取材于Noah Stephens-Davidowitz的笔记。</p>\n\n<h3 id="回顾从sis到ring-sis">回顾：从SIS到Ring-SIS</h3>\n\n<p>在之前的笔记中有所提到从SIS到Ring-SIS的转变，现在我们回顾一下。</p>\n\n\\[h_\\mathbf{A}(\\mathbf{e}) = f_\\mathbf{A}(\\mathbf{e}) = \\mathbf{Ae} \\text{ mod }q\\]\n\n<p>由SIS构造的哈希函数\\(h_\\mathbf{A}\\)具有单向且Collision Resistant的特性。但是缺点很明显：因为SIS问题矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)的大小的原因，导致了计算这个哈希函数的计算复杂度达到了\\(O(nm \\log{q}) \\approx O(n^2)\\)之高。</p>\n\n<p>然而，当我们看SIS这个问题的安全性的时候，却发现我们只要靠猜，就能在\\(2^{O(m)} \\approx 2^{O(n)}\\)的时间内就能猜出来。这样一来其实这个哈希函数并没有什么太大的优势：计算复杂度太高，从而导致破解复杂度与计算复杂度的比例过低。</p>\n\n<p>理论上我们需要一个可以快速验算（\\(\\widetilde{O}(m)\\)复杂度），并且破解难度保持相等（\\(2^{\\widetilde{O}(m)}\\)复杂度）的一个哈希函数。</p>\n\n<p>之前的笔记中提到的一个尝试就是把矩阵\\(\\mathbf{A}\\)横向切成\\(l = m/n\\)份，然后每一份都是一个正方形的等宽矩阵。随后，我们赋予这个等宽矩阵一个特殊的构造：旋转矩阵\\(Rot(\\mathbf{a})\\)。举个例子，如果\\(n = 4\\)：</p>\n\n\\[\\mathbf{a} = \\begin{bmatrix}1&amp;8&amp;3&amp;4\\end{bmatrix}^T\\\\\nRot(\\mathbf{a}) =\\begin{bmatrix}\n1&amp;4&amp;3&amp;8\\\\\n8&amp;1&amp;4&amp;3\\\\\n3&amp;8&amp;1&amp;4\\\\\n4&amp;3&amp;8&amp;1\n\\end{bmatrix}\\]\n\n<p>这样一来，我们只需要记住向量\\(\\mathbf{a}\\)的值，就可以重现整个旋转矩阵了，等于是我们把原本的\\(\\mathbf{A}\\)压缩到了\\(\\frac{1}{n}\\)的大小。</p>\n\n<h3 id="mathbbzxxn-1结构的多项式环">\\(\\mathbb{Z}[X]/(X^n-1)\\)结构的多项式环</h3>\n\n<p>之前的笔记也有所提到过，像上文中展示的旋转矩阵\\(Rot(\\mathbf{a})\\)其实可以表示为：</p>\n\n\\[Rot(\\mathbf{a}) = a_1I+a_2X+a_3X^2+a_4X^3\\\\\nX = \\begin{bmatrix}\n0&amp;0&amp;0&amp;1\\\\\n1&amp;0&amp;0&amp;0\\\\\n0&amp;1&amp;0&amp;0\\\\\n0&amp;0&amp;1&amp;0\n\\end{bmatrix}\\]\n\n<p>其中\\(a_i\\)表示为\\(\\mathbf{a}\\)向量中的第\\(i\\)位。</p>\n\n<p>我们用\\(\\widetilde{R} = \\{Rot(\\mathbf{a}) : \\mathbf{a} \\in \\mathbb{Z}^n\\}\\)这么一个集合来表示所有的\\(n\\)阶向量可以组成的旋转矩阵集合。仔细观察这个集合可以发现，这个集合中的元素之间相互加减，甚至相乘之后都可以得到同样的集合元素，并且具有分配律，即：</p>\n\n\\[a, b \\in \\widetilde{R}\\\\\na + b = b + a \\in \\widetilde{R}\\\\\na \\times b = b \\times a \\in \\widetilde{R}\\]\n\n<p>加法性质很好理解，因为我们只需要把上述\\(Rot(\\cdot)\\)的表达式展开，代入进\\(a, b\\)的值，再把各项系数相加就行了。乘法性质稍微tricky一点：我们观察发现\\(X^n = I\\)，所以我们把两个旋转矩阵相乘，大于等于\\(n\\)阶的\\(X\\)可以直接约掉\\(n\\)阶，也就是说最后得到的表达式一定是由\\(I, X, X^2, \\dots, X^{n-1}\\)组成的。而我们的旋转矩阵就是这么定义的。</p>\n\n<p>总的来说，就是说\\(\\widetilde{R}\\)这么一个集合不仅closed under addition，并且也closed under commutative multiplication，所以\\(\\widetilde{R}\\)是一个环（Ring）。</p>\n\n<p>仔细观察的话，上面描述的循环矩阵的表达式和\\(n-1\\)的阶多项式非常相似。具体地说，\\(\\widetilde{R}\\)与多项式环\\(R = \\mathbb{Z}[X]/(X^n - 1)\\)是同构的（isomorphic）。在这个多项式环中，加法和普通的加法一样，乘法在超过\\(n-1\\)阶的时候有所变化：</p>\n\n\\[x \\cdot x^i = \\begin{cases}\nx^{i+1} &amp; i &lt; n-1\\\\\n1 &amp; i = n-1\n\\end{cases}\\]\n\n<p>这和我们上面的\\(X^n = I\\)的定义是完美吻合的，只要超出\\(n-1\\)阶，就退回到1重新开始。</p>\n\n<p>即然多项式环可以完美的表达循环矩阵集合，我们也就没有必要一直拖着个循环矩阵到处走了。我们可以把一个循环矩阵\\(Rot(\\mathbf{a}) \\in \\widetilde{R}\\)用多项式环中的一个\\(n-1\\)阶的元素\\(a \\in R\\)来表示。紧接着，我们可以把原本的矩阵\\(\\mathbf{A}\\)（拆分成了\\(l\\)个循环矩阵），分别用\\((a_1, \\dots, a_l)^T \\in R^l_{[q]}\\)来代替。其中\\(R_{[q]}\\)代表了多项式每一项系数都在\\([q] = \\{n:\\lvert n \\rvert &lt; q\\}\\)的集合中。</p>\n\n<p>同理，我们的输入短向量\\(e\\)也变成了一组短的多项式元素\\((e_1, \\dots, e_l)^T \\in R^l_{\\{0, 1\\}}\\)。这样整个哈希函数就变成了：</p>\n\n\\[h_{a_1, \\dots, a_l}(e_1, \\dots, e_l) = a_1e_1 + \\dots + a_le_l \\text{ mod }qR\\]\n\n<p>在之前的文章中也有所提到过，如果我们有多个多项式相乘，我们可以在\\(O(n \\log(nq))\\)的时间内计算完，并且这里的加法是高度并行的。这比起之前的\\(O(n^2)\\)的计算速度要快多了。</p>\n\n<h3 id="ring-sis问题回顾">Ring-SIS问题回顾</h3>\n\n<p>根据上面基于多项式环的哈希函数，我们正式定义一下Ring-SIS：我们拥有\\(a_1, \\dots, a_l \\in R_{[q]}\\)一共\\(l\\)个随机生成的多项式，目标是输入一组系数不全部为0的多项式\\(e_1, \\dots, e_l \\in R_{\\{-1, 0, 1\\}}\\)并且使得：</p>\n\n\\[a_1e_1 + \\dots + a_le_l = 0 \\text{ mod }qR\\]\n\n<p>之前在学习SIS的时候，我们知道如果可以找到一组SIS OWF的Collision，那么就等于找到了SIS问题的解。在Ring-SIS中也一样，如果我们可以成功的找到多项式环中的哈希函数的Collision，那么我们也能解决对应的Ring-SIS问题了。</p>\n\n<p>可惜的是，\\(R = \\mathbb{Z}[X]/(X^n - 1)\\)这个多项式环下的哈希函数，虽然满足单向性（Micciancio07），但是并不是Collision Resistant的。也就是说，在\\(R\\)下的Ring-SIS问题是简单的。</p>\n\n<p>在之前的文章中，我们在循环矩阵的表达方式下Ring-SIS的解（把\\(\\mathbf{e}\\)设置成全1，然后微调）。这一次，我们来看看在多项式环的表达方式中，如何证明\\(R\\)这个环下Ring-SIS的安全性并不高。这里注意，证明安全性的关键在于多项式环的特征多项式\\(x^n - 1\\)可以被约分为：</p>\n\n\\[x^n - 1 = (x-1)(1 + x + x^2 + \\dots + x^{n-1})\\]\n\n<p>首先，我们先假设\\(\\tilde{e}\\)为每项系数都为1的多项式：</p>\n\n\\[\\tilde{e} = 1 + x + x^2 + \\dots + x^{n-1} \\in \\mathbb{Z}[x]/(x^n-1)\\]\n\n<p>根据我们上面描述的约分关系，我们发现\\((x-1)\\tilde{e} = x^n - 1 = 0\\)。这个关系至关重要。</p>\n\n<p>随后回到我们的Ring-SIS问题上来，问题会给我们\\(a_1, \\dots, a_l\\)一共\\(l\\)个多项式，我们需要得到\\(e_1, \\dots, e_l\\)一共\\(l\\)个短的多项式，这两组多项式的依次相乘加起来等于0。</p>\n\n<p>解决的方式非常简单，我们直接忽略掉除了\\(a_1\\)以外的所有其他\\(l-1\\)个多项式。同理，我们把\\(e_2, \\dots, e_{l-1}\\)这些解的部分都忽略掉，只留下\\(e_1\\)。随后，我们把\\(e_1\\)设置为刚刚定义的\\(\\tilde{e}\\)。这样一来，只要我们的Ring-SIS问题就变成了：</p>\n\n\\[h_{a_1, \\dots, a_l}(\\tilde{e}, 0, \\dots, 0) = a_1 \\tilde{e} \\text{ mod }qR\\]\n\n<p>这也就是说，只要\\(a_1 \\tilde{e} = 0 \\text{ mod }qR\\)，那么我们就找到了Ring-SIS的问题的解啦。这个解就是在\\(\\tilde{e}\\)的后面加\\(l-1\\)个全0的多项式。</p>\n\n<p>接下来我们看看，到底在什么情况下，\\(a_1 \\tilde{e}\\)会等于0呢？首先最trivial的case就是当\\(a_1\\)为0的时候，不过这个情况我们不考虑，因为\\(a_1\\)是随机系数的多项式。那么另一个情况就是当\\(a_1\\)是\\((x-1)\\)的倍数的时候，即\\(\\exists a' \\in qR : a_1 = (x-1)a'\\)，那么我们相乘就会得到：</p>\n\n\\[a_1 \\tilde{e} = a'(x-1)\\tilde{e} = 0 \\text{ mod }qR\\]\n\n<p>这也就是说，只要\\(a_1\\)是\\((x-1)\\)的倍数，那么我们只要盲猜\\(\\tilde{e}\\)就可以猜中Ring-SIS问题正确的解。那么由于这里\\(a_1\\)是的系数是随机生成的，正好生成到\\((x-1)\\)的倍数的可能性多大呢？</p>\n\n<p>我们首先观察所有\\((x-1)\\)的倍数是什么样子：</p>\n\n\\[(x-1) \\cdot k = kx - k\\\\\n(x-1) \\cdot x = x^2 - x\\\\\n(x-1) \\cdot (x + k) = x^2 - x + kx -k\\\\\\]\n\n<p>我们发现，所有\\((x-1)\\)倍数的多项式都具有一个很特殊的属性：多项式每一项的系数加起来最后总和等于0！</p>\n\n<p>由于Ring-SIS是在\\(qR\\)的多项式环上进行操作的，即每一项的系数都在\\(q\\)以内，那么我们可以复现一下随机生成一个\\(qR\\)环中的多项式的过程：</p>\n\n<ol>\n  <li>首先，我们随机选择\\(q\\)中的一个数字，使其成为多项式中第一项的系数\\(a^1 \\in \\mathbb{Z}_q\\)。</li>\n  <li>随后，我们用同样的方法，依次随机的生成\\(a^2, \\dots, a^{n-2}\\)，即一直到第\\(n-2\\)项的系数。</li>\n  <li>现在最后只剩下最后的一项系数\\(a^{n-1}\\)没有生成了，即第\\(n-1\\)项。这个时候我们发现，因为前面\\(n-2\\)项已经确定了，那么如果我们希望这个多项式是\\((x-1)\\)的倍数，那么它一定要满足：</li>\n</ol>\n\n\\[a^{n-1} + \\sum_{i=1}^{n-2} a^i = 0 \\text{ mod } \\mathbb{Z}_q\\\\\na^{n-1} = -\\sum_{i=1}^{n-2} a^i\\]\n\n<ol>\n  <li>因为我们所有的系数都在\\(\\mathbb{Z}_q\\)中，所以我们随机生成\\(a^{n-1}\\)的话就是在\\(q\\)个元素中随机的选择一个元素。那么这样随机的选中\\(-\\sum_{i=1}^{n-2} a^i\\)的可能性就是\\(1/q\\)了。</li>\n</ol>\n\n<p>这也就是说，任意的给定一个如上描述的Ring-SIS问题，我们如果盲猜\\(\\tilde{e}\\)作为解的话，竟然会有\\(1/q\\)的几率会猜对！</p>\n\n<p>\\(1/q\\)这个概率对于Ring-SIS的安全性来说实在是太大了。这也就是说，如果我们想要达到SIS问题中我们得到的\\(2^{\\widetilde{O}(n)}\\)的安全性（复杂度）的话，我们需要把\\(q\\)的大小设置为\\(q = 2^{\\widetilde{O}(n)}\\)才行。在如此大的q的情况下，就算我们计算Ring-SIS的哈希函数可以通过FFT来加快速度，最后得到的时间复杂度\\(O(n \\log{nq}) = O(n \\log{n \\cdot 2^n})\\)甚至大于了原本的SIS的时间复杂度。</p>\n\n<h3 id="mathbbzxxn1结构的多项式环">\\(\\mathbb{Z}[X]/(X^n+1)\\)结构的多项式环</h3>\n\n<p>因为之前我们用的环的特征多项式可以被约分，所以导致用原本的环构造出的Ring-SIS问题非常好破解。在之前的文章里也提到了解决方案：使用一个特征多项式不能被约分的环来代替。</p>\n\n<p>这个新的多项式环，就是\\(\\mathbb{Z}[X]/(X^n + 1)\\)。在这个环下的运算和之前大致相同，唯一不同的是临近\\(n\\)阶时的乘法规则：</p>\n\n\\[x \\cdot x^i = \\begin{cases}\nx^{i+1} &amp; i &lt; n-1\\\\\n-1 &amp; i = n-1\n\\end{cases}\\]\n\n<p>同理，代表了这个环的循环矩阵中的\\(X\\)为：</p>\n\n\\[X = \\begin{bmatrix}\n0&amp;0&amp;0&amp;-1\\\\\n1&amp;0&amp;0&amp;0\\\\\n0&amp;1&amp;0&amp;0\\\\\n0&amp;0&amp;1&amp;0\n\\end{bmatrix}\\]\n\n<p>这个新的环的安全性在于特征多项式\\((X^n + 1)\\)的特殊属性。当\\(n\\)是2的幂的时候，这个多项式又被称作Cyclotomic Polynomial（分圆多项式），而这个多项式是无法被约分的。所以在这个多项式环中，我们上面描述的破解Ring-SIS的方法就无效了。</p>\n\n<h3 id="ideal-lattice理想格">Ideal Lattice（理想格）</h3>\n\n<p>接下来说一说Ideal Lattice的概念。</p>\n\n<p>在环论中，有一类比较特殊的集合叫做理想（Ideal）。假如我们在一个环\\(R\\)中，那么一个理想\\(\\mathcal{I} \\subseteq R\\)就是环\\(R\\)的一部分。这个理想\\(\\mathcal{I}\\)有几个特性：</p>\n\n<ol>\n  <li>首先，\\(\\mathcal{I}\\)这个集合在加法空间内是封闭的（closed under addition），即任意两个理想中的元素\\(a, b \\in \\mathcal{I}\\)相加或者相减之后也会得到一个理想元素：\\(a + b, a-b \\in \\mathcal{I}\\)。</li>\n  <li>其次，理想中的元素与环\\(R\\)中的元素在乘法空间内是封闭的（closed under multiplication），即一个环中的元素\\(r \\in R\\)和一个理想中的元素\\(y \\in \\mathcal{I}\\)相乘，最后还会得到理想中的元素：\\(ry \\in \\mathcal{I}\\)。</li>\n</ol>\n\n<p>在我们的应用场景中，\\(R\\)是一个\\(n-1\\)阶多项式组成的多项式环。这也就是说，我们可以很简单的把一个\\(R\\)中的元素映射到\\(\\mathbb{Z}^n\\)中——只需要把每一个系数作为一个维度就好了。举个例子：</p>\n\n\\[1 + 2x^2 - 3x^3 \\rightarrow (1, 2, -3)\\]\n\n<p>解决了\\(R\\)之后，我们来看\\(\\mathcal{I}\\)。这里我们要用\\(\\mathcal{I}\\)来表示之前描述的\\(\\mathbb{Z}[x]/(x^n+1)\\)这么一个特殊的多项式环。我们可以把\\(\\mathcal{I}\\)看做一个特殊的Lattice \\(\\mathcal{I} \\subseteq \\mathbb{Z}^n\\)，并且在之前描述过的循环矩阵的变换矩阵\\(X\\)的运算下是封闭的。换句话来说，如果\\(y \\in \\mathcal{I}\\)，那么\\(Xy \\in \\mathcal{I}\\)。展开来看的话就是：</p>\n\n\\[(y_1, \\dots, y_n)^T \\in \\mathcal{I} \\iff (-y_n, y_1, \\dots, y_{n-1}) \\in \\mathcal{I}\\]\n\n<p>我们一般称这样的构造为Anti-cyclic Lattice。反之，如果我们用的是前面\\((X^n -1)\\)特征多项式对应的线性变换的话，那么得到的Lattice叫做Cyclic Lattice。这就是所谓的理想格了。</p>\n\n<p>理想格其实是一种很奇怪的格结构。假如我们从理想格中选出任意一个非0的向量\\(y \\in \\mathcal{I}\\)，我们可以依次对这个向量施加线性变换\\(X\\)，并且获得\\(n\\)个线性独立的向量：</p>\n\n\\[y, Xy, X^2y, \\dots, X^{n-1}y \\in \\mathbb{Z}^n\\]\n\n<p>我们观察发现，\\(X\\)的Determinant是1，代表\\(X\\)这个线性变换是可以维持原本向量的长度的，这也就是说，这些线性独立的向量的长度全部相等：</p>\n\n\\[\\lvert\\lvert X^iy \\rvert\\rvert = \\lvert\\lvert X^jy \\rvert\\rvert\\]\n\n<p>这代表什么呢？这代表理想格中的最短向量问题SVP与最短独立向量问题SIVP是一样的！这是因为只要存在一个最短的向量\\(y' \\in \\mathcal{I}\\)，那么我们就可以通过叠加线性变换\\(X\\)获得其他的\\(n-1\\)个独立的等长向量，这也就代表了\\(\\lambda_1(\\mathcal{I}) = \\lambda_n(\\mathcal{I})\\)。这样一来，在理想格中，有一部分原本的格的假设变得不同了，原本在普通的格中我们认为困难的问题，在理想格中可能很容易解决，或者难以证明难度。</p>\n\n<h3 id="理想格难题与ring-sis的规约">理想格难题与Ring-SIS的规约</h3>\n\n<p>我们之前学到过，给定一个SIVP问题，我们可以规约到SIS问题，即我们可以把一个SIVP的难题“包装”成一个SIS问题，所以解决了SIS问题的话，我们也就获得了SIVP问题的解。这样的规约（reduction）直接证明了SIS问题的安全性。</p>\n\n<p>我们还学到过，给定一个worst case的SIS问题，我们可以规约到average case的SIS问题，即如果能解决平均难度的SIS，就可以解决最难的SIS问题。这样的reduction证明了所有SIS问题的范畴中问题的难度分布较为集中，不会有特别简单或者特别难的。</p>\n\n<p>同理，学习了Ring-SIS和Ideal Lattice之后，我们能否把Ideal Lattice下的SVP问题，即IdealSVP规约到Ring-SIS问题上呢？</p>\n\n<p>答案是<strong>还不确定</strong>。目前这还是一个Open Problem，没有很有效的把IdealSVP转换为Ring-SIS的方法。这主要是因为Ring-SIS并不是纯粹的一个理想格问题，因为它的解是\\((e_1, \\dots, e_l) \\in R^l\\)这么一个多项式构成的向量，而并不只是一个理想格元素。</p>\n\n<p>所以现在格密码圈对于Ring-SIS的看法褒贬不一。一部分的人认为Ring-SIS可以很有效的提高格密码的运算效率，所以提倡它的普及应用。但是另一部分人认为Ring-SIS的难度规约还没有完成，所以不像SIS、LWE一样，我们不能完全的相信它的安全性。</p>\n\n<p>不过密码学就是这样，有很多情怀的因素在里面。目前主流的同态加密库如HELib、TFHE等等都是使用多项式环来进行优化计算。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="http://people.csail.mit.edu/vinodv/">Vinod Vaikuntanathan</a>’s CS294 course.</p>	82a2531a30eb5bcff79c1e436480037fcc2e03ee	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.156744	0			'+1':335,944,972,1130 '-1':161,284,306,325,338,342,352,366,480,551,559,574,581,585,621,630,682,705,715,724,737,751,755,758,764,771,783,824,828,837,842,858,874,975,976,979,992,1094,1174,1186,1209,1246 '-2':816,819,833,847,863,883 '-3':1114 '0':185,186,187,190,191,192,193,195,196,197,198,200,415,481,491,591,654,656,670,727,850,989,990,991,994,995,996,997,999,1000,1001,1002,1004 '1':112,124,129,134,139,153,188,189,194,199,318,339,381,407,416,420,425,431,462,474,482,486,513,545,549,552,567,590,598,607,618,634,638,648,658,667,687,693,698,702,713,719,734,747,803,845,861,881,959,993,998,1003,1010,1106,1112,1158,1170,1250,1307 '1/q':887,898,900 '1e':430,485 '1i':173 '2':61,67,71,84,178,280,451,555,570,626,768,776,812,906,917,936,1108,1113 '2x':175,1107 '2y':1205 '3':114,126,131,132,137,181,1110 '3x':177,1109 '4':107,115,125,130,135,136 '4x':180 '8':113,127,128,133,138 'a':22,27,38,44,92,103,109,121,145,150,167,171,172,174,176,179,204,208,217,219,232,237,240,244,249,259,360,368,375,380,383,419,422,429,433,461,464,484,488,597,600,617,647,650,657,666,686,692,697,701,709,712,716,718,722,733,746,802,811,814,822,840,848,856,864,872,884,1054,1060,1063 'a-b':1062 'addition':293,1052 'ae':31 'approx':58,70 'b':233,238,239,246,247,260,1055,1061,1064 'begin':110,122,183,331,968,987 'bmatrix':111,117,123,141,184,202,988,1006 'cases':332,344,969,981 'case的sis问题':1279,1281 'cdot':256,328,759,765,772,935,965 'closed':1050,1072 'commutative':296 'contents':1335 'course':1347 'credits':1333 'cs294':1346 'cyclic':1180 'davidowitz的笔记':11 'dots':281,382,408,421,426,432,463,475,487,556,571,599,608,627,649,655,813,1159,1171,1206,1308 'e':24,29,404,406,409,424,427,473,476,531,563,566,587,606,609,625,628,633,637,641,653,660,669,679,689,721,726,741,895,1306,1309 'end':116,140,201,343,980,1005 'exists':708 'f':25 'frac':152 'from':1341 'h':20,36,418,646 'i':205,210,267,277,330,334,336,340,348,844,849,860,865,880,885,967,971,973,977,1036,1044,1048,1058,1067,1083,1089,1120,1123,1134,1137,1150,1155,1165,1177,1196,1241,1252,1256 'ideal':1023,1030 'iff':1166 'in':45,220,234,241,250,361,369,386,412,466,478,575,710,804,1056,1065,1077,1081,1087,1148,1153,1163,1175,1194,1211,1239,1311 'is':1339 'isomorphic':320 'iy':1226 'jy':1232 'k':760,762,774,779 'kx':761,778 'l':94,377,384,388,410,414,423,428,435,465,470,477,490,601,603,610,612,620,629,651,681,1310,1313 'lambda':1249,1253 'lattice':5,1024,1181,1189 'lattice下的svp问题':1292 'lattice之后':1290 'lattice学习笔记09':1 'lattice的概念':1027 'le':434,489 'log':56,444,929,933 'lvert':397,1223,1224,1229,1230 'lwe一样':1327 'm':51,69,81,87 'm/n':95 'mathbb':46,156,221,313,508,576,805,853,867,939,954,1100,1125,1139,1212 'mathbf':21,23,26,28,30,37,43,91,102,108,120,144,149,166,170,207,216,218,359,374,530 'mathcal':1035,1043,1047,1057,1066,1082,1088,1119,1122,1133,1136,1149,1154,1164,1176,1195,1240,1251,1255 'micciancio07':516 'mod':33,437,493,662,672,729,852 'multiplication':297,1074 'n':49,60,73,106,154,160,223,225,266,270,274,283,305,317,324,337,341,347,351,365,396,398,443,450,512,544,548,558,573,580,589,815,818,823,827,832,841,846,857,862,873,882,909,920,928,932,934,937,943,958,962,974,978,1009,1013,1093,1102,1129,1141,1161,1168,1173,1185,1200,1208,1214,1245,1254 'nm':55 'nq':445,930 'o':54,59,68,72,80,86,442,449,908,919,927,931 'of':1336 'owf的collision':497 'polynomial':1016 'post':1338 'problem':1298 'prof':1342 'q':34,48,57,389,393,395,400,468,792,799,807,855,869,876,914,916 'qr':438,494,663,673,711,730,789,795 'r':214,236,243,252,290,300,310,312,363,370,387,392,413,467,479,507,521,537,1032,1038,1040,1070,1076,1078,1091,1098,1116,1312 'reduction':1275 'resistant的':518 'resistant的特性':40 'rightarrow':1111 'ring':3,302,454 'ring-sis与ideal':2 'ring-sis问题回顾':453 'rot':101,119,165,169,215,255,358 'rvert':399,1227,1228,1233,1234 'ry':1086 's':1345 'sis':15,459 'sis与ideal':4 'sis中也一样':501 'sis可以很有效的提高格密码的运算效率':1321 'sis和ideal':1289 'sis并不是纯粹的一个理想格问题':1304 'sis是在':788 'sis的哈希函数可以通过fft来加快速度':925 'sis的安全性并不高':540 'sis的安全性来说实在是太大了':903 'sis的方法':1301 'sis的方法就无效了':1022 'sis的看法褒贬不一':1318 'sis的规约':1265 'sis的解':528 'sis的转变':18 'sis的问题的解啦':676 'sis的难度规约还没有完成':1325 'sis问题':892 'sis问题上呢':1295 'sis问题上来':595 'sis问题了':505 'sis问题回顾':455 'sis问题就变成了':645 'sis问题是简单的':524 'sis问题正确的解':744 'sis问题非常好破解':949 'stephens':10 'stephens-davidowitz的笔记':9 'subseteq':1037,1138 'sum':843,859,879 'summarized':1340 't':118,385,411,1162 'text':32,436,492,661,671,728,851 'tfhe等等都是使用多项式环来进行优化计算':1332 'the':1334 'this':1337 'tilde':562,565,586,640,652,659,668,678,688,720,725,740,894 'times':50,245,248 'under':292,295,1051,1073 'vaikuntanathan':1344 'vaikuntanathan的讲义':7 'vinod':1343 'widetilde':79,85,213,235,242,251,289,299,309,362,907,918 'x':158,159,182,265,272,278,279,282,315,316,327,329,333,346,510,511,543,547,550,553,554,557,568,569,572,578,579,584,588,704,714,723,736,750,754,757,763,766,767,769,770,773,775,777,782,836,941,942,956,957,964,966,970,984,986,1008,1127,1128,1143,1184,1198,1204,1207,1216,1219,1225,1231,1243 'xy':1152,1203 'y':1080,1147,1157,1160,1167,1169,1172,1193,1202,1210,1238 'z':47,157,222,314,509,577,806,854,868,940,955,1101,1126,1140,1213 '一共':469,602,611 '一部分的人认为ring':1320 '一部分的人认为ring-sis可以很有效的提高格密码的运算效率':1319 '上面描述的循环矩阵的表达式和':304 '下的ring':523 '下的ring-sis问题是简单的':522 '不会有特别简单或者特别难的':1285 '不过密码学就是这样':1329 '不过这个情况我们不考虑':695 '与多项式环':311 '个元素中随机的选择一个元素':877 '个全0的多项式':683 '个多项式':604,622 '个循环矩阵':378 '个独立的等长向量':1247 '个短的多项式':613 '个线性独立的向量':1201 '个随机生成的多项式':471 '中':870,1033,1103 '中的一个数字':800 '中的元素在乘法空间内是封闭的':1071 '中的元素映射到':1099 '为':985 '为0的时候':694 '为每项系数都为1的多项式':564 '举个例子':104,1105 '之前在学习sis的时候':495 '之前的笔记中提到的一个尝试就是把矩阵':90 '之前的笔记也有所提到过':163 '之后':1117 '之高':62 '乘法在超过':323 '乘法性质稍微tricky一点':263 '也变成了一组短的多项式元素':405 '也就是说':519 '也就是说最后得到的表达式一定是由':276 '了':888 '从sis到ring':14 '从sis到ring-sis':13 '从而导致破解复杂度与计算复杂度的比例过低':77 '仔细观察的话':303 '仔细观察这个集合可以发现':227 '代入进':258 '代表':1218 '代表了多项式每一项系数都在':394 '代表了这个环的循环矩阵中的':983 '以内':793 '以外的所有其他':619 '任意的给定一个如上描述的ring':891 '任意的给定一个如上描述的ring-sis问题':890 '份':96 '会等于0呢':690 '但是另一部分人认为ring':1324 '但是另一部分人认为ring-sis的难度规约还没有完成':1323 '但是并不是collision':517 '但是缺点很明显':41 '位':211 '作为解的话':896 '使其成为多项式中第一项的系数':801 '使用一个特征多项式不能被约分的环来代替':951 '依次随机的生成':810 '倍数的多项式都具有一个很特殊的属性':784 '假如我们从理想格中选出任意一个非0的向量':1192 '假如我们在一个环':1031 '像上文中展示的旋转矩阵':164 '其中':203,391 '其实可以表示为':168 '其次':1068 '具体地说':308 '具有单向且collision':39 '再把各项系数相加就行了':262 '分别用':379 '分圆多项式':1017 '到底在什么情况下':685 '加法和普通的加法一样':322 '加法性质很好理解':253 '包装':1270 '即':231,707 '即idealsvp规约到ring':1294 '即idealsvp规约到ring-sis问题上呢':1293 '即一个环中的元素':1075 '即一直到第':817 '即任意两个理想中的元素':1053 '即如果能解决平均难度的sis':1282 '即我们可以把一个sivp的难题':1269 '即每一项的系数都在':791 '即然多项式环可以完美的表达循环矩阵集合':355 '即第':826 '却发现我们只要靠猜':65 '压缩到了':151 '原本在普通的格中我们认为困难的问题':1260 '反之':1182 '只留下':632 '只要':665,732 '只要我们的ring':644 '只要我们的ring-sis问题就变成了':643 '只要超出':350 '只需要把每一个系数作为一个维度就好了':1104 '可以直接约掉':273 '可以被约分为':546 '可惜的是':506 '同理':402,623,982,1286 '向量中的第':209 '和一个理想中的元素':1079 '唯一不同的是临近':961 '回顾':12 '因为':696 '因为sis问题矩阵':42 '因为之前我们用的环的特征多项式可以被约分':946 '因为前面':831 '因为它的解是':1305 '因为我们只需要把上述':254 '因为我们所有的系数都在':866 '在':520 '在ring':500 '在ring-sis中也一样':499 '在之前的文章中':525 '在之前的文章中也有所提到过':439 '在之前的文章里也提到了解决方案':950 '在之前的笔记中有所提到从sis到ring':17 '在之前的笔记中有所提到从sis到ring-sis的转变':16 '在如此大的q的情况下':922 '在我们的应用场景中':1090 '在环论中':1028 '在理想格中':1258 '在理想格中可能很容易解决':1261 '在这个多项式环中':321 '在这个环下的运算和之前大致相同':960 '复杂度':82,88,911 '多项式每一项的系数加起来最后总和等于0':785 '大于等于':269 '如何证明':536 '如果':105,1146 '如果我们可以成功的找到多项式环中的哈希函数的collision':502 '如果我们想要达到sis问题中我们得到的':905 '如果我们有多个多项式相乘':440 '如果我们用的是前面':1183 '学习了ring':1288 '学习了ring-sis和ideal':1287 '导致了计算这个哈希函数的计算复杂度达到了':53 '就可以猜中ring':743 '就可以猜中ring-sis问题正确的解':742 '就可以解决最难的sis问题':1283 '就可以重现整个旋转矩阵了':147 '就是':953 '就是环':1039 '就是说':288 '就算我们计算ring':924 '就算我们计算ring-sis的哈希函数可以通过fft来加快速度':923 '就能在':66 '就退回到1重新开始':354 '展开来看的话就是':1156 '并且也closed':294 '并且使得':483 '并且具有分配律':230 '并且在之前描述过的循环矩阵的变换矩阵':1142 '并且破解难度保持相等':83 '并且获得':1199 '并且这里的加法是高度并行的':447 '当':1012 '当我们看sis这个问题的安全性的时候':64 '总的来说':287 '成一个sis问题':1271 '我们一般称这样的构造为anti':1179 '我们一般称这样的构造为anti-cyclic':1178 '我们上面描述的破解ring':1021 '我们上面描述的破解ring-sis的方法就无效了':1020 '我们不能完全的相信它的安全性':1328 '我们之前学到过':1266 '我们也就没有必要一直拖着个循环矩阵到处走了':356 '我们也就获得了sivp问题的解':1273 '我们先假设':561 '我们发现':583,780 '我们只需要记住向量':143 '我们可以依次对这个向量施加线性变换':1197 '我们可以在':441 '我们可以很简单的把一个':1097 '我们可以把':1132 '我们可以把一个循环矩阵':357 '我们可以把原本的矩阵':373 '我们可以规约到average':1280 '我们可以规约到sis问题':1268 '我们在循环矩阵的表达方式下ring':527 '我们在循环矩阵的表达方式下ring-sis的解':526 '我们如果盲猜':893 '我们把':624,636 '我们拥有':460 '我们来看':1118 '我们来看看在多项式环的表达方式中':535 '我们正式定义一下ring':458 '我们正式定义一下ring-sis':457 '我们用':212 '我们用同样的方法':809 '我们的输入短向量':403 '我们直接忽略掉除了':616 '我们知道如果可以找到一组sis':496 '我们能否把ideal':1291 '我们观察发现':264,1215 '我们赋予这个等宽矩阵一个特殊的构造':99 '我们还学到过':1277 '我们随机选择':798 '我们需要得到':605 '我们需要把':913 '我们首先观察所有':753 '或者难以证明难度':1262 '所以':298 '所以不像sis':1326 '所以在这个多项式环中':1019 '所以导致用原本的环构造出的ring':948 '所以导致用原本的环构造出的ring-sis问题非常好破解':947 '所以我们把两个旋转矩阵相乘':268 '所以我们随机生成':871 '所以提倡它的普及应用':1322 '所以现在格密码圈对于ring':1317 '所以现在格密码圈对于ring-sis的看法褒贬不一':1316 '所以解决了sis问题的话':1272 '所有':781 '才行':921 '把':529 '拆分成了':376 '换句话来说':1145 '接下来我们看看':684 '接下来说一说ideal':1026 '旋转矩阵':100 '是':703,735 '是2的幂的时候':1014 '是一个':1092 '是一个环':301 '是同构的':319 '是的系数是随机生成的':748 '是随机系数的多项式':699 '最后得到的时间复杂度':926 '最后还会得到理想中的元素':1085 '有一类比较特殊的集合叫做理想':1029 '有一部分原本的格的假设变得不同了':1259 '有几个特性':1045 '有很多情怀的因素在里面':1330 '本文取材于vinod':6 '来代替':390 '来表示':371 '来表示之前描述的':1124 '根据上面基于多项式环的哈希函数':456 '根据我们上面描述的约分关系':582 '横向切成':93 '正好生成到':749 '没有很有效的把idealsvp转换为ring':1300 '没有很有效的把idealsvp转换为ring-sis的方法':1299 '没有生成了':825 '然后微调':533 '然后每一份都是一个正方形的等宽矩阵':97 '然而':63 '特征多项式对应的线性变换的话':1187 '环中的多项式的过程':796 '现在我们回顾一下':19 '现在最后只剩下最后的一项系数':821 '理想中的元素与环':1069 '理想格':1025 '理想格其实是一种很奇怪的格结构':1191 '理想格难题与ring':1264 '理想格难题与ring-sis的规约':1263 '理论上我们需要一个可以快速验算':78 '甚至大于了原本的sis的时间复杂度':938 '甚至相乘之后都可以得到同样的集合元素':229 '用多项式环中的一个':364 '由sis构造的哈希函数':35 '由于ring':787 '由于ring-sis是在':786 '的determinant是1':1217 '的一个哈希函数':89 '的一部分':1041 '的倍数':738,838 '的倍数是什么样子':756 '的倍数的可能性多大呢':752 '的倍数的时候':706 '的值':146,261 '的几率会猜对':899 '的可能性就是':886 '的后面加':680 '的多项式环上进行操作的':790 '的大小':155 '的大小的原因':52 '的大小设置为':915 '的安全性':910 '的定义是完美吻合的':349 '的时间内就能猜出来':74 '的时间内计算完':446 '的特殊属性':1011 '的表达式展开':257 '的计算速度要快多了':452 '的话':912 '的话就是在':875 '的运算下是封闭的':1144 '的阶多项式非常相似':307 '的集合中':401 '目前主流的同态加密库如helib':1331 '目前这还是一个open':1297 '目标是输入一组系数不全部为0的多项式':472 '直接证明了sis问题的安全性':1276 '相乘':1084 '相加或者相减之后也会得到一个理想元素':1059 '看做一个特殊的lattice':1135 '竟然会有':897 '等于是我们把原本的':148 '答案是还不确定':1296 '紧接着':372 '组成的':285 '结构的多项式环':162,945 '给定一个sivp问题':1267 '给定一个worst':1278 '而并不只是一个理想格元素':1315 '而我们的旋转矩阵就是这么定义的':286 '而这个多项式是无法被约分的':1018 '获得其他的':1244 '虽然满足单向性':515 '表示为':206 '解决了':1115 '解决的方式非常简单':615 '计算复杂度太高':76 '讲义本身取材于noah':8 '设置为刚刚定义的':639 '设置成全1':532 '证明安全性的关键在于多项式环的特征多项式':542 '这一次':534 '这两组多项式的依次相乘加起来等于0':614 '这个关系至关重要':592 '这个多项式又被称作cyclotomic':1015 '这个多项式环下的哈希函数':514 '这个新的多项式环':952 '这个新的环的安全性在于特征多项式':1007 '这个时候我们发现':830 '这个概率对于ring':902 '这个概率对于ring-sis的安全性来说实在是太大了':901 '这个环下ring':539 '这个环下ring-sis的安全性并不高':538 '这个理想':1042 '这个线性变换是可以维持原本向量的长度的':1220 '这个解就是在':677 '这个集合中的元素之间相互加减':228 '这个集合在加法空间内是封闭的':1049 '这主要是因为ring':1303 '这主要是因为ring-sis并不是纯粹的一个理想格问题':1302 '这么一个多项式构成的向量':1314 '这么一个特殊的多项式环':1131 '这么一个集合不仅closed':291 '这么一个集合来表示所有的':224 '这也就代表了':1248 '这也就是说':664,731,889,904,1096,1221 '这些线性独立的向量的长度全部相等':1222 '这些解的部分都忽略掉':631 '这代表什么呢':1235 '这代表理想格中的最短向量问题svp与最短独立向量问题sivp是一样的':1236 '这和我们上面的':345 '这就是所谓的理想格了':1190 '这是因为只要存在一个最短的向量':1237 '这样一来':142,642,1257 '这样一来其实这个哈希函数并没有什么太大的优势':75 '这样整个哈希函数就变成了':417 '这样的reduction证明了所有sis问题的范畴中问题的难度分布较为集中':1284 '这样的规约':1274 '这比起之前的':448 '这里我们要用':1121 '这里注意':541 '那么':1151 '那么一个理想':1034 '那么另一个情况就是当':700 '那么如果我们希望这个多项式是':835 '那么它一定要满足':839 '那么就等于找到了sis问题的解':498 '那么得到的lattice叫做cyclic':1188 '那么我们也能解决对应的ring':504 '那么我们也能解决对应的ring-sis问题了':503 '那么我们只要盲猜':739 '那么我们可以复现一下随机生成一个':794 '那么我们就可以通过叠加线性变换':1242 '那么我们就找到了ring':675 '那么我们就找到了ring-sis的问题的解啦':674 '那么我们相乘就会得到':717 '那么由于这里':745 '那么这样随机的选中':878 '问题会给我们':596 '阶':275,353 '阶向量可以组成的旋转矩阵集合':226 '阶多项式组成的多项式环':1095 '阶时的乘法规则':963 '阶的':271 '阶的元素':367 '阶的时候有所变化':326 '随后':98,635,808 '随后回到我们的ring':594 '随后回到我们的ring-sis问题上来':593 '项':829 '项已经确定了':834 '项的系数':820 '首先':560,797,1046 '首先最trivial的case就是当':691		
628	[推荐] 程序日志级别规范	{"ver":2,"uid":1,"hash":"SHA1:23180d06683cb01f50aac2f8cb2c6c3944618d6c"}	https://toutiao.io/k/sf65q0v	2020-08-29 19:10:09	[推荐] 程序日志级别规范	16ff0f103eb2e463cce00199bcb4e03915d60b4f	\N	f	2020-08-26 02:10:00	2020-09-09 14:10:11.519746	0			'推荐':1,3 '程序日志级别规范':2,4	zh	
613	Africa declared free of wild polio	{"ver":2,"uid":1,"hash":"SHA1:a7e70bb614684898312e8b4bfa079c388a173575"}	https://www.bbc.com/news/world-africa-53887947	2020-08-26 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24273602"> https://news.ycombinator.com/item?id=24273602 </a>	63a3482811998907faeb3a47975bebcd349111f2	\N	f	2020-08-26 00:10:00	2020-08-29 04:10:17.696071	0			'/item?id=24273602':10 'africa':1 'comment':7 'declar':2 'free':3 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24273602':8 'polio':6 'wild':5	zh	riffraff
630	使用 Go 进行日志分析并生成 Excel，再也不担心做日志分析了	{"ver":2,"uid":1,"hash":"SHA1:ee60785e2c0f40e675a2a8f9372337bfad98bfcb"}	https://toutiao.io/k/gero4fz	2020-08-26 06:10:09	使用 Go 进行日志分析并生成 Excel，再也不担心做日志分析了	b1499518a0a59e8addb7925ed7d0227b987e1f24	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.054692	0			'excel':4,9 'go':2,7 '使用':1,6 '再也不担心做日志分析了':5,10 '进行日志分析并生成':3,8	zh	
634	聊聊微服务（一）	{"ver":2,"uid":1,"hash":"SHA1:4068db4bb5b6d60ee0d8013415c52a39bb5aaa67"}	https://toutiao.io/k/wpzmp75	2020-08-26 02:10:08	聊聊微服务（一）	b0bb8e0b1f1f01e34f64da54d512072cfb202d94	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.052587	0			'一':2,4 '聊聊微服务':1,3	zh	
379	Docker 服务禁止被列入美国实体名单的国家、企业使用	{"ver":2,"uid":1,"hash":"SHA1:1706d22781ab810d0b92e9977b8a013c653a09f5"}	https://toutiao.io/k/kttzpj0	2020-08-18 07:10:09	Docker 服务禁止被列入美国实体名单的国家、企业使用	58f3af332da4416364a3f5678544c9e3510240e0	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.871664	0			'docker':1,4 '企业使用':3,6 '服务禁止被列入美国实体名单的国家':2,5	zh	
377	了不起的 IoC 与 DI	{"ver":2,"uid":1,"hash":"SHA1:f049d26509c5aa00eff2057c2ffee41afced2a12"}	https://toutiao.io/k/cksymai	2020-08-18 07:10:09	了不起的 IoC 与 DI	000520bf02653dc5cc8929181efbab6caccb39f3	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.874148	0			'di':4,8 'ioc':2,6 '与':3,7 '了不起的':1,5	zh	
571	Lattice学习笔记08：SIS OWF的应用	{"ver":2,"uid":1,"hash":"SHA1:c74a4d7cdf58dd89c099867015cb18cae1e803b3"}	http://blog.higashi.tech/2020/08/01/lattice_08.html	2020-08-01 07:00:00	<h1 id="lattice学习笔记08sis-owf的应用">Lattice学习笔记08：SIS OWF的应用</h1>\n\n<p>到这儿，和SIS有关的内容就了解的差不多了。最后一篇来讲讲SIS OWF的实际应用。</p>\n\n<h3 id="sis的压缩属性与crhf">SIS的压缩属性与CRHF</h3>\n\n<p>首先我们看SIS OWF的结构：</p>\n\n\\[\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}, \\mathbf{x} \\in \\{0,1\\}^m, f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q\\]\n\n<p>因为Ajtai给出的安全定义——即\\(m &gt; n \\log{q}\\)，这也就是说我们原来有\\(m\\) bits的信息量，我们等于是把它压缩到了\\(n\\)个\\(q\\)模中的数字，即\\(n \\log{q}\\)个bits的信息量。这也正好符合了SIS OWF满射（surjective）的特性，输入空间比输出空间大得多。</p>\n\n<p>基于这一压缩的特性，我们很自然的就可以用SIS OWF来做一个Collision Resistant Hash Function。具体的CR和单向性我们之前也讨论过了。为了巩固知识，我们再来推一边。</p>\n\n<p>首先，SIS OWF的单向性不用多说，因为SIS是一个公认的格中难题，如果我们可以逆向计算SIS的话，那也就代表我们可以解决格中的SIVP问题。</p>\n\n<p>接着，我们需要证明如果SIS OWF是单向的，那么它也是Collision Resistant的。这个证明也不难，我们反过来推，如果我们可以找到SIS OWF的碰撞，那么我们就可以破解它的单向性。</p>\n\n<p>假如给定一个\\(\\mathbf{A, y}\\)，我们想要找到一个\\(\\mathbf{x}\\)使得：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{y}\\]\n\n<p>那么，我们首先可以在矩阵\\(\\mathbf{A}\\)的任意一个column中（假设是第\\(i\\)列，即\\(\\mathbf{a}_i\\)）加上\\(\\mathbf{y}\\)的值，构成\\(\\mathbf{A}'\\)。注意因为\\(\\mathbf{A}\\)是一个随机的矩阵，所以就算某一列加上了\\(\\mathbf{y}\\)，这个矩阵仍然还是随机的。</p>\n\n<p>这个时候，我们可以尝试找到\\(f_\\mathbf{A}'(\\cdot)\\)的碰撞，即一组\\(\\mathbf{x, x'}\\)：</p>\n\n\\[\\mathbf{A'x = A'x'}\\]\n\n<p>得到了碰撞之后，我们检查\\(\\mathbf{x, x'}\\)的第\\(i\\)位是否不同。如果\\(x_i' = 1, x_i = 0\\)，那么我们就可以得到：</p>\n\n\\[\\mathbf{A}(\\mathbf{x} - \\mathbf{x}') = \\mathbf{y}\\]\n\n<p>这里\\((\\mathbf{x - x'})\\)的值也就是前面SIS OWF的解了。具体的原理也很简单，因为如果\\(x_i = 0\\)，那么代表\\(\\mathbf{A'x}\\)并不会用到我们修改过的\\(\\mathbf{a}_i\\)这一列，这也就代表\\(\\mathbf{A'x} = \\mathbf{Ax}\\)。同理，因为\\(x_i'=1\\)，所以\\(\\mathbf{A'x'} = \\mathbf{Ax'} + \\mathbf{y}\\)。我们把两边相减，就能得到我们原来的\\(\\mathbf{y}\\)了。</p>\n\n<h3 id="sis的输出随机分布与承诺">SIS的输出随机分布与承诺</h3>\n\n<p>SIS OWF不仅是单向且CR的，而且它的输出也是呈随机分布的。这一点我们可以用Leftover Hash Lemma来进行归纳。</p>\n\n<p>LHL指出，如果一个函数具有Pairwise Independence，并且输出空间小于输入空间（压缩），那么这个函数的输出就为随机分布。</p>\n\n<p>首先来看Pairwise Independence这一点，它的定义就是，如果任意固定两个输入\\(\\mathbf{x}_1, \\mathbf{x}_2\\)，然后我们随机选择一个SIS问题\\(\\mathbf{A}\\)，如果\\(f_\\mathbf{A}(\\mathbf{x}_1), f_\\mathbf{A}(\\mathbf{x}_2)\\)这两个SIS OWF的输出分布是独立的，那么这就代表这个函数是成对独立的（Pairwise Independent）。</p>\n\n<p>当满足随机分布的条件之后，那么我们就可以把\\(f_\\mathbf{A}\\)的输出看做一个随机分布的向量：</p>\n\n\\[f_\\mathbf{A} \\approx U(\\mathbb{Z}_q^n)\\]\n\n<p>基于这一特性，我们就可以构建一个<strong>承诺（Commitment）</strong>系统。一方可以生成一段信息\\(m\\)的承诺\\(C\\)，然后把这个承诺发送给另一方。承诺的本身并不能暴露\\(m\\)的值，即需要满足hiding的属性。稍后，承诺方可以公布一段字串来“打开”这个承诺，随后另一方就可以验证这个承诺的确是从信息\\(m\\)构造而来的。一个承诺打开的方法应该只能有一种，即需要满足binding的属性。</p>\n\n<p>我们基于SIS OWF来尝试构建一个承诺系统：</p>\n\n<ol>\n  <li>首先，我们选择两个随机的SIS问题矩阵\\(\\mathbf{A}_1, \\mathbf{A}_2\\)。</li>\n  <li>假如我们要承诺信息\\(\\mathbf{m} \\in \\{0,1\\}^m\\)，那我们随机选择一个向量\\(\\mathbf{r} \\in \\{0,1\\}^m\\)，然后我们输出承诺\\(C(\\mathbf{m, r}) = f_{[\\mathbf{A}_1, \\mathbf{A}_2]}(\\mathbf{m, r}) = \\mathbf{A}_1 \\mathbf{m} + \\mathbf{A}_2 \\mathbf{r}\\)。</li>\n  <li>注意到这里因为\\(\\mathbf{A}_2, \\mathbf{r}\\)都是随机生成的，所以基于SIS OWF的随机分布特性，这等于是在我们原本的\\(f_{\\mathbf{A}_1}(\\mathbf{m})\\)上叠加了一层随机的One-Time Pad，所以整体承诺也是随机分布的。</li>\n  <li>同样，这个承诺也是binding的，因为如果我们能够找到一对不同的\\(\\mathbf{m', r'}\\)并且可以得到同样的承诺的话，那就等于是我们找到了\\(f_{[\\mathbf{A}_1, \\mathbf{A}_2]}\\)的一对碰撞，这我们已经证明了是不可能的。</li>\n</ol>\n\n<h3 id="sis的线性同态特性与数字签名">SIS的线性同态特性与数字签名</h3>\n\n<p>因为SIS OWF其实就是一个线性组合的表达式，所以整个function其实是线性同态的：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}_1) + f_\\mathbf{A}(\\mathbf{x}_2) = f_\\mathbf{A}(\\mathbf{x}_1 + \\mathbf{x}_2)\\]\n\n<p>这里有一点不太完美的地方，即\\(f_\\mathbf{A}\\)需要一个norm比较小的输入。然而如果我们把两个短向量相加，得到的并不一定是短向量。这也就是说，这里的加法运算并不是封闭的（not closed under addition）。这不影响我们的应用。</p>\n\n<p>SIS OWF其实还包含了另一组同态，即密钥同态：</p>\n\n\\[f_{\\mathbf{A}_1}(\\mathbf{x}) + f_{\\mathbf{A}_2}(\\mathbf{x}) = f_{\\mathbf{A}_1 + \\mathbf{A}_2}(\\mathbf{x})\\]\n\n<p>基于第一种输入空间同态的特性，我们可以构造出一个数字签名系统。一个签名系统一般分为三个算法：</p>\n\n<ol>\n  <li>\\(KeyGen \\rightarrow (sk, pk)\\)，即密钥生成，生成用于签名和验证的私钥与公钥。</li>\n  <li>\\(Sign(sk, m) \\rightarrow \\sigma\\)，签名算法，通过私钥创造出签名。</li>\n  <li>\\(Verify(pk, m, \\sigma) \\rightarrow 1/0\\)，验证算法，通过公钥来验证签名是否正确。</li>\n</ol>\n\n<p>为了构建这一系统，首先需要把SIS OWF的输入空间从一个向量\\(\\mathbf{x}\\)拓展成一个矩阵\\(\\mathbf{X}\\)：</p>\n\n\\[\\mathbf{X} = [\\mathbf{x}_1, \\dots, \\mathbf{x}_l]\\\\\nf_\\mathbf{A}(\\mathbf{X}) = [f_\\mathbf{A}(\\mathbf{x}_1), \\dots, f_\\mathbf{A}(\\mathbf{x}_l)] = \\mathbf{AX} \\text{ mod }q\\]\n\n<p>在密钥生成阶段，我们只需要随机生成SIS的问题矩阵\\(\\mathbf{A}\\)并输出。然后我们选定一个随机的短矩阵和短向量\\((\\mathbf{X, x})\\)作为私钥，并且选定\\((\\mathbf{Y} = f_\\mathbf{A}(\\mathbf{X}), \\mathbf{y} = f_\\mathbf{A}(\\mathbf{x}))\\)，即私钥在SIS OWF下运算得到的结果作为公钥。</p>\n\n<p>如果要签署一个消息\\(\\mathbf{m}\\)的话，那么就计算\\(\\mathbf{Xm + x}\\)，并且输出为签名。</p>\n\n<p>随后验证的过程也很简单，只需要计算：</p>\n\n\\[f_\\mathbf{A}(\\sigma) = f_\\mathbf{A}(\\mathbf{Xm + x}) = f_\\mathbf{A}(\\mathbf{X})\\mathbf{m} + f_\\mathbf{A}(\\mathbf{x}) \\stackrel{?}{=} \\mathbf{Ym + y}\\]\n\n<p>这里SIS OWF的同态特性就很完美的帮助我们验证了这一签名的正确性。至于安全性的话，一方面单独只看到一个\\(\\mathbf{Xm + x}\\)是无法推算出\\(\\mathbf{X, x}\\)的值的，所以这个签名是One-Time Secure（单次安全）的啦。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	562b38319cbb9ba8b49fdfcf45164e985fb67526	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.159126	0			'0':26,160,180,309,316 '1':27,157,200,233,246,301,310,317,327,336,357,376,391,403,428,440,482,497 '1/0':467 '2':236,252,304,330,341,347,379,397,406,434,443 'a':15,31,90,98,106,113,121,124,134,142,144,163,183,187,192,203,239,243,249,262,266,300,303,326,329,335,340,346,356,375,378,388,394,400,411,427,433,439,442,489,494,501,513,525,532,550,554,560,567 'addition':420 'approx':267 'at':606 'ax':35,195,206,506 'bits的信息量':47 'bootcamp':611 'c':280,320 'cdot':135 'closed':418 'commitment':275 'contents':594 'credits':592 'daniele':602 'dots':483,498 'f':29,96,132,241,247,260,264,324,354,373,386,392,398,409,425,431,437,487,492,499,523,530,548,552,558,565 'from':600 'function':68 'hash':67,219 'i':109,114,152,156,159,179,188,199 'in':16,25,308,315 'independence':223 'independence这一点':228 'independent':257 'institute':609 'is':598 'keygen':449 'l':486,504 'lattice':610 'lattice学习笔记08':1,4 'lecture':605 'lemma来进行归纳':220 'lhl指出':221 'log':43,55 'm':22,28,41,46,278,283,291,307,311,318,322,332,338,359,369,457,464,539,564 'mathbb':17,269 'mathbf':14,23,30,32,34,89,93,97,99,101,105,112,116,120,123,127,133,138,141,148,162,164,166,168,171,182,186,191,194,202,205,207,211,231,234,238,242,244,248,250,261,265,299,302,306,313,321,325,328,331,334,337,339,342,345,348,355,358,368,374,377,387,389,393,395,399,401,404,410,426,429,432,435,438,441,444,473,476,478,480,484,488,490,493,495,500,502,505,512,516,521,524,526,528,531,533,538,542,549,553,555,559,561,563,566,568,571,578,582 'micciancio':603 'mod':37,508 'n':20,42,49,54,272 'not':417 'of':595 'owf下运算得到的结果作为公钥':536 'owf不仅是单向且cr的':216 'owf其实就是一个线性组合的表达式':384 'owf其实还包含了另一组同态':423 'owf是单向的':80 'owf来做一个collision':65 'owf来尝试构建一个承诺系统':296 'owf满射':59 'owf的单向性不用多说':74 'owf的同态特性就很完美的帮助我们验证了这一签名的正确性':575 'owf的实际应用':10 'owf的应用':3,6 'owf的碰撞':86 'owf的结构':13 'owf的解了':175 'owf的输入空间从一个向量':472 'owf的输出分布是独立的':254 'owf的随机分布特性':352 'pad':363 'pairwise':256 'pk':452,463 'post':597 'prof':601 'q':19,38,44,51,56,271,509 'r':314,323,333,343,349,370 'resistant':66 'resistant的':82 'rightarrow':450,458,466 's':604,608 'secure':589 'sigma':459,465,551 'sign':455 'simon':607 'sis':2,5,73,215,422 'sis的压缩属性与crhf':11 'sis的线性同态特性与数字签名':382 'sis的输出随机分布与承诺':214 'sk':451,456 'stackrel':570 'summarized':599 'surjective':60 'text':36,507 'the':593 'this':596 'time':362,588 'times':21 'u':268 'under':419 'verify':462 'x':24,33,94,100,139,140,143,145,149,150,155,158,165,167,172,173,178,184,193,198,204,232,235,245,251,390,396,402,405,430,436,445,474,477,479,481,485,491,496,503,517,518,527,534,544,557,562,569,580,583,584 'xm':543,556,579 'y':91,102,117,128,169,208,212,522,529,573 'ym':572 'z':18,270 '一个承诺打开的方法应该只能有一种':293 '一个签名系统一般分为三个算法':448 '一方可以生成一段信息':277 '一方面单独只看到一个':577 '上叠加了一层随机的one':361 '上叠加了一层随机的one-time':360 '个':50 '个bits的信息量':57 '为了巩固知识':70 '为了构建这一系统':470 '了':213 '位是否不同':153 '作为私钥':519 '使得':95 '假如我们要承诺信息':305 '假如给定一个':88 '假设是第':108 '具体的cr和单向性我们之前也讨论过了':69 '具体的原理也很简单':176 '列':110 '到这儿':7 '加上':115 '单次安全':590 '即':40,53,111,408 '即一组':137 '即密钥同态':424 '即密钥生成':453 '即私钥在sis':535 '即需要满足binding的属性':294 '即需要满足hiding的属性':285 '压缩':225 '只需要计算':547 '同样':365 '同理':196 '和sis有关的内容就了解的差不多了':8 '因为':197 '因为ajtai给出的安全定义':39 '因为sis':383 '因为sis是一个公认的格中难题':75 '因为如果':177 '因为如果我们能够找到一对不同的':367 '在密钥生成阶段':510 '基于第一种输入空间同态的特性':446 '基于这一压缩的特性':63 '基于这一特性':273 '如果':154,240 '如果一个函数具有pairwise':222 '如果任意固定两个输入':230 '如果我们可以找到sis':85 '如果我们可以逆向计算sis的话':76 '如果要签署一个消息':537 '它的定义就是':229 '就能得到我们原来的':210 '并不会用到我们修改过的':185 '并且可以得到同样的承诺的话':371 '并且输出为签名':545 '并且输出空间小于输入空间':224 '并且选定':520 '并输出':514 '当满足随机分布的条件之后':258 '得到了碰撞之后':146 '得到的并不一定是短向量':414 '我们再来推一边':71 '我们反过来推':84 '我们只需要随机生成sis的问题矩阵':511 '我们可以尝试找到':131 '我们可以构造出一个数字签名系统':447 '我们基于sis':295 '我们就可以构建一个承诺':274 '我们很自然的就可以用sis':64 '我们想要找到一个':92 '我们把两边相减':209 '我们检查':147 '我们等于是把它压缩到了':48 '我们选择两个随机的sis问题矩阵':298 '我们需要证明如果sis':79 '我们首先可以在矩阵':104 '所以':201 '所以基于sis':351 '所以就算某一列加上了':126 '所以整个function其实是线性同态的':385 '所以整体承诺也是随机分布的':364 '所以这个签名是one':587 '所以这个签名是one-time':586 '打开':288 '承诺方可以公布一段字串来':287 '承诺的本身并不能暴露':282 '拓展成一个矩阵':475 '接着':78 '是一个随机的矩阵':125 '是无法推算出':581 '最后一篇来讲讲sis':9 '构成':119 '构造而来的':292 '模中的数字':52 '注意到这里因为':344 '注意因为':122 '然后我们输出承诺':319 '然后我们选定一个随机的短矩阵和短向量':515 '然后我们随机选择一个sis问题':237 '然后把这个承诺发送给另一方':281 '然而如果我们把两个短向量相加':413 '生成用于签名和验证的私钥与公钥':454 '的一对碰撞':380 '的任意一个column中':107 '的值':118,284 '的值也就是前面sis':174 '的值的':585 '的啦':591 '的承诺':279 '的特性':61 '的碰撞':136 '的第':151 '的话':540 '的输出看做一个随机分布的向量':263 '稍后':286 '签名算法':460 '系统':276 '而且它的输出也是呈随机分布的':217 '至于安全性的话':576 '输入空间比输出空间大得多':62 '这一列':189 '这一点我们可以用leftover':218 '这不影响我们的应用':421 '这两个sis':253 '这个承诺':289 '这个承诺也是binding的':366 '这个时候':130 '这个矩阵仍然还是随机的':129 '这个证明也不难':83 '这也就代表':190 '这也就是说':415 '这也就是说我们原来有':45 '这也正好符合了sis':58 '这我们已经证明了是不可能的':381 '这等于是在我们原本的':353 '这里':170 '这里sis':574 '这里有一点不太完美的地方':407 '这里的加法运算并不是封闭的':416 '通过公钥来验证签名是否正确':469 '通过私钥创造出签名':461 '那么':103 '那么代表':181 '那么它也是collision':81 '那么就计算':541 '那么我们就可以得到':161 '那么我们就可以把':259 '那么我们就可以破解它的单向性':87 '那么这个函数的输出就为随机分布':226 '那么这就代表这个函数是成对独立的':255 '那也就代表我们可以解决格中的sivp问题':77 '那就等于是我们找到了':372 '那我们随机选择一个向量':312 '都是随机生成的':350 '随后另一方就可以验证这个承诺的确是从信息':290 '随后验证的过程也很简单':546 '需要一个norm比较小的输入':412 '首先':72,297 '首先我们看sis':12 '首先来看pairwise':227 '首先需要把sis':471 '验证算法':468		
633	程序员过关斩将：解决分布式 session 问题	{"ver":2,"uid":1,"hash":"SHA1:aa29af756987b0d72885d95c036953bf0aa1fc2b"}	https://toutiao.io/k/3tciz0a	2020-08-26 02:10:08	程序员过关斩将：解决分布式 session 问题	71a4a620abe499c9ced30d7f2e7ab87cf637e6fd	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.056602	0			'session':3,7 '程序员过关斩将':1,5 '解决分布式':2,6 '问题':4,8	zh	
636	程序员进阶系列：你真的懂 HelloWorld 吗？	{"ver":2,"uid":1,"hash":"SHA1:66592b6380b86f1fa6a20f0c7b3faf4a321cbbb2"}	https://toutiao.io/k/t2egj2p	2020-08-26 02:10:08	程序员进阶系列：你真的懂 HelloWorld 吗？	734cd2bd14842b7e8acd0aac726935c26dcdd260	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.062688	0			'helloworld':3,7 '你真的懂':2,6 '吗':4,8 '程序员进阶系列':1,5	zh	
632	[译] 一个思路，如何尝试创建自己的 CSS 框架？	{"ver":2,"uid":1,"hash":"SHA1:b1a61ba220fddd61efc3ac1d36e9ed795c0823d3"}	https://toutiao.io/k/8yhw39n	2020-08-26 02:10:08	[译] 一个思路，如何尝试创建自己的 CSS 框架？	95c69694136deebc0ab32fc813721990d3e2af5e	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.058442	0			'css':4,9 '一个思路':2,7 '如何尝试创建自己的':3,8 '框架':5,10 '译':1,6	zh	
378	Zabbix 5.0 LTS 新功能一览	{"ver":2,"uid":1,"hash":"SHA1:a7889cfc2be0e2d46e957dc08a32b28ea9a70cc3"}	https://toutiao.io/k/go3ezt0	2020-08-18 07:10:09	Zabbix 5.0 LTS 新功能一览	abcab3ec2807364e5576ab94e03ba2491e5ab3e1	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.876512	0			'5.0':2,6 'lts':3,7 'zabbix':1,5 '新功能一览':4,8	zh	
380	TypeScript 类型系统	{"ver":2,"uid":1,"hash":"SHA1:3833b091ed4f7119c670eddd4af7d7c37987e1ac"}	https://toutiao.io/k/q9sxre5	2020-08-18 07:10:09	TypeScript 类型系统	22a635d779f76f9dab553147bcad20992ead5414	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.878697	0			'typescript':1,3 '类型系统':2,4	zh	
381	面试官：对象可能会迟到，但它永远不会缺席	{"ver":2,"uid":1,"hash":"SHA1:37568ec6f614d184d58813bda65f928e47dd4452"}	https://toutiao.io/k/vg32co3	2020-08-18 07:10:09	面试官：对象可能会迟到，但它永远不会缺席	821b05bc8bc6f6df9e5ebdf3980e05521cffd823	\N	f	2020-08-18 07:10:00	2020-08-18 23:10:08.880964	0			'但它永远不会缺席':3,6 '对象可能会迟到':2,5 '面试官':1,4	zh	
572	Lattice学习笔记07：SIS的效率与RingSIS	{"ver":2,"uid":1,"hash":"SHA1:e96530c987fc79ec44fd0f543e747a3af2f3e987"}	http://blog.higashi.tech/2020/07/26/lattice_07.html	2020-07-26 07:00:00	<h3 id="ajtai-owf的参数大小">Ajtai OWF的参数大小</h3>\n\n<p>讨论完了Ajtai OWF（SIS）的安全性之后，现在问题来了：因为SIS问题的定义需要一系列的参数\\(m, n, q\\)，如何定义这些参数，才可以满足之前的安全性证明呢？</p>\n\n<p>Ajtai在96年的paper中指出来，只要\\(m, n, q\\)足够大（large enough），那么\\(f_\\mathbf{A}\\)就是单向/collision resistant的。对于\\(m, n\\)的值我们不去变它，因为这个决定了矩阵的维度。但是\\(q\\)这个模组的大小，其实对于Ajtai OWF的安全性来说，差异是不会有太大的，所以大家的目光都放在如何尽可能的压缩\\(q\\)的大小。在这篇paper中，Ajtai要求\\(q = n^{O(1)}\\)，才可以满足安全性证明。</p>\n\n<p>随后，在MR04这一篇paper中，Micciancio与Regev两个人进一步优化了这一证明，使得\\(q \\approx n^{2.5}\\)的情况下可以满足安全性。</p>\n\n<p>在GPV08中，Gentry，Peikert，Vaikuntanathan三个大佬又对证明做了一次优化，使得\\(q \\approx n\\)的情况下仍然安全。</p>\n\n<p>最后，在MP13中，Micciancio与Peikert把\\(q\\)的大小压到了更小。在paper中，他们指出只要\\(q \\ge \\sqrt{n}\\)，那么Ajtai OWF就是安全的。原文中的定理是这样的：如果我们可以破解\\(\\sqrt{n} &lt; q &lt; n\\)情况下的\\(f_\\mathbf{A}\\)，那么我们就可以把这个破解算法当作一个blackbox，然后逐步破解更大的\\(q\\)的Ajtai OWF，即模组为\\(q' = q^c : c &gt; 1\\)。</p>\n\n<h3 id="压缩sis中的模组q">压缩SIS中的模组\\(q\\)</h3>\n\n<p>接下来，我们可以看一下，如何通过反证法来保证\\(q &gt; \\sqrt{n}\\)的情况下，Ajtai OWF（即SIS）是安全的。</p>\n\n<p>首先，为了让构造和证明变得简单，我们假设OWF \\(f_\\mathbf{A}(\\mathbf{x})\\)只接受二进制的短向量输入，即\\(\\mathbf{x} \\in \\{0, 1\\}^m\\)。然后我们假设我们拥有一个很强大的算法，可以轻易破解在固定参数的\\(n, m, q\\)下的SIS问题\\(A'(\\mathbb{Z}^{n \\times m}_q)\\)。这个时候，我们就可以用这个算法作为一个黑盒（blackbox），来构造出一个新的算法，来破解\\(q^2\\)模组下的SIS问题\\(A(\\mathbb{Z}^{n \\times m^2}_{q^2})\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200728014045523.png" alt="image-20200728014045523" /></p>\n\n<p>首先，我们拿到一个想要解决的SIS实例\\(A(\\mathbb{Z}^{n \\times m^2}_{q^2})\\)。然后我们把它平均的横向切割成\\(m\\)份。</p>\n\n<p>注意这个时候拿到的矩阵\\(\\mathbf{A}_1, \\dots, \\mathbf{A}_m\\)都是基于\\(q^2\\)的模组的，我们需要想办法把它转化为\\(q\\)模组的。实现的方法其实不难，我们只需要把每一个\\(q^2\\)模组下的值\\(c\\)拆分成\\(c' + q \\cdot c''\\)就可以确保这些值都在\\(q\\)的模组内了。具体来说，我们就可以把一个矩阵\\(\\mathbf{A}_i \\in \\mathbb{Z}_{q^2}^{n \\times m}\\)拆分成\\(\\mathbf{A}_i' + q\\mathbf{A}_i''\\)。</p>\n\n<p>这个时候，我们可以把\\(m\\)个矩阵\\(\\mathbf{A}_i'\\)放到我们之前的黑盒中，得到\\(\\mathbf{z}_i\\)并且满足：</p>\n\n\\[\\mathbf{A}_i' \\mathbf{z}_i = 0 \\text{ mod }q\\\\\n\\mathbf{z}_i \\in \\{0, \\pm1\\}\\]\n\n<p>这样一来，我们可以把得到的\\(m\\)个解\\(\\mathbf{z}_i\\)和另外的矩阵\\(\\mathbf{A}_i''\\)结合起来，组成一个新的向量\\(\\mathbf{b}_i\\)：</p>\n\n\\[\\mathbf{b}_i = \\frac{1}{q}(\\mathbf{A}_i' + q\\mathbf{A}_i'')\\mathbf{z}_i = \\mathbf{A}_i''\\mathbf{z}_i \\in \\mathbb{Z}_q^n\\]\n\n<p>我们把这些向量拼接在一起，组合成一个新的SIS问题矩阵\\(\\mathbf{B}\\)：</p>\n\n\\[\\mathbf{B} = [\\mathbf{b}_1, \\dots, \\mathbf{b}_m]\\]\n\n<p>随后使用我们的黑盒，再次找到SIS问题的解\\(\\mathbf{w}\\)，即满足\\(\\mathbf{B} \\mathbf{w} = 0 \\text{ mod }q\\)。</p>\n\n<p>当我们得到了\\(\\mathbf{z}_i\\)和\\(\\mathbf{w}\\)之后，目标SIS问题的解就是这两个向量之间的tensor product，即：</p>\n\n\\[(\\mathbf{w} \\otimes \\mathbf{z}_*) = (\\mathbf{w}_1 \\cdot \\mathbf{z}_1, \\dots, \\mathbf{w}_m \\cdot \\mathbf{z}_m) \\in \\{0, \\pm1\\}^{m^2}\\]\n\n<p>具体的正确性证明在这里就不多说了。不过意会到这一证明的精髓之后，我们会发现其实\\(q\\)的大小可以被压缩到很小很小，但是再往下的lower bound就需要更复杂的证明过程。</p>\n\n<p>如果我们把\\(q\\)压缩到最小，即二进制\\(q = 2\\)，那么这个情况下的LWE/SIS问题就被称作LPN问题（Learning Parity With Noise）。LPN问题也被认为是一个难题，但是现在似乎还没有很好的证明。</p>\n\n<h3 id="ajtai-owf的运行效率">Ajtai OWF的运行效率</h3>\n\n<p>接下来我们可以看一看SIS系统的运行效率。</p>\n\n<p><img src="/assets/images/lattice/image-20200728020351945.png" alt="image-20200728020351945" /></p>\n\n<p>我们知道，验证一个SIS问题需要两部分：</p>\n\n<ol>\n  <li>第一部分是SIS的问题矩阵\\(\\mathbf{A}\\)，大小由\\(n, m, q\\)来决定。如果在Ajtai原版的假设中，\\(q = n^{O(1)}, m = O(n \\log{n}) &gt; n \\log_2{q}\\)。在这里，我们可以假设\\(n = 64, q = 2^8, m = 1024\\)。</li>\n  <li>第二部分就是我们的OWF输入向量\\(\\mathbf{x}\\)，如果在二进制短向量的假设下，那么输入的就是\\(m\\)个bits。</li>\n</ol>\n\n<p>我们观察发现\\(f_\\mathbf{A}\\)实质上是一个把1024 bits的输入空间映射到512 bits的输出空间的一个压缩函数。（这里512由\\(n \\times \\log_2(q) = 512\\)计算而来。）</p>\n\n<p>在OWF的使用场景中，矩阵\\(\\mathbf{A}\\)则是我们OWF的key，这也就是说我们的key的大小就是\\(nm \\log{q} = 2^6 \\cdot 2^{10} \\cdot 2^3 = 2^{19} = 64 \\text{ KB}\\)。这对于一个小的OWF来说，key的大小有点太大了。同样，如果我们计算OWF的时候，矩阵相乘需要做\\(nm = 2^{16}\\)次乘法，这也是非常巨大的一个数字。</p>\n\n<p>这就是为什么Lattice的诟病一直是效率低的原因。因为我们使用了一个二维的矩阵，所以我们做任何矩阵相乘运算的时候，复杂度一直都是\\(O(n^2)\\)的。</p>\n\n<p>那么有没有什么方法可以让我们低于这个复杂度，并且压缩密钥的大小呢？</p>\n\n<h3 id="消减密钥矩阵大小">消减密钥矩阵大小</h3>\n\n<p>如果之前存储与计算的瓶颈一直都在矩阵的大小上面，那么有没有办法消减矩阵的大小呢？</p>\n\n<p>有一个很好的idea就是，如果我们并不全部随机生成整个矩阵，而是随机生成一部分，另一部分用一定的伪随机生成或者线性变换来生成，就可以大大的缩小密钥的大小了（不需要存储整个矩阵）。同时，如果根据短密钥延伸出来的大矩阵拥有某些数学特性，说不定我们也不需要通过矩阵相乘的办法来计算SIS OWF的输出。</p>\n\n<p>基于这个idea，可以构想出一个最简单的构造：我们就只需要随机生成\\(\\mathbf{A}\\)中的一行（甚至更短），然后把这一行作为一个PRG的种子，随机的生成整个OWF的密钥\\(\\mathbf{A}\\)。这样的话，我们的存储成本就变得很低，但是计算成本还是一样的，甚至会因为PRG的运算变得更差。这是因为PRG生成的数值都是近似随机的，没有任何数字之间的联系。所以我们对于一个随机生成的矩阵进行运算的话，只能通过矩阵相乘，即\\(O(n^2)\\)的方法来完成。</p>\n\n<p>第二个比较有意思的idea，就是我们可以随机生成一个向量\\(\\mathbf{a}^{(i)}\\)，然后通过不停的旋转这一行向量的值，逐渐构成一个小的循环密钥矩阵\\(\\mathbf{A}^{(i)}\\)：</p>\n\n\\[\\mathbf{a}^{(i)} = [\\mathbf{a}_1^{(i)}, \\mathbf{a}_2^{(i)}, \\dots, \\mathbf{a}_n^{(i)}]\\\\\n\\mathbf{A}^{(i)} = \\begin{bmatrix}\n\\mathbf{a}_1^{(i)} &amp; \\mathbf{a}_n^{(i)} &amp; \\cdots &amp; \\mathbf{a}_2^{(i)}\\\\\n\\mathbf{a}_2^{(i)} &amp; \\mathbf{a}_1^{(i)} &amp; \\cdots &amp; \\mathbf{a}_3^{(i)}\\\\\n\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\\n\\mathbf{a}_n^{(i)} &amp; \\mathbf{a}_{n-1}^{(i)} &amp; \\cdots &amp; \\mathbf{a}_1^{(i)}\\\\\n\\end{bmatrix}\\]\n\n<p>当我们生成这么一个循环密钥矩阵之后，我们如法炮制，一共生成\\(m/n\\)个矩阵，然后把它们横向拼接在一起，形成我们的密钥矩阵\\(\\mathbf{A}\\)：</p>\n\n\\[\\mathbf{A} = [\\mathbf{A}^{(1)} \\vert \\mathbf{A}^{(2)} \\vert \\dots \\vert \\mathbf{A}^{(m/n)}]\\]\n\n<p>这个系统在M02（Micciancio）中被第一次提出，并且指出如果\\(n, m, q\\)的维度选择合适的话，这样体系下的\\(f_\\mathbf{A}\\)是单向的。这一系统的构造也和1998年提出的很有名的NTRU加密系统很相似。</p>\n\n<p>我们构造出的矩阵\\(\\mathbf{A}\\)就是一堆小的循环矩阵拼接而成的，虽然这种形式下面构造的OWF的单向性可以被轻易证明，但是比较难的另一个安全属性是collision resistance。为了证明这一点，这个idea的核心思路就是：我们通过改变循环矩阵的生成方法，进而确保\\(\\Lambda_q^\\perp(\\mathbf{A})\\)中的SVP问题很难解决，然后证明\\(f_\\mathbf{A}\\)是collision resistant的。</p>\n\n<h3 id="循环矩阵的collision-resistance">循环矩阵的Collision Resistance</h3>\n\n<p>首先，我们来看一看我们刚刚提出来的循环矩阵的构造，能否满足CR这一要求。</p>\n\n<p><img src="/assets/images/lattice/image-20200728023657283.png" alt="image-20200728023657283" /></p>\n\n<p>举个例子，假设我们有上图这么一个循环矩阵结构下的SIS OWF的矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{4 \\times 16}\\)，并且给定了一组OWF的输入\\(\\mathbf{x} \\in \\mathbb{Z}_q^{16}\\)。我们能否找到这个输入的另一组collision，即找到另一个\\(\\mathbf{x}' \\in \\mathbb{Z}_q^{16} \\ne \\mathbf{x}\\)，使得\\(f_\\mathbf{A}(\\mathbf{x}') = f_\\mathbf{A}(\\mathbf{x})\\)呢？</p>\n\n<p>乍一看，这么大一个矩阵，似乎没有什么头绪。如果我们直接去找这个矩阵的inverse，那么也要花费很长的时间。正确的方法是利用SIS OWF的线性组合特性，即\\(f_\\mathbf{A}(\\mathbf{x} + \\mathbf{y}) = f_\\mathbf{A}(\\mathbf{x}) + f_\\mathbf{A}(\\mathbf{y})\\)。</p>\n\n<p>如果我们要找到另一个collision的话，我们只需要求解这个矩阵\\(\\mathbf{A}\\)的SIS问题的结果，即找到一个二进制短向量\\(\\mathbf{y}\\)，使得\\(\\mathbf{Ay} = 0 \\text{ mod }q\\)。然后我们就可以轻松的通过组合这个SIS的解和原本的输入的方式，得到另一个collision：\\(\\mathbf{x' = x + y}\\)。这里为了保证二进制短向量的特性，我们相加两个向量之后需要做一些求模的处理。</p>\n\n<p><img src="/assets/images/lattice/image-20200728153927703.png" alt="image-20200728153927703" /></p>\n\n<p>找到这一条路之后，接下来的问题就是求解SIS问题了，即找到一个二进制短向量\\(\\mathbf{y}\\)使得\\(\\mathbf{Ay} = 0 \\text{ mod }q\\)。我们可以观察一下，这4个小的旋转矩阵分别都是由四个独立的向量\\([1,4,3,8], [6,4,9,0], [2,6,4,5], [3,2,7,1]\\)组成的。因为这些旋转操作都是有规律的，我们会发现其实循环矩阵中每一列的值加起来都是相同的。这也就是说，如果我们让\\(\\mathbf{A}\\)乘以一个全是1的向量，我们就会得到四组参数相等的向量：</p>\n\n<p><img src="/assets/images/lattice/image-20200728154348965.png" alt="image-20200728154348965" /></p>\n\n<p>我们观察发现，如果我们全部乘以1的话，就可以得到\\(6, 9, 7, 3\\)这四个数字。现在的问题就变成了，我们能否找到一组\\(\\{0, \\pm1\\}\\)以内的参数赋值，使得这些参数乘以这四个数字加起来最后可以等于0呢？这有点像是一个算24点问题了。很简单我们就可以找到：</p>\n\n\\[1 \\times 6 -1 \\times 9 + 0 \\times 7 + 1 \\times 3 = 0\\]\n\n<p>这也就是说，我们SIS问题的解就是：</p>\n\n\\[\\mathbf{y} = \\begin{bmatrix}\n1&amp;1&amp;1&amp;1&amp;-1&amp;-1&amp;-1&amp;-1&amp;0&amp;0&amp;0&amp;0&amp;1&amp;1&amp;1&amp;1\n\\end{bmatrix}\\]\n\n<p>得到这个解向量之后，我们就可以在原本的输入\\(\\mathbf{x}\\)的基础上加上或者减去这个解向量，就可以非常简单的计算出任意多种collision啦。</p>\n\n<h3 id="循环矩阵到多项式">循环矩阵到多项式</h3>\n\n<p>为什么上面构造的循环矩阵的SIS问题这么简单呢？这是因为我们可以对这个矩阵做进一步的分解，即观察到他们每一列加起来的值都相等这一特性，把问题简化。</p>\n\n<p>为什么可以做这个简化呢？我们首先观察一下最左侧的循环矩阵：</p>\n\n\\[\\widetilde{\\mathbf{R}} =\\begin{bmatrix}\n1&amp;4&amp;3&amp;8\\\\\n8&amp;1&amp;4&amp;3\\\\\n3&amp;8&amp;1&amp;4\\\\\n4&amp;3&amp;8&amp;1\n\\end{bmatrix}\\]\n\n<p>我们的初始生成向量为\\([1,8,3,4]\\)，这也就是说，这个向量的第一个元素1被分配在了矩阵的正对角线上，然后后面的元素依次分配在对角线周围。我们其实可以用一个旋转矩阵\\(\\mathbf{X}\\)来表述这一变换的过程：</p>\n\n\\[\\mathbf{X} = \\begin{bmatrix}\n0&amp;0&amp;0&amp;1\\\\\n1&amp;0&amp;0&amp;0\\\\\n0&amp;1&amp;0&amp;0\\\\\n0&amp;0&amp;1&amp;0\n\\end{bmatrix}\\]\n\n<p>如果我们反复叠加这一旋转矩阵，就可以从1的位置旋转到8的位置，然后再旋转到3的位置，等等。这样一来，我们可以用一组线性组合来表示\\(\\widetilde{\\mathbf{R}}\\)：</p>\n\n\\[\\widetilde{\\mathbf{R}} = 1 \\cdot \\mathbf{I} + 8 \\cdot \\mathbf{X} + 3 \\cdot \\mathbf{X}^2 + 4 \\cdot \\mathbf{X}^3\\]\n\n<p>这其实就是基于旋转矩阵\\(\\mathbf{X}\\)的一组\\(n-1\\)阶的多项式！如果我们使用更加通用的表达方式的话，那就是：</p>\n\n\\[\\widetilde{\\mathbf{R}} = a_1 I_n + a_2X + \\dots + a_nX^{n-1}\\]\n\n<p>循环矩阵\\(\\widetilde{\\mathbf{R}}\\)可以被表述成\\(n-1\\)阶多项式的形式，并且这一结构与\\(\\mathbb{Z}[x]/(x^n-1)\\)的多项式环是同构（isomorphic）的。这也就是说，我们可以使用一组最多为\\(n-1\\)阶，每一项系数在\\(q\\)以内的多项式来代替我们的循环矩阵\\(\\widetilde{\\mathbf{R}}\\)。</p>\n\n<p>我们还注意到，当旋转的次数变得过多（超出了\\(n-1\\)阶）之后，旋转到最下侧的数字会回到最上面来。这一点我们可以在这个多项式环中的乘法上定义：</p>\n\n\\[x \\cdot x^i = \\begin{cases}\nx^{i+1} &amp; i &lt; n-1\\\\\n1 &amp; i = n-1\n\\end{cases}\\]\n\n<p>因为我们在\\(x^n -1\\)的环中，\\(x^n\\)比我们的环的大小\\(x^n-1\\)要大1，所以说\\(x^n = 1 \\text{ mod } (x^n - 1)\\)。</p>\n\n<p>当我们把\\(\\widetilde{\\mathbf{R}}\\)用多项式表达之后，我们就会发现，\\(x^n - 1\\)这一多项式，其实是很好约分的：</p>\n\n\\[x^n - 1 = (x-1) \\cdot (x^{n-1} + \\dots + 1)\\]\n\n<p>这就是为什么我们可以非常简单的找到SIS的解，因为我们可以很简单的找到这个多项式环中的0交界点。</p>\n\n<h3 id="多项式到ringsis">多项式到RingSIS</h3>\n\n<p>因为我们发现循环矩阵\\(\\widetilde{\\mathbf{R}}\\)可以很好的被多项式环代替，我们索性就把原本的SIS OWF的key矩阵变成\\(k = m / n\\)个多项式拼接在一起。同理，我们把OWF的输入矩阵也变成\\(k\\)个多项式：</p>\n\n\\[f_{\\mathbf{a}_1, \\dots, \\mathbf{a}_k}(\\mathbf{u}_1, \\dots, \\mathbf{u}_k) = \\sum_i \\mathbf{a}_i(X) \\cdot \\mathbf{u}_i(X) \\text{ mod } (X^n - 1)\\\\\n\\mathbf{a}_i, \\mathbf{u}_i \\in R = \\mathbb{Z}[X]/(X^n - 1)\\]\n\n<p>这样以来，我们就可以通过多项式相乘的方法来计算原本的循环矩阵版的SIS OWF了。随后得到的值也会是一样的，因为我们可以代入原本的旋转矩阵\\(\\mathbf{X}\\)为这里多项式中的取值\\(X\\)，然后等式全部成立。</p>\n\n<p>我们把这样的，通过多项式环中相乘（而不是矩阵相乘）的类似SIS问题，称之为RingSIS。</p>\n\n<p>RingSIS的好处是什么呢？首先，这和之前的循环矩阵的优势一样，我们只需要存储一组随机的向量（即多项式的参数赋值），就可以定义整个问题，这样的存储成本就很低。</p>\n\n<p>其次，多项式环中还有一个之前矩阵形式里不能实现的黑科技：多项式之间相乘可以通过FFT（快速傅立叶变换）来达到\\(\\tilde{O}(n)\\)的效率。比起矩阵相乘\\(O(n^2)\\)的效率来说，是质一般的飞跃。</p>\n\n<p>现在基于格的很多库都是基于多项式环来进行运算的，因为运算效率高，存储成本低。</p>\n\n<h3 id="更安全的多项式环">更安全的多项式环</h3>\n\n<p>在RingSIS中，我们可以任意选择想要的多项式环。因为我们之前发现了\\(X^n - 1\\)这个环很好约分，所以对应的OWF容易被找到collision，所以我们可以考虑，换一个更加安全的环。</p>\n\n<p>为了通俗的表达各种多项式环，我们一般都把RingSIS问题中的环用\\(\\mathbb{Z}[X]/p(X)\\)来表示，其中\\(p(X)\\)就是任意一个monic polynomial。</p>\n\n<p>如果\\(p(X)\\)不能被进一步约分，那么我们就不能用同样的方法来更快速的找到collision。这样的话我们就可以把不能约分的多项式环下的RingSIS问题的难度规约到理想格（ideal lattice）中的SVP问题上来了。</p>\n\n<p>一个比较简单的例子就是\\(\\mathbb{Z}[X]/(X^n + 1)\\)。这个环和之前的环一样，也包括了所有的\\(n-1\\)阶的多项式。唯一不一样的，是乘法的定义：</p>\n\n\\[x \\cdot x^i = \\begin{cases}\nx^{i+1} &amp; i &lt; n-1\\\\\n-1 &amp; i = n-1\n\\end{cases}\\]\n\n<p>在得到临界值\\(x^n\\)的时候，因为我们的环的大小就是\\(x^n + 1\\)，比\\(x^n\\)大1，所以我们可以用-1来表示。这样一来，和之前一样是一个Ring的结构，只是乘法的定义有所改变。</p>\n\n<p>在这种方式下，对应的循环矩阵\\(\\widetilde{\\mathbf{R}}\\)就是：</p>\n\n\\[\\widetilde{\\mathbf{R}} =\\begin{bmatrix}\n1&amp;-4&amp;-3&amp;-8\\\\\n8&amp;1&amp;-4&amp;-3\\\\\n3&amp;8&amp;1&amp;-4\\\\\n4&amp;3&amp;8&amp;1\n\\end{bmatrix}\\]\n\n<p>根据多项式的特性，只要\\(n = 2^k\\)，即2的幂，\\(X^n + 1\\)这一多项式是不能被约分成更小的式子的。所以这种构造下的RingSIS，或者循环矩阵拼接成的SIS OWF，就是单向并且Collision Resistant的啦。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	be73c27f5f2afa19f425beff9bb608d23b77c1fd	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.161789	0			'+1':1016,1227 '-1':588,813,833,834,835,836,952,969,976,984,991,1003,1019,1023,1029,1036,1062,1066,1215,1230,1231,1234 '-3':1268,1273 '-4':1267,1272,1277 '-8':1269 '/collision':29 '/p':1188 '/sis':375 '0':130,246,254,321,357,743,763,776,804,816,822,837,838,839,840,899,900,901,904,905,906,907,909,910,911,912,914 '1':50,103,131,180,276,307,343,347,400,535,553,570,593,610,769,784,810,819,829,830,831,832,841,842,843,844,865,870,875,880,884,902,903,908,913,929,960,1020,1041,1046,1055,1060,1068,1090,1097,1117,1131,1178,1211,1244,1266,1271,1276,1281,1292 '10':454 '1024':418 '16':470,674,682,691 '19':459 '1来表示':1251 '2':152,160,162,171,173,187,195,215,360,373,408,415,437,450,453,456,458,469,479,518,539,562,566,614,777,782,941,1166,1287 '2.5':59 '2x':964 '3':457,575,771,781,800,821,867,872,873,878,886,937,946,1274,1279 '4':672,770,774,779,866,871,876,877,887,942,1278 '5':780 '512':439 '6':451,773,778,797,812 '64':413,460 '7':783,799,818 '8':416,772,868,869,874,879,885,933,1270,1275,1280 '9':775,798,815 'a':27,92,122,139,154,165,179,183,209,221,225,232,241,265,279,283,289,390,429,444,500,506,523,528,531,534,538,543,547,552,556,561,565,569,574,582,586,592,605,607,609,613,619,632,637,650,655,667,698,703,717,724,729,735,791,959,963,966,1089,1093,1105,1119 'ajtai':3,113,383 'ajtai在96年的paper中指出来':16 'ajtai要求':46 'approx':57,67 'at':1313 'ay':742,762 'b':270,273,302,304,306,310,318 'begin':549,827,863,897,1012,1223,1264 'bits的输入空间映射到512':431 'bits的输出空间的一个压缩函数':432 'blackbox':148 'bmatrix':550,596,828,846,864,882,898,916,1265,1283 'bootcamp':1318 'bound就需要更复杂的证明过程':367 'c':101,102,197,199,202 'cases':1013,1025,1224,1236 'cdot':201,344,352,452,455,930,934,938,943,1009,1063,1108,1220 'cdots':559,572,590 'contents':1301 'credits':1299 'daniele':1309 'ddots':579 'dots':181,308,348,541,616,965,1067,1091,1098 'end':595,845,881,915,1024,1235,1282 'enough':23 'f':25,90,120,427,630,653,696,701,715,722,727,1087 'frac':275 'from':1307 'ge':78 'gentry':62 'i':210,222,226,233,238,242,245,252,262,266,271,274,280,284,287,290,293,328,524,529,532,536,540,545,548,554,558,563,567,571,576,584,589,594,932,961,1011,1015,1017,1021,1103,1106,1111,1120,1123,1222,1226,1228,1232 'ideal':1202 'in':129,211,253,294,356,668,678,687,1124 'institute':1316 'is':1305 'isomorphic':986 'k':1079,1085,1094,1101,1288 'kb':462 'key的大小有点太大了':464 'lambda':646 'large':22 'lattice':1203,1317 'lattice学习笔记07':1 'learning':377 'lecture':1312 'log':404,407,436,448 'lpn问题也被认为是一个难题':381 'm':11,18,32,132,136,144,159,170,175,184,218,229,258,311,351,355,359,393,401,417,424,626,1080 'm/n':600,620 'mathbb':140,155,166,212,295,669,679,688,979,1126,1185,1206 'mathbf':26,91,121,123,127,178,182,208,220,224,231,236,240,243,250,260,264,269,272,278,282,285,288,291,301,303,305,309,314,317,319,326,330,336,339,341,345,349,353,389,420,428,443,499,505,522,527,530,533,537,542,546,551,555,560,564,568,573,581,585,591,604,606,608,612,618,631,636,649,654,666,676,685,693,697,699,702,704,716,718,720,723,725,728,730,734,738,741,749,758,761,790,825,849,861,892,895,924,927,931,935,939,944,948,957,972,997,1049,1074,1088,1092,1095,1099,1104,1109,1118,1121,1137,1258,1262 'micciancio':622,1310 'micciancio与peikert把':72 'micciancio与regev两个人进一步优化了这一证明':54 'mod':248,323,745,765,1043,1114 'n':12,19,33,48,58,68,80,86,88,111,135,142,157,168,216,298,392,398,403,405,406,412,434,478,517,544,557,583,587,625,951,962,968,975,983,990,1002,1018,1022,1028,1032,1035,1040,1045,1054,1059,1065,1081,1116,1130,1161,1165,1177,1210,1214,1229,1233,1239,1243,1247,1286,1291 'ne':692 'nm':447,468 'noise':380 'nx':967 'o':49,399,402,477,516,1160,1164 'of':1302 'otimes':338 'owf':6,97,114,1296 'owf了':1134 'owf就是安全的':82 'owf的key矩阵变成':1078 'owf的参数大小':4 'owf的安全性来说':40 'owf的矩阵':665 'owf的线性组合特性':713 'owf的输出':495 'owf的运行效率':384 'p':1192,1197 'parity':378 'peikert':63 'perp':648 'pm1':255,358,805 'polynomial':1195 'post':1304 'product':334 'prof':1308 'q':13,20,37,43,47,56,66,73,77,87,95,99,100,105,109,137,145,151,161,172,186,190,194,200,204,214,223,249,277,281,297,324,364,369,372,394,397,409,414,438,449,627,647,671,681,690,746,766,994 'r':862,925,928,958,973,998,1050,1075,1125,1259,1263 'resistance':641,659 'resistant的':30,657 'resistant的啦':1298 'ringsis的好处是什么呢':1147 's':1311,1315 'simon':1314 'sis':7 'sis的效率与ringsis':2 'sqrt':79,85,110 'sum':1102 'summarized':1306 'text':247,322,461,744,764,1042,1113 'the':1300 'this':1303 'tilde':1159 'times':143,158,169,217,435,673,811,814,817,820 'u':1096,1100,1110,1122 'vaikuntanathan三个大佬又对证明做了一次优化':64 'vdots':577,578,580 'vert':611,615,617 'w':315,320,331,337,342,350 'widetilde':860,923,926,956,971,996,1048,1073,1257,1261 'with':379 'x':124,128,421,677,686,694,700,705,719,726,750,751,850,893,896,936,940,945,949,981,982,1008,1010,1014,1027,1031,1034,1039,1044,1053,1058,1061,1064,1107,1112,1115,1128,1129,1138,1140,1176,1187,1189,1193,1198,1208,1209,1219,1221,1225,1238,1242,1246,1290 'y':721,731,739,752,759,826 'z':141,156,167,213,237,244,251,261,286,292,296,327,340,346,354,670,680,689,980,1127,1186,1207 '一个比较简单的例子就是':1205 '一共生成':599 '下的sis问题':138 '不能被进一步约分':1199 '不过意会到这一证明的精髓之后':362 '不需要存储整个矩阵':491 '个bits':425 '个多项式':1086 '个多项式拼接在一起':1082 '个矩阵':230,601 '个解':259 '中的svp问题上来了':1204 '中的svp问题很难解决':651 '中的一行':501 '中被第一次提出':623 '为了让构造和证明变得简单':118 '为了证明这一点':642 '为了通俗的表达各种多项式环':1183 '为什么上面构造的循环矩阵的sis问题这么简单呢':854 '为什么可以做这个简化呢':858 '为这里多项式中的取值':1139 '举个例子':663 '之后':332,1005 '乍一看':707 '乘以一个全是1的向量':792 '也包括了所有的':1213 '他们指出只要':76 '以内的参数赋值':806 '以内的多项式来代替我们的循环矩阵':995 '份':176 '似乎没有什么头绪':709 '但是':36 '但是再往下的lower':366 '但是比较难的另一个安全属性是collision':640 '但是现在似乎还没有很好的证明':382 '但是计算成本还是一样的':509 '使得':55,65,695,740,760 '使得这些参数乘以这四个数字加起来最后可以等于0呢':807 '假设我们有上图这么一个循环矩阵结构下的sis':664 '其中':1191 '其实对于ajtai':39 '其实是很好约分的':1057 '其次':1154 '具体来说':206 '具体的正确性证明在这里就不多说了':361 '再次找到sis问题的解':313 '则是我们owf的key':445 '即':126,335,515,714 '即2的幂':1289 '即sis':115 '即二进制':371 '即多项式的参数赋值':1151 '即找到一个二进制短向量':737,757 '即找到另一个':684 '即模组为':98 '即满足':316 '即观察到他们每一列加起来的值都相等这一特性':856 '压缩sis中的模组':104 '压缩到最小':370 '原文中的定理是这样的':83 '另一部分用一定的伪随机生成或者线性变换来生成':489 '只接受二进制的短向量输入':125 '只是乘法的定义有所改变':1254 '只能通过矩阵相乘':514 '只要':17,1285 '可以很好的被多项式环代替':1076 '可以构想出一个最简单的构造':497 '可以被表述成':974 '可以轻易破解在固定参数的':134 '同时':492 '同样':465 '同理':1083 '呢':706 '和':329 '和之前一样是一个ring的结构':1253 '和另外的矩阵':263 '唯一不一样的':1217 '因为sis问题的定义需要一系列的参数':10 '因为我们之前发现了':1175 '因为我们使用了一个二维的矩阵':474 '因为我们发现循环矩阵':1072 '因为我们可以代入原本的旋转矩阵':1136 '因为我们可以很简单的找到这个多项式环中的0交界点':1070 '因为我们在':1026 '因为我们的环的大小就是':1241 '因为运算效率高':1170 '因为这个决定了矩阵的维度':35 '因为这些旋转操作都是有规律的':786 '在gpv08中':61 '在mp13中':71 '在mr04这一篇paper中':53 '在owf的使用场景中':441 '在paper中':75 '在ringsis中':1173 '在得到临界值':1237 '在这种方式下':1255 '在这篇paper中':45 '在这里':410 '基于这个idea':496 '复杂度一直都是':476 '多项式之间相乘可以通过fft':1156 '多项式到ringsis':1071 '多项式环中还有一个之前矩阵形式里不能实现的黑科技':1155 '大1':1248 '大小由':391 '如何定义这些参数':14 '如何通过反证法来保证':108 '如果':1196 '如果之前存储与计算的瓶颈一直都在矩阵的大小上面':484 '如果在ajtai原版的假设中':396 '如果在二进制短向量的假设下':422 '如果我们使用更加通用的表达方式的话':954 '如果我们全部乘以1的话':795 '如果我们反复叠加这一旋转矩阵':917 '如果我们可以破解':84 '如果我们并不全部随机生成整个矩阵':487 '如果我们把':368 '如果我们直接去找这个矩阵的inverse':710 '如果我们要找到另一个collision的话':732 '如果我们计算owf的时候':466 '如果我们让':789 '如果根据短密钥延伸出来的大矩阵拥有某些数学特性':493 '存储成本低':1171 '实现的方法其实不难':192 '实质上是一个把1024':430 '对于':31 '对应的循环矩阵':1256 '就可以从1的位置旋转到8的位置':918 '就可以大大的缩小密钥的大小了':490 '就可以定义整个问题':1152 '就可以得到':796 '就可以确保这些值都在':203 '就可以非常简单的计算出任意多种collision啦':852 '就是':1260 '就是一堆小的循环矩阵拼接而成的':638 '就是任意一个monic':1194 '就是单向':28 '就是单向并且collision':1297 '就是我们可以随机生成一个向量':521 '差异是不会有太大的':41 '并且压缩密钥的大小呢':482 '并且指出如果':624 '并且满足':239 '并且给定了一组owf的输入':675 '并且这一结构与':978 '当我们得到了':325 '当我们把':1047 '当我们生成这么一个循环密钥矩阵之后':597 '当旋转的次数变得过多':1000 '形成我们的密钥矩阵':603 '很简单我们就可以找到':809 '得到':235 '得到另一个collision':748 '得到这个解向量之后':847 '循环矩阵':970 '循环矩阵到多项式':853 '循环矩阵的collision':658 '快速傅立叶变换':1157 '情况下的':89 '我们sis问题的解就是':824 '我们一般都把ringsis问题中的环用':1184 '我们会发现其实':363 '我们会发现其实循环矩阵中每一列的值加起来都是相同的':787 '我们假设owf':119 '我们其实可以用一个旋转矩阵':891 '我们只需要存储一组随机的向量':1150 '我们只需要把每一个':193 '我们只需要求解这个矩阵':733 '我们可以任意选择想要的多项式环':1174 '我们可以使用一组最多为':989 '我们可以假设':411 '我们可以把':228 '我们可以把得到的':257 '我们可以用一组线性组合来表示':922 '我们可以看一下':107 '我们可以观察一下':767 '我们如法炮制':598 '我们就会发现':1052 '我们就会得到四组参数相等的向量':793 '我们就只需要随机生成':498 '我们就可以在原本的输入':848 '我们就可以把一个矩阵':207 '我们就可以用这个算法作为一个黑盒':147 '我们就可以通过多项式相乘的方法来计算原本的循环矩阵版的sis':1133 '我们把owf的输入矩阵也变成':1084 '我们把这些向量拼接在一起':299 '我们把这样的':1142 '我们拿到一个想要解决的sis实例':164 '我们来看一看我们刚刚提出来的循环矩阵的构造':661 '我们构造出的矩阵':635 '我们的初始生成向量为':883 '我们的存储成本就变得很低':508 '我们相加两个向量之后需要做一些求模的处理':754 '我们知道':386 '我们索性就把原本的sis':1077 '我们能否找到一组':803 '我们能否找到这个输入的另一组collision':683 '我们观察发现':426,794 '我们还注意到':999 '我们通过改变循环矩阵的生成方法':644 '我们需要想办法把它转化为':189 '我们首先观察一下最左侧的循环矩阵':859 '或者循环矩阵拼接成的sis':1295 '所以大家的目光都放在如何尽可能的压缩':42 '所以对应的owf容易被找到collision':1180 '所以我们做任何矩阵相乘运算的时候':475 '所以我们可以用':1250 '所以我们可以用-1来表示':1249 '所以我们可以考虑':1181 '所以我们对于一个随机生成的矩阵进行运算的话':513 '所以说':1038 '所以这种构造下的ringsis':1294 '才可以满足之前的安全性证明呢':15 '才可以满足安全性证明':51 '找到这一条路之后':755 '把问题简化':857 '拆分成':198,219 '换一个更加安全的环':1182 '接下来':106 '接下来我们可以看一看sis系统的运行效率':385 '接下来的问题就是求解sis问题了':756 '放到我们之前的黑盒中':234 '旋转到最下侧的数字会回到最上面来':1006 '是collision':656 '是乘法的定义':1218 '是单向的':633 '是安全的':116 '是质一般的飞跃':1168 '更安全的多项式环':1172 '最后':70 '有一个很好的idea就是':486 '来决定':395 '来构造出一个新的算法':149 '来破解':150 '来表示':1190 '来表述这一变换的过程':894 '来达到':1158 '根据多项式的特性':1284 '模组下的sis问题':153 '模组下的值':196 '模组的':191 '次乘法':471 '正确的方法是利用sis':712 '每一项系数在':993 '比':1245 '比我们的环的大小':1033 '比起矩阵相乘':1163 '没有任何数字之间的联系':512 '注意这个时候拿到的矩阵':177 '消减密钥矩阵大小':483 '然后再旋转到3的位置':919 '然后后面的元素依次分配在对角线周围':890 '然后我们假设我们拥有一个很强大的算法':133 '然后我们就可以轻松的通过组合这个sis的解和原本的输入的方式':747 '然后我们把它平均的横向切割成':174 '然后把它们横向拼接在一起':602 '然后把这一行作为一个prg的种子':503 '然后等式全部成立':1141 '然后证明':652 '然后逐步破解更大的':94 '然后通过不停的旋转这一行向量的值':525 '现在基于格的很多库都是基于多项式环来进行运算的':1169 '现在的问题就变成了':802 '现在问题来了':9 '甚至会因为prg的运算变得更差':510 '甚至更短':502 '用多项式表达之后':1051 '的':480,987 '的ajtai':96 '的sis问题的结果':736 '的一组':950 '的值我们不去变它':34 '的基础上加上或者减去这个解向量':851 '的多项式环是同构':985 '的大小':44 '的大小压到了更小':74 '的大小可以被压缩到很小很小':365 '的安全性之后':8 '的情况下':112 '的情况下仍然安全':69 '的情况下可以满足安全性':60 '的效率':1162 '的效率来说':1167 '的方法来完成':519 '的时候':1240 '的模组内了':205 '的模组的':188 '的环中':1030 '的类似sis问题':1145 '的维度选择合适的话':628 '目标sis问题的解就是这两个向量之间的tensor':333 '矩阵':442 '矩阵相乘需要做':467 '称之为ringsis':1146 '第一部分是sis的问题矩阵':388 '第二个比较有意思的idea':520 '第二部分就是我们的owf输入向量':419 '等等':920 '组合成一个新的sis问题矩阵':300 '组成一个新的向量':268 '组成的':785 '结合起来':267 '而不是矩阵相乘':1144 '而是随机生成一部分':488 '能否满足cr这一要求':662 '虽然这种形式下面构造的owf的单向性可以被轻易证明':639 '要大1':1037 '计算而来':440 '讨论完了ajtai':5 '说不定我们也不需要通过矩阵相乘的办法来计算sis':494 '超出了':1001 '足够大':21 '这4个小的旋转矩阵分别都是由四个独立的向量':768 '这一多项式':1056 '这一多项式是不能被约分成更小的式子的':1293 '这一点我们可以在这个多项式环中的乘法上定义':1007 '这一系统的构造也和1998年提出的很有名的ntru加密系统很相似':634 '这个idea的核心思路就是':643 '这个向量的第一个元素1被分配在了矩阵的正对角线上':889 '这个时候':146,227 '这个模组的大小':38 '这个环和之前的环一样':1212 '这个环很好约分':1179 '这个系统在m02':621 '这么大一个矩阵':708 '这也就是说':788,823,888,988 '这也就是说我们的key的大小就是':446 '这也是非常巨大的一个数字':472 '这其实就是基于旋转矩阵':947 '这和之前的循环矩阵的优势一样':1149 '这四个数字':801 '这对于一个小的owf来说':463 '这就是为什么lattice的诟病一直是效率低的原因':473 '这就是为什么我们可以非常简单的找到sis的解':1069 '这是因为prg生成的数值都是近似随机的':511 '这是因为我们可以对这个矩阵做进一步的分解':855 '这有点像是一个算24点问题了':808 '这样一来':256,921,1252 '这样以来':1132 '这样体系下的':629 '这样的存储成本就很低':1153 '这样的话':507 '这样的话我们就可以把不能约分的多项式环下的ringsis问题的难度规约到理想格':1201 '这里512由':433 '这里为了保证二进制短向量的特性':753 '进而确保':645 '逐渐构成一个小的循环密钥矩阵':526 '通过多项式环中相乘':1143 '那么':24 '那么ajtai':81 '那么也要花费很长的时间':711 '那么我们就不能用同样的方法来更快速的找到collision':1200 '那么我们就可以把这个破解算法当作一个blackbox':93 '那么有没有什么方法可以让我们低于这个复杂度':481 '那么有没有办法消减矩阵的大小呢':485 '那么输入的就是':423 '那么这个情况下的lwe':374 '那就是':955 '都是基于':185 '问题就被称作lpn问题':376 '阶':992,1004 '阶多项式的形式':977 '阶的多项式':953,1216 '随后':52 '随后使用我们的黑盒':312 '随后得到的值也会是一样的':1135 '随机的生成整个owf的密钥':504 '首先':117,163,660,1148 '验证一个sis问题需要两部分':387		
635	用 Python 写个七夕表白神器	{"ver":2,"uid":1,"hash":"SHA1:2e1e40c710e60d874678ef2ff73c49af70497a47"}	https://toutiao.io/k/ee69dyh	2020-08-26 02:10:08	用 Python 写个七夕表白神器	1763f055419972c9c262d3987a748a7663ab4367	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.060462	0			'python':2,5 '写个七夕表白神器':3,6 '用':1,4	zh	
637	[推荐] 大厂是如何使用 JMH 进行 Java 代码性能测试的？必须掌握	{"ver":2,"uid":1,"hash":"SHA1:4b07aac0dfc90063b3f2b573e42636589b5251a9"}	https://toutiao.io/k/lti22p3	2020-09-01 18:10:10	[推荐] 大厂是如何使用 JMH 进行 Java 代码性能测试的？必须掌握	36c0e5fa46d5d892d767d78dab43e7823fd05159	\N	f	2020-08-26 02:10:00	2020-09-09 15:10:14.174993	0			'java':5,12 'jmh':3,10 '代码性能测试的':6,13 '大厂是如何使用':2,9 '必须掌握':7,14 '推荐':1,8 '进行':4,11	zh	
573	Lattice学习笔记06：SIS的困难度论证	{"ver":2,"uid":1,"hash":"SHA1:69dc629ba8be27bb52717d37036050fa7f7bec01"}	http://blog.higashi.tech/2020/07/25/lattice_06.html	2020-07-25 07:00:00	<h3 id="average-case-hardness平均困难度">Average Case Hardness（平均困难度）</h3>\n\n<p>Lattice问题最有趣的一点就在于困难度的论证。因为我们知道格中的一些问题是难的，比如说之前讨论的SVP、CVP、SIVP等等，所以基于这些问题构造的新的问题也是难的。反之，如果我们能够解决基于这些难题构造的新问题，那么我们也就可以解决这些难题本身。这一推理的过程，我们称之为reduction（规约）。</p>\n\n<p>在讨论困难度的时候，最常见的一种方法就是讨论平均的困难度，即Average Case Hardness。</p>\n\n<p>举个最简单的例子，在讨论像RSA一样依靠Factorization难度的系统的时候，我们会依靠我们的模组\\(N\\)难以被factor这一难点来构造系统。比如说一个Modular Squaring的函数：</p>\n\n\\[f_\\mathbf{N}(\\mathbf{x}) = \\mathbf{x}^2 \\text{ mod } \\mathbf{N}:\\mathbf{N} = p \\cdot q\\]\n\n<p>这个函数就是计算一个数字\\(\\mathbf{x}\\)在模组中的平方，得到一个Quadratic Residue。这个函数也是Rabin的密码学系统的精髓，它的难度在于如果可以逆向计算\\(f_\\mathbf{N}(\\mathbf{x})\\)，我们也可以成功的factor \\(\\mathbf{N}\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200724170753696.png" alt="image-20200724170753696" /></p>\n\n<p>那么\\(f_\\mathbf{N}(\\mathbf{x})\\)这个函数到底有多难计算呢？我们需要看这个函数实例对应的\\(\\mathbf{N}\\)这个模组有多难被factor。因为它们之间的安全关系是一一对应的。Rabin给出的安全性证明为：在密码学定义上，只要<strong>大部分</strong>\\(\\mathbf{N} = p \\cdot q\\)是难以被factor的，那么\\(f_\\mathbf{N}\\)这个函数也是难以被invert的。</p>\n\n<p>理解这个定义很简单，假如我们随便拿到了一个\\(f_\\mathbf{N}\\)的实例，那么我们能够逆向它的可能性就基于我们随便拿到一个\\(\\mathbf{N}\\)可以factor它的可能性是相似的。这也就是说平均的看（在Average case上），只要我们大概率拿到的\\(\\mathbf{N}\\)是难的，那么\\(f_\\mathbf{N}\\)也是难的。</p>\n\n<h3 id="ajtai的owfsis的平均困难度">Ajtai的OWF（SIS）的平均困难度</h3>\n\n<p>同理可得，我们可以用这样的方法来分析之前提到的Ajtai OWF（即SIS）。</p>\n\n<p>我们的OWF \\(f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q\\)的构造其实和之前的Quadratic Residue的构造很相似，同时我们在之前也指出了想要逆向计算\\(f_\\mathbf{A}\\)的话，我们等于是需要求解Lattice \\(\\Lambda(\\mathbf{A})\\)中的SVP问题。所以\\(\\Lambda(\\mathbf{A})\\)的SVP难度与我们的OWF的安全性也是挂钩的。</p>\n\n<p><img src="/assets/images/lattice/image-20200724174537843.png" alt="image-20200724174537843" /></p>\n\n<p>这也就是说，如果我们随机的抽取\\(\\mathbf{A}\\)矩阵，并且给予它来构造OWF。只要保证大部分时候\\(\\Lambda(\\mathbf{A})\\)中的SVP是困难的，那么我们得到的\\(f_\\mathbf{A}\\)就是单向（OWF）并且collision resistant的。</p>\n\n<h3 id="average-case-complexity平均复杂度">Average Case Complexity（平均复杂度）</h3>\n\n<p>我们上面讨论的两个类似的问题，即Modular Squaring \\(f_\\mathbf{N}\\)和SIS OWF \\(f_\\mathbf{A}\\)，我们都可以把它们的难度规约到解决一些特殊问题的复杂度上。</p>\n\n<p>比如在\\(f_\\mathbf{N}\\)的例子中，如果\\(\\mathbf{N}\\)难以factor，那么对应的算法复杂度也很高。但是什么样的数字难以被factor呢？</p>\n\n<p>Factoring问题的定义是这样的：给定一个数字\\(\\mathbf{N}\\)，输出一组整数\\(a, b &gt; 1\\)，并且满足\\(\\mathbf{N} = a \\cdot b\\)。</p>\n\n<p>使用很简单的数学尝试，我们就能发现，其实factoring的难度，和\\(\\mathbf{N}\\)这个数字的分布有很大的关系。如果\\(\\mathbf{N}\\)就是一个均匀分布的随机数字（uniformly random），那么：</p>\n\n\\[Pr[\\mathbf{N} = 2 \\cdot \\frac{\\mathbf{N}}{2}] = \\frac{1}{2}\\]\n\n<p>道理很简单，每两个相邻的数字中就一定有一个偶数，所以如果我们均匀的抽取随机数的话，factoring问题有一半的概率都是极其简单的。</p>\n\n<p>为了避免这个问题，我们在挑选\\(\\mathbf{N}\\)的分布的时候需要格外的小心。如果我们挑选\\(\\mathbf{N} = p \\cdot q\\)，并且选取\\(p, q\\)为随机的质数，那么在这个新的\\(\\mathbf{N}\\)的分布下，我们相信factoring是困难的。所以说，整个factoring问题的平均复杂度，同时也是\\(f_\\mathbf{N}\\)的平均困难度定义，完全取决于我们如何挑选\\(\\mathbf{N}\\)的随机分布。如果是一个较好的分布，我们这个OWF从平均来看就是安全的，反之则不是。</p>\n\n<p>这种精心挑选随机分布的方法对于\\(f_\\mathbf{N}\\)其实很有用，因为我们可以很直观的选出较好的随机分布出来（选择\\(p, q\\)为随机大质数）。</p>\n\n<p>现在我们来看Ajtai OWF。我们知道，只要\\(\\Lambda^\\perp(\\mathbf{A})\\)的SVP问题困难，我们的SIS构造的OWF就是安全的。那么如果我们均匀的随机生成矩阵\\(\\mathbf{A}\\)，这个矩阵构成的格\\(\\Lambda, \\Lambda^\\perp\\)中的SVP问题到底难不难呢？换句话说，我们如何选择一个有利于我们SVP问题难度的随机分布\\(\\mathbf{A}\\)？这些问题，至少在现在，是很难有很好的答案的。</p>\n\n<h3 id="worst-case-hardness最坏情况困难度">Worst Case Hardness（最坏情况困难度）</h3>\n\n<p>对于\\(f_\\mathbf{A}\\)，如果我们继续用平均困难度的方法，其实是很难得到一个很好的结果的。这个时候，我们可以换成另外一种思考角度，把这个平均问题进一步的规约成最坏情况问题。</p>\n\n<p>这个reduction的方法其实不是很好理解，但是我们可以先来看一个假设。</p>\n\n<p>我们之前的Ajtai OWF的定义方法，我们随机生成的\\(\\mathbf{A}\\)就对应了\\(\\Lambda(\\mathbf{A}), \\Lambda^\\perp(\\mathbf{A})\\)这么两个Lattice，同理也就对应了最多两个不同的\\(f_\\mathbf{A}\\)实例，这样的话我们只能依靠平均困难度的方法来讨论\\(f_\\mathbf{A}\\)的安全性。</p>\n\n<p>现在我们做一个新的假设：假如我们可以随机选择一个\\(\\mathbf{A}\\)，然后构成一个Lattice \\(\\Lambda\\)，但是有一种新的方法可以把这个Lattice映射到任意的\\(f_\\mathbf{A}\\)上去。这也就是说\\(\\Lambda(\\mathbf{A})\\)和\\(f_\\mathbf{A}\\)的一一对应关系已经没有了，一个Lattice可以变换组成任意的\\(f_\\mathbf{A}\\)的实例。</p>\n\n<p><img src="/assets/images/lattice/image-20200724183852772.png" alt="image-20200724183852772" /></p>\n\n<p>就像上图所示，我们一个Lattice \\(\\Lambda\\)可以对应多个OWF实例，甚至这个对应的关系也不是唯一的，是有重合的。在这种情况下，我们困难度的证明一下子就变了。</p>\n\n<p>假设在所有的\\(f_\\mathbf{A}\\)中，大部分的实例（对应的SVP问题）都是难解的，但是如果我们有一个算法可以破解所有可能性中的一小部分实例（即图上的白色圆圈部分），那么我们就可以用这个算法来破解所有其他的\\(\\Lambda\\)实例中的SVP问题。原因也很简单，因为我们一个Lattice \\(\\Lambda\\)可以任意对应任意的\\(f_\\mathbf{A}\\)实例，所以就算是这个空间中”最难“破解的Lattice \\(\\Lambda\\)，也可以被映射到可以被破解的这一小部分\\(f_\\mathbf{A}\\)上，然后用已知的破解算法来破解出来。</p>\n\n<p>这种类型的困难度论证被称为最坏情况困难度论证。也就是说，只要在整个取值空间中只要有任何（any）一个实例可以被破解，那么整个取值空间都可以被破解。</p>\n\n<p>当年Ajtai提出SIS的时候，就做了这样的一个reduction，使用最坏情况困难度来证明SIS OWF的安全性。具体的出的结论是：只要有一部分（some）的Lattice \\(\\Lambda\\)中是难以计算SIVP的，那么基于随机取值的\\(\\mathbf{A}\\)定义的\\(f_\\mathbf{A}\\)是单向并且collision resistant的。</p>\n\n<p>看到这里，我不禁有一点一头雾水。之前我们看到的SIS的构造都是从\\(\\mathbf{A}\\)构成的Lattice \\(\\Lambda\\)直接构造成固定的\\(f_\\mathbf{A}\\)实例，明明只有一种映射（或者两种，第二种就是\\(\\Lambda^\\perp\\)），怎么能够实现上面说到的可以映射到任意的\\(f_\\mathbf{A}\\)实例的假设呢？</p>\n\n<p>不要急，下面来研究一下如何实现这一假设。</p>\n\n<h3 id="lattice模糊化blurring">Lattice模糊化（blurring）</h3>\n\n<p>在之前的文章中讨论过可以把一个格\\(\\Lambda\\)的每一个点作为圆心，然后画一个圆（球体），并且让这个圆的半径逐渐变大。</p>\n\n<p><img src="/assets/images/lattice/image-20200724233045069.png" alt="image-20200724233045069" /></p>\n\n<p>当圆的半径等于这个Lattice的覆盖半径\\(\\mu\\)的时候，整个空间\\(\\mathbb{R}^n\\)都会被覆盖住。</p>\n\n<p><img src="/assets/images/lattice/image-20200724233240196.png" alt="image-20200724233240196" /></p>\n\n<p>当整个空间都被圆形覆盖住的时候，这个覆盖半径就是任意一个点可以距离格点最远的距离。现在我们假设这些圆当作一个以格点为中心的随机误差的分布\\(\\mathcal{X}\\)。</p>\n\n<p>这个时候，在\\(\\mathbb{R}^n\\)空间中的任意一个点\\(\\mathbf{a}\\)都可以被拆分成如下的形式：</p>\n\n\\[\\mathbf{a = v + r}\\]\n\n<p>这里的\\(\\mathbf{v}\\)就是Lattice \\(\\Lambda\\)中的一个格点，\\(\\mathbf{r}\\)则是误差分布中的一个随机误差向量。如果我们现在随机的选择一个格点，再从误差分布中随机的选择一个误差向量，把它们相加起来的话，就可以近似地得到一个\\(\\mathbb{R}^n\\)空间中的随机向量。</p>\n\n<p>我们观察可以发现，图上的圆的半径仅仅是覆盖半径，整个空间中有很多部分重合的地方。这个时候我们用这种方法生成的随机向量的分布其实并不是均匀的，而是会偏向这些重合的地方。</p>\n\n<p>这个时候，我们需要继续增加半径的大小，使得这个分布变得越来越近似于平均分布。</p>\n\n<p><img src="/assets/images/lattice/image-20200724233943604.png" alt="image-20200724233943604" /></p>\n\n\\[\\lvert \\lvert \\mathbf{r} \\rvert \\rvert \\le (\\log{n}) \\cdot \\sqrt{n} \\cdot \\lambda_n/2 \\approx \\sqrt{n} \\cdot \\lambda_n\\]\n\n<p>当我们的误差分布半径达到如上所示的值的时候，如果我们只看这个格的基础空间（即Determinant组成的parallelpiped，或者\\(\\mathbb{R}^n/\\Lambda\\)的模组空间），我们可以把这个空间中的错误分布看作平均分布。</p>\n\n<p>这个时候，我们已经把这个格足够的模糊化了。当我们得到一个模糊化之后的Lattice之后，就可以来完成Ajtai OWF的安全性论证了。</p>\n\n<h3 id="ajtai-owf的安全性论证尝试">Ajtai OWF的安全性论证尝试</h3>\n\n<p>最后，我们来尝试使用最坏情况复杂度的规约来证明Ajtai OWF的安全性（即单向和collision resistant）。</p>\n\n<p>上一步我们成功的得到了一个模糊化之后的Lattice \\(\\Lambda\\)，现在我们来看看这个格是否满足我们刚刚看到的假设，即\\(\\Lambda\\)可以映射到任意的\\(f_\\mathbf{A}\\)上。</p>\n\n<p>首先，我们可以用上面提到的方法，先随机的生成一个\\(\\Lambda\\)中的格点\\(\\mathbf{v}_i\\)。然后我们从随机噪音分布中生成一个噪音向量\\(\\mathbf{r}_i\\)，并且根据我们模糊化的结果，\\(\\lvert \\lvert \\mathbf{r} \\rvert \\rvert \\le \\sqrt{n} \\cdot \\lambda_n\\)。</p>\n\n\\[\\mathbf{a}_i = \\mathbf{v}_i + \\mathbf{r}_i\\]\n\n<p>我们把这两个随机的向量组合起来，变成我们的目标向量\\(\\mathbf{a}_i\\)。根据模糊化的结果，我们知道\\(\\mathbf{a}_i\\)的随机分布是近似平均分布的。</p>\n\n<p>这个时候，我们连续的取得\\(m\\)个类似的向量，这里\\(q = n^{O(1)}, m = O(n \\log{q}) = O(n \\log{n})\\)：</p>\n\n\\[\\mathbf{A} = [\\mathbf{a}_1, \\dots, \\mathbf{a}_m] \\in \\mathbb{R}^{n \\times m}_q\\]\n\n<p>因为我们是拼接了\\(m\\)个类似的随机向量得到矩阵\\(\\mathbf{A}\\)的，所以这个矩阵也可以被看作是随机分布的。</p>\n\n<p>得到了\\(\\mathbf{A}\\)之后，我们使用这个矩阵来构造一个Ajtai OWF的实例\\(f_\\mathbf{A}\\)。这个时候，因为从\\(\\mathbf{A}\\)根本看不出来我们原本的Lattice是什么结构的，对于一个adversary来说，这个\\(f_\\mathbf{A}\\)就是一个平均情况的，可能是任何Lattice形成的一个Ajtai OWF实例。这个时候，就算我们一开始使用的是空间中“最难的”一个Lattice生成的随机向量，因为adversary并不知道这一回事，所以他只会觉得他在求解一个平均难度的问题。</p>\n\n<p>听起来感觉有些烧脑，但是这就是<strong>最坏情况到平均情况的规约</strong>的精髓了！我们把一个最坏情况的Lattice“伪装”成了一个平均情况的实例。这个时候，如果adversary拥有一个算法可以破解一小部分的\\(f_\\mathbf{A}\\)的化，那么它就有一定的几率可以破解我们创造的这个实例。</p>\n\n<p>如果adversary可以成功的破解这个\\(f_\\mathbf{A}\\)实例的话，那么就代表我们找到了一个短向量\\(\\mathbf{z} \\in \\{-1, 0, 1\\}^m\\)并且满足：</p>\n\n\\[\\sum (\\mathbf{v}_i + \\mathbf{r}_i)\\mathbf{z}_i = \\sum \\mathbf{a}_i \\mathbf{z}_i = 0\\]\n\n<p>我们把这个等式变换一下，就可以得到如下的形式：</p>\n\n\\[\\sum \\mathbf{v}_i \\mathbf{z}_i = -\\sum \\mathbf{r}_i \\mathbf{z}_i\\]\n\n<p>观察可以发现，等式的左侧我们可以得到一个格点，而右侧我们可以得到一个相对来说较短的向量（并不是格点）。因为\\(\\mathbf{r}\\)向量长度的上限和\\(\\mathbf{z}\\)向量是个短向量的原因，我们可以约束右侧的向量：</p>\n\n\\[\\lvert \\lvert \\sum \\mathbf{r}_i \\mathbf{z}_i \\rvert \\rvert \\approx \\sqrt{m} \\cdot \\max \\lvert \\lvert \\mathbf{r}_i \\rvert \\rvert \\approx n \\cdot \\lambda_n\\]\n\n<p>虽然右侧的向量并不在格点上，但是我们发现这个向量相对来说还是比较短的。因为左侧的在\\(\\Lambda\\)格中的向量的值等于右侧的向量的值，这就代表说左侧的格点向量也是很短的。这样一来，我们就等于间接的解决了\\(\\Lambda\\)中的短向量了。</p>\n\n<p>回到我们一开始的定义，如果找到了短向量（近似SIVP）问题，那么我们就可以成功的破解SIS OWF。根据我们最坏情况困难度的规约，只要所有的随机格中有任何一部分（some）Lattice可以被破解，那么我们就可以破解任何平均情况的Lattice，找到它们的短向量。综上所述，因为我们知道SIVP是困难的问题，所以这些事情都不可能，所以SIS OWF也是安全的了。</p>\n\n<p>QED</p>\n\n<p>写到这里，其实多少还是对于这个reduction有点模糊，并不是完全的掌握。想了想还有一个比较好的理解方法：如果只依靠平均情况hardness的话，那么代表\\(f_\\mathbf{A}\\)在大部分情况下都是安全的， 但是不排除有踩雷的情况（生成了比较差的弱实例）。这就等于说是我们有一块地，可以确保80%的地方都是安全的，但是剩下的20%说不定有地雷，有窟窿，但是我们不知道，说不定那天就踩到了，这是令人感到很不安心的。</p>\n\n<p>但是如果我们依靠最坏情况的hardness reduction的话，那么代表在\\(\\mathbf{A}\\)的随机取值空间中，可以被破解的实例几乎没有（negligible），所以整体\\(f_\\mathbf{A}\\)都是安全的。因为只要有任何一部分（non-negligible）的实例可以被破解，那么基本上整个\\(f_\\mathbf{A}\\)都会随之被攻破。这就好比是告诉我们有一块地，可以确保几乎没有任何地雷和窟窿（比如\\(&lt;0.1%\\)，negligible）。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	6b577fc73b5741d6106c94bdfdcb5f591ab7b657	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.164302	0			'-1':705 '0':706,727 '0.1':859 '1':200,231,623,637,707 '2':38,224,229,232 'a':122,135,140,145,150,156,161,180,198,204,288,293,302,313,325,329,333,338,343,348,354,359,363,368,381,397,406,427,431,438,444,454,486,489,568,596,607,612,634,636,640,653,658,664,668,674,693,699,722,820,837,844,854 'ajtai':553 'ajtai的owf':112 'any':412 'approx':532,767,779 'at':875 'average':3,166 'ax':126 'b':199,206 'blurring':459 'bootcamp':880 'case':4,22,167,307 'case上':102 'cdot':46,82,205,225,246,526,529,535,592,770,781 'complexity':168 'contents':863 'credits':861 'cvp':10 'daniele':871 'dots':638 'f':31,56,65,86,92,108,120,133,159,173,178,183,260,272,311,336,341,352,361,366,379,395,404,429,442,452,566,662,672,691,697,818,842,852 'factoring问题有一半的概率都是极其简单的':236 'factoring问题的定义是这样的':193 'frac':226,230 'from':869 'hardness':5,23,308 'i':577,581,597,600,603,608,613,713,716,719,723,726,733,736,740,743,761,764,776 'in':642,704 'institute':878 'is':867 'lambda':138,143,154,285,295,296,327,330,350,357,372,389,393,402,423,440,449,461,496,530,536,545,561,564,573,593,782,787,792 'lattice':879 'lattice可以被破解':803 'lattice学习笔记06':1 'lattice模糊化':458 'lattice问题最有趣的一点就在于困难度的论证':7 'le':523,589 'lecture':874 'log':524,627,631 'lvert':517,518,583,584,756,757,772,773 'm':617,624,641,647,650,708,769 'mathbb':470,481,505,542,643 'mathbf':32,34,36,41,43,49,57,59,62,66,68,72,79,87,93,97,104,109,121,123,125,134,139,144,149,155,160,174,179,184,188,195,202,211,215,222,227,239,243,253,261,265,273,287,292,301,312,324,328,332,337,342,347,353,358,362,367,380,396,405,426,430,437,443,453,485,488,493,498,519,567,575,579,585,595,598,601,606,611,633,635,639,652,657,663,667,673,692,698,702,711,714,717,721,724,731,734,738,741,749,752,759,762,774,819,836,843,853 'mathcal':477 'max':771 'micciancio':872 'mod':40,128 'mu':467 'n':27,33,42,44,58,63,67,73,80,88,94,98,105,110,175,185,189,196,203,212,216,223,228,240,244,254,262,266,274,472,483,507,525,528,534,537,544,591,594,621,626,630,632,645,780,783 'n/2':531 'negligible':840,849,860 'non':848 'non-negligible':847 'o':622,625,629 'of':864 'owf':117,163,177,282,799 'owf也是安全的了':810 'owf实例':677 'owf的安全性':418,557 'owf的安全性论证了':552 'owf的安全性论证尝试':554 'owf的定义方法':322 'owf的实例':661 'p':45,81,245,249,278 'perp':286,297,331,450 'post':866 'pr':221 'prof':870 'q':47,83,129,247,250,279,620,628,648 'qed':811 'r':471,482,491,499,506,520,543,580,586,602,644,715,739,750,760,775 'rabin给出的安全性证明为':76 'random':219 'reduction的话':834 'residue':53 'residue的构造很相似':131 'resistant':559 'resistant的':165,433 'rvert':521,522,587,588,765,766,777,778 's':873,877 'simon':876 'sis':113 'sis的困难度论证':2 'sivp等等':11 'some':421,802 'sqrt':527,533,590,768 'squaring':172 'squaring的函数':30 'sum':710,720,730,737,758 'summarized':868 'text':39,127 'the':862 'this':865 'times':646 'uniformly':218 'v':490,494,576,599,712,732 'worst':306 'x':35,37,50,60,69,124,478 'z':703,718,725,735,742,753,763 '一个lattice可以变换组成任意的':365 '一个lattice生成的随机向量':681 '一个实例可以被破解':413 '上':407,569 '上一步我们成功的得到了一个模糊化之后的lattice':560 '上去':355 '下面来研究一下如何实现这一假设':457 '不要急':456 '个类似的向量':618 '个类似的随机向量得到矩阵':651 '中':382 '中是难以计算sivp的':424 '中的svp是困难的':157 '中的svp问题':141 '中的svp问题到底难不难呢':298 '中的一个格点':497 '中的格点':574 '中的短向量了':793 '为了避免这个问题':237 '为随机大质数':280 '为随机的质数':251 '举个最简单的例子':24 '之前我们看到的sis的构造都是从':436 '之后':659 '也可以被映射到可以被破解的这一小部分':403 '也就是说':410 '也是难的':111 '伪装':687 '但是不排除有踩雷的情况':822 '但是什么样的数字难以被factor呢':192 '但是剩下的20':827 '但是如果我们依靠最坏情况的hardness':833 '但是如果我们有一个算法可以破解所有可能性中的一小部分实例':386 '但是我们不知道':830 '但是我们发现这个向量相对来说还是比较短的':785 '但是我们可以先来看一个假设':320 '但是有一种新的方法可以把这个lattice映射到任意的':351 '但是这就是最坏情况到平均情况的规约的精髓了':685 '使得这个分布变得越来越近似于平均分布':516 '使用很简单的数学尝试':207 '使用最坏情况困难度来证明sis':417 '假如我们可以随机选择一个':346 '假如我们随便拿到了一个':91 '假设在所有的':378 '先随机的生成一个':572 '其实factoring的难度':209 '其实多少还是对于这个reduction有点模糊':813 '其实很有用':275 '其实是很难得到一个很好的结果的':315 '具体的出的结论是':419 '再从误差分布中随机的选择一个误差向量':502 '写到这里':812 '则是误差分布中的一个随机误差向量':500 '即':563 '即average':21 '即determinant组成的parallelpiped':540 '即modular':171 '即sis':118 '即单向和collision':558 '即图上的白色圆圈部分':387 '原因也很简单':391 '反之':13 '反之则不是':270 '变成我们的目标向量':605 '只要':284 '只要保证大部分时候':153 '只要在整个取值空间中只要有任何':411 '只要大部分':78 '只要我们大概率拿到的':103 '只要所有的随机格中有任何一部分':801 '只要有一部分':420 '可以factor它的可能性是相似的':99 '可以任意对应任意的':394 '可以对应多个owf实例':373 '可以映射到任意的':565 '可以确保80':825 '可以确保几乎没有任何地雷和窟窿':857 '可以被破解的实例几乎没有':839 '可能是任何lattice形成的一个ajtai':676 '同时也是':259 '同时我们在之前也指出了想要逆向计算':132 '同理也就对应了最多两个不同的':335 '同理可得':115 '向量是个短向量的原因':754 '向量长度的上限和':751 '听起来感觉有些烧脑':684 '和':210,360 '和sis':176 '回到我们一开始的定义':794 '因为':748 '因为adversary并不知道这一回事':682 '因为从':666 '因为只要有任何一部分':846 '因为它们之间的安全关系是一一对应的':75 '因为左侧的在':786 '因为我们一个lattice':392 '因为我们可以很直观的选出较好的随机分布出来':276 '因为我们是拼接了':649 '因为我们知道sivp是困难的问题':807 '因为我们知道格中的一些问题是难的':8 '图上的圆的半径仅仅是覆盖半径':510 '在':480 '在average':101 '在之前的文章中讨论过可以把一个格':460 '在大部分情况下都是安全的':821 '在密码学定义上':77 '在模组中的平方':51 '在讨论像rsa一样依靠factorization难度的系统的时候':25 '在讨论困难度的时候':19 '在这种情况下':376 '大部分的实例':383 '如果':187,214 '如果adversary可以成功的破解这个':696 '如果adversary拥有一个算法可以破解一小部分的':690 '如果只依靠平均情况hardness的话':816 '如果我们只看这个格的基础空间':539 '如果我们挑选':242 '如果我们现在随机的选择一个格点':501 '如果我们继续用平均困难度的方法':314 '如果我们能够解决基于这些难题构造的新问题':14 '如果我们随机的抽取':148 '如果找到了短向量':795 '如果是一个较好的分布':268 '它的难度在于如果可以逆向计算':55 '完全取决于我们如何挑选':264 '定义的':428 '实例':339,398,445 '实例中的svp问题':390 '实例的假设呢':455 '实例的话':700 '对于':310 '对于一个adversary来说':670 '对应的svp问题':384 '就做了这样的一个reduction':416 '就像上图所示':370 '就可以得到如下的形式':729 '就可以来完成ajtai':551 '就可以近似地得到一个':504 '就对应了':326 '就是lattice':495 '就是一个均匀分布的随机数字':217 '就是一个平均情况的':675 '就是单向':162 '就算我们一开始使用的是空间中':679 '平均困难度':6 '平均复杂度':169 '并不是完全的掌握':814 '并不是格点':747 '并且collision':164 '并且根据我们模糊化的结果':582 '并且满足':201,709 '并且给予它来构造owf':152 '并且让这个圆的半径逐渐变大':465 '并且选取':248 '当圆的半径等于这个lattice的覆盖半径':466 '当年ajtai提出sis的时候':415 '当我们得到一个模糊化之后的lattice之后':550 '当我们的误差分布半径达到如上所示的值的时候':538 '当整个空间都被圆形覆盖住的时候':474 '得到一个quadratic':52 '得到了':656 '怎么能够实现上面说到的可以映射到任意的':451 '想了想还有一个比较好的理解方法':815 '成了一个平均情况的实例':688 '我不禁有一点一头雾水':435 '我们一个lattice':371 '我们上面讨论的两个类似的问题':170 '我们之前的ajtai':321 '我们也可以成功的factor':61 '我们会依靠我们的模组':26 '我们使用这个矩阵来构造一个ajtai':660 '我们可以把这个空间中的错误分布看作平均分布':547 '我们可以换成另外一种思考角度':317 '我们可以用上面提到的方法':571 '我们可以用这样的方法来分析之前提到的ajtai':116 '我们可以约束右侧的向量':755 '我们困难度的证明一下子就变了':377 '我们在挑选':238 '我们如何选择一个有利于我们svp问题难度的随机分布':300 '我们就等于间接的解决了':791 '我们就能发现':208 '我们已经把这个格足够的模糊化了':549 '我们把一个最坏情况的lattice':686 '我们把这两个随机的向量组合起来':604 '我们把这个等式变换一下':728 '我们来尝试使用最坏情况复杂度的规约来证明ajtai':556 '我们的owf':119 '我们的sis构造的owf就是安全的':290 '我们相信factoring是困难的':256 '我们知道':283,610 '我们称之为reduction':17 '我们等于是需要求解lattice':137 '我们观察可以发现':509 '我们这个owf从平均来看就是安全的':269 '我们连续的取得':616 '我们都可以把它们的难度规约到解决一些特殊问题的复杂度上':181 '我们随机生成的':323 '我们需要看这个函数实例对应的':71 '我们需要继续增加半径的大小':515 '或者':541 '或者两种':447 '所以':142 '所以sis':809 '所以他只会觉得他在求解一个平均难度的问题':683 '所以基于这些问题构造的新的问题也是难的':12 '所以如果我们均匀的抽取随机数的话':235 '所以就算是这个空间中':399 '所以整体':841 '所以说':257 '所以这个矩阵也可以被看作是随机分布的':655 '所以这些事情都不可能':808 '找到它们的短向量':805 '把它们相加起来的话':503 '把这个平均问题进一步的规约成最坏情况问题':318 '换句话说':299 '整个factoring问题的平均复杂度':258 '整个空间':469 '整个空间中有很多部分重合的地方':511 '明明只有一种映射':446 '是单向并且collision':432 '是很难有很好的答案的':305 '是有重合的':375 '是难以被factor的':84 '是难的':106 '最后':555 '最坏情况困难度':309 '最常见的一种方法就是讨论平均的困难度':20 '最难':400 '最难的':680 '有窟窿':829 '构成的lattice':439 '根据我们最坏情况困难度的规约':800 '根据模糊化的结果':609 '根本看不出来我们原本的lattice是什么结构的':669 '格中的向量的值等于右侧的向量的值':788 '每两个相邻的数字中就一定有一个偶数':234 '比如':858 '比如在':182 '比如说一个modular':29 '比如说之前讨论的svp':9 '然后我们从随机噪音分布中生成一个噪音向量':578 '然后构成一个lattice':349 '然后用已知的破解算法来破解出来':408 '然后画一个圆':463 '现在我们假设这些圆当作一个以格点为中心的随机误差的分布':476 '现在我们做一个新的假设':345 '现在我们来看ajtai':281 '现在我们来看看这个格是否满足我们刚刚看到的假设':562 '球体':464 '理解这个定义很简单':90 '甚至这个对应的关系也不是唯一的':374 '生成了比较差的弱实例':823 '的':654 '的lattice':422 '的svp问题困难':289 '的svp难度与我们的owf的安全性也是挂钩的':146 '的一一对应关系已经没有了':364 '的例子中':186 '的分布下':255 '的分布的时候需要格外的小心':241 '的化':694 '的地方都是安全的':826 '的安全性':344 '的实例':95,369 '的实例可以被破解':850 '的平均困难度':114 '的平均困难度定义':263 '的时候':468 '的构造其实和之前的quadratic':130 '的模组空间':546 '的每一个点作为圆心':462 '的话':136 '的随机分布':267 '的随机分布是近似平均分布的':614 '的随机取值空间中':838 '直接构造成固定的':441 '看到这里':434 '矩阵':151 '破解的lattice':401 '空间中的任意一个点':484 '空间中的随机向量':508 '第二种就是':448 '等式的左侧我们可以得到一个格点':745 '给定一个数字':194 '综上所述':806 '而右侧我们可以得到一个相对来说较短的向量':746 '而是会偏向这些重合的地方':513 '至少在现在':304 '虽然右侧的向量并不在格点上':784 '观察可以发现':744 '规约':18 '说不定有地雷':828 '说不定那天就踩到了':831 '输出一组整数':197 '近似sivp':796 '这一推理的过程':16 '这个':671 '这个reduction的方法其实不是很好理解':319 '这个函数也是rabin的密码学系统的精髓':54 '这个函数也是难以被invert的':89 '这个函数到底有多难计算呢':70 '这个函数就是计算一个数字':48 '这个数字的分布有很大的关系':213 '这个时候':316,479,514,548,615,665,678,689 '这个时候我们用这种方法生成的随机向量的分布其实并不是均匀的':512 '这个模组有多难被factor':74 '这个矩阵构成的格':294 '这个覆盖半径就是任意一个点可以距离格点最远的距离':475 '这么两个lattice':334 '这也就是说':147,356 '这也就是说平均的看':100 '这些问题':303 '这就代表说左侧的格点向量也是很短的':789 '这就好比是告诉我们有一块地':856 '这就等于说是我们有一块地':824 '这是令人感到很不安心的':832 '这样一来':790 '这样的话我们只能依靠平均困难度的方法来讨论':340 '这种类型的困难度论证被称为最坏情况困难度论证':409 '这种精心挑选随机分布的方法对于':271 '这里':619 '这里的':492 '选择':277 '道理很简单':233 '那么':64,85,107,220 '那么代表':817 '那么代表在':835 '那么在这个新的':252 '那么基于随机取值的':425 '那么基本上整个':851 '那么如果我们均匀的随机生成矩阵':291 '那么它就有一定的几率可以破解我们创造的这个实例':695 '那么对应的算法复杂度也很高':191 '那么就代表我们找到了一个短向量':701 '那么我们也就可以解决这些难题本身':15 '那么我们就可以成功的破解sis':798 '那么我们就可以用这个算法来破解所有其他的':388 '那么我们就可以破解任何平均情况的lattice':804 '那么我们得到的':158 '那么我们能够逆向它的可能性就基于我们随便拿到一个':96 '那么整个取值空间都可以被破解':414 '都会被覆盖住':473 '都会随之被攻破':855 '都可以被拆分成如下的形式':487 '都是安全的':845 '都是难解的':385 '问题':797 '难以factor':190 '难以被factor这一难点来构造系统':28 '首先':570		
574	Lattice学习笔记05：详解SIS	{"ver":2,"uid":1,"hash":"SHA1:4c9b8fc1864eb196ecdc5d35ccfbde6730925b93"}	http://blog.higashi.tech/2020/07/23/lattice_05.html	2020-07-23 07:00:00	<h3 id="cvp与对偶格">CVP与对偶格</h3>\n\n<p>在开始详细学习SIS之前，不妨再来重新回顾一下CVP问题。</p>\n\n<p><img src="/assets/images/lattice/image-20200722220911200.png" alt="image-20200722220911200" /></p>\n\n<p>我们知道，CVP问题就是给定一个任意的点\\(\\mathbf{t} \\in \\mathbb{R}^n\\)，和一个Lattice \\(\\Lambda\\)，找到一个在\\(\\lvert \\lvert \\mathbf{e} \\rvert \\rvert\\)范围内的格点\\(\\mathbf{v} \\in \\Lambda\\)。我们也可以使用格点向量\\(\\mathbf{v}\\)与误差向量\\(\\mathbf{e}\\)的形式来表示我们的目标向量：</p>\n\n\\[\\mathbf{t = v + e}\\]\n\n<p>我们之前也学过对偶格的定义。假设我们找到了\\(\\Lambda\\)的对偶格\\(\\Lambda^\\vee\\)，并且用\\(\\mathcal{L}(\\mathbf{D})\\)来表示。（即\\(\\mathbf{D}\\)是对偶格\\(\\Lambda^\\vee\\)的基向量组成的矩阵。）根据对偶格的定义，对偶格的基向量乘以任何一个\\(\\Lambda\\)中的格点都会得到一个整数。所以我们可以观察一下\\(\\mathbf{D}\\)与\\(\\mathbf{t}\\)的乘积：</p>\n\n\\[\\begin{align*}\ns &amp;= \\langle \\mathbf{D}, \\mathbf{t} \\rangle \\text{ mod }1\\\\\n&amp;= \\langle \\mathbf{D}, \\mathbf{v} \\rangle + \\langle \\mathbf{D}, \\mathbf{e} \\rangle \\text{ mod }1\\\\\n&amp;= \\langle \\mathbf{D}, \\mathbf{e} \\rangle \\text{ mod }1\n\\end{align*}\\]\n\n<p>因为我们知道\\(\\langle \\mathbf{D, v} \\rangle\\)是一个整数，然而\\(\\mathbf{e}\\)并不在格上，所以会得到一个\\(\\mathbb{R}\\)中的任意小数。最后得到的\\(\\mathbf{s}\\)就是表示这个误差特性的一个小数，而且不管\\(\\mathbf{t}\\)在什么方位，其实真正决定了\\(\\mathbf{s}\\)的值的是误差\\(\\mathbf{e}\\)。在译码学中，我们一般把\\(\\mathbf{s}\\)这个数值称作<strong>伴随式译码（syndrome encoding）</strong>。</p>\n\n<p>在有噪信道传输的应用场景中（前文有所提到），我们可以基于格把一个要发送的数据\\(m\\)映射到格点\\(\\mathbf{v}\\)上，然后发送过去。在接受的过程中，因为噪音的原因叠加了一个噪音向量\\(\\mathbf{e}\\)，最后得到了\\(\\mathbf{t = v + e}\\)。这个时候，我们只需要计算\\(\\mathbf{t}\\)的syndrome \\(\\mathbf{s}\\)，就可以得到这个噪音对应的一个独特的数值。</p>\n\n<p>因为噪音本身与格点的方位没有关联，所以我们可以把噪音向量\\(\\mathbf{e}\\)平移很多分，分到所有其他的格点上。</p>\n\n<p><img src="/assets/images/lattice/image-20200722222454962.png" alt="image-20200722222454962" /></p>\n\n<p>我们观察发现，这等于是在这个空间中，按照\\(\\Lambda\\)的Determinant空间分成了很多份，然后每一份的parallelpiped中，都拥有这么一个点可以得到相同的syndrome！如果用集群的方法来表达的话，那么这个噪音向量\\(\\mathbf{e}\\)属于一个coset（陪集）当中，这个coset为：</p>\n\n\\[\\mathbf{t} + \\Lambda = \\{\\mathbf{x} : \\langle \\mathbf{D, x} \\rangle = \\mathbf{s} \\text{ mod }1\\}\\]\n\n<p>当我们知道了syndrome之后，我们知道在整个\\(\\mathbb{R}^n\\)的空间中，存在无限多个可以满足这个syndrome的点。这个时候我们只需要在原点附近，找到一个最短的向量\\(\\mathbf{e}\\)，使得\\(\\langle \\mathbf{D, e} \\rangle = \\mathbf{s} \\text{ mod }1\\)。找到这个向量\\(\\mathbf{e}\\)之后，我们只需要从\\(\\mathbf{t}\\)中减去它，就可以解决CVP问题啦。</p>\n\n<p>通过这种方法解决的CVP问题，我们一般称为<strong>伴随式解码问题（syndrome decoding problem）</strong>。</p>\n\n<h3 id="cvp构造的one-way-function">CVP构造的One-way Function</h3>\n\n<p>知道了CVP问题可以被转化为在一个Lattice的基础空间（即Determinant构成的空间）中搜索一个短向量\\(\\mathbf{e}\\)之后，我们可以根据短向量的和Lattice的基础空间（即Determinant组成的空间），尝试构造出如下的OWF。</p>\n\n<p><img src="/assets/images/lattice/image-20200722230623289.png" alt="image-20200722230623289" /></p>\n\n<p>首先，我们OWF的key就是随机选取一个困难的Lattice \\(\\Lambda\\)。然后输入一个短向量\\(\\mathbf{x}\\)，并且这个向量的长度我们使用\\(\\beta\\)来约束：</p>\n\n\\[\\lvert \\lvert \\mathbf{x} \\rvert \\rvert \\le \\beta\\]\n\n<p>这个OWF的输出非常简单，就是这个短向量在这个Lattice中求模运算得出的结果：</p>\n\n\\[f_\\Lambda(\\mathbf{x}) = \\mathbf{x} \\text{ mod } \\Lambda\\]\n\n<p>上面的图很好的表述了这个OWF做的事情：我们其实就是把一个距离原点半径为\\(\\beta\\)范围内的一个球体中的任意一个向量，映射到了这个Lattice的Determinant组成的基础空间中。这个空间的映射，其实和我们上面说到的syndrome encoding有异曲同工之妙，都是把一个向量映射到了这么一块空间中，只是输出的格式不同而已。</p>\n\n<p>我们如果仔细观察\\(\\beta\\)这个上限的值，会发现这对于我们构造的OWF会有质的影响。</p>\n\n<p>首先，如上图所示，如果\\(\\beta &lt; \\lambda_1(\\Lambda)/2\\)，也就是说\\(\\beta\\)小于了这个格中最短向量的一半的话，我们可以发现，映射到基础空间之后，我们之前的一个球体会被拆分成各个小块散落在每个格点周围。因为格点之间的距离肯定不能短于Lattice的最短向量，而我们球体的半径比最短向量的一半还小，可想而知我们的映射结果不会有任何重合。这种情况下的OWF是单射（injective）的，即每一个映射空间（即基础空间）中的点，都对应了至多一个输入空间中的点。</p>\n\n<p><img src="/assets/images/lattice/image-20200722231510102.png" alt="image-20200722231510102" /></p>\n\n<p>当我们放大\\(\\beta\\)的值，使得\\(\\beta &gt; \\lambda_1/2\\)之后，我们发现很多球面的部分重合了。这说明这个OWF会有多个输入都映射到同一个输出上，即collision。这也就代表了我们构造的OWF \\(f_\\Lambda\\)不再是一个injective的函数。</p>\n\n<p><img src="/assets/images/lattice/image-20200722231606895.png" alt="image-20200722231606895" /></p>\n\n<p>如果我们继续扩大\\(\\beta\\)的值的话，当\\(\\beta\\)大于整个Lattice的覆盖半径之后，即\\(\\beta \\ge \\mu\\)，根据覆盖半径的定义，我们知道整个映射空间都被我们的球体给覆盖住了。这个时候，所有的映射空间中的点都有至少一个对应的输入空间中的点，这个OWF也就变成了一个满射（surjective）的函数了。</p>\n\n<p><img src="/assets/images/lattice/image-20200722231816871.png" alt="image-20200722231816871" /></p>\n\n<p>当然，就像我们之前一篇提到的，我们也可以继续扩大这个圆的半径，使得这个基础空间被基本上均匀覆盖。这样一来，我们就可以说OWF \\(f_\\Lambda(\\mathbf{x})\\)是一个均匀（uniform）覆盖输出空间的OWF了。</p>\n\n<p>这样一个OWF的构造似乎令人满意，并且看似也很难被找到对应的反函数（inverse）。</p>\n\n<h3 id="ajtai提出的owfsis问题">Ajtai提出的OWF：SIS问题</h3>\n\n<p>上文提出的OWF构造的精髓我们其实已经get到了：我们把一个短向量映射到格当中，然后这个映射可以被看作是一个单向的映射，因为很难通过映射本身来找回原始的输入值。但是我们之前看到的体系是基于几何意义上的OWF，在计算机系统中很难被有效的运用</p>\n\n<p>1996年，密码学家Ajtai基于这一思路，提出了在整数格中实现的OWF，即SIS问题（Short Integer Solution）。在前面的笔记中对于SIS已经有所介绍了，我们这里再稍微回顾一下。</p>\n\n<p><img src="/assets/images/lattice/image-20200720132800686.png" alt="image-20200720132800686" /></p>\n\n<p>一个SIS构成的OWF有以下一系列的参数：</p>\n\n<ul>\n  <li>矩阵的维度和模组的大小：\\(m, n, q \\in \\mathbb{Z}\\)。</li>\n  <li>OWF的key：\\(\\mathbf{A} \\in \\mathbb{Z}^{n \\times m}_q\\)，即一个随机的\\(n \\times m\\)阶的矩阵。</li>\n  <li>OWF的输入：\\(\\mathbf{x} \\in \\{0,1\\}^m\\)，即一个长度为\\(m\\)的二进制向量。这里要求二进制的原因是为了确保这个向量的长度足够的短（符合短向量的条件）。理论上也可以使用\\(O(1)\\)范围内任何区间。</li>\n  <li>OWF的输出：\\(f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod }q\\)。</li>\n</ul>\n\n<p>Ajtai在paper中提出，只要矩阵的维度符合\\(m &gt; n \\cdot log(q)\\)这一标准，并且SIVP问题困难的话，那么此\\(f_\\mathbf{A}(\\mathbf{x})\\)就是一个合理的OWF。</p>\n\n<p>我们不禁会问，为什么这是一个OWF呢？在前面的一篇笔记里应该有所提到，不过我们这里可以系统性的来证明一下这个OWF的安全性。</p>\n\n<h3 id="sis的单向性证明">SIS的单向性证明</h3>\n\n<p>我们首先想要证明，基于SIS的OWF真的是One-way的。</p>\n\n<p>即然要讨论One-way，那么我们可以定义一下SIS的反问题：如果给定了矩阵\\(\\mathbf{A}\\)与向量\\(\\mathbf{y}\\)，能否找到一个短向量\\(\\mathbf{x} \\in \\{0, 1\\}^m\\)，并且可以满足\\(\\mathbf{Ax = y} \\text{ mod }q\\)。我们可以经过一些转换，把这个反问题转换为一个Lattice中的问题。</p>\n\n<p>首先，因为这个等式\\(\\mathbf{Ax = y} \\text{ mod }q\\)就是一个普通的线性组合等式，所以我们可以非常轻松的找到一个解\\(\\mathbf{t}\\)，使得\\(\\mathbf{At = y} \\text{ mod }q\\)。只需要使用高斯消除法，我们就可以很简单的找到一个合适的\\(\\mathbf{t}\\)。</p>\n\n<p>虽然\\(\\mathbf{t}\\)好找，但是事实是，通过高斯消除法得到的\\(\\mathbf{t}\\)可能会是一个随机的很大的向量，几乎不可能能找到我们想要的的<strong>短向量</strong>，即一个二进制向量，所以我们并没有解决这个问题。但是因为\\(\\mathbf{x, t}\\)都可以满足这个等式，所以我们就可以运用前面学到的知识，把所有满足\\(\\mathbf{Ax = y}\\)的解向量，都描述为一个coset \\(\\mathbf{t} + \\Lambda^\\perp\\)。这里的\\(\\Lambda^\\perp\\)即垂直于\\(\\Lambda\\)的另一个Lattice：</p>\n\n\\[\\Lambda^\\perp(\\mathbf{A}) = \\{\\mathbf{x} \\in \\mathbb{Z}^m: \\mathbf{Ax = 0} \\text{ mod }q\\}\\]\n\n<p>经过如此转换，我们就可以把问题转换为：如何在coset \\(\\mathbf{t} + \\Lambda^\\perp\\)中找到最短的一个向量\\(\\mathbf{x}\\)。这个最短的向量就是满足我们这个OWF的二进制向量了。这就是一个syndrome decoding problem。</p>\n\n<p>同理可得，我们也可以把这个问题转换为CVP：找到距离\\(\\mathbf{t}\\)最近的一个\\(\\Lambda^\\perp\\)中的格点\\(\\mathbf{v}\\)。最后输出\\(\\mathbf{t - v}\\)就是SIS的答案。</p>\n\n<p>这也就是说，如果要解决SIS的反问题，那么我们起码需要解决CVP问题。因为CVP问题被相信是一个难题，所以SIS不可逆，这也就是个OWF了。</p>\n\n<h3 id="sis的collision-resistance证明">SIS的Collision Resistance证明</h3>\n\n<p>其次，我们还可以证明，SIS是Collision Resistant的（即难以找到碰撞）。碰撞的意思就是说，我们可以找到两个不同的输入\\(\\mathbf{x, y}\\)，使得\\(f_\\mathbf{A}(\\mathbf{x}) = f_\\mathbf{A}(\\mathbf{y})\\)。</p>\n\n<p>这一点我们在之前的一篇文章中也有所描述。如果我们可以找到SIS的碰撞，即两个二进制向量\\(\\mathbf{x, y}\\)，并且\\(\\mathbf{Ax = Ay} \\text{ mod }q\\)，我们可以观察这两个碰撞输入的差：</p>\n\n\\[\\mathbf{z = x - y} \\in \\{-1, 0, 1\\}^m\\]\n\n<p>因为\\(\\mathbf{x, y}\\)都是二进制向量，所以它们相减得到的向量，也是二进制的。（我们可以把-1和1看作是一样的，因为在距离上看是相等的。）这也就是说：</p>\n\n\\[\\mathbf{Az = Ax - Ay =0} \\text{ mod }q\\]\n\n<p>通过找到了一组碰撞，我们就可以找到\\(\\Lambda^\\perp\\)这个Lattice中的一个短向量！这个向量的无限范数\\(\\lvert \\lvert \\mathbf{z} \\rvert \\rvert_\\infty = max_i \\lvert z_i \\rvert = 1\\)。这样一来，我们就等于解决了\\(\\Lambda^\\perp\\)这个格中的SVP（或者SIVP）问题。同理，因为SVP/SIVP是困难的，所以我们不能找到SIS的碰撞啦。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	d79aa93a4ecc955c14c9d0d2ebae5bf4690a984b	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.166647	0			'-1':637 '/2':303 '/sivp':690 '0':412,474,555,638,657 '1':80,95,104,204,226,301,413,422,475,639,680 '1/2':326 '1996年':376 '1和1看作是一样的':650 'a':395,427,447,466,546,610,615 'ajtai在paper中提出':435 'ajtai提出的owf':368 'align':70,106 'at':500,707 'ax':431,479,489,529,554,626,655 'ay':627,656 'az':654 'begin':69 'beta':261,270,284,293,299,305,321,324,336,339,342 'bootcamp':712 'cdot':439 'contents':695 'credits':693 'cvp与对偶格':3 'cvp构造的one':242 'cvp构造的one-way':241 'cvp问题就是给定一个任意的点':7 'd':49,53,64,74,83,89,98,110,197,219 'daniele':703 'decoding':239,571 'e':20,33,38,91,100,116,135,155,160,172,185,215,220,229,249 'encoding':142 'encoding有异曲同工之妙':289 'end':105 'f':273,332,358,425,445,608,613 'from':701 'function':244 'ge':343 'i':675,678 'in':10,26,390,396,411,473,549,636 'infty':673 'injective':314 'institute':710 'integer':381 'inverse':367 'is':699 'l':47 'lambda':15,27,41,43,55,60,178,192,256,274,281,300,302,325,333,359,535,538,541,543,564,579,663,683 'langle':72,81,87,96,108,195,217 'lattice':711 'lattice学习笔记05':1 'le':269 'lecture':706 'log':440 'lvert':17,18,263,264,667,668,676 'm':146,387,401,406,414,416,437,476,552,640 'mathbb':11,119,207,391,397,550 'mathbf':8,19,24,29,32,35,48,52,63,66,73,75,82,84,88,90,97,99,109,115,123,127,131,134,138,148,154,157,163,166,171,184,190,193,196,200,214,218,222,228,232,248,258,265,275,277,360,394,409,426,428,430,446,448,465,468,471,478,488,496,499,507,510,515,522,528,533,545,547,553,562,567,576,582,585,604,609,611,614,616,621,625,632,642,653,669 'mathcal':46 'max':674 'micciancio':704 'mod':79,94,103,203,225,280,433,482,492,503,557,629,659 'mu':344 'n':13,209,388,399,404,438 'o':421 'of':696 'owf的key':393 'owf的输入':408 'owf的输出':424 'perp':536,539,544,565,580,664,684 'post':698 'problem':240,572 'prof':702 'q':389,402,434,441,483,493,504,558,630,660 'r':12,120,208 'rangle':77,86,92,101,112,199,221 'resistance证明':596 'resistant的':600 'rvert':21,22,267,268,671,672,679 's':71,124,132,139,167,201,223,705,709 'short':380 'simon':708 'sis是collision':599 'sis的collision':595 'sis的单向性证明':455 'sis问题':369 'solution':382 'summarized':700 'surjective':350 'syndrome':141,238 't':9,36,67,76,128,158,164,191,233,497,508,511,516,524,534,563,577,586 'text':78,93,102,202,224,279,432,481,491,502,556,628,658 'the':694 'this':697 'times':400,405 'uniform':363 'v':25,30,37,85,111,149,159,583,587 'vee':44,56 'way':243,462 'way的':459 'x':194,198,259,266,276,278,361,410,429,449,472,523,548,568,605,612,622,634,643 'y':469,480,490,501,530,606,617,623,635,644 'z':392,398,551,633,670,677 '一个sis构成的owf有以下一系列的参数':385 '上':150 '上文提出的owf构造的精髓我们其实已经get到了':370 '上面的图很好的表述了这个owf做的事情':282 '不再是一个injective的函数':334 '不妨再来重新回顾一下cvp问题':5 '不过我们这里可以系统性的来证明一下这个owf的安全性':454 '与':65 '与向量':467 '与误差向量':31 '中减去它':234 '中找到最短的一个向量':566 '中搜索一个短向量':247 '中的任意小数':121 '中的格点':581 '中的格点都会得到一个整数':61 '中的点':318 '为什么这是一个owf呢':452 '之后':230,250,327 '也就是说':304 '也是二进制的':647 '会发现这对于我们构造的owf会有质的影响':295 '但是事实是':513 '但是因为':521 '但是我们之前看到的体系是基于几何意义上的owf':374 '使得':216,323,498,607 '使得这个基础空间被基本上均匀覆盖':355 '假设我们找到了':40 '其实和我们上面说到的syndrome':288 '其实真正决定了':130 '其次':597 '几乎不可能能找到我们想要的的短向量':518 '分到所有其他的格点上':174 '前文有所提到':144 '即':51,341 '即collision':330 '即determinant构成的空间':246 '即determinant组成的空间':252 '即sis问题':379 '即一个二进制向量':519 '即一个长度为':415 '即一个随机的':403 '即两个二进制向量':620 '即垂直于':540 '即基础空间':317 '即每一个映射空间':316 '即然要讨论one':461 '即然要讨论one-way':460 '即难以找到碰撞':601 '只是输出的格式不同而已':291 '只要矩阵的维度符合':436 '只需要使用高斯消除法':505 '可想而知我们的映射结果不会有任何重合':312 '可能会是一个随机的很大的向量':517 '同理':688 '同理可得':573 '和一个lattice':14 '因为':641 '因为cvp问题被相信是一个难题':592 '因为svp':689 '因为噪音本身与格点的方位没有关联':169 '因为噪音的原因叠加了一个噪音向量':153 '因为在距离上看是相等的':651 '因为很难通过映射本身来找回原始的输入值':373 '因为我们知道':107 '因为格点之间的距离肯定不能短于lattice的最短向量':310 '因为这个等式':487 '在什么方位':129 '在前面的一篇笔记里应该有所提到':453 '在前面的笔记中对于sis已经有所介绍了':383 '在开始详细学习sis之前':4 '在接受的过程中':152 '在有噪信道传输的应用场景中':143 '在计算机系统中很难被有效的运用':375 '在译码学中':136 '基于sis的owf真的是one':458 '基于sis的owf真的是one-way的':457 '大于整个lattice的覆盖半径之后':340 '好找':512 '如上图所示':297 '如何在coset':561 '如果':298 '如果我们可以找到sis的碰撞':619 '如果我们继续扩大':335 '如果用集群的方法来表达的话':182 '如果给定了矩阵':464 '如果要解决sis的反问题':590 '存在无限多个可以满足这个syndrome的点':211 '密码学家ajtai基于这一思路':377 '对偶格的基向量乘以任何一个':59 '小于了这个格中最短向量的一半的话':306 '尝试构造出如下的owf':253 '就像我们之前一篇提到的':353 '就可以得到这个噪音对应的一个独特的数值':168 '就可以解决cvp问题啦':235 '就是sis的答案':588 '就是一个合理的owf':450 '就是一个普通的线性组合等式':494 '就是表示这个误差特性的一个小数':125 '就是这个短向量在这个lattice中求模运算得出的结果':272 '属于一个coset':186 '平移很多分':173 '并不在格上':117 '并且':624 '并且sivp问题困难的话':443 '并且可以满足':477 '并且用':45 '并且看似也很难被找到对应的反函数':366 '并且这个向量的长度我们使用':260 '当':338 '当中':188 '当我们放大':320 '当我们知道了syndrome之后':205 '当然':352 '我们owf的key就是随机选取一个困难的lattice':255 '我们一般把':137 '我们一般称为伴随式解码问题':237 '我们不禁会问':451 '我们之前也学过对偶格的定义':39 '我们之前的一个球体会被拆分成各个小块散落在每个格点周围':309 '我们也可以使用格点向量':28 '我们也可以把这个问题转换为cvp':574 '我们也可以继续扩大这个圆的半径':354 '我们其实就是把一个距离原点半径为':283 '我们发现很多球面的部分重合了':328 '我们只需要从':231 '我们只需要计算':162 '我们可以发现':307 '我们可以基于格把一个要发送的数据':145 '我们可以找到两个不同的输入':603 '我们可以把':649 '我们可以把-1和1看作是一样的':648 '我们可以根据短向量的和lattice的基础空间':251 '我们可以经过一些转换':484 '我们可以观察这两个碰撞输入的差':631 '我们如果仔细观察':292 '我们就可以很简单的找到一个合适的':506 '我们就可以找到':662 '我们就可以把问题转换为':560 '我们就可以说owf':357 '我们就等于解决了':682 '我们把一个短向量映射到格当中':371 '我们知道':6 '我们知道在整个':206 '我们知道整个映射空间都被我们的球体给覆盖住了':346 '我们观察发现':175 '我们还可以证明':598 '我们这里再稍微回顾一下':384 '我们首先想要证明':456 '或者sivp':686 '所以sis不可逆':593 '所以会得到一个':118 '所以它们相减得到的向量':646 '所以我们不能找到sis的碰撞啦':692 '所以我们可以把噪音向量':170 '所以我们可以观察一下':62 '所以我们可以非常轻松的找到一个解':495 '所以我们就可以运用前面学到的知识':526 '所以我们并没有解决这个问题':520 '所有的映射空间中的点都有至少一个对应的输入空间中的点':348 '找到一个在':16 '找到一个最短的向量':213 '找到距离':575 '找到这个向量':227 '把所有满足':527 '把这个反问题转换为一个lattice中的问题':485 '按照':177 '提出了在整数格中实现的owf':378 '映射到了这个lattice的determinant组成的基础空间中':286 '映射到基础空间之后':308 '映射到格点':147 '是一个均匀':362 '是一个整数':113 '是困难的':691 '是对偶格':54 '最后得到了':156 '最后得到的':122 '最后输出':584 '最近的一个':578 '来约束':262 '来表示':50 '根据对偶格的定义':58 '根据覆盖半径的定义':345 '然后发送过去':151 '然后每一份的parallelpiped中':180 '然后输入一个短向量':257 '然后这个映射可以被看作是一个单向的映射':372 '然而':114 '理论上也可以使用':420 '的':315 '的determinant空间分成了很多份':179 '的syndrome':165 '的乘积':68 '的二进制向量':417 '的值':322 '的值的是误差':133 '的值的话':337 '的函数了':351 '的另一个lattice':542 '的基向量组成的矩阵':57 '的对偶格':42 '的形式来表示我们的目标向量':34 '的空间中':210 '的解向量':531 '知道了cvp问题可以被转化为在一个lattice的基础空间':245 '矩阵的维度和模组的大小':386 '碰撞的意思就是说':602 '符合短向量的条件':419 '经过如此转换':559 '而且不管':126 '而我们球体的半径比最短向量的一半还小':311 '能否找到一个短向量':470 '范围内任何区间':423 '范围内的一个球体中的任意一个向量':285 '范围内的格点':23 '虽然':509 '覆盖输出空间的owf了':364 '详解sis':2 '这一标准':442 '这一点我们在之前的一篇文章中也有所描述':618 '这个coset为':189 '这个lattice中的一个短向量':665 '这个owf也就变成了一个满射':349 '这个owf的输出非常简单':271 '这个上限的值':294 '这个向量的无限范数':666 '这个数值称作伴随式译码':140 '这个时候':161,347 '这个时候我们只需要在原点附近':212 '这个最短的向量就是满足我们这个owf的二进制向量了':569 '这个格中的svp':685 '这个空间的映射':287 '这也就代表了我们构造的owf':331 '这也就是个owf了':594 '这也就是说':589,652 '这就是一个syndrome':570 '这样一个owf的构造似乎令人满意':365 '这样一来':356,681 '这种情况下的owf是单射':313 '这等于是在这个空间中':176 '这说明这个owf会有多个输入都映射到同一个输出上':329 '这里的':537 '这里要求二进制的原因是为了确保这个向量的长度足够的短':418 '通过找到了一组碰撞':661 '通过这种方法解决的cvp问题':236 '通过高斯消除法得到的':514 '那么我们可以定义一下sis的反问题':463 '那么我们起码需要解决cvp问题':591 '那么此':444 '那么这个噪音向量':183 '都可以满足这个等式':525 '都对应了至多一个输入空间中的点':319 '都拥有这么一个点可以得到相同的syndrome':181 '都描述为一个coset':532 '都是二进制向量':645 '都是把一个向量映射到了这么一块空间中':290 '问题':687 '阶的矩阵':407 '陪集':187 '首先':254,296,486		
638	宝塔面板 phpMyAdmin 未授权访问漏洞是个低级错误吗？	{"ver":2,"uid":1,"hash":"SHA1:7a9a45ebaaa329dd09ebd12cc50abfd3d3f1634d"}	https://toutiao.io/k/lbolo7u	2020-08-26 02:10:08	宝塔面板 phpMyAdmin 未授权访问漏洞是个低级错误吗？	4fea46ec08bef82c1e0c0d7e5a59f51f7f0716cf	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.071017	0			'phpmyadmin':2,5 '宝塔面板':1,4 '未授权访问漏洞是个低级错误吗':3,6	zh	
575	Lattice学习笔记04：SIS与LWE问题	{"ver":2,"uid":1,"hash":"SHA1:11223b0d679b99ef5b4a7eb1655838a7c47a1d71"}	http://blog.higashi.tech/2020/07/22/lattice_04.html	2020-07-22 07:00:00	<h3 id="q阶随机格q-ary-random-lattices">q阶随机格（q-ary random lattices）</h3>\n\n<p>在密码学的应用中，一般来说我们都会随机选取一个Lattice来做任何数学运算。这个随机的Lattice的每一个格点都应该是在整数格\\(\\mathbb{Z}^n\\)中的，这样其中的每一个格点的坐标都是整数。</p>\n\n<p>因为计算机系统的特点，并且也为了方便计算，我们一般都会选择一个比较大的数字\\(q\\)来作为我们所有涉及到的数字的上限。</p>\n\n<p>结合上面两条要求，我们一般在密码学算法中用到的格，都被称作q阶随机格（q-ary random lattice）。一个q阶随机Lattice \\(\\Lambda\\)需要满足如下的要求：</p>\n\n\\[q\\mathbb{Z}^n \\subseteq \\Lambda \\subseteq \\mathbb{Z}^n\\]\n\n<p>其中，\\(q\\mathbb{Z}^n\\)代表了包含了一个mod q的循环群。这样一来，所有和q阶Lattice有关的计算，都可以通过q模的数学运算来完成。</p>\n\n<h3 id="生成q阶随机格">生成q阶随机格</h3>\n\n<p>最常见的生成随机格的方式主要为两种。首先，我们都需要随机的生成一个随机矩阵\\(\\mathbf{A} \\in \\mathbb{Z}^{n \\times d}_q\\)。</p>\n\n<p>当我们获得了\\(\\mathbf{A}\\)矩阵之后，我们首先可以做的，就是把这个矩阵的每一行作为我们生成的格的基向量，得到第一个Lattice：</p>\n\n\\[\\Lambda_q(\\mathbf{A}) = \\{\\mathbf{x} : \\mathbf{x} \\text{ mod } q \\in \\mathbf{A}^T \\mathbb{Z}^{n}_q\\} \\subseteq \\mathbb{Z}^d\\]\n\n<p>也就是说，我们得到的格\\(\\Lambda_q\\)，\\(\\mathbf{A}\\)与\\(\\mathbb{Z}^n_q\\)中的所有点的线性组合组成的集合。</p>\n\n<p>除此之外，我们还有一种反过来的方式，可以定义另一个随机格：找到所有的向量\\(\\mathbf{x}\\)，使得\\(\\mathbf{Ax} = 0\\)。</p>\n\n\\[\\Lambda_q^\\perp(\\mathbf{A}) = \\{\\mathbf{x}: \\mathbf{Ax} = 0 \\text{ mod } q\\} \\subseteq \\mathbb{Z}^d\\]\n\n<p>我们生成的这两个Lattice，即\\(\\Lambda_q, \\Lambda_q^\\perp\\)，都符合我们上一部分提到的这个约束，即\\(q\\mathbb{Z}^n \\subseteq \\Lambda \\subseteq \\mathbb{Z}^n\\)。并且值得注意的是，我们根据同一个\\(\\mathbf{A}\\)生成的两个格是完全不一样的两个系统，几乎所有的格点都大相径庭，但是这两个Lattice之间却又有着很微妙的对偶关系。</p>\n\n<h3 id="q阶随机格的对偶关系">q阶随机格的对偶关系</h3>\n\n<p>首先，我们基于同一个随机矩阵\\(\\mathbf{A}\\)，通过这两种方式生成的随机格，\\(\\Lambda_q, \\Lambda_q^\\perp\\)是完全不同的两个矩阵。但是比较有趣的是，如果我们基于\\(\\mathbf{A}\\)得到了\\(\\Lambda_q\\)的话，那么一定存在另一个矩阵\\(\\mathbf{A'}\\)，使得：</p>\n\n\\[\\Lambda_q(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times d}) = \\Lambda_q^\\perp(\\mathbf{A'} \\in \\mathbb{Z}_q^{k \\times d})\\]\n\n<p>同理可得，如果我们根据\\(\\mathbf{A}\\)得到了\\(\\Lambda_q^\\perp\\)的话，那一定也存在一个矩阵\\(\\mathbf{A'}\\)，并且这个矩阵的\\(\\Lambda_q\\)与之前的\\(\\Lambda_q^\\perp\\)相等。这两个生成的q阶随机格之间相互是对偶的关系。具体的关系是这样的：</p>\n\n\\[\\Lambda_q(\\mathbf{A})^\\vee = \\frac{1}{q}\\Lambda_q^\\perp(\\mathbf{A})\\\\\n\\Lambda_q^\\perp(\\mathbf{A})^\\vee = \\frac{1}{q}\\Lambda_q(\\mathbf{A})\\]\n\n<p>我们生成的这两个随机格之间，就是缩放了\\(q\\)倍之后的对偶格。</p>\n\n<h3 id="ajtai提出的one-way-functionsis">Ajtai提出的One-way Function（SIS）</h3>\n\n<p>当我们拥有了这两种随机格的生成方法之后，我们就可以尝试把它用于密码学上的应用了。</p>\n\n<p>密码学中最基础的building block就是单向函数（OWF）了。当我们拥有了OWF之后，就可以基于它建造各种其他的密码学中的组件，比如说伪随机数生成器PRG等等。</p>\n\n<p>Ajtai在1996年提出了基于我们看到的q阶随机格的OWF，并且给出了安全的论证。</p>\n\n<p><img src="/assets/images/lattice/image-20200720132800686.png" alt="image-20200720132800686" /></p>\n\n<p>这个OWF的构造是这样的。首先，我们随机选取一个\\(n \\times m\\)阶的矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{n \\times m}\\)，然后我们这个OWF的输入就是一个二进制向量\\(\\mathbf{x} \\in \\{0,1\\}^m\\)。这个OWF的输出则是：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{x}) = \\mathbf{Ax} \\text{ mod } q\\]\n\n<p>也就是说，我们任意选择一个二进制的短向量，这个向量和随机矩阵的乘积就是OWF的输出了。这个OWF输出的值，其实就是\\(\\Lambda_q(\\mathbf{A})\\)中的一个格点。</p>\n\n<p>还有一个比较有趣的地方，因为\\(f_\\mathbf{A}(\\mathbf{x})\\)其实就是和矩阵\\(\\mathbf{A}\\)的乘积，根据定义，另一个Lattice \\(\\Lambda_q^\\perp\\)中的所有格点\\(\\mathbf{v} \\in \\Lambda_q^\\perp\\)在这个OWF中的输出都会是零：</p>\n\n\\[f_\\mathbf{A}(\\mathbf{v} \\in \\Lambda_q^\\perp) = 0 \\text{ mod }q\\]\n\n<p>这样的关系在线性代数中，我们一般称\\(\\Lambda_q^\\perp(\\mathbf{A})\\)为\\(f_\\mathbf{A}\\)的kernel（核）。这也就是说，只要能够找到一个短向量\\(\\mathbf{v} \\in \\Lambda_q^\\perp\\)，已知向量\\(\\mathbf{x}\\)以及OWF的结果\\(f_\\mathbf{A}(\\mathbf{x})\\)，我们就可以找到这个OWF的一个collision：</p>\n\n\\[\\begin{align*}\nf_\\mathbf{A}(\\mathbf{x + v}) &amp;= \\mathbf{A}(\\mathbf{x + v})\\\\\n&amp;= \\mathbf{Ax + Av} (\\text{mod }q)\\\\\n&amp;= \\mathbf{Ax}\\ (\\text{mod }q)\\\\\n&amp;= f_\\mathbf{A}(\\mathbf{x})\n\\end{align*}\\]\n\n<p>当我们把OWF的输入格式reduce成一个向量\\(\\mathbf{x}\\)加上对偶格中的某个格点\\(\\mathbf{v}\\)之后，根据OWF的输出还原出\\(\\mathbf{x}\\)就变成了一个CVP问题：问题给出的向量就是\\(\\mathbf{t} = \\mathbf{x} + \\Lambda_q^\\perp(\\mathbf{A})\\)，然后我们只要能够找到附近的格点\\(\\mathbf{v}\\)，就可以相减算出\\(\\mathbf{x}\\)了。</p>\n\n<p>不过呢，这里我们不一定要找到最近的那个解，因为这个OWF有collision的存在，所以任何一个合适的格点都可以。这也就是说我们这里变相的是在求解ADD版本的CVP问题啦。</p>\n\n<p>因为Ajtai的这个OWF基于的是未知的短向量作为输入，所以我们一般把这个体系描述为Short Integer Solution（SIS）问题。根据我们上面推理所得，SIS大致上就可以规约到approximate版的ADD问题上来，然后ADD问题又可以进一步reduce到SIVP问题上。这样SIS的困难度就可想而知了。</p>\n\n<h3 id="regev提出的learning-with-errorslwe">Regev提出的Learning With Errors（LWE）</h3>\n\n<p>2015年的时候，Regev提出了一个新的基于格的难题，即LWE问题。</p>\n\n<p>LWE我们在之前介绍FHE的文章中讲过了，这次主要了解一下在已知的格中难题上的规约。</p>\n\n<p><img src="/assets/images/lattice/image-20200720161748498.png" alt="image-20200720161748498" /></p>\n\n<p>一个LWE的定义是这样的。首先，我们随机的选取一个矩阵\\(\\mathbf{A} \\in \\mathbb{Z}_q^{m \\times k}\\)，一个随机向量\\(\\mathbf{s} \\in \\mathbb{Z}_q^k\\)，和一个随机的噪音\\(\\mathbf{e} \\in \\varepsilon^m\\)。我们定义一个LWE系统的输出\\(g_\\mathbf{A}(\\mathbf{s, e})\\)为：</p>\n\n\\[g_\\mathbf{A}(\\mathbf{s, e}) = \\mathbf{As + e} \\text{ mod }q\\]\n\n<p>一个LWE问题就是，给定一个矩阵\\(\\mathbf{A}\\)，和LWE系统的输出\\(g_\\mathbf{A}(\\mathbf{s, e})\\)，还原\\(\\mathbf{s}\\)。</p>\n\n<p>首先我们可以观察一下，如果噪音\\(\\mathbf{e}\\)是0的话，那么LWE系统输出的\\(\\mathbf{As}\\)其实就是Lattice \\(\\Lambda(\\mathbf{A^T})\\)中的一个格点。这也就是说，加入噪音不是0的话，那么我们得到的结果就是在\\(\\Lambda\\)的某个格点附近的一个向量。这个时候，我们就只需要求解CVP问题，就可以还原出这个格点了。我们之前也探讨过，CVP问题可以被规约到SIVP问题的求解上来。</p>\n\n<p>Regev在05年的paper中正式定义了：如果最坏情况的SIVP问题很难求解，那么LWE的问题函数\\(g_\\mathbf{A}(\\mathbf{s, e})\\)就很难被invert。这也就是说LWE问题的困难度是基于最坏情况的SIVP困难度的。</p>\n\n<p>一般来说，我们需要用这个矩阵\\(\\mathbf{A}\\)形成的Lattice \\(\\Lambda\\)来决定噪音\\(\\mathbf{e}\\)的大小。不过一般的话：</p>\n\n\\[\\lvert \\lvert \\mathbf{e} \\rvert \\rvert \\le \\frac{1}{2} \\lvert \\lvert \\lambda_1(\\Lambda(\\mathbf{A}^T)) \\rvert \\rvert\\]\n\n<p>在这个噪音范围之内，我们可以确保一定能还原出一开始问题指定的\\(\\mathbf{s}\\)上来。因为这个范围的限制，和我们之前看到的BDD是一样的，所以LWE问题可以被规约成approximate版本的BDD问题。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	1b34bef544bbc1340f68a28ff83eaf28517d2fcb	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.16958	0			'0':117,127,296,353 '1':236,250,297,585,590 '2':586 '2015年的时候':466 'a':58,68,76,86,101,122,157,165,176,183,188,200,211,219,233,242,247,255,284,302,318,324,329,346,363,367,384,392,397,414,439,475,500,507,520,524,542,560,569,593 'ajtai在1996年提出了基于我们看到的q阶随机格的owf':274 'ajtai提出的one':261 'ajtai提出的one-way':260 'align':389,418 'ary':6,27 'as':512,538 'at':619 'av':403 'ax':116,126,306,402,408 'begin':388 'block就是单向函数':268 'bootcamp':624 'contents':607 'credits':605 'cvp问题可以被规约到sivp问题的求解上来':554 'd':64,95,134,195,207 'daniele':615 'e':493,503,510,513,527,534,563,574,580 'end':417 'errors':464 'f':300,322,344,365,382,390,412 'frac':235,249,584 'from':613 'function':263 'g':498,505,522,558 'in':59,84,189,201,285,295,339,349,374,476,486,494 'institute':622 'integer':454 'is':611 'k':205,482,490 'lambda':31,38,73,98,118,137,139,149,167,169,178,185,196,213,221,224,230,238,243,252,315,333,340,350,359,375,435,540,548,571,589,591 'lattice':29,623 'lattices':8 'lattice学习笔记04':1 'le':583 'lecture':618 'lvert':577,578,587,588 'lwe':465 'lwe我们在之前介绍fhe的文章中讲过了':469 'm':281,291,298,480,496 'mathbb':12,34,40,45,60,88,93,103,132,145,151,190,202,286,477,487 'mathbf':57,67,75,77,79,85,100,112,115,121,123,125,156,164,175,182,187,199,210,218,232,241,246,254,283,293,301,303,305,317,323,325,328,337,345,347,362,366,372,379,383,385,391,393,396,398,401,407,413,415,420,423,427,431,433,438,441,444,474,484,492,499,501,506,508,511,519,523,525,529,533,537,541,559,561,568,573,579,592,599 'micciancio':616 'mod':82,129,308,355,405,410,515 'n':14,36,42,47,62,90,105,147,153,193,279,289 'of':608 'owf':269 'perp':120,141,171,198,215,226,240,245,335,342,352,361,377,437 'post':610 'prof':614 'q':5,20,26,33,44,65,74,83,91,99,106,119,130,138,140,144,168,170,179,186,192,197,204,214,222,225,231,237,239,244,251,253,258,288,309,316,334,341,351,356,360,376,406,411,436,479,489,516 'q-ary':4,25 'q的循环群':49 'q阶随机格':3 'q阶随机格的对偶关系':161 'random':7,28 'regev在05年的paper中正式定义了':555 'regev提出了一个新的基于格的难题':467 'regev提出的learning':462 'rvert':581,582,595,596 's':485,502,509,526,530,562,600,617,621 'simon':620 'sis':264,456 'sis与lwe问题':2 'sis大致上就可以规约到approximate版的add问题上来':459 'solution':455 'subseteq':37,39,92,131,148,150 'summarized':612 't':87,432,543,594 'text':81,128,307,354,404,409,514 'the':606 'this':609 'times':63,194,206,280,290,481 'v':338,348,373,395,400,424,442 'varepsilon':495 'vee':234,248 'way':262 'with':463 'x':78,80,113,124,294,304,326,380,386,394,399,416,421,428,434,445 'z':13,35,41,46,61,89,94,104,133,146,152,191,203,287,478,488 '一个lwe的定义是这样的':471 '一个lwe问题就是':517 '一个q阶随机lattice':30 '一个随机向量':483 '一般来说':566 '一般来说我们都会随机选取一个lattice来做任何数学运算':10 '上来':601 '不过一般的话':576 '不过呢':447 '与':102 '与之前的':223 '中的':15 '中的一个格点':319,544 '中的所有格点':336 '中的所有点的线性组合组成的集合':107 '为':364,504 '之后':425 '也就是说':96,310 '了':270,446 '代表了包含了一个mod':48 '以及owf的结果':381 '但是比较有趣的是':173 '但是这两个lattice之间却又有着很微妙的对偶关系':160 '使得':114,184 '倍之后的对偶格':259 '其中':43 '其实就是':314 '其实就是lattice':539 '其实就是和矩阵':327 '具体的关系是这样的':229 '几乎所有的格点都大相径庭':159 '加上对偶格中的某个格点':422 '加入噪音不是0的话':546 '即':136,143 '即lwe问题':468 '另一个lattice':332 '只要能够找到一个短向量':371 '可以定义另一个随机格':110 '同理可得':208 '和lwe系统的输出':521 '和一个随机的噪音':491 '和我们之前看到的bdd是一样的':603 '因为':321 '因为ajtai的这个owf基于的是未知的短向量作为输入':452 '因为计算机系统的特点':17 '因为这个owf有collision的存在':449 '因为这个范围的限制':602 '在密码学的应用中':9 '在这个owf中的输出都会是零':343 '在这个噪音范围之内':597 '如果噪音':532 '如果我们基于':174 '如果我们根据':209 '如果最坏情况的sivp问题很难求解':556 '密码学中最基础的building':267 '就变成了一个cvp问题':429 '就可以基于它建造各种其他的密码学中的组件':272 '就可以相减算出':443 '就可以还原出这个格点了':552 '就很难被invert':564 '就是把这个矩阵的每一行作为我们生成的格的基向量':71 '就是缩放了':257 '已知向量':378 '并且也为了方便计算':18 '并且值得注意的是':154 '并且给出了安全的论证':275 '并且这个矩阵的':220 '当我们把owf的输入格式reduce成一个向量':419 '当我们拥有了owf之后':271 '当我们拥有了这两种随机格的生成方法之后':265 '当我们获得了':66 '形成的lattice':570 '得到了':177,212 '得到第一个lattice':72 '我们一般在密码学算法中用到的格':23 '我们一般称':358 '我们一般都会选择一个比较大的数字':19 '我们之前也探讨过':553 '我们任意选择一个二进制的短向量':311 '我们可以确保一定能还原出一开始问题指定的':598 '我们基于同一个随机矩阵':163 '我们定义一个lwe系统的输出':497 '我们就只需要求解cvp问题':551 '我们就可以尝试把它用于密码学上的应用了':266 '我们就可以找到这个owf的一个collision':387 '我们得到的格':97 '我们根据同一个':155 '我们生成的这两个lattice':135 '我们生成的这两个随机格之间':256 '我们还有一种反过来的方式':109 '我们都需要随机的生成一个随机矩阵':56 '我们随机的选取一个矩阵':473 '我们随机选取一个':278 '我们需要用这个矩阵':567 '我们首先可以做的':70 '所以lwe问题可以被规约成approximate版本的bdd问题':604 '所以任何一个合适的格点都可以':450 '所以我们一般把这个体系描述为short':453 '所有和q阶lattice有关的计算':51 '找到所有的向量':111 '是0的话':535 '是完全不同的两个矩阵':172 '最常见的生成随机格的方式主要为两种':54 '来作为我们所有涉及到的数字的上限':21 '来决定噪音':572 '核':369 '根据owf的输出还原出':426 '根据定义':331 '根据我们上面推理所得':458 '比如说伪随机数生成器prg等等':273 '然后add问题又可以进一步reduce到sivp问题上':460 '然后我们只要能够找到附近的格点':440 '然后我们这个owf的输入就是一个二进制向量':292 '生成q阶随机格':53 '生成的两个格是完全不一样的两个系统':158 '的kernel':368 '的乘积':330 '的大小':575 '的某个格点附近的一个向量':549 '的话':180,216 '相等':227 '矩阵之后':69 '结合上面两条要求':22 '给定一个矩阵':518 '还原':528 '还有一个比较有趣的地方':320 '这两个生成的q阶随机格之间相互是对偶的关系':228 '这个owf的构造是这样的':276 '这个owf的输出则是':299 '这个owf输出的值':313 '这个向量和随机矩阵的乘积就是owf的输出了':312 '这个时候':550 '这个随机的lattice的每一个格点都应该是在整数格':11 '这也就是说':370,545 '这也就是说lwe问题的困难度是基于最坏情况的sivp困难度的':565 '这也就是说我们这里变相的是在求解add版本的cvp问题啦':451 '这样sis的困难度就可想而知了':461 '这样一来':50 '这样其中的每一个格点的坐标都是整数':16 '这样的关系在线性代数中':357 '这次主要了解一下在已知的格中难题上的规约':470 '这里我们不一定要找到最近的那个解':448 '通过这两种方式生成的随机格':166 '那一定也存在一个矩阵':217 '那么lwe的问题函数':557 '那么lwe系统输出的':536 '那么一定存在另一个矩阵':181 '那么我们得到的结果就是在':547 '都可以通过q模的数学运算来完成':52 '都符合我们上一部分提到的这个约束':142 '都被称作q阶随机格':24 '问题':457 '问题给出的向量就是':430 '阶的矩阵':282 '除此之外':108 '需要满足如下的要求':32 '首先':55,162,277,472 '首先我们可以观察一下':531		
577	Lattice学习笔记02：格中难题	{"ver":2,"uid":1,"hash":"SHA1:7cfd38d7fc47441dd8e5e8cc88f9f24643e8186f"}	http://blog.higashi.tech/2020/07/19/lattice_02.html	2020-07-19 07:00:00	<h3 id="svp问题shortest-vector-problem">SVP问题（Shortest Vector Problem）</h3>\n\n<p>一个Lattice中最常见的问题，就是最短向量问题（SVP，Shortest Vector Problem）。问题的定义是这样的：给定一个基为\\(\\mathbf{B}\\)的Lattice \\(\\mathcal{L}(\\mathbf{B})\\)，找到一个这个基构成的格点\\(\\mathbf{Bx}: \\mathbf{x}\\)，使得这个点距离0坐标点的距离最近。</p>\n\n\\[\\mathbf{Bx}: \\mathbf{x} \\in \\mathbb{Z}^k\\\\\n\\lvert \\lvert \\mathbf{Bx} \\rvert \\rvert \\le \\lambda_1\\]\n\n<p>观察发现，因为\\(\\lambda_1\\)已经是这个格中点和点之间的最短距离了，所以\\(\\mathbf{Bx}\\)距离0点的距离其实也不会小于\\(\\lambda_1\\)，最多是等于罢了。</p>\n\n<p><img src="/assets/images/lattice/image-20200717145301607.png" alt="image-20200717145301607" /></p>\n\n<p>图中给出了一个比较经典的例子，加入我们拥有一组格的基向量\\(\\mathbf{B} = [\\mathbf{b}_1, \\mathbf{b}_2]\\)，我们可以找到一个点\\(\\mathbf{Bx}\\)，即\\(5\\mathbf{b}_1 - 2\\mathbf{b}_2\\)对应的这个点，正好就是这个格的最短向量\\(\\lambda_1\\)。</p>\n\n<p>当然，如果我们拿到的基不是很好，其实计算严格的SVP（即找出\\(\\lambda_1\\)）是一个很难的事情，所以SVP这个问题也有个宽松的版本：\\(SVP_\\gamma\\)。</p>\n\n<p>在\\(SVP_\\gamma\\)中，问题的设定大致一样，但是唯一不一样的在于，我们找到的点\\(\\mathbf{Bx}\\)，并不一定需要恰好是最短向量\\(\\lambda_1\\)，而只要满足小于等于\\(\\lambda_1\\)的一个倍数\\(\\gamma\\)就行了。</p>\n\n\\[\\mathbf{Bx}: \\mathbf{x} \\in \\mathbb{Z}^k\\\\\n\\lvert \\lvert \\mathbf{Bx} \\rvert \\rvert \\le \\gamma \\lambda_1\\]\n\n<p><img src="/assets/images/lattice/image-20200717150215197.png" alt="image-20200717150215197" /></p>\n\n<p>图上显示的就是当\\(\\gamma = 2\\)的情况。这个时候我们的\\(SVP_\\gamma\\)问题就有很多个解了。</p>\n\n<h3 id="cvp问题closest-vector-problem">CVP问题（Closest Vector Problem）</h3>\n\n<p>Lattice中另一大常见的问题，就是最近向量问题（CVP，Closest Vector Problem）了。问题的定义是这样的：给定连续空间中任意的一个点\\(\\mathbf{t}\\)，找到距离这个点最近的格点\\(\\mathbf{Bx}\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200717151925631.png" alt="image-20200717151925631" /></p>\n\n\\[\\mathbf{Bx}: \\mathbf{x} \\in \\mathbb{Z}^k\\\\\n\\lvert \\lvert \\mathbf{Bx - t} \\rvert \\rvert \\le \\mu\\]\n\n<p>这里我们的约束距离\\(\\mu\\)就是这个Lattice的覆盖半径（即所有可能的\\(\\mathbf{t}\\)中距离格点最长的距离）。同理可得，我们也可以得到CVP的宽松版，即\\(CVP_\\gamma\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200717153405176.png" alt="image-20200717153405176" /></p>\n\n\\[\\mathbf{Bx}: \\mathbf{x} \\in \\mathbb{Z}^k\\\\\n\\lvert \\lvert \\mathbf{Bx - t} \\rvert \\rvert \\le \\gamma\\mu\\]\n\n<p>加上一个宽松的参数\\(\\gamma\\)之后，CVP问题就会变得简单一些，解的数量也变多了。</p>\n\n<h3 id="sivp问题shortest-independent-vectors-problem">SIVP问题（Shortest Independent Vectors Problem）</h3>\n\n<p>Lattice中第三大重要的问题，就是最短独立向量问题。问题定义：给定一个Lattice \\(\\mathcal{L}(\\mathbf{B})\\)，找到\\(n\\)个线性独立的向量\\(\\mathbf{Bx_1, \\dots, Bx_n}\\)并且这些向量的长度都要小于等于最长的最短向量\\(\\lambda_n\\)。</p>\n\n\\[\\max_i \\lvert \\lvert \\mathbf{Bx_i} \\rvert \\rvert \\le \\lambda_n\\]\n\n<p><img src="/assets/images/lattice/image-20200717175016362.png" alt="image-20200717175016362" /></p>\n\n<p>这个图就很好的表达了在\\(n=2\\)的情况下，我们找到了两个小于等于\\(\\lambda_2\\)的点。和SVP与CVP问题一样，我们也可以给出SIVP问题的宽松版定义，即\\(SIVP_\\gamma\\)。在宽松版本中，我们只需要找到\\(\\gamma \\lambda_n\\)范围内的就可以了。</p>\n\n<p><img src="/assets/images/lattice/image-20200717175135011.png" alt="image-20200717175135011" /></p>\n\n<h3 id="基于lattice的信息传输">基于Lattice的信息传输</h3>\n\n<p>学会了SVP，CVP，SIVP这三件套之后，就可以来了解一下如何通过Lattice来进行可靠的消息传输了。</p>\n\n<p>我们要解决的问题是在一个有噪音的信道中可靠的传输信息（Reliable transmission of information over noisy channels）。结合Lattice的概念之后，其实实现起来很简单。</p>\n\n<p><img src="/assets/images/lattice/image-20200717185838566.png" alt="image-20200717185838566" /></p>\n\n<p>首先，我们把需要传输的消息映射到Lattice中的一个点上，即\\(\\mathbf{Bx}\\)，然后我们把\\(\\mathcal{L}, \\mathbf{Bx}\\)发送出去。在接收端我们得到的数据会产生一定程度的偏移，在图上反馈出来就是偏移到了\\(\\mathbf{t}\\)这个点上。我们只需要解决CVP问题，就可以找到原本的格点\\(\\mathbf{Bx}\\)，然后就可以还原出\\(m\\)了。</p>\n\n<p>在解决CVP问题的时候，我们还需要知道这个Lattice中最短向量\\(\\lambda_1\\)的值来判断CVP问题是不是能够求解出原本的那个点\\(\\mathbf{Bx}\\)。我们需要通过求解SVP问题来得到\\(\\lambda_1\\)。</p>\n\n<p>最后，SIVP问题在这里也有所适用。如果我们在传输的过程中为了压缩数据使用了向量量化（Vector Quantization）的方法，在重建向量的时候，需要用到SIVP的解来修复误差。</p>\n\n<h3 id="cvp问题的两种版本">CVP问题的两种版本</h3>\n\n<p>我们再次系统性的定义一下CVP问题。</p>\n\n<p>给定一个Lattice \\(\\mathcal{L}\\)，与一个随机点\\(\\mathbf{t}\\)还有搜索距离\\(d\\)，并且假设\\(\\mu(\\mathbf{t}, \\mathcal{L}) \\le d\\)，CVP问题是让我们找到一个合理的格点\\(\\mathbf{Bx} \\in \\mathcal{L}\\)并且这个点到\\(\\mathbf{t}\\)的距离小于等于\\(d\\)。</p>\n\n<p>CVP问题对于搜索的范围和结果的大小已经有所约束了，但是并没有约束一共有多少结果和范围究竟有多大。所以CVP问题又可以细分为两种主要的版本。</p>\n\n<h4 id="bddbounded-distance-decoding问题">BDD（Bounded Distance Decoding）问题</h4>\n\n<p>BDD问题规定了\\(d &lt; \\lambda_1(\\mathbf{L})/2\\)，也就是说\\(d\\)小于最短向量的一半。并且这个CVP问题最多只有一个唯一的解（at most 1 solution），并且这个解一定是距离\\(\\mathbf{t}\\)最近的格点。</p>\n\n<h4 id="addabsolute-distance-decoding问题">ADD（Absolute Distance Decoding）问题</h4>\n\n<p>ADD问题则不同，规定了\\(d \\ge \\mu(\\mathbf{L})\\)，也就是说\\(d\\)大于整个格的覆盖半径了。这个时候，这个CVP问题至少会有一个解（at least 1 solution），但是我们找到的解并不一定是距离\\(\\mathbf{t}\\)最近的格点。</p>\n\n<h3 id="lattice难题之间的相互联系">Lattice难题之间的相互联系</h3>\n\n<p>我们之前提到的SVP，CVP，以及CVP下面的BDD，ADD，都是公认的很难在多项式时间内有效解决的难题。我们来看一看这些难题之间的关联性。</p>\n\n<p><img src="/assets/images/lattice/image-20200717212310011.png" alt="image-20200717212310011" /></p>\n\n<p>最近的二三十年来的各种paper逐渐的把这些难度的关系给证明了出来。具体的后面再详细研究。</p>\n\n<h3 id="add问题规约到sivp问题上">ADD问题规约到SIVP问题上</h3>\n\n<p>上一部分的图中，我们发现ADD和SIVP问题被归为同一层（困难度）。这是因为经过一系列的变换，我们可以把ADD问题规约到SIVP问题上。</p>\n\n<p><img src="/assets/images/lattice/image-20200717212820210.png" alt="image-20200717212820210" /></p>\n\n<p>假设我们需要求解\\(ADD(\\mathcal{L}, \\mathbf{t})\\)，我们可以首先用SIVP算法得到这个Lattice的\\(n\\)个独立最短向量\\(\\mathbf{V} = SIVP(\\mathcal{L})\\)。一旦得到了\\(\\mathbf{V}\\)之后，我们就可以选取这些向量作为基，平分整个多维空间\\(\\mathbb{R}^n\\)。然后我们只需要看\\(\\mathbf{t}\\)在那个分区中，然后向上或者向下取整一下，找到那个分区对应的格点，就是我们ADD问题的解了。</p>\n\n<p>因为我们是使用了取整的操作来找到格点的，所以这个解的格点到\\(\\mathbf{t}\\)的距离，我们也可以找到一个最大的上限，即：</p>\n\n\\[\\sum_i \\frac{1}{2} \\lvert \\lvert \\mathbf{v}_i \\rvert \\rvert \\le (n/2)\\lambda_n \\le n \\mu\\]\n\n<h3 id="lattice的几何构造">Lattice的几何构造</h3>\n\n<p>分析Lattice问题的时候，几何结构是一个非常强有力的工具。</p>\n\n<p>举个例子，在最简单的笛卡尔坐标系整数格\\(\\mathbb{Z}^n\\)中，CVP问题是非常简单的。给定任意一个点\\(\\mathbf{t}\\)，\\(CVP(\\Lambda, \\mathbf{t}) = \\lfloor \\mathbf{t} \\rceil\\)。这也就是说我们只需要通过上下取整，就可以非常快速的的解决\\(\\mathbb{Z}^n\\)中的CVP问题。</p>\n\n<p>为什么\\(\\mathbb{Z}^n\\)这么好解呢？这是因为\\(\\mathbb{Z}^n\\)中的基向量都是相互垂直的（orthogonal basis）。这也就是说，如果我们可以把一个任意的Lattice \\(\\Lambda\\)转换为一个垂直基的格，那么就可以非常轻松的的解决CVP了。</p>\n\n<p>我们对把一个Lattice的基进行变换，找到一组非常接近垂直的基的过程，称之为<strong>Lattice Basis Reduction</strong>。这一过程在LLL82这一篇中有详细的描述。</p>\n\n<h3 id="gram-schmidt正交化">Gram-Schmidt正交化</h3>\n\n<p>一个比较常见的Basis Reduction方法是Gram-Schmidt正交化过程。假设我们拥有一个格的基\\(\\mathbf{B} = [ \\mathbf{b_1, \\dots, b_n}]\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200717220436623.png" alt="image-20200717220436623" /></p>\n\n<p>在这个Lattice中，我们发现这两个基向量是不垂直的。接下来，我们尝试找到一组互相垂直的基\\(\\mathbf{B^*}\\)。</p>\n\n\\[\\begin{align*}\n\\mathbf{b}_i^* &amp;\\in \\mathbf{b}_i + [\\mathbf{b}_1, \\dots, \\mathbf{b}_{i-1}]\\mathbb{R}^{i-1}\\\\\n\\mathbf{b}_i^* &amp;\\perp \\mathbf{b}_1, \\dots, \\mathbf{b}_{i-1}\n\\end{align*}\\]\n\n<p>在图中的这个案例中，一共有两个基向量，即\\(\\mathbf{b}_1, \\mathbf{b}_2\\)。我们首先根据以上等式，得到了第一个垂直基\\(\\mathbf{b}_1^* = \\mathbf{b}_1\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200717220832874.png" alt="image-20200717220832874" /></p>\n\n<p>确定了\\(\\mathbf{b}_1^*\\)之后，我们可以计算第二个基\\(\\mathbf{b}_2^*\\)。因为\\(\\mathbf{b}_2^*\\)就是原本的\\(\\mathbf{b}_2\\)再加上\\(\\mathbf{b}_1\\)的任意线性组合，我们可以把这个取值范围用一条线来表示。</p>\n\n<p><img src="/assets/images/lattice/image-20200717225557997.png" alt="image-20200717225557997" /></p>\n\n<p>随后，我们可以选取在这一条线上符合条件的一个向量作为\\(\\mathbf{b}_2^*\\)，即与\\(\\mathbf{b}_1^*\\)垂直。</p>\n\n<p><img src="/assets/images/lattice/image-20200717225916536.png" alt="image-20200717225916536" /></p>\n\n<p>这样一来，我们就得到了一组新的相互垂直的基\\(\\mathbf{B^*}\\)。仔细观察，我们会发现新的基向量并不在原本的Lattice内，所以\\(\\mathbf{B^*}\\)并不是原本的格\\(\\mathbf{B}\\mathbb{Z}^n\\)的基。但是值得注意的是，新的这组基组成的Determinant覆盖的空间（长方形），和原本的Lattice的基\\(\\mathbf{B}\\)的Determinant覆盖的（平行四边形）的大小是一样的。我们可以一组等式约束一下这个原有的Lattice \\(\\Lambda\\)：</p>\n\n\\[det(\\Lambda) = \\prod_i \\lvert \\lvert \\mathbf{b}_i^* \\rvert \\rvert \\le \\prod_i \\lvert \\lvert \\mathbf{b}_i \\rvert \\vert\\]\n\n<p><img src="/assets/images/lattice/image-20200718162529108.png" alt="image-20200718162529108" /></p>\n\n<h3 id="lattice-rounding取整问题">Lattice Rounding（取整）问题</h3>\n\n<p>之前说过，如果一个Lattice的基向量是互相垂直的（orthogonal），那么在这个Lattice中解决CVP问题是非常简单的。我们只需要根据这个点\\(\\mathbf{t}\\)的位置，向上或者向下取整，就可以找到最近的格点了。</p>\n\n<p>对于没有垂直基的Lattice，比如说我们这里看到的\\(\\mathbf{B}\\)，我们可以通过Gram-Schmidt正交化的方法，找到一组拥有相同Determinant的垂直基\\(\\mathbf{B^*}\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200718184822434.png" alt="image-20200718184822434" /></p>\n\n<p>我们可以用这组垂直基\\(\\mathbf{B^*}\\)构成的Determinant空间来平分整个空间\\(\\mathbb{R}^n\\)。然后我们可以稍微的平移一下平分的空间，使得原本的Lattice \\(\\Lambda\\)的点都在长方形的中央。</p>\n\n<p><img src="/assets/images/lattice/image-20200718185109408.png" alt="image-20200718185109408" /></p>\n\n<p>这样一来，我们可以把任意的一个点\\(\\mathbf{t}\\)取整到原本的Lattice中的一个点\\(\\mathbf{v} \\in \\Lambda\\)上来。因为我们是在做向上或者向下取整的操作，所以\\(\\mathbf{t, v}\\)这两个点上的距离不能超过长方体对角线长度的一半。</p>\n\n\\[\\lvert \\lvert \\mathbf{t - v} \\rvert \\rvert \\le \\frac{1}{2} \\sqrt{\\sum_i \\lvert \\lvert \\mathbf{b}_i^* \\rvert \\rvert ^2}\\]\n\n<p><img src="/assets/images/lattice/image-20200718185656771.png" alt="image-20200718185656771" /></p>\n\n<p>当我们做取整操作的时候，因为几何形状的原因，最后的得到的结果格点和CVP问题的真正解会略有误差。比如我们看上图，如果\\(\\mathbf{t}\\)的落点在内圈的这个小圆内，那么我们取整得到的一定会是CVP的正确解。如果用等式描述一下的话，那就是：</p>\n\n\\[\\lvert \\lvert \\mathbf{t - v} \\rvert \\rvert \\le \\min \\lvert \\lvert \\mathbf{b}_i^* \\rvert \\rvert / 2\\]\n\n<p>只要满足这一条件，那么我们通过取整操作就能解决CVP。如果落点在外圈圆的话，那么很有可能就会被取整到隔壁的格点上去，那么那个点就不是最近的了。</p>\n\n<p>Babai86提出了Nearest Plane Algorithm，这一算法正式的指出了取整方法可以逼近CVP问题的答案。这个算法说明了，我们Gram-Schmidt拿到的\\(\\mathbf{B^*}\\)，可以找到一个在\\(\\sqrt{n} \\cdot \\frac{\\max_i \\lvert \\vert \\mathbf{b}_i^* \\rvert \\rvert}{\\max_i \\lvert \\vert \\mathbf{b}_i \\rvert \\rvert}\\)的误差范围内的CVP解。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	f9c20aa89730b0d3631a9c61c00e74801e932848	\N	f	2020-08-24 08:10:00	2020-08-24 21:10:03.985538	0			'-1':559,563,575 '/2':362 '1':44,48,55,63,74,82,88,104,107,128,225,304,310,359,369,394,455,533,554,570,583,591,594,598,615,626,736 '2':66,75,78,131,246,250,456,586,603,607,611,622,737,748,776 '5':71 'absolute':376 'add':375,404,416 'add问题则不同':380 'add问题规约到sivp问题上':409 'algorithm':784 'align':544,577 'at':367,392,830 'b':16,21,60,62,65,73,77,219,530,532,535,542,546,550,553,557,565,569,573,582,585,590,593,597,602,606,610,614,621,625,631,636,639,649,662,672,693,699,702,744,772,791,802,811 'babai86提出了nearest':782 'basis':509,518 'bdd':351 'bdd问题规定了':356 'begin':543 'bootcamp':835 'bounded':352 'bx':24,29,39,52,69,101,112,122,154,156,166,185,195,224,227,237,282,287,297,307,339 'cdot':795 'channels':275 'closest':138,144 'contents':818 'credits':816 'cvp':143,182,265,402,484 'cvp问题':137 'cvp问题对于搜索的范围和结果的大小已经有所约束了':348 'cvp问题就会变得简单一些':205 'cvp问题是让我们找到一个合理的格点':337 'cvp问题是非常简单的':480 'cvp问题的两种版本':319 'd':328,336,347,357,364,382,388 'daniele':826 'decoding':354,378 'det':655 'distance':353,377 'dots':226,534,555,571 'end':576 'frac':454,735,796 'from':824 'gamma':92,95,109,126,130,135,183,200,203,256,259 'ge':383 'gram':522 'gram-schmidt正交化':521 'i':233,238,453,461,547,551,558,562,566,574,658,663,668,673,740,745,773,798,803,807,812 'in':32,115,159,188,340,548,718 'independent':209 'information':272 'institute':833 'is':822 'k':35,118,162,191 'l':19,217,285,323,334,342,361,386,418,428 'lambda':43,47,54,81,87,103,106,127,230,242,249,260,303,309,358,466,485,512,654,656,709,719 'lattice':676,834 'lattice中另一大常见的问题':141 'lattice中第三大重要的问题':212 'lattice学习笔记02':1 'lattice的几何构造':471 'lattice难题之间的相互联系':400 'le':42,125,170,199,241,335,464,468,666,734,767 'least':393 'lecture':829 'lfloor':488 'lvert':36,37,119,120,163,164,192,193,234,235,457,458,659,660,669,670,727,728,741,742,760,761,769,770,799,808 'm':299 'mathbb':33,116,160,189,435,476,494,499,504,560,640,704 'mathbf':15,20,23,25,28,30,38,51,59,61,64,68,72,76,100,111,113,121,150,153,155,157,165,176,184,186,194,218,223,236,281,286,291,296,306,325,331,338,344,360,372,385,397,419,424,430,439,447,459,482,486,489,529,531,541,545,549,552,556,564,568,572,581,584,589,592,596,601,605,609,613,620,624,630,635,638,648,661,671,685,692,698,701,713,716,723,729,743,754,762,771,790,801,810 'mathcal':18,216,284,322,333,341,417,427 'max':232,797,806 'micciancio':827 'min':768 'most':368 'mu':171,173,201,330,384,470 'n':221,228,231,243,245,261,422,437,467,469,478,496,501,506,536,642,706,794 'n/2':465 'noisy':274 'of':271,819 'orthogonal':508,682 'over':273 'perp':567 'plane':783 'post':821 'problem':6,12,140,146,211 'prod':657,667 'prof':825 'quantization':315 'r':436,561,705 'rceil':491 'reduction':519 'reduction方法是gram':526 'reduction方法是gram-schmidt正交化过程':525 'reliable':269 'rounding':677 'rvert':40,41,123,124,168,169,197,198,239,240,462,463,664,665,674,732,733,746,747,765,766,774,775,804,805,813,814 's':828,832 'schmidt拿到的':789 'schmidt正交化':523 'schmidt正交化的方法':696 'schmidt正交化过程':527 'shortest':4,10,208 'simon':831 'sivp':255,426 'sivp这三件套之后':266 'sivp问题':207 'sivp问题在这里也有所适用':312 'solution':370,395 'sqrt':738,793 'sum':452,739 'summarized':823 'svp':9,91,94,134 'svp问题':3 't':151,167,177,196,292,326,332,345,373,398,420,440,448,483,487,490,686,714,724,730,755,763 'the':817 'this':820 'transmission':270 'v':425,431,460,717,725,731,764 'vector':5,11,139,145,314 'vectors':210 'vert':675,800,809 'x':26,31,114,158,187 'z':34,117,161,190,477,495,500,505,641 '一个lattice中最常见的问题':7 '一个比较常见的basis':524 '一共有两个基向量':579 '一旦得到了':429 '上一部分的图中':410 '上来':720 '与一个随机点':324 '个独立最短向量':423 '个线性独立的向量':222 '中':96,479 '中的cvp问题':497 '中的基向量都是相互垂直的':507 '中距离格点最长的距离':178 '为什么':498 '举个例子':474 '之前说过':680 '之后':204,432,599 '也就是说':363,387 '了':147,300 '仔细观察':632 '以及cvp下面的bdd':403 '但是值得注意的是':644 '但是唯一不一样的在于':98 '但是并没有约束一共有多少结果和范围究竟有多大':349 '但是我们找到的解并不一定是距离':396 '使得原本的lattice':708 '使得这个点距离0坐标点的距离最近':27 '假设我们拥有一个格的基':528 '假设我们需要求解':415 '其实实现起来很简单':277 '其实计算严格的svp':85 '具体的后面再详细研究':408 '再加上':612 '几何结构是一个非常强有力的工具':473 '分析lattice问题的时候':472 '加上一个宽松的参数':202 '加入我们拥有一组格的基向量':58 '即':70,181,254,280,451,580 '即与':623 '即所有可能的':175 '即找出':86 '发送出去':288 '取整':678 '取整到原本的lattice中的一个点':715 '只要满足这一条件':777 '可以找到一个在':792 '同理可得':179 '向上或者向下取整':688 '和svp与cvp问题一样':252 '和原本的lattice的基':647 '因为':46,604 '因为几何形状的原因':750 '因为我们是使用了取整的操作来找到格点的':445 '因为我们是在做向上或者向下取整的操作':721 '困难度':412 '图上显示的就是当':129 '图中给出了一个比较经典的例子':57 '在':93 '在图上反馈出来就是偏移到了':290 '在图中的这个案例中':578 '在宽松版本中':257 '在接收端我们得到的数据会产生一定程度的偏移':289 '在最简单的笛卡尔坐标系整数格':475 '在解决cvp问题的时候':301 '在这个lattice中':537 '在那个分区中':441 '在重建向量的时候':317 '垂直':627 '基于lattice的信息传输':263 '大于整个格的覆盖半径了':389 '如果':753 '如果一个lattice的基向量是互相垂直的':681 '如果我们可以把一个任意的lattice':511 '如果我们在传输的过程中为了压缩数据使用了向量量化':313 '如果我们拿到的基不是很好':84 '如果用等式描述一下的话':758 '如果落点在外圈圆的话':779 '学会了svp':264 '对于没有垂直基的lattice':690 '对应的这个点':79 '小于最短向量的一半':365 '就可以找到原本的格点':295 '就可以找到最近的格点了':689 '就可以来了解一下如何通过lattice来进行可靠的消息传输了':267 '就可以非常快速的的解决':493 '就是原本的':608 '就是我们add问题的解了':444 '就是最短向量问题':8 '就是最短独立向量问题':213 '就是最近向量问题':142 '就是这个lattice的覆盖半径':174 '就行了':110 '已经是这个格中点和点之间的最短距离了':49 '平分整个多维空间':434 '平行四边形':651 '并不一定需要恰好是最短向量':102 '并不是原本的格':637 '并且假设':329 '并且这个cvp问题最多只有一个唯一的解':366 '并且这个点到':343 '并且这个解一定是距离':371 '并且这些向量的长度都要小于等于最长的最短向量':229 '当我们做取整操作的时候':749 '当然':83 '得到了第一个垂直基':588 '我们gram':788 '我们gram-schmidt拿到的':787 '我们之前提到的svp':401 '我们也可以得到cvp的宽松版':180 '我们也可以找到一个最大的上限':450 '我们也可以给出sivp问题的宽松版定义':253 '我们会发现新的基向量并不在原本的lattice内':633 '我们再次系统性的定义一下cvp问题':320 '我们发现add和sivp问题被归为同一层':411 '我们发现这两个基向量是不垂直的':538 '我们只需要找到':258 '我们只需要根据这个点':684 '我们只需要解决cvp问题':294 '我们可以一组等式约束一下这个原有的lattice':653 '我们可以找到一个点':67 '我们可以把add问题规约到sivp问题上':414 '我们可以把任意的一个点':712 '我们可以把这个取值范围用一条线来表示':617 '我们可以用这组垂直基':700 '我们可以计算第二个基':600 '我们可以选取在这一条线上符合条件的一个向量作为':619 '我们可以通过gram':695 '我们可以通过gram-schmidt正交化的方法':694 '我们可以首先用sivp算法得到这个lattice的':421 '我们对把一个lattice的基进行变换':515 '我们尝试找到一组互相垂直的基':540 '我们就可以选取这些向量作为基':433 '我们就得到了一组新的相互垂直的基':629 '我们找到了两个小于等于':248 '我们找到的点':99 '我们把需要传输的消息映射到lattice中的一个点上':279 '我们来看一看这些难题之间的关联性':406 '我们要解决的问题是在一个有噪音的信道中可靠的传输信息':268 '我们还需要知道这个lattice中最短向量':302 '我们需要通过求解svp问题来得到':308 '我们首先根据以上等式':587 '所以':50,634,722 '所以cvp问题又可以细分为两种主要的版本':350 '所以svp这个问题也有个宽松的版本':90 '所以这个解的格点到':446 '找到':220 '找到一个这个基构成的格点':22 '找到一组拥有相同determinant的垂直基':697 '找到一组非常接近垂直的基的过程':516 '找到距离这个点最近的格点':152 '找到那个分区对应的格点':443 '接下来':539 '新的这组基组成的determinant覆盖的空间':645 '是一个很难的事情':89 '最后':311 '最后的得到的结果格点和cvp问题的真正解会略有误差':751 '最多是等于罢了':56 '最近的二三十年来的各种paper逐渐的把这些难度的关系给证明了出来':407 '最近的格点':374,399 '构成的determinant空间来平分整个空间':703 '格中难题':2 '正好就是这个格的最短向量':80 '比如我们看上图':752 '比如说我们这里看到的':691 '然后向上或者向下取整一下':442 '然后就可以还原出':298 '然后我们只需要看':438 '然后我们可以稍微的平移一下平分的空间':707 '然后我们把':283 '的determinant覆盖的':650 '的lattice':17 '的一个倍数':108 '的任意线性组合':616 '的位置':687 '的值来判断cvp问题是不是能够求解出原本的那个点':305 '的基':643 '的大小是一样的':652 '的情况':132 '的情况下':247 '的方法':316 '的点':251 '的点都在长方形的中央':710 '的落点在内圈的这个小圆内':756 '的误差范围内的cvp解':815 '的距离':449 '的距离小于等于':346 '确定了':595 '称之为lattice':517 '结合lattice的概念之后':276 '给定一个lattice':215,321 '给定一个基为':14 '给定任意一个点':481 '给定连续空间中任意的一个点':149 '而只要满足小于等于':105 '范围内的就可以了':262 '观察发现':45 '规定了':381 '解的数量也变多了':206 '距离0点的距离其实也不会小于':53 '转换为一个垂直基的格':513 '还有搜索距离':327 '这一算法正式的指出了取整方法可以逼近cvp问题的答案':785 '这一过程在lll82这一篇中有详细的描述':520 '这两个点上的距离不能超过长方体对角线长度的一半':726 '这个cvp问题至少会有一个解':391 '这个图就很好的表达了在':244 '这个时候':390 '这个时候我们的':133 '这个点上':293 '这个算法说明了':786 '这么好解呢':502 '这也就是说':510 '这也就是说我们只需要通过上下取整':492 '这是因为':503 '这是因为经过一系列的变换':413 '这样一来':628,711 '这里我们的约束距离':172 '那么在这个lattice中解决cvp问题是非常简单的':683 '那么就可以非常轻松的的解决cvp了':514 '那么很有可能就会被取整到隔壁的格点上去':780 '那么我们取整得到的一定会是cvp的正确解':757 '那么我们通过取整操作就能解决cvp':778 '那么那个点就不是最近的了':781 '那就是':759 '都是公认的很难在多项式时间内有效解决的难题':405 '长方形':646 '问题':355,379,679 '问题定义':214 '问题就有很多个解了':136 '问题的定义是这样的':13,148 '问题的设定大致一样':97 '随后':618 '需要用到sivp的解来修复误差':318 '首先':278		
576	Lattice学习笔记03：对偶格（Dual Lattice）	{"ver":2,"uid":1,"hash":"SHA1:1e090e768baa4deb83c513d0675eaac1160cdad0"}	http://blog.higashi.tech/2020/07/20/lattice_03.html	2020-07-20 07:00:00	<h3 id="对偶格dual-lattice">对偶格（Dual Lattice）</h3>\n\n<p>线性空间里面一个很重要的概念就是对偶空间（Dual Space）。一个线性空间\\(V \\in \\mathbb{R}\\)的对偶空间就包括了所有从\\(V \\rightarrow \\mathbb{R}\\)的线性变换函数。</p>\n\n<p>同理可得，一个Lattice也有它对应的对偶空间，即这个空间中的每一个元素都是一个把这个格中的元素\\(\\mathbf{v} \\in \\mathcal{L} \\rightarrow \\mathbb{Z}\\)映射到整数空间中的线性变换。一般来说我们可以用一个向量来表达线性变换，所以也就是说一个Lattice的对偶空间就是一组向量，而这些向量乘以格中的任意格点，都可以得到一个\\(\\mathbb{Z}\\)中的元素。</p>\n\n<p>再换句话来说，也就是说这些对偶的向量，乘以任意Lattice中的格点向量，都能得到一个整数。这些向量本身就组成了另一个Lattice，我们把这个新的Lattice成为对偶格（Dual Lattice）。</p>\n\n<p>系统性的定义的话，一个Lattice \\(\\Lambda\\)的对偶格\\(\\Lambda^\\vee\\)就是一组向量\\(\\mathbf{x} \\in span(\\Lambda)\\)并且满足：</p>\n\n\\[\\forall \\mathbf{v} \\in \\Lambda: \\langle \\mathbf{x}, \\mathbf{v} \\rangle \\in \\mathbb{Z}\\]\n\n<p>我们拿最常见的笛卡尔整数格\\(\\mathbb{Z}^n\\)举个例子。</p>\n\n<p><img src="/assets/images/lattice/image-20200719173900650.png" alt="image-20200719173900650" /></p>\n\n<p>由于\\(\\mathbb{Z}^n\\)中的每个格点对应的向量都是整数，所以任何整数向量和它的乘积也都是整数，即：</p>\n\n\\[(\\mathbb{Z}^n)^\\vee = \\mathbb{Z}^n\\]\n\n<p>我们在上面的图中可以看出，这个格与它的对偶格是一样的，所以格点都重合了。</p>\n\n<p><img src="/assets/images/lattice/image-20200719174312946.png" alt="image-20200719174312946" /></p>\n\n<p>如果我们给原来的格叠加了一个线性变换\\(\\mathbf{R}\\)（这里是旋转），那么新的Lattice \\(\\mathbf{R}\\Lambda\\)的对偶格可以通过旋转变换原本的对偶格来得到。</p>\n\n\\[(\\mathbf{R}\\Lambda)^\\vee = \\mathbf{R}(\\Lambda^\\vee)\\]\n\n<p>这个原因也很简单，假如我们拥有在\\(\\Lambda\\)中的格点与对偶格点\\(\\mathbf{v, x}\\)，和一组在\\(\\mathbf{R}\\Lambda\\)中的\\(\\mathbf{v', x'}\\)。已知了\\(\\mathbf{v'}\\)是旋转了\\(\\mathbf{v}\\)得到的。因为旋转一对向量并不会改变向量之间的乘积，所以我们只需要对应的旋转\\(\\mathbf{x}\\)，即\\(\\mathbf{Rx}\\)，就能保证乘积不变，也能得到整数。</p>\n\n\\[\\mathbf{v'} = \\mathbf{Rv}\\\\\n\\mathbf{x'} = \\mathbf{Rx}\\\\\n\\langle \\mathbf{v, x} \\rangle = \\langle \\mathbf{v', x'} \\rangle\\]\n\n<p>同理可得，如果我们缩放了一个Lattice \\(\\Lambda\\)，使得它的格点扩大/缩小了\\(q\\)倍的话，为了保证点乘的乘积相同，最后得到的对偶格的大小就要对应的变成\\(q/1\\)倍。</p>\n\n\\[(q \\cdot \\Lambda)^\\vee = \\frac{1}{q} \\cdot \\Lambda^\\vee\\]\n\n<p>仔细观察可以发现，不管是什么样的Lattice，格和对偶格之间有一些基本的关系：</p>\n\n\\[\\Lambda_1 \\subseteq \\Lambda \\iff \\Lambda_1^\\vee \\supseteq \\Lambda_2^\\vee\\\\\n(\\Lambda^\\vee)^\\vee = \\Lambda\\]\n\n<p>我们可以把对偶格理解成是一个格的“倒数”，因为很多时候它们之间的关系是反过来的。</p>\n\n<p><img src="/assets/images/lattice/image-20200719181616326.png" alt="image-20200719181616326" /></p>\n\n<p>在笛卡尔整数格\\(\\mathbb{Z}^n\\)中，对偶格看起来很好理解，因为和原本的格长得也差不多。但是实际上对偶格和格本身其实并没有太大的几何上的关联，我们最好把对偶格里面的每一个向量理解成一个“线性变换函数“，而不是一个几何上的格点。</p>\n\n<p>比如说上图中这个斜过来的格，它的对偶格就和本身没有任何几何上的关联。</p>\n\n<p><img src="/assets/images/lattice/image-20200719181648543.png" alt="image-20200719181648543" /></p>\n\n<p>我们只需要牢记格与对偶格之间唯一需要满足的就是任意两个格点之间相乘，乘积一定是在\\(\\mathbb{Z}\\)中的整数。并且只有相乘这个操作有意义，加法是没有几何意义的。</p>\n\n<h3 id="lattice分层">Lattice分层</h3>\n\n<p>当我们得到了一个Lattice \\(\\Lambda\\)的对偶格\\(\\Lambda^\\vee\\)之后，我们可以做一件很有趣的事情：给原有的Lattice分层。</p>\n\n<p><img src="/assets/images/lattice/image-20200719192527940.png" alt="image-20200719192527940" /></p>\n\n<p>我们知道对偶格中的每一个格点都可以和原本的格中的任何格点相乘并且得到一个整数。我们可以选定一个对偶格中的点\\(\\mathbf{v} \\in \\Lambda^\\vee\\)，然后让原本的格中的所有点都和这个点相乘。最后我们观察所有的乘积结果的大小，并且把所有得到相同结果的格点都分为“一层”\\(L_i\\)。</p>\n\n\\[L_i = \\left\\{\\mathbf{x} \\in \\Lambda: \\mathbf{x} \\cdot \\mathbf{v} = i\\right\\}\\]\n\n<p>接着，如果我们再选取另一个对偶格中的点\\(\\mathbf{v'}\\)，然后又可以得到另一组不一样的分层。</p>\n\n<p><img src="/assets/images/lattice/image-20200719192751661.png" alt="image-20200719192751661" /></p>\n\n<p>我们观察会发现，这个分层的密度和层与层之间的距离都不一样。这个距离，其实是与选取的对偶格中的向量\\(\\mathbf{v}\\)的长度成反比的。</p>\n\n\\[Dist(L_i, L_{i+1}) = \\frac{1}{\\lvert \\lvert \\mathbf{v} \\rvert \\rvert}\\]\n\n<p>这代表了什么呢？我们可以用对偶格向量的长度来逼近原本的\\(\\Lambda\\)这个格的覆盖半径！</p>\n\n<p><img src="/assets/images/lattice/image-20200719193019343.png" alt="image-20200719193019343" /></p>\n\n\\[\\mu(\\Lambda) \\ge \\frac{1}{2 \\lvert \\lvert \\mathbf{v} \\rvert \\rvert}\\]\n\n<p>我们知道，所有的\\(\\Lambda\\)中的格点都只能在每一层上面，所以层与层之间的缝隙里是不会有任何格点的。同理我们就可以塞一个圆进去，而这个圆的半径一定得小于等于整个格的覆盖半径。</p>\n\n<p>这是因为，覆盖半径是在\\(\\mathbb{R}^n\\)空间中任意选取一个点，这个点到附近的格点的最远距离。因为我们知道了对偶格点构成的分层之间的距离，所以覆盖半径肯定要大于等于这个距离。</p>\n\n<p>这也就是说，我们可以在这个对偶格中任意选择一个点，然后找到对应的分层距离，就可以逼近原本的格的最大半径了。因为选择的\\(\\mathbf{v}\\)的长度越短，我们得到的分层距离越大，所以理论上这个对偶格\\(\\Lambda^\\vee\\)的最短向量\\(\\lambda_1(\\Lambda^\\vee)\\)构成的分层距离，就是我们能逼近的最大上限了。这也就是说，如果\\(\\lambda_1(\\Lambda^\\vee)\\)比较短的话，那么\\(\\mu(\\Lambda)\\)对应的也会比较大。反之也是如此。</p>\n\n<h3 id="banaszczyk定理">Banaszczyk定理</h3>\n\n<p>我们之前观察到的Lattice的覆盖半径的大小与对偶格的最短向量长度的反比例关系，被Banaszczyk总结成了定理。首先，对于任何的Lattice \\(\\mathcal{L}\\)：</p>\n\n\\[1 \\le 2 \\lambda_1(\\mathcal{L}) \\cdot \\mu(\\mathcal{L}^\\vee) \\le n\\]\n\n<p>这一点规定了覆盖半径与对偶格最短向量这两个值之间的乘积一定会在一个\\(n\\)上限的范围内。同时，我们不仅可以对应最短的向量与最大的覆盖半径，我们还可以对应其他的短向量：</p>\n\n\\[1 \\le \\lambda_i(\\mathcal{L}) \\cdot \\lambda_{n-i+1}(\\mathcal{L}^\\vee) \\le n\\]\n\n<p>这也就是说，我们可以把一个格中的最短向量和它的对偶格中的最短向量一一对应起来，找到它们之间的关系。如果我们要找一个格\\(\\Lambda\\)的最短向量\\(\\lambda_1\\)，我们不妨先找到对偶格\\(\\Lambda^\\vee\\)的覆盖半径\\(\\mu(\\Lambda^\\vee)\\)，然后再根据上面的关系式来逼近我们想要的结果。</p>\n\n<h3 id="bdd问题规约到sivp">BDD问题规约到SIVP</h3>\n\n<p>学习完对偶格（Dual Lattice）的概念之后，我们就可以把上一篇笔记中看过的BDD问题，即至多只有一个解，并且搜索的半径小于\\(\\lambda_1/2\\)的CVP问题，规约到SIVP问题上来。</p>\n\n<p><img src="/assets/images/lattice/image-20200720001026184.png" alt="image-20200720001026184" /></p>\n\n<p>首先，假设我们在一个格\\(\\Lambda\\)中，给定一个\\(\\mathbb{R}^n\\)中的随机点\\(\\mathbf{t}\\)，然后求解BDD。</p>\n\n<p><img src="/assets/images/lattice/image-20200720001114433.png" alt="image-20200720001114433" /></p>\n\n<p>我们第一步可以做的是，先找到这个格的对偶格\\(\\Lambda^\\vee\\)，并且在这个对偶格中求解SIVP问题，得到对应的一组最短向量\\(\\mathbf{V} = SIVP(\\Lambda^\\vee)\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200720001322384.png" alt="image-20200720001322384" /></p>\n\n<p>得到这一组最短向量\\(\\mathbf{V}\\)之后，我们依次选择其中的每一个向量\\(\\mathbf{v}_i\\)，然后根据这个向量对于格\\(\\Lambda\\)进行分层，然后找到距离\\(\\mathbf{t}\\)最近的一层\\(L_i\\)。上图展示了第一个向量得到的分层。</p>\n\n<p><img src="/assets/images/lattice/image-20200720002853440.png" alt="image-20200720002853440" /></p>\n\n<p>当我们重复这个操作\\(n\\)次之后，就会得到\\(n\\)个不同的分层。这个时候我们就可以把这些分层的交汇点拿到，这就是BDD问题的解了。这是因为SIVP的解拿给我们的都是线性独立的向量，所以我们根据这个向量构成的\\(n-1\\)维的hyperplane分层之间也是相互独立的，这些平面也会相聚在一个点上。</p>\n\n\\[BDD(\\Lambda, \\mathbf{t}) = L_1 \\cap L_2 \\cap \\dots \\cap L_n\\]\n\n<p>这个依靠SIVP的算法基本上可以解决大部分BDD问题。但是为了确保我们输出的结果是BDD问题的正确解，我们还需要额外的加上一个约束：</p>\n\n\\[\\mu(\\mathbf{t}, \\Lambda) \\le \\frac{\\lambda_1}{2n} \\le \\frac{1}{2\\lambda_n^\\vee} \\le \\frac{1}{2\\lvert \\lvert \\mathbf{v}_i \\rvert \\rvert}\\]\n\n<p>我们需要规定这个BDD问题给定的向量\\(\\mathbf{t}\\)需要距离最近的格点在\\(\\frac{\\lambda_1}{2n}\\)的范围之内的时候，这个方法就可以找到正确的解。这个不等式的后半部分可以根据上面的Banaszczyk定理得到。</p>\n\n<p>这一约束，对于BDD问题原本的定义\\(\\mu(\\mathbf{t}, \\Lambda) \\le \\lambda_1/2\\)要限制多了不少，但是已经是一个很强大的算法了。</p>\n\n<h3 id="lattice中的模modulo-a-lattice">Lattice中的模（Modulo a Lattice）</h3>\n\n<p>另一个对于对偶格的用处，在于Lattice的模运算。</p>\n\n<p>我们知道一个Lattice \\(\\mathcal{L}\\)是一组在\\(\\mathbb{R}^n\\)中离散的格点。这些格点之间可以相加，并且最后还是会得到\\(\\mathcal{L}\\)中的格点。因为拥有这一特性，\\((\\mathcal{L}, +)\\)被称为\\((\\mathbb{R}^n, +)\\)的一个Additive Subgroup（加法子群？）。</p>\n\n<p>因为这一特性，根据群理论，我们可以构成一个Quotient Group（商群？），即\\(\\mathbb{R}^n/\\mathcal{L}\\)。</p>\n\n<p><img src="/assets/images/lattice/image-20200720005451355.png" alt="image-20200720005451355" /></p>\n\n<p>这个概念看起来比较烧脑，其实理解起来很简单。就像我们平时\\(mod\\ n\\)一样，我们可以把整个多维空间用这个Lattice的Determinant组成的多面体平分成多份。如果我们仔细观察上面图中\\(\\mathcal{P}\\)的阴影部分上覆盖的格点，会发现这上面的格点的分布规则和隔壁每一个一样的多面体上面的分布是一模一样的。</p>\n\n<p>这也就是说我们可以把任何一个空间中的点使用<strong>格求模</strong>的方法，压缩到\\(\\mathcal{P}\\)这么大的范围中，并且这就足够表示这个点在空间中距离其他的格点的位置了。</p>\n\n<p>同理可得，如果我们观察上图下方\\(\\mathbf{c_1, c_2}\\)组成的基形成的阴影部分，即Determinant组成的空间，我们会发现这一部分也可以很好的切割整个\\(\\mathbb{R}^n\\)的空间，所以我们也可以基于这一组基进行求模。</p>\n\n<p>在这个Quotient Group中的一个向量，我们可以用\\(\\mathbf{t} + \\mathcal{L}\\)来表示。</p>\n\n<p>对于这个向量，我们其实还有另外一种表达方式：</p>\n\n\\[(\\mathbf{B}^\\vee)\\mathbf{t} \\text{ (mod 1)}\\]\n\n<p>这个向量可以用对偶格的基向量乘上\\(\\mathbf{t}\\)得到的一个数字，然后取小数点部分来表示。注意这里因为\\(\\mathbf{t}\\)并不在格点上，所以对偶空间基向量乘上它不会得到整数。这个小数点后面的部分，就可以独立的代表这个Quotient Group中的每一个元素。这算是一个把群元素映射到\\(\\mathbb{R}\\)上的一种小技巧。</p>\n\n<hr />\n\n<h2 id="credits">Credits</h2>\n\n<p>The contents of this post is summarized from Prof. <a href="https://cseweb.ucsd.edu/~daniele/">Daniele Micciancio</a>’s lecture at Simon’s Institute Lattice Bootcamp.</p>	d53c54202d90887f15cc440543b9d23a2623b9d6	\N	f	2020-08-24 08:10:00	2020-09-10 01:10:05.17184	0			'+1':280,390 '-1':476 '1':180,189,194,282,297,335,343,359,363,379,403,484,503,507,514,529,607,635 '1/2':421,542 '2':198,298,361,487,508,515,609 '2n':504,530 'a':547 'at':667 'b':629 'banaszczyk定理':352 'bdd':479 'bdd问题规约到sivp':412 'bootcamp':672 'c':606,608 'cap':485,488,490 'cdot':176,182,258,366,385 'contents':655 'credits':653 'daniele':663 'dist':275 'dots':489 'dual':3,6,9,47,414 'forall':62 'frac':179,281,296,501,506,513,527 'from':661 'ge':295 'group':577 'group中的一个向量':619 'group中的每一个元素':648 'i':248,250,261,277,279,382,389,454,463,520 'iff':192 'in':13,27,58,65,73,240,254 'institute':670 'is':659 'l':29,247,249,276,278,358,365,369,384,392,462,483,486,491,553,562,566,584,624 'lambda':51,53,60,66,105,109,113,117,125,166,177,183,188,191,193,197,200,203,229,231,241,255,291,294,307,331,334,336,342,344,349,362,381,386,400,402,405,409,420,426,438,445,456,480,499,502,509,528,539,541 'langle':67,154,159 'lattice':4,7,48,415,548,671 'lattice中的模':545 'lattice分层':227 'lattice学习笔记03':1 'le':360,371,380,394,500,505,512,540 'lecture':666 'left':251 'lvert':283,284,299,300,516,517 'mathbb':14,19,31,38,74,77,82,88,92,208,222,314,429,555,568,580,613,650 'mathbf':25,56,63,68,70,99,103,107,111,119,123,127,131,134,139,142,146,148,150,152,155,160,238,252,256,259,265,272,285,301,326,433,442,448,452,459,481,497,518,524,537,605,621,628,631,637,642 'mathcal':28,357,364,368,383,391,552,561,565,583,593,599,623 'micciancio':664 'mod':588,634 'modulo':546 'mu':293,348,367,408,496,536 'n':79,84,90,94,210,316,372,374,388,395,431,466,469,475,492,510,557,570,582,589,615 'n-i':387 'of':656 'p':594,600 'post':658 'prof':662 'q':169,175,181 'q/1':173 'r':15,20,100,104,108,112,124,315,430,556,569,581,614,651 'rangle':72,158,163 'right':262 'rightarrow':18,30 'rv':149 'rvert':287,288,303,304,521,522 'rx':143,153 's':665,669 'simon':668 'sivp':444 'space':10 'span':59 'subgroup':572 'subseteq':190 'summarized':660 'supseteq':196 't':434,460,482,498,525,538,622,632,638,643 'text':633 'the':654 'this':657 'v':12,17,26,64,71,120,128,132,135,147,156,161,239,260,266,273,286,302,327,443,449,453,519 'vee':54,91,110,114,178,184,195,199,201,202,232,242,332,337,345,370,393,406,410,439,446,511,630 'x':57,69,121,129,140,151,157,162,253,257 'z':32,39,75,78,83,89,93,209,223 '一个lattice':50 '一个lattice也有它对应的对偶空间':23 '一个线性空间':11 '一层':246 '一样':590 '一般来说我们可以用一个向量来表达线性变换':34 '上图展示了第一个向量得到的分层':464 '上的一种小技巧':652 '上限的范围内':375 '不管是什么样的lattice':186 '个不同的分层':470 '中':211,427 '中的':126 '中的元素':40 '中的整数':224 '中的格点':563 '中的格点与对偶格点':118 '中的格点都只能在每一层上面':308 '中的每个格点对应的向量都是整数':85 '中的随机点':432 '中离散的格点':558 '为了保证点乘的乘积相同':171 '举个例子':80 '之后':233,450 '乘以任意lattice中的格点向量':43 '乘积一定是在':221 '也就是说这些对偶的向量':42 '也能得到整数':145 '仔细观察可以发现':185 '会发现这上面的格点的分布规则和隔壁每一个一样的多面体上面的分布是一模一样的':596 '但是为了确保我们输出的结果是bdd问题的正确解':494 '但是实际上对偶格和格本身其实并没有太大的几何上的关联':214 '但是已经是一个很强大的算法了':544 '使得它的格点扩大':167 '倍':174 '倍的话':170 '倒数':205 '假如我们拥有在':116 '假设我们在一个格':425 '先找到这个格的对偶格':437 '其实是与选取的对偶格中的向量':271 '其实理解起来很简单':586 '再换句话来说':41 '加法子群':573 '加法是没有几何意义的':226 '即':87,141,579 '即determinant组成的空间':611 '即至多只有一个解':418 '即这个空间中的每一个元素都是一个把这个格中的元素':24 '压缩到':598 '反之也是如此':351 '另一个对于对偶格的用处':549 '同时':376 '同理可得':22,164,603 '同理我们就可以塞一个圆进去':310 '和一组在':122 '商群':578 '因为和原本的格长得也差不多':213 '因为很多时候它们之间的关系是反过来的':206 '因为我们知道了对偶格点构成的分层之间的距离':319 '因为拥有这一特性':564 '因为旋转一对向量并不会改变向量之间的乘积':137 '因为这一特性':574 '因为选择的':325 '在于lattice的模运算':550 '在笛卡尔整数格':207 '在这个quotient':618 '如果':341 '如果我们仔细观察上面图中':592 '如果我们再选取另一个对偶格中的点':264 '如果我们给原来的格叠加了一个线性变换':98 '如果我们缩放了一个lattice':165 '如果我们要找一个格':399 '如果我们观察上图下方':604 '学习完对偶格':413 '它的对偶格就和本身没有任何几何上的关联':219 '对于bdd问题原本的定义':535 '对于任何的lattice':356 '对于这个向量':626 '对偶格':2,5 '对偶格看起来很好理解':212 '对应的也会比较大':350 '就会得到':468 '就像我们平时':587 '就可以独立的代表这个quotient':647 '就可以逼近原本的格的最大半径了':324 '就是一组向量':55 '就是我们能逼近的最大上限了':339 '就能保证乘积不变':144 '已知了':130 '并不在格点上':644 '并且只有相乘这个操作有意义':225 '并且在这个对偶格中求解sivp问题':440 '并且把所有得到相同结果的格点都分为':245 '并且搜索的半径小于':419 '并且最后还是会得到':560 '并且满足':61 '并且这就足够表示这个点在空间中距离其他的格点的位置了':602 '当我们得到了一个lattice':228 '当我们重复这个操作':465 '得到对应的一组最短向量':441 '得到的':136 '得到的一个数字':639 '得到这一组最短向量':447 '我们不仅可以对应最短的向量与最大的覆盖半径':377 '我们不妨先找到对偶格':404 '我们之前观察到的lattice的覆盖半径的大小与对偶格的最短向量长度的反比例关系':353 '我们会发现这一部分也可以很好的切割整个':612 '我们依次选择其中的每一个向量':451 '我们其实还有另外一种表达方式':627 '我们只需要牢记格与对偶格之间唯一需要满足的就是任意两个格点之间相乘':220 '我们可以做一件很有趣的事情':234 '我们可以在这个对偶格中任意选择一个点':322 '我们可以把一个格中的最短向量和它的对偶格中的最短向量一一对应起来':397 '我们可以把对偶格理解成是一个格的':204 '我们可以把整个多维空间用这个lattice的determinant组成的多面体平分成多份':591 '我们可以构成一个quotient':576 '我们可以用':620 '我们可以用对偶格向量的长度来逼近原本的':290 '我们可以选定一个对偶格中的点':237 '我们在上面的图中可以看出':95 '我们就可以把上一篇笔记中看过的bdd问题':417 '我们得到的分层距离越大':329 '我们把这个新的lattice成为对偶格':46 '我们拿最常见的笛卡尔整数格':76 '我们最好把对偶格里面的每一个向量理解成一个':215 '我们知道':305 '我们知道一个lattice':551 '我们知道对偶格中的每一个格点都可以和原本的格中的任何格点相乘并且得到一个整数':236 '我们第一步可以做的是':436 '我们观察会发现':268 '我们还可以对应其他的短向量':378 '我们还需要额外的加上一个约束':495 '我们需要规定这个bdd问题给定的向量':523 '所以也就是说一个lattice的对偶空间就是一组向量':35 '所以任何整数向量和它的乘积也都是整数':86 '所以对偶空间基向量乘上它不会得到整数':645 '所以层与层之间的缝隙里是不会有任何格点的':309 '所以我们也可以基于这一组基进行求模':617 '所以我们只需要对应的旋转':138 '所以我们根据这个向量构成的':474 '所以格点都重合了':97 '所以理论上这个对偶格':330 '所以覆盖半径肯定要大于等于这个距离':320 '所有的':306 '找到它们之间的关系':398 '接着':263 '映射到整数空间中的线性变换':33 '是一组在':554 '是旋转了':133 '最后得到的对偶格的大小就要对应的变成':172 '最后我们观察所有的乘积结果的大小':244 '最近的一层':461 '来表示':625 '构成的分层距离':338 '根据群理论':575 '格和对偶格之间有一些基本的关系':187 '次之后':467 '比如说上图中这个斜过来的格':218 '比较短的话':346 '注意这里因为':641 '然后再根据上面的关系式来逼近我们想要的结果':411 '然后又可以得到另一组不一样的分层':267 '然后取小数点部分来表示':640 '然后找到对应的分层距离':323 '然后找到距离':458 '然后根据这个向量对于格':455 '然后求解bdd':435 '然后让原本的格中的所有点都和这个点相乘':243 '由于':81 '的cvp问题':422 '的一个additive':571 '的对偶格':52,230 '的对偶格可以通过旋转变换原本的对偶格来得到':106 '的对偶空间就包括了所有从':16 '的最短向量':333,401 '的概念之后':416 '的空间':616 '的线性变换函数':21 '的范围之内的时候':531 '的覆盖半径':407 '的长度成反比的':274 '的长度越短':328 '的阴影部分上覆盖的格点':595 '空间中任意选取一个点':317 '系统性的定义的话':49 '线性变换函数':216 '线性空间里面一个很重要的概念就是对偶空间':8 '组成的基形成的阴影部分':610 '给原有的lattice分层':235 '给定一个':428 '维的hyperplane分层之间也是相互独立的':477 '缩小了':168 '而不是一个几何上的格点':217 '而这个圆的半径一定得小于等于整个格的覆盖半径':311 '而这些向量乘以格中的任意格点':36 '被banaszczyk总结成了定理':354 '被称为':567 '要限制多了不少':543 '覆盖半径是在':313 '规约到sivp问题上来':423 '这一点规定了覆盖半径与对偶格最短向量这两个值之间的乘积一定会在一个':373 '这一约束':534 '这个不等式的后半部分可以根据上面的banaszczyk定理得到':533 '这个依靠sivp的算法基本上可以解决大部分bdd问题':493 '这个分层的密度和层与层之间的距离都不一样':269 '这个原因也很简单':115 '这个向量可以用对偶格的基向量乘上':636 '这个小数点后面的部分':646 '这个方法就可以找到正确的解':532 '这个时候我们就可以把这些分层的交汇点拿到':471 '这个格与它的对偶格是一样的':96 '这个格的覆盖半径':292 '这个概念看起来比较烧脑':585 '这个点到附近的格点的最远距离':318 '这个距离':270 '这么大的范围中':601 '这也就是说':321,340,396 '这也就是说我们可以把任何一个空间中的点使用格求模的方法':597 '这些向量本身就组成了另一个lattice':45 '这些平面也会相聚在一个点上':478 '这些格点之间可以相加':559 '这代表了什么呢':289 '这就是bdd问题的解了':472 '这是因为':312 '这是因为sivp的解拿给我们的都是线性独立的向量':473 '这算是一个把群元素映射到':649 '这里是旋转':101 '进行分层':457 '那么':347 '那么新的lattice':102 '都可以得到一个':37 '都能得到一个整数':44 '需要距离最近的格点在':526 '首先':355,424		
205	Using The Log Package In Go	{"ver":2,"uid":1,"hash":"SHA1:0edd6045266b5d9dba6714a28d04f968f70c8c9b"}	https://www.ardanlabs.com/blog/2013/11/using-log-package-in-go.html	2013-11-05 00:00:00	Linux is unique to Windows in many ways, and writing programs in Linux is no exception. The use of standard out, standard err and null devices is not only a good idea but it&rsquo;s the law. If your programs are going to be logging information, it is best to follow the destination conventions. This way your programs will work with all of the Mac/Linux tooling and hosted environments.\nGo has a package in the standard library called log and a type called logger.	f17c6a8b2f764cbe5692635b3f5322adc7c6c84c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.55219	0			'best':55 'call':84,89 'convent':60 'destin':59 'devic':32 'environ':75 'err':29 'except':22 'follow':57 'go':6,48,76 'good':37 'host':74 'idea':38 'inform':52 'law':43 'librari':83 'linux':7,19 'log':3,51,85 'logger':90 'mac/linux':71 'mani':13 'null':31 'packag':4,79 'program':17,46,64 'standard':26,28,82 'tool':72 'type':88 'uniqu':9 'use':1,24 'way':14,62 'window':11 'work':66 'write':16	en	
994	Data Broker Opt-Out List	{"ver":2,"uid":1,"hash":"SHA1:cc14a087da53974e10f396572ae9928ce95d6c46"}	https://github.com/yaelwrites/Big-Ass-Data-Broker-Opt-Out-List	2020-09-06 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24388803"> https://news.ycombinator.com/item?id=24388803 </a>	837b4d14c7790ff608dec5889c4d81deafdb8462	\N	f	2020-09-06 20:10:00	2020-09-10 05:10:14.207969	0			'/item?id=24388803':10 'broker':2 'comment':7 'data':1 'list':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24388803':8 'opt':4 'opt-out':3	zh	JoshTriplett
525	Degoogle: Cutting Google out of your life	{"ver":2,"uid":1,"hash":"SHA1:d2b99687f17c6390d995424215d8815c543d3152"}	https://degoogle.jmoore.dev/	2020-08-22 23:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24245817"> https://news.ycombinator.com/item?id=24245817 </a>	ac691a9a85c6e1e5d217e7326a245d5897c0b29c	\N	f	2020-08-22 23:10:00	2020-08-25 22:10:10.481482	0			'/item?id=24245817':11 'comment':8 'cut':2 'degoogl':1 'googl':3 'life':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24245817':9	zh	ra7
350	Google: Open Letter to Australians	{"ver":2,"uid":1,"hash":"SHA1:7957aa3e4c0957583ce80ccf862e4f5a4a7999a0"}	https://about.google/intl/ALL_au/google-in-australia/an-open-letter/	2020-08-17 11:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24182494"> https://news.ycombinator.com/item?id=24182494 </a>	677f9650f6c05e91f74bb5e4c1994bbfd80566d3	\N	f	2020-08-17 11:10:00	2020-08-19 17:10:08.881057	0			'/item?id=24182494':9 'australian':5 'comment':6 'googl':1 'letter':3 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24182494':7 'open':2	zh	skissane
351	Factorio and Software Engineering	{"ver":2,"uid":1,"hash":"SHA1:98b9a462310e5aad3fb1949d2da87a35b02a0fe1"}	https://blog.nindalf.com/posts/factorio-and-software-engineering/	2020-08-17 11:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24181783"> https://news.ycombinator.com/item?id=24181783 </a>	56c4977df620ccc28481dea3a5f92dc41962d023	\N	f	2020-08-17 11:10:00	2020-08-19 17:10:08.887404	0			'/item?id=24181783':8 'comment':5 'engin':4 'factorio':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24181783':6 'softwar':3	zh	nindalf
578	αcτµαlly pδrταblε εxεcµταblε	{"ver":2,"uid":1,"hash":"SHA1:367ef207bcd56243a1ff5a63b1203f240baf670a"}	https://justine.storage.googleapis.com/ape.html	2020-08-24 08:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24256883"> https://news.ycombinator.com/item?id=24256883 </a>	5b811a3e9da60319e1177e3e648b8e41146daf1e	\N	f	2020-08-24 08:10:00	2020-08-27 20:10:10.166447	0			'/item?id=24256883':7 'comment':4 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24256883':5 'pδrταblε':2 'αcτµαlli':1 'εxεcµταblε':3	zh	Pneumaticat
498	Why Did Mozilla Remove XUL Add-Ons?	{"ver":2,"uid":1,"hash":"SHA1:fd0e97c21b8934ddad851da89359523115980b7a"}	https://yoric.github.io/post/why-did-mozilla-remove-xul-addons/	2020-08-21 12:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24231017"> https://news.ycombinator.com/item?id=24231017 </a>	0fc4e2861e2d87607f7e76ddbb53bfd7f162307a	\N	f	2020-08-21 12:10:00	2020-08-25 22:10:10.52975	0			'/item?id=24231017':12 'add':7 'add-on':6 'comment':9 'mozilla':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24231017':10 'on':8 'remov':4 'xul':5	zh	est31
995	Attention is your scarcest resource	{"ver":2,"uid":1,"hash":"SHA1:bcdff1529cd93f7a6c1a23a5b16ed231f2c9821d"}	https://www.benkuhn.net/attention/	2020-09-06 22:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24391686"> https://news.ycombinator.com/item?id=24391686 </a>	17fb4c257d658e4f9f11a0a0d0c1fd9b0ff00c0b	\N	f	2020-09-06 22:10:00	2020-09-10 05:10:14.17328	0			'/item?id=24391686':9 'attent':1 'comment':6 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24391686':7 'resourc':5 'scarcest':4	zh	adambyrtek
492	The software industry is going through the “disposable plastic” crisis	{"ver":2,"uid":1,"hash":"SHA1:d09f59916b9039db49b0c8e60b10387d5149c6a5"}	https://lwn.net/Articles/829123/	2020-08-21 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24229325"> https://news.ycombinator.com/item?id=24229325 </a>	96b961d431afb509bc2f0199415033bb68dca789	\N	f	2020-08-21 08:10:00	2020-08-24 04:10:08.252936	0			'/item?id=24229325':14 'comment':11 'crisi':10 'dispos':8 'go':5 'industri':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24229325':12 'plastic':9 'softwar':2	zh	ColinWright
538	Apple apologizes to WordPress, won’t force the free app to add purchases	{"ver":2,"uid":1,"hash":"SHA1:092788fe864e4c6fedccce493e048d02f0e7ce43"}	https://www.theverge.com/2020/8/22/21397424/apple-wordpress-apology-iap-free-ios-app	2020-08-23 08:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24247767"> https://news.ycombinator.com/item?id=24247767 </a>	e1a4d207b4762332eca7e84a2675bf0495c88bb2	\N	f	2020-08-23 08:10:00	2020-08-25 22:10:10.509429	0			'/item?id=24247767':17 'add':12 'apolog':2 'app':10 'appl':1 'comment':14 'forc':7 'free':9 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24247767':15 'purchas':13 'won':5 'wordpress':4	zh	pier25
751	Tell HN: Check medium's localstorage if you use adblock	{"ver":2,"uid":1,"hash":"SHA1:be7425e55d479d9d994685c3d195fe0c67cd9e6a"}	https://news.ycombinator.com/item?id=24310778	2020-08-29 15:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24310778"> https://news.ycombinator.com/item?id=24310778 </a>	c5a2583aa2fc81c10cf50745bf99558e1c0841e8	\N	f	2020-08-29 15:10:00	2020-09-01 08:10:09.921695	0			'/item?id=24310778':14 'adblock':10 'check':3 'comment':11 'hn':2 'localstorag':6 'medium':4 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24310778':12 'tell':1 'use':9	zh	ev1
750	Remote Code Execution in Slack desktop apps	{"ver":2,"uid":1,"hash":"SHA1:4db01866cbafadc12fdf84cb86c8fc89cc76d735"}	https://hackerone.com/reports/783877	2020-08-29 15:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24314098"> https://news.ycombinator.com/item?id=24314098 </a>	d53f7c14b188be93a8e773f02d94214c3a70e930	\N	f	2020-08-29 15:10:00	2020-09-01 21:10:09.543811	0			'/item?id=24314098':11 'app':7 'code':2 'comment':8 'desktop':6 'execut':3 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24314098':9 'remot':1 'slack':5	zh	tonny747
382	Karpathy's MinGPT	{"ver":2,"uid":1,"hash":"SHA1:718e21a93c67cbebef1f7928b6204d1b8e097013"}	https://github.com/karpathy/minGPT	2020-08-18 09:10:39	Comments: <a href="https://news.ycombinator.com/item?id=24189497"> https://news.ycombinator.com/item?id=24189497 </a>	788de226df3c37618c6c62abc4c87d3bb49789d6	\N	f	2020-08-18 09:10:00	2020-08-21 06:10:09.946418	0			'/item?id=24189497':7 'comment':4 'karpathi':1 'mingpt':3 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24189497':5	zh	aliabd
537	The cost of 1GB of mobile data in 228 countries (Feb 2020)	{"ver":2,"uid":1,"hash":"SHA1:b3a86064d2d6933d33f7baaaa76344e5f16353d0"}	https://www.cable.co.uk/mobiles/worldwide-data-pricing/	2020-08-23 08:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24247561"> https://news.ycombinator.com/item?id=24247561 </a>	70b4cc390953d3335d3ee3fcfe8db7408a9aefd5	\N	f	2020-08-23 08:10:00	2020-08-25 22:10:10.494061	0			'/item?id=24247561':16 '1gb':4 '2020':12 '228':9 'comment':13 'cost':2 'countri':10 'data':7 'feb':11 'mobil':6 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24247561':14	zh	vanilla-almond
976	【每周一库】- cached - 缓存结构型、辅助函数记忆化	{"ver":2,"uid":1,"hash":"SHA1:bebb8b6bfb64fcf66bebdf5675506714fd82c4a1"}	https://rustcc.cn/article?id=3a51d713-26fe-4664-9d7e-b82feb8b9df2	2020-09-03 17:29:24	<h1>cached</h1>\n<blockquote>\n<p>缓存结构型，简化函数记忆化</p>\n</blockquote>\n<p><code>cached</code> 提供几种不同缓存结构型的实现和一个易用的用作定义记忆化函数的宏，可为动态规划算法的实现带来很大的便利</p>\n<p>使用<code>#[cached]</code>/<code>cached!</code>宏定义的记忆化函数具有线程安全的特性，并自带封装在互斥锁中的后备函数缓存。函数缓存在函数执行期间是非锁定状态，因此，具有相同参数的长期运行函数的初始（在空缓存上）并发调用将被完整执行，并且每次完成时都会覆盖已记忆值。这与Python的<code>functools.lru_cache</code>行为相同</p>\n<h2>用<code>#[cached]</code> &amp; <code>cached!</code>宏定义记忆化函数</h2>\n<p>基本使用案例：</p>\n<pre><code>use cached::proc_macro::cached;\n\n/// 定义一个叫`fib`的函数，此函数使用一个名为`FIB`的缓存\n/// 默认情况下，缓存的名称与函数相同，但用全大写字母命名\n/// 下一行代码与#[cached(name = "FIB", unbound)]效果相同\n#[cached]\nfn fib(n: u64) -&gt; u64 {\n    if n == 0 || n == 1 { return n }\n    fib(n-1) + fib(n-2)\n}\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\n\n/// 使用一个大小为100的lru（最近最少使用）缓存和一个类型为 `(String, String)` 的缓存键\n#[cached(size=100)]\nfn keyed(a: String, b: String) -&gt; usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\nuse cached::SizedCache;\n\n/// 将`显式缓存类型`与`自定义创建块`和`自定义缓存键生成块`一起使用\n#[cached(\n    type = "SizedCache&lt;String, usize&gt;",\n    create = "{ SizedCache::with_size(100) }",\n    convert = r#"{ format!("{}{}", a, b) }"#\n)]\nfn keyed(a: &amp;str, b: &amp;str) -&gt; usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\n</code></pre>\n<hr>\n<p>使用<code>#[cached]</code>/<code>cached!</code>定义的函数将使用函数的参数作为键来缓存其结果（在使用<code>cached_key!</code>时则是一个特定的表达式）。当用 <code>cached!</code> 定义的函数被调用时，在运行函数逻辑之前，首先会检查函数的缓存中是否存在已计算（并且仍然有效）的结果。</p>\n<p>出于在全局缓存中存储参数和返回值的需要：</p>\n<ul>\n<li>函数返回类型必须被拥有并实现<code>Clone</code></li>\n<li>函数参数必须被拥有并且实现 <code>Hash + Eq + Clone</code> 或者使用 <code>cached_key!</code> 宏来将参数转换为一个被拥有的 <code>Hash + Eq + Clone</code> 类型</li>\n<li>在插入和检索过程中，参数和返回值将被<code>克隆</code></li>\n<li>请勿使用<code>#[cached]</code>/<code>cached!</code> 函数来产生 side-effectual 的结果!</li>\n<li>因为<code>cached!</code>会被扩展为<code>once_cell</code> 初始化和函数定义，所以<code>#[cached]</code>/<code>cached!</code> 函数不能直接存在于impl块下</li>\n<li><code>#[cached]</code>/<code>cached!</code> 函数不能接受类型为 <code>Self</code> 的参数</li>\n</ul>\n<p><strong>注意</strong>: 任何实现<code>cached :: Cached</code>的自定义缓存都可以与<code>cached</code>宏一起使用，以代替内置函数。</p>\n<h3><code>cached!</code> 和<code>cached_key!</code> 用法与选项：</h3>\n<p>有多种选择，具体取决于您想要的显示方式。 有关完整的语法细分，请参见以下代码：</p>\n<p>1.) 使用简写将使用无限制的缓存。</p>\n<pre><code>#[macro_use] extern crate cached;\n\n/// 定义一个名为`fib`的函数并使用一个名为`FIB`的缓存\ncached!{\n    FIB;\n    fn fib(n: u64) -&gt; u64 = {\n        if n == 0 || n == 1 { return n }\n        fib(n-1) + fib(n-2)\n    }\n}\n</code></pre>\n<p>2.) 使用完整语法需要指定完整的缓存类型并提供要使用的缓存实例。 请注意，缓存的键类型是函数参数类型的元组。如果您希望对键进行精细控制，可以使用 <code>cached_key!</code> 宏。以下用例使用 <code>SizedCache</code> (LRU)：</p>\n<pre><code>#[macro_use] extern crate cached;\n\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::SizedCache;\n\n/// 定义一个使用名为`COMPUTE`、大小限制为50的LRU缓存的名为`compute`的函数\n/// `cached!`宏将隐式地将函数参数组合成一个元组，以用作缓存键\n\ncached!{\n    COMPUTE: SizedCache&lt;(u64, u64), u64&gt; = SizedCache::with_size(50);\n    fn compute(a: u64, b: u64) -&gt; u64 = {\n        sleep(Duration::new(2, 0));\n        return a * b;\n    }\n}\n</code></pre>\n<p>3.) <code>cached_key</code>宏的功能相同，但是允许将缓存键定义为表达式。</p>\n<pre><code>#[macro_use] extern crate cached;\n\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::SizedCache;\n\n/// 定义一个名为`length`的函数并使用一个名为`LENGTH`的LRU作为其缓存\n/// `Key = ` 表达式用作显式定义将被用作缓存键使用的值\n/// 在这里，借用的参数将转换为被拥有的字符串，该字符串可以存储在全局函数缓存中\n\ncached_key!{\n    LENGTH: SizedCache&lt;String, usize&gt; = SizedCache::with_size(50);\n    Key = { format!("{}{}", a, b) };\n    fn length(a: &amp;str, b: &amp;str) -&gt; usize = {\n        let size = a.len() + b.len();\n        sleep(Duration::new(size as u64, 0));\n        size\n    }\n}\n</code></pre>\n<p>4.) <code>cached_result</code> 与 <code>cached_key_result</code> 宏的作用对应于 <code>cached</code> 和 <code>cached_key</code> 相类似，但是带有缓存的函数需要返回<code>Result</code>(或诸如 <code>io::Result</code>的类型别名)。如果函数返回<code>Ok(val)</code>，那么<code>val</code>会被缓存，但报错会不同。注意只有成功时的返回类型需要实现<code>Clone</code>， 错误时的返回类型则不需要。当使用<code>cached_result</code>和<code>cached_key_result</code>时，缓存的类型不能被派生，必须要明确指定。</p>\n<pre><code>#[macro_use] extern crate cached;\n\nuse cached::UnboundCache;\n\n/// 缓存函数成功时的返回\n/// 使用`cached_key_result`与使用`cached_key`时一样添加一个键函数\ncached_result!{\n   MULT: UnboundCache&lt;(u64, u64), u64&gt; = UnboundCache::new(); // 类型必须被指定\n   fn mult(a: u64, b: u64) -&gt; Result&lt;u64, ()&gt; = {\n        if a == 0 || b == 0 {\n            return Err(());\n        } else {\n            return Ok(a * b);\n        }\n   }\n}\n</code></pre>\n<h2>语法</h2>\n<p>常用的宏语法如下：</p>\n<pre><code>cached_key!{\n    CACHE_NAME: CacheType = CacheInstance;\n    Key = KeyExpression;\n    fn func_name(arg1: arg_type, arg2: arg_type) -&gt; return_type = {\n        return_type\n    }\n}\n</code></pre>\n<p>其中：</p>\n<ul>\n<li><code>CACHE_NAME</code> 是用来存放指向缓存的<code>static ref</code>的特定名称</li>\n<li><code>CacheType</code> 是缓存的完整类型</li>\n<li><code>CacheInstance</code> 是一个可以产生 <code>CacheType</code> 实例的表达式，用作缓存存储，用<code>;</code>结尾</li>\n<li>当使用<code>cached_key!</code>宏的时候，"Key" 这一行必须被明确定义。该行必须以文字标记<code>Key =</code>开头，后跟一个计算为键的表达式，以<code>;</code>结尾。</li>\n<li><code>fn func_name(arg1: arg_type) -&gt; return_type</code> 与普通的函数签名形式相同，唯一的不同是，当函数没有返回值时，必须明确声明 (比如 <code>fn func_name(arg: arg_type) -&gt; ()</code>)</li>\n<li><code>=</code> 之后的表达式是分配给<code>func_name</code>的函数体。注意，函数体可以对已被缓存的自己进行递归调用 (<code>func_name</code>)。</li>\n</ul>\n<h1>细粒度控制可使用 <code>cached_control!</code></h1>\n<p><code>cached_control!</code>宏允许提供插入到记忆化函数的关键区域中的表达式。尽管<code>cached</code>和<code>cached_result</code>变体可以应付大多数情况，但需要自定义宏的功能时会很有用。</p>\n<pre><code>#[macro_use] extern crate cached;\n\nuse cached::UnboundCache;\n\n/// 以下的用例使用插入式表达式实现与`cached_result!`功能类似的宏\n\ncached_control!{\n    CACHE: UnboundCache&lt;String, String&gt; = UnboundCache::new();\n\n    // 使用一个被拥有的参数副本`input`作为缓存键\n    Key = { input.to_owned() };\n\n    // 如果被缓存的值存在, 会被绑定到`cached_val`并且\n    // 包含被缓存的主体的`Result`将会被返回\n    // 这时，函数会直接返回，主体不会被执行\n    \n    PostGet(cached_val) = { return Ok(cached_val.clone()) };\n\n    // 函数主体执行的结果会被绑定到`body_result`\n    // 这种情况下，函数主体会返回一个`Result`\n    // 我们会对`Result`进行匹配，如果函数出现错位，会提前返回一个`Err`\n    // 其他情况下，我们会将函数的结果缓存起来\n    PostExec(body_result) = {\n        match body_result {\n            Ok(v) =&gt; v,\n            Err(e) =&gt; return Err(e),\n        }\n    };\n\n    // 当向缓存插入值的时候\n    // 我们将被插入值绑定到`set_value`并得到一个可插入缓存的副本\n\n    Set(set_value) = { set_value.clone() };\n\n    // 在返回之前打印出即将被返回的值\n    Return(return_value) = {\n        println!("{}", return_value);\n        Ok(return_value)\n    };\n\n    fn can_fail(input: &amp;str) -&gt; Result&lt;String, String&gt; = {\n        let len = input.len();\n        if len &lt; 3 { Ok(format!("{}-{}", input, len)) }\n        else { Err("too big".to_string()) }\n    }\n}\n</code></pre>\n<p>许可证: MIT</p>\n	097fd310ba67dc36d9e3961ca9b9a7063f422034	\N	f	2020-09-06 06:10:00	2020-09-10 03:10:02.606919	0			'-1':65,258 '-2':68,261 '/cached':13,169,199,211,214 '0':58,108,165,251,319,384,452,454 '1':60,230,253 '100':90,142 '2':262,318 '3':323,646 '4':386 '50':307,362 'a':93,146,150,310,321,365,369,444,451,460 'a.len':100,157,376 'arg':476,479,513,525,526 'arg1':475,512 'arg2':478 'as':106,163,382 'b':95,147,152,312,322,366,371,446,453,461 'b.len':101,158,377 'big':654 'body':587,601,604 'cache':466,486,557 'cached':2,5,8,12,26,27,31,34,45,50,78,81,88,119,122,124,133,168,175,188,198,210,213,222,236,242,268,278,288,295,298,324,331,341,353,387,390,394,396,419,421,425,429,432,464,535,537,547,549,552,555,571,581 'cached_val.clone':585 'cached的自定义缓存都可以与cached宏一起使用':220 'cacheinstance':469,492 'cachetype':468,490,494 'cache行为相同':24 'can':634 'cell':207 'clone':186,193 'compute':291,293,299,309 'control':536,538,556 'convert':143 'crate':235,277,330,418,546 'create':138 'duration':76,103,117,160,286,316,339,379 'e':610,613 'effectual':203 'else':457,651 'eq':185,192 'err':456,597,609,612,652 'extern':234,276,329,417,545 'fail':635 'fib':36,39,47,52,63,66,238,240,243,245,256,259 'fn':51,91,148,244,308,367,442,472,509,522,633 'format':145,364,648 'func':473,510,523,532 'hash':184,191 'if':56,249,450,644 'input':564,636,649 'input.len':643 'input.to':567 'io':401 'key':172,189,224,269,348,354,363,391,397,411,426,430,465,470,500,502,566 'keyed':92,149 'keyexpression':471 'key宏的功能相同':325 'len':642,645,650 'length':344,346,355,368 'let':98,155,374,641 'lru':23,273 'macro':33,80,121,232,274,327,415,543 'match':603 'mit':658 'mult':434,443 'n':53,57,59,62,64,67,246,250,252,255,257,260 'name':46,467,474,487,511,524,533 'name的函数体':529 'new':104,161,317,380,440,562 'ok':459,584,606,630,647 'owned':568 'postexec':600 'postget':580 'println':627 'proc':32,79,120 'r':144 'ref的特定名称':489 'result':388,392,427,433,448,553,575,588,591,593,602,605,638 'result变体可以应付大多数情况':541 'result和cached':410 'result时':412 'result的类型别名':402 'return':61,254,320,455,458,481,483,515,583,611,624,625,628,631 'self':216 'set':616,619,620 'set_value.clone':622 'side':202 'side-effectual':201 'size':89,99,105,109,141,156,162,166,306,361,375,381,385 'sizedcache':125,135,139,272,289,300,304,342,356,359 'sleep':72,102,113,159,282,315,335,378 'std':70,74,111,115,280,284,333,337 'str':151,153,370,372,637 'string':85,86,94,96,136,357,559,560,639,640,656 'thread':71,112,281,334 'time':75,116,285,338 'to':655 'too':653 'type':134,477,480,482,484,514,516,527 'u64':54,55,107,164,247,248,301,302,303,311,313,314,383,436,437,438,445,447,449 'unbound':48 'unboundcache':422,435,439,550,558,561 'use':30,69,73,77,110,114,118,123,233,275,279,283,287,328,332,336,340,416,420,544,548 'usize':97,137,154,358,373 'v':607,608 'val':404,572,582 'value':617,621,626,629,632 'with':140,305,360 '一起使用':132 '下一行代码与':44 '与':128,389 '与使用':428 '与普通的函数签名形式相同':517 '主体不会被执行':579 '之后的表达式是分配给func':528 '以':507 '以下用例使用':271 '以下的用例使用插入式表达式实现与':551 '以代替内置函数':221 '以用作缓存键':297 '任何实现cached':219 '会提前返回一个':596 '会被扩展为once':206 '会被绑定到':570 '但报错会不同':406 '但是允许将缓存键定义为表达式':326 '但是带有缓存的函数需要返回result':399 '但用全大写字母命名':43 '但需要自定义宏的功能时会很有用':542 '作为缓存键':565 '使用':11,167,424 '使用一个大小为100的lru':82 '使用一个被拥有的参数副本':563 '使用完整语法需要指定完整的缓存类型并提供要使用的缓存实例':263 '使用简写将使用无限制的缓存':231 '借用的参数将转换为被拥有的字符串':351 '其中':485 '其他情况下':598 '具体取决于您想要的显示方式':227 '具有相同参数的长期运行函数的初始':18 '出于在全局缓存中存储参数和返回值的需要':181 '函数不能接受类型为':215 '函数不能直接存在于impl块下':212 '函数主体会返回一个':590 '函数主体执行的结果会被绑定到':586 '函数会直接返回':578 '函数体可以对已被缓存的自己进行递归调用':531 '函数参数必须被拥有并且实现':183 '函数来产生':200 '函数缓存在函数执行期间是非锁定状态':16 '函数返回类型必须被拥有并实现clone':182 '初始化和函数定义':208 '功能类似的宏':554 '包含被缓存的主体的':574 '参数和返回值将被克隆':196 '可为动态规划算法的实现带来很大的便利':10 '可以使用':267 '后跟一个计算为键的表达式':506 '和':130,395 '和cached':223 '唯一的不同是':518 '因为cached':205 '因此':17 '在使用cached':171 '在插入和检索过程中':195 '在空缓存上':19 '在运行函数逻辑之前':177 '在返回之前打印出即将被返回的值':623 '在这里':350 '基本使用案例':29 '大小限制为50的lru缓存的名为':292 '如果函数出现错位':595 '如果函数返回ok':403 '如果您希望对键进行精细控制':266 '如果被缓存的值存在':569 '宏':270 '宏允许提供插入到记忆化函数的关键区域中的表达式':539 '宏定义的记忆化函数具有线程安全的特性':14 '宏定义记忆化函数':28 '宏将隐式地将函数参数组合成一个元组':296 '宏来将参数转换为一个被拥有的':190 '宏的作用对应于':393 '宏的时候':501 '定义一个使用名为':290 '定义一个叫':35 '定义一个名为':237,343 '定义的函数将使用函数的参数作为键来缓存其结果':170 '定义的函数被调用时':176 '实例的表达式':495 '将':126 '将会被返回':576 '尽管cached和cached':540 '常用的宏语法如下':463 '并且':573 '并且仍然有效':179 '并且每次完成时都会覆盖已记忆值':21 '并发调用将被完整执行':20 '并得到一个可插入缓存的副本':618 '并自带封装在互斥锁中的后备函数缓存':15 '开头':505 '当使用cached':409,499 '当函数没有返回值时':519 '当向缓存插入值的时候':614 '当用':174 '必须明确声明':520 '必须要明确指定':414 '我们会对':592 '我们会将函数的结果缓存起来':599 '我们将被插入值绑定到':615 '或者使用':187 '或诸如':400 '所以':209 '提供几种不同缓存结构型的实现和一个易用的用作定义记忆化函数的宏':9 '效果相同':49 '时一样添加一个键函数':431 '时则是一个特定的表达式':173 '是一个可以产生':493 '是用来存放指向缓存的static':488 '是缓存的完整类型':491 '显式缓存类型':127 '最近最少使用':83 '有关完整的语法细分':228 '有多种选择':226 '此函数使用一个名为':38 '每周一库':1 '比如':521 '注意':218,530 '注意只有成功时的返回类型需要实现clone':407 '用':25,497 '用作缓存存储':496 '用法与选项':225 '的lru作为其缓存':347 '的函数':37,294 '的函数并使用一个名为':239,345 '的参数':217 '的结果':180,204 '的缓存':40,241 '的缓存键':87 '相类似':398 '简化函数记忆化':7 '类型':194 '类型必须被指定':441 '细粒度控制可使用':534 '结尾':498,508 '缓存函数成功时的返回':423 '缓存和一个类型为':84 '缓存的名称与函数相同':42 '缓存的类型不能被派生':413 '缓存的键类型是函数参数类型的元组':265 '缓存结构型':3,6 '自定义创建块':129 '自定义缓存键生成块':131 '表达式用作显式定义将被用作缓存键使用的值':349 '许可证':657 '该字符串可以存储在全局函数缓存中':352 '该行必须以文字标记key':504 '语法':462 '请勿使用':197 '请参见以下代码':229 '请注意':264 '辅助函数记忆化':4 '这一行必须被明确定义':503 '这与python的functools':22 '这时':577 '这种情况下':589 '进行匹配':594 '那么val会被缓存':405 '错误时的返回类型则不需要':408 '首先会检查函数的缓存中是否存在已计算':178 '默认情况下':41		
977	【Rust日报】 2020-09-03  Google - XLS 加速硬件合成	{"ver":2,"uid":1,"hash":"SHA1:5c886d7ce9a0f9b5a5d423ec468711b5d92aa233"}	https://rustcc.cn/article?id=5f8c8445-73a3-4a31-947a-48f5b6ab09f0	2020-09-03 12:37:40	<h3>Google - XLS 加速硬件合成</h3>\n<p><img src="https://camo.githubusercontent.com/e7305600f2faa160408d0a472b08ad6be211f362/68747470733a2f2f676f6f676c652e6769746875622e696f2f786c732f696d616765732f786c735f6c6f676f5f3632335f3235302e706e67" alt=""></p>\n<p>什么是XLS？XLS（加速硬件合成）项目旨在实现硬件 IP 的快速开发，该硬件 IP 还可通过“软件样式”方法作为有效的主机软件运行。</p>\n<p>XLS 实施了高级综合（HLS）工具链，该工具链根据灵活的高级功能描述生成可综合的设计。它在 GitHub 上完全开源的并使用 Apache 2 开源协议。</p>\n<p>XLS 在 Google 内部用于从“构建块”例程/库生成前馈管道，这些例程/库可以轻松地重新定向，重用和以对延迟不敏感的方式进行组合。</p>\n<p>目前尚不可用，但正在进行的工作是通信顺序过程（CSP）样式的 XLS 并发过程的实现，该过程允许管道彼此通信并随着时间的推移进行引入。</p>\n<p><a href="https://github.com/google/xls" rel="noopener noreferrer">仓库地址</a>：https://github.com/google/xls</p>\n<h3>裸机的 Rust 泛型</h3>\n<p>作者有机会在专业环境下参与 Rust STM32F412 项目，目标之一是在公司孵化一个 Rust 知识库。该项目，Loadstone，是一个32kb的安全引导装载程序，针对裸金属设备的医疗行业。在此背景下，作者对 Rust 的裸金属泛型进行分享。</p>\n<p><a href="https://www.ecorax.net/as-above-so-below-1/" rel="noopener noreferrer">原文链接</a>:https://www.ecorax.net/as-above-so-below-1/</p>\n<h3>异步的 Rust HTTP 状态码</h3>\n<h3>Fontdue 项目</h3>\n<p>Fontdue是一个简单的、no_std(不使用标准库来实现可移植性)、纯 Rust、TrueType (.ttf/.ttc)和 OpenType (.otf) 字体光栅化和布局工具。它努力使与字体的交互尽可能快，并且目前拥有最快的光栅化器。</p>\n<p>使用示例:</p>\n<pre><code>// Read the font data.\nlet font = include_bytes!("../resources/Roboto-Regular.ttf") as &amp;[u8];\n// Parse it into the font type.\nlet font = fontdue::Font::from_bytes(font, fontdue::FontSettings::default()).unwrap();\n// Rasterize and get the layout metrics for the letter 'g' at 17px.\nlet (metrics, bitmap) = font.rasterize('g', 17.0);\n</code></pre>\n<p><a href="https://github.com/mooman219/fontdue/" rel="noopener noreferrer">项目地址</a>：https://github.com/mooman219/fontdue/</p>\n<h3>Just made my own little Ferris :)</h3>\n<p><img src="https://github.com/Jancd/rustcc/blob/master/daily/images/2020/rust_farris.jpg?raw=true" alt=""></p>\n<p><a href="https://www.reddit.com/r/rust/comments/ildkmw/just_made_my_own_little_ferris/" rel="noopener noreferrer">原文</a>：https://www.reddit.com/r/rust/comments/ildkmw/just_made_my_own_little_ferris/</p>\n<hr>\n<p>From 日报小组 @Jancd @Downtime</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rust.cc" rel="noopener noreferrer">Rust.cc论坛: 支持rss</a></li>\n<li><a href="https://rust.cc/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言学习交流</a></li>\n</ul>\n	cb3170219dd72f604f19905fbd607b953b9e2f61	\N	f	2020-09-06 06:10:00	2020-09-09 12:10:03.072757	0			'-03':4 '-09':3 '/as-above-so-below-1/':75 '/google/xls':53 '/mooman219/fontdue/':146 '/r/rust/comments/ildkmw/just_made_my_own_little_ferris/':156 '/resources/roboto-regular.ttf':105 '17.0':142 '17px':136 '2':31 '2020':2 'and':126 'apache':30 'as':106 'at':135 'bitmap':139 'bytes':104,119 'csp':45 'data':100 'default':123 'downtime':160 'ferris':152 'font':99,102,112,115,117,120 'font.rasterize':140 'fontdue':80,116,121 'fontdue是一个简单的':82 'fontsettings':122 'for':131 'from':118,157 'g':134,141 'get':127 'github':28 'github.com':52,145 'github.com/google/xls':51 'github.com/mooman219/fontdue/':144 'google':5,8,35 'hls':24 'http':78 'include':103 'into':110 'ip':15,18 'it':109 'jancd':159 'just':147 'layout':129 'let':101,114,137 'letter':133 'little':151 'loadstone':65 'made':148 'metrics':130,138 'my':149 'no':83 'opentype':91 'otf':92 'own':150 'parse':108 'rasterize':125 'read':97 'rust':55,58,62,70,77,87 'rust.cc':162 'rust日报':1 'rust语言学习交流':166 'std':84 'stm32f412':59 'the':98,111,128,132 'truetype':88 'ttf/.ttc':89 'type':113 'u8':107 'unwrap':124 'www.ecorax.net':74 'www.ecorax.net/as-above-so-below-1/':73 'www.reddit.com':155 'www.reddit.com/r/rust/comments/ildkmw/just_made_my_own_little_ferris/':154 'xls':6,9,12,22,33,47 '上完全开源的并使用':29 '不使用标准库来实现可移植性':85 '什么是xls':11 '仓库地址':50 '但正在进行的工作是通信顺序过程':44 '作者对':69 '作者有机会在专业环境下参与':57 '使用示例':96 '例程':38 '内部用于从':36 '加速硬件合成':7,10,13 '原文':153 '原文链接':72 '和':90 '在':34 '在此背景下':68 '字体光栅化和布局工具':93 '它努力使与字体的交互尽可能快':94 '它在':27 '实施了高级综合':23 '工具链':25 '并且目前拥有最快的光栅化器':95 '并发过程的实现':48 '库可以轻松地重新定向':41 '库生成前馈管道':39 '开源协议':32 '异步的':76 '微信公众号':165 '支持rss':164 '方法作为有效的主机软件运行':21 '日报小组':158 '是一个32kb的安全引导装载程序':66 '构建块':37 '样式的':46 '泛型':56 '状态码':79 '的快速开发':16 '的裸金属泛型进行分享':71 '目前尚不可用':43 '目标之一是在公司孵化一个':61 '知识库':63 '社区学习交流平台订阅':161 '纯':86 '裸机的':54 '论坛':163 '该工具链根据灵活的高级功能描述生成可综合的设计':26 '该硬件':17 '该过程允许管道彼此通信并随着时间的推移进行引入':49 '该项目':64 '软件样式':20 '还可通过':19 '这些例程':40 '重用和以对延迟不敏感的方式进行组合':42 '针对裸金属设备的医疗行业':67 '项目':60,81 '项目地址':143 '项目旨在实现硬件':14		
978	[上海/远程] 高级 RUST 开发工程师 25k ~ 30k	{"ver":2,"uid":1,"hash":"SHA1:78f9cb9ad8bdfb07f8374e493d6fa05cf6ffea6a"}	https://rustcc.cn/article?id=c08cea26-636f-4899-a1d9-4427eed65b3b	2020-09-03 04:51:19	<p>Bifrost 是一个<strong>为 Staking 提供流动性的跨链网络</strong>，基于 <code>Substrate</code> 开发，构建在 <code>Polkadot</code> 网络之上，作为波卡生态中优质的 DeFi 类项目，通过 Bifrost 用户可以随时将 PoS 币种通过 Bifrost 协议兑换成 vToken 获得** Staking 收益和流动性**，从而解决 PoS 网络中 DeFi 应用产生的收益竞争等问题。</p>\n<p>目前 Bifrost 已经获得由 <code>NGC</code>、<code>SNZ</code>、<code>LongHash</code> 等知名投资机构的 <strong>60 万美元</strong>种子轮融资，<strong>Web3 基金会 Grant 资助项目</strong>，也是 Parity 下属的 <strong>Substrate Builders Program</strong> 的一员，能够参与 Parity 团队每周的 Office Hour，与区块链顶级技术团队一对一交流，并且欢迎向 Substrate 代码仓库提交贡献，同时 Bifrost 也是 Web3 基金会与万向区块链实验室联合组建的 <strong>Web3 Bootcamp</strong> 孵化器的 <strong>15 个</strong>核心成员之一，获得由 Web3 基金会和万向区块链实验室从<strong>技术</strong>、<strong>产品</strong>、<strong>资本</strong>、<strong>法务</strong>、<strong>生态合作</strong>等全方位的支持。</p>\n<p>Web 3.0 是一个开放自由，无国界，代码既法律的下一代互联网，在这里，你可以拿回真正属于自己的资产，保护自己的数据隐私，自由的在网络中传递价值，而去中心化金融（DeFi）又是 Web 3.0 时代中不可或缺的重要应用方向，在 DeFi 的世界中，<strong>相信懂代码的你</strong>无需去相信任何公司或广告，就可以体验到世界上任何一个角落的金融产品。</p>\n<h2>加入我们</h2>\n<p><code>期权</code> <code>开放式办公</code> <code>咖啡零食</code> <code>宠物友好</code></p>\n<h3>高级区块链工程师 (Rust)</h3>\n<h4>薪资范围：25k ~ 30k</h4>\n<h4>岗位职责</h4>\n<ul>\n<li>负责 Substrate 区块链核心模块开发</li>\n<li>负责 Substrate 源码分析</li>\n<li>负责测试网络部署与维护</li>\n<li>负责转接桥开发</li>\n</ul>\n<h4>任职要求</h4>\n<ul>\n<li>本科及以上学历，计算机相关专业优先</li>\n<li>2 年以上 Rust 开发经验</li>\n<li>良好的英文阅读能力</li>\n</ul>\n<h4>加分项</h4>\n<ul>\n<li>熟悉区块链底层技术，了解跨链技术</li>\n<li>熟悉一门系统编程语言 如 C++, C, Go</li>\n<li>熟悉开源社区，有开源项目贡献，技术博客等</li>\n<li>有 Parity/Substrate 开发经验</li>\n<li>Docker/CI/Shell</li>\n<li>熟悉 PoS 共识机制</li>\n</ul>\n<h3>中级区块链工程师 (Rust)</h3>\n<h4>薪资范围：15k ~ 25k</h4>\n<p>岗位职责</p>\n<ul>\n<li>负责 Substrate 区块链核心模块开发；</li>\n<li>负责测试网络部署与维护；</li>\n<li>负责转接桥开发；</li>\n<li>负责与前端的对接工作；</li>\n</ul>\n<p>任职要求</p>\n<ul>\n<li>本科及以上学历，计算机相关专业优先；</li>\n<li>1 年以上 Rust 开发经验，或者有3年以上 C++/Go 语言开发经验；</li>\n<li>良好的英文阅读能力；</li>\n</ul>\n<p>加分项</p>\n<ul>\n<li>熟悉区块链底层技术，了解跨链技术；</li>\n<li>熟悉开源社区，有开源项目贡献，技术博客等；</li>\n<li>有 Parity/Substrate 开发经验；</li>\n<li>Docker/CI/Shell；</li>\n</ul>\n<blockquote>\n<p>Bifrost 期待你的加入，去帮助世界上那些金融设施不完善地区的人们，使用上安全、好用的金融产品，一同推动 Web 3.0 更温柔的进入每个人的生活</p>\n</blockquote>\n<h2>联系</h2>\n<ul>\n<li>工作地点：<strong>Base 上海，可远程</strong></li>\n<li>简历投递 <strong>join@bifrost.finance</strong></li>\n</ul>\n	da9d8d8217b6174a89d3d574ea183d018cea2548	\N	f	2020-09-06 06:10:00	2020-09-08 15:10:03.186015	0			'/go':169 '1':163 '15':74 '15k':151 '2':125 '25k':6,111,152 '3.0':84,96,189 '30k':7,112 '60':44 'base':193 'bifrost':8,22,26,38,67,182 'bootcamp':72 'builders':54 'c':135,136,168 'defi':19,35,93,99 'docker/ci/shell':144,181 'go':137 'grant':48 'hour':61 'join@bifrost.finance':197 'longhash':42 'ngc':40 'office':60 'parity':51,58 'parity/substrate':142,179 'polkadot':16 'pos':24,33,146 'program':55 'rust':4,109,127,149,165 'snz':41 'staking':10,30 'substrate':13,53,64,115,118,155 'vtoken':28 'web':83,95,188 'web3':46,69,71,77 '一同推动':187 '万美元种子轮融资':45 '上海':1,194 '下属的':52 '与区块链顶级技术团队一对一交流':62 '个核心成员之一':75 '中级区块链工程师':148 '也是':50,68 '了解跨链技术':132,174 '产品':79 '从而解决':32 '代码仓库提交贡献':65 '代码既法律的下一代互联网':87 '任职要求':122,160 '作为波卡生态中优质的':18 '你可以拿回真正属于自己的资产':89 '使用上安全':185 '保护自己的数据隐私':90 '共识机制':147 '加入我们':103 '加分项':130,172 '区块链核心模块开发':116,156 '协议兑换成':27 '去帮助世界上那些金融设施不完善地区的人们':184 '又是':94 '可远程':195 '同时':66 '咖啡零食':106 '团队每周的':59 '在':98 '在这里':88 '基于':12 '基金会':47 '基金会与万向区块链实验室联合组建的':70 '基金会和万向区块链实验室从技术':78 '好用的金融产品':186 '如':134 '孵化器的':73 '宠物友好':107 '就可以体验到世界上任何一个角落的金融产品':102 '岗位职责':113,153 '工作地点':192 '已经获得由':39 '币种通过':25 '年以上':126,164 '并且欢迎向':63 '应用产生的收益竞争等问题':36 '开发':14 '开发工程师':5 '开发经验':128,143,166,180 '开放式办公':105 '或者有3年以上':167 '技术博客等':140,177 '提供流动性的跨链网络':11 '收益和流动性':31 '无国界':86 '时代中不可或缺的重要应用方向':97 '是一个为':9 '是一个开放自由':85 '更温柔的进入每个人的生活':190 '有':141,178 '有开源项目贡献':139,176 '期待你的加入':183 '期权':104 '本科及以上学历':123,161 '构建在':15 '法务':81 '源码分析':119 '熟悉':145 '熟悉一门系统编程语言':133 '熟悉区块链底层技术':131,173 '熟悉开源社区':138,175 '生态合作等全方位的支持':82 '用户可以随时将':23 '的一员':56 '的世界中':100 '目前':37 '相信懂代码的你无需去相信任何公司或广告':101 '等知名投资机构的':43 '简历投递':196 '类项目':20 '网络中':34 '网络之上':17 '而去中心化金融':92 '联系':191 '能够参与':57 '自由的在网络中传递价值':91 '良好的英文阅读能力':129,171 '获得':29 '获得由':76 '薪资范围':110,150 '计算机相关专业优先':124,162 '语言开发经验':170 '负责':114,117,154 '负责与前端的对接工作':159 '负责测试网络部署与维护':120,157 '负责转接桥开发':121,158 '资助项目':49 '资本':80 '远程':2 '通过':21 '高级':3 '高级区块链工程师':108		
499	Getting a little more context.Context	{"ver":2,"uid":1,"hash":"SHA1:86e675bcd759507333ce8bde100afda30f44e597"}	https://golangweekly.com/issues/326	2020-08-21 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#326 — August 21, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/93919/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/93920/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94007/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1598011447/ezy1kpt9nfjbzia5zkcy.png" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94007/rss" title="github.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Errors 2.0: Go Errors, But With Network Portability and More</a></span> — A drop-in replacement for the standard <code>errors</code> package that adds things like network portability (across versions!) and stripping personally identifiable information out of errors. Check out the feature table to see how it compares to other solutions.</p>\n  <p>Raphael ‘kena’ Poss, Matt Mc, et al. </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/93921/rss" title="changelog.com" style=" color: #0099b4;    font-size: 1.05em;">Digging Into <code>context.Context</code></a></span> — Francesc Campoy and Isobel Redelmeier join the Go Time panel to cover an often misunderstood area of Go, the <code>context</code> package, and to share real-world insights into its use and misuse.</p>\n  <p>Go Time Podcast <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; ">podcast</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/93922/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/87e97607.png" width="110" height="110" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93922/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Remote Instructor-Led Go, Docker, Kubernetes, &amp; Python Training</a></span> — We offer live-streaming remote training sessions for individual engineers and companies that want to augment their knowledge in Go, Docker, Kubernetes, and Python. We’ve trained over 5,000 engineers via our carefully crafted classes.</p>\n  <p>Ardan Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93923/rss" title="entgo.io" style=" color: #0099b4;    font-size: 1.05em;">ent: An Entity Framework / ORM for Go from Facebook</a></span> — Provides a simple API for modelling any database schema as Go objects. Began life as a ‘Facebook Incubator’ project but as of v0.4.0, released this week, is now an official Facebook project.</p>\n  <p>Facebook </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93924/rss" title="taskfile.dev" style=" color: #0099b4;    font-size: 1.05em;">Task 3.0: A Task Runner / <code>make</code> Alternative Written in Go</a></span> — First mentioned in this newsletter <em>three and a half years ago</em>, it’s neat to see a project mature like this. <a href="https://golangweekly.com/link/93925/rss" style=" color: #0099b4;   ">v3.0.0 release notes.</a></p>\n  <p>Andrey Nering </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93926/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">Get Tech Interviews This Week</a></span> — Create a profile on Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93927/rss" title="getstream.io" style=" color: #0099b4;    font-size: 1.05em;">Stream Provides APIs for Building Activity Feeds and Chat</a></span> — Stream is looking for a full time Backend Software Engineer to join our development team. If you are interested in becoming a part of what we do, <a href="https://golangweekly.com/link/93927/rss" style=" color: #0099b4;   ">apply now</a>.</p>\n  <p>Stream </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93928/rss" title="x-team.com" style=" color: #0099b4;    font-size: 1.05em;">Golang Developer at X-Team (Remote)</a></span> — Join the most energizing community for developers and work on projects for Riot Games, FOX, Sony, Coinbase, and more.</p>\n  <p>X-Team </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93929/rss" title="blog.kalbhor.xyz" style=" color: #0099b4;    font-size: 1.05em;">Implementing <code>traceroute</code> in Go</a></span> — <code>traceroute</code> is a networking tool for displaying a path between hosts on an IP network. The end result in this case is <a href="https://golangweekly.com/link/94011/rss" style=" color: #0099b4;   ">tracesite</a>.</p>\n  <p>Lakshay Kalbhor </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/93930/rss" title="talks.rmoff.net" style=" color: #0099b4;    font-size: 1.05em;">Building a Telegram Bot with Apache Kafka and ksqlDB</a></span> — A well recorded 26-minute talk (and slide deck) digging into building a bot for the Telegram messaging system based on real world data being streamed through Kafka.</p>\n  <p>Robin Moffatt </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93931/rss" title="willschenk.com" style=" color: #0099b4;    font-size: 1.05em;">Using <code>askgit</code> to Query Git Repositories with SQL</a></span> — <a href="https://golangweekly.com/link/93932/rss" style=" color: #0099b4;   ">askgit</a> is a tool (written in Go) for running SQL queries against git repos and can be used to create reports, check things, analyze codebases, etc.</p>\n  <p>Will Schenk </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93933/rss" title="www.cockroachlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Upgrading CockroachDB from Dep to Go Modules</a></span></p>\n  <p>Cockroach Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93934/rss" title="pingfrommorocco.blogspot.com" style=" color: #0099b4;    font-size: 1.05em;">Porting a Go and Rust CLI Tool to D</a></span> — Two weeks ago we linked to a developer who <a href="https://golangweekly.com/link/93935/rss" style=" color: #0099b4;   ">built the same tool in Go and Rust</a> to compare the languages. Another developer has gone a step further by porting to <a href="https://golangweekly.com/link/93936/rss" style=" color: #0099b4;   ">the D language</a>.</p>\n  <p>Azi Hassan </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93937/rss" title="fraugster.com" style=" color: #0099b4;    font-size: 1.05em;">Swimming in Datalakes with Go</a></span> — This is the story of the creation of parquet-go, a Go package to write Apache Parquet files, which is a columnar-based file format for big data.</p>\n  <p>Fraugster </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93938/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Signal Context: Create Go Contexts That Cancel on Signals</a></span> — Like if you want to cancel an operation when a user interrupts with CTRL+C, say.</p>\n  <p>Seth Vargo </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93939/rss" title="pkg.go.dev" style=" color: #0099b4;    font-size: 1.05em;">Badge Generation Tool for <code>pkg.go.dev</code></a></span> — An official tool to create a badge to link to <code>pkg.go.dev</code> from your project’s web site or README.</p>\n  <p>Go Package System </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93941/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">miti: A Musical Instrument Textual Interface</a></span> — Think MIDI, but with human-readable text! This is niche, but neat, and provides an interesting alternative way to control instruments over MIDI.</p>\n  <p>Zack </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93940/rss" title="www.honeybadger.io" style=" color: #0099b4;    font-size: 1.05em;">Logging in Go: Choosing a System and Using it</a></span> — From the Honeybadger Developer Blog featuring tutorials &amp; good advice by the coolest error monitoring solution around. 😎</p>\n  <p>Honeybadger <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93942/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Nali: An Offline Tool for Querying IP Geographic Information</a></span></p>\n  <p>zu1k </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93943/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Pomerium: An Identity-Aware Secure Access Proxy</a></span> — An open-source identity-aware access proxy that just <a href="https://golangweekly.com/link/93944/rss" style=" color: #0099b4;   ">added</a> native support for kubernetes, istio, and serverless deployments.</p>\n  <p>Pomerium </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93945/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Gate: A High Performance Minecraft Proxy Server</a></span> — Yes, Minecraft! I’ve never got <em>this</em> far into Minecraft but apparently being able to move players between servers without disconnecting them is a <em>thing</em> and Gate can do that job.</p>\n  <p>Minekube </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93946/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Guora: A Self-Hosted Quora-like Webapp Written in Go</a></span></p>\n  <p>meloalright </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🎲 Fun and Side Projects</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/93947/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/lcaj4ebwytpa5vth9pzr.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/93947/rss" title="piccolo.click" style=" color: #0099b4;    font-size: 1.05em;">Piccolo: An Othello (a.k.a. Reversi) AI Written in Go</a></span> — No source for this, but the fun part is you can play it on the Web as it runs via WebAssembly.. and it plays a pretty mean game. Built using the <a href="https://golangweekly.com/link/93948/rss" style=" color: #0099b4;   ">Ebiten</a> 2D game library.</p>\n  <p>Nadim Kobeissi </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;"><p>If you want to get into a section like this in a future issue, let us know if you work on any interesting Go related projects you think we should include. Bonus points for games, musical, or anything with a nice visual angle we can include, but everything welcome. 😄</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/326/rss" width="1" height="1" />	67c9c9c3158caff2925a21e8838fd3b32b82edb6	\N	f	2020-08-21 13:10:00	2020-09-10 05:10:12.743733	0			'..':773 '000':152 '2.0':18 '2020':9 '21':8 '26':380 '2d':785 '3.0':205 '326':6 '5':151 '500':260 'a':2,27,172,186,206,221,230,247,283,300,345,350,369,377,389,417,454,468,487,514,524,554,573,591,625,688,717,727,777,796,801,829 'a.k.a':746 'able':707 'access':664,673 'across':43 'activity':275 'added':677 'adds':38 'advice':638 'against':426 'ago':224,464 'ai':748 'al':72 'alternative':210,613 'an':88,163,199,355,551,568,611,649,659,666,744 'analyze':438 'and':25,45,78,97,107,133,145,220,258,277,323,333,375,383,429,456,477,609,627,683,719,740,774 'andrey':238 'angle':832 'another':483 'any':177,811 'anything':827 'apache':373,519 'api':174 'apis':272 'apparently':705 'apply':306 'ardan':159 'are':296 'area':91 'around':645 'as':180,185,191,768 'askgit':408,415 'at':256,311 'augment':138 'august':7 'aware':662,672 'azi':496 'backend':286 'badge':563,574 'based':396,527 'be':431 'becoming':299 'began':183 'being':401,706 'between':352,711 'big':531 'blog':634 'bonus':821 'bot':371,390 'building':274,368,388 'built':471,781 'but':21,190,598,607,704,756,836 'by':490,639 'c':559 'campoy':77 'can':430,721,762,834 'cancel':542,550 'carefully':156 'case':363 'chat':278 'check':53,436 'choosing':624 'classes':158 'cli':458 'cockroach':450 'cockroachdb':444 'code':534 'codebases':439 'coinbase':332 'columnar':526 'columnar-based':525 'community':320 'companies':134,261 'compare':480 'compares':62 'connect':252 'context':95,537 'context.context':5,75 'contexts':540 'control':616 'coolest':641 'cover':87 'crafted':157 'create':246,434,538,572 'creation':509 'ctrl':558 'd':461,494 'data':400,532 'database':178 'datalakes':500 'deck':385 'dep':446 'deployments':685 'developer':310,469,484,633 'developers':322 'development':292 'digging':73,386 'disconnecting':714 'displaying':349 'do':305,722 'docker':118,143 'drop':29 'drop-in':28 'ebiten':784 'end':359 'energizing':319 'engineer':288 'engineers':132,153 'ent':162 'entity':164 'error':642 'errors':17,20,35,52 'et':71 'etc':440 'everything':837 'facebook':170,187,201,203 'far':701 'feature':56 'featuring':635 'feeds':276 'file':528 'files':521 'first':214 'for':32,130,167,175,265,273,282,321,327,348,391,422,530,566,652,680,754,823 'format':529 'fortune':259 'fox':330 'framework':165 'francesc':76 'fraugster':533 'free':264 'from':169,445,579,630 'full':284 'fun':739,758 'further':489 'future':802 'game':780,786 'games':329,824 'gate':687,720 'generation':564 'geographic':655 'get':241,794 'getting':1 'git':411,427 'go':19,83,93,109,117,142,168,181,213,342,421,448,455,476,502,513,515,539,587,623,737,751,813 'golang':15,309 'gone':486 'good':637 'got':699 'guora':726 'half':222 'has':485 'hassan':497 'high':689 'hiring':254 'honeybadger':632,646 'hosted':730 'hosts':353 'how':60 'human':601 'human-readable':600 'i':696 'identifiable':48 'identity':661,671 'identity-aware':660,670 'if':294,546,790,807 'implementing':339 'in':30,141,212,216,298,341,361,420,475,499,622,736,750,800 'include':820,835 'incubator':188 'individual':131 'information':49,656 'insights':103 'instructor':115 'instructor-led':114 'instrument':593 'instruments':617 'interested':297 'interesting':612,812 'interface':595 'interrupts':556 'interviews':243 'into':74,104,387,702,795 'ip':356,654 'is':197,280,344,364,416,504,523,605,716,760 'isobel':79 'issue':803 'istio':682 'it':61,225,262,629,764,769,775 'its':105 'job':267,724 'job-seekers':266 'jobs':240 'join':81,290,316 'just':676 'kafka':374,404 'kalbhor':367 'kena':67 'know':806 'knowledge':140 'kobeissi':789 'ksqldb':376 'kubernetes':119,144,681 'labs':160,451 'lakshay':366 'language':495 'languages':482 'led':116 'let':804 'library':787 'life':184 'like':40,233,545,733,798 'link':576 'linked':466 'little':3 'live':125 'live-streaming':124 'logging':621 'looking':281 'make':209 'managers':255 'matt':69 'mature':232 'mc':70 'mean':779 'meloalright':738 'mentioned':215 'messaging':394 'midi':597,619 'minecraft':691,695,703 'minekube':725 'minute':381 'misunderstood':90 'misuse':108 'miti':590 'modelling':176 'modules':449 'moffatt':406 'monitoring':643 'more':4,26,334 'most':318 'move':709 'musical':592,825 'nadim':788 'nali':648 'native':678 'neat':227,608 'nering':239 'network':23,41,357 'networking':346 'never':698 'newsletter':218 'nice':830 'niche':606 'no':752 'notes':237 'now':198,307 'objects':182 'of':51,92,192,302,507,510 'offer':123 'official':200,569 'offline':650 'often':89 'on':12,249,325,354,397,543,765,810 'open':668 'open-source':667 'operation':552 'or':585,826 'orm':166 'othello':745 'other':64 'our':155,291 'out':50,54 'over':150,618 'package':36,96,516,588 'panel':85 'parquet':512,520 'parquet-go':511 'part':301,759 'path':351 'performance':690 'personally':47 'piccolo':743 'pkg.go.dev':567,578 'play':763 'players':710 'plays':776 'podcast':111,112 'points':822 'pomerium':658,686 'portability':24,42 'porting':453,491 'poss':68 'pretty':778 'profile':248 'project':189,202,231,581 'projects':326,742,815 'provides':171,271,610 'proxy':665,674,692 'python':120,146 'queries':425 'query':410 'querying':653 'quora':732 'quora-like':731 'raphael':66 'read':11 'readable':602 'readme':586 'real':101,398 'real-world':100 'recorded':379 'redelmeier':80 'related':814 'release':236 'released':194 'remote':113,127,315 'replacement':31 'reports':435 'repos':428 'repositories':412 'result':360 'reversi':747 'riot':328 'robin':405 'runner':208 'running':423 'runs':770 'rust':457,478 's':226,263,582 'same':473 'say':560 'schema':179 'schenk':442 'section':797 'secure':663 'see':59,229 'seekers':268 'self':729 'self-hosted':728 'server':693 'serverless':684 'servers':712 'sessions':129 'seth':561 'share':99 'should':819 'side':741 'signal':536 'signals':544 'simple':173 'site':584 'slide':384 'software':287 'solution':644 'solutions':65 'sony':331 'source':669,753 'sponsor':161,452,647 'sql':414,424 'standard':34 'startups':257 'step':488 'story':506 'stream':270,279,308 'streamed':402 'streaming':126 'stripping':46 'support':679 'swimming':498 'system':395,589,626 'table':57 'talk':382 'task':204,207 'team':293,314,337 'tech':242 'telegram':370,393 'text':603 'textual':594 'that':37,135,541,675,723 'the':13,33,55,82,94,317,358,392,472,481,493,505,508,631,640,757,766,783 'their':139 'them':715 'thing':718 'things':39,437 'think':596,817 'this':195,217,234,244,362,503,604,700,755,799 'three':219 'through':403 'time':84,110,285 'to':58,63,86,98,137,228,251,289,409,433,447,460,467,479,492,517,549,571,575,577,615,708,793 'tool':347,418,459,474,565,570,651 'tools':535 'traceroute':340,343 'tracesite':365 'trained':149 'training':121,128 'tutorials':338,636 'two':462 'unsubscribe':10 'upgrading':443 'us':805 'use':106 'used':432 'user':555 'using':407,628,782 'v0.4.0':193 'v3.0.0':235 'vargo':562 've':148,697 'versions':44 'vettery':250,269 'via':154,771 'visual':831 'want':136,548,792 'way':614 'we':122,147,304,465,818,833 'web':14,583,767 'webapp':734 'webassembly':772 'week':196,245 'weekly':16 'weeks':463 'welcome':838 'well':378 'what':303 'when':553 'which':522 'who':470 'will':441 'with':22,253,372,413,501,557,599,828 'without':713 'work':324,809 'world':102,399 'write':518 'written':211,419,735,749 'x':313,336 'x-team':312,335 'years':223 'yes':694 'you':295,547,761,791,808,816 'your':580 'zack':620 'zu1k':657		
189	Introduction To Numeric Constants In Go	{"ver":2,"uid":1,"hash":"SHA1:a9c5299661be43c3aa05e11e338c05a4ced3fd91"}	https://www.ardanlabs.com/blog/2014/04/introduction-to-numeric-constants-in-go.html	2014-04-06 00:00:00	Introduction\nOne of the more unique features of Go is how the language implements constants. The rules for constants in the language specification are unique to Go. They provide the flexibility Go needs at the compiler level to make the code we write readable and intuitive while still maintaining a type safe language.\nThis post will attempt to build a foundation for what numeric constants are, how they behave in their simplest form and how best to talk about them.	c1d8c5998120dffd324b836b26288b7233104eaa	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.52079	0			'attempt':63 'behav':75 'best':82 'build':65 'code':47 'compil':42 'constant':4,21,25,71 'featur':13 'flexibl':37 'form':79 'foundat':67 'go':6,15,33,38 'implement':20 'introduct':1,7 'intuit':52 'languag':19,28,59 'level':43 'maintain':55 'make':45 'need':39 'numer':3,70 'one':8 'post':61 'provid':35 'readabl':50 'rule':23 'safe':58 'simplest':78 'specif':29 'still':54 'talk':84 'type':57 'uniqu':12,31 'write':49	en	
210	Cross Compile Your Go Programs	{"ver":2,"uid":1,"hash":"SHA1:d241cd5c19f93698a83d44fa98d674f85a2cf659"}	https://www.ardanlabs.com/blog/2013/10/cross-compile-your-go-programs.html	2013-10-02 00:00:00	Introduction\nIn my post about building and running programs in Iron.Io, I needed to switched over to my Ubuntu VM to build linux versions of my test programs locally. I love the ability to have Ubuntu available to me for building and testing my code. However, if I can stay on the Mac side it is better.\nI have wanted to learn how to cross compile my Go programs for the two platforms I use, darwin/amd64 and linux/amd64.	e0002ea38bc2adaf2617d52c9ef0b0f33298e2ce	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.561853	0			'abil':38 'avail':42 'better':62 'build':11,27,46 'code':50 'compil':2,71 'cross':1,70 'darwin/amd64':81 'go':4,73 'howev':51 'introduct':6 'iron.io':16 'learn':67 'linux':28 'linux/amd64':83 'local':34 'love':36 'mac':58 'need':18 'platform':78 'post':9 'program':5,14,33,74 'run':13 'side':59 'stay':55 'switch':20 'test':32,48 'two':77 'ubuntu':24,41 'use':80 'version':29 'vm':25 'want':65	en	
234	How Packages Work in Go	{"ver":2,"uid":1,"hash":"SHA1:e74c0681e5b010faaff6bbd8f89cbea09bc9c6b0"}	https://www.ardanlabs.com/blog/2013/07/how-packages-work-in-go-language.html	2013-07-05 00:00:00	Since I started writing code in Go it has been a mystery to me how best to organize my code and use the package keyword. The package keyword is similar to using a namespace in C#, however the convention is to tie the package name to the directory structure.\nGo has this web page that attempts to explain how to write Go Code.\nhttp://golang.org/doc/code.html\nWhen I started programming in Go this was one of the first documents I read.	1cafc9610a4130ae7420df029a343a510711d977	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.608687	0			'/doc/code.html':71 'attempt':61 'best':21 'c':41 'code':10,25,68 'convent':44 'directori':53 'document':84 'explain':63 'first':83 'go':5,12,55,67,77 'golang.org':70 'golang.org/doc/code.html':69 'howev':42 'keyword':30,33 'mysteri':17 'name':50 'namespac':39 'one':80 'organ':23 'packag':2,29,32,49 'page':59 'program':75 'read':86 'similar':35 'sinc':6 'start':8,74 'structur':54 'tie':47 'use':27,37 'web':58 'work':3 'write':9,66	en	
605	Please read the paper before you comment	{"ver":2,"uid":1,"hash":"SHA1:2d295116d96e052c73409741dbbe5585bc4b45ea"}	https://buttondown.email/hillelwayne/archive/please-read-the-paper-before-you-comment/	2020-08-25 09:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24267138"> https://news.ycombinator.com/item?id=24267138 </a>	e1724424300f564b0e628f98c1c134b913b75959	\N	f	2020-08-25 09:10:00	2020-08-27 20:10:10.160152	0			'/item?id=24267138':11 'comment':7,8 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24267138':9 'paper':4 'pleas':1 'read':2	zh	azhenley
251	趣题：两个方阵是怎样互相穿过对方的？	{"ver":2,"uid":1,"hash":"SHA1:dd88a66a1dbb2bef88483126580c210bd68497cf"}	http://www.matrix67.com/blog/archives/6750	2016-04-30 03:38:17	<p>来自日本体育大学的一场“集团行动”演出被制作成 GIF 动画后迅速在网上蹿红。在动画中，一个 5 × 5 的方阵沿着某一方向整齐地匀速前行，另一个 5 × 5 的方阵朝着与之垂直的方向也在整齐地匀速前进，两者奇迹般地互相穿过了对方。问题来了：这是怎么回事？</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604291.gif" alt="" /></p>\n<p><span id="more-6750"></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>你可以把他们想象成是不同的 10 行，他们以相同的速度前进后退。只不过，其中 5 行横着走的方向跟另外 5 行不一样，于是就形成了两个互相穿过对方的方阵。也就是说，如果每一行的人手牵着手，两个方阵照样可以传过去。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604292.gif" alt="" width="400" /></p>\n<p>我是在这里看见的相关讨论： <a href="http://www.reddit.com/r/interestingasfuck/comments/4gsgyu/men_in_sync/">http://www.reddit.com/r/interestingasfuck/comments/4gsgyu/men_in_sync/</a></p>\n	baedd29258fd6eb59b01fc3222d10f13da5351ff	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.850456	17	http://www.matrix67.com/blog/archives/6750#comments		'/r/interestingasfuck/comments/4gsgyu/men_in_sync/':37 '10':21 '5':10,11,14,15,26,28 'gif':6 'www.reddit.com':36 'www.reddit.com/r/interestingasfuck/comments/4gsgyu/men_in_sync/':35 '一个':9 '两个方阵是怎样互相穿过对方的':2 '两个方阵照样可以传过去':33 '两者奇迹般地互相穿过了对方':17 '也就是说':31 '于是就形成了两个互相穿过对方的方阵':30 '他们以相同的速度前进后退':23 '你可以把他们想象成是不同的':20 '其中':25 '动画后迅速在网上蹿红':7 '另一个':13 '只不过':24 '在动画中':8 '如果每一行的人手牵着手':32 '我是在这里看见的相关讨论':34 '来自日本体育大学的一场':3 '演出被制作成':5 '的方阵朝着与之垂直的方向也在整齐地匀速前进':16 '的方阵沿着某一方向整齐地匀速前行':12 '行':22 '行不一样':29 '行横着走的方向跟另外':27 '趣题':1 '这是怎么回事':19 '问题来了':18 '集团行动':4	en	admin
208	My Channel Select Bug	{"ver":2,"uid":1,"hash":"SHA1:fbf73eaba8e19a9a08408904aecab449fd55d822"}	https://www.ardanlabs.com/blog/2013/10/my-channel-select-bug.html	2013-10-17 00:00:00	I was testing new functionality on a program that is already running in production when suddenly the code behaved very badly. What I saw shocked me and then it became obvious why it happened. I also have a race condition just waiting to be a problem.\nI have tried to provide a simplified version of the code and the two bugs.\npackage main\nimport (\n&nbsp; &nbsp; &quot;fmt&quot;\n&nbsp; &nbsp; &quot;os&quot;	6e95346e92297c83f26677aa0937e41e96b768bd	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.557943	0			'alreadi':15 'also':40 'bad':25 'becam':34 'behav':23 'bug':4,65 'channel':2 'code':22,61 'condit':44 'fmt':69 'function':9 'happen':38 'import':68 'main':67 'new':8 'obvious':35 'os':70 'packag':66 'problem':50 'product':18 'program':12 'provid':55 'race':43 'run':16 'saw':28 'select':3 'shock':29 'simplifi':57 'sudden':20 'test':7 'tri':53 'two':64 'version':58 'wait':46	en	
207	Manage Dependencies With GODEP	{"ver":2,"uid":1,"hash":"SHA1:c895a437a2851da29f6d6050804dec008a5b6199"}	https://www.ardanlabs.com/blog/2013/10/manage-dependencies-with-godep.html	2013-10-26 00:00:00	Introduction If you are using 3rd party packages, (packages that you don&rsquo;t own or control), you will want a way to create a reproducible build every time you build your projects. If you use 3rd party packages directly and the package authors change things, your projects could break. Even if things don&rsquo;t break, code changes could create inconsistent behavior and bugs.\nKeith Rarick&rsquo;s tool godep&nbsp;is a great step in the right direction for managing 3rd party dependencies and creating reproducible builds.	41db33458aa5f6e4b8de289039c55b597a063579	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.555931	0			'3rd':10,40,83 'author':47 'behavior':65 'break':53,59 'bug':67 'build':30,34,89 'chang':48,61 'code':60 'control':20 'could':52,62 'creat':27,63,87 'depend':2,85 'direct':43,80 'even':54 'everi':31 'godep':4,72 'great':75 'inconsist':64 'introduct':5 'keith':68 'manag':1,82 'packag':12,13,42,46 'parti':11,41,84 'project':36,51 'rarick':69 'reproduc':29,88 'right':79 'step':76 'thing':49,56 'time':32 'tool':71 'use':9,39 'want':23 'way':25	en	
524	Ventoy: A new bootable USB solution	{"ver":2,"uid":1,"hash":"SHA1:7167ede22c517b24f7e34509373d0daed5cecdab"}	https://www.ventoy.net/	2020-08-22 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24241485"> https://news.ycombinator.com/item?id=24241485 </a>	dea705895cd28dbb9fa074fd3215adec0d7b147e	\N	f	2020-08-22 19:10:00	2020-08-25 22:10:10.531716	0			'/item?id=24241485':10 'bootabl':4 'comment':7 'new':3 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24241485':8 'solut':6 'usb':5 'ventoy':1	zh	mmphosis
607	How to Write in Plain English	{"ver":2,"uid":1,"hash":"SHA1:a7fb36d88f2a382925d5d03c81089ae25646a921"}	http://www.plainenglish.co.uk/how-to-write-in-plain-english.html	2020-08-25 15:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24268382"> https://news.ycombinator.com/item?id=24268382 </a>	593475bd018870ecd43dc649f5b146096aaacb0b	\N	f	2020-08-25 15:10:00	2020-08-27 20:10:10.162238	0			'/item?id=24268382':10 'comment':7 'english':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24268382':8 'plain':5 'write':3	zh	zackhsi
437	关于 Golang 错误处理的一些思考​	{"ver":2,"uid":1,"hash":"SHA1:02b7906cb6a31e761b2c25faa3a2ba1e8e48c48a"}	https://toutiao.io/k/fuqmwtt	2020-08-19 22:10:08	关于 Golang 错误处理的一些思考​	ac94a78a8ebd05ef467de49a82ac616b88b40af7	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.667073	0			'golang':2,5 '关于':1,4 '错误处理的一些思考​':3,6	zh	
608	Docker to rate limit image pulls	{"ver":2,"uid":1,"hash":"SHA1:8c7d84b090d0ae15afcd13df8729a87a0b4b2a29"}	https://www.docker.com/blog/scaling-docker-to-serve-millions-more-developers-network-egress/	2020-08-25 15:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24262757"> https://news.ycombinator.com/item?id=24262757 </a>	db6764c9187d8f3a6b66469b280934ea655c8bd8	\N	f	2020-08-25 15:10:00	2020-08-27 20:10:10.212278	0			'/item?id=24262757':10 'comment':7 'docker':1 'imag':5 'limit':4 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24262757':8 'pull':6 'rate':3	zh	AaronFriel
17	go test -v streaming output	{"ver":2,"uid":1,"hash":"SHA1:1c8953572598942b003aefcdb59dca9a452fec40"}	https://dave.cheney.net/2020/03/10/go-test-v-streaming-output	2020-03-10 07:03:04	\n<p>The <code>testing</code> package is one of my favourite packages in the Go standard library, not just because of its low noise approach to unit testing, but, over the lifetime of Go, it has received a steady stream of quality of life improvements driven by real world usage.</p>\n\n\n\n<p>The most recent example of this is, in Go 1.14, <code>go test -v</code> will stream <code>t.Log</code> output as it happens, rather than hoarding it til the end of the test run. Here’s an example;</p>\n\n\n\n<pre class="wp-block-code"><code>package main\n\nimport (\n\t"fmt"\n\t"testing"\n\t"time"\n)\n\nfunc TestLogStreaming(t *testing.T) {\n\tfor i := 0; i &lt; 5; i++ {\n\t\ttime.Sleep(300 * time.Millisecond)\n\t\tfmt.Println("fmt.Println:", i)\n\t\tt.Log("t.Log:", i)\n\t}\n}</code></pre>\n\n\n\n<p><em>Note:</em> Calling <code>fmt.Println</code> inside a test is generally considered a no no as it bypasses the <code>testing</code> package’s output buffering irrespective of the <code>-v</code> flag. However, for this example, it‘s necessary to demonstrate the streaming <code>t.Log</code> change.</p>\n\n\n\n<pre class="wp-block-code"><code>% go1.13 test -v tlog_test.go\n=== RUN   TestLogStreaming\nfmt.Println: 0\nfmt.Println: 1\nfmt.Println: 2\nfmt.Println: 3\nfmt.Println: 4\n--- PASS: TestLogStreaming (1.52s)\n    tlog_test.go:13: t.Log: 0\n    tlog_test.go:13: t.Log: 1\n    tlog_test.go:13: t.Log: 2\n    tlog_test.go:13: t.Log: 3\n    tlog_test.go:13: t.Log: 4\nPASS\nok      command-line-arguments  1.971s</code></pre>\n\n\n\n<p>Under Go 1.13 and earlier the <code>fmt.Println</code> lines output immediately. <code>t.Log</code> lines are buffered and are printed after the test completes.</p>\n\n\n\n<pre class="wp-block-code"><code>% go1.14 test -v tlog_test.go\n=== RUN   TestLogStreaming\nfmt.Println: 0\n    TestLogStreaming: tlog_test.go:13: t.Log: 0\nfmt.Println: 1\n    TestLogStreaming: tlog_test.go:13: t.Log: 1\nfmt.Println: 2\n    TestLogStreaming: tlog_test.go:13: t.Log: 2\nfmt.Println: 3\n    TestLogStreaming: tlog_test.go:13: t.Log: 3\nfmt.Println: 4\n    TestLogStreaming: tlog_test.go:13: t.Log: 4\n--- PASS: TestLogStreaming (1.51s)\nPASS\nok      command-line-arguments  1.809s</code></pre>\n\n\n\n<p>Under Go 1.14 the <code>fmt.Println</code> and <code>t.Log</code> lines are interleaved, rather than waiting for the test to complete, demonstrating that test output is streamed when <code>go test -v</code> is used.</p>\n\n\n\n<p>This is a great quality of life improvement for integration style tests that often retry for long periods when the test is failing. Streaming <code>t.Log</code> output will help Gophers debug those test failures without having to wait until the entire test times out to receive their output. </p>\n	ec3049872c54cd6144735212f6346794254afdec	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.221338	0			'0':100,159,174,223,227 '1':161,177,229,233 '1.13':197 '1.14':62,266 '1.51':254 '1.52':170 '1.809':262 '1.971':193 '2':163,180,235,239 '3':165,183,241,245 '300':105 '4':167,186,247,251 '5':102 'a':40,117,122,296 'after':212 'an':86 'and':198,209,269 'approach':27 'are':207,210,272 'arguments':192,261 'as':70,125 'because':22 'buffered':208 'buffering':133 'but':31 'by':49 'bypasses':127 'calling':114 'change':151 'command':190,259 'command-line-arguments':189,258 'complete':281 'completes':215 'considered':121 'debug':323 'demonstrate':147 'demonstrating':282 'driven':48 'earlier':199 'end':79 'entire':333 'example':56,87,142 'failing':316 'failures':326 'favourite':13 'flag':138 'fmt':91 'fmt.println':107,108,115,158,160,162,164,166,201,222,228,234,240,246,268 'for':98,140,277,302,309 'func':94 'generally':120 'go':1,17,36,61,63,196,265,289 'go1.13':152 'go1.14':216 'gophers':322 'great':297 'happens':72 'has':38 'having':328 'help':321 'here':84 'hoarding':75 'however':139 'i':99,101,103,109,112 'immediately':204 'import':90 'improvement':301 'improvements':47 'in':15,60 'inside':116 'integration':303 'interleaved':273 'irrespective':134 'is':9,59,119,286,292,295,315 'it':37,71,76,126,143 'its':24 'just':21 'library':19 'life':46,300 'lifetime':34 'line':191,260 'lines':202,206,271 'long':310 'low':25 'main':89 'most':54 'my':12 'necessary':145 'no':123,124 'noise':26 'not':20 'note':113 'of':11,23,35,43,45,57,80,135,299 'often':307 'ok':188,257 'one':10 'out':336 'output':5,69,132,203,285,319,340 'over':32 'package':8,88,130 'packages':14 'pass':168,187,252,256 'periods':311 'printed':211 'quality':44,298 'rather':73,274 'real':50 'receive':338 'received':39 'recent':55 'retry':308 'run':83,156,220 's':85,131,144,171,194,255,263 'standard':18 'steady':41 'stream':42,67 'streamed':287 'streaming':4,149,317 'style':304 't':96 't.log':68,110,111,150,173,176,179,182,185,205,226,232,238,244,250,270,318 'test':2,64,82,118,153,214,217,279,284,290,314,325,334 'testing':7,30,92,129 'testing.t':97 'testlogstreaming':95,157,169,221,224,230,236,242,248,253 'tests':305 'than':74,275 'that':283,306 'the':6,16,33,53,78,81,128,136,148,200,213,267,278,313,332 'their':339 'this':58,141,294 'those':324 'til':77 'time':93 'time.millisecond':106 'time.sleep':104 'times':335 'tlog_test.go':155,219 'tlog_test.go:13':172,175,178,181,184,225,231,237,243,249 'to':28,146,280,329,337 'under':195,264 'unit':29 'until':331 'usage':52 'used':293 'v':3,65,137,154,218,291 'wait':330 'waiting':276 'when':288,312 'will':66,320 'without':327 'world':51	en	Dave Cheney
631	加入「码农周刊 VIP 会员」，与上市公司 CTO 一起成长！	{"ver":2,"uid":1,"hash":"SHA1:344e915b305e51087d8abde3927e9f12cec37891"}	https://toutiao.io/k/dhm0x44	2020-08-26 02:10:08	加入「码农周刊 VIP 会员」，与上市公司 CTO 一起成长！	f1ad841c7b955fe4ef0e16001ccb5a3db6fafecd	\N	f	2020-08-26 02:10:00	2020-08-27 00:10:12.082142	0			'cto':6,13 'vip':3,10 '一起成长':7,14 '与上市公司':5,12 '会员':4,11 '加入':1,8 '码农周刊':2,9	zh	
438	单元测试，只是测试吗？	{"ver":2,"uid":1,"hash":"SHA1:751b1cb2532814a3995fd79ba8a1e32cde320f13"}	https://toutiao.io/k/pveume6	2020-08-19 22:10:08	单元测试，只是测试吗？	1b0d2306f0df352adf50dee8ace8b5728f2daf74	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.671136	0			'单元测试':1,3 '只是测试吗':2,4	zh	
434	Apple helped make 'top secret' iPod for US government	{"ver":2,"uid":1,"hash":"SHA1:98cdf80e74beadaf57d0a0b820700e6bd199e051"}	https://www.bbc.co.uk/news/technology-53835079	2020-08-19 22:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24212520"> https://news.ycombinator.com/item?id=24212520 </a>	9b3e407ad6489c827eca37faa76de325d3d0006d	\N	f	2020-08-19 22:10:00	2020-08-24 01:10:07.57364	0			'/item?id=24212520':13 'appl':1 'comment':10 'govern':9 'help':2 'ipod':6 'make':3 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24212520':11 'secret':5 'top':4 'us':8	zh	sjcsjc
435	[推荐] 高手都是如何刷 LeetCode 的？| 码农周刊第 315 期	{"ver":2,"uid":1,"hash":"SHA1:2975403dba9443e27f6820a837900b60afd1e225"}	https://toutiao.io/k/sh6tvfh	2020-08-28 17:10:21	[推荐] 高手都是如何刷 LeetCode 的？| 码农周刊第 315 期	83f1856f1f8647bb3469232037fb265e2abee6b1	\N	f	2020-08-19 22:10:00	2020-09-08 14:10:09.232243	0			'315':6,13 'leetcode':3,10 '推荐':1,8 '期':7,14 '的':4,11 '码农周刊第':5,12 '高手都是如何刷':2,9	zh	
640	Go 设计模式：单例模式	{"ver":2,"uid":1,"hash":"SHA1:0e65c1ef8d9e9a386c79cbbe67dc400449aabe4e"}	https://toutiao.io/k/k9hcvn5	2020-08-26 03:10:10	Go 设计模式：单例模式	535484dfb1ed51fdfaf639a59cb3cbe1d47f8e65	\N	f	2020-08-26 03:10:00	2020-08-27 00:10:12.080049	0			'go':1,4 '单例模式':3,6 '设计模式':2,5	zh	
639	Optimal Peanut Butter and Banana Sandwiches	{"ver":2,"uid":1,"hash":"SHA1:7d9935d93bec39e4e50bc12a3793b07b796164a2"}	https://www.ethanrosenthal.com/2020/08/25/optimal-peanut-butter-and-banana-sandwiches/	2020-08-26 03:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24272814"> https://news.ycombinator.com/item?id=24272814 </a>	de2686c6e8873ffd66772934ddb8d0c8791a7ffa	\N	f	2020-08-26 03:10:00	2020-08-29 02:10:09.283313	0			'/item?id=24272814':10 'banana':5 'butter':3 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24272814':8 'optim':1 'peanut':2 'sandwich':6	zh	ethanahte
439	深度剖析 GitHub 上 15.1k Star 项目：redux-thunk	{"ver":2,"uid":1,"hash":"SHA1:541c09523fbcb5ab28d70daec8801b92ecacb804"}	https://toutiao.io/k/pyja4h7	2020-08-19 22:10:08	深度剖析 GitHub 上 15.1k Star 项目：redux-thunk	0c321c1d93655faedba63390f458d2e8264614fc	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.685277	0			'15.1':4,14 'github':2,12 'k':5,15 'redux':9,19 'redux-thunk':8,18 'star':6,16 'thunk':10,20 '上':3,13 '深度剖析':1,11 '项目':7,17	zh	
642	Service Mesh 对比：Istio 与 Linkerd	{"ver":2,"uid":1,"hash":"SHA1:21845f25dff59aacdfa682954f8a85cf599f3d6b"}	https://toutiao.io/k/ut0r76n	2020-08-26 03:10:10	Service Mesh 对比：Istio 与 Linkerd	f1a756b1633eef34cf1de5a2fcfbeb8df48c1753	\N	f	2020-08-26 03:10:00	2020-08-27 00:10:12.06509	0			'istio':4,10 'linkerd':6,12 'mesh':2,8 'service':1,7 '与':5,11 '对比':3,9	zh	
441	直观解读 KL 散度的数学概念	{"ver":2,"uid":1,"hash":"SHA1:23234b8c86007214725a31dd237a5e9e9a091d4f"}	https://toutiao.io/k/thaa1tn	2020-08-19 22:10:08	直观解读 KL 散度的数学概念	32324dc670d128eba9d63a84e997ccc76fac4988	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.687233	0			'kl':2,5 '散度的数学概念':3,6 '直观解读':1,4	zh	
1103	不要再问我 in，exists 走不走索引了	{"ver":2,"uid":1,"hash":"SHA1:7d04b082a0a3cee2ea672ab6c7104ac53496a46d"}	https://toutiao.io/k/b46dizj	2020-09-09 04:10:11	不要再问我 in，exists 走不走索引了	389f1ce55f0d89ae5a2578f78051bacd616dfb94	\N	f	2020-09-09 04:10:00	2020-09-10 00:10:10.17392	0			'exists':3,7 'in':2,6 '不要再问我':1,5 '走不走索引了':4,8	zh	
641	NiLang：可逆计算，微分万物	{"ver":2,"uid":1,"hash":"SHA1:369f7b97968f167969633af0b95f10741aeae266"}	https://toutiao.io/k/i5g7k4b	2020-08-26 03:10:10	NiLang：可逆计算，微分万物	49a6aa2e3d609a8f2deb9bc989e2707066bc761e	\N	f	2020-08-26 03:10:00	2020-08-27 00:10:12.066992	0			'nilang':1,4 '可逆计算':2,5 '微分万物':3,6	zh	
443	OPA Gatekeeper 策略入门	{"ver":2,"uid":1,"hash":"SHA1:1b47d2d7275aed228d79c7067dee365766942ceb"}	https://toutiao.io/k/9426ael	2020-08-19 22:10:08	OPA Gatekeeper 策略入门	d45f78de5326c658f7995fc34932ddd5c52cab47	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.689696	0			'gatekeeper':2,5 'opa':1,4 '策略入门':3,6	zh	
643	特征工程：连续特征的常见处理方式（含实例）	{"ver":2,"uid":1,"hash":"SHA1:ddec063ec9ec62b05693e854fa657a57bcecf6e0"}	https://toutiao.io/k/5wxxrn2	2020-08-26 03:10:10	特征工程：连续特征的常见处理方式（含实例）	570c5aedafbdefdb45c67278b1a084563c7030af	\N	f	2020-08-26 03:10:00	2020-08-27 00:10:12.069	0			'含实例':3,6 '特征工程':1,4 '连续特征的常见处理方式':2,5	zh	
383	Canon's cloud platform has lost users' files and can't restore them	{"ver":2,"uid":1,"hash":"SHA1:60e50b32b288fa379a381c368fdd3efc114eff97"}	https://www.digitalcameraworld.com/news/canon-websites-held-to-ransom-by-hackers	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24196131"> https://news.ycombinator.com/item?id=24196131 </a>	d58dd6b962275d0a8567f763647a947556f86be7	\N	f	2020-08-18 15:10:00	2020-08-21 06:10:09.902906	0			'/item?id=24196131':17 'canon':1 'cloud':3 'comment':14 'file':8 'lost':6 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24196131':15 'platform':4 'restor':12 'user':7	zh	chvik
442	MIT 6.824 学习笔记（二）：GFS 设计（附脑图）	{"ver":2,"uid":1,"hash":"SHA1:e4ab6878234f9993ce72091bade0ded8873b06aa"}	https://toutiao.io/k/lxub979	2020-08-20 15:10:09	MIT 6.824 学习笔记（二）：GFS 设计（附脑图）	504ca9dcc3f68db29ac88649ddc469f661821535	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.681412	0			'6.824':2,9 'gfs':5,12 'mit':1,8 '二':4,11 '学习笔记':3,10 '设计':6,13 '附脑图':7,14	zh	
440	记一次 Spring 项目打包问题排查	{"ver":2,"uid":1,"hash":"SHA1:413f7dfb4861f90f531c730902d2152a97fdf262"}	https://toutiao.io/k/v5nc8dk	2020-08-19 22:10:08	记一次 Spring 项目打包问题排查	f55e931a003cfec57ceadbc08dc00653e210c82b	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.683285	0			'spring':2,5 '记一次':1,4 '项目打包问题排查':3,6	zh	
1104	LeetCode 多线程之交替打印 FooBar	{"ver":2,"uid":1,"hash":"SHA1:f005e3a2357bc61eac66258fccf43e23da4aea7b"}	https://toutiao.io/k/1idqjfb	2020-09-09 04:10:11	LeetCode 多线程之交替打印 FooBar	0a25c374897100d524663216c2369f429e862a62	\N	f	2020-09-09 04:10:00	2020-09-10 00:10:10.183707	0			'foobar':3,6 'leetcode':1,4 '多线程之交替打印':2,5	zh	
1102	Non-Posix File Systems	{"ver":2,"uid":1,"hash":"SHA1:8a348743ee26797efec6067194f61b22cc1ec8f0"}	https://weinholt.se/articles/non-posix-filesystems/	2020-09-09 04:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24412970"> https://news.ycombinator.com/item?id=24412970 </a>	65723e62996c4e6118a5b27e04590f546081a141	\N	f	2020-09-09 04:10:00	2020-09-10 05:10:14.210162	0			'/item?id=24412970':9 'comment':6 'file':4 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24412970':7 'non':2 'non-posix':1 'posix':3 'system':5	zh	nsm
1097	站在使用层面，Bean Validation 这些标准接口你需要烂熟于胸	{"ver":2,"uid":1,"hash":"SHA1:1b7d05c17afa9277be0f32cf8e5bbbebaff30246"}	https://toutiao.io/k/qhycoq3	2020-09-09 03:10:11	站在使用层面，Bean Validation 这些标准接口你需要烂熟于胸	8b4a46f29022d69e3fef1193a088c41e1dba678b	\N	f	2020-09-09 03:10:00	2020-09-10 00:10:10.159458	0			'bean':2,6 'validation':3,7 '站在使用层面':1,5 '这些标准接口你需要烂熟于胸':4,8	zh	
790	线上 Go 程序偶尔出现异常怎么办？这个思路可解决你的烦恼	{"ver":2,"uid":1,"hash":"SHA1:7f0386a75f48e6d0b8e06b087bb1897f02b6b9de"}	https://toutiao.io/k/2qvqfwk	2020-08-31 04:10:08	线上 Go 程序偶尔出现异常怎么办？这个思路可解决你的烦恼	92acb763918992855c0d63e66098e8bb431c330e	\N	f	2020-08-31 04:10:00	2020-08-31 23:10:10.436592	0			'go':2,6 '程序偶尔出现异常怎么办':3,7 '线上':1,5 '这个思路可解决你的烦恼':4,8	zh	
789	AQS 原理剖析	{"ver":2,"uid":1,"hash":"SHA1:b9334f827a006e6c42128da0142bd3b07817c95e"}	https://toutiao.io/k/meupj67	2020-08-31 04:10:08	AQS 原理剖析	234b7ec37504f45819069b8fc6ce6b4eb4772499	\N	f	2020-08-31 04:10:00	2020-08-31 23:10:10.440841	0			'aqs':1,3 '原理剖析':2,4	zh	
900	Programming with Categories	{"ver":2,"uid":1,"hash":"SHA1:20e66c3bb3b59cbca2e870fe01e82d0dd50ff5a1"}	http://brendanfong.com/programmingcats.html	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24353976"> https://news.ycombinator.com/item?id=24353976 </a>	f420acc790f52a30ea8c58a94fcd7d6c233d2273	\N	f	2020-09-03 20:10:00	2020-09-06 22:10:10.377077	0			'/item?id=24353976':7 'categori':3 'comment':4 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24353976':5 'program':1	zh	kercker
532	K3s + Ambassador，强大的轻量级 K8S 解决方案	{"ver":2,"uid":1,"hash":"SHA1:8013a0d43722a589068bc17dc25623b4bfef8896"}	https://toutiao.io/k/53h9oed	2020-08-23 01:10:09	K3s + Ambassador，强大的轻量级 K8S 解决方案	13b14bce674c9a09ae2a660d1648a3b401402a70	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.905582	0			'ambassador':2,7 'k3s':1,6 'k8s':4,9 '强大的轻量级':3,8 '解决方案':5,10	zh	
527	QUIC 协议详解之 Initial 包的处理	{"ver":2,"uid":1,"hash":"SHA1:de3df6975cb54b732e6524ad2471315a2456cdbd"}	https://toutiao.io/k/5fht3f0	2020-08-23 01:10:08	QUIC 协议详解之 Initial 包的处理	0e17667feb471424d253c06c19ed1372fa076e1e	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.907511	0			'initial':3,7 'quic':1,5 '包的处理':4,8 '协议详解之':2,6	zh	
444	前端圈的贫富差距正在拉大？	{"ver":2,"uid":1,"hash":"SHA1:adfa41cb3df54d0ba9a2682a484d806f1fbf644c"}	https://toutiao.io/k/2ufxwgx	2020-08-19 22:10:08	前端圈的贫富差距正在拉大？	7a04dbf359205377738289591e422e1c5b2f917f	\N	f	2020-08-19 22:10:00	2020-08-21 00:10:48.67921	0			'前端圈的贫富差距正在拉大':1,2	zh	
423	Haskell Mini-Patterns Handbook	{"ver":2,"uid":1,"hash":"SHA1:f56cdbc8c84d001e3ad52d7a2946fb1fccedb903"}	https://kowainik.github.io/posts/haskell-mini-patterns	2020-08-19 12:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24196836"> https://news.ycombinator.com/item?id=24196836 </a>	5bca3466a0f62ba5c50437b8f7086cc0e6a79b72	\N	f	2020-08-19 12:10:00	2020-08-21 02:10:08.766562	0			'/item?id=24196836':9 'comment':6 'handbook':5 'haskel':1 'mini':3 'mini-pattern':2 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24196836':7 'pattern':4	zh	gluegadget
529	闲鱼如何在 2 个月内实现 Android 启动速度翻倍的？	{"ver":2,"uid":1,"hash":"SHA1:5a6abb57460220848f99c6f3a286f2344290866e"}	https://toutiao.io/k/bsrmb6b	2020-08-23 01:10:08	闲鱼如何在 2 个月内实现 Android 启动速度翻倍的？	5872501e98beefe5e0012741f3effd43f22b64e0	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.909516	0			'2':2,7 'android':4,9 '个月内实现':3,8 '启动速度翻倍的':5,10 '闲鱼如何在':1,6	zh	
122	Python and Go : Part II - Extending Python With Go	{"ver":2,"uid":1,"hash":"SHA1:9d59005fadd543a5441c6672198c4d1edde55653"}	https://www.ardanlabs.com/blog/2020/07/extending-python-with-go.html	2020-07-06 00:00:00	Series Index Python and Go: Part I - gRPC\nPython and Go: Part II - Extending Python With Go\nPython and Go: Part III - Packaging Python Code\nIntroduction In the previous post we saw how a Go service can call a Python service using gRPC. Using gRPC to connect a Go and Python program together can be a great choice, but there’s a complexity price that goes with it.	b887b131f7cb3e4f69ff5b504f1f8755263e0930	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.385755	0			'call':47 'choic':67 'code':34 'complex':72 'connect':56 'extend':6,23 'go':3,9,14,20,26,29,44,58 'goe':75 'great':66 'grpc':17,52,54 'ii':5,22 'iii':31 'index':11 'introduct':35 'packag':32 'part':4,15,21,30 'post':39 'previous':38 'price':73 'program':61 'python':1,7,12,18,24,27,33,49,60 'saw':41 'seri':10 'servic':45,50 'togeth':62 'use':51,53	en	
530	Ray，面向新兴 AI 应用的分布式框架	{"ver":2,"uid":1,"hash":"SHA1:2ea43f60766be62129e8e037d41c4f2c4d8761c6"}	https://toutiao.io/k/svce46c	2020-08-23 01:10:08	Ray，面向新兴 AI 应用的分布式框架	4840457bdccdd4e1f88ba81033a3b73a6e5e3503	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.901192	0			'ai':3,7 'ray':1,5 '应用的分布式框架':4,8 '面向新兴':2,6	zh	
528	[译] 图解 Go 内存管理与内存清理	{"ver":2,"uid":1,"hash":"SHA1:1b5ec6c3dfc691ccf3801901bad6eeeb20fa18ad"}	https://toutiao.io/k/rfvpcag	2020-08-23 01:10:08	[译] 图解 Go 内存管理与内存清理	a5930b3a8529f5d33f5a39c7474f04845a589346	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.903429	0			'go':3,7 '内存管理与内存清理':4,8 '图解':2,6 '译':1,5	zh	
531	一文搞定前端代理骚操作！再也不怕线上 bug 啦	{"ver":2,"uid":1,"hash":"SHA1:f6bd4cb1797be354c3725e6e978a977f0a4f949f"}	https://toutiao.io/k/n4bmt51	2020-08-23 01:10:09	一文搞定前端代理骚操作！再也不怕线上 bug 啦	fcce90cfa781eb989f127bfdafc19ecfe4422a70	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.913337	0			'bug':3,7 '一文搞定前端代理骚操作':1,5 '再也不怕线上':2,6 '啦':4,8	zh	
899	Patreon Raises $90M Series E at $1.2B Valuation	{"ver":2,"uid":1,"hash":"SHA1:e0f41fd39dab6b4fe4c9d6a677748952034d727f"}	https://blog.patreon.com/patreon-series-e-announcement	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24348631"> https://news.ycombinator.com/item?id=24348631 </a>	e8ab36cca05e93e9006ea2568dfef1f3dced62ef	\N	f	2020-09-03 20:10:00	2020-09-04 19:10:09.022403	0			'/item?id=24348631':13 '1.2':7 '90m':3 'b':8 'comment':10 'e':5 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24348631':11 'patreon':1 'rais':2 'seri':4 'valuat':9	zh	upis
533	PicGo 图床与 Typora（PicGo + Typora + GitHub 的完整设置）	{"ver":2,"uid":1,"hash":"SHA1:e2ed6a5cdf4fd7ddf6a6ef5bb0cdcdfabbad3e35"}	https://toutiao.io/k/47f28up	2020-08-23 01:10:09	PicGo 图床与 Typora（PicGo + Typora + GitHub 的完整设置）	6ead9845cef176fde8345d7e2e16b52f6be7b033	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.915112	0			'github':6,13 'picgo':1,4,8,11 'typora':3,5,10,12 '图床与':2,9 '的完整设置':7,14	zh	
535	PHP Opcache 配置优化实战	{"ver":2,"uid":1,"hash":"SHA1:2c5c9743c77d7a94495ddcfcf595e9d3060942a2"}	https://toutiao.io/k/zilb74h	2020-08-23 01:10:09	PHP Opcache 配置优化实战	df6e7338b354e1c678af669d7824be4039291999	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.916928	0			'opcache':2,5 'php':1,4 '配置优化实战':3,6	zh	
901	Law allows police to seize and sell cars of non-lawbreakers, keeping proceeds	{"ver":2,"uid":1,"hash":"SHA1:9210c12c6fe7b581f1df3006b7f144567472f199"}	https://kstp.com/news/controversial-law-allows-police-to-seize-and-sell-cars-of-non-lawbreakers-keeping-the-proceeds-august-24-2020/5838303/	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24349822"> https://news.ycombinator.com/item?id=24349822 </a>	4bea5d27aa3a0fe6fb66f2af437b80a872e56454	\N	f	2020-09-03 20:10:00	2020-09-04 17:10:10.67094	0			'/item?id=24349822':18 'allow':2 'car':8 'comment':15 'keep':13 'law':1 'lawbreak':12 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24349822':16 'non':11 'non-lawbreak':10 'polic':3 'proceed':14 'seiz':5 'sell':7	zh	clouddrover
424	Ask HN: Why is Reddit on mobile so obsessed with making me use their app?	{"ver":2,"uid":1,"hash":"SHA1:2158a9161175150963e2aedb76ae8575e2de85d1"}	https://news.ycombinator.com/item?id=24208958	2020-08-19 13:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24208958"> https://news.ycombinator.com/item?id=24208958 </a>	f131817f48dbb1453bdb08123171417db3aaecf5	\N	f	2020-08-19 13:10:00	2020-08-21 19:10:09.496359	0			'/item?id=24208958':19 'app':15 'ask':1 'comment':16 'hn':2 'make':11 'mobil':7 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24208958':17 'obsess':9 'reddit':5 'use':13	zh	blickentwapft
644	Syllabus for Eric's PhD Students	{"ver":2,"uid":1,"hash":"SHA1:4b195721b27680325c97229ad435622b5610df5e"}	https://docs.google.com/document/d/11D3kHElzS2HQxTwPqcaTnU5HCJ8WGE5brTXI4KLf4dM/edit	2020-08-26 05:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24274699"> https://news.ycombinator.com/item?id=24274699 </a>	71106078356d01dfd201f0d5137bdf3a5f26b287	\N	f	2020-08-26 05:10:00	2020-08-28 19:10:09.13039	0			'/item?id=24274699':10 'comment':7 'eric':3 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24274699':8 'phd':5 'student':6 'syllabus':1	zh	EvgeniyZh
534	浅谈网络攻击追踪溯源	{"ver":2,"uid":1,"hash":"SHA1:77b40382d181098640e1082187ac9593f1ab5434"}	https://toutiao.io/k/uw843pc	2020-08-23 01:10:09	浅谈网络攻击追踪溯源	7ceecef38aa9a9f985f61b770403684b4cfab342	\N	f	2020-08-23 01:10:00	2020-08-23 23:10:09.911378	0			'浅谈网络攻击追踪溯源':1,2	zh	
150	Scheduling In Go : Part II - Go Scheduler	{"ver":2,"uid":1,"hash":"SHA1:40eeeaf6ce16cb00e57b66b72d738b07d48c79b9"}	https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html	2018-09-27 00:00:00	Prelude This is the second post in a three part series that will provide an understanding of the mechanics and semantics behind the scheduler in Go. This post focuses on the Go scheduler.\nIndex of the three part series:\n1) Scheduling In Go : Part I - OS Scheduler\n2) Scheduling In Go : Part II - Go Scheduler\n3) Scheduling In Go : Part III - Concurrency\nIntroduction In the first part of this scheduling series, I explained aspects of the operating-system scheduler that I believe are important in understanding and appreciating the semantics of the Go scheduler.	b0e05bf621b46b0181033c42cc5c8ae4788e645c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.445878	0			'1':47 '2':55 '3':63 'appreci':96 'aspect':81 'behind':29 'believ':90 'concurr':69 'explain':80 'first':73 'focus':36 'go':3,6,33,39,50,58,61,66,101 'ii':5,60 'iii':68 'import':92 'index':41 'introduct':70 'mechan':26 'oper':85 'operating-system':84 'os':53 'part':4,17,45,51,59,67,74 'post':13,35 'prelud':8 'provid':21 'schedul':1,7,31,40,48,54,56,62,64,77,87,102 'second':12 'semant':28,98 'seri':18,46,78 'system':86 'three':16,44 'understand':23,94	en	
177	Object Oriented Programming Mechanics	{"ver":2,"uid":1,"hash":"SHA1:72744480cb255eacf58103d970188ad5ab208f4a"}	https://www.ardanlabs.com/blog/2015/03/object-oriented-programming-mechanics.html	2015-03-15 00:00:00	Go is an object oriented programming language. It may not have inheritance, but in this 20 minute video from the Bangalore meetup, I will show you how object oriented programming practices and techniques can be applied to your Go programs. From an object oriented standpoint, Go does provides the ability to add behavior to your types via methods, allows you to implement polymorphic behavior via interfaces and gives you a way to extend the state and behavior of any existing type via type embedding.	ee30f93a448db8a60bf2e80b173ae3ceac911328	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.497766	0			'20':20 'abil':54 'add':56 'allow':63 'appli':40 'bangalor':25 'behavior':57,68,81 'embed':88 'exist':84 'extend':77 'give':72 'go':5,43,50 'implement':66 'inherit':16 'interfac':70 'languag':11 'may':13 'mechan':4 'meetup':26 'method':62 'minut':21 'object':1,8,32,47 'orient':2,9,33,48 'polymorph':67 'practic':35 'program':3,10,34,44 'provid':52 'show':29 'standpoint':49 'state':79 'techniqu':37 'type':60,85,87 'via':61,69,86 'video':22 'way':75	en	
425	Listen to Your Key: Towards Acoustics-based Physical Key Inference	{"ver":2,"uid":1,"hash":"SHA1:ecec4190c5980fcc8c2d7104ac94425b47a0e129"}	https://kottke.org/20/08/researchers-can-duplicate-keys-from-the-sounds-they-make-in-locks	2020-08-19 17:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24205833"> https://news.ycombinator.com/item?id=24205833 </a>	fd7f8fa73327c6fb1bd6bb0f65a6580ba3f5a36c	\N	f	2020-08-19 15:10:00	2020-08-19 17:10:08.908476	0			'/item?id=24205833':15 'acoust':7 'acoustics-bas':6 'base':8 'comment':12 'infer':11 'key':4,10 'listen':1 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24205833':13 'physic':9 'toward':5	zh	vo2maxer
902	TSA tries out another biometric system	{"ver":2,"uid":1,"hash":"SHA1:15875d93080254304fb10fd3c2efa8f267fc4492"}	https://papersplease.org/wp/2020/09/01/tsa-tries-out-another-illegal-biometric-id-verification-system/	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24354301"> https://news.ycombinator.com/item?id=24354301 </a>	a1711cc7f188e6b096fb2ddfcb95d0f6f6eaeeda	\N	f	2020-09-03 20:10:00	2020-09-06 06:10:15.736768	0			'/item?id=24354301':10 'anoth':4 'biometr':5 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24354301':8 'system':6 'tri':2 'tsa':1	zh	walterbell
903	The joys of owning an ‘OG’ email account	{"ver":2,"uid":1,"hash":"SHA1:99192df2b951c8d7216fe31825ab96cf54da67bd"}	https://krebsonsecurity.com/2020/09/the-joys-of-owning-an-og-email-account/	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24359980"> https://news.ycombinator.com/item?id=24359980 </a>	1123503d0c060c2ad0f14f55d6eea894df457398	\N	f	2020-09-03 20:10:00	2020-09-06 22:10:10.394412	0			'/item?id=24359980':12 'account':8 'comment':9 'email':7 'joy':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24359980':10 'og':6 'own':4	zh	todsacerdoti
426	Most “mandatory requirements” in corporations are imaginary	{"ver":2,"uid":1,"hash":"SHA1:8de6f7ab7a2f77aca5914c6e18b05045efbfb604"}	https://nibblestew.blogspot.com/2020/08/most-mandatory-requirements-in.html	2020-08-19 17:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24208390"> https://news.ycombinator.com/item?id=24208390 </a>	b1d9f4801d6d162275a3b207fc080acc10027bf4	\N	f	2020-08-19 17:10:00	2020-08-21 19:10:09.51633	0			'/item?id=24208390':11 'comment':8 'corpor':5 'imaginari':7 'mandatori':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24208390':9 'requir':3	zh	ingve
645	写一个 React H5 可视化编辑器	{"ver":2,"uid":1,"hash":"SHA1:dc5c04b62b2705ccbede01b4c8f72f93bfac2442"}	https://toutiao.io/k/o43t141	2020-08-26 06:10:09	写一个 React H5 可视化编辑器	92db0ff81d9a9dbed58de89ce97125295c00d828	\N	f	2020-08-26 06:10:00	2020-08-27 00:10:12.072999	0			'h5':3,7 'react':2,6 '写一个':1,5 '可视化编辑器':4,8	zh	
646	技术选型：Spark SQL vs Presto	{"ver":2,"uid":1,"hash":"SHA1:75a0f842c7a58f2008059b910da395b60b07a3d5"}	https://toutiao.io/k/fzf7p0d	2020-08-26 06:10:09	技术选型：Spark SQL vs Presto	46f629fd77f23c0468f4da7813e2996fbb349858	\N	f	2020-08-26 06:10:00	2020-08-27 00:10:12.075007	0			'presto':5,10 'spark':2,7 'sql':3,8 'vs':4,9 '技术选型':1,6	zh	
905	Lo-Fi Player	{"ver":2,"uid":1,"hash":"SHA1:2bf1bcbc0b6c74d5e45b3e08bd98cfab62ef01e8"}	https://magenta.tensorflow.org/lofi-player	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24349167"> https://news.ycombinator.com/item?id=24349167 </a>	2c455fcc7b1b296cffd684026ecde000647b4209	\N	f	2020-09-03 20:10:00	2020-09-03 22:10:10.527673	0			'/item?id=24349167':8 'comment':5 'fi':3 'lo':2 'lo-fi':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24349167':6 'player':4	zh	hardmaru
445	Mexican states are moving to ban the sale of junk food to children	{"ver":2,"uid":1,"hash":"SHA1:3b70cd612cc922c9692b5bd1d3d7f6e0129e3661"}	https://www.washingtonpost.com/business/2020/08/19/mexico-kids-junk-food-ban/	2020-08-19 23:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24211689"> https://news.ycombinator.com/item?id=24211689 </a>	39fde835d9289c97bdf9249782a75ff76778a216	\N	f	2020-08-19 23:10:00	2020-08-23 06:10:10.117376	0			'/item?id=24211689':17 'ban':6 'children':13 'comment':14 'food':11 'junk':10 'mexican':1 'move':4 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24211689':15 'sale':8 'state':2	zh	hvo
648	Raft 算法之日志复制	{"ver":2,"uid":1,"hash":"SHA1:5dda6ee7c0c8980651f4b5e8aa69dd7a8945aaa5"}	https://toutiao.io/k/t5x0vv6	2020-08-26 06:10:09	Raft 算法之日志复制	55604fc7a1f9f39e9ca7a1b94490939ae9b6f307	\N	f	2020-08-26 06:10:00	2020-08-27 00:10:12.077754	0			'raft':1,3 '算法之日志复制':2,4	zh	
647	从乙方到甲方：我所亲历的信息安全建设之变迁（一）	{"ver":2,"uid":1,"hash":"SHA1:f3ee74a8acb539c5fbd4648dcbf17ef263e9d8b2"}	https://toutiao.io/k/nofk9e8	2020-08-26 06:10:09	从乙方到甲方：我所亲历的信息安全建设之变迁（一）	b66ad3de0189328cb2c1fd506750743dd8b8b5ab	\N	f	2020-08-26 06:10:00	2020-08-27 00:10:12.084012	0			'一':3,6 '从乙方到甲方':1,4 '我所亲历的信息安全建设之变迁':2,5	zh	
133	Modules Part 03: Minimal Version Selection	{"ver":2,"uid":1,"hash":"SHA1:ae0c7f6e579346f9b08f435368d2681a53b7f7c6"}	https://www.ardanlabs.com/blog/2019/12/modules-03-minimal-version-selection.html	2019-12-18 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nIntroduction Every dependency management solution has to solve the problem of picking a version of a dependency. Many of the version selection algorithms that exist today attempt to identify the “latest greatest” version of any dependency. This makes sense if you believe semantic versioning will be applied correctly and the social contract will be respected.	e24a87f9d3d6d0a47339300623892386caca5dcb	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.411278	0			'03':3 'algorithm':48 'appli':72 'athen':22 'attempt':52 'believ':67 'checksum':20 'contract':77 'correct':73 'depend':13,28,42,61 'everi':27 'exist':50 'gopl':15,23 'greatest':57 'identifi':54 'improv':24 'index':8 'introduct':26 'latest':56 'make':63 'manag':29 'mani':43 'minim':4,16 'mirror':19 'modul':1 'part':2 'pick':37 'problem':35 'project':12 'respect':80 'select':6,18,47 'semant':68 'sens':64 'seri':7 'social':76 'solut':30 'solv':33 'today':51 'vendor':25 'version':5,17,39,46,58,69	en	
752	I thought I would have accomplished a lot more today and also before I was 35	{"ver":2,"uid":1,"hash":"SHA1:73f4055aa4af91e8fa80228aaabc4ba0cad333bc"}	https://www.newyorker.com/humor/daily-shouts/i-thought-i-would-have-accomplished-a-lot-more-today-and-also-by-the-time-i-was-thirty-five	2020-08-29 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24316725"> https://news.ycombinator.com/item?id=24316725 </a>	a9cfa6b3dc2db73654f8e0b1c38076e3181ee48b	\N	f	2020-08-29 19:10:00	2020-09-01 21:10:09.527565	0			'/item?id=24316725':20 '35':16 'accomplish':6 'also':12 'comment':17 'lot':8 'news.ycombinator.com':19 'news.ycombinator.com/item?id=24316725':18 'thought':2 'today':10 'would':4	zh	fergie
904	Ask HN: What is your favorite method of sending large files?	{"ver":2,"uid":1,"hash":"SHA1:b14933f3f646d6954e971fa2627347110880a005"}	https://news.ycombinator.com/item?id=24351111	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24351111"> https://news.ycombinator.com/item?id=24351111 </a>	1d36d0ecd575ebe8cab34b990cd92bdfb9078d3d	\N	f	2020-09-03 20:10:00	2020-09-04 05:10:09.202889	0			'/item?id=24351111':15 'ask':1 'comment':12 'favorit':6 'file':11 'hn':2 'larg':10 'method':7 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24351111':13 'send':9	zh	mettamage
429	Having an alter ego can reduce anxiety, benefit confidence: research	{"ver":2,"uid":1,"hash":"SHA1:bd6eadf7617303d3d75795b5912dfd987d298e82"}	https://www.bbc.com/worklife/article/20200817-the-batman-effect-how-having-an-alter-ego-empowers-you	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24197395"> https://news.ycombinator.com/item?id=24197395 </a>	aa9a9e5acdb0fa6ec1d0d4d95567e9565da97a9c	\N	f	2020-08-19 19:10:00	2020-08-20 09:10:08.2892	0			'/item?id=24197395':14 'alter':3 'anxieti':7 'benefit':8 'comment':11 'confid':9 'ego':4 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24197395':12 'reduc':6 'research':10	zh	clouddrover
134	Modules Part 02: Projects, Dependencies and Gopls	{"ver":2,"uid":1,"hash":"SHA1:c063fad965d083bfcaba1a1c1950e1a91fd9ee5f"}	https://www.ardanlabs.com/blog/2019/12/modules-02-projects-dependencies-gopls.html	2019-12-02 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nIntroduction Modules is the system integrated into Go to provide support for dependency management. This means modules touch just about anything related to working with source code, including editor support. To provide editors with support for modules (and for other reasons), the Go team built a service named gopls which implements the language server protocol (LSP).	a1284bee4ae8389dbfa9c3c5918fbffb05ac1249	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.413325	0			'02':3 'anyth':47 'athen':23 'built':71 'checksum':21 'code':53 'depend':5,14,39 'editor':55,59 'go':34,69 'gopl':7,16,24,75 'implement':77 'improv':25 'includ':54 'index':9 'integr':32 'introduct':27 'languag':79 'lsp':82 'manag':40 'mean':42 'minim':17 'mirror':20 'modul':1,28,43,63 'name':74 'part':2 'project':4,13 'protocol':81 'provid':36,58 'reason':67 'relat':48 'select':19 'seri':8 'server':80 'servic':73 'sourc':52 'support':37,56,61 'system':31 'team':70 'touch':44 'vendor':26 'version':18 'work':50	en	
753	Life Is Short (2016)	{"ver":2,"uid":1,"hash":"SHA1:34ce588dd637ed8a1aaf30756b1039351c064fb4"}	http://paulgraham.com/vb.html	2020-08-29 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24313158"> https://news.ycombinator.com/item?id=24313158 </a>	9b15f7b5bb65e38ca8d22b6deeb0fae0ff1dc7bc	\N	f	2020-08-29 19:10:00	2020-09-01 21:10:09.566771	0			'/item?id=24313158':8 '2016':4 'comment':5 'life':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24313158':6 'short':3	zh	zuhayeer
908	Pasco, Florida’s predictive policing system monitors and harasses residents	{"ver":2,"uid":1,"hash":"SHA1:6891af4fc437e8164ee27b7ac00d4ae1333ec46f"}	https://www.tampabay.com/projects/2020/investigations/police-pasco-sheriff-targeted/intelligence-led-policing/	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24363871"> https://news.ycombinator.com/item?id=24363871 </a>	42a779093a7756a969b6e1c508a2f3bae307b0b9	\N	f	2020-09-03 20:10:00	2020-09-05 16:10:09.343746	0			'/item?id=24363871':14 'comment':11 'florida':2 'harass':9 'monitor':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24363871':12 'pasco':1 'polic':5 'predict':4 'resid':10 'system':6	zh	kaydub
432	Graphical Linear Algebra	{"ver":2,"uid":1,"hash":"SHA1:3c4b1aa6e06006539c73ceb537dbed6a69c49289"}	https://graphicallinearalgebra.net/	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24196080"> https://news.ycombinator.com/item?id=24196080 </a>	8c44e57e411c7ac6f91e3ca5095897fd8c52adc3	\N	f	2020-08-19 19:10:00	2020-08-19 19:10:09.80969	0			'/item?id=24196080':7 'algebra':3 'comment':4 'graphic':1 'linear':2 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24196080':5	zh	guerrilla
428	Open Problems in Robotics	{"ver":2,"uid":1,"hash":"SHA1:5a0a691e444d6aa50fd48230b5b55bbd31095d64"}	https://scottlocklin.wordpress.com/2020/07/29/open-problems-in-robotics/	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24207424"> https://news.ycombinator.com/item?id=24207424 </a>	74108f5dff51df64beee4ca98b2ac88a68330aa0	\N	f	2020-08-19 19:10:00	2020-08-21 19:10:09.518313	0			'/item?id=24207424':8 'comment':5 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24207424':6 'open':1 'problem':2 'robot':4	zh	haltingproblem
427	Listen to Your Key: Towards Acoustics-based Physical Key Inference	{"ver":2,"uid":1,"hash":"SHA1:389ed48e045bcb00785c1fdefa52273d36ca5433"}	https://www.comp.nus.edu.sg/~junhan/papers/SpiKey_HotMobile20_CamReady.pdf	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24205833"> https://news.ycombinator.com/item?id=24205833 </a>	328c570fa6d99653304f779c0b5af1c8c2c94553	\N	f	2020-08-19 19:10:00	2020-08-21 19:10:09.529672	0			'/item?id=24205833':15 'acoust':7 'acoustics-bas':6 'base':8 'comment':12 'infer':11 'key':4,10 'listen':1 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24205833':13 'physic':9 'toward':5	zh	vo2maxer
907	Handcalcs: Automatically render Latex equations from Python math code	{"ver":2,"uid":1,"hash":"SHA1:140136b0a15643b126eea13899c2ba6c70b67ce1"}	https://github.com/connorferster/handcalcs	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24347131"> https://news.ycombinator.com/item?id=24347131 </a>	4d0088d1c6047c5fca53cc042dca5f57aab026a2	\N	f	2020-09-03 20:10:00	2020-09-03 22:10:10.531592	0			'/item?id=24347131':13 'automat':2 'code':9 'comment':10 'equat':5 'handcalc':1 'latex':4 'math':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24347131':11 'python':7 'render':3	zh	amrrs
431	Backblaze Hard Drive Stats Q2 2020	{"ver":2,"uid":1,"hash":"SHA1:18e69bb7434811ad4e1f49e40eb4b7804cbbd48e"}	https://www.backblaze.com/blog/backblaze-hard-drive-stats-q2-2020/	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24200048"> https://news.ycombinator.com/item?id=24200048 </a>	312087e5ba05ba18944f796501c5c0da14e299d8	\N	f	2020-08-19 19:10:00	2020-08-19 22:10:08.064393	0			'/item?id=24200048':10 '2020':6 'backblaz':1 'comment':7 'drive':3 'hard':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24200048':8 'q2':5 'stat':4	zh	caution
723	China Built a Vast New Infrastructure to Imprison Uighurs	{"ver":2,"uid":1,"hash":"SHA1:0ddf283694cc28781bd14423a57cd57546dc1ca0"}	https://www.buzzfeednews.com/article/meghara/china-new-internment-camps-xinjiang-uighurs-muslims	2020-08-28 15:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24303497"> https://news.ycombinator.com/item?id=24303497 </a>	753589d357e36498f512b468ac2a0e5af293a3dd	\N	f	2020-08-28 15:10:00	2020-08-31 18:10:10.946877	0			'/item?id=24303497':13 'built':2 'china':1 'comment':10 'imprison':8 'infrastructur':6 'new':5 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24303497':11 'uighur':9 'vast':4	zh	amaajemyfren
433	Secret gyms and the economics of prohibition	{"ver":2,"uid":1,"hash":"SHA1:c2ff180749a8971675ab50c2a72174e8c75dd15d"}	https://www.npr.org/sections/money/2020/08/11/900895704/secret-gyms-and-the-economics-of-prohibition?s=09	2020-08-19 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24211414"> https://news.ycombinator.com/item?id=24211414 </a>	f432bc40ce91d53e22269239bc87d17a63189a63	\N	f	2020-08-19 20:10:00	2020-08-24 01:10:07.569564	0			'/item?id=24211414':11 'comment':8 'econom':5 'gym':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24211414':9 'prohibit':7 'secret':1	zh	stephenbez
998	List of YouTube channels for improving web development and programming skills	{"ver":2,"uid":1,"hash":"SHA1:7f50099fe4a82118d99265045d24cde2cb543f8e"}	https://devandgear.com/posts/the-ultimate-list-of-youtube-channels-to-boost-your-web-development-and-programming-skills/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24374979"> https://news.ycombinator.com/item?id=24374979 </a>	8991c59a77350121218aecce49183a06bd30bf90	\N	f	2020-09-07 00:10:00	2020-09-07 17:10:10.06905	0			'/item?id=24374979':15 'channel':4 'comment':12 'develop':8 'improv':6 'list':1 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24374979':13 'program':10 'skill':11 'web':7 'youtub':3	zh	bojanvidanovic
1001	PicoRio Linux RISC-V SBC is an open-source alternative to Raspberry Pi board	{"ver":2,"uid":1,"hash":"SHA1:d6f61a37b2d7f34605b7ed754102c1f02f75a23b"}	https://www.cnx-software.com/2020/09/04/picorio-linux-risc-v-sbc-is-an-open-source-alternative-to-raspberry-pi-board/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24378758"> https://news.ycombinator.com/item?id=24378758 </a>	a43f47c7acd983f986087e5193dc861da0426ca4	\N	f	2020-09-07 00:10:00	2020-09-08 17:10:10.490311	0			'/item?id=24378758':20 'altern':12 'board':16 'comment':17 'linux':2 'news.ycombinator.com':19 'news.ycombinator.com/item?id=24378758':18 'open':10 'open-sourc':9 'pi':15 'picorio':1 'raspberri':14 'risc':4 'risc-v':3 'sbc':6 'sourc':11 'v':5	zh	hippospark
143	Garbage Collection In Go : Part II - GC Traces	{"ver":2,"uid":1,"hash":"SHA1:68fe6ad0afd2c303ab0c929b0afb7c5308c112e4"}	https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html	2019-05-13 00:00:00	Prelude This is the second post in a three part series that will provide an understanding of the mechanics and semantics behind the garbage collector in Go. This post focuses on how to generate GC traces and interpret them.\nIndex of the three part series:\n1) Garbage Collection In Go : Part I - Semantics\n2) Garbage Collection In Go : Part II - GC Traces\n2) Garbage Collection In Go : Part III - GC Pacing	de9b1433652afd79b774f044c9954a9a70d4de62	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.431858	0			'1':54 '2':62,71 'behind':30 'collect':2,56,64,73 'collector':33 'focus':38 'garbag':1,32,55,63,72 'gc':7,43,69,78 'generat':42 'go':4,35,58,66,75 'ii':6,68 'iii':77 'index':48 'interpret':46 'mechan':27 'pace':79 'part':5,18,52,59,67,76 'post':14,37 'prelud':9 'provid':22 'second':13 'semant':29,61 'seri':19,53 'three':17,51 'trace':8,44,70 'understand':24	en	
909	David Graeber has died	{"ver":2,"uid":1,"hash":"SHA1:d0026fcfadc12fcad87b296266d8fa20eb79bc53"}	https://www.theguardian.com/books/2020/sep/03/david-graeber-anthropologist-and-author-of-bullshit-jobs-dies-aged-59	2020-09-03 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24365811"> https://news.ycombinator.com/item?id=24365811 </a>	b4ab74f0839e588e036619cf9a62bb4ef2330cab	\N	f	2020-09-03 21:10:00	2020-09-06 22:10:10.309822	0			'/item?id=24365811':8 'comment':5 'david':1 'die':4 'graeber':2 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24365811':6	zh	frabbit
1000	Ask HN: Suggestions for books about API design?	{"ver":2,"uid":1,"hash":"SHA1:33be6d754fc8ec00398c35808eecafcc6b877c69"}	https://news.ycombinator.com/item?id=24383180	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24383180"> https://news.ycombinator.com/item?id=24383180 </a>	84ad577fdd60b1a567839ea1158e253166cb9dc7	\N	f	2020-09-07 00:10:00	2020-09-08 17:10:10.479482	0			'/item?id=24383180':12 'api':7 'ask':1 'book':5 'comment':9 'design':8 'hn':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24383180':10 'suggest':3	zh	mcrittenden
999	Are you an anarchist? The answer may surprise you (2000)	{"ver":2,"uid":1,"hash":"SHA1:00d17e09bbf1cd6a32e2c051f3fb870a1f8ee425"}	https://theanarchistlibrary.org/library/david-graeber-are-you-an-anarchist-the-answer-may-surprise-you	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24383092"> https://news.ycombinator.com/item?id=24383092 </a>	3c71271a5193a0168e2752584dc094d23545cda8	\N	f	2020-09-07 00:10:00	2020-09-08 17:10:10.487978	0			'/item?id=24383092':14 '2000':10 'anarchist':4 'answer':6 'comment':11 'may':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24383092':12 'surpris':8	zh	fallingfrog
1002	A Requiem for a Dying Operating System (1994)	{"ver":2,"uid":1,"hash":"SHA1:61e71d2a8582bc2851442972b1d59cfbb11484e4"}	https://user.eng.umd.edu/~blj/funny/requium.html	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24372830"> https://news.ycombinator.com/item?id=24372830 </a>	33667e61df01882c44c709bb103a69b67ae0ff2b	\N	f	2020-09-07 00:10:00	2020-09-07 17:10:10.087667	0			'/item?id=24372830':12 '1994':8 'comment':9 'die':5 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24372830':10 'oper':6 'requiem':2 'system':7	zh	aphrax
1004	'You're Not Allowed to Film': The Fight to Control Who Reports from Portland	{"ver":2,"uid":1,"hash":"SHA1:db27823a4caa8de395972e2a8803ff0a2f9ee2cd"}	https://reason.com/2020/09/04/youre-not-allowed-to-film-the-fight-for-control-over-who-reports-from-portland/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24390909"> https://news.ycombinator.com/item?id=24390909 </a>	17b6b88093253a9fff56ca7a09a3208e603c843e	\N	f	2020-09-07 00:10:00	2020-09-09 02:10:12.182464	0			'/item?id=24390909':18 'allow':4 'comment':15 'control':10 'fight':8 'film':6 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24390909':16 'portland':14 're':2 'report':12	zh	Bostonian
1009	Lee Kuan Yew's Singapore	{"ver":2,"uid":1,"hash":"SHA1:f0f47dbab31fad6f14f8f08e8a61705db192193f"}	https://palladiummag.com/2020/08/13/the-true-story-of-lee-kuan-yews-singapore/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24382249"> https://news.ycombinator.com/item?id=24382249 </a>	4fee60df7e0d139dff811068cd0081f86fa4e44f	\N	f	2020-09-07 00:10:00	2020-09-08 07:10:11.096412	0			'/item?id=24382249':9 'comment':6 'kuan':2 'lee':1 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24382249':7 'singapor':5 'yew':3	zh	ignored
1003	FBI examined Google records to see if anyone had knowledge of Guccifer persona	{"ver":2,"uid":1,"hash":"SHA1:008009bb92a84c148a3a3fc60b4f4e0c10b070d2"}	https://twitter.com/kpoulsen/status/1255585290380443648	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24379210"> https://news.ycombinator.com/item?id=24379210 </a>	d4bd7b4c9b643f84fefb4145506d57e43e30bf71	\N	f	2020-09-07 00:10:00	2020-09-08 11:10:11.13966	0			'/item?id=24379210':17 'anyon':8 'comment':14 'examin':2 'fbi':1 'googl':3 'guccif':12 'knowledg':10 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24379210':15 'persona':13 'record':4 'see':6	zh	DyslexicAtheist
1006	C++20 has been approved	{"ver":2,"uid":1,"hash":"SHA1:329ec2a8ac4a74e289aab916c0f055b3712ff365"}	https://twitter.com/PatriceRoy1/status/1302055575140945921	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24389549"> https://news.ycombinator.com/item?id=24389549 </a>	2d772ff5f4c690ff54fef7f228b0b17262a4efa1	\N	f	2020-09-07 00:10:00	2020-09-08 19:10:11.915587	0			'+20':2 '/item?id=24389549':9 'approv':5 'c':1 'comment':6 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24389549':7	zh	dgellow
458	Moving from YouTube to PeerTube	{"ver":2,"uid":1,"hash":"SHA1:e567391a2e6a16f6e77b2f2cf67b98df3506bf2a"}	https://battlepenguin.com/tech/moving-from-youtube-to-peertube/	2020-08-20 17:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24222661"> https://news.ycombinator.com/item?id=24222661 </a>	dbf1d27a2b1c472d1166db9e0ed3183f419d61b5	\N	f	2020-08-20 17:10:00	2020-08-24 01:10:07.558666	0			'/item?id=24222661':9 'comment':6 'move':1 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24222661':7 'peertub':5 'youtub':3	zh	djsumdog
1007	8086 Microcode Disassembled	{"ver":2,"uid":1,"hash":"SHA1:4136edab94d566f19a39c829165ccbfe07d6f924"}	https://www.reenigne.org/blog/8086-microcode-disassembled/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24383648"> https://news.ycombinator.com/item?id=24383648 </a>	0e8c43ffe9b0824374e17a46142e6e0067b1f8af	\N	f	2020-09-07 00:10:00	2020-09-08 07:10:11.094257	0			'/item?id=24383648':7 '8086':1 'comment':4 'disassembl':3 'microcod':2 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24383648':5	zh	matt_d
724	Google is apparently taking down all/most Fediverse apps from the Play Store	{"ver":2,"uid":1,"hash":"SHA1:3ba6021a8ea3216aeb11bf64b1a98879d44ae56c"}	https://qoto.org/@freemo/104765288863293481	2020-08-28 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24304275"> https://news.ycombinator.com/item?id=24304275 </a>	2d8d22cf9821253b8b4cf3d3997860416b765ea7	\N	f	2020-08-28 17:10:00	2020-08-31 18:10:10.923131	0			'/item?id=24304275':16 'all/most':6 'app':8 'appar':3 'comment':13 'fedivers':7 'googl':1 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24304275':14 'play':11 'store':12 'take':4	zh	mynameismonkey
252	26 个比较概率大小的问题	{"ver":2,"uid":1,"hash":"SHA1:a43ac4ccaf0d48a66cdf90b0d243783628526c78"}	http://www.matrix67.com/blog/archives/6665	2016-04-27 09:09:35	<p>你的数学直觉怎么样？你能凭借直觉，迅速地判断出谁的概率大，谁的概率小吗？下面就是 26 个这样的问题。如果你感兴趣的话，你可以先扫一遍所有的问题，再逐一阅读答案，看看你猜对了多少。这篇文章很长，你可以考虑把它加入书签，每天看几个问题。</p>\n<p>&nbsp;</p>\n<blockquote><p>1．A 、 B 、 C 、 D 四人玩扑克牌游戏， A 、 C 两人同盟， B 、 D 两人同盟。将除去大小王的 52 张牌随机分发给四人（每人获得 13 张牌）后，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．A 、 C 两人手中都没有梅花<br />\nB．A 、 C 两人手中囊括了所有的梅花<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>A 、 C 两人手中都没有梅花，等价于 B 、 D 两人手中囊括了所有的梅花，它的概率与 A 、 C 两人手中囊括所有梅花的概率相同。因此，这个问题的答案显然是 C 。</p>\n<p><span id="more-6665"></span>&nbsp;</p>\n<blockquote><p>2．我给 10 个好朋友分别写了一封信，并把这 10 个人的地址分别写在了 10 个信封上。如果我随机地将这 10 封信装进 10 个信封里（每封信都装进了一个不同的信封里），下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．恰好有 9 封信装进了正确的信封<br />\nB．所有 10 封信都装进了正确的信封<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>你或许会以为，全都装对的可能性很低，装错一个的可能性则略高一些。然而事实上，这道题的答案是 B 。原因非常简单：恰好有 9 封信装对，这是根本不可能的——如果其中 9 封信都装对了，剩下的那一封信肯定也装对了。</p>\n<p>实际上， 10 封信的排列方式一共有 10! = 3628800 种，其中装对的信有 0, 1, 2, 3, &#8230;, 9, 10 封的情况数分别为 1334961, 1334960, 667485, 222480, 55650, 11088, 1890, 240, 45, 0, 1 。可以看到，绝大多数时候，这个数列里的数都是不断递减的；也就是说，装对的信越多，概率就越低，这个直觉确实是准确的。唯一的例外，就是这个数列的最后两项，其背后的原因正如刚才所说。</p>\n<p>你或许发现了一个有趣的现象：数列的第二项正好比第一项小 1 。这并不是巧合。有一个普遍的规律是，假设把 n 封信装进 n 个信封里，那么当 n 为偶数时，装对 1 封信的情况数比全都装错的情况数少 1 ，当 n 为奇数时，装对 1 封信的情况数比全都装错的情况数多 1 。我们下面就来证明这一点。</p>\n<p>假设把 n 封信装进 n 个信封里，全都装错的情况有 D<sub>n</sub> 种。那么，数列 D<sub>1</sub>, D<sub>2</sub>, D<sub>3</sub>, &#8230; 满足一个非常简单的递推关系： D<sub>n</sub> = (n &#8211; 1) (D<sub>n-1</sub> + D<sub>n-2</sub>) 。为什么呢？我们慢慢来分析。由于每封信都装错了，因此第 1 封信没有装进 1 号信封。无妨假设它装进了 2 号信封。那么，第 2 封信装到哪儿去了呢？如果第 2 封信正好装进了 1 号信封，那么剩下的 n &#8211; 2 封信就有 D<sub>n-2</sub> 种可能的装法。如果第 2 封信没有装进 1 号信封呢？情况就变成了这样：第 2, 3, 4, &#8230;, n 封信装进了编号分别为 1, 3, 4, &#8230;, n 的信封里，其中第 2 封信不在 1 号信封里，第 3 封信不在 3 号信封里，第 4 封信不在 4 号信封里……总之，这 n &#8211; 1 封信中，每封信都正好有一个禁放的信封。于是，这就构成了 D<sub>n-1</sub> 种可能的装法。当然，第 1 封信也有可能装进了 3 号信封里，也有可能装进了 4 号信封里……因此，我们就有 D<sub>n</sub> = (n &#8211; 1) (D<sub>n-1</sub> + D<sub>n-2</sub>) 。</p>\n<p>在这个式子的左右两边同时减去 n · D<sub>n-1</sub> ，于是得到：</p>\n<p class="indent">D<sub>n</sub> &#8211; n · D<sub>n-1</sub> = &#8211; (D<sub>n-1</sub> &#8211; (n &#8211; 1) · D<sub>n-2</sub>)</p>\n<p>令 A<sub>n</sub> = D<sub>n</sub> &#8211; n · D<sub>n-1</sub> ，于是 A<sub>n</sub> 满足递推关系式：</p>\n<p class="indent">A<sub>n</sub> = &#8211; A<sub>n-1</sub></p>\n<p>可以验证：</p>\n<p class="indent">A<sub>2</sub> = D<sub>2</sub> &#8211; 2 · D<sub>1</sub> = 1 &#8211; 0 = 1</p>\n<p>于是有：</p>\n<p class="indent">A<sub>n</sub> = (-1)<sup>n</sup></p>\n<p>即 D<sub>n</sub> &#8211; n · D<sub>n-1</sub> = (-1)<sup>n</sup> 。而 n · D<sub>n-1</sub> 正好表示把 n 封信装进 n 个信封里恰好装对 1 封信的情况数。</p>\n<p>&nbsp;</p>\n<blockquote><p>3．桌子上有 A 、 B 两个不透明的盒子，盒子 A 里有 m 个白色小球和 1 个黑色小球，盒子 B 里有 n 个白色小球和 1 个黑色小球。你需要先从盒子 A 里随机取出一个小球，再从盒子 B 里随机取出一个小球。如果两个小球都是黑色的，那么你就获胜了。下面哪种情况下，你获胜的概率更大一些？</p>\n<p class="indent">A．m = 5，n = 5<br />\nB．m = 4，n = 6<br />\nC．上述两种情况的获胜概率相同</p>\n</blockquote>\n<p>你或许会以为，反正都是 10 个白色小球，怎么放应该没关系吧。而事实上，在 A 、 B 两种情况下，获胜的概率还真的不一样。在情况 A 中，你获胜的概率为 (1/6) × (1/6) = 1/36 ；在情况 B 中，你获胜的概率为 (1/5) × (1/7) = 1/35 。因此，这个题目的答案是 B 。</p>\n<p>如果我们把规则改为，先随机选择其中一个盒子，再从这个盒子中随机取出一个小球，取到黑色小球即获胜，那么情况 B 的获胜概率仍然会更大一些。在情况 A 中，你获胜的概率为 (1/2) × (1/6) + (1/2) × (1/6) = 1/6 ；在情况 B 中，你获胜的概率为 (1/2) × (1/5) + (1/2) × (1/7) = 6/35 。</p>\n<p>如果你可以自己安排每个小球的位置（但黑白小球的总数不变），那么不管是在原游戏中还是在改版后的游戏中，为了让自己的胜率达到最大，你都应该在其中一个盒子里只放 1 个黑球，在另一个盒子里放入剩下的 1 个黑球和 10 个白球。这样的话，在原游戏中，你获胜的概率将达到 1 × (1/11) = 1/11 ；在改版后的游戏中，你获胜的概率将达到 (1/2) × 1 + (1/2) × (1/11) = 6/11 。</p>\n<p>&nbsp;</p>\n<blockquote><p>4．不透明的盒子里有 10 个白球和 1 个黑球，你的目标是从中取出黑球。每次，你可以从中随机取出一个小球，并观察它的颜色：如果是黑球，则达到目标，结束操作；如果是白球，则将小球放回盒子里，然后继续像这样随机取球，直到取出了黑球为止。下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．第 1 次就取到了黑球<br />\nB．到第 4 次才取到黑球<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案显然应该是 A 。若每次取出黑球的概率为 p ，则第 1 次就取到黑球的概率为 p ，到第 4 次才取到黑球的概率为 (1 &#8211; p) · (1 &#8211; p) · (1 &#8211; p) · p ，后者永远比前者更低。如果我们把第 n 次才取到黑球的概率记为 P<sub>n</sub> ，那么就有：</p>\n<p class="indent">P<sub>n</sub> = (1 &#8211; p)<sup>n-1</sup> · p</p>\n<p>然而，把 P<sub>1</sub>, P<sub>2</sub>, P<sub>3</sub>, &#8230; 全部累加起来的结果应该为 1 ，于是我们用概率论的方法得到公式：</p>\n<p class="indent">(1 + (1 &#8211; p) + (1 &#8211; p)<sup>2</sup> + (1 &#8211; p)<sup>3</sup> + &#8230;) · p = 1</p>\n<p>即：</p>\n<p class="indent">1 + (1 &#8211; p) + (1 &#8211; p)<sup>2</sup> + (1 &#8211; p)<sup>3</sup> + &#8230; = 1 / p</p>\n<p>令 x = 1 &#8211; p ，得到：</p>\n<p class="indent">1 + x + x<sup>2</sup> + x<sup>3</sup> + &#8230; = 1 / (1 &#8211; x)</p>\n<p>这正是无穷等比级数的求和公式。由于实数 p 必须在 0 到 1 之间，而 x = 1 &#8211; p ，因此上式中的 x 也必须在 0 到 1 之间。</p>\n<p>&nbsp;</p>\n<blockquote><p>5．不透明的盒子里有 10 个白球和 1 个黑球。 A 、 B 两人轮流从盒子里取球，每个人每次只能随机从中取出一个小球（取出的小球不再放回）。谁先取到那个黑球，谁就获得游戏的胜利。如果 A 先取，那么理论上，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．A 获得游戏的胜利<br />\nB．B 获得游戏的胜利<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案是 A 。不妨规定，即使有人取到了黑球，两人也继续往下取，直到把所有的小球都取光。整个游戏就可以等价地看作是，两人轮流取完所有的小球后，看看谁手中有那个黑球。由于 A 先取，因此最后 A 会取到 6 个小球， B 只能取到 5 个小球。所以，黑球在 A 手中的概率更大，等于 6/11 。</p>\n<p>类似地，如果不透明的盒子里有 W 个白球和 B 个黑球，不断从里面取出小球（不再放回），那么不管 i 是多少（0 &lt; i ≤ W + B），第 i 次取到的是白球的概率都是 W / (W + B) ，第 i 次取到的是黑球的概率都是 B / (W + B) 。因为，这本质上相当于把所有的小球随机地排成一排，问第 i 个小球是白色或者黑色的概率。</p>\n<p>&nbsp;</p>\n<blockquote><p>6．不透明的盒子里有 2 个白球和 5 个黑球。地上还有足够多的白球和黑球。每次从盒子里随机取出两个小球，放在地上。如果刚才取出的两个小球都是白球，则从地上拿一个白球放入盒子；如果刚才取出的两个小球都是黑球，则从地上拿一个白球放入盒子；如果刚才取出的两个小球是一黑一白，则从地上拿一个黑球放入盒子。不断重复，直至盒子里只剩一个小球为止。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．剩下的那个小球是白球<br />\n B．剩下的那个小球是黑球<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这是一个很赖皮的题目。它的答案是 B 。事实上，出现情况 A 的概率为 0 ，出现情况 B 的概率为 100% 。原因很简单。每次操作后，黑球的数量要么不变，要么减 2 ，所以黑球的奇偶性始终保持相同。初始时盒子里有奇数个黑球，今后盒子里就永远有奇数个黑球。所以，如果最后盒子里剩了 1 个小球，那它必然是黑球。</p>\n<p>&nbsp;</p>\n<blockquote><p>7．在一根木棒上随机选择两个点，并在这两个点处下刀，把木棒砍成三段。下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．这三段木棒能拼成一个三角形<br />\nB．这三段木棒不能拼成一个三角形<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目选 B 。我们可以证明，这三段木棒能拼成三角形的概率是 1/4 。不妨把这根木棒的长度设为 1 ，两个分割点的位置分别记作 x 、 y ，则 x 和 y 都是 0 到 1 之间的随机数。那么，所有可能的 (x, y) 组合就对应了正方形 (0, 1) × (0, 1) 内的所有点。三段木棒能拼成三角形，当且仅当 (x, y) 落在了阴影部分。由于阴影部分占了总面积的 1/4 ，因此这三段木棒能拼成三角形的概率就是 1/4 。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604271.png" alt="" width="285" /></p>\n<p>这个题目还有很多变种。比如，如果先把木棒随机砍成两段，再把较长的那段木棒随机砍成两段，问这三段木棒能拼成一个三角形的概率是多少。这该怎么解呢？你或许会说，为何不像刚才那样，把第一个分割点和第二个分割点的位置分别记作 x 、 y ，然后套用刚才的面积大法？这次就不行了，因为 y 的值不再能独立而均匀地分布在 0 到 1 之间。但是，我们可以令 x 为第一个分割点在整根木棒上的比例，令 y 为第二个分割点在较长的那段木棒上的比例。举个例子， (x, y) = (1/3, 1/3) 的意思就是，先把整根木棒砍成 1 : 2 两段，再把较长的那段木棒砍成 1 : 2 两段。这样一来，所有可能的 (x, y) 组合就再一次均匀地对应了正方形 (0, 1) × (0, 1) 内的所有点。最终，三段木棒能拼成三角形，当且仅当 (x, y) 落在由 x · y &lt; 1/2, (1 &#8211; x) · y &lt; 1/2, x · (1 &#8211; y) &lt; 1/2, (1 &#8211; x) · (1 &#8211; y) &lt; 1/2 组成的交集区域里。利用定积分可以求出，这部分区域的面积占整个正方形面积的 2 · ln(2) &#8211; 1 ≈ 38.63% 。这就是答案。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604272.png" alt="" width="285" /></p>\n<p>著名的 Buffon 投针问题，标准解法之一也用到了这种模型。在地板上画一系列间隔为 1 厘米的平行直线，然后把一根 1 厘米长的针扔到地板上，它与直线有交点的概率是多少？令 x 为这根针的中心到离它最近的那条直线的距离，令 y 为这根针与平行线的夹角。所有可能的针的位置，就可以用所有可能的 (x, y) 组合来表示，它们正好对应了矩形 (0, 1/2) × (0, π/2) 内的所有点。其中，合法的区域为 y &lt; arccos(2x) ，它占矩形面积的 2 / π ≈ 63.66% 。这就是答案。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604273.png" alt="" width="570" /></p>\n<p>高中数学课本把这种解决概率问题的模型叫做“几何概型”。说到几何概型，最经典的可能要算下面这个例题。 A 、 B 两人约定好晚上 6:00 到 7:00 之间在公园门口见面。每个人都会从 6:00 到 7:00 这段时间当中随机挑选一个时间，并在这个时间到达公园门口。每个人都只愿意等待 15 分钟，也就是说，如果 15 分钟之后没有看见对方，那么就立即离开。那么，两人最终能见面的概率有多大？答案是 7/16 。</p>\n<p>&nbsp;</p>\n<blockquote><p>8．圆周上均匀分布着 100 个点。随便选择两个点连一条线段，再随便选择另外两个点连一条线段。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．两条线段相交<br />\nB．两条线段不相交<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案是 B 。随便选择两个点，再随便选择另外两个点，本质上相当于先随便选择四个点，再决定把这四个点配成怎样的两对。对于任意四个点 A 、 B 、 C 、 D （在圆周上按此顺序排列）来说，我们都有三种不同的配对方案：① A &#8211; B, C &#8211; D ② A &#8211; C, B &#8211; D ③ A &#8211; D, B &#8211; C 。其中，只有方案 ② 对应的两条连线才会相交。因此，两条线段相交的概率是 1/3 。</p>\n<p>&nbsp;</p>\n<blockquote><p>9．不透明的盒子里有 1000 张纸条，上面分别写有 1, 2, 3, …, 1000。 A 从盒子里随机取出 100 张纸条，并把这 100 张纸条上的数从小到大排成一排。然后， B 从盒子里剩下的纸条中随机取出 1 张纸条，并看看这张纸条上的数在 A 那里排第几位。例如，如果 A 手中的数有 50 个比 B 取出的大，另外 50 个比 B 取出的小，那么 B 手中的数就排第 51 位。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．B 手中的数排第 1 位<br />\nB．B 手中的数排第 51 位<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>很多人的直觉都是，排第 1 可能性不大，排中间可能性更大。而实际上，考虑所有 101 个数的 101! 种排列方案，或者从 1000 个数里选 101 个数所产生的 P(1000, 101) 种排列方案， B 选的那个数将会等可能地出现在各个位置。因此，这个题目的答案是 C 。</p>\n<p>如果你还想不明白的话，你干脆直接想成是， A 抽了 100 个数，然后再帮 B 抽了一个数，问帮 B 抽的这个数更有可能排第几。如果你还想不明白的话，你干脆直接想成是， A 抽了 101 个数，问最后抽出的这个数更有可能排第几。如果你还想不明白的话，你干脆直接想成是， A 选了 101 个数往空中一撒，问最后一个落地的数更有可能是排第几的数。</p>\n<p>&nbsp;</p>\n<blockquote><p>10．把一副洗好的牌（共 52 张）背面朝上地摞成一摞，然后依次翻开每一张牌，直到翻出第一张 A 。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．翻开第 3 张牌时出现了第一张 A<br />\nB．翻开第 4 张牌时出现了第一张 A<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案是 A 。这个答案并不出人意料。你不妨考虑一个非常极端的情况：假设一副牌里只有三张牌，其中两张是 A ，另外一张是 2 。那么，洗好牌后，三张牌的顺序有 AA2, A2A, 2AA 三种（如果把两张 A 看作是两张不同的 A ，那么三张牌的顺序有 A<sub>1</sub>A<sub>2</sub>2, A<sub>2</sub>A<sub>1</sub>2, A<sub>1</sub>2A<sub>2</sub>, A<sub>2</sub>2A<sub>1</sub>, 2A<sub>1</sub>A<sub>2</sub>, 2A<sub>2</sub>A<sub>1</sub> 六种）。翻到第 1, 2, 3 张牌时出现第一张 A 的概率分别是 2/3, 1/3, 0 。</p>\n<p>至于原题为什么选 A ，我们给出一个这样的解释。洗好牌后，从前往后四张 A 所在的位置一共有 C(52, 4) 种可能的情况，分别为 (1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), &#8230;, (49, 50, 51, 52) 。其中，形如 (3, ?, ?, ?) 的情况显然比形如 (4, ?, ?, ?) 的情况更多，因为前者的问号处可以有更丰富的取值。</p>\n<p>&nbsp;</p>\n<blockquote><p>11．把一副洗好的牌（共 52 张）背面朝上地摞成一摞，然后依次翻开每一张牌，直到翻出第一张 A 。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．再下一张牌是黑桃 A<br />\nB．再下一张牌是黑桃 2<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>很多人可能会认为，下一张牌是黑桃 2 的可能性更大，因为刚才翻出的首张 A 可能就是黑桃 A 。其实这种直觉是错误的。令人吃惊的是，这道题的答案是 C 。下一张牌是黑桃 A 的概率与下一张牌是黑桃 2 的概率一样大，它们都等于 1/52 。</p>\n<p>为了说明这一点，我们不妨来看一种同样能实现绝对随机的另类洗牌方式：先把一副牌中的黑桃 A 抽出来，随机洗牌打乱剩下 51 张牌的顺序，然后把黑桃 A 插回这摞牌中（包括最顶端和最底端在内，共有 52 个可以插入的位置）。显然，黑桃 A 正好插到了这摞牌的首张 A 下面有 1/52 的可能性。根据同样的道理，首张 A 下面是黑桃 2 的概率也是 1/52 。事实上，任何一张牌都有可能出现在首张 A 的下面，它们出现的概率是相等的，都等于 1/52 。</p>\n<p>&nbsp;</p>\n<blockquote><p>12．把一副洗好的牌（共 52 张）背面朝上地摞成一摞。翻开最上面的那张牌，记住这张牌是什么颜色（红色还是黑色），然后将它背面朝上地放回原处。随机切一次牌（即把扑克牌随机分成上下两摞，把下面这摞牌叠在上面这摞牌的上面），然后再次翻开最上面的那张牌，记住这张牌是什么颜色（红色还是黑色）。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．两次看到的牌的颜色相同<br />\nB．两次看到的牌的颜色不同<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>答案很简单：选 B 。这是因为，切了一次牌之后，你刚才翻开的那张牌就不可能在最上面了。换句话说，再次翻开的牌将会等可能地是剩余的 51 张牌中的任何一张，其中有 26 张牌和你第一次翻开的牌颜色不同，但只有 25 张牌和你第一次翻开的牌颜色相同。</p>\n<p>&nbsp;</p>\n<blockquote><p>13．同时抛掷 10 枚硬币，出现下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．正面朝上的硬币数量为偶数<br />\nB．正面朝上的硬币数量为奇数<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>答案是 C 。事实上，把 10 换成任意正整数，这个问题的答案都不会变——正面朝上的硬币个数是奇是偶的概率一样大。</p>\n<p>让我们把这个问题先修改一下：同时抛掷 5 枚硬币，正面朝上的硬币数量为偶数的概率大，还是为奇数的概率大？有趣的是，新的问题突然有了一种非常简单的解法。我们可以把同时抛掷 5 枚硬币的结果分成六大类： 0 个正面 5 个反面、 1 个正面 4 个反面、 2 个正面 3 个反面、 3 个正面 2 个反面、 4 个正面 1 个反面、 5 个正面 0 个反面。我们把这六类情况分成三组：</p>\n<ul>\n<li>0 正 5 反， 5 正 0 反</li>\n<li>2 正 3 反， 3 正 2 反</li>\n<li>4 正 1 反， 1 正 4 反</li>\n</ul>\n<p>注意到，每一组里的前后两类情况出现的概率总是相同的，然而前面那类总是属于有偶数个正面的情况，后面那类总是属于有奇数个正面的情况。因而总的来说，有偶数个正面的情况和有奇数个正面的情况将会概率均等地出现。</p>\n<p>回到原问题。如果是 10 枚硬币的话，又该怎么办呢？大家或许想要故技重施，但却发现这回不管用了。虽然 0 正 10 反和 10 正 0 反出现的概率仍然相等，但它们都是有偶数个正面的情况，这样就没法推出奇偶两种情况各占一半的结论了。不过，我们另有奇招。把这 10 枚硬币分成两组，每一组各有 5 枚硬币。根据刚才的结论，每组硬币里面出现偶数个正面和出现奇数个正面的概率是相同的，因而，同时抛掷这两组硬币后，检查两组硬币正面朝上的数量分别有多少，会产生“偶偶”、“偶奇”、“奇偶”、“奇奇”这四种等概率的组合。在第一种情况和最后一种情况中，最终正面朝上的硬币数量为偶数；在第二种情况和第三种情况中，最终正面朝上的硬币数量为奇数。可以看到，正面朝上的硬币数量是奇是偶的概率相等。</p>\n<p>我们还有另一种更简单的方法来说明，同时抛掷 10 枚硬币后，正面朝上的硬币数量是奇是偶的概率的确相同。假设你已经抛掷了 9 枚硬币，正准备抛掷最后一枚硬币。不管前 9 枚硬币抛掷成啥样，最后这枚硬币的正反都将会起到决定性的作用，具体情况分为两种，视前 9 枚硬币的抛掷结果而定：</p>\n<ul>\n<li>如果最后一枚硬币是正面，总的正面个数就是偶数；如果最后一枚硬币是反面，总的正面个数就是奇数；</li>\n<li>如果最后一枚硬币是正面，总的正面个数就是奇数；如果最后一枚硬币是反面，总的正面个数就是偶数。</li>\n</ul>\n<p>容易看出，不管是上述两种情况中的哪种情况，总的正面个数是奇是偶的概率都是相等的。因此，即使上述两种情况出现的概率不相等（当然，事实上是相等的），最终总的正面个数是奇是偶的概率也是相等的。</p>\n<p>&nbsp;</p>\n<blockquote><p>14．A 、 B 两人在玩掷硬币游戏，每个人都抛掷 10 次硬币，最后谁抛出的正面更多，谁就获胜。几轮游戏下来后， A 都获胜了， B 有些沮丧。 A 说：“要不这样吧，我们把游戏规则改一下。我允许你多抛掷一次硬币。也就是说，我仍然抛掷 10 次硬币，你却能抛掷 11 次硬币。但是，只有你抛掷出的正面次数严格大于我抛掷出的正面次数，才算你获胜；如果我们抛掷出的正面次数相同，那也算我获胜。”新的一轮游戏开始了，按照约定， A 抛掷了 10 次硬币， B 抛掷了 11 次硬币。理论上，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．A 获得游戏的胜利<br />\nB．B 获得游戏的胜利<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>题目的答案是 C 。这是一个非常经典的问题，解决它的方法也有很多。我们介绍两种方法。</p>\n<p>第一种方法如下。在新版游戏中，假设两人各自都已经抛掷了 10 次硬币，只待 B 抛掷最后一次了。此时，如果 B 的正面更多，那他就胜定了，游戏可以提前结束了。如果 B 的正面更少，那他就输定了，游戏也可以提前结束了。显然，这两种情况出现的概率相同。现在，只剩一种情况有待分析，即此时 B 的正面数量与 A 相同。那么，游戏结果将完全取决于 B 的最后一次抛掷：如果 B 抛掷出正面，胜；如果 B 抛掷出反面，败。而这两种情况出现的概率也是相同的。综上所述，新的游戏是公平的。</p>\n<p>第二种方法如下。既然 B 比 A 多抛掷一次，那这就说明， B 的正面和反面不可能都没 A 多（否则 B 的硬币总数不可能比 A 多）。另外，由于 B 只比 A 多抛掷一次，那这就说明， B 的正面和反面不可能都比 A 多（否则 B 的硬币总数至少比 A 大 2 ）。综上所述，要么 B 的正面比 A 更多，要么 B 的反面比 A 更多。由于硬币本身是公正的，因此这两种情况出现的几率相等，它们各为 1/2 。但是， B 的正面比 A 更多就意味着 B 获胜了， B 的反面比 A 更多就意味着 B 的正面数量不比 A 多，即 A 获胜了（别忘了，平局算 A 获胜）。所以，两人各自获胜的概率都是 1/2 。</p>\n<p>&nbsp;</p>\n<blockquote><p>15．魔术师把一枚正常的硬币展示给观众看，然后说：“接下来，我会抛掷这枚硬币，每次它都将正面朝上。”观众听闻后议论纷纷，魔术师趁机迅速地把这枚正常的硬币换成了一枚两面都是正面的硬币。魔术师连掷 10 次硬币，次次正面朝上，赢得观众雷鸣般的掌声。其中一个观众不服气地说：“该不会你趁我们不注意，把硬币换成了两面都是正面的特殊硬币吧！如果你有本事的话，你给我们掷出一个‘正反正反……’的序列出来！”为了保住自己的颜面，魔术师只好把那枚正常的硬币变回手中，硬着头皮开始抛掷硬币。倘若魔术师抛掷硬币没有任何技巧，每次是正是反的概率相同，那么魔术师无限地抛掷下去，第一次出错更有可能出在什么地方？</p>\n<p class="indent">A．该掷正面的时候掷出了反面<br />\nB．该掷反面的时候掷出了正面<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案是 A 。下面我们证明，因为该掷反面的时候掷出了正面而挂掉的概率，也就是在第偶数次抛掷时挂掉的概率，精确地等于 1/3 。容易得出，第 2 次就挂了的概率就是前 2 次精确地掷出“正正”序列的概率，它等于 1 / 2<sup>2</sup> 。类似地，到第 4 次才挂的概率就是前 4 次精确地掷出“正反正正”序列的概率，它等于 1 / 2<sup>4</sup> ；而到第 6 次才挂的概率则是前 6 次精确地掷出“正反正反正正”序列的概率，它等于 1 / 2<sup>6</sup>……所以，在第偶数次挂掉的概率是：</p>\n<p class="indent">&nbsp; 1 / 2<sup>2</sup> + 1 / 2<sup>4</sup> + 1 / 2<sup>6</sup> + 1 / 2<sup>8</sup> + &#8230;<br />\n= 1 / 4 + 1 / 4<sup>2</sup> + 1 / 4<sup>3</sup> + 1 / 4<sup>4</sup> + &#8230;<br />\n= (1 + 1 / 4 + 1 / 4<sup>2</sup> + 1 / 4<sup>3</sup> + 1 / 4<sup>4</sup> + &#8230;) &#8211; 1<br />\n= 1 / (1 &#8211; 1 / 4) &#8211; 1<br />\n= 1 / 3</p>\n<p>倒数第二步用到了无穷等比级数的求和公式（见本文中的第 4 题）。</p>\n<p>其实，这个答案有一个非常直观的解释。想象 A 、 B 两人玩一个掷硬币游戏。两人轮流抛掷硬币，但 A 必须掷出正面， B 必须掷出反面，谁掷错了谁就立即输掉游戏。如果 A 先抛硬币，谁输掉的概率更大？那当然是 A 输掉的概率更大，因为他先掷嘛！</p>\n<p>事实上，设 A 输掉的概率为 p ，我们可以巧妙地求出 p 来。怎样的情况下 A 才会输掉呢？如果 A 第一次就掷错了，他就直接输了，这有 1/2 的概率。如果 A 第一次掷对了，那么 B 必须也跟着掷对，走到这一步有 (1/2) × (1/2) = 1/4 的概率。此时，游戏又回到了出发点， A 输掉的概率又变回了 p 。于是，我们得到：</p>\n<p class="indent">p = 1/2 + (1/4) · p</p>\n<p>把它当作一个关于 p 的一元一次方程，解得 p = 2/3 。这就是我们想要的答案。我们将会在很后面的几个题目里继续用到这种技巧。</p>\n<p>我们还有一种非常帅的方法来说明，为什么魔术师首次出错更容易错在把正面掷成了反面。把正面看作数字 1 ，反面看作数字 0 ，那么观众要求的目标序列就变成了 101010&#8230; 。如果在前面加一个小数点，这就变成了一个 0 到 1 之间的二进制小数 0.101010&#8230; ，它等于十进制中的 2/3 。而魔术师抛掷的硬币序列，则构成了一个 0 到 1 之间的随机数。如果某一次把 0 掷成了 1 ，就说明掷出的是一个比 2/3 更大的数；如果某一次把 1 掷成了 0 ，就说明掷出的是一个比 2/3 更小的数。显然，前者的概率是 1/3 ，后者的概率是 2/3 。</p>\n<p>你意识到了吗？我们相当于用一枚公正的硬币，模拟出了一枚不公正的硬币。如果你想要一枚硬币，它有 2/3 的概率正面朝上，有 1/3 的概率反面朝上，但你手中只有一枚公正的硬币，你该怎么办呢？你可以像刚才那样，不断抛掷硬币，得出一个 0 到 1 之间的随机二进制小数。一旦发现这个二进制小数小于 2/3 ，就视最终结果为“正”；一旦发现这个二进制小数大于 2/3 ，就视最终结果为“反”。</p>\n<p>当然，模拟这样一枚不公正的硬币，其实远不需要这么麻烦。我们可以连续抛掷 2 次硬币，抛出“正反”或者“反正”都视最终结果为“正”，抛出“正正”则视最终结果为“反”，抛出“反反”则此轮抛掷作废，重头再来。这种“分类讨论法”能成的原因是， 2/3 是一个有理数。如果我们要模拟一枚不公正的硬币，它有 1 / π 的概率正面朝上，有 1 &#8211; 1 / π 的概率反面朝上呢？此时，“分类讨论法”就不管用了。但是，刚才的“二进制小数法”依旧有效。不断抛掷硬币并记录抛掷结果， 1 代表正面， 0 代表反面，直至某次掷出的结果与 1 / π 的二进制小数不符。如果是 1 被掷成 0 了，则视最终结果为“正”；如果是 0 被掷成 1 了，则视最终结果为“反”。</p>\n<p>如何用一种硬币去模拟另一种硬币，这是一个非常有趣的话题，里面大有文章可作。比方说，我们完全可以提出一个和刚才的问题正好相反的问题：如果你手里有一枚不公正的硬币（你不知道它的正反两面朝上的概率各是多少，你甚至不知道它的哪一面朝上的概率更大），如何才能把它当作一枚公正的硬币来使？办法有很多。比方说，考虑连续抛掷两次硬币后的结果：如果结果是一正一反，那么先正后反和先反后正的概率一定是相同的（即使这枚硬币是不公平的）。借助这一点，我们就有了下面这个方案：连续抛掷两次硬币，如果两次抛掷的结果是“正反”，就视最终结果为“正”；如果两次抛掷的结果是“反正”，就视最终结果为“反”；如果是其他情况，就重新再来。</p>\n<p>如果把两种甚至更多种不同的硬币组合起来使用，在某些限制条件下模拟出某些特定的概率事件，这里面的水就更深了。这里有一个与此相关的问题，感兴趣的话不妨去看看： <a href="http://www.matrix67.com/blog/archives/6151">http://www.matrix67.com/blog/archives/6151</a> 。</p>\n<p>&nbsp;</p>\n<blockquote><p>16． A 、 B 两人为一件小事争执不休，最后决定用抛掷硬币的办法来判断谁对谁错。不过，为了让游戏过程更刺激，两人决定采用这样一种方案：连续抛掷硬币，直到最近三次硬币抛掷结果是“正反反”或者“反反正”。如果是前者，那么 A 获胜；如果是后者，那么 B 获胜。理论上，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．A 获得游戏的胜利<br />\nB．B 获得游戏的胜利<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>乍看上去， B 似乎没有什么不同意这种玩法的理由，毕竟“正反反”和“反反正”的概率是均等的。连续抛掷三次硬币可以产生 8 种不同的结果，上述两种各占其中的 1/8 。况且，序列“正反反”和“反反正”看上去又是如此对称，获胜概率怎么看怎么一样。</p>\n<p>不过，实际情况究竟如何呢？实际情况是，这个游戏并不是公平的—— A 的获胜概率是 B 的 3 倍！虽然“正反反”和“反反正”在一串随机硬币正反序列中出现的频率理论上是相同的，但别忘了这两个序列之间有一个竞争的关系，它们要比赛看谁先出现。一旦抛掷硬币产生出了其中一种序列，游戏即宣告结束。这样一来， B 就处于了一个非常窘迫的位置：不管什么时候，只要掷出了一个正面，如果 B 没赢的话， B 就赢不了了——在出现“反反正”之前， A 的“正反反”必然会先出现。</p>\n<p>事实上，整个游戏的前两次硬币抛掷结果就已经决定了两人最终的命运。只要前两次抛掷结果是“正正”、“正反”、“反正”中的一个， A 都必胜无疑， B 完全没有翻身的机会；只有前两次掷出的是“反反”的结果， B 才会赢得游戏的胜利。因此， A 、 B 两人的获胜概率是三比一， A 的优势绝不止是一点。所以说，这道题目的正确选项为 A 。</p>\n<p>这里有对此游戏更加深入的讨论： <a href="http://www.matrix67.com/blog/archives/6015">http://www.matrix67.com/blog/archives/6015</a> 。</p>\n<p>似乎是还嫌游戏双方的胜率差异不够惊人， 2010 年， Steve Humble 和 Yutaka Nishiyama 提出了上述游戏的一个加强版。去掉一副扑克牌中的大小王，洗好剩下的 52 张牌后，一张一张翻开。一旦出现连续三张牌，花色依次是红黑黑，那么玩家 A 加一分，同时把翻开了的牌都丢掉，继续一张张翻没翻开的牌；类似地，一旦出现连续三张牌恰好是黑黑红，则玩家 B 得一分，弃掉已翻开的牌后继续。</p>\n<p>容易看到，加强版游戏相当于是重复多次的掷硬币游戏，因而毫无疑问，在这个新游戏中，玩家 A 的优势还会进一步放大。电脑计算显示， A 获胜的概率高达 93.54% ， B 获胜的概率则只有可怜的 2.62% 。另外 3.84% 则是两人平手的概率。然而，即使是这样，这个游戏看上去也会给人一种公平的错觉！</p>\n<p>这个例子告诉我们，在赌博游戏中，直觉并不是准确的，求助概率论是很有必要的。</p>\n<p>其实，概率论的诞生本来就和赌博游戏是紧紧联系在一起的。提到概率论的诞生，不得不提一位名叫 Antoine Gombaud 的法国作家。这人出生于 1607 年法国西部的一个小城市，他并不是贵族出身，但他却有着“骑士”的光辉头衔——不过那只是他自封的而已。他借用了一个自己笔下的人物形象名称，自封为 de Méré 骑士。后来，这个名字便逐渐取代了他的真名 Antoine Gombaud 。不过， de Méré 骑士并没有凭借自己的文学作品名扬天下，真正让他声名远扬的是他的赌博才能。而足以让他在历史上留名的，则是他对一个赌博游戏的思考。</p>\n<p>在 17 世纪，法国赌徒间流行着一个赌博游戏：连续抛掷一颗骰子 4 次，赌里面是否会出现至少一个 6 点。这个游戏一直被视为是一个公平的赌博游戏，直到 1650 年左右， de Méré 在另一个类似的游戏中莫名其妙地输得四个荷包一样重。当时， de Méré 参加了这个赌博游戏的一个“升级版”：把两颗骰子连续抛掷 24 次，赌是否会掷出一对 6 点来。</p>\n<p>de Méré 自己做了一番思考。同时抛掷两颗骰子出现一对 6 ，比抛掷一颗骰子出现 6 点要困难得多，前者的概率是后者的 1/6 。要想弥补这个减小了的概率，我们应当把两颗骰子连续抛掷 6 次。为了追上连续抛掷 4 次骰子出现一个 6 的概率，则应当把两颗骰子抛掷 24 次才行。 de Méré 果断地得出结论：在升级版游戏中出现一对 6 的概率，与传统游戏中出现一个 6 的概率是相等的，升级版游戏换汤不换药，与原来的游戏本质完全一样。</p>\n<p>不过，这毕竟是不严格的直觉思维，事实情况如何还得看实战。在以前的游戏中， de Méré 总是赌“会出现 6 点”，经验告诉他这能给他带来一些细微的优势。于是这一回， de Méré 也不断押“会出现一对 6”。不料，这次他却赔得多赚得少，最终输了个精光。</p>\n<p>这是怎么一回事儿呢？作为一个业余数学家， de Méré 感到里面有玄机。但是，凭借自己的数学知识，他没有能力解决这个难题。无奈之下，他只好求助当时的大数学家 Blaise Pascal 。</p>\n<p>Pascal 可是真资格的数学家。他很快便意识到，这种问题的计算不能想当然，事实和直觉的出入可能会相当大。比方说， de Méré 的直觉就是有问题的：重复多次尝试确实能增大概率，但这并不是成倍地增加。抛掷一颗骰子出现 6 点的概率为 1/6 ，但这并不意味着抛掷骰子 4 次会出现一个 6 点的概率就是 1/6 的 4 倍。无妨想一个更极端的例子：按此逻辑，抛掷一颗骰子 6 次，出现至少一次 6 点的概率似乎就该是 6/6 ，也即 100% ，但这显然是不对的。如果抛掷骰子 6 次以上，出现一个 6 点的概率就会超过 100% ，这就更荒谬了。</p>\n<p>看来，概率不能简单地加加减减，每一步推理都要有凭有据。 Pascal 考虑了游戏中所有可能出现的情况，算出了在新旧两种版本的游戏中，会出现一个（或一对） 6 点的概率分别是多少。</p>\n<p>连续抛掷 4 次骰子，总共会产生 6<sup>4</sup> ，也就是 1296 种可能。不过在这里面，一个 6 点都没有的情况共有 5<sup>4</sup> ，也就是 625 种。反过来，至少有一个 6 点就有 1296 &#8211; 625 = 671 种情况，它占所有情况的 671 / 1296 ≈ 51.77% ，恰好比 50% 高出那么一点点。看来， de Méré 的经验是对的——众人公认的公平游戏并不公平，赌 6 点会出现确实能让他有机可乘。</p>\n<p>那么，连续抛掷两颗骰子 24 次，能出现一对 6 的概率又是多少呢？这回计算的工程量就有点大了。两颗骰子的点数有 36 种组合，连抛 24 次则会有 36<sup>24</sup> ，大约是 2.245 × 10<sup>37</sup> 种情况。而 24 次抛掷中，从没产生过一对 6 点的情况数则为 35<sup>24</sup> ，大约为 1.142 × 10<sup>37</sup> 。可以算出，如果赌 24 次抛掷里会出现一对 6 ，获胜的概率是 49.14% 。又一个非常接近 50% 的数，只不过这次是比它稍小一些。</p>\n<p>原来，升级版游戏并不是换汤不换药。两种游戏胜率虽然接近，但正好分居 50% 两边。这看似微不足道的差别，竟害得我们的“骑士”马失前蹄。</p>\n<p>后来，这个经典的概率问题就被命名为“de Méré 问题”。在解决这个问题的过程中， Pascal 提出了不少概率的基本原理。因此， de Méré 问题常被认为是概率论的起源。</p>\n<p>当然， de Méré 的故事多少都有一些杜撰的成分，大家或许会开始怀疑，在现今世界里，有没有什么还能玩得到的“伪公平游戏”呢？答案是肯定的。为了吸引玩家，赌场想尽各种花样精心设计了一个个迷魂阵一般的赌局。在那些最流行的赌博游戏中，庄家一方总是会稍占便宜；但游戏规则设计得如此之巧妙，以至于乍看上去整个游戏是完全公平，甚至是对玩家更有利的。“骰子掷好运”（chuck-a-luck）便是一例。</p>\n<p>“骰子掷好运”的规则看上去非常诱人。每局游戏开始前，玩家选择 1 到 6 之间的一个数，并下 1 块钱的赌注。然后，庄家同时抛掷三颗骰子。如果这三颗骰子中都没有你选的数，你将输掉那 1 块钱；如果有一颗骰子的点数是你选的数，那么你不但能收回你的赌注，还能反赢 1 块钱；如果你选的数出现了两次，你将反赢 2 块钱；如果三颗骰子的点数都是你选的数，你将反赢 3 块钱。用赌博的行话来说，你所押的数出现了一次、两次或者三次，对应的赔率分别是 1:1 、 1:2 、 1:3 。</p>\n<p>用于抛掷三颗骰子的装置很有创意。它是一个沙漏形的小铁笼子，三颗骰子已经预先装进了这个笼子里。庄家“抛掷”骰子，就只需要把整个沙漏来个 180 度大回旋，倒立过来放置即可。因此，“骰子掷好运”还有一个别名——“鸟笼”（birdcage）。</p>\n<p>18 世纪英国皇家海军的水手间流行过一种叫做“皇冠和船锚”（Crown and Anchor）的赌博游戏，其规则与“骰子掷好运”一模一样。唯一不同之处只是骰子而已。普通骰子的六个面分别是 1 点到 6 点，而“皇冠和船锚”所用骰子的六个面则是六种不同的图案——扑克牌的黑、红、梅、方，再加上皇冠和船锚两种图案。之后，“赌博风”又蔓延到了商船和渔船上，“皇冠和船锚”也就逐渐走出了皇家海军的圈子。一般认为，这也就是“骰子掷好运”的起源了。现在，很多赌场都提供了“骰子掷好运”的赌博项目。</p>\n<p>对玩家而言，这个游戏看上去简直是在白送钱：用三颗骰子掷出 6 个数中的一个，怎么也会有一半的概率砸中吧，那玩家起码有一半的时间是在赚钱，应当是稳赚不赔呀。其实，这是犯了和 de Méré 一样的错误——一颗骰子掷出玩家押的数有 1/6 的概率，并不意味着三颗骰子同时抛掷就会有 3/6 的概率出现此数。在抛掷三颗骰子产生的所有 6<sup>3</sup> 种情况中，玩家押的数一次没出现有 5<sup>3</sup> 种情况，所占比例大约是 57.87% 。也就是说，大多数时候玩家都是在赔钱的。</p>\n<p>不过，考虑到赚钱时玩家有机会成倍地赢钱，这能否把输掉的钱赢回来呢？一些更为细致的计算可以告诉我们，即使考虑到这一点，游戏对玩家仍然是不利的：平均每赌 1 块钱就会让玩家损失大约 8 分钱。不过，我们还有另一种巧妙的方法，无需计算便可看出这个游戏对玩家是不利的。</p>\n<p>这显然是一个没有任何技巧的赌博游戏，不管押什么胜率都是一样的。因此，不妨假设有 6 名玩家同时在玩这个游戏，这 6 个人分别赌 6 个不同的点数。此时玩家联盟的输赢也就足以代表单个玩家的输赢了。</p>\n<p>假设每个人都只下注 1 块钱。抛掷骰子后，如果三颗骰子的点数都不一样，庄家将会从完全没猜中点数的三个人手中各赚 1 块，但同时也会赔给另外三人各 1 块钱；如果有两颗骰子点数一样，庄家会从没猜中点数的四个人那里赢得共 4 块，但会输给另外两人 3 块；如果三颗骰子的点数全一样，庄家则会赢 5 块但亏 3 块。也就是说，无论抛掷骰子的结果如何，庄家都不会赔钱！虽然一轮游戏下来有的玩家赚了，有的玩家亏了，但从整体来看这 6 名玩家是在赔钱的，因此平均下来每个玩家也是在不断输钱的。</p>\n<p>&nbsp;</p>\n<blockquote><p>17．同时抛掷 6 颗骰子，出现下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．不同数字的个数恰好为 4 个<br />\nB．不同数字的个数为 1 、 2 、 3 、 5 或 6 个<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个题目的答案竟然是 A ，没想到吧！赌博游戏的胜率常常违反直觉，这道题目又是一个经典的例子。同时抛掷 6 颗骰子，一共会产生 6<sup>6</sup> = 46656 种情况。其中，不同数字的个数恰好为 4 个的情况有多少种呢？如果 6 颗骰子里只有 4 个不同的数字，那么有的数字出现了至少 2 次。事实上，各个数字出现的次数只有以下两种可能的分布类型：</p>\n<ul>\n<li>其中 1 个数字出现了 3 次，另外 3 个数字各出现了 1 次</li>\n<li>其中 2 个数字各出现了 2 次，另外 2 个数字各出现了 1 次。</li>\n</ul>\n<p>前者一共有 C(6, 3) × C(6, 4) × 4! = 7200 种具体的情况，其中 C(6, 3) 表示出现了 3 次的数字究竟出现在了哪 3 次， C(6, 4) 表示这 4 个数字究竟是哪 4 个数字。后者一共有 C(6, 2) × C(4, 2) × C(6, 4) × 4! / 2 = 16200 种具体的情况，其中 C(6, 2) 表示第一个出现了 2 次的数字究竟出现在了哪 2 次， C(4, 2) 表示第二个出现了 2 次的数字究竟出现在了哪 2 次， C(6, 4) 表示这 4 个数字究竟是哪 4 个数字，最后的结果除以 2 的原因是，第一个出现了 2 次的数和第二个出现了 2 次的数有可能分别是我和你，也有可能分别是你和我，这被算重了。</p>\n<p>因此，不同数字的个数恰好为 4 个的情况一共有 7200 + 16200 = 23400 种，它占总数的 23400 / 46656 ≈ 50.154321% 。</p>\n<p>&nbsp;</p>\n<blockquote><p>18．小明走进一家赌场，来到了轮盘赌跟前。轮盘赌的转盘上有 38 个格子，上面分别标着 0, 00, 1, 2, 3, &#8230;, 36 。游戏开始后，一个白色小球会逆着轮盘旋转的方向滚动，最终等概率地落入 38 个格子中的一个。小明每次可以在任意一个格子上下 1 元的赌注。如果小球落入了小明所选的格子里，则小明赢得 36 元（但那 1 元钱的赌注仍然归赌场）；如果小球落入了别的格子里，则小明什么也得不到（那 1 元也就打水漂了）。小明身上只有 105 元钱，于是，他连续赌了 105 次。那么，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．小明赚着离开了赌场<br />\nB．小明亏着离开了赌场<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>花 1 元赌某一个格子，中签的概率是 1/38 ，但却只能赢来 36 元。毫无疑问，轮盘赌是一个赤裸裸的对赌场更有利的赌博游戏。所以，这道题应该选 B 咯？不对！这道题的正确答案其实是 A 。在这道题中， 105 这个数起到了比较关键的作用。让我们来实际计算一下。</p>\n<p>由于每赢一次会得到 36 元，因此小明只需要赢 3 次或 3 次以上，便能实现赚着离开赌场了。小明一次没赢的概率为 (37/38)<sup>105</sup> ≈ 0.0608 ，恰好赢 1 次的概率为 C(105, 1) × (1/38) × (37/38)<sup>104</sup> ≈ 0.1725 ，恰好赢 2 次的概率为 C(105, 2) × (1/38)<sup>2</sup> × (37/38)<sup>103</sup> ≈ 0.2425 ，上述三个值加起来约为 0.4758 。所以，反过来，小明赢了 3 次或 3 次以上的概率就是 0.5242 ，这超过了 1/2 。</p>\n<p>为什么在玩一个明显对赌场更有利的赌博游戏中，精确地花费 105 元钱，就能做到赚时多亏时少？如果每个人都这么做，赌场岂不是会被搞垮？这不跟游戏对赌场更有利的结论相矛盾吗？其实，赚的时候更多，并不意味着期望收益为正。虽然赚的时候多，亏的时候少，但赚的时候往往是赚小钱，亏的时候往往是亏大钱，平均算下来，玩家仍然是在不断送钱的。</p>\n<p>&nbsp;</p>\n<blockquote><p>19．法国有法国的轮盘赌，俄罗斯也有俄罗斯的轮盘赌。不过，战斗民族的赌博方式可不一样——不是赌钱，而是赌命。俄罗斯轮盘赌可谓是史上最酷的决斗方式。左轮手枪的转轮中有六个弹槽。在其中一个弹槽中放入一颗子弹，然后快速旋转转轮，再把它合上。参与决斗的两个人轮流对准自己的头部扣动扳机，直到其中一方死亡。这是一场真男人游戏，双方胜负的概率各占 50% ，游戏没有任何技巧可言，命运决定了一切。为了让游戏更加刺激，这一回我们稍微改变一下游戏规则。在转轮的连续三个弹槽中放入子弹，然后旋转并合上转轮。这一次，理论上，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．先开枪的人死亡<br />\nB．后开枪的人死亡<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>或许有些出人意料的是，这个题目的答案为 A 。为了算出双方存活的概率，我们只需要考虑所有 6 种可能的子弹位置即可。不妨用符号 ⊙ 来表示有子弹的弹槽，用符号 ○ 来表示空的弹槽。我们便能列出下面这张表：</p>\n<ul>\n<li> ⊙⊙⊙○○○ → 先开枪者死 </li>\n<li> ⊙⊙○○○⊙ → 先开枪者死 </li>\n<li> ⊙○○○⊙⊙ → 先开枪者死 </li>\n<li> ○○○⊙⊙⊙ → 后开枪者死 </li>\n<li> ○○⊙⊙⊙○ → 先开枪者死 </li>\n<li> ○⊙⊙⊙○○ → 后开枪者死 </li>\n</ul>\n<p>可见，先开枪者死亡的概率高达 2/3 ，是后开枪者死亡概率的两倍。</p>\n<p>可以算出，当转轮里位置相连的子弹数分别为 1 、 2 、 3 、 4 、 5 、 6 时，先开枪者死亡的概率分别为 1/2 、 2/3 、 2/3 、 5/6 、 5/6 、 1 。看来，并不是所有游戏都是先下手为强啊。</p>\n<p>&nbsp;</p>\n<blockquote><p>20．小明参加某电视台的选秀节目。 A 、 B 、 C 三位导师欣赏了小明的一番激情演唱后，需要投票决定小明能否晋级。小明的表演征服了 A 、 B 两位导师，每位导师都有 4/5 的概率投出赞成票，支持小明晋级。但 C 导师则犹豫不决，不知道该如何选择。怎么办呢？节目组给出了两种方案供小明选择。第一种方案是， A 、 B 两位导师独立作出决定， C 则抛掷一枚公正的硬币，如果硬币正面朝上，则晋级与否完全以 A 的决定为准，如果硬币反面朝上，则晋级与否完全以 B 的决定为准。第二种方案是，A 、 B 两位导师独立投出赞成票或反对票， C 则抛掷一枚公正的硬币，如果硬币正面朝上，则投出赞成票，如果硬币反面朝上，则投出反对票，最后晋级与否则取决于三人中的多数票。为了提高晋级的概率，小明应该选择哪种方案？</p>\n<p class="indent">A．选择第一种方案<br />\nB．选择第二种方案<br />\nC．两种方案的晋级概率相同</p>\n</blockquote>\n<p>这个题目的答案是 C 。两种方案中，小明晋级的概率是相同的，都是 4/5 。即使把题目中 4/5 这个比例换一换，答案也依旧如此。不妨假设 A 、 B 两位导师投出赞成票的概率都是 p ，那么第一种方案中小明晋级的概率显然是 (1/2) · p + (1/2) · p = p 。第二种方案呢？两位导师都投出赞成票的概率是 p<sup>2</sup> ，此时小明必然晋级； A 投出赞成票 B 投出反对票的概率是 p · (1 &#8211; p) ，此时小明有 1/2 的概率晋级（这取决于 C ）； A 投出反对票 B 投出赞成票的概率是 (1 &#8211; p) · p ，此时小明有 1/2 的概率晋级（这取决于 C ）；其他情况下小明都无法晋级。因此，第二种方案中小明晋级的概率为 p<sup>2</sup> + (1/2) · p · (1 &#8211; p) + (1/2) · (1 &#8211; p) · p ，化简的结果是一样的： p 。</p>\n<p>&nbsp;</p>\n<blockquote><p>21．小明上了几次象棋课，回到家得意地要和爸爸妈妈一比高低。爸爸说：“好啊，那我们来搞一次家庭挑战赛吧。比赛分三轮进行，爸爸妈妈将会作为你的对手轮番上场。如果你在任意连续的两轮比赛中获胜，你就能得到一大笔零花钱。对了，挑战赛开始前，你可以指定爸爸妈妈的出场顺序哦。”小明深知，战胜爸爸的概率更低，战胜妈妈的概率更高（事实上也的确如此）。为了提高得到零花钱的概率，小明应该怎样安排爸爸妈妈的出场顺序？</p>\n<p class="indent">A．爸爸、妈妈、爸爸<br />\nB．妈妈、爸爸、妈妈<br />\nC．两种情况下得到零花钱的概率相同</p>\n</blockquote>\n<p>这是一个非常经典的问题。你或许会觉得，方案 B 更好，因为小明会更多地面对较弱的对手。而实际上，这个题的答案是 A 。这背后有一个很简单的直觉：中间那个人一定不能太强，因为中间那场输了，整个儿就没机会了。</p>\n<p>我们可以定量地分析一下。假设战胜爸爸的概率是 p ，战胜妈妈的概率是 q ，根据题目假设， p &lt; q 。如果采用爸爸、妈妈、爸爸的顺序，则得到零花钱的概率等于赢了前两场输了最后一场的概率，加上赢了后两场输了第一场的概率，再加上三场都赢了的概率。最后结果是：</p>\n<p class="indent">p · q · (1 &#8211; p) + (1 &#8211; p) · q · p + p · q · p = 2 · p · q &#8211; p<sup>2</sup> · q </p>\n<p>类似地，如果采用妈妈、爸爸、妈妈的顺序，则得到零花钱的概率就是：</p>\n<p class="indent">q · p · (1 &#8211; q) + (1 &#8211; q) · p · q + q · p · q = 2 · p · q &#8211; p · q<sup>2</sup></p>\n<p>由于 p &lt; q ，因此前一个式子一定比后一个式子更大。</p>\n<p>&nbsp;</p>\n<blockquote><p>22．一架客机上有 100 个座位， 100 个人排队依次登机。第一个乘客把登机牌搞丢了，但他仍被允许登机。由于他不知道他的座位在哪儿，他就随机选了一个座位坐下。以后每一个乘客登机时，如果他自己的座位是空着的，那么他就在他自己的座位坐下；否则，他就随机选一个仍然空着的座位坐下。当最后一个人登机时，发生下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．他发现剩下的空位正好就是他的<br />\nB．他发现剩下的空位不是他的<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>你或许会以为情况 A 出现的概率很小，但实际上，这个概率是 50% 。换句话说，这个题目的答案是 C 。我们可以通过一些严格而复杂的计算来说明这一点，但在这里，我更愿意给出一些直观的解释。注意到，当最后一名乘客登机时，最后一个空位要么就是他的，要么就是第一个乘客的（其他的座位如果没被别人抢占，最终也会被它真正的主人占据）。这两个位置会面对 98 个人的选择，它们的“地位”是相等的，它们的“命运”是相同的，不存在哪个概率大哪个概率小的问题。因此，它们成为最后一个空位的概率是均等的。也就是说，最后一个人发现剩下的空位正好是他的，其概率为 50% 。</p>\n<p>下面是另一个有趣的解释。我们可以把问题等价地修改为，如果一个人发现自己的座位被别人占据后，他就叫这个人重新去找一个位置，自己则在这里坐下。结果你会发现，真正在飞机上跑来跑去不断换座位的人其实只有一个，就是第一个人。我们可以干脆叫他直接站在旁边，等他后面的 98 个人全部入座后，他再选个座位坐下。容易看出，他选中的座位要么是他自己的，要么是最后一个人的，这各占 50% 的概率。因此，最后一个人上来之后，正好能对号入座的概率也就是 50% 。</p>\n<p>&nbsp;</p>\n<blockquote><p>23．在每一代的繁殖中，每个阿米巴原虫都有 2/3 的概率分裂成两个，有 1/3 的概率死亡（而不产生下一代）。初始时只有一个阿米巴原虫，那么下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．阿米巴原虫在有限代之后灭绝<br />\nB．阿米巴原虫无限地繁殖下去<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>注意到，这个问题是有意义的。阿米巴原虫要么在有限代之后灭绝，要么无限地繁殖下去。我们的问题就是，究竟发生哪种情况的可能性更大。</p>\n<p>实际上，这个题的答案选 C 。不妨把一个阿米巴原虫能无限繁殖下去的概率设为 p 。初始时的那个阿米巴原虫怎样才能无限繁殖下去呢？首先，它得分裂为两个阿米巴原虫，这有 2/3 的概率；然后，其中至少一个阿米巴原虫要无限繁殖下去。于是，我们得到式子：</p>\n<p class="indent">p = (2/3) · (1 &#8211; (1 &#8211; p)<sup>2</sup>)</p>\n<p>其中， (1 &#8211; p)<sup>2</sup> 表示两个阿米巴原虫都没能无限繁殖下去的概率。把上面的式子当作一个关于 p 的一元二次方程，可解得 p = 0 或 p = 1/2 。舍去 p = 0 ，于是得到 p = 1/2 。这就说明， A 、 B 两种情况的出现概率是相同的。</p>\n<p>为什么我们可以舍去 p = 0 呢？要想说服自己这一点，这还真不容易。下面是一个不严谨的思路。如果我们把每个阿米巴原虫分裂成两个的概率记作 p<sub>0</sub> （原题则相当于 p<sub>0</sub> = 2/3 时的特例），那么阿米巴原虫无限繁殖下去的概率 p 就会满足：</p>\n<p class="indent">p = p<sub>0</sub> · (1 &#8211; (1 &#8211; p)<sup>2</sup>)</p>\n<p>解得 p = 0 或 p = (2 · p<sub>0</sub> &#8211; 1) / p<sub>0</sub> 。那么， p 究竟是多少呢？注意到以下三点：</p>\n<ol>\n<li>当 p<sub>0</sub> = 1 时，问题的答案显然应该为 1 ；</li>\n<li>不管 p<sub>0</sub> 是多少，问题的答案显然都应该是正数；</li>\n<li>在 p<sub>0</sub> 连续变化的过程中，问题的答案也应该发生连续的变化（这个猜测是合理的，我们姑且假设它正确，不再进行论证）。</li>\n</ol>\n<p>为了同时满足上述三点，只有这样一种可能：当 p<sub>0</sub> = 1/2 时，问题的答案为 0 ；当 p<sub>0</sub> &lt; 1/2 时，舍去后面那个解，即问题的答案一直都是 0 ；当 p<sub>0</sub> &gt; 1/2 时，舍去前面那个解，即问题的答案为 (2 · p<sub>0</sub> &#8211; 1) / p<sub>0</sub> 。</p>\n<p>&nbsp;</p>\n<blockquote><p>24．一斤白酒下肚后，我醉醺醺地来到了悬崖边上。如果我再往前迈一步，就会掉下悬崖。我每过一分钟都会往前或者往后迈一步，每次有 1/3 的概率往前迈一步，有 2/3 的概率往后迈一步。假设悬崖边是一条直线，我每步方向都严格垂直于悬崖边，且步长保持一致。如果我无限地走下去，那么下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．我在有限步之后将会掉下悬崖<br />\nB．我永远不会掉下悬崖<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>注意到，这个问题是有意义的。我要么在有限步之后掉下悬崖，要么永远不会掉下悬崖。我们的问题就是，究竟发生哪种情况的可能性更大。</p>\n<p>实际上，这个题的答案也是 C 。不妨假设我在有限步之后将会掉下悬崖的概率为 p 。那么， p 等于多少呢？如果我第一步就往前迈，那就直接掉下去了。这有 1/3 的概率。在另外 2/3 的情况下，我的第一步是往后迈的。如果我最后还是掉下悬崖了，那么在此期间，我一定回过出发点。回到出发点，本质上就相当于往前净走一步，这和从出发点出发最终掉下去了一样，概率都是 p ；回到出发点后，要想真的掉下去，这又有一个 p 的概率。于是，我们得到：</p>\n<p class="indent">p = 1/3 + (2/3) · p<sup>2</sup></p>\n<p>解得 p = 1/2 或 p = 1 。舍去 p = 1 ，于是得到 p = 1/2 。这就说明， A 、 B 两种情况的出现概率是相同的。</p>\n<p>为什么我们可以舍去 p = 1 呢？这里，我们可以使用和上一题类似的思路。如果用 p<sub>0</sub> 代替题目中的 2/3 ，则上面的式子变为了：</p>\n<p class="indent">p = (1 &#8211; p<sub>0</sub>) + p<sub>0</sub> · p<sup>2</sup></p>\n<p>解得 p = (1 &#8211; p<sub>0</sub>) / p<sub>0</sub> 或 p = 1 。为了保证连续性，当 p<sub>0</sub> > 1/2 时，我们需要舍去 p = 1 。</p>\n<p>你或许已经发现了，这一题和上一题非常相似。进一步考察两个问题的答案，你还会有更惊人的发现：在有限步之后掉下悬崖的概率是 (1 &#8211; p<sub>0</sub>) / p<sub>0</sub> ，因此永远不会掉下悬崖的概率是 1 &#8211; (1 &#8211; p<sub>0</sub>) / p<sub>0</sub> = (2 · p<sub>0</sub> &#8211; 1) / p<sub>0</sub> 。这正是上一题中阿米巴原虫无限繁殖下去的概率的表达式。</p>\n<p>其实，这两道题的本质就是完全一样的。让我们把阿米巴原虫数量的变化想象成是数轴上不断左右移动的点。刚开始，这个点在 x = 1 的位置。考虑某个阿米巴原虫：如果它分裂了，那么数轴上的点会向右移动一个单位，这有 2/3 的概率；如果它死亡了，那么数轴上的点会向左移动一个单位，这有 1/3 的概率。上一题就相当于是问，数轴上的点更有可能会在有限步之后到达 x = 0 的位置，还是更有可能永远都到不了 x = 0 的位置。如果你把数轴上的点左移右移想成是在悬崖外前进后退，把 x = 0 的位置想象成掉下悬崖的位置，这就瞬间变成这一题的背景了。</p>\n<p>&nbsp;</p>\n<blockquote><p>25．A 、 B 两支球队之间要打 100 场比赛。初始时，两支球队的经验值都为 1 。在每一场比赛中，两支球队各自的获胜概率与它们的经验值成正比，随后获胜一方的经验值将会加 1 。那么，当 100 场比赛全部打完之后，下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．球队 A 在所有 100 场比赛中全部获胜<br />\nB．球队 A 在所有 100 场比赛中恰好有 50 场获胜<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这是一个强者愈强，弱者愈弱的过程，因此其中一支球队完胜另一支球队的概率并不会太低，两支球队最终打成平手的概率也并不会太高。事实上，两种情况发生的概率是相同的，都是 1/101 。也就是说，这个题目的答案是 C 。</p>\n<p>让我们把 A 、 B 两支球队打比赛的过程进一步抽象成下面这样：从字符串 AB 出发，不断选择某个字母并把它分裂成两个。也就是说，初始时的字符串为 AB ，每一次你需要随机选择一个字母，如果选中了 A ，就把它变成 AA ，如果选中了 B ，就把它变成 BB 。第一次操作之后， AB 有可能变成 AAB ，也有可能变成 ABB ；如果第一次操作之后的结果是 AAB ，那么第二次操作之后，结果就会概率均等地变成 AAAB 、 AAAB 和 AABB 之一。容易看出，字母 A 、 B 数量增加的模式，与原问题中 A 、 B 两支球队经验值增加的模式是完全一致的，因而我们要求的概率值就等价地变为了： 100 次操作之后，字符串变成 AAA&#8230;AAB 的概率是多少，字符串变成 AA&#8230;AABB&#8230;BB （两种字母各半）的概率又是多少。下面我们来说明，这两个概率值都是 1/101 。</p>\n<p>先来看一个似乎与此无关的东西：把 0 到 100 之间的数随机排成一行的另类方法。首先，在纸上写下数字 0 ；然后，把数字 1 写在数字 0 的左边或者右边；然后，把数字 2 写在最左边，最右边，或者 0 和 1 之间……总之，把数字 k 概率均等地放进由前面 k 个数产生的（包括最左端和最右端在内的）共 k + 1 个空位中的一个。写完 100 之后，我们就得到了所有数的一个随机排列。</p>\n<p>现在，让我们假设初始时的字符串是 A<sup>0</sup>B ，并且今后每次分裂时，都在分裂得到的两个字母之间标注这是第几次分裂。也就是说，下一步产生的字符串就是 A<sup>1</sup>A<sup>0</sup>B 或者 A<sup>0</sup>B<sup>1</sup>B 之一。如果下一步产生的字符串是 A<sup>1</sup>A<sup>0</sup>B ，那么再下一步产生的字符串就会是 A<sup>2</sup>A<sup>1</sup>A<sup>0</sup>B 、 A<sup>1</sup>A<sup>2</sup>A<sup>0</sup>B 、 A<sup>1</sup>A<sup>0</sup>B<sup>2</sup>B 之一……联想前面的讨论，你会发现，第 100 次操作结束后，所有数字实际上形成了一个 0 到 100 的随机排列，也就是说最开始的数字 0 最后出现在各个位置的概率是均等的。因此，最右边那个位置上的数字就是 0 的概率是 1/101 ，正中间那个位置上的数字就是 0 的概率也是 1/101 。这其实就是我们要比较的那两个概率值。</p>\n<p>&nbsp;</p>\n<blockquote><p>26．从全体正整数中随机选出两个正整数，则下面哪种情况的可能性更大一些？</p>\n<p class="indent">A．这两个正整数互质（没有大于 1 的公约数）<br />\nB．这两个正整数不互质（有大于 1 的公约数）<br />\nC．上述两种情况的出现概率相同</p>\n</blockquote>\n<p>这个问题的说法很不严谨。我们给出一个更加严谨的叙述方法。让我们用 P<sub>N</sub> 来表示，从 1 到 N 中随机取出两个正整数，它们互质的概率是多少。我们的问题就是，当 N 趋于无穷时， P<sub>N</sub> 的值究竟是大于 1/2 ，等于 1/2 ，还是小于 1/2 。</p>\n<p>这是一个非常非常经典的问题。下面是最常见的一种解法。假设我们从全体正整数中随机选出了两个正整数 a 、 b 。其中， a 能被 2 整除的概率是 1/2 ， b 能被 2 整除的概率是 1/2 。因而，它们都能被 2 整除的概率就是 1 / 2<sup>2</sup> 。反过来，它们不都能被 2 整除的概率就是 1 &#8211; 1 / 2<sup>2</sup> 。类似地，它们不都能被 3 整除的概率就是 1 &#8211; 1 / 3<sup>2</sup> ，它们不都能被 5 整除的概率就是 1 &#8211; 1 / 5<sup>2</sup> ……于是，它们互质的概率就是：</p>\n<p class="indent">(1 &#8211; 1 / 2<sup>2</sup>) · (1 &#8211; 1 / 3<sup>2</sup>) · (1 &#8211; 1 / 5<sup>2</sup>) · (1 &#8211; 1 / 7<sup>2</sup>) &#8230;</p>\n<p>注意，这里用到了一个假设：如果 p 和 q 是两个质数，那么能否被 p 整除和能否被 q 整除，这是互相独立的。事实上也确实如此：一个数能被 p 整除的概率是 1 / p ，一个数能被 q 整除的概率是 1 / q ；一个数能同时被两个质数 p 和 q 整除，当且仅当它能被 p · q 整除，其概率是 1 / (p · q)。</p>\n<p>为了求出上面这个式子的值，我们考虑它的倒数。 1 &#8211; 1 / 2<sup>2</sup> 的倒数是 1 / (1 &#8211; 1 / 2<sup>2</sup>) ，而由无穷等比级数的求和公式（见本文中的第 4 题），它又可以被我们写成 1 + 1 / 2<sup>2</sup> + 1 / 2<sup>4</sup> + 1 / 2<sup>6</sup> + &#8230; 。类似地，其他几项也都变成了 1 + 1 / 3<sup>2</sup> + 1 / 3<sup>4</sup> + 1 / 3<sup>6</sup> + &#8230; ，1 + 1 / 5<sup>2</sup> + 1 / 5<sup>4</sup> + 1 / 5<sup>6</sup> + &#8230; ，等等。现在，想象一下，如果把所有的括号全都展开，把所有的项全都乘开来，会得到什么？我们会既无遗漏又无重复地得到所有的 1 / n<sup>2</sup> ！</p>\n<p class=indent>&nbsp; (1 + 1 / 2<sup>2</sup> + 1 / 2<sup>4</sup> + 1 / 2<sup>6</sup> + &#8230; ) · (1 + 1 / 3<sup>2</sup> + 1 / 3<sup>4</sup> + 1 / 3<sup>6</sup> + &#8230; )<br />\n&nbsp; · (1 + 1 / 5<sup>2</sup> + 1 / 5<sup>4</sup> + 1 / 5<sup>6</sup> + &#8230; ) · &#8230;<br />\n= 1 + 1 / 2<sup>2</sup> + 1 / 3<sup>2</sup> + 1 / 4<sup>2</sup> + 1 / 5<sup>2</sup> + &#8230;</p>\n<p>比方说， 40 = 2 × 2 × 2 × 5 ，那么等式右边的 1 / 40<sup>2</sup> 这一项，就是由等式左边的第一个括号里的 1 / 2<sup>6</sup> ，乘以第二个括号里的 1 ，乘以第三个括号里的 1 / 5<sup>2</sup> ，乘以其余所有括号里的 1 得到的。</p>\n<p>1 + 1 / 2<sup>2</sup> + 1 / 3<sup>2</sup> + 1 / 4<sup>2</sup> + 1 / 5<sup>2</sup> + &#8230; 究竟等于多少呢？我们来证明，它小于 2 。这是因为：</p>\n<p class="indent">&nbsp; 1 + 1 / 2<sup>2</sup> + 1 / 3<sup>2</sup> + 1 / 4<sup>2</sup> + 1 / 5<sup>2</sup> + &#8230;<br />\n&lt; 1 + 1 / (1 × 2) + 1 / (2 × 3) + 1 / (3 × 4) + 1 / (4 × 5) + &#8230;<br />\n= 1 + 1 &#8211; 1/2 + 1/2 &#8211; 1/3 + 1/3 &#8211; 1/4 + 1/4 &#8211; 1/5 + &#8230;<br />\n= 2</p>\n<p>别忘了， 1 + 1 / 2<sup>2</sup> + 1 / 3<sup>2</sup> + 1 / 4<sup>2</sup> + 1 / 5<sup>2</sup> + &#8230; 是我们把所求的概率值取了倒数后的结果。因此，我们所求的概率值就应该大于 1/2 了。也就是说，这道题目的正确答案是 A 。</p>\n<p>可以证明， 1 + 1 / 2<sup>2</sup> + 1 / 3<sup>2</sup> + 1 / 4<sup>2</sup> + 1 / 5<sup>2</sup> + &#8230; 实际上等于 π<sup>2</sup> / 6 。因此，任意两个正整数互质的概率就是 6 / π<sup>2</sup> ≈ 0.608 。神奇的数学常数 π 经常会出现在一些与圆形八竿子打不着的地方，比如我们之前提过的 Buffon 投针问题。而大家刚才看到互质概率问题，才是我觉得最为经典的例子之一。</p>\n<p>&nbsp;</p>\n<p>这篇文章中的题目是我长期收集而来的。大部分题目都是非常经典的题目，它们可以在 The Colossal Book of Short Puzzles and Problems 、 Mathematical Puzzles: A Connoisseur&#8217;s Collection 、 Mathematical Mind-Benders 、 Problems for Mathematicians, Young and Old 、 40 Puzzles and Problems in Probability and Mathematical Statistics 、 Fifty Challenging Problems in Probability 等书中找到。有些题目是我很早以前就写过的，此处有所改写。部分文字直接摘自《浴缸里的惊叹： 256 道让你恍然大悟的趣题》。</p>\n	3e7c2facb3bb8ef70460e84d22cfb615510fd2ca	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.852298	49	http://www.matrix67.com/blog/archives/6665#comments		'-1':180,251,268,274,279,281,291,297,308,314,315,320,503 '-2':182,208,270,285 '/2':860 '/blog/archives/6015':2067 '/blog/archives/6151':1951 '0':109,125,304,552,563,631,684,728,737,739,767,797,799,856,858,1118,1299,1321,1324,1330,1362,1368,1787,1792,1801,1806,1815,1839,1896,1905,1910,2762,3308,3314,3324,3346,3381,3388,3552,3556,3561,3671,3677,3682,3690,3733,3738,3742,3746 '0.0608':2836 '0.101010':1796 '0.1725':2846 '0.2425':2857 '0.4758':2859 '0.5242':2867 '0.608':4059 '00':880,883,887,890,2763 '1':17,110,126,139,151,153,158,160,178,187,189,201,213,222,230,245,255,266,283,303,305,326,338,345,427,430,437,443,451,467,480,486,488,490,500,511,513,514,516,519,523,525,526,528,531,534,538,541,545,546,554,558,565,571,699,719,730,738,740,769,785,789,798,800,811,816,819,821,830,838,841,956,970,998,1009,1110,1131,1135,1139,1303,1317,1342,1344,1651,1662,1672,1676,1678,1680,1682,1684,1686,1688,1690,1692,1693,1695,1697,1699,1701,1702,1703,1704,1706,1707,1785,1794,1803,1808,1813,1841,1878,1882,1883,1894,1899,1903,1912,2425,2430,2436,2441,2455,2456,2457,2459,2488,2549,2569,2574,2577,2612,2648,2655,2665,2764,2774,2781,2786,2804,2838,2842,2943,2956,3043,3054,3068,3071,3135,3137,3156,3158,3294,3295,3299,3340,3341,3351,3359,3362,3397,3469,3472,3482,3492,3498,3503,3511,3517,3521,3522,3527,3536,3572,3576,3680,3692,3703,3756,3761,3771,3807,3813,3814,3820,3821,3826,3827,3831,3832,3834,3835,3837,3838,3840,3841,3860,3865,3877,3882,3883,3886,3887,3888,3895,3896,3898,3900,3904,3905,3907,3909,3911,3912,3914,3916,3925,3927,3928,3930,3932,3934,3935,3937,3939,3941,3942,3944,3946,3948,3949,3951,3953,3955,3964,3968,3971,3973,3976,3978,3979,3981,3983,3985,3992,3993,3995,3997,3999,4001,4002,4003,4005,4008,4011 '1.142':2363 '1/101':3605,3668,3744,3748 '1/11':438,439,445 '1/2':408,410,417,419,442,444,810,814,818,823,857,1576,1601,1750,1759,1760,1771,2869,2951,3029,3031,3046,3058,3066,3070,3311,3317,3378,3384,3391,3466,3475,3507,3782,3784,3786,3797,3802,4016,4017,4037 '1/3':781,782,950,1117,1641,1821,1832,3260,3406,3439,3461,3547,4018,4019 '1/35':393 '1/36':386 '1/38':2807,2843,2853 '1/4':717,748,750,1761,1772,4020,4021 '1/5':391,418,4022 '1/52':1191,1213,1221,1228 '1/6':384,385,409,411,412,2187,2257,2263,2527 '1/7':392,420 '1/8':1995 '10':63,66,68,71,73,83,103,105,114,371,432,449,569,1058,1271,1284,1356,1364,1366,1375,1399,1435,1451,1465,1489,1611 '100':688,907,962,965,1036,2277,2285,3176,3178,3568,3579,3586,3592,3654,3673,3706,3730,3735 '1000':953,959,1019,1024 '101':1014,1016,1021,1025,1048,1055 '101010':1789 '103':2856 '1037':2353,2364 '104':2845 '105':2789,2793,2821,2835,2841,2851,2872 '11':1154,1454,1469 '11088':121 '12':1229 '1296':2303,2317,2323 '13':33,1269 '1334960':117 '1334961':116 '14':1430 '15':894,898,1602 '16':1952 '1607':2127 '16200':2706,2748 '1650':2162 '17':2151,2601 '18':2476,2755 '180':2468 '1890':122 '19':2887 '2':61,111,192,196,199,205,211,217,228,301,518,530,654,693,786,790,827,829,868,957,1089,1111,1132,1136,1140,1170,1175,1188,1219,1307,1313,1332,1338,1561,1644,1646,1855,2445,2458,2613,2643,2658,2660,2663,2697,2700,2705,2711,2713,2715,2719,2721,2723,2734,2737,2739,2765,2848,2852,2854,2944,3144,3165,3297,3301,3343,3349,3395,3525,3686,3795,3800,3805,3811,3959,3960,3961,3990,4004,4006,4023 '2.245':2352 '2.62':2108 '2/3':1116,1779,1798,1810,1817,1823,1829,1844,1848,1874,2939,2952,2953,3257,3286,3293,3333,3409,3442,3462,3489,3542 '20':2959 '2010':2069 '21':3076 '22':1652,1677,3174,3808,3815,3833,3884,3889,3897,3929,3950,3980,3994,4027,4045 '222480':119 '23':3254 '23400':2749,2752 '24':1663,1679,2173,2198,2338,2348,2356,2367,3399,3899,3931 '240':123 '25':1267,3564 '256':4114 '26':1,8,1264,1673,1681,3750,3901,3933,3969 '28':1683 '2a1a2':1106 '2a2a1':1107 '2aa':1095 '2x':866 '3':112,218,223,233,235,257,328,521,533,958,1071,1112,1133,1137,1141,1149,1309,1311,1334,1336,1708,2011,2449,2460,2584,2590,2614,2650,2653,2670,2680,2682,2684,2766,2828,2830,2863,2865,2945,3818,4007,4009 '3.84':2110 '3/6':2530 '32':3822,3836,3906,3936,3952,3982,3996,4029,4047 '34':3908,3938 '3524':2361 '36':2345,2767,2778,2809,2825,3910,3940 '3624':2350 '3628800':106 '37/38':2834,2844,2855 '38':2759,2771 '38.63':831 '4':219,224,238,240,260,364,447,471,484,1076,1128,1134,1151,1305,1315,1340,1346,1655,1657,1685,1694,1705,1711,2155,2193,2259,2265,2298,2581,2608,2635,2640,2673,2674,2688,2690,2692,2699,2703,2704,2718,2727,2729,2731,2745,2946,3892,4010,4012 '4/5':2971,3018,3020 '40':3958,4095 '402':3965 '42':1687,1696,3954,3984,3998,4031,4049 '43':1689,1698 '44':1691,1700 '45':124 '46656':2631,2753 '49':1143 '49.14':2371 '5':359,361,567,612,656,1138,1290,1297,1301,1319,1326,1328,1378,2588,2615,2947,3824,3962,4013 '5/6':2954,2955 '50':979,984,1144,2326,2373,2380,2903,3202,3230,3248,3253,3594 '50.154321':2754 '51':991,1003,1145,1198,1261 '51.77':2324 '52':30,1061,1127,1146,1157,1205,1232,2079,3828,3839,3913,3943,3956,3974,3986,4000,4033,4051 '53':2536 '54':2309,3915,3945 '55650':120 '56':3917,3947 '57.87':2539 '6':366,608,652,879,886,1142,1665,1667,2158,2176,2182,2184,2190,2195,2204,2207,2219,2227,2255,2261,2270,2273,2280,2283,2295,2307,2315,2334,2341,2359,2369,2427,2490,2516,2560,2563,2565,2598,2603,2617,2627,2638,2669,2672,2679,2687,2696,2702,2710,2726,2924,2948,4054,4057 '6/11':446,619 '6/35':421 '6/6':2275 '625':2311,2318 '63':2533 '63.66':870 '64':2301 '66':2630 '667485':118 '671':2319,2322 '7':702,882,889 '7/16':904 '72':3842 '7200':2675,2747 '8':905,1992,2551 '9':79,95,99,113,951,1403,1407,1412 '93.54':2105 '98':3216,3241 'a':18,23,37,38,42,47,55,77,330,334,348,357,376,381,405,465,476,573,581,585,586,594,603,606,616,671,682,707,876,913,926,933,937,941,960,973,977,995,1034,1046,1053,1066,1069,1073,1078,1082,1087,1098,1100,1114,1120,1124,1162,1165,1167,1178,1180,1186,1195,1201,1209,1211,1217,1224,1247,1274,1431,1440,1444,1463,1473,1474,1512,1533,1538,1543,1549,1554,1559,1566,1571,1580,1586,1590,1593,1597,1629,1636,1716,1721,1727,1731,1736,1743,1746,1753,1765,1953,1967,1975,1976,2007,2035,2046,2056,2059,2063,2085,2100,2103,2418,2606,2622,2797,2819,2913,2921,2961,2967,2981,2988,2995,3007,3024,3038,3050,3095,3113,3191,3198,3265,3319,3416,3477,3565,3582,3584,3590,3610,3622,3646,3650,3753,3790,3793,4041,4081 'a0b':3711 'a0b1b':3718 'a12a2':1104 'a1a0b':3716,3721 'a1a0b2b':3725 'a1a22':1102 'a1a2a0b':3724 'a2':299 'a22a1':1105 'a2a':1094 'a2a12':1103 'a2a1a0b':3723 'aa':3624,3661 'aa2':1093 'aaa':3657 'aaab':3639,3640 'aab':3632,3636,3658 'aabb':3642,3662 'ab':3614,3619,3630 'abb':3634 'an':287,293,295,296,307 'anchor':2481 'and':2480,4077,4093,4097,4101 'antoine':2123,2141 'arccos':865 'b':19,26,41,51,81,92,331,341,351,362,377,388,396,402,414,469,574,588,589,610,624,634,640,644,646,673,679,686,709,714,877,915,920,927,934,939,943,968,981,986,989,996,1000,1001,1027,1039,1042,1074,1168,1249,1255,1276,1432,1442,1467,1476,1477,1492,1496,1501,1510,1516,1519,1523,1531,1536,1541,1547,1552,1557,1564,1569,1578,1582,1584,1588,1631,1717,1723,1756,1954,1971,1978,1979,1984,2009,2023,2028,2030,2048,2053,2057,2092,2106,2610,2799,2815,2915,2962,2968,2982,2992,2996,3009,3025,3040,3052,3099,3108,3193,3267,3320,3418,3478,3566,3588,3611,3626,3647,3651,3758,3791,3798 'bb':3628,3663 'benders':4088 'birdcage':2475 'blaise':2241 'book':4073 'buffon':834,4064 'c':20,24,39,43,45,48,56,60,85,367,473,591,675,711,917,928,935,938,944,1005,1031,1079,1126,1171,1184,1251,1278,1281,1479,1482,1633,1981,2619,2668,2671,2678,2686,2695,2698,2701,2709,2717,2725,2801,2840,2850,2917,2963,2975,2984,2998,3011,3014,3049,3061,3103,3195,3205,3269,3279,3420,3430,3596,3608,3763 'challenging':4105 'chuck':2417 'chuck-a-luck':2416 'collection':4084 'colossal':4072 'connoisseur':4082 'crown':2479 'd':21,27,52,929,936,940,942 'd1':172,302 'd2':173,300 'd3':174 'de':2136,2144,2164,2168,2178,2200,2215,2223,2233,2249,2329,2388,2395,2399,2523 'dn':168,176,179,181,207,250,264,267,269,273,276,278,280,284,288,290,311,313,319 'fifty':4104 'for':4090 'gombaud':2124,2142 'humble':2072 'i':629,632,636,642,650 'in':4099,4107 'k':3696,3698,3702 'ln':828 'luck':2419 'm':336,358,363 'mathematical':4079,4085,4102 'mathematicians':4091 'mind':4087 'mind-benders':4086 'méré':2137,2145,2165,2169,2179,2201,2216,2224,2234,2250,2330,2389,2396,2400,2524 'n':143,145,148,155,163,165,177,204,220,225,244,265,272,277,282,289,309,312,316,318,322,324,343,360,365,495,502,3773,3778 'n2':3926 'nishiyama':2075 'of':4074 'old':4094 'p':478,482,487,489,491,492,501,504,515,517,520,522,527,529,532,535,539,550,559,1023,1738,1740,1767,1770,1773,1775,1778,3027,3030,3032,3033,3042,3044,3055,3056,3067,3069,3072,3073,3075,3120,3124,3133,3136,3138,3140,3141,3143,3145,3155,3160,3163,3166,3168,3171,3281,3292,3296,3300,3304,3307,3310,3313,3316,3323,3336,3338,3342,3345,3348,3354,3432,3434,3452,3456,3460,3465,3468,3471,3474,3481,3491,3497,3502,3510,3846,3851,3858,3861,3868,3873,3878 'p0':3330,3332,3339,3350,3352,3358,3364,3368,3377,3383,3390,3396,3398,3487,3493,3494,3499,3500,3506,3518,3519,3523,3524,3526,3528 'p1':507 'p2':508,3036,3065,3147,3463,3495 'p3':509 'pascal':2242,2243,2290,2392 'pn':497,499,3768,3780 'probability':4100,4108 'problems':4078,4089,4098,4106 'puzzles':4076,4080,4096 'q':3122,3125,3134,3139,3142,3146,3148,3154,3157,3159,3161,3162,3164,3167,3172,3848,3853,3863,3866,3870,3874,3879 'q2':3169 's':4083 'short':4075 'statistics':4103 'steve':2071 'the':4071 'w':622,633,638,639,645 'www.matrix67.com':1950,2066 'www.matrix67.com/blog/archives/6015':2065 'www.matrix67.com/blog/archives/6151':1949 'x':537,542,547,557,561,721,724,734,744,760,773,779,794,805,808,812,815,820,845,852,3535,3551,3555,3560 'x2':543 'x3':544 'y':722,726,735,745,761,765,776,780,795,806,809,813,817,822,848,853,864 'young':4092 'yutaka':2074 'π':859,869,1879,1884,1900,4061 'π2':4053,4058 '一个':2306 '一个数能同时被两个质数':3867 '一个数能被':3857,3862 '一个白色小球会逆着轮盘旋转的方向滚动':2769 '一些更为细致的计算可以告诉我们':2545 '一共会产生':2629 '一张一张翻开':2081 '一斤白酒下肚后':3400 '一旦出现连续三张牌':2082 '一旦出现连续三张牌恰好是黑黑红':2090 '一旦发现这个二进制小数大于':1847 '一旦发现这个二进制小数小于':1843 '一旦抛掷硬币产生出了其中一种序列':2020 '一架客机上有':3175 '一样的错误':2525 '一模一样':2485 '一般认为':2505 '一颗骰子掷出玩家押的数有':2526 '三位导师欣赏了小明的一番激情演唱后':2964 '三张牌的顺序有':1092 '三段木棒能拼成三角形':742,803 '三种':1096 '三颗骰子已经预先装进了这个笼子里':2463 '上一题就相当于是问':3549 '上述三个值加起来约为':2858 '上述两种各占其中的':1994 '上述两种情况的出现概率相同':46,86,474,592,676,712,918,1006,1080,1172,1252,1279,1480,1634,1982,2620,2802,2918,3196,3270,3421,3597,3764 '上述两种情况的获胜概率相同':368 '上面分别写有':955 '上面分别标着':2761 '下一张牌是黑桃':1174,1185 '下一步产生的字符串就是':3715 '下面哪种情况下':355 '下面哪种情况的可能性更大一些':36,76,464,584,670,706,912,994,1068,1164,1246,1472,1974,2796,2912,3581 '下面就是':7 '下面我们来说明':3666 '下面我们证明':1637 '下面是一个不严谨的思路':3328 '下面是另一个有趣的解释':3231 '下面是最常见的一种解法':3788 '下面是黑桃':1218 '下面有':1212 '不再放回':627 '不再进行论证':3373 '不同数字的个数为':2611 '不同数字的个数恰好为':2607,2634,2744 '不妨假设':3023 '不妨假设我在有限步之后将会掉下悬崖的概率为':3431 '不妨假设有':2559 '不妨把一个阿米巴原虫能无限繁殖下去的概率设为':3280 '不妨把这根木棒的长度设为':718 '不妨用符号':2926 '不妨规定':595 '不存在哪个概率大哪个概率小的问题':3224 '不对':2817 '不得不提一位名叫':2122 '不料':2228 '不断从里面取出小球':626 '不断抛掷硬币':1837 '不断抛掷硬币并记录抛掷结果':1893 '不断选择某个字母并把它分裂成两个':3616 '不断重复':667 '不是赌钱':2892 '不知道该如何选择':2977 '不管':3363 '不管什么时候':2025 '不管前':1406 '不管押什么胜率都是一样的':2557 '不管是上述两种情况中的哪种情况':1423 '不过':1372,1957,2003,2143,2211,2542,2553,2890 '不过在这里面':2305 '不过那只是他自封的而已':2133 '不透明的盒子里有':448,568,653,952 '与传统游戏中出现一个':2206 '与原来的游戏本质完全一样':2210 '与原问题中':3649 '且步长保持一致':3413 '世纪':2152 '世纪英国皇家海军的水手间流行过一种叫做':2477 '两个不透明的盒子':332 '两个分割点的位置分别记作':720 '两人为一件小事争执不休':1955 '两人也继续往下取':597 '两人决定采用这样一种方案':1959 '两人各自获胜的概率都是':1600 '两人同盟':25,28 '两人在玩掷硬币游戏':1433 '两人手中囊括了所有的梅花':44,53 '两人手中囊括所有梅花的概率相同':57 '两人手中都没有梅花':40,49 '两人最终能见面的概率有多大':902 '两人玩一个掷硬币游戏':1718 '两人的获胜概率是三比一':2058 '两人约定好晚上':878 '两人轮流从盒子里取球':575 '两人轮流取完所有的小球后':600 '两人轮流抛掷硬币':1719 '两位导师':2969 '两位导师投出赞成票的概率都是':3026 '两位导师独立作出决定':2983 '两位导师独立投出赞成票或反对票':2997 '两位导师都投出赞成票的概率是':3035 '两支球队之间要打':3567 '两支球队各自的获胜概率与它们的经验值成正比':3574 '两支球队打比赛的过程进一步抽象成下面这样':3612 '两支球队最终打成平手的概率也并不会太高':3601 '两支球队的经验值都为':3571 '两支球队经验值增加的模式是完全一致的':3652 '两条线段不相交':916 '两条线段相交':914 '两条线段相交的概率是':949 '两次或者三次':2453 '两次看到的牌的颜色不同':1250 '两次看到的牌的颜色相同':1248 '两段':787,791 '两种字母各半':3664 '两种情况下':378 '两种情况下得到零花钱的概率相同':3104 '两种情况发生的概率是相同的':3603 '两种情况的出现概率是相同的':3321,3479 '两种方案中':3015 '两种方案的晋级概率相同':3012 '两种游戏胜率虽然接近':2378 '两边':2381 '两颗骰子的点数有':2344 '个':2609,2618 '个不同的数字':2641 '个不同的点数':2566 '个人全部入座后':3242 '个人分别赌':2564 '个人排队依次登机':3179 '个人的地址分别写在了':67 '个人的选择':3217 '个信封上':69 '个信封里':74,146,166 '个信封里恰好装对':325 '个反面':1302,1306,1310,1314,1318,1322 '个可以插入的位置':1206 '个好朋友分别写了一封信':64 '个小球':609,613,700 '个小球是白色或者黑色的概率':651 '个座位':3177 '个数':1037,1049 '个数中的一个':2517 '个数产生的':3699 '个数字':2693,2732 '个数字出现了':2649 '个数字各出现了':2654,2659,2664 '个数字究竟是哪':2691,2730 '个数往空中一撒':1056 '个数所产生的':1022 '个数的':1015 '个数里选':1020 '个格子':2760 '个格子中的一个':2772 '个正面':1300,1304,1308,1312,1316,1320 '个比':980,985 '个比较概率大小的问题':2 '个点':908 '个白球':433 '个白球和':450,570,623,655 '个白色小球':372 '个白色小球和':337,344 '个的情况一共有':2746 '个的情况有多少种呢':2636 '个空位中的一个':3704 '个这样的问题':9 '个黑球':428,452,572,625,657 '个黑球和':431 '个黑色小球':339,346 '中':382,389,406,415 '中的一个':2045 '中签的概率是':2806 '中间那个人一定不能太强':3115 '中随机取出两个正整数':3774 '为了保住自己的颜面':1622 '为了保证连续性':3504 '为了同时满足上述三点':3374 '为了吸引玩家':2408 '为了提高得到零花钱的概率':3093 '为了提高晋级的概率':3005 '为了求出上面这个式子的值':3880 '为了算出双方存活的概率':2922 '为了让游戏更加刺激':2906 '为了让游戏过程更刺激':1958 '为了让自己的胜率达到最大':425 '为了说明这一点':1192 '为了追上连续抛掷':2192 '为什么呢':183 '为什么在玩一个明显对赌场更有利的赌博游戏中':2870 '为什么我们可以舍去':3322,3480 '为什么魔术师首次出错更容易错在把正面掷成了反面':1783 '为何不像刚才那样':758 '为偶数时':149 '为奇数时':156 '为第一个分割点在整根木棒上的比例':774 '为第二个分割点在较长的那段木棒上的比例':777 '为这根针与平行线的夹角':849 '为这根针的中心到离它最近的那条直线的距离':846 '举个例子':778 '之一':3643,3719,3726 '之前':2034 '之后':2500,3707 '之间':555,566,770,3693 '之间在公园门口见面':884 '之间的一个数':2428 '之间的二进制小数':1795 '之间的数随机排成一行的另类方法':3674 '之间的随机二进制小数':1842 '之间的随机数':731,1804 '乍看上去':1983 '乘以其余所有括号里的':3975 '乘以第三个括号里的':3972 '乘以第二个括号里的':3970 '也不断押':2225 '也即':2276 '也就是':2302,2310 '也就是在第偶数次抛掷时挂掉的概率':1639 '也就是说':130,896,1449,2540,2592,3227,3606,3617,3714,4039 '也就是说最开始的数字':3737 '也就逐渐走出了皇家海军的圈子':2504 '也必须在':562 '也有可能分别是你和我':2741 '也有可能变成':3633 '也有可能装进了':259 '了':1906,1913,4038 '事实上':680,1222,1282,1734,2039,2645,3602 '事实上也的确如此':3092 '事实上也确实如此':3856 '事实上是相等的':1428 '事实和直觉的出入可能会相当大':2247 '事实情况如何还得看实战':2213 '二进制小数法':1891 '于是':248,292,1768,2791,3290,3458,3829 '于是得到':275,3315,3473 '于是我们用概率论的方法得到公式':512 '于是有':306 '于是这一回':2222 '亏的时候少':2882 '亏的时候往往是亏大钱':2884 '今后盒子里就永远有奇数个黑球':696 '从':3770 '从全体正整数中随机选出两个正整数':3751 '从前往后四张':1123 '从字符串':3613 '从没产生过一对':2358 '从盒子里剩下的纸条中随机取出':969 '从盒子里随机取出':961 '他借用了一个自己笔下的人物形象名称':2134 '他再选个座位坐下':3243 '他发现剩下的空位不是他的':3194 '他发现剩下的空位正好就是他的':3192 '他只好求助当时的大数学家':2240 '他就叫这个人重新去找一个位置':3234 '他就直接输了':1748 '他就随机选一个仍然空着的座位坐下':3188 '他就随机选了一个座位坐下':3183 '他并不是贵族出身':2129 '他很快便意识到':2245 '他没有能力解决这个难题':2238 '他连续赌了':2792 '他选中的座位要么是他自己的':3245 '代替题目中的':3488 '代表反面':1897 '代表正面':1895 '令':286,536,775,844,847 '令人吃惊的是':1182 '以后每一个乘客登机时':3184 '以至于乍看上去整个游戏是完全公平':2413 '任何一张牌都有可能出现在首张':1223 '任意两个正整数互质的概率就是':4056 '众人公认的公平游戏并不公平':2332 '会产生':1385 '会出现':2218 '会出现一个':2293 '会出现一对':2226 '会取到':607 '会得到什么':3923 '伪公平游戏':2405 '似乎是还嫌游戏双方的胜率差异不够惊人':2068 '似乎没有什么不同意这种玩法的理由':1985 '但':1720,2974 '但从整体来看这':2597 '但他仍被允许登机':3181 '但他却有着':2130 '但会输给另外两人':2583 '但你手中只有一枚公正的硬币':1834 '但别忘了这两个序列之间有一个竞争的关系':2018 '但却发现这回不管用了':1360 '但却只能赢来':2808 '但只有':1266 '但同时也会赔给另外三人各':2576 '但在这里':3207 '但它们都是有偶数个正面的情况':1370 '但实际上':3200 '但是':771,1456,1577,1889,2236 '但正好分居':2379 '但游戏规则设计得如此之巧妙':2412 '但赚的时候往往是赚小钱':2883 '但这并不意味着抛掷骰子':2258 '但这并不是成倍地增加':2253 '但这显然是不对的':2278 '但那':2780 '但黑白小球的总数不变':423 '位':992,999,1004 '作为一个业余数学家':2232 '你不妨考虑一个非常极端的情况':1084 '你不知道它的正反两面朝上的概率各是多少':1922 '你会发现':3728 '你刚才翻开的那张牌就不可能在最上面了':1258 '你却能抛掷':1453 '你可以从中随机取出一个小球':455 '你可以像刚才那样':1836 '你可以先扫一遍所有的问题':11 '你可以指定爸爸妈妈的出场顺序哦':3088 '你可以考虑把它加入书签':15 '你将反赢':2444,2448 '你将输掉那':2435 '你就能得到一大笔零花钱':3085 '你干脆直接想成是':1033,1045,1052 '你意识到了吗':1824 '你或许会以为':87,369 '你或许会以为情况':3197 '你或许会觉得':3106 '你或许会说':757 '你或许发现了一个有趣的现象':137 '你或许已经发现了':3512 '你所押的数出现了一次':2452 '你甚至不知道它的哪一面朝上的概率更大':1923 '你的数学直觉怎么样':3 '你的目标是从中取出黑球':453 '你给我们掷出一个':1619 '你能凭借直觉':4 '你获胜的概率为':383,390,407,416 '你获胜的概率将达到':436,441 '你获胜的概率更大一些':356 '你该怎么办呢':1835 '你还会有更惊人的发现':3515 '你都应该在其中一个盒子里只放':426 '你需要先从盒子':347 '例如':975 '依旧有效':1892 '便是一例':2420 '便能实现赚着离开赌场了':2832 '俄罗斯也有俄罗斯的轮盘赌':2889 '俄罗斯轮盘赌可谓是史上最酷的决斗方式':2894 '倍':2012,2266 '倒数第二步用到了无穷等比级数的求和公式':1709 '倒立过来放置即可':2470 '倘若魔术师抛掷硬币没有任何技巧':1625 '借助这一点':1931 '假设一副牌里只有三张牌':1085 '假设两人各自都已经抛掷了':1488 '假设你已经抛掷了':1402 '假设悬崖边是一条直线':3411 '假设我们从全体正整数中随机选出了两个正整数':3789 '假设战胜爸爸的概率是':3119 '假设把':142,162 '假设每个人都只下注':2568 '偶偶':1386 '偶奇':1387 '元':2779,2810,2826 '元也就打水漂了':2787 '元的赌注':2775 '元赌某一个格子':2805 '元钱':2790,2873 '元钱的赌注仍然归赌场':2782 '先取':582,604 '先开枪的人死亡':2914 '先开枪者死':2931,2932,2933,2935 '先开枪者死亡的概率分别为':2950 '先开枪者死亡的概率高达':2938 '先把一副牌中的黑桃':1194 '先把整根木棒砍成':784 '先抛硬币':1728 '先来看一个似乎与此无关的东西':3669 '先随机选择其中一个盒子':398 '全部累加起来的结果应该为':510 '全都装对的可能性很低':88 '全都装错的情况有':167 '六种':1108 '共':1060,1156,1231,3701 '共有':1204 '其中':862,945,1147,2633,2647,2657,2677,2708,3298,3792 '其中一个观众不服气地说':1615 '其中两张是':1086 '其中有':1263 '其中第':227 '其中至少一个阿米巴原虫要无限繁殖下去':3289 '其中装对的信有':108 '其他几项也都变成了':3903 '其他情况下小明都无法晋级':3062 '其他的座位如果没被别人抢占':3213 '其实':1713,2119,2521,2878,3530 '其实这种直觉是错误的':1181 '其实远不需要这么麻烦':1853 '其概率为':3229 '其概率是':3876 '其背后的原因正如刚才所说':136 '其规则与':2483 '具体情况分为两种':1410 '内的所有点':741,801,861 '再下一张牌是黑桃':1166,1169 '再从盒子':350 '再从这个盒子中随机取出一个小球':399 '再决定把这四个点配成怎样的两对':924 '再加上三场都赢了的概率':3131 '再加上皇冠和船锚两种图案':2499 '再把它合上':2898 '再把较长的那段木棒砍成':788 '再把较长的那段木棒随机砍成两段':754 '再次翻开的牌将会等可能地是剩余的':1260 '再逐一阅读答案':12 '再随便选择另外两个点':922 '再随便选择另外两个点连一条线段':910 '写在数字':3681 '写在最左边':3687 '写完':3705 '况且':1996 '几何概型':873 '几轮游戏下来后':1439 '凭借自己的数学知识':2237 '出发':3615 '出现一个':2282 '出现下面哪种情况的可能性更大一些':1273,2605 '出现情况':681,685 '出现的概率很小':3199 '出现至少一次':2272 '分别为':1130 '分类讨论法':1872,1887 '分钟':895 '分钟之后没有看见对方':899 '分钱':2552 '切了一次牌之后':1257 '则':723 '则上面的式子变为了':3490 '则下面哪种情况的可能性更大一些':3752 '则从地上拿一个白球放入盒子':662,664 '则从地上拿一个黑球放入盒子':666 '则将小球放回盒子里':461 '则小明什么也得不到':2784 '则小明赢得':2777 '则应当把两颗骰子抛掷':2197 '则得到零花钱的概率就是':3153 '则得到零花钱的概率等于赢了前两场输了最后一场的概率':3129 '则投出反对票':3003 '则投出赞成票':3001 '则抛掷一枚公正的硬币':2985,2999 '则是两人平手的概率':2111 '则是他对一个赌博游戏的思考':2149 '则晋级与否完全以':2987,2991 '则构成了一个':1800 '则此轮抛掷作废':1869 '则玩家':2091 '则第':479 '则视最终结果为':1865,1907,1914 '则达到目标':458 '刚开始':3533 '刚才的':1890 '初始时':3570 '初始时只有一个阿米巴原虫':3263 '初始时的字符串为':3618 '初始时的那个阿米巴原虫怎样才能无限繁殖下去呢':3282 '初始时盒子里有奇数个黑球':695 '利用定积分可以求出':825 '别忘了':1595,4024 '到':553,564,729,768,881,888,1793,1802,1840,2426,3672,3734,3772 '到第':470,483,1654 '前者一共有':2667 '前者的概率是':1820 '前者的概率是后者的':2186 '剩下的那一封信肯定也装对了':101 '剩下的那个小球是白球':672 '剩下的那个小球是黑球':674 '办法有很多':1925 '加一分':2086 '加上赢了后两场输了第一场的概率':3130 '加强版游戏相当于是重复多次的掷硬币游戏':2096 '包括最左端和最右端在内的':3700 '包括最顶端和最底端在内':1203 '化简的结果是一样的':3074 '升级版':2171 '升级版游戏并不是换汤不换药':2377 '升级版游戏换汤不换药':2209 '即':310,524,1592 '即使上述两种情况出现的概率不相等':1426 '即使把题目中':3019 '即使是这样':2113 '即使有人取到了黑球':596 '即使考虑到这一点':2546 '即使这枚硬币是不公平的':1930 '即把扑克牌随机分成上下两摞':1240 '即此时':1509 '即问题的答案一直都是':3387 '即问题的答案为':3394 '厘米的平行直线':839 '厘米长的针扔到地板上':842 '原因很简单':689 '原因非常简单':93 '原来':2376 '原题则相当于':3331 '去掉一副扑克牌中的大小王':2077 '参与决斗的两个人轮流对准自己的头部扣动扳机':2899 '参加了这个赌博游戏的一个':2170 '又一个非常接近':2372 '又蔓延到了商船和渔船上':2502 '又该怎么办呢':1358 '双方胜负的概率各占':2902 '反':1327,1331,1335,1339,1343,1347,1850,1866,1915,1941 '反出现的概率仍然相等':1369 '反反':1868,2051 '反反正':1964,1989,2000,2016,2033 '反和':1365 '反正':1860,1939,2044 '反正都是':370 '反过来':2313,2861,3809 '反面看作数字':1786 '发生下面哪种情况的可能性更大一些':3190 '取出的大':982 '取出的小':987 '取出的小球不再放回':577 '取到黑色小球即获胜':400 '另外':983,1545,2109,2652,2662 '另外一张是':1088 '只不过这次是比它稍小一些':2375 '只剩一种情况有待分析':1508 '只待':1491 '只有你抛掷出的正面次数严格大于我抛掷出的正面次数':1457 '只有前两次掷出的是':2050 '只有方案':946 '只有这样一种可能':3375 '只比':1548 '只能取到':611 '只要前两次抛掷结果是':2041 '只要掷出了一个正面':2026 '可以看到':127,1395 '可以算出':2365,2941 '可以证明':4042 '可以验证':298 '可是真资格的数学家':2244 '可能就是黑桃':1179 '可能性不大':1010 '可见':2937 '可解得':3306 '号信封':190,193,202 '号信封呢':214 '号信封里':231,236,241,258,261 '各个数字出现的次数只有以下两种可能的分布类型':2646 '合法的区域为':863 '同时把翻开了的牌都丢掉':2087 '同时抛掷':1270,1289,1398,2602,2626 '同时抛掷两颗骰子出现一对':2181 '同时抛掷这两组硬币后':1383 '名玩家同时在玩这个游戏':2561 '名玩家是在赔钱的':2599 '后':35 '后开枪的人死亡':2916 '后开枪者死':2934,2936 '后来':2139,2386 '后者一共有':2694 '后者永远比前者更低':493 '后者的概率是':1822 '后面那类总是属于有奇数个正面的情况':1351 '否则':1540,1556,3187 '呢':2406,3325,3483 '命运':3222 '命运决定了一切':2905 '和':725,1988,1999,2015,2073,3641,3691,3847,3869 '咯':2816 '唯一不同之处只是骰子而已':2486 '唯一的例外':134 '四人玩扑克牌游戏':22 '回到出发点':3448 '回到出发点后':3453 '回到原问题':1354 '回到家得意地要和爸爸妈妈一比高低':3078 '因为':647,764 '因为中间那场输了':3116 '因为他先掷嘛':1733 '因为刚才翻出的首张':1177 '因为前者的问号处可以有更丰富的取值':1153 '因为小明会更多地面对较弱的对手':3110 '因为该掷反面的时候掷出了正面而挂掉的概率':1638 '因此':58,262,394,948,1029,1425,2055,2394,2471,2558,2743,3063,3225,3250,3740,4035,4055 '因此上式中的':560 '因此其中一支球队完胜另一支球队的概率并不会太低':3600 '因此前一个式子一定比后一个式子更大':3173 '因此小明只需要赢':2827 '因此平均下来每个玩家也是在不断输钱的':2600 '因此最后':605 '因此永远不会掉下悬崖的概率是':3520 '因此第':186 '因此这三段木棒能拼成三角形的概率就是':749 '因此这两种情况出现的几率相等':1574 '因而':1382,3803 '因而总的来说':1352 '因而我们要求的概率值就等价地变为了':3653 '因而毫无疑问':2097 '圆周上均匀分布着':906 '在':375,2150,3367 '在一串随机硬币正反序列中出现的频率理论上是相同的':2017 '在一根木棒上随机选择两个点':703 '在以前的游戏中':2214 '在其中一个弹槽中放入一颗子弹':2896 '在出现':2032 '在升级版游戏中出现一对':2203 '在原游戏中':435 '在另一个盒子里放入剩下的':429 '在另一个类似的游戏中莫名其妙地输得四个荷包一样重':2166 '在另外':3441 '在圆周上按此顺序排列':930 '在地板上画一系列间隔为':837 '在情况':380,387,404,413 '在所有':3585,3591 '在抛掷三颗骰子产生的所有':2532 '在改版后的游戏中':440 '在新版游戏中':1487 '在有限步之后掉下悬崖的概率是':3516 '在某些限制条件下模拟出某些特定的概率事件':1945 '在每一代的繁殖中':3255 '在每一场比赛中':3573 '在现今世界里':2403 '在第一种情况和最后一种情况中':1391 '在第二种情况和第三种情况中':1393 '在第偶数次挂掉的概率是':1675 '在纸上写下数字':3676 '在解决这个问题的过程中':2391 '在赌博游戏中':2116 '在转轮的连续三个弹槽中放入子弹':2908 '在这个式子的左右两边同时减去':271 '在这个新游戏中':2098 '在这道题中':2820 '在那些最流行的赌博游戏中':2410 '地上还有足够多的白球和黑球':658 '地位':3219 '场比赛':3569 '场比赛中全部获胜':3587 '场比赛中恰好有':3593 '场比赛全部打完之后':3580 '场获胜':3595 '块':2575,2582,2585,2591 '块但亏':2589 '块钱':2437,2442,2446,2450,2570,2578 '块钱就会让玩家损失大约':2550 '块钱的赌注':2431 '多':1539,1544,1555,1591 '多抛掷一次':1534,1550 '大':1560 '大多数时候玩家都是在赔钱的':2541 '大家或许会开始怀疑':2402 '大家或许想要故技重施':1359 '大约为':2362 '大约是':2351 '大部分题目都是非常经典的题目':4069 '奇偶':1388 '奇奇':1389 '好啊':3080 '如何才能把它当作一枚公正的硬币来使':1924 '如何用一种硬币去模拟另一种硬币':1916 '如果':580,897,976,1495,1500,1518,1522,1726,1745,1752,2027,2637,3845 '如果一个人发现自己的座位被别人占据后':3233 '如果三颗骰子的点数全一样':2586 '如果三颗骰子的点数都不一样':2572 '如果三颗骰子的点数都是你选的数':2447 '如果下一步产生的字符串是':3720 '如果不透明的盒子里有':621 '如果两个小球都是黑色的':353 '如果两次抛掷的结果是':1934,1938 '如果他自己的座位是空着的':3185 '如果你可以自己安排每个小球的位置':422 '如果你在任意连续的两轮比赛中获胜':3084 '如果你想要一枚硬币':1827 '如果你感兴趣的话':10 '如果你手里有一枚不公正的硬币':1921 '如果你把数轴上的点左移右移想成是在悬崖外前进后退':3558 '如果你有本事的话':1618 '如果你还想不明白的话':1032,1044,1051 '如果你选的数出现了两次':2443 '如果先把木棒随机砍成两段':753 '如果其中':98 '如果刚才取出的两个小球是一黑一白':665 '如果刚才取出的两个小球都是白球':661 '如果刚才取出的两个小球都是黑球':663 '如果在前面加一个小数点':1790 '如果它分裂了':3539 '如果它死亡了':3544 '如果小球落入了别的格子里':2783 '如果小球落入了小明所选的格子里':2776 '如果我们把每个阿米巴原虫分裂成两个的概率记作':3329 '如果我们把第':494 '如果我们把规则改为':397 '如果我们抛掷出的正面次数相同':1459 '如果我们要模拟一枚不公正的硬币':1876 '如果我再往前迈一步':3402 '如果我无限地走下去':3414 '如果我最后还是掉下悬崖了':3445 '如果我第一步就往前迈':3436 '如果我随机地将这':70 '如果把两张':1097 '如果把两种甚至更多种不同的硬币组合起来使用':1944 '如果把所有的括号全都展开':3921 '如果抛掷骰子':2279 '如果是':1355,1902,1909 '如果是其他情况':1942 '如果是前者':1965 '如果是后者':1969 '如果是白球':460 '如果是黑球':457 '如果最后一枚硬币是反面':1416,1420 '如果最后一枚硬币是正面':1414,1418 '如果最后盒子里剩了':698 '如果有一颗骰子的点数是你选的数':2438 '如果有两颗骰子点数一样':2579 '如果某一次把':1805,1812 '如果每个人都这么做':2875 '如果用':3486 '如果硬币反面朝上':2990,3002 '如果硬币正面朝上':2986,3000 '如果第':198,210 '如果第一次操作之后的结果是':3635 '如果结果是一正一反':1928 '如果赌':2366 '如果这三颗骰子中都没有你选的数':2434 '如果选中了':3621,3625 '如果采用妈妈':3150 '如果采用爸爸':3126 '妈妈':3097,3100,3102,3127 '妈妈的顺序':3152 '字母':3645 '字符串变成':3656,3660 '它与直线有交点的概率是多少':843 '它们不都能被':3810,3817,3823 '它们互质的概率就是':3830 '它们互质的概率是多少':3775 '它们出现的概率是相等的':1226 '它们可以在':4070 '它们各为':1575 '它们成为最后一个空位的概率是均等的':3226 '它们正好对应了矩形':855 '它们的':3218,3221 '它们要比赛看谁先出现':2019 '它们都等于':1190 '它们都能被':3804 '它占总数的':2751 '它占所有情况的':2321 '它占矩形面积的':867 '它又可以被我们写成':3894 '它小于':3989 '它得分裂为两个阿米巴原虫':3284 '它是一个沙漏形的小铁笼子':2462 '它有':1828,1877 '它的概率与':54 '它的答案是':678 '它等于':1650,1661,1671 '它等于十进制中的':1797 '完全没有翻身的机会':2049 '实际上':102,3277,3428 '实际上等于':4052 '实际情况是':2005 '实际情况究竟如何呢':2004 '容易得出':1642 '容易看出':1422,3244,3644 '容易看到':2095 '对了':3086 '对于任意四个点':925 '对应的两条连线才会相交':947 '对应的赔率分别是':2454 '对玩家而言':2513 '导师则犹豫不决':2976 '封信不在':229,234,239 '封信中':246 '封信也有可能装进了':256 '封信就有':206 '封信正好装进了':200 '封信没有装进':188,212 '封信的情况数':327 '封信的情况数比全都装错的情况数多':159 '封信的情况数比全都装错的情况数少':152 '封信的排列方式一共有':104 '封信装到哪儿去了呢':197 '封信装对':96 '封信装进':72,144,164,323 '封信装进了正确的信封':80 '封信装进了编号分别为':221 '封信都装对了':100 '封信都装进了正确的信封':84 '封的情况数分别为':115 '将除去大小王的':29 '小明一次没赢的概率为':2833 '小明上了几次象棋课':3077 '小明亏着离开了赌场':2800 '小明参加某电视台的选秀节目':2960 '小明应该怎样安排爸爸妈妈的出场顺序':3094 '小明应该选择哪种方案':3006 '小明晋级的概率是相同的':3016 '小明每次可以在任意一个格子上下':2773 '小明深知':3089 '小明的表演征服了':2966 '小明赚着离开了赌场':2798 '小明赢了':2862 '小明走进一家赌场':2756 '小明身上只有':2788 '就不管用了':1888 '就会掉下悬崖':3403 '就会满足':3337 '就只需要把整个沙漏来个':2467 '就可以用所有可能的':851 '就处于了一个非常窘迫的位置':2024 '就把它变成':3623,3627 '就是由等式左边的第一个括号里的':3967 '就是第一个人':3238 '就是这个数列的最后两项':135 '就能做到赚时多亏时少':2874 '就视最终结果为':1845,1849,1936,1940 '就说明掷出的是一个比':1809,1816 '就赢不了了':2031 '就重新再来':1943 '左轮手枪的转轮中有六个弹槽':2895 '平均每赌':2548 '平均算下来':2885 '平局算':1596 '年':2070 '年左右':2163 '年法国西部的一个小城市':2128 '并下':2429 '并不意味着三颗骰子同时抛掷就会有':2529 '并不意味着期望收益为正':2880 '并不是所有游戏都是先下手为强啊':2958 '并且今后每次分裂时':3712 '并在这两个点处下刀':704 '并在这个时间到达公园门口':892 '并把这':65,964 '并看看这张纸条上的数在':972 '并观察它的颜色':456 '庄家':2464 '庄家一方总是会稍占便宜':2411 '庄家会从没猜中点数的四个人那里赢得共':2580 '庄家则会赢':2587 '庄家同时抛掷三颗骰子':2433 '庄家将会从完全没猜中点数的三个人手中各赚':2573 '庄家都不会赔钱':2594 '序列':1997 '序列的概率':1649,1660,1670 '应当是稳赚不赔呀':2520 '度大回旋':2469 '弃掉已翻开的牌后继续':2094 '张':1062,1158,1233 '张牌':34 '张牌中的任何一张':1262 '张牌后':2080 '张牌和你第一次翻开的牌颜色不同':1265 '张牌和你第一次翻开的牌颜色相同':1268 '张牌时出现了第一张':1072,1077 '张牌时出现第一张':1113 '张牌的顺序':1199 '张牌随机分发给四人':31 '张纸条':954,963,971 '张纸条上的数从小到大排成一排':966 '弱者愈弱的过程':3599 '当':154,3357,3376,3382,3389,3505,3578,3777 '当且仅当':743,804 '当且仅当它能被':3872 '当时':2167 '当最后一个人登机时':3189 '当最后一名乘客登机时':3210 '当然':253,1427,1851,2398 '当转轮里位置相连的子弹数分别为':2942 '形如':1148 '很多人可能会认为':1173 '很多人的直觉都是':1007 '很多赌场都提供了':2510 '得一分':2093 '得出一个':1838 '得到':540 '得到的':3977 '必然会先出现':2038 '必须也跟着掷对':1757 '必须在':551 '必须掷出反面':1724 '必须掷出正面':1722 '怎么也会有一半的概率砸中吧':2518 '怎么办呢':2978 '怎么放应该没关系吧':373 '怎样的情况下':1742 '总之':242,3694 '总共会产生':2300 '总是赌':2217 '总的正面个数就是偶数':1415,1421 '总的正面个数就是奇数':1417,1419 '总的正面个数是奇是偶的概率都是相等的':1424 '恰好有':78,94 '恰好比':2325 '恰好赢':2837,2847 '情况就变成了这样':215 '想象':1715 '想象一下':3920 '感兴趣的话不妨去看看':1948 '感到里面有玄机':2235 '我一定回过出发点':3447 '我仍然抛掷':1450 '我们下面就来证明这一点':161 '我们不妨来看一种同样能实现绝对随机的另类洗牌方式':1193 '我们介绍两种方法':1485 '我们会既无遗漏又无重复地得到所有的':3924 '我们便能列出下面这张表':2930 '我们另有奇招':1373 '我们只需要考虑所有':2923 '我们可以令':772 '我们可以使用和上一题类似的思路':3485 '我们可以定量地分析一下':3118 '我们可以巧妙地求出':1739 '我们可以干脆叫他直接站在旁边':3239 '我们可以把同时抛掷':1296 '我们可以把问题等价地修改为':3232 '我们可以证明':715 '我们可以连续抛掷':1854 '我们可以通过一些严格而复杂的计算来说明这一点':3206 '我们姑且假设它正确':3372 '我们完全可以提出一个和刚才的问题正好相反的问题':1920 '我们将会在很后面的几个题目里继续用到这种技巧':1781 '我们就得到了所有数的一个随机排列':3708 '我们就有':263 '我们就有了下面这个方案':1932 '我们应当把两颗骰子连续抛掷':2189 '我们得到':1769,3459 '我们得到式子':3291 '我们慢慢来分析':184 '我们所求的概率值就应该大于':4036 '我们把游戏规则改一下':1447 '我们把这六类情况分成三组':1323 '我们来证明':3988 '我们的问题就是':3275,3426,3776 '我们相当于用一枚公正的硬币':1825 '我们给出一个更加严谨的叙述方法':3766 '我们给出一个这样的解释':1121 '我们考虑它的倒数':3881 '我们还有一种非常帅的方法来说明':1782 '我们还有另一种巧妙的方法':2554 '我们还有另一种更简单的方法来说明':1397 '我们都有三种不同的配对方案':932 '我们需要舍去':3509 '我会抛掷这枚硬币':1606 '我允许你多抛掷一次硬币':1448 '我在有限步之后将会掉下悬崖':3417 '我更愿意给出一些直观的解释':3208 '我每步方向都严格垂直于悬崖边':3412 '我每过一分钟都会往前或者往后迈一步':3404 '我永远不会掉下悬崖':3419 '我的第一步是往后迈的':3444 '我给':62 '我要么在有限步之后掉下悬崖':3424 '我醉醺醺地来到了悬崖边上':3401 '或':2616,3309,3347,3467,3501 '或一对':2294 '或者':1859,1963,3689,3717 '或者从':1018 '或许有些出人意料的是':2919 '战斗民族的赌博方式可不一样':2891 '战胜妈妈的概率是':3121 '战胜妈妈的概率更高':3091 '战胜爸爸的概率更低':3090 '所以':614,697,1599,1674,2813,2860 '所以说':2061 '所以黑球的奇偶性始终保持相同':694 '所占比例大约是':2538 '所在的位置一共有':1125 '所有':82 '所有可能的':733,793 '所有可能的针的位置':850 '所有数字实际上形成了一个':3732 '所用骰子的六个面则是六种不同的图案':2494 '手中的数就排第':990 '手中的数排第':997,1002 '手中的数有':978 '手中的概率更大':617 '才会赢得游戏的胜利':2054 '才会输掉呢':1744 '才是我觉得最为经典的例子之一':4067 '才算你获胜':1458 '扑克牌的黑':2495 '把':506,1283,3559,3670 '把一副洗好的牌':1059,1155,1230 '把上面的式子当作一个关于':3303 '把下面这摞牌叠在上面这摞牌的上面':1241 '把两颗骰子连续抛掷':2172 '把它当作一个关于':1774 '把所有的项全都乘开来':3922 '把数字':3679,3685,3695 '把木棒砍成三段':705 '把正面看作数字':1784 '把硬币换成了两面都是正面的特殊硬币吧':1617 '把第一个分割点和第二个分割点的位置分别记作':759 '把这':1374 '投出反对票':3051 '投出反对票的概率是':3041 '投出赞成票':3039 '投出赞成票的概率是':3053 '投针问题':835,4065 '抛出':1857,1863,1867 '抛掷':2465 '抛掷一颗骰子':2269 '抛掷一颗骰子出现':2254 '抛掷了':1464,1468 '抛掷出反面':1524 '抛掷出正面':1520 '抛掷最后一次了':1493 '抛掷骰子后':2571 '抽了':1035,1047 '抽了一个数':1040 '抽出来':1196 '抽的这个数更有可能排第几':1043 '按此逻辑':2268 '按照约定':1462 '挑战赛开始前':3087 '换句话说':1259,3203 '换成任意正整数':1285 '排中间可能性更大':1011 '排第':1008 '接下来':1605 '掷成了':1807,1814 '提出了上述游戏的一个加强版':2076 '提出了不少概率的基本原理':2393 '提到概率论的诞生':2121 '插回这摞牌中':1202 '支持小明晋级':2973 '放在地上':660 '数列':171 '数列的第二项正好比第一项小':138 '数轴上的点更有可能会在有限步之后到达':3550 '数量增加的模式':3648 '整个儿就没机会了':3117 '整个游戏就可以等价地看作是':599 '整个游戏的前两次硬币抛掷结果就已经决定了两人最终的命运':2040 '整除':3854,3871,3875 '整除和能否被':3852 '整除的概率就是':3806,3812,3819,3825 '整除的概率是':3796,3801,3859,3864 '新的一轮游戏开始了':1461 '新的游戏是公平的':1528 '新的问题突然有了一种非常简单的解法':1295 '方':2498 '方案':3107 '无奈之下':2239 '无妨假设它装进了':191 '无妨想一个更极端的例子':2267 '无论抛掷骰子的结果如何':2593 '无需计算便可看出这个游戏对玩家是不利的':2555 '既然':1530 '时':2949,3360,3379,3385,3392,3508 '时的特例':3334 '是一个有理数':1875 '是两个质数':3849 '是后开枪者死亡概率的两倍':2940 '是多少':630,3365 '是我们把所求的概率值取了倒数后的结果':4034 '是相同的':3223 '是相等的':3220 '显然':1207,1505,1819 '普通骰子的六个面分别是':2487 '更多':1567,1572 '更多就意味着':1581,1587 '更大的数':1811 '更好':3109 '更小的数':1818 '最右边':3688 '最右边那个位置上的数字就是':3741 '最后一个人上来之后':3251 '最后一个人发现剩下的空位正好是他的':3228 '最后一个空位要么就是他的':3211 '最后决定用抛掷硬币的办法来判断谁对谁错':1956 '最后出现在各个位置的概率是均等的':3739 '最后晋级与否则取决于三人中的多数票':3004 '最后的结果除以':2733 '最后结果是':3132 '最后谁抛出的正面更多':1437 '最后这枚硬币的正反都将会起到决定性的作用':1409 '最终':802 '最终也会被它真正的主人占据':3214 '最终总的正面个数是奇是偶的概率也是相等的':1429 '最终正面朝上的硬币数量为偶数':1392 '最终正面朝上的硬币数量为奇数':1394 '最终等概率地落入':2770 '最终输了个精光':2230 '最经典的可能要算下面这个例题':875 '有':1831,1881,3259,3408 '有一个普遍的规律是':141 '有些沮丧':1443 '有些题目是我很早以前就写过的':4110 '有偶数个正面的情况和有奇数个正面的情况将会概率均等地出现':1353 '有可能变成':3631 '有大于':3760 '有没有什么还能玩得到的':2404 '有的玩家亏了':2596 '有趣的是':1294 '本质上就相当于往前净走一步':3449 '本质上相当于先随便选择四个点':923 '来':1741 '来到了轮盘赌跟前':2757 '来表示':3769 '来表示有子弹的弹槽':2927 '来表示空的弹槽':2929 '来说':931 '枚硬币':1272,1291,1379,1404 '枚硬币分成两组':1376 '枚硬币后':1400 '枚硬币抛掷成啥样':1408 '枚硬币的抛掷结果而定':1413 '枚硬币的结果分成六大类':1298 '枚硬币的话':1357 '果断地得出结论':2202 '标准解法之一也用到了这种模型':836 '根据刚才的结论':1380 '根据同样的道理':1215 '根据题目假设':3123 '桌子上有':329 '梅':2497 '检查两组硬币正面朝上的数量分别有多少':1384 '概率不能简单地加加减减':2288 '概率均等地放进由前面':3697 '概率就越低':132 '概率论的诞生本来就和赌博游戏是紧紧联系在一起的':2120 '概率都是':3451 '模拟出了一枚不公正的硬币':1826 '模拟这样一枚不公正的硬币':1852 '次':2156,2174,2191,2271,2339,2644,2651,2656,2661,2666,2685,2716,2724,2794 '次以上':2281,2831 '次以上的概率就是':2866 '次会出现一个':2260 '次则会有':2349 '次取到的是白球的概率都是':637 '次取到的是黑球的概率都是':643 '次就取到了黑球':468 '次就取到黑球的概率为':481 '次就挂了的概率就是前':1645 '次或':2829,2864 '次才取到黑球':472 '次才取到黑球的概率为':485 '次才取到黑球的概率记为':496 '次才挂的概率则是前':1666 '次才挂的概率就是前':1656 '次才行':2199 '次抛掷中':2357 '次抛掷里会出现一对':2368 '次操作之后':3655 '次操作结束后':3731 '次次正面朝上':1613 '次的数和第二个出现了':2738 '次的数字究竟出现在了哪':2683,2714,2722 '次的数有可能分别是我和你':2740 '次的概率为':2839,2849 '次硬币':1436,1452,1455,1466,1470,1490,1612,1856 '次精确地掷出':1647,1658,1668 '次骰子':2299 '次骰子出现一个':2194 '正':1325,1329,1333,1337,1341,1345,1363,1367,1846,1862,1908,1937 '正中间那个位置上的数字就是':3745 '正准备抛掷最后一枚硬币':1405 '正反':1858,1935,2043 '正反反':1962,1987,1998,2014,2037 '正反正反':1620 '正反正反正正':1669 '正反正正':1659 '正好插到了这摞牌的首张':1210 '正好能对号入座的概率也就是':3252 '正好表示把':321 '正正':1648,1864,2042 '正面朝上的硬币个数是奇是偶的概率一样大':1287 '正面朝上的硬币数量为偶数':1275 '正面朝上的硬币数量为偶数的概率大':1292 '正面朝上的硬币数量为奇数':1277 '正面朝上的硬币数量是奇是偶的概率的确相同':1401 '正面朝上的硬币数量是奇是偶的概率相等':1396 '此处有所改写':4111 '此时':1494,1763,1886 '此时小明必然晋级':3037 '此时小明有':3045,3057 '此时玩家联盟的输赢也就足以代表单个玩家的输赢了':2567 '每一次你需要随机选择一个字母':3620 '每一步推理都要有凭有据':2289 '每一组各有':1377 '每一组里的前后两类情况出现的概率总是相同的':1349 '每个人每次只能随机从中取出一个小球':576 '每个人都会从':885 '每个人都只愿意等待':893 '每个人都抛掷':1434 '每个阿米巴原虫都有':3256 '每人获得':32 '每位导师都有':2970 '每天看几个问题':16 '每封信都正好有一个禁放的信封':247 '每封信都装进了一个不同的信封里':75 '每局游戏开始前':2423 '每次':454 '每次从盒子里随机取出两个小球':659 '每次它都将正面朝上':1607 '每次操作后':690 '每次是正是反的概率相同':1626 '每次有':3405 '每组硬币里面出现偶数个正面和出现奇数个正面的概率是相同的':1381 '比':1532 '比如':752 '比如我们之前提过的':4063 '比抛掷一颗骰子出现':2183 '比方说':1919,1926,2248,3957 '比赛分三轮进行':3082 '毕竟':1986 '毫无疑问':2811 '求助概率论是很有必要的':2118 '没想到吧':2623 '没有大于':3755 '没赢的话':2029 '法国有法国的轮盘赌':2888 '法国赌徒间流行着一个赌博游戏':2153 '注意':3843 '注意到':1348,3209,3271,3422 '注意到以下三点':3356 '洗好剩下的':2078 '洗好牌后':1091,1122 '浴缸里的惊叹':4113 '游戏也可以提前结束了':1504 '游戏即宣告结束':2021 '游戏又回到了出发点':1764 '游戏可以提前结束了':1499 '游戏对玩家仍然是不利的':2547 '游戏开始后':2768 '游戏没有任何技巧可言':2904 '游戏结果将完全取决于':1515 '满足一个非常简单的递推关系':175 '满足递推关系式':294 '点':2159,2220,2491 '点会出现确实能让他有机可乘':2335 '点到':2489 '点就有':2316 '点来':2177 '点的情况数则为':2360 '点的概率为':2256 '点的概率似乎就该是':2274 '点的概率分别是多少':2296 '点的概率就会超过':2284 '点的概率就是':2262 '点要困难得多':2185 '点都没有的情况共有':2308 '然后':967,2432,3288,3678,3684 '然后依次翻开每一张牌':1064,1160 '然后再帮':1038 '然后再次翻开最上面的那张牌':1242 '然后套用刚才的面积大法':762 '然后将它背面朝上地放回原处':1238 '然后快速旋转转轮':2897 '然后把一根':840 '然后把黑桃':1200 '然后旋转并合上转轮':2909 '然后继续像这样随机取球':462 '然后说':1604 '然而':505,2112 '然而事实上':90 '然而前面那类总是属于有偶数个正面的情况':1350 '爸爸':3096,3098,3101,3151 '爸爸妈妈将会作为你的对手轮番上场':3083 '爸爸的顺序':3128 '爸爸说':3079 '玩家':2099 '玩家仍然是在不断送钱的':2886 '玩家押的数一次没出现有':2535 '玩家选择':2424 '现在':1507,2509,3709,3919 '球队':3583,3589 '理论上':1471,1973,2911 '甚至是对玩家更有利的':2414 '用三颗骰子掷出':2515 '用于抛掷三颗骰子的装置很有创意':2461 '用符号':2928 '用赌博的行话来说':2451 '由于':602,1546,3170 '由于他不知道他的座位在哪儿':3182 '由于实数':549 '由于每封信都装错了':185 '由于每赢一次会得到':2824 '由于硬币本身是公正的':1573 '由于阴影部分占了总面积的':747 '电脑计算显示':2102 '的':2010,2036,2264 '的一元一次方程':1776 '的一元二次方程':3305 '的下面':1225 '的二进制小数不符':1901 '的优势绝不止是一点':2060 '的优势还会进一步放大':2101 '的位置':3537,3553,3557 '的位置想象成掉下悬崖的位置':3562 '的信封里':226 '的倒数是':3885 '的值不再能独立而均匀地分布在':766 '的值究竟是大于':3781 '的光辉头衔':2132 '的公约数':3757,3762 '的决定为准':2989,2993 '的原因是':2735 '的反面比':1570,1585 '的可能性':1214 '的可能性更大':1176 '的左边或者右边':3683 '的序列出来':1621 '的情况下':3443 '的情况显然比形如':1150 '的情况更多':1152 '的意思就是':783 '的故事多少都有一些杜撰的成分':2401 '的数':2374 '的最后一次抛掷':1517 '的概率':1751,1762,2196,2205,2528,3249,3287,3440,3457,3543,3548 '的概率一样大':1189 '的概率与下一张牌是黑桃':1187 '的概率为':683,687 '的概率也是':1220,3747 '的概率出现此数':2531 '的概率分别是':1115 '的概率分裂成两个':3258 '的概率又是多少':3665 '的概率又是多少呢':2342 '的概率反面朝上':1833 '的概率反面朝上呢':1885 '的概率往前迈一步':3407 '的概率往后迈一步':3410 '的概率投出赞成票':2972 '的概率是':3743 '的概率是均等的':1990 '的概率是多少':3659 '的概率是相等的':2208 '的概率晋级':3047,3059 '的概率正面朝上':1830,1880 '的概率死亡':3261 '的正面和反面不可能都比':1553 '的正面和反面不可能都没':1537 '的正面数量不比':1589 '的正面数量与':1511 '的正面更多':1497 '的正面更少':1502 '的正面比':1565,1579 '的法国作家':2125 '的直觉就是有问题的':2251 '的硬币总数不可能比':1542 '的硬币总数至少比':1558 '的经验是对的':2331 '的结果':2052 '的获胜概率仍然会更大一些':403 '的获胜概率是':2008 '的规则看上去非常诱人':2422 '的赌博游戏':2482 '的赌博项目':2512 '的起源了':2508 '的随机排列':3736 '皇冠和船锚':2478,2493,2503 '盒子':333,340 '直到':2161 '直到其中一方死亡':2900 '直到取出了黑球为止':463 '直到把所有的小球都取光':598 '直到最近三次硬币抛掷结果是':1961 '直到翻出第一张':1065,1161 '直至某次掷出的结果与':1898 '直至盒子里只剩一个小球为止':668 '直觉并不是准确的':2117 '相同':1513 '看上去又是如此对称':2001 '看作是两张不同的':1099 '看来':2287,2328,2957 '看看你猜对了多少':13 '看看谁手中有那个黑球':601 '真正在飞机上跑来跑去不断换座位的人其实只有一个':3237 '真正让他声名远扬的是他的赌博才能':2147 '硬着头皮开始抛掷硬币':1624 '神奇的数学常数':4060 '种':107,169,2312,2750 '种不同的结果':1993 '种具体的情况':2676,2707 '种可能':2304 '种可能的子弹位置即可':2925 '种可能的情况':1129 '种可能的装法':209,252 '种情况':2320,2354,2537,2632 '种情况中':2534 '种排列方案':1017,1026 '种组合':2346 '究竟发生哪种情况的可能性更大':3276,3427 '究竟是多少呢':3355 '究竟等于多少呢':3987 '竟害得我们的':2383 '第':195,216,232,237,254,466,635,641,1643,3729 '第一个乘客把登机牌搞丢了':3180 '第一个出现了':2736 '第一次出错更有可能出在什么地方':1628 '第一次就掷错了':1747 '第一次掷对了':1754 '第一次操作之后':3629 '第一种方案是':2980 '第一种方法如下':1486 '第二种方案中小明晋级的概率为':3064 '第二种方案呢':3034 '第二种方案是':2994 '第二种方法如下':1529 '等书中找到':4109 '等于':618,3783 '等于多少呢':3435 '等他后面的':3240 '等价于':50 '等等':3918 '答案也依旧如此':3022 '答案很简单':1253 '答案是':903,1280 '答案是肯定的':2407 '算出了在新旧两种版本的游戏中':2292 '类似地':620,1653,2089,3149,3816,3902 '精确地等于':1640 '精确地花费':2871 '红':2496 '红色还是黑色':1237,1244 '组合就再一次均匀地对应了正方形':796 '组合就对应了正方形':736 '组合来表示':854 '组成的交集区域里':824 '经常会出现在一些与圆形八竿子打不着的地方':4062 '经验告诉他这能给他带来一些细微的优势':2221 '结束操作':459 '结果你会发现':3236 '结果就会概率均等地变成':3638 '绝大多数时候':128 '继续一张张翻没翻开的牌':2088 '综上所述':1527,1562 '翻到第':1109 '翻开最上面的那张牌':1235 '翻开第':1070,1075 '考虑了游戏中所有可能出现的情况':2291 '考虑到赚钱时玩家有机会成倍地赢钱':2543 '考虑所有':1013 '考虑某个阿米巴原虫':3538 '考虑连续抛掷两次硬币后的结果':1927 '而':317,556,2355,2492 '而不产生下一代':3262 '而事实上':374 '而到第':1664 '而大家刚才看到互质概率问题':4066 '而实际上':1012,3111 '而是赌命':2893 '而由无穷等比级数的求和公式':3890 '而足以让他在历史上留名的':2148 '而这两种情况出现的概率也是相同的':1526 '而魔术师抛掷的硬币序列':1799 '联想前面的讨论':3727 '背面朝上地摞成一摞':1063,1159,1234 '胜':1521 '能出现一对':2340 '能成的原因是':1873 '能被':3794,3799 '自封为':2135 '自己做了一番思考':2180 '自己则在这里坐下':3235 '至于原题为什么选':1119 '至少有一个':2314 '舍去':3312,3470 '舍去前面那个解':3393 '舍去后面那个解':3386 '节目组给出了两种方案供小明选择':2979 '花':2803 '花色依次是红黑黑':2083 '若每次取出黑球的概率为':477 '获得游戏的胜利':587,590,1475,1478,1977,1980 '获胜':1598,1968,1972 '获胜了':1583,1594 '获胜概率怎么看怎么一样':2002 '获胜的概率则只有可怜的':2107 '获胜的概率是':2370 '获胜的概率还真的不一样':379 '获胜的概率高达':2104 '落在了阴影部分':746 '落在由':807 '著名的':833 '虽然':1361,2013 '虽然一轮游戏下来有的玩家赚了':2595 '虽然赚的时候多':2881 '表示两个阿米巴原虫都没能无限繁殖下去的概率':3302 '表示出现了':2681 '表示第一个出现了':2712 '表示第二个出现了':2720 '表示这':2689,2728 '被掷成':1904,1911 '装对':150,157 '装对的信越多':131 '装错一个的可能性则略高一些':89 '要不这样吧':1446 '要么':1563,1568 '要么减':692 '要么就是第一个乘客的':3212 '要么无限地繁殖下去':3274 '要么是最后一个人的':3246 '要么永远不会掉下悬崖':3425 '要想弥补这个减小了的概率':2188 '要想真的掉下去':3454 '要想说服自己这一点':3326 '见本文中的第':1710,3891 '观众听闻后议论纷纷':1608 '视前':1411 '解决它的方法也有很多':1484 '解得':1777,3344,3464,3496 '让我们假设初始时的字符串是':3710 '让我们把':3609 '让我们把这个问题先修改一下':1288 '让我们把阿米巴原虫数量的变化想象成是数轴上不断左右移动的点':3532 '让我们来实际计算一下':2823 '让我们用':3767 '记住这张牌是什么颜色':1236,1243 '设':1735 '该不会你趁我们不注意':1616 '该掷反面的时候掷出了正面':1632 '该掷正面的时候掷出了反面':1630 '说':1445 '说到几何概型':874 '谁先取到那个黑球':578 '谁就获得游戏的胜利':579 '谁就获胜':1438 '谁掷错了谁就立即输掉游戏':1725 '谁的概率小吗':6 '谁输掉的概率更大':1729 '败':1525 '赌':2333 '赌博游戏的胜率常常违反直觉':2624 '赌博风':2501 '赌场岂不是会被搞垮':2876 '赌场想尽各种花样精心设计了一个个迷魂阵一般的赌局':2409 '赌是否会掷出一对':2175 '赌里面是否会出现至少一个':2157 '赚的时候更多':2879 '赢得观众雷鸣般的掌声':1614 '走到这一步有':1758 '趋于无穷时':3779 '轮盘赌是一个赤裸裸的对赌场更有利的赌博游戏':2812 '轮盘赌的转盘上有':2758 '输掉的概率为':1737 '输掉的概率又变回了':1766 '输掉的概率更大':1732 '迅速地判断出谁的概率大':5 '还是为奇数的概率大':1293 '还是小于':3785 '还是更有可能永远都到不了':3554 '还有一个别名':2473 '还能反赢':2440 '这':243,2562 '这一回我们稍微改变一下游戏规则':2907 '这一次':2910 '这一项':3966 '这一题和上一题非常相似':3513 '这三段木棒不能拼成一个三角形':710 '这三段木棒能拼成一个三角形':708 '这三段木棒能拼成三角形的概率是':716 '这不跟游戏对赌场更有利的结论相矛盾吗':2877 '这两个位置会面对':3215 '这两个概率值都是':3667 '这两个正整数不互质':3759 '这两个正整数互质':3754 '这两种情况出现的概率相同':1506 '这两道题的本质就是完全一样的':3531 '这个例子告诉我们':2115 '这个名字便逐渐取代了他的真名':2140 '这个数列里的数都是不断递减的':129 '这个数起到了比较关键的作用':2822 '这个概率是':3201 '这个比例换一换':3021 '这个游戏一直被视为是一个公平的赌博游戏':2160 '这个游戏并不是公平的':2006 '这个游戏看上去也会给人一种公平的错觉':2114 '这个游戏看上去简直是在白送钱':2514 '这个点在':3534 '这个猜测是合理的':3371 '这个直觉确实是准确的':133 '这个答案并不出人意料':1083 '这个答案有一个非常直观的解释':1714 '这个经典的概率问题就被命名为':2387 '这个问题是有意义的':3272,3423 '这个问题的答案显然是':59 '这个问题的答案都不会变':1286 '这个问题的说法很不严谨':3765 '这个题的答案也是':3429 '这个题的答案是':3112 '这个题的答案选':3278 '这个题目的答案为':2920 '这个题目的答案是':395,593,919,1030,1081,1635,3013,3204,3607 '这个题目的答案显然应该是':475 '这个题目的答案竟然是':2621 '这个题目还有很多变种':751 '这个题目选':713 '这也就是':2506 '这人出生于':2126 '这其实就是我们要比较的那两个概率值':3749 '这又有一个':3455 '这取决于':3048,3060 '这各占':3247 '这和从出发点出发最终掉下去了一样':3450 '这四种等概率的组合':1390 '这回计算的工程量就有点大了':2343 '这就变成了一个':1791 '这就是我们想要的答案':1780 '这就是答案':832,871 '这就更荒谬了':2286 '这就构成了':249 '这就瞬间变成这一题的背景了':3563 '这就说明':3318,3476 '这并不是巧合':140 '这是一个强者愈强':3598 '这是一个很赖皮的题目':677 '这是一个非常有趣的话题':1917 '这是一个非常经典的问题':1483,3105 '这是一个非常非常经典的问题':3787 '这是一场真男人游戏':2901 '这是互相独立的':3855 '这是因为':1256,3991 '这是怎么一回事儿呢':2231 '这是根本不可能的':97 '这是犯了和':2522 '这显然是一个没有任何技巧的赌博游戏':2556 '这有':1749,3285,3438,3541,3546 '这本质上相当于把所有的小球随机地排成一排':648 '这样一来':792,2022 '这样就没法推出奇偶两种情况各占一半的结论了':1371 '这样的话':434 '这次他却赔得多赚得少':2229 '这次就不行了':763 '这正是上一题中阿米巴原虫无限繁殖下去的概率的表达式':3529 '这正是无穷等比级数的求和公式':548 '这段时间当中随机挑选一个时间':891 '这毕竟是不严格的直觉思维':2212 '这看似微不足道的差别':2382 '这种':1871 '这种问题的计算不能想当然':2246 '这篇文章中的题目是我长期收集而来的':4068 '这篇文章很长':14 '这背后有一个很简单的直觉':3114 '这能否把输掉的钱赢回来呢':2544 '这被算重了':2742 '这该怎么解呢':756 '这超过了':2868 '这还真不容易':3327 '这道题应该选':2814 '这道题的正确答案其实是':2818 '这道题的答案是':91,1183 '这道题目又是一个经典的例子':2625 '这道题目的正确答案是':4040 '这道题目的正确选项为':2062 '这部分区域的面积占整个正方形面积的':826 '这里':3484 '这里有一个与此相关的问题':1947 '这里有对此游戏更加深入的讨论':2064 '这里用到了一个假设':3844 '这里面的水就更深了':1946 '进一步考察两个问题的答案':3514 '连抛':2347 '连续变化的过程中':3369 '连续抛掷':2297 '连续抛掷一颗骰子':2154 '连续抛掷三次硬币可以产生':1991 '连续抛掷两次硬币':1933 '连续抛掷两颗骰子':2337 '连续抛掷硬币':1960 '选':1254 '选了':1054 '选择第一种方案':3008 '选择第二种方案':3010 '选的那个数将会等可能地出现在各个位置':1028 '道让你恍然大悟的趣题':4115 '那':2785 '那么':170,194,669,732,901,911,988,993,1067,1090,1163,1245,1514,1755,1966,1970,2336,2795,3353,3433,3577 '那么三张牌的顺序有':1101 '那么下面哪种情况的可能性更大一些':3264,3415 '那么不管':628 '那么不管是在原游戏中还是在改版后的游戏中':424 '那么他就在他自己的座位坐下':3186 '那么你不但能收回你的赌注':2439 '那么你就获胜了':354 '那么先正后反和先反后正的概率一定是相同的':1929 '那么再下一步产生的字符串就会是':3722 '那么剩下的':203 '那么在此期间':3446 '那么就有':498 '那么就立即离开':900 '那么当':147 '那么情况':401 '那么数轴上的点会向右移动一个单位':3540 '那么数轴上的点会向左移动一个单位':3545 '那么有的数字出现了至少':2642 '那么玩家':2084 '那么理论上':583 '那么第一种方案中小明晋级的概率显然是':3028 '那么第二次操作之后':3637 '那么等式右边的':3963 '那么能否被':3850 '那么观众要求的目标序列就变成了':1788 '那么阿米巴原虫无限繁殖下去的概率':3335 '那么魔术师无限地抛掷下去':1627 '那也算我获胜':1460 '那他就胜定了':1498 '那他就输定了':1503 '那它必然是黑球':701 '那就直接掉下去了':3437 '那当然是':1730 '那我们来搞一次家庭挑战赛吧':3081 '那玩家起码有一半的时间是在赚钱':2519 '那这就说明':1535,1551 '那里排第几位':974 '部分文字直接摘自':4112 '都在分裂得到的两个字母之间标注这是第几次分裂':3713 '都必胜无疑':2047 '都是':727,3017,3604 '都等于':1227 '都获胜了':1441 '都视最终结果为':1861 '里有':335,342 '里随机取出一个小球':349,352 '里面大有文章可作':1918 '重复多次尝试确实能增大概率':2252 '重头再来':1870 '问帮':1041 '问最后一个落地的数更有可能是排第几的数':1057 '问最后抽出的这个数更有可能排第几':1050 '问第':649 '问这三段木棒能拼成一个三角形的概率是多少':755 '问题':2390 '问题常被认为是概率论的起源':2397 '问题的答案为':3380 '问题的答案也应该发生连续的变化':3370 '问题的答案显然应该为':3361 '问题的答案显然都应该是正数':3366 '阿米巴原虫在有限代之后灭绝':3266 '阿米巴原虫无限地繁殖下去':3268 '阿米巴原虫要么在有限代之后灭绝':3273 '随便选择两个点':921 '随便选择两个点连一条线段':909 '随后获胜一方的经验值将会加':3575 '随机切一次牌':1239 '随机洗牌打乱剩下':1197 '需要投票决定小明能否晋级':2965 '颗骰子':2604,2628 '颗骰子里只有':2639 '题':1712,3893 '题目的答案是':1481 '首先':3283,3675 '首张':1216 '马失前蹄':2385 '骑士':2131,2138,2384 '骑士并没有凭借自己的文学作品名扬天下':2146 '骰子':2466 '骰子掷好运':2415,2421,2472,2484,2507,2511 '高中数学课本把这种解决概率问题的模型叫做':872 '高出那么一点点':2327 '魔术师只好把那枚正常的硬币变回手中':1623 '魔术师把一枚正常的硬币展示给观众看':1603 '魔术师趁机迅速地把这枚正常的硬币换成了一枚两面都是正面的硬币':1609 '魔术师连掷':1610 '鸟笼':2474 '黑桃':1208 '黑球在':615 '黑球的数量要么不变':691	en	admin
1005	Show HN: My GitHub Readme Is Interactive	{"ver":2,"uid":1,"hash":"SHA1:8a5eccde26f16e2ccdfbd817809947edfed5616f"}	https://github.com/veggiedefender/typing	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24370296"> https://news.ycombinator.com/item?id=24370296 </a>	8151a6f0c9619e71a2b1edc5fd03244dd106fe0d	\N	f	2020-09-07 00:10:00	2020-09-07 13:10:13.772315	0			'/item?id=24370296':11 'comment':8 'github':4 'hn':2 'interact':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24370296':9 'readm':5 'show':1	zh	eat_veggies
1008	Libvirt – The Unsung Hero of Cloud Computing (2013)	{"ver":2,"uid":1,"hash":"SHA1:2a9cf6e71d8e3d8dfc66c46a2921e36e1e4af498"}	https://vyomtech.com/2013/12/17/libvirt_the_unsung_hero_of_cloud_computing.html	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24370966"> https://news.ycombinator.com/item?id=24370966 </a>	c9c596887f22fbc60206c411c7e5f9bc3418f5e6	\N	f	2020-09-07 00:10:00	2020-09-07 02:10:14.651149	0			'/item?id=24370966':12 '2013':8 'cloud':6 'comment':9 'comput':7 'hero':4 'libvirt':1 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24370966':10 'unsung':3	zh	vikrantrathore
125	Dgraph, GraphQL, Schemas, and CRUD	{"ver":2,"uid":1,"hash":"SHA1:0c470bfba84a1b8e7564ac47d81167cdeda2e1e9"}	https://www.ardanlabs.com/blog/2020/05/dgraph-graphql-schemas-crud.html	2020-05-15 00:00:00	Introduction In most of the reviews for this post, I was asked why choose a graph database over something else? This is a hard question to answer since my experience right now is limited on the graph database side. My guess is you’re wondering the same thing, so this is my best answer to date.\nAt this point in my career, I would only choose a relational database if I was writing financial software.	c7cb61930eec20cb2643926eb345de756d980dcf	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.393255	0			'answer':32,59 'ask':17 'best':58 'career':67 'choos':19,71 'crud':5 'databas':22,43,74 'date':61 'dgraph':1 'els':25 'experi':35 'financi':79 'graph':21,42 'graphql':2 'guess':46 'hard':29 'introduct':6 'limit':39 'point':64 'post':14 'question':30 're':49 'relat':73 'review':11 'right':36 'schema':3 'side':44 'sinc':33 'softwar':80 'someth':24 'thing':53 'wonder':50 'would':69 'write':78	en	
651	Lucene 索引文件的读取（十一）：tim&&tip	{"ver":2,"uid":1,"hash":"SHA1:4473396b90691bc111710df8e8c5f5fc1140320c"}	https://toutiao.io/k/27b6brl	2020-08-26 08:10:11	Lucene 索引文件的读取（十一）：tim&&tip	d9053f402a9eb16206d21fc5a14458e6d1b990b7	\N	f	2020-08-26 08:10:00	2020-08-27 00:10:12.085834	0			'lucene':1,6 'tim':4,9 'tip':5,10 '十一':3,8 '索引文件的读取':2,7	zh	
165	Design Philosophy On Logging	{"ver":2,"uid":1,"hash":"SHA1:1d3ef9b5becf513b75449e612e42f034c296dbe7"}	https://www.ardanlabs.com/blog/2017/05/design-philosophy-on-logging.html	2017-05-10 00:00:00	Prelude This post is part of a series designed to make you think about your own design philosophy on different topics. If you haven’t read the following post yet, please do so first:\nDevelop Your Design Philosophy\nIntroduction Systems cannot be developed assuming that human beings will be able to write millions of lines of code without making mistakes, and debugging alone is not an efficient way to develop reliable systems.	19b0b2145c7029aebbe93263faa97c7d42b0bdb3	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.474716	0			'abl':54 'alon':67 'assum':48 'be':51 'cannot':45 'code':61 'debug':66 'design':1,13,21,41 'develop':39,47,74 'differ':24 'effici':71 'first':38 'follow':32 'haven':28 'human':50 'introduct':43 'line':59 'log':4 'make':15,63 'million':57 'mistak':64 'part':9 'philosophi':2,22,42 'pleas':35 'post':7,33 'prelud':5 'read':30 'reliabl':75 'seri':12 'system':44,76 'think':17 'topic':25 'way':72 'without':62 'write':56 'yet':34	en	
650	Heyyyyyyyyyyyy.com	{"ver":2,"uid":1,"hash":"SHA1:67f36e2eab29695fbd7331ebc0a9bbaeebd3a1bc"}	https://heyyyyyyyyyyyy.com/	2020-08-26 08:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24279093"> https://news.ycombinator.com/item?id=24279093 </a>	d05d9b06b4ac4d7164398c9e01f5f1b8d1a32b54	\N	f	2020-08-26 08:10:00	2020-08-29 04:10:17.708519	0			'/item?id=24279093':5 'comment':2 'heyyyyyyyyyyyy.com':1 'news.ycombinator.com':4 'news.ycombinator.com/item?id=24279093':3	zh	thesephist
526	Build tools around workflows, not workflows around tools	{"ver":2,"uid":1,"hash":"SHA1:dd87ed25cb4d8d54abc0dddbd2fdfa3554452116"}	https://thesephist.com/posts/tools/	2020-08-23 01:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24244329"> https://news.ycombinator.com/item?id=24244329 </a>	333b70184a59e0e3a016ddd20f740b81de3992a7	\N	f	2020-08-23 01:10:00	2020-08-25 22:10:10.511762	0			'/item?id=24244329':12 'around':3,7 'build':1 'comment':9 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24244329':10 'tool':2,8 'workflow':4,6	zh	thesephist
147	Goroutine Leaks - The Abandoned Receivers	{"ver":2,"uid":1,"hash":"SHA1:bee43c3cf1df7a8d5000f0c74ee92b078f520e12"}	https://www.ardanlabs.com/blog/2018/12/goroutine-leaks-the-abandoned-receivers.html	2018-12-19 00:00:00	Introduction Goroutine Leaks are a common cause of memory leaks in Go programs. In my previous post, I presented an introduction to Goroutine leaks and provided one example of a common mistake that many Go developers make. Continuing that work, this post presents another scenario on how Goroutines could be leaked.\nLeak: The Abandoned Receivers For this leak example you will see multiple Goroutines blocked waiting to receive values that will never be sent.	9fb815f462145b55fba901bbde4ea3bf802443bd	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.439827	0			'abandon':4,59 'anoth':49 'block':70 'caus':12 'common':11,36 'continu':43 'could':54 'develop':41 'exampl':33,64 'go':17,40 'goroutin':1,7,28,53,69 'introduct':6,26 'leak':2,8,15,29,56,57,63 'make':42 'mani':39 'memori':14 'mistak':37 'multipl':68 'never':77 'one':32 'post':22,47 'present':24,48 'previous':21 'program':18 'provid':31 'receiv':5,60,73 'scenario':50 'see':67 'sent':79 'valu':74 'wait':71 'work':45	en	
649	Gallup: 81% of Black Americans Want Police to Retain Local Presence	{"ver":2,"uid":1,"hash":"SHA1:b84edb4c730d72a558b45619e33ddd3768a139a5"}	https://news.gallup.com/poll/316571/black-americans-police-retain-local-presence.aspx	2020-08-26 08:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24275500"> https://news.ycombinator.com/item?id=24275500 </a>	1290b99de6ee1f4b761e66dcf563731370e1bf87	\N	f	2020-08-26 08:10:00	2020-08-29 04:10:17.72873	0			'/item?id=24275500':15 '81':2 'american':5 'black':4 'comment':12 'gallup':1 'local':10 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24275500':13 'polic':7 'presenc':11 'retain':9 'want':6	zh	apsec112
795	Do we really travel through time with the speed of light?	{"ver":2,"uid":1,"hash":"SHA1:0af49a8b62806978bec01c53dbe2bcc2c366a634"}	https://backreaction.blogspot.com/2020/08/do-we-really-travel-through-time-with.html	2020-08-31 16:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24328617"> https://news.ycombinator.com/item?id=24328617 </a>	3bfcb4c658ff2b326322a1af1a990bfca632ba3e	\N	f	2020-08-31 16:10:00	2020-09-03 18:10:09.097045	0			'/item?id=24328617':15 'comment':12 'light':11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24328617':13 'realli':3 'speed':9 'time':6 'travel':4	zh	laurex
384	If founders treated their investors the same way they treated their employees	{"ver":2,"uid":1,"hash":"SHA1:3e956a314bd8fca1f894b45ccc5c8b7df6c706be"}	https://software.rajivprab.com/2020/08/18/if-founders-treated-their-investors-the-same-way-they-treated-their-employees/	2020-08-18 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24198228"> https://news.ycombinator.com/item?id=24198228 </a>	9d47ceebe2d6289969a5fc1409fd32ff21d39fd5	\N	f	2020-08-18 17:10:00	2020-08-21 06:10:09.897371	0			'/item?id=24198228':16 'comment':13 'employe':12 'founder':2 'investor':5 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24198228':14 'treat':3,10 'way':8	zh	whack
910	Small nuclear reactors: tiny NuScale reactor gets safety approval	{"ver":2,"uid":1,"hash":"SHA1:fe4219c1d549fc640d67a0202501abd29be587dd"}	https://www.popularmechanics.com/science/a33896110/tiny-nuclear-reactor-government-approval/	2020-09-04 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24358850"> https://news.ycombinator.com/item?id=24358850 </a>	da363bed675e95031f65a8382280b8552555c076	\N	f	2020-09-04 00:10:00	2020-09-06 22:10:10.315898	0			'/item?id=24358850':13 'approv':9 'comment':10 'get':7 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24358850':11 'nuclear':2 'nuscal':5 'reactor':3,6 'safeti':8 'small':1 'tini':4	zh	natcombs
911	The First Randomized Controlled Trial on Vitamin D and Covid-19	{"ver":2,"uid":1,"hash":"SHA1:5a5f008a2fb25dffc23fcf929ec99309ab8ea3f5"}	https://www.sciencedirect.com/science/article/pii/S0960076020302764	2020-09-04 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24366006"> https://news.ycombinator.com/item?id=24366006 </a>	8e361636759b780785ec672f188a6048344dd583	\N	f	2020-09-04 00:10:00	2020-09-06 22:10:10.333933	0			'-19':11 '/item?id=24366006':15 'comment':12 'control':4 'covid':10 'd':8 'first':2 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24366006':13 'random':3 'trial':5 'vitamin':7	zh	wavepruner
156	Focus On Being Precise	{"ver":2,"uid":1,"hash":"SHA1:6407df212ea4189000f3d8863838236a1af6b2e5"}	https://www.ardanlabs.com/blog/2018/02/focus-on-being-precise.html	2018-02-20 00:00:00	Introduction I was guided for many years to write functions that are generalized and to create layers upon layers of abstraction so things don’t break as business requirements change. That the cost of breaking a function signature, for example, is expensive and something that should be avoided. Therefore, write functions that take more generic parameters or hide things in a receiver or context to be less prone to breakage.	1fcd323b7bf10e913d0518e6389de7567302f6d8	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.457351	0			'abstract':25 'avoid':52 'break':30,39 'breakag':74 'busi':32 'chang':34 'context':68 'cost':37 'creat':20 'exampl':44 'expens':46 'focus':1 'function':14,41,55 'general':17 'generic':59 'guid':8 'hide':62 'introduct':5 'layer':21,23 'less':71 'mani':10 'paramet':60 'precis':4 'prone':72 'receiv':66 'requir':33 'signatur':42 'someth':48 'take':57 'therefor':53 'thing':27,63 'upon':22 'write':13,54 'year':11	en	
459	Rideshare operations are being suspended in California	{"ver":2,"uid":1,"hash":"SHA1:71943f0d1f32b02500076d2b8aa08c311b76959e"}	https://www.lyft.com/blog/posts/ca-operations-update	2020-08-20 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24224882"> https://news.ycombinator.com/item?id=24224882 </a>	3dfa16488363b5d3bdc676ab1111a3bf778a058c	\N	f	2020-08-20 19:10:00	2020-08-24 01:10:07.571504	0			'/item?id=24224882':11 'california':7 'comment':8 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24224882':9 'oper':2 'rideshar':1 'suspend':5	zh	el_duderino
430	Apple becomes first U.S. company to reach a $2T market cap	{"ver":2,"uid":1,"hash":"SHA1:241a49209c432df826534b5fedc8e447140c0b3a"}	https://www.cnbc.com/2020/08/19/apple-reaches-2-trillion-market-cap.html	2020-08-19 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24210991"> https://news.ycombinator.com/item?id=24210991 </a>	933ed758ce41da923cc6226dc4d3d0c4a6ddeaf8	\N	f	2020-08-19 19:10:00	2020-08-24 01:10:07.600634	0			'/item?id=24210991':15 '2t':9 'appl':1 'becom':2 'cap':11 'comment':12 'compani':5 'first':3 'market':10 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24210991':13 'reach':7 'u.s':4	zh	drocer88
725	Surprising new feature in AMD Ryzen 3000	{"ver":2,"uid":1,"hash":"SHA1:d7d432455573b0b55ce16fb189654695cc46eda2"}	https://www.agner.org/forum/viewtopic.php?t=41	2020-08-28 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24302057"> https://news.ycombinator.com/item?id=24302057 </a>	aff656f574b26ae9a92e8b31caa5e8ce889ba3df	\N	f	2020-08-28 19:10:00	2020-08-31 18:10:10.95065	0			'/item?id=24302057':11 '3000':7 'amd':5 'comment':8 'featur':3 'new':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24302057':9 'ryzen':6 'surpris':1	zh	diffuse_l
172	Avoid Interface Pollution	{"ver":2,"uid":1,"hash":"SHA1:c4e0794b577541700b3e6a7b3f51e5b4a584acff"}	https://www.ardanlabs.com/blog/2016/10/avoid-interface-pollution.html	2016-10-21 00:00:00	Introduction Interfaces should only be used when their added value is clear. I see too many packages that declare interfaces unnecessarily, sometimes just for the sake of using interfaces. The use of interfaces when they are not necessary is called interface pollution. This is a practice I would like to see questioned and identified more in code reviews.\nCode Example Let’s look at a code example that contains questionable design choices that raise flags for interface pollution.	7019e94c6737169eb5f05b521648ac44df25cd3e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.487823	0			'ad':12 'avoid':1 'call':43 'choic':75 'clear':15 'code':60,62,69 'contain':72 'declar':22 'design':74 'exampl':63,70 'flag':78 'identifi':57 'interfac':2,5,23,32,36,44,80 'introduct':4 'let':64 'like':52 'look':66 'mani':19 'necessari':41 'packag':20 'pollut':3,45,81 'practic':49 'question':55,73 'rais':77 'review':61 'sake':29 'see':17,54 'sometim':25 'unnecessarili':24 'use':9,31,34 'valu':13 'would':51	en	
541	US Border Patrol says they can create central repository of traveler emails	{"ver":2,"uid":1,"hash":"SHA1:c211dc21273f2eebd71c76c6dc0eb07c07f4f307"}	https://viewfromthewing.com/us-border-patrol-says-they-can-create-central-repository-of-traveler-emails-keep-them-for-75-years/	2020-08-24 01:10:07	Comments: <a href="https://news.ycombinator.com/item?id=24252683"> https://news.ycombinator.com/item?id=24252683 </a>	37cca61b71db40cb7b85aee57771e417e6ecb0c4	\N	f	2020-08-24 01:10:00	2020-08-27 20:10:10.201854	0			'/item?id=24252683':16 'border':2 'central':8 'comment':13 'creat':7 'email':12 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24252683':14 'patrol':3 'repositori':9 'say':4 'travel':11 'us':1	zh	hispanic
163	Language Mechanics On Escape Analysis	{"ver":2,"uid":1,"hash":"SHA1:bbd984c94aceafe5725e17590de863430d3799fa"}	https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html	2017-05-26 00:00:00	Prelude This is the second post in a four part series that will provide an understanding of the mechanics and design behind pointers, stacks, heaps, escape analysis and value/pointer semantics in Go. This post focuses on heaps and escape analysis.\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics	79420276288c84a76d2464f3818d5e7da45e0dc7	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.470973	0			'1':52 '2':59 '3':65 '4':71 'analysi':5,32,45,64 'behind':27 'data':75 'design':26,72 'escap':4,31,44,63 'focus':40 'four':14,49 'go':37 'heap':30,42 'index':46 'languag':1,53,60,66 'mechan':2,24,54,61,67 'memori':69 'part':15,50 'philosophi':73 'pointer':28,58 'post':11,39 'prelud':6 'profil':70 'provid':19 'second':10 'semant':35,77 'seri':16,51 'stack':29,56 'understand':21 'value/pointer':34	en	
166	Package Oriented Design	{"ver":2,"uid":1,"hash":"SHA1:29b66cfa5fcfe81886ca12f612aeff92fe228079"}	https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html	2017-02-24 00:00:00	Updated on February 28th, 2017\nPrelude This post is part of a series of posts designed to make you think about your own design philosophy on different topics. If you haven’t read these posts yet, please do so first:\nDevelop Your Design Philosophy\nDesign Philosophy On Packaging\nIntroduction Package Oriented Design allows a developer to identify where a package belongs inside a Go project and the design guidelines the package must respect.	274c01379ac91f8b5e34b70a72e69144ce5e267b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.47651	0			'2017':8 '28th':7 'allow':56 'belong':64 'design':3,19,27,46,48,55,71 'develop':44,58 'differ':30 'februari':6 'first':43 'go':67 'guidelin':72 'haven':34 'identifi':60 'insid':65 'introduct':52 'make':21 'must':75 'orient':2,54 'packag':1,51,53,63,74 'part':13 'philosophi':28,47,49 'pleas':40 'post':11,18,38 'prelud':9 'project':68 'read':36 'respect':76 'seri':16 'think':23 'topic':31 'updat':4 'yet':39	en	
173	Reducing Type Hierarchies	{"ver":2,"uid":1,"hash":"SHA1:96674785aa1e7bdafa2b7727dcf700998abf98f4"}	https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html	2016-10-09 00:00:00	Introduction I see a lot of developers coming to Go from object oriented programing languages such as C# and Java. Because these developers have been trained to use type hierarchies, it makes sense for them to use this same pattern in Go. However, there are aspects of Go that don’t allow type hierarchies to provide the same level of functionality they do in other object oriented programming languages. Specifically, the concepts of base types and subtyping don’t exist in Go so type reuse requires a different way of thinking.	a5904130e63d040fc224985eb6197658077dcaf7	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.489646	0			'allow':55 'aspect':49 'base':77 'c':21 'come':11 'concept':75 'develop':10,26 'differ':91 'exist':83 'function':64 'go':13,45,51,85 'hierarchi':3,33,57 'howev':46 'introduct':4 'java':23 'languag':18,72 'level':62 'lot':8 'make':35 'object':15,69 'orient':16,70 'pattern':43 'program':17,71 'provid':59 'reduc':1 'requir':89 'reus':88 'see':6 'sens':36 'specif':73 'subtyp':80 'think':94 'train':29 'type':2,32,56,78,87 'use':31,40 'way':92	en	
583	A tale of webpage speed, or throwing away React	{"ver":2,"uid":1,"hash":"SHA1:228391160ca34be37cd465cbf029fe0784b35fdc"}	https://solovyov.net/blog/2020/a-tale-of-webpage-speed-or-throwing-away-react/	2020-08-24 23:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24258855"> https://news.ycombinator.com/item?id=24258855 </a>	f8663f78c95677bb9dd4ca5c3c208b0679686783	\N	f	2020-08-24 23:10:00	2020-08-27 20:10:10.214232	0			'/item?id=24258855':13 'away':8 'comment':10 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24258855':11 'react':9 'speed':5 'tale':2 'throw':7 'webpag':4	zh	todsacerdoti
500	Chromium's Impact on Root DNS Traffic	{"ver":2,"uid":1,"hash":"SHA1:d0c2f16dc4d3f3dae618343ed8224cb14c2c5be1"}	https://blog.apnic.net/2020/08/21/chromiums-impact-on-root-dns-traffic/	2020-08-21 15:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24231857"> https://news.ycombinator.com/item?id=24231857 </a>	1e834aec018a397775ad1d533bd8ca3dde34cce1	\N	f	2020-08-21 15:10:00	2020-08-25 22:10:10.520782	0			'/item?id=24231857':11 'chromium':1 'comment':8 'dns':6 'impact':3 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24231857':9 'root':5 'traffic':7	zh	jakob223
912	Nothing can now be believed which is seen in a newspaper (1807)	{"ver":2,"uid":1,"hash":"SHA1:97c853a5d3a26917eb7fc296d0464890f03b61a8"}	https://press-pubs.uchicago.edu/founders/documents/amendI_speechs29.html	2020-09-04 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24361744"> https://news.ycombinator.com/item?id=24361744 </a>	85860f14756ad33efd1e54f4362549f9d98b3c43	\N	f	2020-09-04 00:10:00	2020-09-06 22:10:10.366424	0			'/item?id=24361744':16 '1807':12 'believ':5 'comment':13 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24361744':14 'newspap':11 'noth':1 'seen':8	zh	apsec112
652	Want people to do the right thing? Save them the guilt trip	{"ver":2,"uid":1,"hash":"SHA1:8036358652a843741f0ca35c10c0de996342442e"}	https://psyche.co/ideas/you-want-people-to-do-the-right-thing-save-them-the-guilt-trip	2020-08-26 13:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24277190"> https://news.ycombinator.com/item?id=24277190 </a>	9ea7638a184dd2bd96f289e13e28bbc500b11b0f	\N	f	2020-08-26 13:10:00	2020-08-29 04:10:17.762465	0			'/item?id=24277190':16 'comment':13 'guilt':11 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24277190':14 'peopl':2 'right':6 'save':8 'thing':7 'trip':12 'want':1	zh	canada_random1
436	[推荐] 多图详解！10 大高性能开发核心技术	{"ver":2,"uid":1,"hash":"SHA1:e0788c058fbcfee8aafd6da0a70214a13ee03858"}	https://toutiao.io/k/iqokf55	2020-08-23 20:10:08	[推荐] 多图详解！10 大高性能开发核心技术	87da411eb002b4d998d878f1011c7fe66e658ec6	\N	f	2020-08-19 22:10:00	2020-09-03 12:10:10.764957	0			'10':3,7 '多图详解':2,6 '大高性能开发核心技术':4,8 '推荐':1,5	zh	
170	Video: Design Philosophy in Go	{"ver":2,"uid":1,"hash":"SHA1:574497264f526557d9ff36322c8fea220959f69f"}	https://www.ardanlabs.com/blog/2016/12/developing-a-design-philosophy-in-go.html	2016-12-05 00:00:00	This is a talk that I gave at the Vancouver Meetup on November 29th, 2016. The talk covers topics around developing your own design philosophy with a focus on decoupling from change. These are things I cover extensively in the Ultimate Go Classes.\nHere is the material that is covered in the talk. Review the Grouping and Decoupling topics.	7dbeb6f167c5985a15058b4f55bbbc595c15548b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.484057	0			'2016':20 '29th':19 'around':25 'chang':37 'class':48 'cover':23,42,55 'decoupl':35,63 'design':2,29 'develop':26 'extens':43 'focus':33 'gave':12 'go':5,47 'group':61 'materi':52 'meetup':16 'novemb':18 'philosophi':3,30 'review':59 'talk':9,22,58 'thing':40 'topic':24,64 'ultim':46 'vancouv':15 'video':1	en	
726	Show HN: Visualize Data Structures in VS Code	{"ver":2,"uid":1,"hash":"SHA1:ba84ea70bfdd4f0260530634ebf8a61698ef9898"}	https://github.com/hediet/vscode-debug-visualizer/tree/master/extension	2020-08-28 20:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24304623"> https://news.ycombinator.com/item?id=24304623 </a>	669a2de42a3d959a065b2b44ec4316ed0c5903a3	\N	f	2020-08-28 20:10:00	2020-08-31 18:10:10.93731	0			'/item?id=24304623':12 'code':8 'comment':9 'data':4 'hn':2 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24304623':10 'show':1 'structur':5 'visual':3 'vs':7	zh	Gehinnn
913	[推荐] [译] 10 个最有用的 git log 技巧	{"ver":2,"uid":1,"hash":"SHA1:87b22edb6e759dc54e93994fc5928d6726f172ae"}	https://toutiao.io/k/cix73fs	2020-09-07 17:10:10	[推荐] [译] 10 个最有用的 git log 技巧	3e1e5e5cb9ca0dad952748386ee276926d8168f0	\N	f	2020-09-04 01:10:00	2020-09-10 05:10:14.655821	0			'10':3,10 'git':5,12 'log':6,13 '个最有用的':4,11 '技巧':7,14 '推荐':1,8 '译':2,9	zh	
914	AutoExcel：一款基于 POI 的 Excel 导入导出利器	{"ver":2,"uid":1,"hash":"SHA1:ea451e942706f019dd049879548096eca641e387"}	https://toutiao.io/k/q3tnr1b	2020-09-04 01:10:09	AutoExcel：一款基于 POI 的 Excel 导入导出利器	2d05fb99f682c4c84d32a12676ff15a888ddea4f	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.919908	0			'autoexcel':1,7 'excel':5,11 'poi':3,9 '一款基于':2,8 '导入导出利器':6,12 '的':4,10	zh	
588	你用对锁了吗？浅谈 Java “锁” 事	{"ver":2,"uid":1,"hash":"SHA1:46eb1c1edf0483e0640f13374ec933950bd94687"}	https://toutiao.io/k/76o97ha	2020-08-25 01:10:11	你用对锁了吗？浅谈 Java “锁” 事	3f852bc8191e941f8b5f0f587d9acfab209d4c2b	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.770774	0			'java':3,8 '事':5,10 '你用对锁了吗':1,6 '浅谈':2,7 '锁':4,9	zh	
587	在命令行进行简单的统计分析	{"ver":2,"uid":1,"hash":"SHA1:c3b01e4be40545e3523da738466c8625bb63ccb7"}	https://toutiao.io/k/mcg1w0g	2020-08-25 01:10:11	在命令行进行简单的统计分析	66e98a9ab85be77b32b3fbda46e04ec468a66f93	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.782465	0			'在命令行进行简单的统计分析':1,2	zh	
520	WordPressiOS Locked by App Store	{"ver":2,"uid":1,"hash":"SHA1:ed89eb6bc877a8d3bf13e281171d2532610e06e0"}	https://twitter.com/photomatt/status/1296879217297113088	2020-08-22 07:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24238229"> https://news.ycombinator.com/item?id=24238229 </a>	108ca778edb74770936724d3475ac1a06858a080	\N	f	2020-08-22 07:10:00	2020-08-25 22:10:10.51847	0			'/item?id=24238229':9 'app':4 'comment':6 'lock':2 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24238229':7 'store':5 'wordpressio':1	zh	constantinum
586	[推荐] 微服务的战争：按什么维度拆分服务	{"ver":2,"uid":1,"hash":"SHA1:eac61f8fe607e3f8581f68915b5c0be1f3c37971"}	https://toutiao.io/k/3lp54k3	2020-08-28 17:10:21	[推荐] 微服务的战争：按什么维度拆分服务	4dba41d315c4272412daf7bfdbc095f47db2f8bb	\N	f	2020-08-25 01:10:00	2020-09-08 16:10:11.715942	0			'微服务的战争':2,5 '按什么维度拆分服务':3,6 '推荐':1,4	zh	
916	查询 ElasticSearch：用 SQL 代替 DSL	{"ver":2,"uid":1,"hash":"SHA1:57b6f0931f5ead5a5d32e47e6ab0bd5219cc887f"}	https://toutiao.io/k/xggulcs	2020-09-04 01:10:09	查询 ElasticSearch：用 SQL 代替 DSL	9112ac976e2bb134e885ca907a94775cca381187	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.914314	0			'dsl':6,12 'elasticsearch':2,8 'sql':4,10 '代替':5,11 '查询':1,7 '用':3,9	zh	
584	Vitamin D, part 2: Shannon's story	{"ver":2,"uid":1,"hash":"SHA1:542af1029654828e018816114720e578009fef7b"}	https://www.devaboone.com/post/vitamin-d-part-2-shannon-s-story?postId=5f39453f8d01fe00170023fe	2020-08-25 01:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24261948"> https://news.ycombinator.com/item?id=24261948 </a>	b9f9a6820f1304dda85fa9aa35d3f1cbbbf80733	\N	f	2020-08-25 01:10:00	2020-08-27 20:10:10.193278	0			'/item?id=24261948':11 '2':4 'comment':8 'd':2 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24261948':9 'part':3 'shannon':5 'stori':7 'vitamin':1	zh	usefulcat
585	[推荐] 使用 Spring Boot DevTools 优化你的开发体验	{"ver":2,"uid":1,"hash":"SHA1:ea65ff77e80d566f3d21f760ef48f9a27d61ff3e"}	https://toutiao.io/k/e6fskts	2020-08-31 18:10:11	[推荐] 使用 Spring Boot DevTools 优化你的开发体验	ff183819a5d93901b475a79e25e040bc2fc57766	\N	f	2020-08-25 01:10:00	2020-09-08 16:10:11.738911	0			'boot':4,10 'devtools':5,11 'spring':3,9 '优化你的开发体验':6,12 '使用':2,8 '推荐':1,7	zh	
919	浅谈 FTP、FTPS 与 SFTP	{"ver":2,"uid":1,"hash":"SHA1:4353be9a64af1e8af266c747667f004f1f5ab22b"}	https://toutiao.io/k/i3yfain	2020-09-04 01:10:09	浅谈 FTP、FTPS 与 SFTP	ac33ece8396c482728abe433e6f56a6c91a6f992	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.916168	0			'ftp':2,7 'ftps':3,8 'sftp':5,10 '与':4,9 '浅谈':1,6	zh	
918	关于技术规划的想法	{"ver":2,"uid":1,"hash":"SHA1:92731aa9c92783cbf4b73ebac9c2d29c51722887"}	https://toutiao.io/k/mjk8u1u	2020-09-04 01:10:09	关于技术规划的想法	a9ffa9385b223cd725d541ba0981de838878b809	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.923607	0			'关于技术规划的想法':1,2	zh	
921	用 Python 实现朋友圈中的九宫格图片	{"ver":2,"uid":1,"hash":"SHA1:ba081dec6071030dc484e2970d6b027c21eed565"}	https://toutiao.io/k/ao91r9a	2020-09-04 01:10:09	用 Python 实现朋友圈中的九宫格图片	db47cfc3e5245b5035bc028d2f7f3051a5241ac1	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.929102	0			'python':2,5 '实现朋友圈中的九宫格图片':3,6 '用':1,4	zh	
920	自动化回归环境搭建复盘	{"ver":2,"uid":1,"hash":"SHA1:7e62129989f6dada0b24fed5ba87a806d4cba9f5"}	https://toutiao.io/k/eoa4uy6	2020-09-04 01:10:09	自动化回归环境搭建复盘	31834062bfaadf4cb4b0f8088056741a60f32763	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.921763	0			'自动化回归环境搭建复盘':1,2	zh	
922	Mac 下搭建 Clion + OpenCV 4.x 的开发环境	{"ver":2,"uid":1,"hash":"SHA1:8cbc9b38dec248763ceb952592a95257d73c931c"}	https://toutiao.io/k/e7ag90p	2020-09-04 03:10:11	Mac 下搭建 Clion + OpenCV 4.x 的开发环境	f8486fa5106e33a324639aed6b8c35642ea693c1	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.930973	0			'4':5,12 'clion':3,10 'mac':1,8 'opencv':4,11 'x':6,13 '下搭建':2,9 '的开发环境':7,14	zh	
915	肝完这篇前端开发学习路线图，凌晨两点了	{"ver":2,"uid":1,"hash":"SHA1:303a962d2667f65cf8bce37211a423f1081795e1"}	https://toutiao.io/k/d00wqyf	2020-09-04 01:10:09	肝完这篇前端开发学习路线图，凌晨两点了	7f08cc38185932013aa1a785666f1488567ef068	\N	f	2020-09-04 01:10:00	2020-09-05 01:10:08.912346	0			'凌晨两点了':2,4 '肝完这篇前端开发学习路线图':1,3	zh	
253	趣题：如果每次只增加一个区域的话	{"ver":2,"uid":1,"hash":"SHA1:0e9ee6184401d6797c3e689cdc7a99f78e0129fb"}	http://www.matrix67.com/blog/archives/6655	2016-04-21 13:40:02	<p>著名的四色定理（four color theorem）告诉我们，如果一个地图由若干个连通区域构成（没有飞地），那么在给每个区域染色时，为了让相邻区域的颜色不同，最多只需要四种颜色就足够了。不过，这个结论成立有一个条件：整个地图已经事先确定了。如果我们每次只增加一个区域的话呢？具体地说，如果每次你给一个区域染色之后，我再画出下一个区域，并且之前已经染好颜色的区域不能再修改了，那么四种颜色还足够吗？这里，我们假设，在染色时，你总是遵循一个非常朴素的贪心策略：用第一个合法的颜色给每个新的区域染色。下面这个例子告诉我们，在这些假设下，四种颜色就不够了，有时五种颜色是必需的。</p>\n<p class="indent"><img src="http://www.matrix67.com/blogimage_2016/201604211.gif" alt="" width="300" /></p>\n<p>我们的问题就是，在这些假设下，五种颜色就一定够吗？有没有可能构造出某个情况，使得六种颜色是必需的？有没有可能构造出某个情况，使得七种颜色是必需的？</p>\n<p><span id="more-6655"></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>事实上，对于任意的正整数 n ，我们都能构造出某个情况，使得 n 种颜色是必需的。下图显示的是 n = 6 的情况，我们很容易把它扩展到任意大的正整数 n 。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201604212.gif" alt="" width="600" /></p>\n<p>你可以在这里看到更多有关于这个问题的讨论： <a href="http://www.iread.it/map_colors.php">http://www.iread.it/map_colors.php</a></p>\n	9fb324d419a82217d23f9d4435928e6fb4964518	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.854477	26	http://www.matrix67.com/blog/archives/6655#comments		'/map_colors.php':54 '6':47 'color':5 'four':4 'n':40,43,46,50 'theorem':6 'www.iread.it':53 'www.iread.it/map_colors.php':52 '下图显示的是':45 '下面这个例子告诉我们':27 '不过':13 '为了让相邻区域的颜色不同':11 '事实上':38 '五种颜色就一定够吗':33 '你可以在这里看到更多有关于这个问题的讨论':51 '你总是遵循一个非常朴素的贪心策略':25 '使得':42 '使得七种颜色是必需的':37 '使得六种颜色是必需的':35 '具体地说':17 '告诉我们':7 '四种颜色就不够了':29 '在染色时':24 '在这些假设下':28,32 '如果一个地图由若干个连通区域构成':8 '如果我们每次只增加一个区域的话呢':16 '如果每次你给一个区域染色之后':18 '如果每次只增加一个区域的话':2 '对于任意的正整数':39 '并且之前已经染好颜色的区域不能再修改了':20 '我们假设':23 '我们很容易把它扩展到任意大的正整数':49 '我们的问题就是':31 '我们都能构造出某个情况':41 '我再画出下一个区域':19 '整个地图已经事先确定了':15 '最多只需要四种颜色就足够了':12 '有时五种颜色是必需的':30 '有没有可能构造出某个情况':34,36 '没有飞地':9 '用第一个合法的颜色给每个新的区域染色':26 '的情况':48 '种颜色是必需的':44 '著名的四色定理':3 '趣题':1 '这个结论成立有一个条件':14 '这里':22 '那么四种颜色还足够吗':21 '那么在给每个区域染色时':10	en	admin
155	Interface Values Are Valueless	{"ver":2,"uid":1,"hash":"SHA1:c9c6427a08620e771aae95daa098eddcfc9b6e3d"}	https://www.ardanlabs.com/blog/2018/03/interface-values-are-valueless.html	2018-03-23 00:00:00	Introduction I’ve been seeing a lot of question about interfaces lately on Slack. Most of the time the answers are technical and focus on implementation details. Implementation is important to help with debugging, but implementation doesn’t help with design. When it comes to designing code with interfaces, behavior has to be the main focus.\nIn this post, I hope to provide a different way to think about interfaces and how to design code with them.	6a38dd12d8b7daf90c24268e60b9f633d3b626e0	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.455362	0			'answer':24 'behavior':54 'code':51,79 'come':48 'debug':38 'design':45,50,78 'detail':31 'differ':69 'doesn':41 'focus':28,60 'help':36,43 'hope':65 'implement':30,32,40 'import':34 'interfac':1,15,53,74 'introduct':5 'late':16 'lot':11 'main':59 'post':63 'provid':67 'question':13 'see':9 'slack':18 'technic':26 'think':72 'time':22 'valu':2 'valueless':4 've':7 'way':70	en	
590	TypeScript 设计模式之发布：订阅模式	{"ver":2,"uid":1,"hash":"SHA1:aed5a3c4c5785f215809bdc0633de41c3bb6aeaf"}	https://toutiao.io/k/tbuo234	2020-08-25 01:10:11	TypeScript 设计模式之发布：订阅模式	99c496a06882eca669d3a2f024af91914df288a3	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.766912	0			'typescript':1,4 '订阅模式':3,6 '设计模式之发布':2,5	zh	
862	Prometheus 监控神器：服务发现篇（二）	{"ver":2,"uid":1,"hash":"SHA1:f6dd31fd8406d08da976f12f0837e735a6777a5d"}	https://toutiao.io/k/2oeudi0	2020-09-02 06:10:10	Prometheus 监控神器：服务发现篇（二）	1c1b538f2e3fc16a38d5abec8911e5d4eadbddfc	\N	f	2020-09-02 06:10:00	2020-09-03 00:10:09.933488	0			'prometheus':1,5 '二':4,8 '服务发现篇':3,7 '监控神器':2,6	zh	
591	大规模数据安全分类系统架构实践	{"ver":2,"uid":1,"hash":"SHA1:7581c8bbd7e51be0bcf4485082035513208ea47b"}	https://toutiao.io/k/d0raa3b	2020-08-25 01:10:11	大规模数据安全分类系统架构实践	376f9cad28d9da50c4788618d3ed71608600be8f	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.774592	0			'大规模数据安全分类系统架构实践':1,2	zh	
589	如何为团队定制自己的 Node.js 框架？（基于 EggJS）	{"ver":2,"uid":1,"hash":"SHA1:adac7708fe20068b39968b266bb3f7ca0bfdbf72"}	https://toutiao.io/k/juo1crf	2020-08-25 01:10:11	如何为团队定制自己的 Node.js 框架？（基于 EggJS）	2d52ddf47a1fda19377eaf66189a2e49ba156d3f	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.776353	0			'eggjs':5,10 'node.js':2,7 '基于':4,9 '如何为团队定制自己的':1,6 '框架':3,8	zh	
860	基于 openresty 的 URL 断路器/熔断器：URL-fuse	{"ver":2,"uid":1,"hash":"SHA1:451ba5bf71ee936bf71aabf88d4762431e594267"}	https://toutiao.io/k/jjowmoy	2020-09-02 08:10:09	基于 openresty 的 URL 断路器/熔断器：URL-fuse	389e69e386ccf53e2a5a080ad6d30f34ec483ef5	\N	f	2020-09-02 06:10:00	2020-09-03 00:10:09.939669	0			'fuse':9,18 'openresty':2,11 'url':4,8,13,17 'url-fuse':7,16 '基于':1,10 '断路器':5,14 '熔断器':6,15 '的':3,12	zh	
797	Why are there 5280 feet in a mile?	{"ver":2,"uid":1,"hash":"SHA1:47adc3afcb63ba19eb4a75c2fc91c11648b83642"}	https://petersmagnusson.org/2009/09/15/why-are-there-5280-feet-in-a-mile/	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24327740"> https://news.ycombinator.com/item?id=24327740 </a>	ba483ebe348df5a33a4fd7a3d01313a3b6baff7b	\N	f	2020-08-31 20:10:00	2020-09-02 16:10:10.481114	0			'/item?id=24327740':12 '5280':4 'comment':9 'feet':5 'mile':8 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24327740':10	zh	ahupp
861	[译] 都说 Go 可以开启成千上万的 Goroutine，那调度器是怎么处理核上任务分配的？	{"ver":2,"uid":1,"hash":"SHA1:c63c32fafb36f22bc2f968cbff0220b374b4f586"}	https://toutiao.io/k/7v1r9s5	2020-09-02 06:10:10	[译] 都说 Go 可以开启成千上万的 Goroutine，那调度器是怎么处理核上任务分配的？	047a6b365a2946ceefc697ac9600fd0aba5a1787	\N	f	2020-09-02 06:10:00	2020-09-03 00:10:09.931392	0			'go':3,9 'goroutine':5,11 '可以开启成千上万的':4,10 '译':1,7 '那调度器是怎么处理核上任务分配的':6,12 '都说':2,8	zh	
801	Analysis of Today's CenturyLink/Level(3) Outage	{"ver":2,"uid":1,"hash":"SHA1:4240552496c28bcfd897e43e2872bd3e2c8c6353"}	https://blog.cloudflare.com/analysis-of-todays-centurylink-level-3-outage/	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24328640"> https://news.ycombinator.com/item?id=24328640 </a>	92466d6a85f8edb6dfc91b81a0ecd56b6c12c4be	\N	f	2020-08-31 20:10:00	2020-09-02 01:10:11.652688	0			'/item?id=24328640':11 '3':6 'analysi':1 'centurylink/level':5 'comment':8 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24328640':9 'outag':7 'today':3	zh	danfritz
799	Cloudflare is experiencing failures in its connections to hosts	{"ver":2,"uid":1,"hash":"SHA1:2cc08da0188f1dcd8e18c1188f72bdddbe4fa6dd"}	https://www.cloudflarestatus.com/incidents/hptvkprkvp23	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24322513"> https://news.ycombinator.com/item?id=24322513 </a>	ed00832f75eb3d0523360c06b941f928e6b948c0	\N	f	2020-08-31 20:10:00	2020-09-02 01:10:11.654518	0			'/item?id=24322513':13 'cloudflar':1 'comment':10 'connect':7 'experienc':3 'failur':4 'host':9 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24322513':11	zh	artemisbot
594	types 和 @types 是什么？	{"ver":2,"uid":1,"hash":"SHA1:09047305f53026f5959ef643bd4e9ed2bb565d7b"}	https://toutiao.io/k/owh81t0	2020-08-25 01:10:11	types 和 @types 是什么？	82c88d8e539a14e41484e79357998de17bac3f23	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.778406	0			'types':1,3,5,7 '和':2,6 '是什么':4,8	zh	
803	Deep learning job postings have collapsed in the past six months	{"ver":2,"uid":1,"hash":"SHA1:9c656086c715ba15dfedf4fcdb26eae804e3a2ef"}	https://twitter.com/fchollet/status/1300137812872765440	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24330326"> https://news.ycombinator.com/item?id=24330326 </a>	6226729b74000c312393031c5bf26a8420faf1ac	\N	f	2020-08-31 20:10:00	2020-09-03 18:10:09.065592	0			'/item?id=24330326':15 'collaps':6 'comment':12 'deep':1 'job':3 'learn':2 'month':11 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24330326':13 'past':9 'post':4 'six':10	zh	bpesquet
593	Python 为什么没有 void 关键字？	{"ver":2,"uid":1,"hash":"SHA1:830b612852145be5b89681e9b4ec793c88ddc9df"}	https://toutiao.io/k/nnj3t6m	2020-08-25 01:10:11	Python 为什么没有 void 关键字？	22dbd30de475f0357628c132b5c2cae51ac2c1fd	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.78046	0			'python':1,5 'void':3,7 '为什么没有':2,6 '关键字':4,8	zh	
592	Gin 学习之响应处理	{"ver":2,"uid":1,"hash":"SHA1:b7927314d3a662f91485bcdc71197300bb8b2381"}	https://toutiao.io/k/685owjs	2020-08-25 01:10:11	Gin 学习之响应处理	bb8d01d687b8587ceff1f0c844acee23201acb80	\N	f	2020-08-25 01:10:00	2020-08-26 00:10:09.784495	0			'gin':1,3 '学习之响应处理':2,4	zh	
863	如何组织一场成功的 Bug Bash？	{"ver":2,"uid":1,"hash":"SHA1:1e89b29bc7b0134e576a731cc2b1cf90994032f9"}	https://toutiao.io/k/k17mhuo	2020-09-02 06:10:10	如何组织一场成功的 Bug Bash？	bf5aca99310ba73ccd11ebaed88323911c88683a	\N	f	2020-09-02 06:10:00	2020-09-03 00:10:09.935443	0			'bash':3,6 'bug':2,5 '如何组织一场成功的':1,4	zh	
864	Idea 提效总结	{"ver":2,"uid":1,"hash":"SHA1:5b13c186d058a0a77af9ab74038fd9f43cb873c6"}	https://toutiao.io/k/0c521an	2020-09-02 06:10:10	Idea 提效总结	b7cecaa23ad1ccc7f6d67d250911f0710efa9875	\N	f	2020-09-02 06:10:00	2020-09-03 00:10:09.937724	0			'idea':1,3 '提效总结':2,4	zh	
802	Longevity FAQ: A beginner's guide to longevity research	{"ver":2,"uid":1,"hash":"SHA1:4e933c365ed34bb4765e4dd7cb80f085616a05e4"}	https://www.ldeming.com/longevityfaq	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24320846"> https://news.ycombinator.com/item?id=24320846 </a>	e5b90b9276a088ace0d1f1bd354d063760c41b2c	\N	f	2020-08-31 20:10:00	2020-09-01 12:10:09.803189	0			'/item?id=24320846':13 'beginn':4 'comment':10 'faq':2 'guid':6 'longev':1,8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24320846':11 'research':9	zh	apsec112
800	Game Design Curriculum	{"ver":2,"uid":1,"hash":"SHA1:d258ad9b123496e635c4f66c2afafb4f4ffc659f"}	https://www.riotgames.com/en/urf-academy/curriculum-guide	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24309234"> https://news.ycombinator.com/item?id=24309234 </a>	e43898edd7b59bceef42d8087cce5e6f6eee272c	\N	f	2020-08-31 20:10:00	2020-08-31 23:10:10.113833	0			'/item?id=24309234':7 'comment':4 'curriculum':3 'design':2 'game':1 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24309234':5	zh	hmmazoids
926	硬核手写字节码实现 HelloWorld	{"ver":2,"uid":1,"hash":"SHA1:31cc51f22802ca3ca3f843edc7b4fbbf4ee8e096"}	https://toutiao.io/k/c1z4xa8	2020-09-04 03:10:12	硬核手写字节码实现 HelloWorld	9c3b158bf3192543bf4dc7056496dbf863352ac4	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.938527	0			'helloworld':2,4 '硬核手写字节码实现':1,3	zh	
928	初学心得：Rust 学习笔记	{"ver":2,"uid":1,"hash":"SHA1:46dad8ef3224428d342a9c0166e0f4dffa4d8530"}	https://toutiao.io/k/c3om2jg	2020-09-04 03:10:12	初学心得：Rust 学习笔记	e917086092340c0b3714baf789c381d75be4acbe	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.934739	0			'rust':2,5 '初学心得':1,4 '学习笔记':3,6	zh	
929	Linux 使用 less 命令查看文件	{"ver":2,"uid":1,"hash":"SHA1:729c9d01924279c4bb80e1e3c0c54105af0942c4"}	https://toutiao.io/k/57nwlom	2020-09-04 03:10:12	Linux 使用 less 命令查看文件	5b0c8d3bcbbec152ac2df7956723acb6716081fe	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.940377	0			'less':3,7 'linux':1,5 '使用':2,6 '命令查看文件':4,8	zh	
923	最想与朋友分享的网站列表	{"ver":2,"uid":1,"hash":"SHA1:48f2ce2faa72da7e110f4f7521ca6b5a16da27d6"}	https://toutiao.io/k/wlkg9pi	2020-09-04 03:10:11	最想与朋友分享的网站列表	e8737c0b17dfb7c131da7333cc55781683e2eb1e	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.905659	0			'最想与朋友分享的网站列表':1,2	zh	
924	[译] 聚焦 Android 11：游戏开发新工具	{"ver":2,"uid":1,"hash":"SHA1:8570a21c76bab1d255feb0552a47d269c120028a"}	https://toutiao.io/k/eraqm5i	2020-09-04 03:10:11	[译] 聚焦 Android 11：游戏开发新工具	0fbe06e2eca9c4ffc56d79aa22e829f6d9ca2540	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.918059	0			'11':4,9 'android':3,8 '游戏开发新工具':5,10 '聚焦':2,7 '译':1,6	zh	
927	程序员进阶系列：多图教你掌握 JVM	{"ver":2,"uid":1,"hash":"SHA1:7f2dd05037ee4b74be0fbb8e07b2a1fee85a2afe"}	https://toutiao.io/k/pz73jc0	2020-09-04 03:10:12	程序员进阶系列：多图教你掌握 JVM	2f568689a4bdd279e47612f6a85fc3d456c3535b	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.927306	0			'jvm':3,6 '多图教你掌握':2,5 '程序员进阶系列':1,4	zh	
925	你真的知道什么是线程安全吗？	{"ver":2,"uid":1,"hash":"SHA1:bde9220dc9287e6e6aafd5615b6649ae8e505979"}	https://toutiao.io/k/xuvh0vj	2020-09-04 03:10:12	你真的知道什么是线程安全吗？	83adc5e5dfdc0b226a328d0bcf76751bf0c5790a	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.932832	0			'你真的知道什么是线程安全吗':1,2	zh	
522	AI slays top F-16 pilot in DARPA dogfight simulation	{"ver":2,"uid":1,"hash":"SHA1:94d9269932c4ea309fd86863dd59a7cca1039fe6"}	https://breakingdefense.com/2020/08/ai-slays-top-f-16-pilot-in-darpa-dogfight-simulation/	2020-08-22 16:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24232307"> https://news.ycombinator.com/item?id=24232307 </a>	c5ea27f8c7b085d8ff24636a782d556af6621f5a	\N	f	2020-08-22 16:10:00	2020-08-25 17:10:08.253553	0			'-16':5 '/item?id=24232307':14 'ai':1 'comment':11 'darpa':8 'dogfight':9 'f':4 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24232307':12 'pilot':6 'simul':10 'slay':2 'top':3	zh	MontagFTB
597	[译] 在 Solidity 中使用值数组以降低 gas 消耗	{"ver":2,"uid":1,"hash":"SHA1:95e7de694df6bc39528b8b8e1fcc00b06733d7b8"}	https://toutiao.io/k/7g2tstj	2020-08-25 02:10:11	[译] 在 Solidity 中使用值数组以降低 gas 消耗	05ee922f05a3ae8beeb6105860153647c2cdc27c	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.791926	0			'gas':5,11 'solidity':3,9 '中使用值数组以降低':4,10 '在':2,8 '消耗':6,12 '译':1,7	zh	
595	Substrate 官方教程增强版	{"ver":2,"uid":1,"hash":"SHA1:aaa83bb572fe09437ac182df8e51d542a306bc22"}	https://toutiao.io/k/8a4agfs	2020-08-25 02:10:11	Substrate 官方教程增强版	f7d72675b7370b29eccc143334429d4cdfe40c77	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.768913	0			'substrate':1,3 '官方教程增强版':2,4	zh	
596	携程基于 Quasar 协程的 NIO 实践	{"ver":2,"uid":1,"hash":"SHA1:ff3d0944f69771ab397f9a7cd9fc742da27971fd"}	https://toutiao.io/k/1zpub79	2020-08-25 02:10:11	携程基于 Quasar 协程的 NIO 实践	eaf7a1e70a29e800fd751d620152fedec3459bcb	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.772647	0			'nio':4,9 'quasar':2,7 '协程的':3,8 '实践':5,10 '携程基于':1,6	zh	
599	海量数据下的精准营销工程实践	{"ver":2,"uid":1,"hash":"SHA1:f8de159bf85698a80bb913e881e3ee6df641c316"}	https://toutiao.io/k/5qnsh37	2020-08-25 02:10:11	海量数据下的精准营销工程实践	b42922b4ba5add7c61139eae424024e1b0956d45	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.786353	0			'海量数据下的精准营销工程实践':1,2	zh	
598	Java 开发者生码 IDEA 插件，香	{"ver":2,"uid":1,"hash":"SHA1:5a5b9c69408aea3c7c294fdb694d94d54ec373a0"}	https://toutiao.io/k/xxyjfez	2020-08-25 02:10:11	Java 开发者生码 IDEA 插件，香	1a8f24855420d637fba3992ddd15bae49b24f1be	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.788218	0			'idea':3,8 'java':1,6 '开发者生码':2,7 '插件':4,9 '香':5,10	zh	
804	Google, the Stupidity Amplifier (2016)	{"ver":2,"uid":1,"hash":"SHA1:195b1de3166880544f773b317fb988ae2e936552"}	http://www.gregegan.net/ESSAYS/GOOGLE/Google.html	2020-08-31 21:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24329412"> https://news.ycombinator.com/item?id=24329412 </a>	10ffdc8ab1a70b4846ab462781776449ae952418	\N	f	2020-08-31 21:10:00	2020-09-02 01:10:11.658272	0			'/item?id=24329412':9 '2016':5 'amplifi':4 'comment':6 'googl':1 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24329412':7 'stupid':3	zh	Santosh83
796	App Review process updates	{"ver":2,"uid":1,"hash":"SHA1:cf8ad9716bca7bd34db9c2c1aeb8de2db04f8de0"}	https://developer.apple.com/news/?id=84w3e5bm	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24332412"> https://news.ycombinator.com/item?id=24332412 </a>	bafb62593f748eeaf374ca9f8d68e2d7623b484a	\N	f	2020-08-31 20:10:00	2020-09-03 18:10:09.059966	0			'/item?id=24332412':8 'app':1 'comment':5 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24332412':6 'process':3 'review':2 'updat':4	zh	BigBalli
600	哥斯拉 Godzilla shell 管理工具	{"ver":2,"uid":1,"hash":"SHA1:b7275eab7d85e4c23f8c64959f2fb4e47cead902"}	https://toutiao.io/k/9rkjdll	2020-08-25 02:10:11	哥斯拉 Godzilla shell 管理工具	80cbec17002c9e93c5aca7a2e3e1773374d81f52	\N	f	2020-08-25 02:10:00	2020-08-26 00:10:09.790148	0			'godzilla':2,6 'shell':3,7 '哥斯拉':1,5 '管理工具':4,8	zh	
798	PinePhone Manjaro Community Edition	{"ver":2,"uid":1,"hash":"SHA1:659abdb058266ea96f7316a56ae78750f1f99578"}	https://www.pine64.org/2020/08/31/pinephone-manjaro-community-edition/	2020-08-31 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24329900"> https://news.ycombinator.com/item?id=24329900 </a>	7bb9371a9bfb5188782d06093a8d2f16b8d1da4b	\N	f	2020-08-31 20:10:00	2020-09-03 11:10:09.257371	0			'/item?id=24329900':8 'comment':5 'communiti':3 'edit':4 'manjaro':2 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24329900':6 'pinephon':1	zh	jandeboevrie
930	特征工程：特征交叉 (Feature Crosses)	{"ver":2,"uid":1,"hash":"SHA1:97e38fcb4c32d41f42cbfe2eb1e0dde08e2acffb"}	https://toutiao.io/k/fok2kjg	2020-09-04 03:10:12	特征工程：特征交叉 (Feature Crosses)	6f8c26b4daac5c1b3777ba3c2946698e1b8239d9	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.925411	0			'crosses':4,8 'feature':3,7 '特征交叉':2,6 '特征工程':1,5	zh	
931	没想到吧！关于 Dubbo 的 “消费端线程池模型” 官网也写错了	{"ver":2,"uid":1,"hash":"SHA1:14ae58203d579dcce4d07bf1d5c6b98af82b41fd"}	https://toutiao.io/k/cqsrm4e	2020-09-04 03:10:12	没想到吧！关于 Dubbo 的 “消费端线程池模型” 官网也写错了	ae57c70c394eda937baa64bf110b3dfdf27e639f	\N	f	2020-09-04 03:10:00	2020-09-05 01:10:08.936689	0			'dubbo':3,9 '关于':2,8 '官网也写错了':6,12 '没想到吧':1,7 '消费端线程池模型':5,11 '的':4,10	zh	
152	Scheduling In Go : Part I - OS Scheduler	{"ver":2,"uid":1,"hash":"SHA1:7b2dc02fe0c513af4f50eacb25b29c573d193085"}	https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html	2018-08-12 00:00:00	Prelude This is the first post in a three part series that will provide an understanding of the mechanics and semantics behind the scheduler in Go. This post focuses on the operating system scheduler.\nIndex of the three part series:\n1) Scheduling In Go : Part I - OS Scheduler\n2) Scheduling In Go : Part II - Go Scheduler\n3) Scheduling In Go : Part III - Concurrency	53cf5274dd824e00499c4d473a1abff5849d2064	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.449664	0			'1':48 '2':56 '3':64 'behind':29 'concurr':70 'first':12 'focus':36 'go':3,33,51,59,62,67 'ii':61 'iii':69 'index':42 'mechan':26 'oper':39 'os':6,54 'part':4,17,46,52,60,68 'post':13,35 'prelud':8 'provid':21 'schedul':1,7,31,41,49,55,57,63,65 'semant':28 'seri':18,47 'system':40 'three':16,45 'understand':23	en	
243	Why Go Programming	{"ver":2,"uid":1,"hash":"SHA1:39d236c7e4383dc6b4a140106e573a6a23ecbf33"}	https://www.ardanlabs.com/blog/2013/05/why-go-programming.html	2013-05-31 00:00:00	For the past 20 years I have been writing server based and application software on the Microsoft stack. First in C/C++ leveraging the Win32 API and then in C# when .Net first was released. Over the past few months I have realized that trying to build scalable code on the Microsoft stack is becoming impossible. Why, Technology and Cost!!\nLet&rsquo;s start with the licensing. Luckily I was accepted into the Bizspark program.	d66f5c7a3e435554fe94504385d7a2d46ebff2c4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.625334	0			'20':7 'accept':72 'api':28 'applic':16 'base':14 'becom':57 'bizspark':75 'build':49 'c':32 'c/c':24 'code':51 'cost':62 'first':22,35 'go':2 'imposs':58 'let':63 'leverag':25 'licens':68 'luckili':69 'microsoft':20,54 'month':42 'net':34 'past':6,40 'program':3,76 'realiz':45 'releas':37 'scalabl':50 'server':13 'softwar':17 'stack':21,55 'start':65 'technolog':60 'tri':47 'win32':27 'write':12 'year':8	en	
521	Activists find camera inside box on power pole near union organizer’s home	{"ver":2,"uid":1,"hash":"SHA1:8f9d72f593a33d0e2226245de02a4959e4cdc339"}	https://www.fox13memphis.com/news/local/activists-find-camera-inside-mysterious-box-power-pole-near-union-organizers-home/5WCLOAMMBRGYBEJDGH6C74ITBU/	2020-08-22 08:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24240085"> https://news.ycombinator.com/item?id=24240085 </a>	ed4932b3523dd1533f7ccba7f9ebf7f81a968507	\N	f	2020-08-22 08:10:00	2020-08-25 17:10:08.249141	0			'/item?id=24240085':17 'activist':1 'box':5 'camera':3 'comment':14 'find':2 'home':13 'insid':4 'near':9 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24240085':15 'organ':11 'pole':8 'power':7 'union':10	zh	badRNG
23	Internets of interest #14: UNIX v0	{"ver":2,"uid":1,"hash":"SHA1:e1e44923724d006398659cac207ff596509af55f"}	https://dave.cheney.net/2019/11/18/internets-of-interest-14-unix-v0	2019-11-17 16:04:20	\n<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">\n<iframe title="LCM+L PDP-7 booting and running UNIX Version 0" width="625" height="352" src="https://www.youtube.com/embed/pvaPaWyiuLA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>Read more over at the <a href="https://livingcomputers.org/Blog/Restoring-UNIX-v0-on-a-PDP-7-A-look-behind-the-sce.aspx">Living Computer Museum’s restoration page. </a></p>\n	065efc9f7abac84b33689128968fd697ef892ab0	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.232868	0			'14':4 'at':10 'computer':13 'interest':3 'internets':1 'living':12 'more':8 'museum':14 'of':2 'over':9 'page':17 'read':7 'restoration':16 's':15 'the':11 'unix':5 'v0':6	en	Dave Cheney
834	Airline pilots landing at LAX report “a guy in jetpack” flying alongside them	{"ver":2,"uid":1,"hash":"SHA1:6ccb304331940d06d78431b1ae8152429f743fe3"}	https://www.thedrive.com/the-war-zone/36096/airline-pilots-landing-at-lax-report-a-guy-in-jetpack-flying-alongside-them-on	2020-09-01 18:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24341535"> https://news.ycombinator.com/item?id=24341535 </a>	a1278ce0995bb6ea65bf135b39ec96e1509d02cb	\N	f	2020-09-01 17:10:00	2020-09-03 18:10:09.045043	0			'/item?id=24341535':17 'airlin':1 'alongsid':12 'comment':14 'fli':11 'guy':8 'jetpack':10 'land':3 'lax':5 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24341535':15 'pilot':2 'report':6	zh	x43b
805	Supporting Linux kernel development in Rust	{"ver":2,"uid":1,"hash":"SHA1:281c5ef5908223c8a589b873c10aef9cd91ec1a1"}	https://lwn.net/SubscriberLink/829858/281103f9c6fd0dc2/	2020-08-31 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24334731"> https://news.ycombinator.com/item?id=24334731 </a>	ae9209e97f81a692d21127a507a3a6c7d47620b0	\N	f	2020-08-31 23:10:00	2020-09-03 18:10:09.052133	0			'/item?id=24334731':10 'comment':7 'develop':4 'kernel':3 'linux':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24334731':8 'rust':6 'support':1	zh	dochtman
806	The Architecture of Open Source Applications	{"ver":2,"uid":1,"hash":"SHA1:ec1f4ef83d89b1717ad5bb1c2255349ddb60378a"}	https://aosabook.org/en/index.html	2020-08-31 23:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24332485"> https://news.ycombinator.com/item?id=24332485 </a>	64dde57143a80394c8f57b75e5784540ee6c4ac4	\N	f	2020-08-31 23:10:00	2020-09-03 18:10:09.082979	0			'/item?id=24332485':10 'applic':6 'architectur':2 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24332485':8 'open':4 'sourc':5	zh	letientai299
191	Web Form Validation And Localization In Go	{"ver":2,"uid":1,"hash":"SHA1:2a1123cd30bdfc4abc612d47816685a0921a045b"}	https://www.ardanlabs.com/blog/2014/03/web-form-validation-and-localization-in.html	2014-03-07 00:00:00	Introduction\nAs I improve my knowledge and framework for a Go based web service I am building, I continue to go back and enhance my Beego Sample App. Something I just added recently was providing localized messages for validation errors. I was fortunate to find Nick Snyder&rsquo;s go-i18n package. Nick&rsquo;s package made it easy to support multiple languages for the Go web service I am writing.\nAbstracting go-i18n\nThe go-i18n package is simple to use and you can use it to read files or strings that contain all the messages you want to localize.	61f28d928ae2ffd13ce87f3326d49b24b069b2da	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.52475	0			'abstract':78 'ad':39 'app':35 'back':29 'base':19 'beego':33 'build':24 'contain':102 'continu':26 'easi':65 'enhanc':31 'error':47 'file':98 'find':52 'form':2 'fortun':50 'framework':15 'go':7,18,28,57,72,80,84 'go-i18n':56,79,83 'i18n':58,81,85 'improv':11 'introduct':8 'knowledg':13 'languag':69 'local':5,43,109 'made':63 'messag':44,105 'multipl':68 'nick':53,60 'packag':59,62,86 'provid':42 'read':97 'recent':40 'sampl':34 'servic':21,74 'simpl':88 'snyder':54 'someth':36 'string':100 'support':67 'use':90,94 'valid':3,46 'want':107 'web':1,20,73 'write':77	en	
836	Why we are suing the Administration	{"ver":2,"uid":1,"hash":"SHA1:3b6d1a9e8f01b0d2eaef55d866fc50414014d9fe"}	https://newsroom.tiktok.com/en-us/tiktok-files-lawsuit	2020-09-01 19:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24339860"> https://news.ycombinator.com/item?id=24339860 </a>	510f4329fabc5c2b5f00eb35ccd120501d5f3322	\N	f	2020-09-01 19:10:00	2020-09-02 14:10:09.859797	0			'/item?id=24339860':10 'administr':6 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24339860':8 'su':4	zh	yunong
30	Sydney High Performance Go workshop	{"ver":2,"uid":1,"hash":"SHA1:f9d4624fb9af486652352184c147805f4eb89eb1"}	https://dave.cheney.net/2019/07/05/sydney-high-performance-go-workshop	2019-07-05 12:29:58	\n<p>On the 17th of July I&#8217;ll be giving a version of my <a href="https://dave.cheney.net/high-performance-go">High Performance Go workshop</a> updated for the upcoming changes in Go 1.13. The event is free, as in puppy, however numbers are limited due to the venue size. The event will be held in the Sydney CBD, the address will be provided to registered attendees closer to the date.</p>\n\n\n\n<p>You can find a <a href="https://dave.cheney.net/high-performance-go">link to the workshop description and syllabus here</a>.</p>\n\n\n\n<p>You can find a <a href="https://www.eventbrite.com/e/sydney-high-performance-go-workshop-tickets-64796869180">link to the registration page here</a>.</p>\n\n\n\n<h3>No show policy</h3>\n\n\n\n<p>If you register for the event then don&#8217;t show up you are be depriving someone else of the opportunity to participate. You can cancel you registration at any time up to 23:59 on the 16th.  <strong>If you are a no show you will be expected to make a <em>meaningful</em> donation to a charity of my choosing.</strong></p>\n	c1bb13c9be98c988ddac35708246d6193e892e6a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.245424	0			'1.13':30 '16th':129 '17th':8 '23':125 '59':126 'a':15,71,83,133,142,146 'address':57 'and':77 'any':121 'are':40,105,132 'as':35 'at':120 'attendees':63 'be':13,50,59,106,138 'can':69,81,116 'cancel':117 'cbd':55 'changes':27 'charity':147 'choosing':150 'closer':64 'date':67 'depriving':107 'description':76 'don':100 'donation':144 'due':42 'else':109 'event':32,48,98 'expected':139 'find':70,82 'for':24,96 'free':34 'giving':14 'go':4,21,29 'held':51 'here':79,89 'high':2,19 'however':38 'i':11 'if':93,130 'in':28,36,52 'is':33 'july':10 'limited':41 'link':72,84 'll':12 'make':141 'meaningful':143 'my':18,149 'no':90,134 'numbers':39 'of':9,17,110,148 'on':6,127 'opportunity':112 'page':88 'participate':114 'performance':3,20 'policy':92 'provided':60 'puppy':37 'register':95 'registered':62 'registration':87,119 'show':91,102,135 'size':46 'someone':108 'sydney':1,54 'syllabus':78 't':101 'the':7,25,31,44,47,53,56,66,74,86,97,111,128 'then':99 'time':122 'to':43,61,65,73,85,113,124,140,145 'up':103,123 'upcoming':26 'updated':23 'venue':45 'version':16 'will':49,58,137 'workshop':5,22,75 'you':68,80,94,104,115,118,131,136	en	Dave Cheney
193	The Nature Of Channels In Go	{"ver":2,"uid":1,"hash":"SHA1:33109415026b4f1b1902eb81d07e70c70211783b"}	https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html	2014-02-17 00:00:00	Introduction\nIn my last post called Concurrency, Goroutines and GOMAXPROCS, I set the stage for talking about channels. We discussed what concurrency was and how goroutines played a role. With that foundation in hand, we can now understand the nature of channels and how they can be used to synchronize goroutines to share resources in a safe, less error prone and fun way. What Are Channels\nChannels are type safe message queues that have the intelligence to control the behavior of any goroutine attempting to receive or send on it.	03132a3988961bea0c03b4577b9b9ba33ad54b92	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.528585	0			'attempt':90 'behavior':86 'call':12 'channel':4,24,48,72,73 'concurr':13,28 'control':84 'discuss':26 'error':65 'foundat':38 'fun':68 'go':6 'gomaxproc':16 'goroutin':14,32,57,89 'hand':40 'intellig':82 'introduct':7 'last':10 'less':64 'messag':77 'natur':2,46 'play':33 'post':11 'prone':66 'queue':78 'receiv':92 'resourc':60 'role':35 'safe':63,76 'send':94 'set':18 'share':59 'stage':20 'synchron':56 'talk':22 'type':75 'understand':44 'use':54 'way':69	en	
211	Go Package Management Call To Action	{"ver":2,"uid":1,"hash":"SHA1:829f43cb1e5ec60fc6da13e96f21df2e8d2e2547"}	https://www.ardanlabs.com/blog/2013/10/go-package-management-call-to-action.html	2013-10-01 00:00:00	Nathan Youngman, with the help of others, has produced this document outlining months of research and discovery. I would appreciate everyone to honestly read it before continuing with my post. http://nathany.com/go-packages/ Mitchell Hashimoto&nbsp;also published this post on go-nuts and everyone should read this as well. https://groups.google.com/forum/#!msg/golang-nuts/BMZDD6FM-QE/LX4JSs4NVLIJ These two documents outline the current capabilities and issues surrounding the Go tooling as it relates to package management. This has been discussed and discussed at length yet we still don't have a consensus on what the community will rally around.	6610960f0aeb093aa995e0647a36a4ff2e5c251e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.56377	0			'/forum/#!msg/golang-nuts/bmzdd6fm-qe/lx4jss4nvlij':59 '/go-packages/':39 'action':6 'also':42 'appreci':26 'around':101 'call':4 'capabl':66 'communiti':98 'consensus':94 'continu':33 'current':65 'discoveri':23 'discuss':82,84 'document':17,62 'everyon':27,51 'go':1,48,71 'go-nut':47 'groups.google.com':58 'groups.google.com/forum/#!msg/golang-nuts/bmzdd6fm-qe/lx4jss4nvlij':57 'hashimoto':41 'help':11 'honest':29 'issu':68 'length':86 'manag':3,78 'mitchel':40 'month':19 'nathan':7 'nathany.com':38 'nathany.com/go-packages/':37 'nut':49 'other':13 'outlin':18,63 'packag':2,77 'post':36,45 'produc':15 'publish':43 'ralli':100 'read':30,53 'relat':75 'research':21 'still':89 'surround':69 'tool':72 'two':61 'well':56 'would':25 'yet':87 'youngman':8	en	
932	Anxiety, depression, and PTSD may be adaptive responses to adversity: study	{"ver":2,"uid":1,"hash":"SHA1:962d41b4f0159b2e056eb8beecef54a027eb1059"}	https://www.psychologytoday.com/us/blog/shouldstorm/202008/what-if-certain-mental-disorders-are-not-disorders-all	2020-09-04 05:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24362112"> https://news.ycombinator.com/item?id=24362112 </a>	b4b1330e45ad49a46ddb9efe0fc345bafce42fda	\N	f	2020-09-04 05:10:00	2020-09-06 22:10:10.390315	0			'/item?id=24362112':15 'adapt':7 'advers':10 'anxieti':1 'comment':12 'depress':2 'may':5 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24362112':13 'ptsd':4 'respons':8 'studi':11	zh	firstbase
1115	Dozens of scientific journals have vanished from the internet	{"ver":2,"uid":1,"hash":"SHA1:6801d03955dba288cf4b495839c8527b987a14c3"}	https://www.sciencemag.org/news/2020/09/dozens-scientific-journals-have-vanished-internet-and-no-one-preserved-them	2020-09-10 01:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24422593"> https://news.ycombinator.com/item?id=24422593 </a>	67ea1a3509db709c0f30bc24a684988f7fd926de	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.201809	0			'/item?id=24422593':13 'comment':10 'dozen':1 'internet':9 'journal':4 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24422593':11 'scientif':3 'vanish':6	zh	bookofjoe
1119	新一代缓存 Caffeine，速度确实比 Guava 的 Cache 快	{"ver":2,"uid":1,"hash":"SHA1:64f9f8e97c1a80b0643f1a1ca849db8cfd7c9e7d"}	https://toutiao.io/k/5xvc683	2020-09-10 01:10:12	新一代缓存 Caffeine，速度确实比 Guava 的 Cache 快	acf0426ef7c63254d80f72f1c059b4ee32f138bb	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.593177	0			'cache':6,13 'caffeine':2,9 'guava':4,11 '快':7,14 '新一代缓存':1,8 '的':5,12 '速度确实比':3,10	zh	
1118	什么？听说这四个概念，很多 Java 老手都说不清	{"ver":2,"uid":1,"hash":"SHA1:c8fac9ed8711d9cb35cb1d85c5411e812cbc8df3"}	https://toutiao.io/k/tduydez	2020-09-10 01:10:12	什么？听说这四个概念，很多 Java 老手都说不清	210b13402fbaa86612bb51087b95cdd82849b486	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.589609	0			'java':4,9 '什么':1,6 '听说这四个概念':2,7 '很多':3,8 '老手都说不清':5,10	zh	
1117	工具 | 搜狗公司 C++ 服务器引擎	{"ver":2,"uid":1,"hash":"SHA1:1bfae410a3d398a38adc92377ba40f0f39a9d78f"}	https://toutiao.io/k/7ih2f4v	2020-09-10 01:10:12	工具 | 搜狗公司 C++ 服务器引擎	68df3f432b1021a76aa4750c241960e3c238f7dd	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.595767	0			'c':3,7 '工具':1,5 '搜狗公司':2,6 '服务器引擎':4,8	zh	
933	Spring Security 如何优雅地增加 OAuth2 协议授权模式	{"ver":2,"uid":1,"hash":"SHA1:4ecd426b1b00a239730e09e43fd4a4cc7b9ea8ba"}	https://toutiao.io/k/l8h00r3	2020-09-04 07:10:10	Spring Security 如何优雅地增加 OAuth2 协议授权模式	1d7a28884e1de5bf45d77f7e1804244ad7879a06	\N	f	2020-09-04 05:10:00	2020-09-05 01:10:08.942277	0			'oauth2':4,9 'security':2,7 'spring':1,6 '协议授权模式':5,10 '如何优雅地增加':3,8	zh	
809	[推荐] 一文了解 Zookeeper	{"ver":2,"uid":1,"hash":"SHA1:47fbfea16b5335e1ce258a4c84ba124ebeaf53a8"}	https://toutiao.io/k/of5k6dk	2020-09-04 17:10:10	[推荐] 一文了解 Zookeeper	5c9259cc3763d1e06ca419d7b291babbc0ec8ad0	\N	f	2020-09-01 01:10:00	2020-09-10 05:10:14.664801	0			'zookeeper':3,6 '一文了解':2,5 '推荐':1,4	zh	
808	Java 并发编程：Executor 线程池框架简介	{"ver":2,"uid":1,"hash":"SHA1:c9560d69fa520dea0cab09e34adee7d5c27611e5"}	https://toutiao.io/k/lerlnil	2020-09-01 01:10:09	Java 并发编程：Executor 线程池框架简介	e0abfbf1b454bab1bb5968c2bbcabb39bb7b8804	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.691809	0			'executor':3,7 'java':1,5 '并发编程':2,6 '线程池框架简介':4,8	zh	
216	Slices of Slices of Slices in Go	{"ver":2,"uid":1,"hash":"SHA1:5c00036c39883ae1d60235a32fcc69bc4351b8ee"}	https://www.ardanlabs.com/blog/2013/09/slices-of-slices-of-slices-in-go.html	2013-09-10 00:00:00	I am working on building code to load polygons for the different Marine Forecast areas in the United States. These polygons need to be stored in MongoDB and there is a special way that needs to be done. It would not have been a big deal if it wasn&rsquo;t for this fact. There isn&rsquo;t just one polygon for each area. There is an external polygon and then zero to many interior polygons that need to be stored in relationship.	0cf5b5362dfce917a2b0601e09efa59d55749d76	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.573445	0			'area':22,69 'big':52 'build':12 'code':13 'deal':53 'differ':19 'done':45 'extern':73 'fact':60 'forecast':21 'go':7 'interior':80 'isn':62 'load':15 'mani':79 'marin':20 'mongodb':34 'need':29,42,83 'one':65 'polygon':16,28,66,74,81 'relationship':88 'slice':1,3,5 'special':39 'state':26 'store':32,86 'unit':25 'wasn':56 'way':40 'work':10 'would':47 'zero':77	en	
239	Understanding Defer, Panic and Recover	{"ver":2,"uid":1,"hash":"SHA1:264aa84124b346c5b74f19f86c2558357df7a3c5"}	https://www.ardanlabs.com/blog/2013/06/understanding-defer-panic-and-recover.html	2013-06-08 00:00:00	I am building my TraceLog package and it is really important that the package logs any internal exceptions and prevents panics from shutting down the application. The TraceLog package must never be responsible for shutting down an application. I also have internal go routines that must never terminate until the application is shut down gracefully.\nUnderstanding how to use Defer and Recover in your application can be a bit tricky at first, especially if you are used to using try/catch blocks.	200d8482391263c398d2920bf81d2ee116b147e8	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.618083	0			'also':45 'applic':31,43,56,70 'bit':74 'block':86 'build':8 'defer':2,65 'especi':78 'except':23 'first':77 'go':48 'grace':60 'import':16 'intern':22,47 'log':20 'must':35,51 'never':36,52 'packag':11,19,34 'panic':3,26 'prevent':25 'realli':15 'recov':5,67 'respons':38 'routin':49 'shut':28,40,58 'termin':53 'tracelog':10,33 'tricki':75 'try/catch':85 'understand':1,61 'use':64,82,84	en	
1121	细数 TS 中那些奇怪的符号	{"ver":2,"uid":1,"hash":"SHA1:054aa40bc4c3559e0607eac4b8d297de9b1f9ad9"}	https://toutiao.io/k/k3m6d3m	2020-09-10 01:10:12	细数 TS 中那些奇怪的符号	240a2900588a89b13b4fffccd9f538bfc366276f	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.60465	0			'ts':2,5 '中那些奇怪的符号':3,6 '细数':1,4	zh	
1120	[译] 如何处理 JavaScript 比较中的临界情况	{"ver":2,"uid":1,"hash":"SHA1:aab6508addfef358b904e6f93e181bc7f93f19ab"}	https://toutiao.io/k/lpv3zfu	2020-09-10 01:10:12	[译] 如何处理 JavaScript 比较中的临界情况	d5b083a6c9e319d7e311d92e684a34f63929ede7	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.60697	0			'javascript':3,7 '如何处理':2,6 '比较中的临界情况':4,8 '译':1,5	zh	
810	Facebook 开源 Go ORM 项目 ent schema 使用（上）	{"ver":2,"uid":1,"hash":"SHA1:04dfac94ab4b0198d6f0298de40095ed3876df6a"}	https://toutiao.io/k/tl3rnpv	2020-09-01 01:10:09	Facebook 开源 Go ORM 项目 ent schema 使用（上）	7a437aaf53a1eb1c9718e13f41f5ddd78ad051e4	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.700137	0			'ent':6,15 'facebook':1,10 'go':3,12 'orm':4,13 'schema':7,16 '上':9,18 '使用':8,17 '开源':2,11 '项目':5,14	zh	
811	[推荐] 还以为 VSCode 是程序员专属的工具？那你可太小看它了	{"ver":2,"uid":1,"hash":"SHA1:9086b0297c6341db81f24860c7568090aa4257c3"}	https://toutiao.io/k/qit9l0m	2020-09-04 17:10:11	[推荐] 还以为 VSCode 是程序员专属的工具？那你可太小看它了	634d531cd3aea39bbbcfc0e053774ced78eb7e14	\N	f	2020-09-01 01:10:00	2020-09-10 05:10:14.646792	0			'vscode':3,8 '推荐':1,6 '是程序员专属的工具':4,9 '还以为':2,7 '那你可太小看它了':5,10	zh	
813	基于 Spark 的大规模推荐系统特征工程	{"ver":2,"uid":1,"hash":"SHA1:87255abc878eab612afa08488590b8cd66b9055a"}	https://toutiao.io/k/90jrxp6	2020-09-01 01:10:09	基于 Spark 的大规模推荐系统特征工程	2b49d772eba03888190df9362a01e154808a59e7	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.704626	0			'spark':2,5 '基于':1,4 '的大规模推荐系统特征工程':3,6	zh	
226	An RSS Feed Searching Framework Using Go	{"ver":2,"uid":1,"hash":"SHA1:71c698186e14b0d2e8963a47360a4a68e538c739"}	https://www.ardanlabs.com/blog/2013/07/an-rss-feed-searching-framework-using-go.html	2013-07-29 00:00:00	This article was written for and published by Safari Books Online Back in May, I finally decided that it was time to move away from the Microsoft stack to Linux. The cost of developing, licensing, and purchasing cloud computing on the Microsoft stack is too expensive. My company was approved for BizSpark, which made development possible for a small company like mine, but what am I going to do three years from now?	5bc1e0c221b580cb349877745ee8816516a274c0	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.592521	0			'approv':57 'articl':9 'away':31 'back':19 'bizspark':59 'book':17 'cloud':45 'compani':55,67 'comput':46 'cost':39 'decid':24 'develop':41,62 'expens':53 'feed':3 'final':23 'framework':5 'go':7,74 'licens':42 'like':68 'linux':37 'made':61 'may':21 'microsoft':34,49 'mine':69 'move':30 'onlin':18 'possibl':63 'publish':14 'purchas':44 'rss':2 'safari':16 'search':4 'small':66 'stack':35,50 'three':77 'time':28 'use':6 'written':11 'year':78	en	
814	一键解锁网易云音乐变灰歌曲	{"ver":2,"uid":1,"hash":"SHA1:6e47765a8d97927d44aa91d08e68d95ce401b572"}	https://toutiao.io/k/y4xv4tr	2020-09-01 01:10:09	一键解锁网易云音乐变灰歌曲	74f6d4b4835167742ed4218e56f8342c4b8962f3	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.687714	0			'一键解锁网易云音乐变灰歌曲':1,2	zh	
812	用户画像面面谈	{"ver":2,"uid":1,"hash":"SHA1:a538086f058f85d89eed588fb2a2df70722ecb0c"}	https://toutiao.io/k/md213f8	2020-09-01 01:10:09	用户画像面面谈	68ced872d9181696d1a015aea0e5c49640003eca	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.698023	0			'用户画像面面谈':1,2	zh	
897	U.S. court: Mass surveillance program exposed by Snowden was illegal	{"ver":2,"uid":1,"hash":"SHA1:7b07399dd732ca3f776108a3781f25897ab3a721"}	https://www.reuters.com/article/us-usa-nsa-spying/u-s-court-mass-surveillance-program-exposed-by-snowden-was-illegal-idUSKBN25T3CK	2020-09-03 13:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24362047"> https://news.ycombinator.com/item?id=24362047 </a>	af106e567796fc2d96480e162ba4a2fc275f146b	\N	f	2020-09-03 13:10:00	2020-09-06 22:10:10.359863	0			'/item?id=24362047':14 'comment':11 'court':2 'expos':6 'illeg':10 'mass':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24362047':12 'program':5 'snowden':8 'surveil':4 'u.s':1	zh	nabla9
722	The Go team's next steps with generics	{"ver":2,"uid":1,"hash":"SHA1:5e8573a6c4a5872f3995dc408658088af39119d1"}	https://golangweekly.com/issues/327	2020-08-28 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#327 — August 28, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/94273/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/94274/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94275/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/se5d7cz5idlh13daptjo.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94275/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">Moving Forward with the Generics Design Draft</a></span> — Unfortunately this discussion requires a Google login, but in short the Go team have decided to move forward with the proposed draft design for generics (<a href="https://golangweekly.com/link/94276/rss" style=" color: #0099b4;   ">some background here</a>) with some changes, such as the use of square brackets and the <code>type</code> keyword before type parameters will be dropped.</p>\n  <p>Ian Lance Taylor, et al. </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94277/rss" title="opensource.googleblog.com" style=" color: #0099b4;    font-size: 1.05em;">New Case Studies About Google’s Use of Go</a></span> — Go has turned out to have a much broader reach than even its creators expected. Its growth in the industry has been phenomenal, and it has powered many Google projects.</p>\n  <p>Rob Pike </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/94278/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/ea7b4c85.png" width="80" height="80" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94278/rss" title="dashboard.redisgreen.net" style=" color: #0099b4;    font-size: 1.05em;">Redis 6.0 on RedisGreen</a></span> — SSL encryption, key size tracking, memory mapping, online upgrades, and more.</p>\n  <p>RedisGreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94279/rss" title="dylanmeeus.github.io" style=" color: #0099b4;    font-size: 1.05em;">Audio From Scratch with Go: Waveform Synthesis</a></span> — The latest in <a href="https://golangweekly.com/link/94280/rss" style=" color: #0099b4;   ">a series of posts</a> about working with audio from Go covers actually creating wave files from scratch using soundwaves of your own creation.</p>\n  <p>Dylan Meeus </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94281/rss" title="maori.geek.nz" style=" color: #0099b4;    font-size: 1.05em;">Making an Asteroids Game with Lorca/Webview and WebAssembly</a></span> — Brings together some interesting tools to create a retro ‘Asteroids’ clone that can be distributed as a desktop app.</p>\n  <p>Graham Jenson </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94282/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">ultimate-go: One Dev's Notes On Working with Go</a></span> — A very large repo covering many aspects of Go, from syntax to concurrency to data structures and more.</p>\n  <p>ylzhao </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94283/rss" title="bit.ly" style=" color: #0099b4;    font-size: 1.05em;">Senior Software Engineer at Even (Anywhere)</a></span> — Help people break the paycheck-to-paycheck cycle. Build w/ Go, React Native, GraphQL, Postgres, Bazel. Remote encouraged.</p>\n  <p>EVEN </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94284/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Hiring Mid-Level &amp; Seniors North America Remote Go Engineers</a></span> — Must have good “architecture” skills, solid Go coding skills, and a deep understanding of Go and Kubernetes.</p>\n  <p>Ardan Labs </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94285/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">Find a Job Through Vettery</a></span> — Create a profile on Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94286/rss" title="centrifugal.github.io" style=" color: #0099b4;    font-size: 1.05em;">Experimenting with QUIC and WebTransport in Go</a></span> — WebTransport (which has been called a ‘better WebSocket’ before) is a new browser API for bi-directional client-server messaging. QUIC is a Google-created transport based on UDP. Together, they may form the next standard in real-time web apps.</p>\n  <p>Centrifugal </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94287/rss" title="dunglas.fr" style=" color: #0099b4;    font-size: 1.05em;">A Structured HTTP Fields Parser and Serializer for Go</a></span> — <a href="https://golangweekly.com/link/94288/rss" style=" color: #0099b4;   ">“Structured Field Values for HTTP”</a> is a forthcoming standard to define data types for HTTP headers and trailers (essentially headers that <em>follow</em> chunked HTTP responses). Learn about them and get a cool, Go-based parser as a bonus.</p>\n  <p>Kévin Dunglas </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94289/rss" title="link.sqreen.com" style=" color: #0099b4;    font-size: 1.05em;">The Go Security Checklist</a></span> — Ensure the infrastructure and the code of your Go applications are secure with the latest actionable best practices.</p>\n  <p>Sqreen <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94290/rss" title="dmv.myhatchpad.com" style=" color: #0099b4;    font-size: 1.05em;">Mocking Techniques for Go</a></span> — Five techniques for mocking out dependencies in Go that address various situations, including yours, probably. Don’t let clumsy external bits stop you from testing!</p>\n  <p>Hatchpad </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94292/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">go-reddit: A Library for Accessing the Reddit API</a></span> — For when you want to pull links from Reddit, create a bot, or whatever.</p>\n  <p>Vartan Benohanian </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94291/rss" title="godoc.org" style=" color: #0099b4;    font-size: 1.05em;">modernc/sqlite: A Now Cgo-Free <code>database/sql</code> SQLite Driver</a></span> — An in-process implementation of the self-contained, zero-configuration, transactional SQLite database engine, now with its first stable release for <code>linux/amd64</code> and cgo free for the first time.</p>\n  <p>modernc </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94293/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Minify: Go Minifiers for Web Formats (CSS, HTML, JSON, etc.)</a></span> — There’s a <a href="https://golangweekly.com/link/94294/rss" style=" color: #0099b4;   ">live online demo</a> and JavaScript minification support has been added as of this week’s <a href="https://golangweekly.com/link/94295/rss" style=" color: #0099b4;   ">v2.9.0 release.</a></p>\n  <p>Taco de Wolff </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94296/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Maddy: A Composable All-in-One Mail Server</a></span> — Can work as an MTA, accept messages via SMTP, store messages and even provide access to them over IMAP.</p>\n  <p>Max Mazurov </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94297/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">xmlquery: An XPath Library for Querying XML Documents</a></span> — For plucking out all elements with certain names or attributes, say.</p>\n  <p>antchfx </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94298/rss" title="go.bitmovin.com" style=" color: #0099b4;    font-size: 1.05em;">What’s the Best Way to Protect Your Content from Piracy? Learn Here</a></span></p>\n  <p>Bitmovin Inc. <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94299/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">go-nfs: A Go-Powered NFSv3 Server</a></span> — Early days and read only, for now.</p>\n  <p>Will Scott </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94300/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">(Another) httpmock: Lightweight HTTP Mocking on top of <code>httptest</code></a></span> — We recently linked to Jared Morse’s <a href="https://golangweekly.com/link/94301/rss" style=" color: #0099b4;   ">httpmock</a> but have been told about this other option with the same name.</p>\n  <p>Dan Kinder </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94302/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">progressbar 3.4: A Basic Thread-Safe Progress Bar</a></span></p>\n  <p>Zack Scholl </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/327/rss" width="1" height="1" />	52dea5b4ae6195156f45760fe6f9a5c0aebe4908	\N	f	2020-08-28 15:10:00	2020-09-10 05:10:12.741146	0			'2020':12 '28':11 '3.4':694 '327':9 '500':307 '6.0':122 'a':31,95,148,188,197,213,279,289,294,330,335,349,371,386,410,417,480,497,504,557,579,647,695 'about':83,152,406,683 'accept':592 'access':601 'accessing':483 'actionable':440 'actually':159 'added':567 'address':458 'al':79 'all':582,619 'all-in-one':581 'america':265 'an':174,512,590,609 'and':65,112,134,179,229,278,284,305,321,376,396,408,428,537,561,598,655 'another':662 'antchfx':627 'anywhere':238 'api':338,486 'app':199 'applications':434 'apps':369 'architecture':272 'ardan':286 'are':435 'as':59,196,416,568,589 'aspects':219 'asteroids':175,190 'at':236,303 'attributes':625 'audio':138,155 'august':10 'background':53 'bar':701 'based':354,414 'basic':696 'bazel':255 'be':73,194 'been':110,328,566,681 'before':69,333 'benohanian':502 'best':441,631 'better':331 'bi':341 'bi-directional':340 'bitmovin':641 'bits':469 'bonus':418 'bot':498 'brackets':64 'break':241 'brings':181 'broader':97 'browser':337 'build':248 'but':34,679 'called':329 'can':193,587 'case':81 'centrifugal':370 'certain':622 'cgo':507,538 'cgo-free':506 'changes':57 'checklist':424 'chunked':402 'client':344 'client-server':343 'clone':191 'clumsy':467 'code':430,475 'coding':276 'companies':308 'composable':580 'concurrency':225 'configuration':524 'connect':299 'contained':521 'content':636 'cool':411 'covering':217 'covers':158 'create':187,293,496 'created':352 'creating':160 'creation':170 'creators':102 'css':551 'cycle':247 'dan':691 'data':227,391 'database':527 'database/sql':509 'days':654 'de':576 'decided':41 'deep':280 'define':390 'demo':560 'dependencies':454 'design':25,49 'desktop':198 'dev':206 'directional':342 'discussion':29 'distributed':195 'documents':615 'don':464 'draft':26,48 'driver':511 'dropped':74 'dunglas':420 'dylan':171 'early':653 'elements':620 'encouraged':257 'encryption':126 'engine':528 'engineer':235 'engineers':268 'ensure':425 'essentially':398 'et':78 'etc':554 'even':100,237,258,599 'expected':103 'experimenting':318 'external':468 'field':381 'fields':374 'files':162 'find':288 'first':532,542 'five':449 'follow':401 'for':50,312,339,378,383,393,447,451,482,487,535,540,548,612,616,658 'form':360 'formats':550 'forthcoming':387 'fortune':306 'forward':21,44 'free':311,508,539 'from':139,156,163,222,472,494,637 'game':176 'generics':8,24,51 'get':409 'go':2,38,88,89,142,157,204,212,221,250,267,275,283,324,379,413,422,433,448,456,478,546,645,649 'go-based':412 'go-nfs':644 'go-powered':648 'go-reddit':477 'golang':18 'good':271 'google':32,84,117,351 'google-created':350 'graham':200 'graphql':253 'growth':105 'has':90,109,114,327,565 'hatchpad':474 'have':40,94,270,680 'headers':395,399 'help':239 'here':54,640 'hiring':259,301 'html':552 'http':373,384,394,403,665 'httpmock':663,678 'httptest':670 'ian':75 'imap':605 'implementation':516 'in':35,106,147,323,364,455,514,583 'in-process':513 'inc':642 'including':461 'industry':108 'infrastructure':427 'interesting':184 'is':334,348,385 'it':113,309 'its':101,104,531 'jared':675 'javascript':562 'jenson':201 'job':290,314 'job-seekers':313 'jobs':232 'json':553 'key':127 'keyword':68 'kinder':692 'kubernetes':285 'kévin':419 'labs':287 'lance':76 'large':215 'latest':146,439 'learn':405,639 'let':466 'level':262 'library':481,611 'lightweight':664 'linked':673 'links':493 'linux/amd64':536 'live':558 'login':33 'lorca/webview':178 'maddy':578 'mail':585 'making':173 'managers':302 'many':116,218 'mapping':131 'max':606 'may':359 'mazurov':607 'meeus':172 'memory':130 'messages':593,597 'messaging':346 'mid':261 'mid-level':260 'minification':563 'minifiers':547 'minify':545 'mocking':445,452,666 'modernc':544 'modernc/sqlite':503 'more':135,230 'morse':676 'move':43 'moving':20 'mta':591 'much':96 'must':269 'name':690 'names':623 'native':252 'new':80,336 'next':5,362 'nfs':646 'nfsv3':651 'north':264 'notes':208 'now':505,529,659 'of':62,87,150,167,220,282,431,517,569,669 'on':15,123,209,296,355,667 'one':205,584 'online':132,559 'only':657 'option':686 'or':499,624 'other':685 'out':92,453,618 'over':604 'own':169 'parameters':71 'parser':375,415 'paycheck':244,246 'paycheck-to-paycheck':243 'people':240 'phenomenal':111 'pike':120 'piracy':638 'plucking':617 'postgres':254 'posts':151 'powered':115,650 'practices':442 'probably':463 'process':515 'profile':295 'progress':700 'progressbar':693 'projects':118 'proposed':47 'protect':634 'provide':600 'pull':492 'querying':613 'quic':320,347 'reach':98 'react':251 'read':14,656 'real':366 'real-time':365 'recently':672 'reddit':479,485,495 'redis':121 'redisgreen':124,136 'release':534,574 'remote':256,266 'repo':216 'requires':30 'responses':404 'retro':189 'rob':119 's':4,85,207,310,556,572,629,677 'safe':699 'same':689 'say':626 'scholl':703 'scott':661 'scratch':140,164 'secure':436 'security':423 'seekers':315 'self':520 'self-contained':519 'senior':233 'seniors':263 'serializer':377 'series':149 'server':345,586,652 'short':36 'situations':460 'size':128 'skills':273,277 'smtp':595 'software':234 'solid':274 'some':52,56,183 'soundwaves':166 'sponsor':137,444,643 'sqlite':510,526 'sqreen':443 'square':63 'ssl':125 'stable':533 'standard':363,388 'startups':304 'steps':6 'stop':470 'store':596 'structured':372,380 'structures':228 'studies':82 'such':58 'support':564 'syntax':223 'synthesis':144 't':465 'taco':575 'taylor':77 'team':3,39 'techniques':446,450 'testing':473 'than':99 'that':192,400,457 'the':1,16,23,37,46,60,66,107,145,242,361,421,426,429,438,484,518,541,630,688 'them':407,603 'there':555 'they':358 'this':28,570,684 'thread':698 'thread-safe':697 'through':291 'time':367,543 'to':42,93,186,224,226,245,298,389,491,602,633,674 'together':182,357 'told':682 'tools':185,476 'top':668 'tracking':129 'trailers':397 'transactional':525 'transport':353 'turned':91 'tutorials':317 'type':67,70 'types':392 'udp':356 'ultimate':203 'ultimate-go':202 'understanding':281 'unfortunately':27 'unsubscribe':13 'upgrades':133 'use':61,86 'using':165 'v2.9.0':573 'values':382 'various':459 'vartan':501 'very':214 'vettery':292,297,316 'via':594 'w':249 'want':490 'wave':161 'waveform':143 'way':632 'we':671 'web':17,368,549 'webassembly':180 'websocket':332 'webtransport':322,325 'week':571 'weekly':19 'what':628 'whatever':500 'when':488 'which':326 'will':72,660 'with':7,22,45,55,141,154,177,211,300,319,437,530,621,687 'wolff':577 'work':588 'working':153,210 'xml':614 'xmlquery':608 'xpath':610 'ylzhao':231 'you':471,489 'your':168,432,635 'yours':462 'zack':702 'zero':523 'zero-configuration':522		
816	我半夜爬了严选的女性文胸数据，发现了惊天秘密	{"ver":2,"uid":1,"hash":"SHA1:fdafe91b03506afe994f0c8ac5e5aeb0e1136dfe"}	https://toutiao.io/k/9na1q0e	2020-09-01 01:10:09	我半夜爬了严选的女性文胸数据，发现了惊天秘密	887ae21b908aee3be232bba7a1aad941905f4c76	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.695877	0			'发现了惊天秘密':2,4 '我半夜爬了严选的女性文胸数据':1,3	zh	
815	KDD Cup 2020 自动图学习比赛冠军技术方案及在美团广告的实践	{"ver":2,"uid":1,"hash":"SHA1:9a2a77f3a72b39eb6d4f2c799995ddcd3b084b15"}	https://toutiao.io/k/dbi87y2	2020-09-01 01:10:09	KDD Cup 2020 自动图学习比赛冠军技术方案及在美团广告的实践	9ecf16ef5fc361ee08aad9ca998644b07dd19f73	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.706515	0			'2020':3,7 'cup':2,6 'kdd':1,5 '自动图学习比赛冠军技术方案及在美团广告的实践':4,8	zh	
227	An Open Source Debate	{"ver":2,"uid":1,"hash":"SHA1:6c350b8550350439cb366319fa060c170fe0d85a"}	https://www.ardanlabs.com/blog/2013/07/an-open-source-debate.html	2013-07-27 00:00:00	This article was written for and published by Safari Books Online\nIf you read my article titled Analyze Data With MongoDB and Go, then you will understand the context of this debate with the idea of open source. That article talks about an application we are building, and it publishes some of the proprietary data we are gathering. It also shows techniques we are using to perform the data analysis. This has caused a passionate debate among the business partners in my company.	633b1f827f7df93f57acc5bfcd679565cbdee0e3	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.594305	0			'also':64 'among':81 'analysi':74 'analyz':22 'applic':48 'articl':6,20,44 'book':14 'build':51 'busi':83 'caus':77 'compani':87 'context':33 'data':23,59,73 'debat':4,36,80 'gather':62 'go':27 'idea':39 'mongodb':25 'onlin':15 'open':2,41 'partner':84 'passion':79 'perform':71 'proprietari':58 'publish':11,54 'read':18 'safari':13 'show':65 'sourc':3,42 'talk':45 'techniqu':66 'titl':21 'understand':31 'use':69 'written':8	en	
898	React is becoming a black box	{"ver":2,"uid":1,"hash":"SHA1:e0f776a6b0e68bf63bb28dcb55f3a90cdf6449de"}	https://jaredpalmer.com/blog/react-is-becoming-a-black-box	2020-09-03 20:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24363261"> https://news.ycombinator.com/item?id=24363261 </a>	9d5dd18cddb9d7cfc0c4ab82a799884e4e538481	\N	f	2020-09-03 20:10:00	2020-09-06 22:10:10.353078	0			'/item?id=24363261':10 'becom':3 'black':5 'box':6 'comment':7 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24363261':8 'react':1	zh	keenondrums
511	[推荐] Spring 中异步注解 @Async 的使用、原理及使用时可能导致的问题	{"ver":2,"uid":1,"hash":"SHA1:75de3324e400e531fadcde64135754cf7ec5e5dc"}	https://toutiao.io/k/g063et3	2020-08-29 06:10:10	[推荐] Spring 中异步注解 @Async 的使用、原理及使用时可能导致的问题	cb75379818bf52c533ed644690e606ce6b364156	\N	f	2020-08-22 03:10:00	2020-09-05 15:10:08.067971	0			'async':4,10 'spring':2,8 '中异步注解':3,9 '原理及使用时可能导致的问题':6,12 '推荐':1,7 '的使用':5,11	zh	
934	Daniel Stenberg (curl) has been denied entry to the US for 870 days	{"ver":2,"uid":1,"hash":"SHA1:ac91ff59e4dff3db3a1cd475afdc956ddd686e8f"}	https://daniel.haxx.se/us-visa.html	2020-09-04 07:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24369233"> https://news.ycombinator.com/item?id=24369233 </a>	21b9b6b7337f98f158f0b2292b038539a8653fdc	\N	f	2020-09-04 07:10:00	2020-09-07 17:10:10.047591	0			'/item?id=24369233':17 '870':12 'comment':14 'curl':3 'daniel':1 'day':13 'deni':6 'entri':7 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24369233':15 'stenberg':2 'us':10	zh	tehwebguy
181	Error Handling In Go, Part II	{"ver":2,"uid":1,"hash":"SHA1:08b0ba38bafeb244c7640f745d8d67ac9c3247ed"}	https://www.ardanlabs.com/blog/2014/11/error-handling-in-go-part-ii.html	2014-11-10 00:00:00	Introduction\nIn part I of this post, we learned about the error interface and how the standard library provides support for creating error interface values via the errors package. We also learned how to work with error interface values and use them to identify when an error has occured. Finally, we saw how some packages in the standard library export error interface variables to help us identify specific errors.	c73b4d6014886605cf839b6ce0533a455ff32198	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.505319	0			'also':37 'creat':28 'error':1,18,29,34,43,53,67,75 'export':66 'final':56 'go':4 'handl':2 'help':71 'identifi':50,73 'ii':6 'interfac':19,30,44,68 'introduct':7 'learn':15,38 'librari':24,65 'occur':55 'packag':35,61 'part':5,9 'post':13 'provid':25 'saw':58 'specif':74 'standard':23,64 'support':26 'us':72 'use':47 'valu':31,45 'variabl':69 'via':32 'work':41	en	
820	Redis 有序集合相关命令	{"ver":2,"uid":1,"hash":"SHA1:cd70457c21e0f8323c9cf5cc8827865046ebe892"}	https://toutiao.io/k/g20qcon	2020-09-01 01:10:09	Redis 有序集合相关命令	72af33a3adf7c46df60a0402aea80c37670d2c0b	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.712373	0			'redis':1,3 '有序集合相关命令':2,4	zh	
941	Thirty years ago today I made the final gold masters for Monkey Island	{"ver":2,"uid":1,"hash":"SHA1:525d55de5bd5e590accdd641798e21a5c07caac2"}	https://grumpygamer.com/thirty_years_ago	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24361614"> https://news.ycombinator.com/item?id=24361614 </a>	f8ac358464100e3e51d511c0af3cfd152488cccb	\N	f	2020-09-04 20:10:00	2020-09-06 22:10:10.356439	0			'/item?id=24361614':17 'ago':3 'comment':14 'final':8 'gold':9 'island':13 'made':6 'master':10 'monkey':12 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24361614':15 'thirti':1 'today':4 'year':2	zh	D_Guidi
818	从零开始编写一个库到 crates 中心	{"ver":2,"uid":1,"hash":"SHA1:fb0179d540408c6df3935177e370a418fa949a14"}	https://toutiao.io/k/ek7qadb	2020-09-01 01:10:09	从零开始编写一个库到 crates 中心	46166812bc43e6f31de83cb8556a208feea4136e	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.714354	0			'crates':2,5 '中心':3,6 '从零开始编写一个库到':1,4	zh	
200	Three-Index Slices in Go 1.2	{"ver":2,"uid":1,"hash":"SHA1:8312497554a567c28504a1f6b6412bf8480cb942"}	https://www.ardanlabs.com/blog/2013/12/three-index-slices-in-go-12.html	2013-12-17 00:00:00	With the release of Go 1.2, slices gained the ability to specify the capacity when performing a slicing operation. This doesn&rsquo;t mean we can use this index to extend the capacity of the underlying array. It means we can create a new slice whose capacity is restricted. Restricting the capacity provides a level of protection to the underlying array and gives us more control over append operations.\nHere are the release notes and design document for the feature request:	dc323ed993bd19902df33bf0641ad4ffd1329870	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.542914	0			'1.2':7,13 'abil':17 'append':74 'array':43,67 'capac':21,39,53,58 'control':72 'creat':48 'design':82 'document':83 'doesn':28 'extend':37 'featur':86 'gain':15 'give':69 'go':6,12 'index':3,35 'level':61 'mean':30,45 'new':50 'note':80 'oper':26,75 'perform':23 'protect':63 'provid':59 'releas':10,79 'request':87 'restrict':55,56 'slice':4,14,25,51 'specifi':19 'three':2 'three-index':1 'under':42,66 'us':70 'use':33 'whose':52	en	
819	10 年 bloger 告诉你要不要写博客，又该如何优雅地写博客？	{"ver":2,"uid":1,"hash":"SHA1:10a0eb98a05421d219a59ef73e1e77e7c22569a9"}	https://toutiao.io/k/fgq798p	2020-09-01 01:10:09	10 年 bloger 告诉你要不要写博客，又该如何优雅地写博客？	6436e200cc73da05a7656b9f7fca393c4e8fd2d7	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.702653	0			'10':1,6 'bloger':3,8 '又该如何优雅地写博客':5,10 '告诉你要不要写博客':4,9 '年':2,7	zh	
817	JS 真的可以为所欲为之绕过 ContextProvider 给 useRequest 注入全局配置	{"ver":2,"uid":1,"hash":"SHA1:08110f89f681316f5501ef5c51f36e158b4c4c2b"}	https://toutiao.io/k/wmkm5fk	2020-09-01 01:10:09	JS 真的可以为所欲为之绕过 ContextProvider 给 useRequest 注入全局配置	0ad577a47c26286b19b6da73943e95f41df940e1	\N	f	2020-09-01 01:10:00	2020-09-01 23:10:10.708496	0			'contextprovider':3,9 'js':1,7 'userequest':5,11 '注入全局配置':6,12 '真的可以为所欲为之绕过':2,8 '给':4,10	zh	
766	Level 3 Global Outage	{"ver":2,"uid":1,"hash":"SHA1:6c980f51516b86aa056e69cdf38983721cf95917"}	https://puck.nether.net/pipermail/outages/2020-August/013187.html	2020-08-30 16:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24322861"> https://news.ycombinator.com/item?id=24322861 </a>	12a2d745bce1725fda6b44dadaa7a713520c0ab8	\N	f	2020-08-30 16:10:00	2020-09-03 18:10:09.042926	0			'/item?id=24322861':8 '3':2 'comment':5 'global':3 'level':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24322861':6 'outag':4	zh	dknecht
209	Functions and Naked Returns In Go	{"ver":2,"uid":1,"hash":"SHA1:1526a8a0e6829b92d72929330071782fc45154c4"}	https://www.ardanlabs.com/blog/2013/10/functions-and-naked-returns-in-go.html	2013-10-10 00:00:00	In Go values that are returned from functions are passed by value. Go gives you some nice flexibility when it comes to returning values from a function.\nHere is a simple example of returning two values from a function:\npackage main\nimport (\n&nbsp; &nbsp;&quot;fmt&quot;\n)\nfunc main() {\n&nbsp; &nbsp;id, err := ReturnId()\n&nbsp; &nbsp;if err != nil {\n&nbsp; &nbsp;&nbsp; &nbsp;fmt.Printf(&quot;ERROR: %s&quot;, err)\n&nbsp; &nbsp;&nbsp; &nbsp;return\n&nbsp; &nbsp;}	fb7eb89a056d2fa820886ef323e3c69aa9181288	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.559925	0			'come':27 'err':53,56,61 'error':59 'exampl':38 'flexibl':24 'fmt':49 'fmt.printf':58 'func':50 'function':1,14,33,45 'give':20 'go':6,8,19 'id':52 'import':48 'main':47,51 'nake':3 'nice':23 'nil':57 'packag':46 'pass':16 'return':4,12,29,40,62 'returnid':54 'simpl':37 'two':41 'valu':9,18,30,42	en	
865	GitHub Container Registry	{"ver":2,"uid":1,"hash":"SHA1:df4426231f1e40b6dc814b425fb3bebead75bc72"}	https://github.blog/2020-09-01-introducing-github-container-registry/	2020-09-02 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24343937"> https://news.ycombinator.com/item?id=24343937 </a>	19f944d5a4594e88c9ae48efd34f41d59e0ff635	\N	f	2020-09-02 08:10:00	2020-09-04 19:10:09.018459	0			'/item?id=24343937':7 'comment':4 'contain':2 'github':1 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24343937':5 'registri':3	zh	todsacerdoti
1122	分享一个作为面试官的面试思路	{"ver":2,"uid":1,"hash":"SHA1:0d9f479c5b1a20e9258e596580e3f67180e663e4"}	https://toutiao.io/k/dvtlxd4	2020-09-10 02:10:10	分享一个作为面试官的面试思路	5e7669a1f2e192b0f8f76d0dcf8427704273b90c	\N	f	2020-09-10 02:10:00	2020-09-10 05:10:14.581235	0			'分享一个作为面试官的面试思路':1,2	zh	
1116	任正非：若果有人拧熄了灯塔，我们怎么航行？| 码农周刊第 317 期	{"ver":2,"uid":1,"hash":"SHA1:3a31234e2353990f81c7e651b3c82d7e140f92b2"}	https://toutiao.io/k/ixcjpqn	2020-09-10 01:10:12	任正非：若果有人拧熄了灯塔，我们怎么航行？| 码农周刊第 317 期	4f34b3af5bdedfffe786f5861029dba4bed412ca	\N	f	2020-09-10 01:10:00	2020-09-10 05:10:14.583916	0			'317':5,11 '任正非':1,7 '我们怎么航行':3,9 '期':6,12 '码农周刊第':4,10 '若果有人拧熄了灯塔':2,8	zh	
1124	面试：为了进阿里，需要深入理解 ReentrantLock 原理	{"ver":2,"uid":1,"hash":"SHA1:8b80f3603f2ac442eae1bf95e11f55f8d8f3d688"}	https://toutiao.io/k/clnqzsv	2020-09-10 02:10:10	面试：为了进阿里，需要深入理解 ReentrantLock 原理	6c50e41e6cf190679cb289a968862a24b6eeb350	\N	f	2020-09-10 02:10:00	2020-09-10 05:10:14.600263	0			'reentrantlock':4,9 '为了进阿里':2,7 '原理':5,10 '需要深入理解':3,8 '面试':1,6	zh	
1123	架构设计：基于消息中间件，图解柔性事务一致性	{"ver":2,"uid":1,"hash":"SHA1:d7d4b436c20b5de1aade4c2ad5e2a02284f4d170"}	https://toutiao.io/k/ok2i1z8	2020-09-10 02:10:10	架构设计：基于消息中间件，图解柔性事务一致性	5d4aed7e4ba285bfc54d7db278b9a16aaf440aca	\N	f	2020-09-10 02:10:00	2020-09-10 05:10:14.586906	0			'图解柔性事务一致性':3,6 '基于消息中间件':2,5 '架构设计':1,4	zh	
1125	ClickhHouse 开发数据模型之留存分析	{"ver":2,"uid":1,"hash":"SHA1:e42a64ee7dd56109cb7a0177f81aab1b6efa4c30"}	https://toutiao.io/k/0e7c19c	2020-09-10 02:10:10	ClickhHouse 开发数据模型之留存分析	9717decb32308421c2d2f286d36f5e219b3039bc	\N	f	2020-09-10 02:10:00	2020-09-10 05:10:14.602546	0			'clickhhouse':1,3 '开发数据模型之留存分析':2,4	zh	
175	Copying Interface Values In Go	{"ver":2,"uid":1,"hash":"SHA1:7d988c768b7c64b83f510e709cd49ca2b3728248"}	https://www.ardanlabs.com/blog/2016/05/copying-interface-values-in-go.html	2016-05-05 00:00:00	I am constantly thinking about the Go language and how things work. Lately I have been thinking how everything in Go is by value. We see this when we pass values to functions, when we iterate over slices and when we perform type assertions. In every case, copies of the values that are stored in these data structures are returned. When I first started learning Go this threw me off, but I have come to appreciate the reasonability this brings to our code.	5df1e0b42355df288df26484397249f73459717c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.49377	0			'appreci':81 'assert':49 'bring':85 'case':52 'code':88 'come':79 'constant':8 'copi':1,53 'data':62 'everi':51 'everyth':24 'first':68 'function':38 'go':5,12,26,71 'interfac':2 'iter':41 'languag':13 'late':18 'learn':70 'pass':35 'perform':47 'reason':83 'return':65 'see':31 'slice':43 'start':69 'store':59 'structur':63 'thing':16 'think':9,22 'threw':73 'type':48 'valu':3,29,36,56 'work':17	en	
821	Ruby: We have decided to go forward to 3.0 this year	{"ver":2,"uid":1,"hash":"SHA1:07df3ab7f807da727f00c28d35dc0ba63774ff47"}	https://github.com/ruby/ruby/commit/21c62fb670b1646c5051a46d29081523cd782f11	2020-09-01 03:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24331071"> https://news.ycombinator.com/item?id=24331071 </a>	2b64e6e6210a0b772205dd020d95cb992621e5af	\N	f	2020-09-01 03:10:00	2020-09-02 20:10:09.270324	0			'/item?id=24331071':15 '3.0':9 'comment':12 'decid':4 'forward':7 'go':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24331071':13 'rubi':1 'year':11	zh	anshul
959	Bullfrog After Populous	{"ver":2,"uid":1,"hash":"SHA1:633a1b1b08ab535c4d49905157d8217fa91e2b7e"}	https://www.filfre.net/2020/09/bullfrog-after-populous/	2020-09-05 14:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24376162"> https://news.ycombinator.com/item?id=24376162 </a>	babe790fb82abda487403004634e3e7545a99e6f	\N	f	2020-09-05 14:10:00	2020-09-08 17:10:10.458	0			'/item?id=24376162':7 'bullfrog':1 'comment':4 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24376162':5 'popul':3	zh	doppp
767	New 50-metre deep crater opens up in Arctic tundra	{"ver":2,"uid":1,"hash":"SHA1:724ef36acbdeec528ad866198565bd7abb29029c"}	http://siberiantimes.com/other/others/news/giant-new-50-metre-deep-crater-opens-up-in-arctic-tundra/	2020-08-30 18:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24320637"> https://news.ycombinator.com/item?id=24320637 </a>	42f1edcea25832da01b9f2909172ccdf3a3ec30e	\N	f	2020-08-30 18:10:00	2020-09-01 21:10:09.592965	0			'/item?id=24320637':14 '50':2 'arctic':9 'comment':11 'crater':5 'deep':4 'metr':3 'new':1 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24320637':12 'open':6 'tundra':10	zh	wglb
230	OSCON 2013 - The Gophers Are Coming	{"ver":2,"uid":1,"hash":"SHA1:5c126236b1f15ef66c8aa620aea5d23addccf2c2"}	https://www.ardanlabs.com/blog/2013/07/oscon-2013-gophers-are-coming.html	2013-07-20 00:00:00	On June 22nd through the 26th, Portland Oregon is hosting OSCON (Open Source Convention). The event is run by O&rsquo;Reilly. After looking at the speakers list it appears it is going to be a great convention.\nThere are three Gophers who will be giving talks. Check out the links:\nFrancesc Campoy Flores&nbsp;\nGo Developer Programs Engineer, Google Inc.\nhttp://www.oscon.com/oscon2013/public/schedule/speaker/155088\nJohan Euphrosine\nDeveloper Programs Engineer, Google\nhttp://www.oscon.com/oscon2013/public/schedule/speaker/155083\nBrad Fitzpatrick\nSoftware Engineer, Google	8f827dcaa3c98a0152fb1f66a9a279b7a89d9999	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.60061	0			'/oscon2013/public/schedule/speaker/155083':77 '/oscon2013/public/schedule/speaker/155088':68 '2013':2 '22nd':9 '26th':12 'appear':35 'brad':78 'campoy':58 'check':53 'come':6 'convent':20,43 'develop':61,71 'engin':63,73,81 'euphrosin':70 'event':22 'fitzpatrick':79 'flore':59 'francesc':57 'give':51 'go':38,60 'googl':64,74,82 'gopher':4,47 'great':42 'host':16 'inc':65 'johan':69 'june':8 'link':56 'list':33 'look':29 'o':26 'open':18 'oregon':14 'oscon':1,17 'portland':13 'program':62,72 'reilli':27 'run':24 'softwar':80 'sourc':19 'speaker':32 'talk':52 'three':46 'www.oscon.com':67,76 'www.oscon.com/oscon2013/public/schedule/speaker/155083':75 'www.oscon.com/oscon2013/public/schedule/speaker/155088':66	en	
822	MySQL 读锁的区别和应用场景分析	{"ver":2,"uid":1,"hash":"SHA1:6fa2a56deb567b26b42b3b8dfc86d335bb2c7ace"}	https://toutiao.io/k/l6de1q9	2020-09-01 03:10:09	MySQL 读锁的区别和应用场景分析	010897df0490a6cfe4985599112e965da1185648	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.718182	0			'mysql':1,3 '读锁的区别和应用场景分析':2,4	zh	
807	Interchange in Houston is the same size as an entire city center in Italy	{"ver":2,"uid":1,"hash":"SHA1:9297bac91b5b46ed7dc614205c8ef8b215b9907f"}	https://www.texasmonthly.com/politics/highway-interchange-houston-same-size-city-italy/	2020-09-01 01:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24331698"> https://news.ycombinator.com/item?id=24331698 </a>	daf7386602c02e085e3489b847c07488dc50c17c	\N	f	2020-09-01 01:10:00	2020-09-03 18:10:09.087035	0			'/item?id=24331698':18 'center':12 'citi':11 'comment':15 'entir':10 'houston':3 'interchang':1 'itali':14 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24331698':16 'size':7	zh	pseudolus
1128	糟糕，在错误的分支开发了新功能，该怎么处理呢？	{"ver":2,"uid":1,"hash":"SHA1:cb5ed89f3f020d0c636fbf9d71241109e4cb34f6"}	https://toutiao.io/k/v7p18iw	2020-09-10 04:10:09	糟糕，在错误的分支开发了新功能，该怎么处理呢？	91d52a1fad0121033a5d42443f8b8a012fc36227	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.609295	0			'在错误的分支开发了新功能':2,5 '糟糕':1,4 '该怎么处理呢':3,6	zh	
1129	[译] 大规模微服务利器：eBPF + Kubernetes (KubeCon, 2020)	{"ver":2,"uid":1,"hash":"SHA1:1c324c1f8697b7cd5125e6c0a621b26fd6079ff6"}	https://toutiao.io/k/dehbk59	2020-09-10 04:10:09	[译] 大规模微服务利器：eBPF + Kubernetes (KubeCon, 2020)	2b97c5d2269dd4ae569d8810144ee10eacb1fbf8	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.612186	0			'2020':6,12 'ebpf':3,9 'kubecon':5,11 'kubernetes':4,10 '大规模微服务利器':2,8 '译':1,7	zh	
1130	为开源项目做贡献的 10 个步骤	{"ver":2,"uid":1,"hash":"SHA1:1279bf77b457a81f46a26c3a8ff02a3edfc517ca"}	https://toutiao.io/k/7xbq36k	2020-09-10 04:10:09	为开源项目做贡献的 10 个步骤	d8f7f65347221b13e937541b552fd3eb3ed9e511	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.615072	0			'10':2,5 '个步骤':3,6 '为开源项目做贡献的':1,4	zh	
824	Go 设计模式（二）：工厂模式 & DI 容器	{"ver":2,"uid":1,"hash":"SHA1:8749901511d7f190cf012361e78939db82982da8"}	https://toutiao.io/k/fr4ubtz	2020-09-01 03:10:09	Go 设计模式（二）：工厂模式 & DI 容器	b02d267350a26c9affa8100ac5748f0713bf7b6a	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.693912	0			'di':5,11 'go':1,7 '二':3,9 '容器':6,12 '工厂模式':4,10 '设计模式':2,8	zh	
826	参考近百篇文献，“图像着色” 最全综述	{"ver":2,"uid":1,"hash":"SHA1:306d04bece1d1c51508f3ff11149f5807613e362"}	https://toutiao.io/k/nqnmctv	2020-09-01 03:10:09	参考近百篇文献，“图像着色” 最全综述	1cc95d691a239df01cc4ba9566f365f64513333a	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.721857	0			'参考近百篇文献':1,4 '图像着色':2,5 '最全综述':3,6	zh	
135	Flutter: Forbes had it right	{"ver":2,"uid":1,"hash":"SHA1:5b424ed6820607936930e0c497b5d552516c423d"}	https://www.ardanlabs.com/blog/2019/11/flutter-forbes-had-it-right.html	2019-11-16 00:00:00	“Flutter and Fuchsia. In 2019 you will see these two words everywhere, and now is your chance to get ahead of the curve.” - Todd Fabacher, writing for Forbes\nForbes saw it coming back in July of 2018. If you didn’t, then here’s your chance to find out why they did. From lower lead times to increased productivity, the number of platforms you’ll be able to reach to the simplicity of maintenance, Flutter is now leading the way in just about every category.	5870d0bda1a6fd17e39dfa0bcf6faa3701f26d02	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.415275	0			'2018':42 '2019':10 'abl':72 'ahead':25 'back':38 'categori':90 'chanc':22,51 'come':37 'curv':28 'didn':45 'everi':89 'everywher':17 'fabach':30 'find':53 'flutter':1,6,80 'forb':2,33,34 'fuchsia':8 'get':24 'increas':63 'juli':40 'lead':60,83 'll':70 'lower':59 'mainten':79 'number':66 'platform':68 'product':64 'reach':74 'right':5 'saw':35 'see':13 'simplic':77 'time':61 'todd':29 'two':15 'way':85 'word':16 'write':31	en	
827	版本管理工具及 Ruby 工具链环境	{"ver":2,"uid":1,"hash":"SHA1:f8d42195cd5b7bb0e863a89269dd53fcff43128e"}	https://toutiao.io/k/d1m91ay	2020-09-01 03:10:09	版本管理工具及 Ruby 工具链环境	ee2dcec220225df65ac069201075b5c179d0f922	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.72363	0			'ruby':2,5 '工具链环境':3,6 '版本管理工具及':1,4	zh	
823	高并发系统三大利器之降级	{"ver":2,"uid":1,"hash":"SHA1:fc071261ec2e192a066e0fa6de461d69f181675c"}	https://toutiao.io/k/03hcg05	2020-09-01 03:10:09	高并发系统三大利器之降级	02f317f5acbf742b1dd514fe0576b9a660f15153	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.710317	0			'高并发系统三大利器之降级':1,2	zh	
829	The surreal art of ‘unnatural lighting’	{"ver":2,"uid":1,"hash":"SHA1:fe4f6ea7240638471f2e34f4cb9b7394083b33b0"}	https://www.nationalgeographic.com/magazine/2020/09/the-surreal-art-of-unnatural-lighting/	2020-09-01 06:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24328666"> https://news.ycombinator.com/item?id=24328666 </a>	98c225aa43473b1f2132eae9b5da974093f2cf85	\N	f	2020-09-01 06:10:00	2020-09-03 07:10:08.878952	0			'/item?id=24328666':10 'art':3 'comment':7 'light':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24328666':8 'surreal':2 'unnatur':5	zh	tumidpandora
218	Timer Routines And Graceful Shutdowns In Go	{"ver":2,"uid":1,"hash":"SHA1:e1e5fb1f0932d97a03dce7d56d7730800eef439a"}	https://www.ardanlabs.com/blog/2013/09/timer-routines-and-graceful-shutdowns.html	2013-09-04 00:00:00	In my Outcast data server I have several data retrieval jobs that run using different go routines. Each routine wakes up on a set interval. The most complex job is the downloading of radar images. What makes this complex is that there are 155 radar stations throughout the United States that take a new picture every 120 seconds. All these radar images can be put together to create a mosaic. When the go routine wakes up to pull down the new images, it must do this as quickly as possible for all 155 stations.	591de0eae12df2162c1b7906690b2b7ba64ffd32	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.577243	0			'120':64 '155':51,100 'complex':35,46 'creat':75 'data':11,16 'differ':22 'download':39 'everi':63 'go':7,23,80 'grace':4 'imag':42,69,89 'interv':32 'job':18,36 'make':44 'mosaic':77 'must':91 'new':61,88 'outcast':10 'pictur':62 'possibl':97 'pull':85 'put':72 'quick':95 'radar':41,52,68 'retriev':17 'routin':2,24,26,81 'run':20 'second':65 'server':12 'set':31 'sever':15 'shutdown':5 'state':57 'station':53,101 'take':59 'throughout':54 'timer':1 'togeth':73 'unit':56 'use':21 'wake':27,82	en	
940	Apple to delay privacy change threatening Facebook, mobile ad market	{"ver":2,"uid":1,"hash":"SHA1:87c693f0c4ba5c56cc8aa892eab7dd104e227bc8"}	https://mobile.reuters.com/article/idUSKBN25U2JU	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24366731"> https://news.ycombinator.com/item?id=24366731 </a>	3f3cb135ae82f867066461ad66fd639e8872bdbc	\N	f	2020-09-04 20:10:00	2020-09-06 18:10:11.402163	0			'/item?id=24366731':14 'ad':9 'appl':1 'chang':5 'comment':11 'delay':3 'facebook':7 'market':10 'mobil':8 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24366731':12 'privaci':4 'threaten':6	zh	shaabanban
825	消息队列之事务消息，RocketMQ 和 Kafka 是如何做的？	{"ver":2,"uid":1,"hash":"SHA1:019fcfb50bb57098b7e73349124a475fcf5be5f5"}	https://toutiao.io/k/36hqisn	2020-09-01 03:10:09	消息队列之事务消息，RocketMQ 和 Kafka 是如何做的？	cbd199de4398689b8a07c6732d5a4eaa441bab31	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.716348	0			'kafka':4,9 'rocketmq':2,7 '和':3,8 '是如何做的':5,10 '消息队列之事务消息':1,6	zh	
828	卧槽！竟然可以直接白嫖 Github Action 的 2C7G 服务器	{"ver":2,"uid":1,"hash":"SHA1:842f13ff04a3e51ce549e1e4ed26eacb50e2e698"}	https://toutiao.io/k/dzyi0ws	2020-09-01 03:10:09	卧槽！竟然可以直接白嫖 Github Action 的 2C7G 服务器	30c8151402d5b6226d351a85656545b3b3b5406e	\N	f	2020-09-01 03:10:00	2020-09-01 23:10:10.720057	0			'2c7g':6,13 'action':4,11 'github':3,10 '卧槽':1,8 '服务器':7,14 '的':5,12 '竟然可以直接白嫖':2,9	zh	
183	Go Compiler nil Pointer Checks	{"ver":2,"uid":1,"hash":"SHA1:82c21b481fbd95307827a586cf3371871c145cfa"}	https://www.ardanlabs.com/blog/2014/09/go-compiler-nil-pointer-checks.html	2014-09-01 00:00:00	Introduction\nI was thinking about how the compiler looks to protect the code we write when it can. Invalid memory access checks are one type of safety check the compiler adds to our code. We might think that this &quot;extra code&quot; is hurting our performance and maybe over billions of iterative operations it is. However, these checks can prevent our code from causing damage to the systems we are running on.	3f439376953705d9d8d005a1d3c64cd78bffa2ec	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.509322	0			'access':26 'add':36 'billion':54 'caus':68 'check':5,27,33,62 'code':18,39,46,66 'compil':2,13,35 'damag':69 'extra':45 'go':1 'howev':60 'hurt':48 'introduct':6 'invalid':24 'iter':56 'look':14 'mayb':52 'memori':25 'might':41 'nil':3 'one':29 'oper':57 'perform':50 'pointer':4 'prevent':64 'protect':16 'run':75 'safeti':32 'system':72 'think':9,42 'type':30 'write':20	en	
195	Decode JSON Documents In Go	{"ver":2,"uid":1,"hash":"SHA1:15220c05e99eaafb1a9ba4f1784b4c22893ba795"}	https://www.ardanlabs.com/blog/2014/01/decode-json-documents-in-go.html	2014-01-21 00:00:00	Introduction\nWe are working on a project where we have to make calls into a web service. Many of the web calls return very large documents that contain many sub-documents. The worst part is, we usually only need a handful of the fields for any given document and those fields tend to be scattered all over the place.\nHere is a sample of a smaller document:\nvar document string = {&lt;br /&gt; &amp;quot;userContext&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;conversationCredentials&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;sessionToken&amp;quot;: &amp;quot;06142010_1:75bf6a413327dd71ebe8f3f30c5a4210a9b11e93c028d6e11abfca7ff&amp;quot;&lt;br /&gt; &amp;nbsp; &amp;nbsp; },&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;valid&amp;quot;: true,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;isPasswordExpired&amp;quot;: false,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;cobrandId&amp;quot;: 10000004,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;channelId&amp;quot;: -1,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;locale&amp;quot;: &amp;quot;en_US&amp;quot;,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;tncVersion&amp;quot;: 2,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;applicationId&amp;quot;: &amp;quot;17CBE222A42161A3FF450E47CF4C1A00&amp;quot;,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;cobrandConversationCredentials&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;sessionToken&amp;quot;: &amp;quot;06142010_1:b8d011fefbab8bf1753391b074ffedf9578612d676ed2b7f073b5785b&amp;quot;&lt;br /&gt; &amp;nbsp; &amp;nbsp; },&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;quot;preferenceInfo&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;currencyCode&amp;quot;: &amp;quot;USD&amp;quot;,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;timeZone&amp;quot;: &amp;quot;PST&amp;quot;,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;dateFormat&amp;quot;: &amp;quot;MM/dd/yyyy&amp;quot;,&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;currencyNotationType&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;currencyNotationType&amp;quot;: &amp;quot;SYMBOL&amp;quot;&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;numberFormat&amp;quot;: {&lt;br /&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;decimalSeparator&amp;quot;: &amp;quot;.	d5d4f8f98f1ce24ec17a43fdba7e0177e50107aa	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.532543	0			'-1':130 '06142010':96,172 '1':97,173 '10000004':123 '17cbe222a42161a3ff450e47cf4c1a00':155 '2':147 '75bf6a413327dd71ebe8f3f30c5a4210a9b11e93c028d6e11abfca7ff':98 'applicationid':152 'b8d011fefbab8bf1753391b074ffedf9578612d676ed2b7f073b5785b':174 'br':77,81,87,100,103,110,117,124,131,141,148,157,163,176,179,185,196,207,218,226,239,244,252 'call':18,27 'channelid':128 'cobrandconversationcredenti':161 'cobrandid':121 'contain':33 'conversationcredenti':85 'currencycod':191 'currencynotationtyp':224,234 'dateformat':213 'decimalsepar':260 'decod':1 'document':3,31,37,54,73,75 'en':138 'fals':116 'field':50,57 'given':53 'go':5 'hand':47 'introduct':6 'ispasswordexpir':114 'json':2 'larg':30 'local':135 'make':17 'mani':23,34 'mm/dd/yyyy':216 'nbsp':82,83,88,89,90,91,101,102,104,105,111,112,118,119,125,126,132,133,142,143,149,150,158,159,164,165,166,167,177,178,180,181,186,187,188,189,197,198,199,200,208,209,210,211,219,220,221,222,227,228,229,230,231,232,240,241,242,243,245,246,247,248,253,254,255,256,257,258 'need':45 'numberformat':250 'part':40 'place':65 'preferenceinfo':183 'project':12 'pst':205 'quot':78,80,84,86,92,94,95,99,106,108,113,115,120,122,127,129,134,136,137,140,144,146,151,153,154,156,160,162,168,170,171,175,182,184,190,192,193,195,201,203,204,206,212,214,215,217,223,225,233,235,236,238,249,251,259,261,262 'return':28 'sampl':69 'scatter':61 'servic':22 'sessiontoken':93,169 'smaller':72 'string':76 'sub':36 'sub-docu':35 'symbol':237 'tend':58 'timezon':202 'tncversion':145 'true':109 'us':139 'usd':194 'usercontext':79 'usual':43 'valid':107 'var':74 'web':21,26 'work':9 'worst':39	en	
130	Docker Images : Part II - Details Specific To Different Languages	{"ver":2,"uid":1,"hash":"SHA1:39c7677b7a0c3f67136f360cc97345bde6177c78"}	https://www.ardanlabs.com/blog/2020/02/docker-images-part2-details-specific-to-different-languages.html	2020-02-24 00:00:00	Series Index Reducing Image Size\nDetails Specific To Different Languages\nGoing Farther To Reduce Image Size\nIntroduction In the first part, we introduced multi-stage builds, static and dynamic linking, and briefly mentioned Alpine. In this second part, we are going to dive into some details specific to Go. Then we will talk more about Alpine, because it&rsquo;s worth it; and finally we will see how things play out with other languages like Java, Node, Python, Ruby, and Rust.	8963c4dc02b3806aa8066efb12bbd83ebfc4de59	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.40464	0			'alpin':44,66 'briefli':42 'build':36 'detail':5,15,56 'differ':8,18 'dive':53 'docker':1 'dynam':39 'farther':21 'final':73 'first':29 'go':20,51,59 'ii':4 'imag':2,13,24 'index':11 'introduc':32 'introduct':26 'java':85 'languag':9,19,83 'like':84 'link':40 'mention':43 'multi':34 'multi-stag':33 'node':86 'part':3,30,48 'play':79 'python':87 'reduc':12,23 'rubi':88 'rust':90 'second':47 'see':76 'seri':10 'size':14,25 'specif':6,16,57 'stage':35 'static':37 'talk':63 'thing':78 'worth':70	en	
176	Composition with Go	{"ver":2,"uid":1,"hash":"SHA1:a60a5c9817ea3979960ff43c933410dd761c8f97"}	https://www.ardanlabs.com/blog/2015/09/composition-with-go.html	2015-09-13 00:00:00	Composition goes beyond the mechanics of type embedding. It&rsquo;s a paradigm we can leverage to design better APIs and to build larger programs from smaller parts. It all starts from the declaration and implementation of types that have a single purpose. Programs that are architected with composition in mind have a better chance to grow and adapt to changing needs. They are also much easier to read and reason about.	e726b2c85cee2d04bf740017a3638aab1eeb8ca7	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.49572	0			'adapt':61 'also':67 'api':22 'architect':49 'better':21,56 'beyond':6 'build':25 'chanc':57 'chang':63 'composit':1,4,51 'declar':36 'design':20 'easier':69 'embed':11 'go':3 'goe':5 'grow':59 'implement':38 'larger':26 'leverag':18 'mechan':8 'mind':53 'much':68 'need':64 'paradigm':15 'part':30 'program':27,46 'purpos':45 'read':71 'reason':73 'singl':44 'smaller':29 'start':33 'type':10,40	en	
1131	聊聊 Google 的工程实践（二）	{"ver":2,"uid":1,"hash":"SHA1:0af9014297283d2f14daa2d3089beb1bf1c3a594"}	https://toutiao.io/k/drhzsk5	2020-09-10 04:10:09	聊聊 Google 的工程实践（二）	e1736ffa6ced8472ba7e752968570fe494744063	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.618007	0			'google':2,6 '二':4,8 '的工程实践':3,7 '聊聊':1,5	zh	
1132	[译] 聚焦 Android 11 : 隐私和安全	{"ver":2,"uid":1,"hash":"SHA1:7889d25c75c4ac6771dc977a909cf0310b3b8480"}	https://toutiao.io/k/nccpa6r	2020-09-10 04:10:09	[译] 聚焦 Android 11 : 隐私和安全	2bcc2bd2349d41726550b8f1b518c5d62bf318c0	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.620869	0			'11':4,9 'android':3,8 '聚焦':2,7 '译':1,6 '隐私和安全':5,10	zh	
1133	审查代码有风险吗？	{"ver":2,"uid":1,"hash":"SHA1:f6c1282ee69be2374a1a40c8cd87e5d533697fa6"}	https://toutiao.io/k/zskyk64	2020-09-10 04:10:09	审查代码有风险吗？	5555bf698794bf451905e7f433269e03d9cbe40b	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.623872	0			'审查代码有风险吗':1,2	zh	
964	Bean Validation 声明式校验方法的参数、返回值	{"ver":2,"uid":1,"hash":"SHA1:0eeaf4d5a0deb71d27f323af0da7758069447d32"}	https://toutiao.io/k/010gtdb	2020-09-06 02:10:10	Bean Validation 声明式校验方法的参数、返回值	15336e1e9c230ba869eb6ef7aa02bcefbaf6df42	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.535365	0			'bean':1,5 'validation':2,6 '声明式校验方法的参数':3,7 '返回值':4,8	zh	
969	一图了解 Julia(lang) v2.0	{"ver":2,"uid":1,"hash":"SHA1:3d4d83a6eda8e6e6c15f079083d3635e6074182f"}	https://toutiao.io/k/jjrblp7	2020-09-06 02:10:10	一图了解 Julia(lang) v2.0	45f60098220957df1616166727e43251f7c47d85	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.54412	0			'julia':2,6 'lang':3,7 'v2.0':4,8 '一图了解':1,5	zh	
962	[推荐] 架构设计：基于电商交易流程，图解 TCC 事务分段提交	{"ver":2,"uid":1,"hash":"SHA1:03564238c4a8c1759429554c39ba79557c188d91"}	https://toutiao.io/k/x0ijapt	2020-09-09 17:10:10	[推荐] 架构设计：基于电商交易流程，图解 TCC 事务分段提交	22402babf88310d14e6ec232c721528bc376f2a1	\N	f	2020-09-06 02:10:00	2020-09-10 05:10:14.669343	0			'tcc':5,11 '事务分段提交':6,12 '图解':4,10 '基于电商交易流程':3,9 '推荐':1,7 '架构设计':2,8	zh	
681	Facebook apologizes to users for Apple’s monstrous efforts to protect privacy	{"ver":2,"uid":1,"hash":"SHA1:55ea0ec7dec6d2c044c94f1e241b34fd5806d804"}	https://www.theregister.com/2020/08/27/facebook_ios_ads/	2020-08-27 14:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24291152"> https://news.ycombinator.com/item?id=24291152 </a>	f923c78fb3e1bc8cd30ab7339ee4af700c499c62	\N	f	2020-08-27 14:10:00	2020-08-30 04:10:10.027269	0			'/item?id=24291152':16 'apolog':2 'appl':6 'comment':13 'effort':9 'facebook':1 'monstrous':8 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24291152':14 'privaci':12 'protect':11 'user':4	zh	kiyanwang
966	细数这些年被困扰过的 TS 问题	{"ver":2,"uid":1,"hash":"SHA1:3672af62dcae53f70845ff2cb362d64839c6fb91"}	https://toutiao.io/k/w4qxpoz	2020-09-06 02:10:10	细数这些年被困扰过的 TS 问题	ef886b80b4a6d480d7d91e6cf515471a7fcf621e	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.537298	0			'ts':2,5 '细数这些年被困扰过的':1,4 '问题':3,6	zh	
958	Show HN: Linux sysadmin course, eight years on	{"ver":2,"uid":1,"hash":"SHA1:c1328edce498fbcacec00d499ac8bb73936ab06f"}	https://news.ycombinator.com/item?id=24380969	2020-09-05 14:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24380969"> https://news.ycombinator.com/item?id=24380969 </a>	ec9842690ef940c2f646df95bfc12a00f8cd98f4	\N	f	2020-09-05 14:10:00	2020-09-08 17:10:10.418117	0			'/item?id=24380969':12 'comment':9 'cours':5 'eight':6 'hn':2 'linux':3 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24380969':10 'show':1 'sysadmin':4 'year':7	zh	snori74
866	Bottlerocket, an open source Linux distribution built to run containers	{"ver":2,"uid":1,"hash":"SHA1:d8db4df6c6dcf50cdecce53eaaf6fb272b78c0be"}	https://aws.amazon.com/blogs/opensource/announcing-the-general-availability-of-bottlerocket-an-open-source-linux-distribution-purpose-built-to-run-containers/	2020-09-02 11:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24345035"> https://news.ycombinator.com/item?id=24345035 </a>	ddc3091068eadb389fed24960bf23572791dd9fa	\N	f	2020-09-02 11:10:00	2020-09-04 19:10:09.016252	0			'/item?id=24345035':14 'bottlerocket':1 'built':7 'comment':11 'contain':10 'distribut':6 'linux':5 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24345035':12 'open':3 'run':9 'sourc':4	zh	sshroot
967	Go 设计模式（五）：创建型模式总结	{"ver":2,"uid":1,"hash":"SHA1:f7adea6ab764da742621108b25283d9398263061"}	https://toutiao.io/k/rh2towx	2020-09-06 02:10:10	Go 设计模式（五）：创建型模式总结	8f9cb1bce6e32df27a6051b1cf190d7a952151f8	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.530974	0			'go':1,5 '五':3,7 '创建型模式总结':4,8 '设计模式':2,6	zh	
970	在 Deno 中使用 Node 模块	{"ver":2,"uid":1,"hash":"SHA1:c33ceed49f4f91d731ab729264536bdaa842d08d"}	https://toutiao.io/k/nu94vvy	2020-09-06 02:10:10	在 Deno 中使用 Node 模块	f1802ccbbedc075ca923caaddf744c4dca659079	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.539188	0			'deno':2,7 'node':4,9 '中使用':3,8 '在':1,6 '模块':5,10	zh	
968	Go 实现 Uniswap 本地测试和节点部署	{"ver":2,"uid":1,"hash":"SHA1:7367bc1cef5124b7cc00a17d52151d08f7cb93c8"}	https://toutiao.io/k/jfagizp	2020-09-06 02:10:10	Go 实现 Uniswap 本地测试和节点部署	f93a09c02d2a4a91c54d4c721d48a0bff4130e6c	\N	f	2020-09-06 02:10:00	2020-09-07 00:10:14.541441	0			'go':1,5 'uniswap':3,7 '实现':2,6 '本地测试和节点部署':4,8	zh	
1134	图解 Go 内存管理器的内存分配策略	{"ver":2,"uid":1,"hash":"SHA1:375e1628e27c26ca2519657d1aab106f0285034b"}	https://toutiao.io/k/0rwr3wc	2020-09-10 04:10:09	图解 Go 内存管理器的内存分配策略	6508bb281de5b9f8d8b1c0bf0fffbf57456a38b6	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.62697	0			'go':2,5 '内存管理器的内存分配策略':3,6 '图解':1,4	zh	
965	[推荐] DDD as Code：如何用代码诠释领域驱动设计？	{"ver":2,"uid":1,"hash":"SHA1:d4752018ae5bdb9f431c454692cd9bcc2003f20f"}	https://toutiao.io/k/0dtlx6f	2020-09-09 18:10:10	[推荐] DDD as Code：如何用代码诠释领域驱动设计？	de34400e22f8ee38ef942450873f426360325433	\N	f	2020-09-06 02:10:00	2020-09-10 05:10:14.653695	0			'as':3,8 'code':4,9 'ddd':2,7 '如何用代码诠释领域驱动设计':5,10 '推荐':1,6	zh	
1135	人生极简指南，解决 90% 要用什么软件的烦恼	{"ver":2,"uid":1,"hash":"SHA1:bf5eae0dc4e3aadd34399b28f09ca17f2925b0fb"}	https://toutiao.io/k/st6ewk1	2020-09-10 04:10:09	人生极简指南，解决 90% 要用什么软件的烦恼	9740cdacbabfca3bc4cdf9629817ff2d8dc9b19a	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.630804	0			'90':3,7 '人生极简指南':1,5 '要用什么软件的烦恼':4,8 '解决':2,6	zh	
1136	Redis 和 Memcached 的恩怨情仇	{"ver":2,"uid":1,"hash":"SHA1:141b2d6914d52e9d3225f6edb2d2cbfb62f8057a"}	https://toutiao.io/k/n2w1gfz	2020-09-10 04:10:09	Redis 和 Memcached 的恩怨情仇	de4f5579c19bda9df9df78fd34de70a86cfb0b9b	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:14.634077	0			'memcached':3,7 'redis':1,5 '和':2,6 '的恩怨情仇':4,8	zh	
963	[推荐] 一个 @Transaction 哪里来这么多坑？	{"ver":2,"uid":1,"hash":"SHA1:678f62efeb74572c7541762fafa354dfc8ca9cad"}	https://toutiao.io/k/cxzkwbd	2020-09-09 17:10:10	[推荐] 一个 @Transaction 哪里来这么多坑？	38ac250a7727d75cd1b0c4796f59ea6c2ecaf8ee	\N	f	2020-09-06 02:10:00	2020-09-10 05:10:14.637153	0			'transaction':3,7 '一个':2,6 '哪里来这么多坑':4,8 '推荐':1,5	zh	
754	Tesla’s former CTO is building a giant lithium-ion battery recycling operation	{"ver":2,"uid":1,"hash":"SHA1:2453ad7c92c1bf95ea32a49f8c0837792ff1fee4"}	https://www.wsj.com/articles/one-of-the-brains-behind-tesla-found-a-new-way-to-make-electric-cars-cheaper-11598673630	2020-08-30 01:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24316056"> https://news.ycombinator.com/item?id=24316056 </a>	86c74dbcd5005bc062009fea02763f062e40da45	\N	f	2020-08-30 01:10:00	2020-09-01 21:10:09.550181	0			'/item?id=24316056':18 'batteri':12 'build':6 'comment':15 'cto':4 'former':3 'giant':8 'ion':11 'lithium':10 'lithium-ion':9 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24316056':16 'oper':14 'recycl':13 'tesla':1	zh	Osiris30
139	Why is DevOps Important?	{"ver":2,"uid":1,"hash":"SHA1:9ddc6675440ac8d245c0e35bb2f1ea29fc870d36"}	https://www.ardanlabs.com/blog/2019/08/devops-questions-for-ardan-labs.html	2019-08-26 00:00:00	1. What are four keys for great DevOps? Collaboration: DevOps requires collaboration, both within teams and between teams. Good communication between teams implies to break down silos, which can be harder than it sounds in organizations where a leader and their team are rewarded for individual achievements, discouraging them from collaborating and sharing information with others, and often encouraging politics at the expense of the company&rsquo;s success.\nBlameless Culture: It also requires to internalize that we learn from our failures.	c2d177d1aabc756669761602a6f82cc37ee8a4d4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.422845	0			'1':5 'achiev':51 'also':76 'blameless':73 'break':29 'collabor':13,16,55 'communic':24 'compani':70 'cultur':74 'devop':3,12,14 'discourag':52 'encourag':63 'expens':67 'failur':85 'four':8 'good':23 'great':11 'harder':35 'impli':27 'import':4 'individu':50 'inform':58 'intern':79 'key':9 'leader':43 'learn':82 'often':62 'organ':40 'other':60 'polit':64 'requir':15,77 'reward':48 'share':57 'silo':31 'sound':38 'success':72 'team':19,22,26,46 'within':18	en	
960	Snake in a QR Code	{"ver":2,"uid":1,"hash":"SHA1:8abf463c391ece24c565b68e0a52292f15d2310c"}	https://itsmattkc.com/etc/snakeqr/	2020-09-05 18:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24374570"> https://news.ycombinator.com/item?id=24374570 </a>	a09645aacd03bd4e5f89553badd43c86bb292083	\N	f	2020-09-05 18:10:00	2020-09-07 17:10:10.057519	0			'/item?id=24374570':9 'code':5 'comment':6 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24374570':7 'qr':4 'snake':1	zh	phit_
951	Spring 5 中文解析核心篇：IoC 容器之 Resources	{"ver":2,"uid":1,"hash":"SHA1:3adecb5cc01da456a79323fbd38846b5eab3d106"}	https://toutiao.io/k/4a49e6o	2020-09-05 04:10:09	Spring 5 中文解析核心篇：IoC 容器之 Resources	9a5b57981680093f8033706da1250021577518b0	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.394148	0			'5':2,8 'ioc':4,10 'resources':6,12 'spring':1,7 '中文解析核心篇':3,9 '容器之':5,11	zh	
727	Ethereum Is a Dark Forest	{"ver":2,"uid":1,"hash":"SHA1:0e4281758c78d0973fa8465194fab979c023cbd3"}	https://medium.com/@danrobinson/ethereum-is-a-dark-forest-ecc5f0505dff	2020-08-29 00:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24308588"> https://news.ycombinator.com/item?id=24308588 </a>	57caf48ba43d3b5b2400933e1183182bee8c58d1	\N	f	2020-08-29 00:10:00	2020-09-01 08:10:09.895412	0			'/item?id=24308588':9 'comment':6 'dark':4 'ethereum':1 'forest':5 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24308588':7	zh	gottagetmac
757	前置条件断言	{"ver":2,"uid":1,"hash":"SHA1:b42283b86c275a59cf2058a6d75c2f92a43bd169"}	https://toutiao.io/k/01ah244	2020-08-30 02:10:09	前置条件断言	bc5dc8c5a95f6e44d99e79b34e160da8e7565cf3	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.054832	0			'前置条件断言':1,2	zh	
830	Applebot	{"ver":2,"uid":1,"hash":"SHA1:9df17775c3678e40432b7984ed068085792cd819"}	https://support.apple.com/en-us/HT204683	2020-09-01 10:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24338152"> https://news.ycombinator.com/item?id=24338152 </a>	fcf02b68fb26ed24d30b5ae1cdd622b54a98234a	\N	f	2020-09-01 10:10:00	2020-09-03 18:10:09.079125	0			'/item?id=24338152':5 'applebot':1 'comment':2 'news.ycombinator.com':4 'news.ycombinator.com/item?id=24338152':3	zh	jonbaer
831	Motivation – Keli Language	{"ver":2,"uid":1,"hash":"SHA1:e28b02f1ca565d5c2fd0f5a7820cf8bd39b62dfa"}	https://keli-language.gitbook.io/doc/	2020-09-01 10:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24331635"> https://news.ycombinator.com/item?id=24331635 </a>	10030cd03782357a01c568635d39550268dc466f	\N	f	2020-09-01 10:10:00	2020-09-02 08:10:09.061003	0			'/item?id=24331635':7 'comment':4 'keli':2 'languag':3 'motiv':1 'news.ycombinator.com':6 'news.ycombinator.com/item?id=24331635':5	zh	azhenley
832	Blender 2.90	{"ver":2,"uid":1,"hash":"SHA1:ad697c8b5de9dca38bf91cac027281f29cab5fc8"}	https://www.blender.org/download/releases/2-90/	2020-09-01 10:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24334024"> https://news.ycombinator.com/item?id=24334024 </a>	16b0a8200a9d25c5e0f79c5fb052de795703462b	\N	f	2020-09-01 10:10:00	2020-09-02 01:10:11.656413	0			'/item?id=24334024':6 '2.90':2 'blender':1 'comment':3 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24334024':4	zh	makepanic
952	云原生技术研究：从 bpftrace 看如何利用 eBPF 实现内核追踪	{"ver":2,"uid":1,"hash":"SHA1:0c49974028d288b8209a6c469f6ed6436978a293"}	https://toutiao.io/k/02bl7fl	2020-09-05 04:10:09	云原生技术研究：从 bpftrace 看如何利用 eBPF 实现内核追踪	2fd12739f364417b98701fdef3553fa1f919deeb	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.387801	0			'bpftrace':3,9 'ebpf':5,11 '云原生技术研究':1,7 '从':2,8 '实现内核追踪':6,12 '看如何利用':4,10	zh	
682	Scrollbar Blindness	{"ver":2,"uid":1,"hash":"SHA1:fb5cb42921ddeaedd16ddaa27c2cd037b16110a5"}	https://svenkadak.com/blog/scrollbar-blindness	2020-08-27 17:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24293421"> https://news.ycombinator.com/item?id=24293421 </a>	c60a9434ef124a79f282c6abea27f8595644bc1d	\N	f	2020-08-27 17:10:00	2020-08-30 07:10:09.120877	0			'/item?id=24293421':6 'blind':2 'comment':3 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24293421':4 'scrollbar':1	zh	kadfak
760	Istio 1.7：进击的追风少年	{"ver":2,"uid":1,"hash":"SHA1:680f2477904732e46e9d00a3f8d81ace2a7872b5"}	https://toutiao.io/k/jxa7l5y	2020-08-30 02:10:09	Istio 1.7：进击的追风少年	2860dcf358442ffcda1bbdb530e04d7f33837794	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.039512	0			'1.7':2,5 'istio':1,4 '进击的追风少年':3,6	zh	
756	一页纸测试策略	{"ver":2,"uid":1,"hash":"SHA1:97a555bec9e51bd7a5c3483a4cfa1537bb538643"}	https://toutiao.io/k/f7oqkk0	2020-08-30 02:10:09	一页纸测试策略	c5f4284e886d1a7324c5fbe04e49d4b3303badba	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.044399	0			'一页纸测试策略':1,2	zh	
758	消息链路优化之弱感知链路优化	{"ver":2,"uid":1,"hash":"SHA1:ce138418fec5b2627f31d6381e0abd4d286fb396"}	https://toutiao.io/k/cz89whz	2020-08-30 02:10:09	消息链路优化之弱感知链路优化	236ce5bde0a6535fb68e01bddc780c2070e52ec0	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.046514	0			'消息链路优化之弱感知链路优化':1,2	zh	
759	TypeScript 配置文件该怎么写？	{"ver":2,"uid":1,"hash":"SHA1:f0d6e6ec14d7084bdc89136171d4812f9085bc68"}	https://toutiao.io/k/9eedrzr	2020-08-30 02:10:09	TypeScript 配置文件该怎么写？	9c690f74c8e1431dfc8963aa1f0271c03b9e155b	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.048513	0			'typescript':1,3 '配置文件该怎么写':2,4	zh	
761	Delta Lake 第一篇论文发布了	{"ver":2,"uid":1,"hash":"SHA1:c2287a17d1d43f555137a48de2a8f1150b0e4b6d"}	https://toutiao.io/k/y8b343g	2020-08-30 02:10:09	Delta Lake 第一篇论文发布了	bdbc46aacec20d2c830ccc1d44ef21f2d8cccd89	\N	f	2020-08-30 02:10:00	2020-08-30 23:10:09.0507	0			'delta':1,4 'lake':2,5 '第一篇论文发布了':3,6	zh	
768	Show HN: Learn how WebRTC actually works. A book on the protocols, not just APIs	{"ver":2,"uid":1,"hash":"SHA1:e9c3e665026397f249fdb238cb236a55a1420fd7"}	https://webrtcforthecurious.com/	2020-08-31 00:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24323589"> https://news.ycombinator.com/item?id=24323589 </a>	fcb50c55d18b9ba99be27e775cb159fe24fcbe60	\N	f	2020-08-31 00:10:00	2020-09-03 18:10:09.050163	0			'/item?id=24323589':19 'actual':6 'api':15 'book':9 'comment':16 'hn':2 'learn':3 'news.ycombinator.com':18 'news.ycombinator.com/item?id=24323589':17 'protocol':12 'show':1 'webrtc':5 'work':7	zh	Sean-Der
713	[推荐] 缓存与数据库双写一致这个 “老大难”，该怎么治	{"ver":2,"uid":1,"hash":"SHA1:22b817bff510d1a66654e41ffca6b22151760ffb"}	https://toutiao.io/k/cgycnq9	2020-08-31 18:10:11	[推荐] 缓存与数据库双写一致这个 “老大难”，该怎么治	3ef597c9b63f21ef5975cfcbaaef111246de9c02	\N	f	2020-08-28 04:10:00	2020-09-10 02:10:10.367823	0			'推荐':1,5 '缓存与数据库双写一致这个':2,6 '老大难':3,7 '该怎么治':4,8	zh	
955	分布式锁的封装也很有讲究呀	{"ver":2,"uid":1,"hash":"SHA1:d2289abf7200a1b9f936353cef369f2c646efc31"}	https://toutiao.io/k/bgwedsm	2020-09-05 04:10:09	分布式锁的封装也很有讲究呀	e00548ecd16f80580d7eec3a0b6ed2df152d9d4a	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.390109	0			'分布式锁的封装也很有讲究呀':1,2	zh	
683	ReMarkable 2.0 – A digital notebook that feels like paper	{"ver":2,"uid":1,"hash":"SHA1:16800d09cca87dcd770828ca5b34e40c46b243e5"}	https://remarkable.com/#What_Is_New	2020-08-27 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24295443"> https://news.ycombinator.com/item?id=24295443 </a>	5590d1733a0820d9b768c0197c4736cf158abce8	\N	f	2020-08-27 20:10:00	2020-08-31 05:10:09.23222	0			'/item?id=24295443':13 '2.0':2 'comment':10 'digit':4 'feel':7 'like':8 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24295443':11 'notebook':5 'paper':9 'remark':1	zh	punnerud
954	如何为 Electron 应用实现自动更新	{"ver":2,"uid":1,"hash":"SHA1:c25719422f6e6a746e5263c385cbcf5f867421e8"}	https://toutiao.io/k/xcxwjy5	2020-09-05 04:10:09	如何为 Electron 应用实现自动更新	9b1448a7de90f0841a36ee63cc01f35d6e5815f7	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.39609	0			'electron':2,5 '如何为':1,4 '应用实现自动更新':3,6	zh	
833	The database I wish I had	{"ver":2,"uid":1,"hash":"SHA1:798e05f9f88c99291f1397845c3fb051011a68ac"}	https://euandre.org/2020/08/31/the-database-i-wish-i-had.html	2020-09-01 14:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24337244"> https://news.ycombinator.com/item?id=24337244 </a>	982677e05fdfb2f1d8f5ee0a500141a310e2659e	\N	f	2020-09-01 14:10:00	2020-09-03 18:10:09.089134	0			'/item?id=24337244':10 'comment':7 'databas':2 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24337244':8 'wish':4	zh	todsacerdoti
536	C++ Deadlocks	{"ver":2,"uid":1,"hash":"SHA1:678be898d8dae41b24fdf8edd3b9d6ae3e311a62"}	https://leimao.github.io/blog/CPP-Deadlocks/	2020-08-23 02:10:07	<h3 id="introduction">Introduction</h3>\n\n<p>In concurrent computing, a deadlock is a state in which each member of a group is waiting for another member, including itself, to take action, such as sending a message or more commonly releasing a lock. A lock is required when a concurrent application\nwill modify the shared memory, and a deadlock will likely happen if there are more than one lock in one situation, the situation was not treated carefully. The phenomenon of deadlock will be the program hangs forever and it is often very difficult to troubleshoot.</p>\n\n<p><br /></p>\n\n<p>Since I have hardly implemented many C++ concurrent programs, I was bored and implemented a deadlock myself. In this blog post, I would like to show how a typical concurrent C++ program that modifies shared objects will cause program error, and how to use mutual exclusion and lock to modify shared objects in a thread-safe way.</p>\n\n<h3 id="multithread-swap-implementation">Multithread Swap Implementation</h3>\n\n<p>Swap is commonly implemented to take the references or pointers to two objects and swap the information stored in them. The swap function is usually easy to implement and in a single thread program swap will not likely go wrong.</p>\n\n<p><br /></p>\n\n<p>However, if there are multiple threads that run swap function and might swap the same two objects, a race condition raises. We would have to use mutual exclusion and lock to make sure that the swaps were done without competitions.</p>\n\n<h4 id="source-code">Source Code</h4>\n\n<p>The program is extremely simple. We have a swap function that swaps the information of two people. We have two guys, Michael and Howard, and we would like to swap their information four times. In a single thread program, after swap four times, we expect Michael remains Michael and Howard remains Howard. In a multi-thread concurrent program, after swap four times, we would also expect Michael remains Michael and Howard remains Howard.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// dead_lock.cpp</span>\n<span class="c1">// g++ -std=c++14 dead_lock.cpp -lpthread -o dead_lock</span>\n<span class="cp">#include &lt;cstdlib&gt;\n#include &lt;functional&gt;\n#include &lt;iostream&gt;\n#include &lt;mutex&gt;\n#include &lt;string&gt;\n#include &lt;thread&gt;\n</span>\n<span class="cm">/**\n * @brief Thread safe sleep function.\n * Randomly sleep 0 to 5 nano seconds.\n */</span>\n<span class="kt">void</span> <span class="nf">random_sleep</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">nanoseconds</span> <span class="n">random_duration</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">5</span><span class="p">};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">random_duration</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A Dummy class for personal information.\n */</span>\n<span class="k">class</span> <span class="nc">Guy</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="n">Guy</span><span class="p">();</span>\n    <span class="n">Guy</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">id</span><span class="p">)</span>\n        <span class="o">:</span> <span class="n">mName</span><span class="p">{</span><span class="n">name</span><span class="p">},</span> <span class="n">mAge</span><span class="p">{</span><span class="n">age</span><span class="p">},</span> <span class="n">mId</span><span class="p">{</span><span class="n">id</span><span class="p">}</span> <span class="p">{};</span>\n    <span class="kt">void</span> <span class="n">setName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">this</span><span class="o">-&gt;</span><span class="n">mName</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="kt">void</span> <span class="n">setAge</span><span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">age</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">this</span><span class="o">-&gt;</span><span class="n">mAge</span> <span class="o">=</span> <span class="n">age</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="kt">void</span> <span class="n">setId</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">id</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">this</span><span class="o">-&gt;</span><span class="n">mId</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">mName</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">getAge</span><span class="p">()</span> <span class="k">const</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">mAge</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getId</span><span class="p">()</span> <span class="k">const</span>\n    <span class="p">{</span>\n        <span class="n">random_sleep</span><span class="p">();</span>\n        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">mId</span><span class="p">;</span>\n    <span class="p">}</span>\n\n<span class="nl">private:</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">mName</span><span class="p">;</span>\n    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">mAge</span><span class="p">;</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">mId</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/**\n * @brief Swap the information of two Guy objects.\n * This swap function is thread-unsafe.\n */</span>\n<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">Guy</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Guy</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tmpName</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getName</span><span class="p">();</span>\n    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">tmpAge</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">tmpId</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">getId</span><span class="p">();</span>\n    <span class="n">lhs</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">getName</span><span class="p">());</span>\n    <span class="n">lhs</span><span class="p">.</span><span class="n">setAge</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">getAge</span><span class="p">());</span>\n    <span class="n">lhs</span><span class="p">.</span><span class="n">setId</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">getId</span><span class="p">());</span>\n    <span class="n">rhs</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="n">tmpName</span><span class="p">);</span>\n    <span class="n">rhs</span><span class="p">.</span><span class="n">setAge</span><span class="p">(</span><span class="n">tmpAge</span><span class="p">);</span>\n    <span class="n">rhs</span><span class="p">.</span><span class="n">setId</span><span class="p">(</span><span class="n">tmpId</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A Guy wrapper that has an additional std::mutex.\n */</span>\n<span class="k">class</span> <span class="nc">GuyWrapper</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="n">GuyWrapper</span><span class="p">(</span><span class="n">Guy</span><span class="o">&amp;</span> <span class="n">guy</span><span class="p">)</span> <span class="o">:</span> <span class="n">mGuy</span><span class="p">{</span><span class="n">guy</span><span class="p">}</span> <span class="p">{};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mMutex</span><span class="p">;</span>\n    <span class="n">Guy</span><span class="o">&amp;</span> <span class="n">mGuy</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/**\n * @brief A swap function that uses mutex but will cause deadlock.\n * Even if we are always locking the first GuyWrapper first and the second\n * GuyWrapper second, The user could switch the order of these two objects and\n * cause dead lock.\n */</span>\n<span class="kt">void</span> <span class="nf">swapDeadLock</span><span class="p">(</span><span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_lhs</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_rhs</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="n">swap</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A thread-safe swap function.\n * Locking two std::mutex simultaneously prevented deadlock.\n * @param lhs\n * @param rhs\n */</span>\n<span class="kt">void</span> <span class="nf">swapSafe</span><span class="p">(</span><span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="c1">// std::adopt_lock indicates that the std::mutex object might be already</span>\n    <span class="c1">// locked. In stead of lock the std::mutex object in the constructor Use the</span>\n    <span class="c1">// locked state from the std::mutex object</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_lhs</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">adopt_lock</span><span class="p">);</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_rhs</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">adopt_lock</span><span class="p">);</span>\n    <span class="n">swap</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief Verify Guy object's information.\n */</span>\n<span class="kt">bool</span> <span class="nf">verifyGuy</span><span class="p">(</span><span class="k">const</span> <span class="n">Guy</span><span class="o">&amp;</span> <span class="n">guy</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,</span>\n               <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">id</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">((</span><span class="n">guy</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">==</span> <span class="n">name</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">guy</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">==</span> <span class="n">age</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">guy</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">==</span> <span class="n">id</span><span class="p">))</span>\n    <span class="p">{</span>\n        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">else</span>\n    <span class="p">{</span>\n        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A thread-unsafe swap demo.\n * After even number of swap, we expect the information of Michael and Howard\n * remain unchanged. However, because of race conditions, sometimes, the\n * information of Michael and Howard are incorrect.\n */</span>\n<span class="kt">void</span> <span class="nf">unsafeDemo</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelName</span><span class="p">{</span><span class="s">"Michael"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">michaelAge</span><span class="p">{</span><span class="mi">28</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelId</span><span class="p">{</span><span class="s">"X0001"</span><span class="p">};</span>\n\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardName</span><span class="p">{</span><span class="s">"Howard"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">howardAge</span><span class="p">{</span><span class="mi">35</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardId</span><span class="p">{</span><span class="s">"Y9999"</span><span class="p">};</span>\n\n    <span class="n">Guy</span> <span class="n">michael</span><span class="p">{</span><span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">};</span>\n    <span class="n">Guy</span> <span class="n">howard</span><span class="p">{</span><span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">};</span>\n\n    <span class="kt">bool</span> <span class="n">pass</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\n    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread0</span><span class="p">{</span><span class="n">swap</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michael</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howard</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread1</span><span class="p">{</span><span class="n">swap</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howard</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michael</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread2</span><span class="p">{</span><span class="n">swap</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michael</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howard</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread3</span><span class="p">{</span><span class="n">swap</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howard</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michael</span><span class="p">)};</span>\n        <span class="n">thread0</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread3</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">michael</span><span class="p">,</span> <span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michaelAge</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">howard</span><span class="p">,</span> <span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howardName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardAge</span>\n                      <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">pass</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Passed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">else</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Failed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A thread-safe swap demo.\n * After even number of swap, the information of Michael and Howard remain\n * unchanged.\n */</span>\n<span class="kt">void</span> <span class="nf">safeDemo</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelName</span><span class="p">{</span><span class="s">"Michael"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">michaelAge</span><span class="p">{</span><span class="mi">28</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelId</span><span class="p">{</span><span class="s">"X0001"</span><span class="p">};</span>\n\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardName</span><span class="p">{</span><span class="s">"Howard"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">howardAge</span><span class="p">{</span><span class="mi">35</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardId</span><span class="p">{</span><span class="s">"Y9999"</span><span class="p">};</span>\n\n    <span class="n">Guy</span> <span class="n">michael</span><span class="p">{</span><span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">};</span>\n    <span class="n">Guy</span> <span class="n">howard</span><span class="p">{</span><span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">};</span>\n\n    <span class="n">GuyWrapper</span> <span class="n">michaelWrapped</span><span class="p">{</span><span class="n">michael</span><span class="p">};</span>\n    <span class="n">GuyWrapper</span> <span class="n">howardWrapped</span><span class="p">{</span><span class="n">howard</span><span class="p">};</span>\n\n    <span class="kt">bool</span> <span class="n">pass</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\n    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread0</span><span class="p">{</span><span class="n">swapSafe</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread1</span><span class="p">{</span><span class="n">swapSafe</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread2</span><span class="p">{</span><span class="n">swapSafe</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread3</span><span class="p">{</span><span class="n">swapSafe</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">)};</span>\n        <span class="n">thread0</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread3</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">michael</span><span class="p">,</span> <span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michaelAge</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">howard</span><span class="p">,</span> <span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howardName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardAge</span>\n                      <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">pass</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Passed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">else</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Failed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="cm">/**\n * @brief A thread-safe swap demo that will cause deadlock.\n * This function will run forever due to deadlock.\n */</span>\n<span class="kt">void</span> <span class="nf">deadLockDemo</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelName</span><span class="p">{</span><span class="s">"Michael"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">michaelAge</span><span class="p">{</span><span class="mi">28</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">michaelId</span><span class="p">{</span><span class="s">"X0001"</span><span class="p">};</span>\n\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardName</span><span class="p">{</span><span class="s">"Howard"</span><span class="p">};</span>\n    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">howardAge</span><span class="p">{</span><span class="mi">35</span><span class="p">};</span>\n    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">howardId</span><span class="p">{</span><span class="s">"Y9999"</span><span class="p">};</span>\n\n    <span class="n">Guy</span> <span class="n">michael</span><span class="p">{</span><span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">};</span>\n    <span class="n">Guy</span> <span class="n">howard</span><span class="p">{</span><span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">};</span>\n\n    <span class="n">GuyWrapper</span> <span class="n">michaelWrapped</span><span class="p">{</span><span class="n">michael</span><span class="p">};</span>\n    <span class="n">GuyWrapper</span> <span class="n">howardWrapped</span><span class="p">{</span><span class="n">howard</span><span class="p">};</span>\n\n    <span class="kt">bool</span> <span class="n">pass</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\n    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread0</span><span class="p">{</span><span class="n">swapDeadLock</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread1</span><span class="p">{</span><span class="n">swapDeadLock</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread2</span><span class="p">{</span><span class="n">swapDeadLock</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">)};</span>\n        <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">thread3</span><span class="p">{</span><span class="n">swapDeadLock</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">howardWrapped</span><span class="p">),</span>\n                            <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">michaelWrapped</span><span class="p">)};</span>\n        <span class="n">thread0</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="n">thread3</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">michael</span><span class="p">,</span> <span class="n">michaelName</span><span class="p">,</span> <span class="n">michaelAge</span><span class="p">,</span> <span class="n">michaelId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michaelAge</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michaelId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Michael: "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">michael</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">verifyGuy</span><span class="p">(</span><span class="n">howard</span><span class="p">,</span> <span class="n">howardName</span><span class="p">,</span> <span class="n">howardAge</span><span class="p">,</span> <span class="n">howardId</span><span class="p">))</span>\n        <span class="p">{</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Expected Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howardName</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardAge</span>\n                      <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howardId</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Got Howard: "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getAge</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">howard</span><span class="p">.</span><span class="n">getId</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span>\n                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n            <span class="n">pass</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="n">pass</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Passed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="k">else</span>\n    <span class="p">{</span>\n        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread Lock Test Failed!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>\n<span class="p">{</span>\n    <span class="n">unsafeDemo</span><span class="p">();</span>\n    <span class="n">safeDemo</span><span class="p">();</span>\n    <span class="n">deadLockDemo</span><span class="p">();</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>To build the program, please run the following command in the terminal.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g++ -std=c++14 dead_lock.cpp -lpthread -o dead_lock\n</code></pre></div></div>\n\n<p>To run the program, we would likely see the following outputs. However, the program will hang forever due to the deadlock.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./dead_lock \nExpected Michael: Michael 28 X0001 \nGot Michael: Howard 35 Y9999 \nThread Lock Test Failed!\nThread Lock Test Passed!\n\n</code></pre></div></div>\n\n<p>Essentially, using the conventional <code class="language-plaintext highlighter-rouge">swap</code> in the concurrent program is not thread-safe, using two locks for locking the mutexes of two objects sequentially in <code class="language-plaintext highlighter-rouge">swapDeadLock</code> will cause deadlock, and only using two locks for locking the mutexes of two objects simultaneously in <code class="language-plaintext highlighter-rouge">swapSafe</code> is thread safe.</p>\n\n<h4 id="lock-and-mutex-implementation">Lock and Mutex Implementation</h4>\n\n<p>We cannot use a global lock or a specialized lock for swap, because we would possibly use the swap function to swap different pairs of people concurrently. Only when swapping the same pair of the objects simultaneously, we want the swap to happen in an ordered way. For example, we could have implemented a swap function like the one below.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">swapNonConcurrent</span><span class="p">(</span><span class="n">Guy</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Guy</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&amp;</span> <span class="n">mtx</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_lhs</span><span class="p">(</span><span class="n">mtx</span><span class="p">);</span>\n    <span class="n">swap</span><span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>It is thread-safe, however, there would be no concurrency for swap from such implementation either. Even if we want to swap two pair of the guys, Michael and Howard, Jack and Tom, we could not do it concurrently with one <code class="language-plaintext highlighter-rouge">std::mutex</code> object to lock.</p>\n\n<p><br /></p>\n\n<p>One of the correct implementations is to add a <code class="language-plaintext highlighter-rouge">std::mutex</code> object to each of the <code class="language-plaintext highlighter-rouge">Guy</code> object. We did this by creating a wrapper <code class="language-plaintext highlighter-rouge">GuyWrapper</code> that has a member referencing to the <code class="language-plaintext highlighter-rouge">Guy</code> object. An additional <code class="language-plaintext highlighter-rouge">std::mutex</code> was created specifically.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GuyWrapper</span>\n<span class="p">{</span>\n<span class="nl">public:</span>\n    <span class="n">GuyWrapper</span><span class="p">(</span><span class="n">Guy</span><span class="o">&amp;</span> <span class="n">guy</span><span class="p">)</span> <span class="o">:</span> <span class="n">mGuy</span><span class="p">{</span><span class="n">guy</span><span class="p">}</span> <span class="p">{};</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mMutex</span><span class="p">;</span>\n    <span class="n">Guy</span><span class="o">&amp;</span> <span class="n">mGuy</span><span class="p">;</span>\n<span class="p">};</span>\n</code></pre></div></div>\n\n<p>Then we could lock the modification to each <code class="language-plaintext highlighter-rouge">Guy</code> specifically. If we swap different pairs of <code class="language-plaintext highlighter-rouge">Guy</code> objects simultaneously, we could do them concurrently. And if there are two threads calling <code class="language-plaintext highlighter-rouge">swapDeadLock(michaelWrapped, howardWrapped)</code> simultaneously, one of the thread will wait until the other one is done because the lock for Michael will not be freed until one swap is done in one thread. These are the correct behaviors we are expecting.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">swapDeadLock</span><span class="p">(</span><span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_lhs</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_rhs</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="n">swap</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>However, we might have missed something. What if one thread is calling <code class="language-plaintext highlighter-rouge">swapDeadLock(michaelWrapped, howardWrapped)</code> and the other thread is calling <code class="language-plaintext highlighter-rouge">swapDeadLock(howardWrapped, michaelWrapped)</code>? It is possible that the <code class="language-plaintext highlighter-rouge">swapDeadLock(michaelWrapped, howardWrapped)</code> locked Michael and <code class="language-plaintext highlighter-rouge">swapDeadLock(howardWrapped, michaelWrapped)</code> locked Howard. When <code class="language-plaintext highlighter-rouge">swapDeadLock(michaelWrapped, howardWrapped)</code> wants to further lock Howard, it waits because Howard was already locked. Similarly, when <code class="language-plaintext highlighter-rouge">swapDeadLock(howardWrapped, michaelWrapped)</code> wants to further lock Michael, it also waits because Michael was already locked. Therefore, this is a race condition. The <code class="language-plaintext highlighter-rouge">swapDeadLock</code> calls in both threads are waiting, and the process will hang forever.</p>\n\n<p><br /></p>\n\n<p>To overcome this, the best possible solution might be locking the two <code class="language-plaintext highlighter-rouge">GuyWrapper</code> objects simultaneously. If the two <code class="language-plaintext highlighter-rouge">GuyWrapper</code> objects are locked simultaneously, other threads that is trying to lock the same pair of the <code class="language-plaintext highlighter-rouge">GuyWrapper</code> objects will have to wait, which is thread-safe.</p>\n\n<p><br /></p>\n\n<p>Fortunately, C++11 has provided us an implementation <code class="language-plaintext highlighter-rouge">std::lock</code> for simultaneous locking multiple <code class="language-plaintext highlighter-rouge">std::mutex</code> objects.</p>\n\n<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">swapSafe</span><span class="p">(</span><span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">GuyWrapper</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>\n<span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lhs</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">)</span>\n    <span class="p">{</span>\n        <span class="k">return</span><span class="p">;</span>\n    <span class="p">}</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">);</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_lhs</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">adopt_lock</span><span class="p">);</span>\n    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock_rhs</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">mMutex</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">adopt_lock</span><span class="p">);</span>\n    <span class="n">swap</span><span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">,</span> <span class="n">rhs</span><span class="p">.</span><span class="n">mGuy</span><span class="p">);</span>\n<span class="p">}</span>\n</code></pre></div></div>\n\n<p>Problem solved.</p>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>We always have to be careful when we implement concurrent applications that tries to modify the same object. Deadlock could happen anywhere.</p>\n\n\n  <p><a href="https://leimao.github.io/blog/CPP-Deadlocks/">C++ Deadlocks</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 23, 2020.</p>	35b8b2320cdeb78f3f77ffac29429c91e17ccef8	\N	f	2020-08-23 02:10:00	2020-09-10 05:10:13.405923	0			'+11':1866 '+14':314,1339 '/dead_lock':1366 '0':339,809,1004,1198 '1000':811,1006,1200 '2020':1962 '23':1961 '28':772,961,1155,1370 '35':787,976,1170,1375 '5':341,354 'action':28 'add':1575 'addit':515,1604 'adopt':633,674,685,1904,1915 'age':379,386,405,410,708,717 'alreadi':643,1778,1796 'also':301,1791 'alway':546,1924 'anoth':22 'anywher':1944 'applic':47,1933 'august':1960 'behavior':1691 'best':1822 'blog':112 'book':1958 'bool':696,803,998,1192 'bore':104 'break':883,910,1078,1105,1272,1299 'brief':332,362,459,508,531,600,690,725,930,1125 'build':1325 'c':1,99,123,313,1338,1865,1945 'call':1653,1735,1744,1806 'cannot':1438 'care':74,1928 'caus':130,540,568,1134,1413 'chrono':348 'class':365,369,518,1610 'code':235 'command':1332 'common':36,156 'competit':233 'comput':6 'conclus':1922 'concurr':5,46,100,122,293,1392,1463,1531,1560,1646,1932 'condit':213,751,1803 'const':391,402,413,425,434,443,698,701,705,709,763,768,773,778,783,788,952,957,962,967,972,977,1146,1151,1156,1161,1166,1171 'constructor':655 'convent':1388 'correct':1571,1690 'could':559,1487,1556,1625,1643,1942 'cout':864,873,891,900,914,923,1059,1068,1086,1095,1109,1118,1253,1262,1280,1289,1303,1312 'creat':1590,1608 'cstdlib':321 'dead':318,569,1343 'dead_lock.cpp':310,315,1340 'deadlock':2,8,55,78,108,541,613,1135,1143,1365,1414,1941,1946 'deadlockdemo':1145,1323 'demo':731,936,1131 'differ':1459,1636 'difficult':90 'done':231,1669,1683 'due':1141,1362 'dummi':364 'durat':351,361 'easi':179 'either':1537 'els':722,921,1116,1310 'endl':871,880,898,907,920,929,1066,1075,1093,1102,1115,1124,1260,1269,1287,1296,1309,1318 'error':132 'essenti':1385 'even':542,733,938,1538 'exampl':1485 'exclus':138,221 'expect':280,302,738,865,892,1060,1087,1254,1281,1367,1694 'extrem':239 'fail':927,1122,1316,1380 'fals':724,882,909,1077,1104,1271,1298 'first':549,551 'follow':1331,1354 'forev':84,1140,1361,1817 'fortun':1864 'four':268,277,297 'freed':1678 'function':176,203,245,323,336,469,534,606,1137,1456,1492 'g':311,1336 'getag':433 'getid':442 'getnam':424 'global':1441 'go':192 'got':874,901,1069,1096,1263,1290,1372 'group':18 'guard':583,591,667,678,1512,1707,1715,1897,1908 'guy':256,370,372,373,465,476,478,510,522,523,525,529,692,699,700,793,798,982,987,1176,1181,1499,1501,1548,1584,1601,1614,1615,1617,1621,1631,1639 'guy.getage':716 'guy.getid':718 'guy.getname':714 'guywrapp':519,521,550,555,573,575,620,622,992,995,1186,1189,1593,1611,1613,1697,1699,1830,1836,1853,1883,1885 'hang':83,1360,1816 'happen':58,1479,1943 'hard':96 'howard':259,285,287,307,309,744,758,782,799,822,829,842,849,886,893,902,947,971,988,997,1081,1088,1097,1165,1182,1191,1275,1282,1291,1374,1551,1763,1772,1776 'howard.getage':904,1099,1293 'howard.getid':905,1100,1294 'howard.getname':903,1098,1292 'howardag':786,801,888,895,975,990,1083,1090,1169,1184,1277,1284 'howardid':791,802,889,896,980,991,1084,1091,1174,1185,1278,1285 'howardnam':781,800,887,894,970,989,1082,1089,1164,1183,1276,1283 'howardwrap':996,1017,1024,1037,1044,1190,1211,1218,1231,1238,1656,1738,1746,1755,1760,1767,1783 'howev':194,747,1356,1526,1724 'id':382,388,416,421,712,719 'implement':97,106,153,157,181,1436,1489,1536,1572,1871,1931 'includ':24,320,322,324,326,328,330 'incorrect':760 'indic':635 'inform':170,249,267,368,462,695,740,754,943 'int':378,404,432,454,489,707,770,785,807,959,974,1002,1153,1168,1196,1319 'introduct':3 'iostream':325 'jack':1552 'lei':1951,1954 'lhs':477,481,574,578,587,615,621,625,671,1500,1507,1516,1519,1698,1702,1711,1884,1888,1901 'lhs.getage':491 'lhs.getid':495 'lhs.getname':487 'lhs.mguy':598,688,1722,1918 'lhs.mmutex':588,630,672,1712,1893,1902 'lhs.setage':498 'lhs.setid':500 'lhs.setname':496 'like':57,116,191,263,1351,1493 'lock':39,41,65,140,223,319,547,570,582,586,590,594,607,629,634,644,648,658,666,670,675,677,681,686,916,925,1111,1120,1305,1314,1344,1378,1382,1401,1403,1419,1421,1433,1442,1446,1511,1515,1567,1626,1672,1706,1710,1714,1718,1756,1762,1771,1779,1788,1797,1827,1839,1847,1873,1876,1892,1896,1900,1905,1907,1911,1916 'log':1957 'lpthread':316,1341 'mage':385,409,439,455 'main':1320 'make':225 'mani':98 'mao':1952,1955 'member':15,23,1597 'memori':52 'messag':33 'mguy':524,530,1616,1622 'michael':257,281,283,303,305,742,756,767,794,819,832,839,852,859,866,875,945,956,983,994,1054,1061,1070,1150,1177,1188,1248,1255,1264,1368,1369,1373,1549,1674,1757,1789,1794 'michael.getage':877,1072,1266 'michael.getid':878,1073,1267 'michael.getname':876,1071,1265 'michaelag':771,796,861,868,960,985,1056,1063,1154,1179,1250,1257 'michaelid':776,797,862,869,965,986,1057,1064,1159,1180,1251,1258 'michaelnam':766,795,860,867,955,984,1055,1062,1149,1178,1249,1256 'michaelwrap':993,1014,1027,1034,1047,1187,1208,1221,1228,1241,1655,1737,1747,1754,1761,1766,1784 'mid':387,420,448,458 'might':205,641,1726,1825 'miss':1728 'mmutex':528,1620 'mname':383,398,430,452 'modif':1628 'modifi':49,126,142,1937 'mtx':1505,1517 'multi':291 'multi-thread':290 'multipl':198,1877 'multithread':151 'mutex':327,517,527,537,585,593,610,639,651,663,669,680,1405,1423,1435,1504,1514,1564,1578,1606,1619,1709,1717,1879,1899,1910 'mutual':137,220 'name':376,384,394,399,704,715 'nano':342 'nanosecond':349 'number':734,939 'o':317,1342 'object':128,144,166,210,466,566,640,652,664,693,1408,1426,1472,1565,1579,1585,1602,1640,1831,1837,1854,1880,1940 'often':88 'one':64,67,1495,1562,1568,1658,1667,1680,1685,1732 'order':562,1482 'origin':1948 'output':1355 'overcom':1819 'pair':1460,1469,1545,1637,1850 'param':614,616 'pass':804,881,908,912,918,999,1076,1103,1107,1113,1193,1270,1297,1301,1307,1384 'peopl':252,1462 'person':367 'phenomenon':76 'pleas':1328 'pointer':163 'possibl':1452,1750,1823 'post':113 'prevent':612 'privat':449 'problem':1920 'process':1814 'program':82,101,124,131,187,237,274,294,1327,1348,1358,1393 'provid':1868 'public':371,520,1612 'publish':1949 'race':212,750,1802 'rais':214 'rand':353 'random':337,345,350,360,395,406,417,426,435,444 'ref':818,821,828,831,838,841,848,851,1013,1016,1023,1026,1033,1036,1043,1046,1207,1210,1217,1220,1227,1230,1237,1240 'refer':161 'referenc':1598 'releas':37 'remain':282,286,304,308,745,948 'requir':43 'return':428,437,446,483,580,627,720,723,1509,1704,1890 'rhs':479,482,576,579,595,617,623,626,682,1502,1508,1520,1700,1703,1719,1886,1889,1912 'rhs.getage':499 'rhs.getid':501 'rhs.getname':497 'rhs.mguy':599,689,1723,1919 'rhs.mmutex':596,631,683,1720,1894,1913 'rhs.setage':504 'rhs.setid':506 'rhs.setname':502 'run':201,1139,1329,1346 'safe':149,334,604,934,1129,1398,1432,1525,1863 'safedemo':951,1322 'second':343,554,556 'see':1352 'send':31 'sequenti':1409 'setag':401 'setid':412 'setnam':390 'share':51,127,143 'show':118 'similar':1780 'simpl':240 'simultan':611,1427,1473,1641,1657,1832,1840,1875 'sinc':93 'singl':185,272 'situat':68,70 'sleep':335,338,346,358,396,407,418,427,436,445 'solut':1824 'solv':1921 'someth':1729 'sometim':752 'sourc':234 'special':1445 'specif':1609,1632 'state':11,659 'std':312,347,352,355,374,380,392,414,422,440,450,456,484,492,516,526,581,584,589,592,609,628,632,638,650,662,665,668,673,676,679,684,702,710,764,774,779,789,813,817,820,823,827,830,833,837,840,843,847,850,863,870,872,879,890,897,899,906,913,919,922,928,953,963,968,978,1008,1012,1015,1018,1022,1025,1028,1032,1035,1038,1042,1045,1058,1065,1067,1074,1085,1092,1094,1101,1108,1114,1117,1123,1147,1157,1162,1172,1202,1206,1209,1212,1216,1219,1222,1226,1229,1232,1236,1239,1252,1259,1261,1268,1279,1286,1288,1295,1302,1308,1311,1317,1337,1503,1510,1513,1563,1577,1605,1618,1705,1708,1713,1716,1872,1878,1891,1895,1898,1903,1906,1909,1914 'stead':646 'store':171 'string':329,375,381,393,415,423,441,451,457,485,493,703,711,765,775,780,790,954,964,969,979,1148,1158,1163,1173 'sure':226 'swap':152,154,168,175,188,202,206,229,244,247,265,276,296,460,468,475,533,597,605,687,730,736,816,826,836,846,935,941,1130,1389,1448,1455,1458,1466,1477,1491,1518,1533,1543,1635,1681,1721,1917 'swapdeadlock':572,1205,1215,1225,1235,1411,1654,1696,1736,1745,1753,1759,1765,1782,1805 'swapnonconcurr':1498 'swapsaf':619,1011,1021,1031,1041,1429,1882 'switch':560 'take':27,159 'termin':1335 'test':917,926,1112,1121,1306,1315,1379,1383 'therefor':1798 'thread':148,186,199,273,292,331,333,357,472,603,728,814,824,834,844,915,924,933,1009,1019,1029,1039,1110,1119,1128,1203,1213,1223,1233,1304,1313,1377,1381,1397,1431,1524,1652,1661,1686,1733,1742,1809,1842,1862 'thread-saf':147,602,932,1127,1396,1523,1861 'thread-unsaf':471,727 'thread0':815,1010,1204 'thread0.join':853,1048,1242 'thread1':825,1020,1214 'thread1.join':854,1049,1243 'thread2':835,1030,1224 'thread2.join':855,1050,1244 'thread3':845,1040,1234 'thread3.join':856,1051,1245 'time':269,278,298 'tmpage':490,505 'tmpid':494,507 'tmpname':486,503 'tom':1554 'treat':73 'tri':1845,1935 'troubleshoot':92 'true':721,805,1000,1194 'two':165,209,251,255,464,565,608,1400,1407,1418,1425,1544,1651,1829,1835 'typic':121 'unchang':746,949 'unsaf':473,729 'unsafedemo':762,1321 'unsign':377,403,431,453,488,706,769,784,958,973,1152,1167 'us':1869 'use':136,219,536,656,1386,1399,1417,1439,1453 'user':558 'usual':178 'verifi':691 'verifyguy':697,858,885,1053,1080,1247,1274 'void':344,389,400,411,474,571,618,761,950,1144,1497,1695,1881 'wait':20,1663,1774,1792,1811,1858 'want':1475,1541,1768,1785 'way':150,1483 'without':232 'would':115,216,262,300,1350,1451,1528 'wrapper':511,1592 'wrong':193 'x0001':777,966,1160,1371 'y9999':792,981,1175,1376	en	Lei Mao
956	浅入浅出 Java ConcurrentHashMap	{"ver":2,"uid":1,"hash":"SHA1:6c020678c8249c7e995554e8d8d4899ceb923cc8"}	https://toutiao.io/k/wgheu31	2020-09-05 04:10:09	浅入浅出 Java ConcurrentHashMap	859b33c646831e4fb5b954bc9b72ac87408d92b8	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.400133	0			'concurrenthashmap':3,6 'java':2,5 '浅入浅出':1,4	zh	
986	用struct重写rust-by-example中的linked-list	{"ver":2,"uid":1,"hash":"SHA1:10245291ec129ffe1170d92d539a2a19be3b91f4"}	https://rustcc.cn/article?id=ed0a6d1b-e1a8-4360-83ff-58596cf9720c	2020-07-03 03:45:43	<p><a href="https://doc.rust-lang.org/rust-by-example/custom_types/enum/testcase_linked_list.html" rel="noopener noreferrer">https://doc.rust-lang.org/rust-by-example/custom_types/enum/testcase_linked_list.html</a></p>\n<pre><code>#[derive(Debug)]\nstruct List {\n    head: Option&lt;Box&lt;List&gt;&gt;,\n    num: i32,\n}\n\nimpl List {\n    fn new() -&gt; List {\n        List { head: None, num: 0 }\n    }\n\n    fn prepend(self, elem: i32) -&gt; List {\n        List {\n            head: Some(Box::new(self)),\n            num: elem,\n        }\n    }\n\n    fn len(&amp;self) -&gt; u32 {\n        match &amp;self.head {\n            Some(list) =&gt; list.len() + 1,\n            None =&gt; 0,\n        }\n    }\n\n    fn stringify(&amp;self) -&gt; String {\n        match &amp;self.head {\n            Some(list) =&gt; format!("{}, {}", self.num, list.stringify()),\n            None =&gt; format!("Nil"),\n        }\n    }\n}\n\nfn main() {\n    let mut list = List::new();\n\n    list = list.prepend(1);\n    list = list.prepend(2);\n    list = list.prepend(3);\n\n    println!("linked list has length: {}", list.len());\n    println!("{}", list.stringify());\n}\n</code></pre>\n	6a3bdf2aa81f468eeaf748558c2da822c5bc47ee	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.208677	0			'/rust-by-example/custom_types/enum/testcase_linked_list.html':8 '0':28,54 '1':52,78 '2':81 '3':84 'box':15,38 'by':3 'debug':10 'derive':9 'doc.rust-lang.org':7 'doc.rust-lang.org/rust-by-example/custom_types/enum/testcase_linked_list.html':6 'elem':32,42 'example中的linked':4 'fn':21,29,43,55,69 'format':63,67 'has':88 'head':13,25,36 'i32':18,33 'impl':19 'len':44 'length':89 'let':71 'linked':86 'list':5,12,16,20,23,24,34,35,50,62,73,74,76,79,82,87 'list.len':51,90 'list.prepend':77,80,83 'list.stringify':65,92 'main':70 'match':47,59 'mut':72 'new':22,39,75 'nil':68 'none':26,53,66 'num':17,27,41 'option':14 'prepend':30 'println':85,91 'self':31,40,45,57 'self.head':48,60 'self.num':64 'some':37,49,61 'string':58 'stringify':56 'struct':11 'u32':46 '用struct重写rust':2 '用struct重写rust-by-example中的linked-list':1		
153	Ultimate Go Service	{"ver":2,"uid":1,"hash":"SHA1:a586f543c99ffc12415daa7560610cefd517e654"}	https://www.ardanlabs.com/blog/2018/06/ultimate-go-service.html	2018-06-27 00:00:00	Introduction I teach a class called Ultimate Go. The class is three days long and teaches you the history, mechanics and semantics of the Go programming language. The idea is to teach you how to read code to the level that you can understand the behavior and impact your program is having on the machine. This helps you make better and more consistent engineering decisions.\nAt the same time, the class is very focused on teaching you how to optimize for correctness so the code you are writing is readable as a first priority.	0067d62e981df26bee96efaeb7634f204efe1008	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.451436	0			'behavior':49 'better':63 'call':9 'class':8,13,74 'code':40,88 'consist':66 'correct':85 'day':16 'decis':68 'engin':67 'first':96 'focus':77 'go':2,11,28 'help':60 'histori':22 'idea':32 'impact':51 'introduct':4 'languag':30 'level':43 'long':17 'machin':58 'make':62 'mechan':23 'optim':83 'prioriti':97 'program':29,53 'read':39 'readabl':93 'semant':25 'servic':3 'teach':6,19,35,79 'three':15 'time':72 'ultim':1,10 'understand':47 'write':91	en	
762	这是一个充满挑战的好时代	{"ver":2,"uid":1,"hash":"SHA1:f43550c3b6d5b4b9f2d8374c69180ec3e25b5b8e"}	https://toutiao.io/k/7ajoa1g	2020-08-30 04:10:10	这是一个充满挑战的好时代	905c7d655e9ae8483544bf2e2b35446fad8a20c6	\N	f	2020-08-30 04:10:00	2020-08-30 23:10:09.041904	0			'这是一个充满挑战的好时代':1,2	zh	
1127	前段时间整理的Rust异步库之间的依赖	{"ver":2,"uid":1,"hash":"SHA1:f1e1391a8d089e4c3d35201519d26ea86d866f06"}	https://rustcc.cn/article?id=d8edf9c6-c449-4907-9acb-e0306f2f50d5	2020-09-10 03:25:06	<p><img src="https://github.com/baoyachi/Rust-quick-start/raw/master/concurrent_depends.png" alt="https://github.com/baoyachi/Rust-quick-start/raw/master/concurrent_depends.png"></p>\n	0c419568987bb11c99999d356cccb3bd2fb8834f	\N	f	2020-09-10 04:10:00	2020-09-10 05:10:03.165989	0			'前段时间整理的rust异步库之间的依赖':1		
763	Jetpack 新成员，App Startup 一篇就懂	{"ver":2,"uid":1,"hash":"SHA1:24a26c1a70fdba5db570c0324458bf9ab261460f"}	https://toutiao.io/k/9hls4am	2020-08-30 04:10:10	Jetpack 新成员，App Startup 一篇就懂	82d320f0cf3f57b55aadd9482787574eb2311283	\N	f	2020-08-30 04:10:00	2020-08-30 23:10:09.052776	0			'app':3,8 'jetpack':1,6 'startup':4,9 '一篇就懂':5,10 '新成员':2,7	zh	
1137	~/.bashrc VS ~/.profile VS ~/.bash_profile	{"ver":2,"uid":1,"hash":"SHA1:5a61421a66fb80f768429934f72543d25855fb13"}	https://leimao.github.io/blog/bashrc-VS-profile-VS-bash_profile/	2020-09-10 05:10:13	<h3 id="introduction">Introduction</h3>\n\n<p>Sometimes, when I remotely login to some Linux computers or use Docker containers, I would find the shell is plain black and white, which is different from the colorful shell I used to deal with on my local machine. This is sometimes causing me trouble to look for libraries, executables, and folders. Sometimes, some executables could be called directly from a local shell but from a remotely logged-in shell they are not directly callable.</p>\n\n<p><br /></p>\n\n<p>It turns out that the shell is an executable and it is “configured” by special shell scripts such as <code class="language-plaintext highlighter-rouge">~/.bashrc</code>, <code class="language-plaintext highlighter-rouge">~/.profile</code>, <code class="language-plaintext highlighter-rouge">~/.bash_profile</code>. In this blog post, I would like to briefly discuss the difference of these scripts.</p>\n\n<h3 id="bashrc">~/.bashrc</h3>\n\n<p>I modify <code class="language-plaintext highlighter-rouge">~/.bashrc</code> file from time to time, because sometimes I would like to set some environment variables, including <code class="language-plaintext highlighter-rouge">PATH</code> which is an environmental variable in Linux and other Unix-like operating systems that tells the shell which directories to search for executable files. But I have been ignoring its commented block at the beginning for decades.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat ~/.bashrc \n# ~/.bashrc: executed by bash(1) for non-login shells.\n# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)\n# for examples\n...\n</code></pre></div></div>\n\n<p>This means that in a local shell, and if we use <code class="language-plaintext highlighter-rouge">bash</code>, this shell script will be executed immediately after <code class="language-plaintext highlighter-rouge">bash</code> is executed. There are many other shell executable variants, such as <code class="language-plaintext highlighter-rouge">zsh</code>, <code class="language-plaintext highlighter-rouge">~/.bashrc</code> is only specific to <code class="language-plaintext highlighter-rouge">bash</code>.</p>\n\n<p><br /></p>\n\n<p>There are many code in the <code class="language-plaintext highlighter-rouge">~/.bashrc</code> that makes the shell looks colorful. For example,</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># enable color support of ls and also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors &amp;&amp; eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"\n    alias ls='ls --color=auto'\n    #alias dir='dir --color=auto'\n    #alias vdir='vdir --color=auto'\n\n    alias grep='grep --color=auto'\n    alias fgrep='fgrep --color=auto'\n    alias egrep='egrep --color=auto'\nfi\n</code></pre></div></div>\n\n<h3 id="profile">~/.profile</h3>\n\n<p>The comment block from <code class="language-plaintext highlighter-rouge">~/.profile</code> explictly tells us that it will be executed for the login shells. However, if <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> or <code class="language-plaintext highlighter-rouge">~/.bash_login</code> exists, <code class="language-plaintext highlighter-rouge">~/.profile</code> will not be executed.</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat ~/.profile \n# ~/.profile: executed by the command interpreter for login shells.\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n# exists.\n# see /usr/share/doc/bash/examples/startup-files for examples.\n# the files are located in the bash-doc package.\n\n# the default umask is set in /etc/profile; for setting the umask\n# for ssh logins, install and configure the libpam-umask package.\n#umask 022\n\n# if running bash\nif [ -n "$BASH_VERSION" ]; then\n    # include .bashrc if it exists\n    if [ -f "$HOME/.bashrc" ]; then\n\t. "$HOME/.bashrc"\n    fi\nfi\n\n# set PATH so it includes user's private bin if it exists\nif [ -d "$HOME/bin" ] ; then\n    PATH="$HOME/bin:$PATH"\nfi\n\n# set PATH so it includes user's private bin if it exists\nif [ -d "$HOME/.local/bin" ] ; then\n    PATH="$HOME/.local/bin:$PATH"\nfi\n</code></pre></div></div>\n\n<p>The default content of <code class="language-plaintext highlighter-rouge">~/.profile</code> is simple. Most likely, it inherits whatever there are in the <code class="language-plaintext highlighter-rouge">~/.bashrc</code>, and adding some user specific executable filepath to the environment variable <code class="language-plaintext highlighter-rouge">PATH</code>. So if there are commands that make the shell looks colorful in the <code class="language-plaintext highlighter-rouge">~/.bashrc</code>, the shell for login should also look colorful.</p>\n\n<h3 id="bash_profile">~/.bash_profile</h3>\n\n<p>Unfortunately, in most of my login trials, the shells are never coloful, and sometimes the environment variables do not match to my expectation. This is because there exists a <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> so that <code class="language-plaintext highlighter-rouge">~/.profile</code> or <code class="language-plaintext highlighter-rouge">~/.bashrc</code> is never executed. Usually the <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> will be empty, this means that we would not have the environment and appearance as we have in our local shell.</p>\n\n<p><br /></p>\n\n<p>To make the login shell “back to normal”, we could either delete the <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> or modify the <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> by adding some commands like</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>. "$HOME/.profile"\n</code></pre></div></div>\n\n<h3 id="caveats">Caveats</h3>\n\n<p>Sometimes, a non-color shell could be helpful. It tells you that are not working in local shell. It could either be a Docker shell or a remote login shell. Knowing what shell we are dealing with, we would be less likely to do dangerous operations. For example, in a Docker shell, we could do almost anything, such as <code class="language-plaintext highlighter-rouge">rm -rf /</code> without sudo, without harming the local system.</p>\n\n  <p><a href="https://leimao.github.io/blog/bashrc-VS-profile-VS-bash_profile/">~/.bashrc VS ~/.profile VS ~/.bash_profile</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on September 09, 2020.</p>	2cd035a2a127252ccae7cdea0496ca0148474484	\N	f	2020-09-10 05:10:00	2020-09-10 05:10:13.385781	0			'/.bash_login':332,361 '/.bash_profile':5,104,330,359,512,542,553,588,592,673 '/.bashrc':102,120,123,180,181,234,246,477,503,547,669 '/.dircolors':271,275 '/.profile':3,103,310,315,334,340,341,465,545,671 '/etc/profile':383 '/usr/bin/dircolors':267 '/usr/share/doc/bash/examples/startup-files':192,364 '022':400 '09':688 '1':185,357 '2020':689 'ad':479,594 'add':262 'alia':279,284,289,294,299,304 'alias':264 'almost':656 'also':261,509 'anyth':657 'appear':567 'auto':283,288,293,298,303,308 'b':274,278 'back':580 'bash':184,197,212,221,239,356,374,403,406 'bash-doc':196,373 'bashrc':410 'begin':176 'bin':429,449 'black':27 'block':173,313 'blog':107 'book':685 'briefli':113 'call':64 'callabl':82 'cat':179,339 'caus':49 'caveat':599 'code':243 'colo':524 'color':35,252,256,282,287,292,297,302,307,500,511,604 'command':345,494,596 'comment':172,312 'comput':15 'configur':95,393 'contain':19 'content':463 'could':62,584,606,620,654 'd':434,454 'danger':645 'deal':40,636 'decad':178 'default':378,462 'delet':586 'differ':32,116 'dir':285,286 'dircolor':273,277 'direct':65,81 'directori':160 'discuss':114 'doc':198,375 'docker':18,624,651 'egrep':305,306 'either':585,621 'empti':556 'enabl':255 'environ':137,487,528,565 'environment':144 'eval':272,276 'exampl':200,254,366,648 'execut':56,61,91,164,182,218,223,229,323,338,342,483,550 'exist':333,362,413,432,452,540 'expect':535 'explict':316 'f':415 'fgrep':300,301 'fi':309,419,420,440,460 'file':124,165,351,368 'filepath':484 'find':22 'folder':58 'grep':295,296 'handi':263 'harm':665 'help':608 'home/.bashrc':416,418 'home/.local/bin':455,458 'home/.profile':598 'home/bin':435,438 'howev':328 'ignor':170 'immedi':219 'includ':139,409,425,445 'inherit':471 'instal':391 'interpret':346 'introduct':6 'know':631 'lei':678,681 'less':641 'libpam':396 'libpam-umask':395 'librari':55 'like':111,133,152,469,597,642 'linux':14,147 'local':44,68,206,573,617,667 'locat':370 'log':75,684 'logged-in':74 'login':11,189,326,348,390,507,518,578,629 'look':53,251,499,510 'ls':259,280,281 'machin':45 'make':248,496,576 'mani':226,242 'mao':679,682 'match':532 'mean':202,558 'modifi':122,590 'n':405 'never':523,549 'non':188,603 'non-color':602 'non-login':187 'normal':582 'oper':153,646 'origin':675 'packag':195,376,398 'path':140,422,437,439,442,457,459,489 'plain':26 'post':108 'privat':428,448 'publish':676 'r':270 'read':354 'remot':10,73,628 'rf':661 'rm':660 'run':402 'script':99,119,215 'search':162 'see':191,363 'septemb':687 'set':135,381,385,421,441 'shell':24,36,69,77,88,98,158,190,207,214,228,250,327,349,498,505,521,574,579,605,618,625,630,633,652 'simpl':467 'sometim':7,48,59,130,526,600 'special':97 'specif':237,482 'ssh':389 'sudo':663 'support':257 'system':154,668 'tell':156,317,610 'test':269 'time':126,128 'trial':519 'troubl':51 'turn':84 'umask':379,387,397,399 'unfortun':513 'unix':151 'unix-lik':150 'us':318 'use':17,38,211 'user':426,446,481 'usual':551 'variabl':138,145,488,529 'variant':230 'vdir':290,291 'version':407 'vs':2,4,670,672 'whatev':472 'white':29 'without':662,664 'work':615 'would':21,110,132,561,639 'x':266 'zsh':233 '~/.bashrc':1	en	Lei Mao
771	彻底搞懂 etcd 系列文章（七）：etcd gRPC 服务 API	{"ver":2,"uid":1,"hash":"SHA1:5d3834d8c0e4c8175b803d54a6350a90bdc6bf1f"}	https://toutiao.io/k/sw8edpy	2020-08-31 01:10:10	彻底搞懂 etcd 系列文章（七）：etcd gRPC 服务 API	9d3c13589f9cdbf2e9b9febe9365c737d7283ad6	\N	f	2020-08-31 01:10:00	2020-08-31 23:10:10.414952	0			'api':8,16 'etcd':2,5,10,13 'grpc':6,14 '七':4,12 '彻底搞懂':1,9 '服务':7,15 '系列文章':3,11	zh	
770	在 aws 上使用 eks 进行服务发布	{"ver":2,"uid":1,"hash":"SHA1:09922e0984215962ab96a93e716e9ff0ac248441"}	https://toutiao.io/k/yom9oge	2020-08-31 01:10:10	在 aws 上使用 eks 进行服务发布	788fa2c68740dca2c328651a003f649d406b3069	\N	f	2020-08-31 01:10:00	2020-08-31 23:10:10.421604	0			'aws':2,7 'eks':4,9 '上使用':3,8 '在':1,6 '进行服务发布':5,10	zh	
769	[推荐] 20 个 MySQL 高性能架构设计原则	{"ver":2,"uid":1,"hash":"SHA1:3f518863c53b5c180eb94d9ceff7424a2b236f9e"}	https://toutiao.io/k/dkcgweu	2020-09-03 19:10:09	[推荐] 20 个 MySQL 高性能架构设计原则	5dc18989a0eaa822f00b34895ea40607318479c3	\N	f	2020-08-31 01:10:00	2020-09-10 05:10:14.651447	0			'20':2,7 'mysql':4,9 '个':3,8 '推荐':1,6 '高性能架构设计原则':5,10	zh	
686	Rust 1.46	{"ver":2,"uid":1,"hash":"SHA1:1873398130957e4f51c9f7f3cbd8d96892a03b1d"}	https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24294960"> https://news.ycombinator.com/item?id=24294960 </a>	83e43d0deb70389ec1b064e4932911f3432d4340	\N	f	2020-08-27 22:10:00	2020-08-31 05:10:09.272462	0			'/item?id=24294960':6 '1.46':2 'comment':3 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24294960':4 'rust':1	zh	pietroalbini
168	Design Philosophy On Integrity	{"ver":2,"uid":1,"hash":"SHA1:b3d23d45ab5b99ad6678eb79f9b5550058bb1b47"}	https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-integrity.html	2017-02-07 00:00:00	Updated on February 10th, 2017\nPrelude This post is part of a series of posts designed to make you think about your own design philosophy on different topics. If you haven’t read this post yet, please do so first:\nDevelop Your Design Philosophy\nIntroduction I want to share with you my design philosophy around the word Integrity and what it means to me from a Go perspective. Integrity is much more than just a buzzword, it is a driving principle in everything I do, both in code and in life.	0714b6f8dadc6bac15e927d0312be241febe8e9c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.48022	0			'10th':8 '2017':9 'around':59 'buzzword':80 'code':92 'design':1,20,28,47,57 'develop':45 'differ':31 'drive':84 'everyth':87 'februari':7 'first':44 'go':71 'haven':35 'integr':4,62,73 'introduct':49 'life':95 'make':22 'mean':66 'much':75 'part':14 'perspect':72 'philosophi':2,29,48,58 'pleas':41 'post':12,19,39 'prelud':10 'principl':85 'read':37 'seri':17 'share':53 'think':24 'topic':32 'updat':5 'want':51 'word':61 'yet':40	en	
145	Concurrency Trap #2: Incomplete Work	{"ver":2,"uid":1,"hash":"SHA1:d29aa3f495d9fd31b465f4f950a4d40eead4db76"}	https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html	2019-04-18 00:00:00	Introduction In my first post on Goroutine Leaks, I mentioned that concurrency is a useful tool but it comes with certain traps that don&rsquo;t exist in synchronous programs. To continue with this theme, I will introduce a new trap called incomplete work. Incomplete work occurs when a program terminates before outstanding Goroutines (non-main goroutines) complete. Depending on the nature of the Goroutine that is being terminated forcefully, this may be a serious problem.	8395d184e42b87931e9d702f6219920ba78e219e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.435775	0			'2':3 'call':46 'certain':26 'come':24 'complet':63 'concurr':1,17 'continu':36 'depend':64 'exist':31 'first':9 'forc':75 'goroutin':12,58,62,70 'incomplet':4,47,49 'introduc':42 'introduct':6 'leak':13 'main':61 'may':77 'mention':15 'natur':67 'new':44 'non':60 'non-main':59 'occur':51 'outstand':57 'post':10 'problem':81 'program':34,54 'serious':80 'synchron':33 'termin':55,74 'theme':39 'tool':21 'trap':2,27,45 'use':20 'work':5,48,50	en	
685	D3 6.0	{"ver":2,"uid":1,"hash":"SHA1:ea6cec3b0476c990307a3646dd127304b1aa10e8"}	https://github.com/d3/d3/blob/master/CHANGES.md	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24288497"> https://news.ycombinator.com/item?id=24288497 </a>	dac6bcb99863be6e11b05f7b7025bd92b7e3e403	\N	f	2020-08-27 22:10:00	2020-08-30 04:10:10.066416	0			'/item?id=24288497':6 '6.0':2 'comment':3 'd3':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24288497':4	zh	catacombs
684	Blanked-out spots on China's maps helped us uncover Xinjiang's camps	{"ver":2,"uid":1,"hash":"SHA1:067b8add6a046e2e41b120515389a3410e2d468d"}	https://www.buzzfeednews.com/article/alison_killing/satellite-images-investigation-xinjiang-detention-camps	2020-08-27 22:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24292962"> https://news.ycombinator.com/item?id=24292962 </a>	a7d44a6212144eb4d5f81a0b0070e661ef19508f	\N	f	2020-08-27 22:10:00	2020-08-30 04:10:10.037624	0			'/item?id=24292962':18 'blank':2 'blanked-out':1 'camp':14 'china':6 'comment':15 'help':9 'map':8 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24292962':16 'spot':4 'uncov':11 'us':10 'xinjiang':12	zh	danso
149	Goroutine Leaks - The Forgotten Sender	{"ver":2,"uid":1,"hash":"SHA1:a518641277060d5ae966a266251b97137a3d2c4d"}	https://www.ardanlabs.com/blog/2018/11/goroutine-leaks-the-forgotten-sender.html	2018-11-12 00:00:00	Introduction Concurrent programming allows developers to solve problems using more than one path of execution and is often used in an attempt to improve performance. Concurrency doesn’t mean these multiple paths are executing in parallel; it means these paths are executing out-of-order instead of sequentially. Historically, this type of programming is facilitated using libraries that are either provided by a standard library or from 3rd party developers.\nIn Go, concurrency features like Goroutines and channels are built into the language and runtime to reduce or eliminate the need for libraries.	e5f1d8cac1723c5bd4021d9c0a9b13c4ae7ee913	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.443897	0			'3rd':74 'allow':9 'attempt':27 'built':86 'channel':84 'concurr':7,31,79 'develop':10,76 'doesn':32 'either':66 'elimin':95 'execut':20,39,47 'facilit':61 'featur':80 'forgotten':4 'go':78 'goroutin':1,82 'histor':55 'improv':29 'instead':52 'introduct':6 'languag':89 'leak':2 'librari':63,71,99 'like':81 'mean':34,43 'multipl':36 'need':97 'often':23 'one':17 'order':51 'out-of-ord':48 'parallel':41 'parti':75 'path':18,37,45 'perform':30 'problem':13 'program':8,59 'provid':67 'reduc':93 'runtim':91 'sender':5 'sequenti':54 'solv':12 'standard':70 'type':57 'use':14,24,62	en	
1105	OPPO 云原生 Service Mesh 探索与实践	{"ver":2,"uid":1,"hash":"SHA1:1517c0ce98170a190b7d1db5e2a322f38c1c33a4"}	https://toutiao.io/k/3nt8cg0	2020-09-09 06:10:10	OPPO 云原生 Service Mesh 探索与实践	168533fa3bed283253e7aef4659b745de3051031	\N	f	2020-09-09 06:10:00	2020-09-10 00:10:10.181852	0			'mesh':4,9 'oppo':1,6 'service':3,8 '云原生':2,7 '探索与实践':5,10	zh	
1107	Kubernetes 无状态应用的一般特征	{"ver":2,"uid":1,"hash":"SHA1:e48cdd9a0a59d09d395e74ae275c470331b93356"}	https://toutiao.io/k/dmc9bgu	2020-09-09 06:10:10	Kubernetes 无状态应用的一般特征	e26e03dba223a1fa2e106763da643c70f3edfd25	\N	f	2020-09-09 06:10:00	2020-09-10 00:10:10.185523	0			'kubernetes':1,3 '无状态应用的一般特征':2,4	zh	
961	Ubuntu 20.04 LTS’ snap obsession has snapped me off of it	{"ver":2,"uid":1,"hash":"SHA1:35f83f974c66485bd844e97cc45d09a18314cdc2"}	https://personal.jatan.space/2020/09/05/ubuntu-snap-obsession-has-snapped-me-off-of-it/	2020-09-05 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24383276"> https://news.ycombinator.com/item?id=24383276 </a>	af83513ff19201d6e39f9959aa817bae85c63855	\N	f	2020-09-05 20:10:00	2020-09-08 17:10:10.423734	0			'/item?id=24383276':15 '20.04':2 'comment':12 'lts':3 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24383276':13 'obsess':5 'snap':4,7 'ubuntu':1	zh	uncertainquark
1106	图像编辑新作：连续色彩迁移	{"ver":2,"uid":1,"hash":"SHA1:17ddff2d52798457095f611aa97df412c3bb816c"}	https://toutiao.io/k/kbafp6d	2020-09-09 06:10:10	图像编辑新作：连续色彩迁移	bd1d07ccae59620eed88a8ac5280bd568052de94	\N	f	2020-09-09 06:10:00	2020-09-10 00:10:10.187504	0			'图像编辑新作':1,3 '连续色彩迁移':2,4	zh	
1112	The Long-Term Stock Exchange Opens for Business	{"ver":2,"uid":1,"hash":"SHA1:e45d6ca6467cf3a5b25577b309b2d9c180339122"}	https://blog.ltse.com/the-long-term-stock-exchange-opens-for-business-38b13f51e87b	2020-09-09 17:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24420177"> https://news.ycombinator.com/item?id=24420177 </a>	d2b39f7526c0f269af281857669537e5376737cb	\N	f	2020-09-09 17:10:00	2020-09-10 05:10:14.170842	0			'/item?id=24420177':13 'busi':9 'comment':10 'exchang':6 'long':3 'long-term':2 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24420177':11 'open':7 'stock':5 'term':4	zh	ummonk
996	The Right to Repair could help address a critical shortage in school computers	{"ver":2,"uid":1,"hash":"SHA1:c10b3a0cdca39cdcc0c0f2913e96fc6541acf473"}	https://uspirg.org/blogs/blog/usp/right-repair-could-help-address-critical-shortage-school-computers#new_tab	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24392379"> https://news.ycombinator.com/item?id=24392379 </a>	9057db9407ab5697fdea5754d8d615a6ffecb085	\N	f	2020-09-07 00:10:00	2020-09-10 05:10:14.181835	0			'/item?id=24392379':17 'address':7 'comment':14 'comput':13 'could':5 'critic':9 'help':6 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24392379':15 'repair':4 'right':2 'school':12 'shortag':10	zh	elorant
21	Internets of Interest #15: The Queen of the Skies	{"ver":2,"uid":1,"hash":"SHA1:6e53e5fa9e959f9b288e77d455a390c109e9bd00"}	https://dave.cheney.net/2019/12/05/internets-of-interest-15-the-queen-of-the-skies	2019-12-05 07:33:13	\n<p>If, like me, you&#8217;re a commercial aviation otaku, this walkthrough of an enthusiast built 747 cockpit simulator should be highly relevant to your interests.</p>\n\n\n\n<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">\n<iframe title="EEVblog #1268 - DIY Boeing 747 Cockpit Simulator Full Tour" width="625" height="352" src="https://www.youtube.com/embed/Ug7xa-7sako?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p></p>\n	4e06bd25376dc3c1aaaff61602633e0545189c0b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.229271	0			'15':4 '747':25 'a':15 'an':22 'aviation':17 'be':29 'built':24 'cockpit':26 'commercial':16 'enthusiast':23 'highly':30 'if':10 'interest':3 'interests':34 'internets':1 'like':11 'me':12 'of':2,7,21 'otaku':18 'queen':6 're':14 'relevant':31 'should':28 'simulator':27 'skies':9 'the':5,8 'this':19 'to':32 'walkthrough':20 'you':13 'your':33	en	Dave Cheney
774	还在手工生成数据库文档？3 个步骤自动完成了解一下	{"ver":2,"uid":1,"hash":"SHA1:a567bfb8d8456c890c9845544e0659e1feec0401"}	https://toutiao.io/k/vshredp	2020-08-31 02:10:13	还在手工生成数据库文档？3 个步骤自动完成了解一下	f2c04e20b66b61f64cd18de086d08f1e893be237	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.427945	0			'3':2,5 '个步骤自动完成了解一下':3,6 '还在手工生成数据库文档':1,4	zh	
772	After 48 years, Democrats endorse nuclear energy in platform	{"ver":2,"uid":1,"hash":"SHA1:1c5d9f8c851e431b4a1b081fcb2ea8d7bb081d53"}	https://www.forbes.com/sites/robertbryce/2020/08/23/after-48-years-democrats-endorse-nuclear-energy-in-platform/#3c7687df5829	2020-08-31 02:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24324974"> https://news.ycombinator.com/item?id=24324974 </a>	32280cc0b952142e7c8d57595b60954fbd54d7da	\N	f	2020-08-31 02:10:00	2020-09-03 18:10:09.057894	0			'/item?id=24324974':13 '48':2 'comment':10 'democrat':4 'endors':5 'energi':7 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24324974':11 'nuclear':6 'platform':9 'year':3	zh	elsewhen
997	Hong Kong mourns the end of its way of life	{"ver":2,"uid":1,"hash":"SHA1:00f38b5e95f8e13f8e4a95f86d56483de59b9a3d"}	https://www.nationalgeographic.com/history/2020/09/hong-kong-mourns-way-life-china-cracks-down-dissent/	2020-09-07 00:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24391716"> https://news.ycombinator.com/item?id=24391716 </a>	b7e197a040410d8b944aba4d990629f310d5d3bc	\N	f	2020-09-07 00:10:00	2020-09-10 05:10:14.223767	0			'/item?id=24391716':14 'comment':11 'end':5 'hong':1 'kong':2 'life':10 'mourn':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24391716':12 'way':8	zh	frrp
781	[推荐] 王者荣耀为什么不使用微服务架构？	{"ver":2,"uid":1,"hash":"SHA1:95b69daea914da0cfcb9d39485622459daa62a0e"}	https://toutiao.io/k/w8xis2z	2020-09-05 05:10:11	[推荐] 王者荣耀为什么不使用微服务架构？	1eb04fdd442428e293a464f8fcd36813ad18f093	\N	f	2020-08-31 02:10:00	2020-09-10 04:10:09.719267	0			'推荐':1,3 '王者荣耀为什么不使用微服务架构':2,4	zh	
783	手淘实习百日记	{"ver":2,"uid":1,"hash":"SHA1:422346364a6625fa2fbfa35546c7a03718792364"}	https://toutiao.io/k/8h1hg8p	2020-08-31 02:10:14	手淘实习百日记	dcbbb0377ae83472400d62171f1d446ae4fb2967	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.430051	0			'手淘实习百日记':1,2	zh	
1059	Prometheus 监控神器：服务发现篇（三）	{"ver":2,"uid":1,"hash":"SHA1:fdfa77493ac9ea4346a8e05ece46fb387aacf810"}	https://toutiao.io/k/11k5gr2	2020-09-08 03:10:10	Prometheus 监控神器：服务发现篇（三）	7a64bb8c050bb8573910c167a98bf865c989f2bf	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.519374	0			'prometheus':1,5 '三':4,8 '服务发现篇':3,7 '监控神器':2,6	zh	
776	PHP-FPM 进程模型	{"ver":2,"uid":1,"hash":"SHA1:37bcd073028703e53aad1b08c7c923344c47491b"}	https://toutiao.io/k/dzyb5qc	2020-08-31 02:10:13	PHP-FPM 进程模型	adf0c19e666043c6e5a77a447f5bae927e431484	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.432281	0			'fpm':3,7 'php':2,6 'php-fpm':1,5 '进程模型':4,8	zh	
773	[推荐] 面试：为了进阿里，又把并发 CAS (Compare and Swap) 实现重新精读一遍	{"ver":2,"uid":1,"hash":"SHA1:14712ebd40f7113f05a6b010c032d22622ad1216"}	https://toutiao.io/k/3683jxd	2020-09-03 17:10:10	[推荐] 面试：为了进阿里，又把并发 CAS (Compare and Swap) 实现重新精读一遍	d90fe979094670cd3419567a16d51d61e7480e5d	\N	f	2020-08-31 02:10:00	2020-09-10 04:10:09.70315	0			'and':7,16 'cas':5,14 'compare':6,15 'swap':8,17 '为了进阿里':3,12 '又把并发':4,13 '实现重新精读一遍':9,18 '推荐':1,10 '面试':2,11	zh	
779	HashMap 实现原理分析（一）	{"ver":2,"uid":1,"hash":"SHA1:9dff27d47c4cf546be8de4d17de9a3d334050dd4"}	https://toutiao.io/k/zwecqtf	2020-08-31 04:10:08	HashMap 实现原理分析（一）	982c255c40601b1fbbe09820d657ff8e885e733a	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.434389	0			'hashmap':1,4 '一':3,6 '实现原理分析':2,5	zh	
780	动态规划问题为什么要画表格？	{"ver":2,"uid":1,"hash":"SHA1:17ec4188f933460a99f58a8a870ddf1292af77eb"}	https://toutiao.io/k/ak1vnp7	2020-08-31 02:10:14	动态规划问题为什么要画表格？	a200ef0410fa0a9e7731e5af4f1a029ebad931c2	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.41941	0			'动态规划问题为什么要画表格':1,2	zh	
1060	Spring 5 中文解析核心篇：IoC 容器之 Spring AOP API	{"ver":2,"uid":1,"hash":"SHA1:bbc6907f997ac260ce362c1041d1c6f9885fc323"}	https://toutiao.io/k/bw4v40a	2020-09-08 03:10:10	Spring 5 中文解析核心篇：IoC 容器之 Spring AOP API	f5e8b206719f547fef8c455549a4d48c65f6af59	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.521253	0			'5':2,10 'aop':7,15 'api':8,16 'ioc':4,12 'spring':1,6,9,14 '中文解析核心篇':3,11 '容器之':5,13	zh	
782	科普，想成为厉害的 Java 后端程序员，你需要懂这些	{"ver":2,"uid":1,"hash":"SHA1:804b12c5657aee4bd7ff29ef6daab994eefb2de8"}	https://toutiao.io/k/uoqreby	2020-08-31 02:10:14	科普，想成为厉害的 Java 后端程序员，你需要懂这些	efe0a8aa23dfaf5c3c0139d5ddcdc0f3047a36af	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.423737	0			'java':3,8 '你需要懂这些':5,10 '后端程序员':4,9 '想成为厉害的':2,7 '科普':1,6	zh	
1058	Google has removed the option to disable autoplay from Mobile Chrome	{"ver":2,"uid":1,"hash":"SHA1:85457f6e74ff7a03ad793f8a51f8f11598e4d517"}	https://support.google.com/chrome/thread/26214034	2020-09-08 03:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24403392"> https://news.ycombinator.com/item?id=24403392 </a>	258f00206897ef36a8db2ac6f0c13ca993693972	\N	f	2020-09-08 03:10:00	2020-09-10 05:10:14.205858	0			'/item?id=24403392':15 'autoplay':8 'chrome':11 'comment':12 'disabl':7 'googl':1 'mobil':10 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24403392':13 'option':5 'remov':3	zh	baybal2
775	Android 加载图片占用内存分析	{"ver":2,"uid":1,"hash":"SHA1:3cef118d0cd9d21c2743abc8ffae4cf0e709acbd"}	https://toutiao.io/k/pg47m32	2020-08-31 02:10:13	Android 加载图片占用内存分析	c705a1816dd77dfd55b083f5d5d16224abf0d0e2	\N	f	2020-08-31 02:10:00	2020-08-31 23:10:10.425932	0			'android':1,3 '加载图片占用内存分析':2,4	zh	
778	[推荐] 一次完整的 JVM 堆外内存泄漏故障排查记录	{"ver":2,"uid":1,"hash":"SHA1:b9a849f7dc7dae7fe17ad2c1990f6fc323bfab5a"}	https://toutiao.io/k/u5ha7zq	2020-09-04 20:10:10	[推荐] 一次完整的 JVM 堆外内存泄漏故障排查记录	ccbd6ef346e73386110fce9dc94a2f374c4c7d1f	\N	f	2020-08-31 02:10:00	2020-09-10 01:10:12.411013	0			'jvm':3,7 '一次完整的':2,6 '堆外内存泄漏故障排查记录':4,8 '推荐':1,5	zh	
1064	字节跳动的算法面试题是什么难度？	{"ver":2,"uid":1,"hash":"SHA1:f00d79845531aea7c2d5d06d07577f508c04c58b"}	https://toutiao.io/k/9fcfnso	2020-09-08 03:10:10	字节跳动的算法面试题是什么难度？	3688bbb08e92b56e3b7bf49aa8a7d7eb554325f4	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.509855	0			'字节跳动的算法面试题是什么难度':1,2	zh	
1062	分布式系统的核心：共识问题	{"ver":2,"uid":1,"hash":"SHA1:dbc86322b433c40a3640e36655ff2300f95cd293"}	https://toutiao.io/k/yuo5idd	2020-09-08 03:10:10	分布式系统的核心：共识问题	157280bcbc6b6f59f79eccd46c0c94cb9eb70920	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.511842	0			'共识问题':2,4 '分布式系统的核心':1,3	zh	
785	Show HN: Vimac – Productive macOS keyboard-driven navigation	{"ver":2,"uid":1,"hash":"SHA1:d8b62714474014c7c235e7efbbfb6c0a209c76d0"}	http://vimacapp.com/	2020-08-31 04:10:08	Comments: <a href="https://news.ycombinator.com/item?id=24323378"> https://news.ycombinator.com/item?id=24323378 </a>	9bbedb3e0dfce3862c6c23e2e9a69663118e33cd	\N	f	2020-08-31 04:10:00	2020-09-03 18:10:09.091196	0			'/item?id=24323378':13 'comment':10 'driven':8 'hn':2 'keyboard':7 'keyboard-driven':6 'maco':5 'navig':9 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24323378':11 'product':4 'show':1 'vimac':3	zh	dexterleng
1061	高效能人士的 2 个习惯：以终为始与要事第一	{"ver":2,"uid":1,"hash":"SHA1:03304d1a506269fd75dbf2bd397415629c5ee459"}	https://toutiao.io/k/awuv747	2020-09-08 03:10:10	高效能人士的 2 个习惯：以终为始与要事第一	e10f27ba4fff445a687da8ae269e903cf1783605	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.515678	0			'2':2,6 '个习惯':3,7 '以终为始与要事第一':4,8 '高效能人士的':1,5	zh	
1063	云原生技术研究：Cilium 网络概述	{"ver":2,"uid":1,"hash":"SHA1:072e5f4ab4fbc14204abf347d3c3ef2568c67762"}	https://toutiao.io/k/lohfj9v	2020-09-08 03:10:10	云原生技术研究：Cilium 网络概述	f941ea4f841d8552f7d6c3db3e1b5cf0ebf45827	\N	f	2020-09-08 03:10:00	2020-09-08 23:10:11.52512	0			'cilium':2,5 '云原生技术研究':1,4 '网络概述':3,6	zh	
777	[推荐] [译] 5 个 Git 工作流，改善你的开发流程	{"ver":2,"uid":1,"hash":"SHA1:9bcf4669f0c5b50133bae19fbbd190ac0d9b93b7"}	https://toutiao.io/k/qird2vy	2020-09-08 03:10:10	[推荐] [译] 5 个 Git 工作流，改善你的开发流程	8d84fe1016b5fccf4d052383767eb7aa0cd74b05	\N	f	2020-08-31 02:10:00	2020-09-10 04:10:09.721875	0			'5':3,10 'git':5,12 '个':4,11 '工作流':6,13 '推荐':1,8 '改善你的开发流程':7,14 '译':2,9	zh	
45	Deutsch-Jozsa Algorithm	{"ver":2,"uid":1,"hash":"SHA1:36662bc885093c91ae649760e36a1f838635f245"}	https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In the previous <a href="https://leimao.github.io/blog/Deutsch-Algorithm/">blog post</a>, I discussed the Deutsch’s algorithm which determines whether the function $f(x)$ is balanced or constant by running $f(x)$ once using quantum circuits, where $f(x)$ maps from the set $\\{0,1\\}$ to the set $\\{0,1\\}$. However, using classical circuits, we are able to determine whether the function $f(x)$ is balanced or constant by running $f(x)$ twice. It might seem to some people that the improvement is not significant for this particular simple problem.</p>\n\n<p><br /></p>\n\n<p>Let’s change the problem setting to a similar but more sophisticated one. Instead of taking one single bit as input, $f(\\mathbf{x})$ now takes $n$ bits as input. Now, $f(\\mathbf{x})$ maps from the set $\\{0,1\\}^n$ to the set $\\{0,1\\}$. The number of different inputs to $f(\\mathbf{x})$ is $2^n$. We call the the function $f(\\mathbf{x})$ balanced if $f(\\mathbf{x}) = 0$ for exactly $2^{n-1}$ of all the different inputs, and $f(\\mathbf{x}) = 1$ for the rest of the inputs. We call the function $f(\\mathbf{x})$ constant if $f(\\mathbf{x}) = 0$ for all different inputs, or $f(\\mathbf{x}) = 1$ for all different inputs. $f(\\mathbf{x})$ could be neither balanced or constant, but in this particular problem, we assume the $f(\\mathbf{x})$ we are investigating must be either balanced or constant. It should be noted that it is a more general case for the problem that the Deutsch algorithm was trying to solve. When $n=1$, it decays to the problem that the Deutsch algorithm was trying to solve.</p>\n\n<p><br /></p>\n\n<p>With classical circuits, what is the minimum and maximum number of runs to determine whether $f(\\mathbf{x})$ we are investigating must be either balanced or constant? We have $2^n$ different inputs to test for this binary classification problem. In the worst scenario, we could run into the situation that the first $2^{n-1}$ inputs we tested produce all $0$s or all $1$s. Then the $2^{n-1} + 1$th input we tested must tell us whether $f(\\mathbf{x})$ could be neither balanced or constant. For example, if the first $2^{n-1}$ inputs we tested produce all $0$s, if the $2^{n-1} + 1$th input we tested produces $0$, then $f(\\mathbf{x})$ is constant; if the the $2^{n-1} + 1$th input we tested produces $1$, then $f(\\mathbf{x})$ is balanced. In the best scenario, we got both $0$ and $1$ in the first two runs, we immediately know $f(\\mathbf{x})$ is balanced.</p>\n\n<p><br /></p>\n\n<p>With quantum circuits, can we do better and how much can we do better? In fact, there is a Deutsch-Jozsa algorithm, a derivative of the Deutsch algorithm, which solve the problem using exactly one run. If you compared to the worst case using classical circuits, it is $2^{n-1} + 1$ times faster asymptotically, which is significant when $n$ is large.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the Deutsch-Jozsa algorithm. It would be recommended if the reader could read the blog on <a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch algorithm</a> first, although this blog post should be mostly self-contained.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<h4 id="reducing-sum-or-difference-to-boolean">Reducing Sum or Difference to Boolean</h4>\n\n<p>If $x$ and $y$ are binary values, $x, y \\in \\{0, 1\\}$, we have</p>\n\n\\[\\begin{align}\n(-1)^{x + y} &amp;= (-1)^{x \\oplus y} \\\\\n(-1)^{x - y} &amp;= (-1)^{x \\oplus y} \\\\\n\\end{align}\\]\n\n<p>where $\\oplus$ is $\\text{XOR}$ (binary addition modulo 2). This could be easily verified using truth table.</p>\n\n<h4 id="distributivity-of-xor">Distributivity of XOR</h4>\n\n<p>If $x$, $y$, and $z$ are binary values, $x, y, z \\in \\{0, 1\\}$, we have</p>\n\n\\[\\begin{align}\n(x \\oplus y) \\wedge z &amp;= ( x \\wedge z ) \\oplus ( y \\wedge z ) \\\\\n\\end{align}\\]\n\n<p>I did not find a proof from the Internet so I derived a proof here. The proof is a little bit complicated and requires to use boolean algebra.</p>\n\n<p><br /></p>\n\n<p>It is easy to verify using truth table that</p>\n\n\\[\\begin{align}\nx \\oplus y &amp;= (x \\vee y) \\wedge \\neg(x \\wedge y) \\\\\n&amp;= (x \\wedge \\neg y) \\vee (\\neg x \\wedge y) \\\\\n\\end{align}\\]\n\n<p>Using the basic <a href="https://en.wikipedia.org/wiki/Boolean_algebra#Laws">boolean algebra</a>, we have</p>\n\n\\[\\begin{align}\n(x \\oplus y) \\wedge z &amp;= \\big( (x \\wedge \\neg y) \\vee (\\neg x \\wedge y) \\big) \\wedge z \\\\\n&amp;= \\big( (x \\wedge \\neg y) \\wedge z \\big) \\vee\\big( (\\neg x \\wedge y) \\wedge z \\big) \\\\\n&amp;= ( x \\wedge \\neg y \\wedge z ) \\vee ( \\neg x \\wedge y \\wedge z ) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n( x \\wedge z ) \\oplus ( y \\wedge z ) &amp;= \\big( ( x \\wedge z ) \\wedge \\neg ( y \\wedge z ) \\big) \\vee \\big( \\neg ( x \\wedge z ) \\wedge ( y \\wedge z ) \\big) \\\\\n&amp;= \\big( ( x \\wedge z ) \\wedge ( \\neg y \\vee \\neg z ) \\big) \\vee \\big( ( \\neg x \\vee \\neg z ) \\wedge ( y \\wedge z ) \\big) \\\\\n&amp;= \\Big( \\big( ( x \\wedge z ) \\wedge \\neg y \\big) \\vee \\big( ( x \\wedge z ) \\wedge \\neg z \\big) \\Big) \\vee \\Big( \\big( \\neg x \\wedge ( y \\wedge z ) \\big) \\vee \\big( \\neg z  \\wedge ( y \\wedge z ) \\big) \\Big) \\\\\n&amp;= \\Big( \\big( ( x \\wedge z ) \\wedge \\neg y \\big) \\vee 0 \\Big) \\vee \\Big( \\big( \\neg x \\wedge ( y \\wedge z ) \\big) \\vee 0 \\Big) \\\\\n&amp;= \\big( ( x \\wedge z ) \\wedge \\neg y \\big)  \\vee \\big( \\neg x \\wedge ( y \\wedge z ) \\big) \\\\\n&amp;= ( x \\wedge z  \\wedge \\neg y )  \\vee ( \\neg x \\wedge y \\wedge z  ) \\\\\n&amp;= ( x \\wedge \\neg y \\wedge z )  \\vee ( \\neg x \\wedge y \\wedge z  ) \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n(x \\oplus y) \\wedge z &amp;= ( x \\wedge z ) \\oplus ( y \\wedge z ) \\\\\n\\end{align}\\]\n\n<p>This concludes the proof.</p>\n\n<h4 id="inner-product-and-inner-product-space-for-binary-vector-space">Inner Product and Inner Product Space for Binary Vector Space</h4>\n\n<p>In the previous <a href="https://leimao.github.io/blog/Inner-Product/">blog post</a>, we have defined the inner product and inner product space for complex vector space. Similarly, we could also define the inner product and inner product space for binary vector space.</p>\n\n\\[\\begin{align}\n\\langle -, - \\rangle : \\{0,1\\}^n \\times \\{0,1\\}^n \\rightarrow \\{0,1\\}\n\\end{align}\\]\n\n<p>Given two binary vectors $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$, $\\mathbf{x} = \\{x_0, x_1, \\cdots, x_{n-1}\\}$ and $\\mathbf{y} = \\{y_0, y_1, \\cdots, y_{n-1}\\}$, the inner product of $\\mathbf{x}$ and $\\mathbf{y}$ is defined as</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{y} \\rangle &amp;= (x_0 \\wedge y_0) \\oplus (x_1 \\wedge y_1) \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\\\\n&amp;= \\bigoplus_{i=0}^{n-1} (x_i \\wedge y_i )\n\\end{align}\\]\n\n<p>which is somewhat similar to the inner product definition for real vector space.</p>\n\n<p><br /></p>\n\n<p>The bitwise exclusive-or operation $\\oplus$ was also defined for binary vectors $\\mathbf{x}$ and $\\mathbf{y}$ of the same length. Given two binary vectors $\\mathbf{x}, \\mathbf{y} \\in \\{0,1\\}^n$, $\\mathbf{x} = \\{x_0, x_1, \\cdots, x_{n-1}\\}$ and $\\mathbf{y} = \\{y_0, y_1, \\cdots, y_{n-1}\\}$,</p>\n\n\\[\\begin{align}\n\\mathbf{x} \\oplus \\mathbf{y} = \\{x_0 \\oplus y_0, x_1 \\oplus y_1, \\cdots, x_{n-1} \\oplus y_{n-1}\\}\n\\end{align}\\]\n\n<p>The following inner product properties are satisfied based on the above inner product definition.</p>\n\n<p><br /></p>\n\n<p>Given $\\mathbf{x}, \\mathbf{x}^{\\prime}, \\mathbf{y}, \\mathbf{y}^{\\prime} \\in \\{0,1\\}^n$, using the $\\text{XOR}$ distributivity property we derived above,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x} \\oplus \\mathbf{x}^{\\prime}, \\mathbf{y} \\rangle &amp;= \\big((x_0 \\oplus x_0^{\\prime})\\wedge y_0\\big) \\oplus \\big((x_1 \\oplus x_1^{\\prime}) \\wedge y_1\\big) \\oplus \\cdots \\oplus \\big((x_{n-1} \\oplus x_{n-1}^{\\prime}) \\wedge y_{n-1}\\big) \\\\\n&amp;= \\big((x_0 \\wedge y_0) \\oplus (x_0^{\\prime} \\wedge y_0) \\big) \\oplus \\big((x_1 \\wedge y_1) \\oplus (x_1^{\\prime} \\wedge y_1) \\big) \\oplus \\cdots \\oplus \\big((x_{n-1} \\wedge y_{n-1}) \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\big) \\\\\n&amp;= (x_0 \\wedge y_0) \\oplus (x_0^{\\prime} \\wedge y_0)  \\oplus (x_1 \\wedge y_1) \\oplus (x_1^{\\prime} \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\\\\n&amp;= \\big( (x_0 \\wedge y_0) \\oplus (x_1 \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1} \\wedge y_{n-1}) \\big) \\oplus  \\big( (x_0^{\\prime} \\wedge y_0) \\oplus (x_1^{\\prime} \\wedge y_1)  \\oplus \\cdots \\oplus (x_{n-1}^{\\prime} \\wedge y_{n-1}) \\big) \\\\\n&amp;= \\langle \\mathbf{x}, \\mathbf{y} \\rangle \\oplus \\langle \\mathbf{x}^{\\prime}, \\mathbf{y} \\rangle   \\\\\n\\end{align}\\]\n\n<p>Similarly,</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{x}, \\mathbf{y} \\oplus \\mathbf{y}^{\\prime} \\rangle = \\langle \\mathbf{x}, \\mathbf{y} \\rangle \\oplus \\langle \\mathbf{x}, \\mathbf{y}^{\\prime} \\rangle \\\\\n\\end{align}\\]\n\n<p>Let $\\mathbf{0} = \\{ \\underbrace{0, 0, \\cdots, 0}_{n} \\} =  0^n$, we have</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{0}, \\mathbf{y} \\rangle = 0 \\\\\n\\langle \\mathbf{x}, \\mathbf{0} \\rangle = 0 \\\\\n\\end{align}\\]\n\n<h4 id="hadamard-operator">Hadamard Operator</h4>\n\n<p>Hardmard operator is a special quantum operator, which could be represented using the following unitary matrix.</p>\n\n\\[\\begin{align}\nH &amp;= \n\\begin{bmatrix} \n    \\frac{1}{\\sqrt{2}} &amp; \\frac{1}{\\sqrt{2}} \\\\\n    \\frac{1}{\\sqrt{2}} &amp; -\\frac{1}{\\sqrt{2}} \\\\\n\\end{bmatrix}  \\\\\n&amp;= \n\\frac{1}{\\sqrt{2}}\n\\begin{bmatrix} \n    1 &amp; 1 \\\\\n    1 &amp; -1 \\\\\n\\end{bmatrix}  \n\\end{align}\\]\n\n<p>It is easy to see that</p>\n\n\\[\\begin{align}\nH|0\\rangle &amp;= \\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} \\\\\nH|1\\rangle &amp;= \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\nH\\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}} &amp;= |0\\rangle \\\\\nH\\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} &amp;= |1\\rangle \\\\\n\\end{align}\\]\n\n<p>We denote</p>\n\n\\[\\underbrace{H \\otimes H \\otimes \\cdots \\otimes H}_{n} = H^{\\otimes n}\\]\n\n<p>It is easy to see that $H$ is unitary, i.e., $H H^{\\dagger} = H^{\\dagger} H = I$ and $H^{\\dagger} = H$. In fact, $H^{\\otimes n}$ is unitary, and $(H^{\\otimes n})^{-1} = H^{\\otimes n}$.</p>\n\n<p><br /></p>\n\n<p>For Kronecker product, the $A \\otimes B$ is invertible if and only if both $A$ and $B$ are invertible and</p>\n\n\\[\\begin{align}\n(A \\otimes B)^{-1} = A^{-1} \\otimes B^{-1}\n\\end{align}\\]\n\n<p>It is easy to verify this using the <a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker product mixed-product property</a>.</p>\n\n<p><br /></p>\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n(H^{\\otimes n})^{-1} &amp;= (H \\otimes H^{\\otimes {n-1}})^{-1} \\\\\n&amp;= H^{-1} \\otimes (H^{\\otimes {n-1}})^{-1} \\\\\n&amp;= H \\otimes (H^{\\otimes {n-1}})^{-1} \\\\\n&amp;= \\cdots \\\\\n&amp;= H^{\\otimes n}\n\\end{align}\\]\n\n<p>The values in the matrix $H^{\\otimes n}$ follows specific patterns. Specifically,</p>\n\n\\[H^{\\otimes n}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $\\mathbf{i}$ is the binary vector representation for row number $i$, and $\\mathbf{j}$ is the binary vector representation for column number $j$.</p>\n\n<p><br /></p>\n\n<p>Since I did not find any proof from the Internet, I would like to derive a simple proof using mathematical induction.</p>\n\n<p><br /></p>\n\n<p>For the base case for $n = 1$, it is easy to verify that</p>\n\n\\[H^{\\otimes 1}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^1}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i, j \\in [0, 2^1)$, i.e., $\\mathbf{i}, \\mathbf{j} \\in \\{0, 1\\}^{1}$.</p>\n\n<p><br /></p>\n\n<p>Assuming for $n = k - 1$,</p>\n\n\\[H^{\\otimes {k-1}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k-1}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i, j \\in [0, 2^{k-1})$, i.e., $\\mathbf{i}, \\mathbf{j} \\in \\{0, 1\\}^{k - 1}$.</p>\n\n<p><br /></p>\n\n<p>For $n = k$, we have</p>\n\n\\[\\begin{align}\nH^{\\otimes k} &amp;= H \\otimes H^{\\otimes {k-1}} \\\\\n&amp;= \\frac{1}{\\sqrt{2}} \n\\begin{bmatrix} \n    1 &amp; 1 \\\\\n    1 &amp; -1 \\\\\n\\end{bmatrix}  \n\\otimes\nH^{\\otimes {k-1}} \\\\\n&amp;= \\frac{1}{\\sqrt{2}} \n\\begin{bmatrix} \n    H^{\\otimes {k-1}} &amp; H^{\\otimes {k-1}} \\\\\n    H^{\\otimes {k-1}} &amp; -H^{\\otimes {k-1}} \\\\\n\\end{bmatrix} \\\\\n\\end{align}\\]\n\n<p>Note that $H^{\\otimes {k-1}}$ is a $2^{k-1}$ by $2^{k-1}$ matrix.</p>\n\n<p><br /></p>\n\n<p>For $i \\in [0, 2^{k-1})$ and $j \\in [0, 2^{k-1})$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] &amp;= \\frac{1}{\\sqrt{2}} H^{\\otimes {k-1}}[\\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime}] \\\\\n&amp;= \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle}\n\\end{align}\\]\n\n<p>where $\\mathbf{i}^{\\prime} = \\mathbf{i}_{1:}$, and $\\mathbf{j}^{\\prime} = \\mathbf{j}_{1:}$, $i_0 = 0$, and $j_0 = 0$.</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{i}, \\mathbf{j} \\rangle &amp;= (i_0 \\wedge j_0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (0 \\wedge 0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= 0 \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[H^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i \\in [0, 2^{k-1})$ and $j \\in [0, 2^{k-1})$.</p>\n\n<p><br /></p>\n\n<p>For $i \\in [2^{k-1}, 2^{k})$ and $j \\in [0, 2^{k-1})$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] &amp;= \\frac{1}{\\sqrt{2}} H^{\\otimes {k-1}}[\\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime}] \\\\\n&amp;= \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle}\n\\end{align}\\]\n\n<p>where $\\mathbf{i}^{\\prime} = \\mathbf{i}_{1:}$, and $\\mathbf{j}^{\\prime} = \\mathbf{j}_{1:}$, $i_0 = 1$, and $j_0 = 0$.</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{i}, \\mathbf{j} \\rangle &amp;= (i_0 \\wedge j_0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (1 \\wedge 0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= 0 \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[H^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i \\in [2^{k-1}, 2^{k})$ and $j \\in [0, 2^{k-1})$.</p>\n\n<p><br /></p>\n\n<p>For $i \\in [0, 2^{k-1})$ and $j \\in [2^{k-1}, 2^{k})$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] &amp;= \\frac{1}{\\sqrt{2}} H^{\\otimes {k-1}}[\\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime}] \\\\\n&amp;= \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle}\n\\end{align}\\]\n\n<p>where $\\mathbf{i}^{\\prime} = \\mathbf{i}_{1:}$, and $\\mathbf{j}^{\\prime} = \\mathbf{j}_{1:}$, $i_0 = 0$, and $j_0 = 1$.</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{i}, \\mathbf{j} \\rangle &amp;= (i_0 \\wedge j_0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (0 \\wedge 1) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= 0 \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[H^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i \\in [0, 2^{k-1})$ and $j \\in [2^{k-1}, 2^{k})$.</p>\n\n<p><br /></p>\n\n<p>For $i \\in [2^{k-1}, 2^{k})$ and $j \\in [2^{k-1}, 2^{k})$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] &amp;= - \\frac{1}{\\sqrt{2}} H^{\\otimes {k-1}}[\\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime}] \\\\\n&amp;= -\\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle}\n\\end{align}\\]\n\n<p>where $\\mathbf{i}^{\\prime} = \\mathbf{i}_{1:}$, and $\\mathbf{j}^{\\prime} = \\mathbf{j}_{1:}$, $i_0 = 1$, and $j_0 = 1$.</p>\n\n\\[\\begin{align}\n\\langle \\mathbf{i}, \\mathbf{j} \\rangle &amp;= (i_0 \\wedge j_0) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= (1 \\wedge 1) \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= 1 \\oplus (i_1 \\wedge j_1) \\oplus \\cdots \\oplus (i_{n-1} \\wedge j_{n-1}) \\\\\n&amp;= 1 \\oplus \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle \\\\\n&amp;= 1 \\oplus \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle \\\\\n\\end{align}\\]\n\n<p>Based on the reducing sum or difference to boolean property we derived above,</p>\n\n\\[\\begin{align}\n(-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle} &amp;= (-1)^{1 \\oplus \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle} \\\\ \n&amp;= (-1)^{1 + \\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle} \\\\\n&amp;= -(-1)^{\\langle \\mathbf{i}^{\\prime}, \\mathbf{j}^{\\prime} \\rangle} \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[H^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i \\in [2^{k-1}, 2^{k})$ and $j \\in [2^{k-1}, 2^{k})$.</p>\n\n<p><br /></p>\n\n<p>Taken together, for $n = k$,</p>\n\n\\[H^{\\otimes {k}}[\\mathbf{i}, \\mathbf{j}] = \\frac{1}{\\sqrt{2^{k}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle}\\]\n\n<p>where $i, j \\in [0, 2^k)$, i.e., $\\mathbf{i}, \\mathbf{j} \\in \\{0, 1\\}^{k}$.</p>\n\n<p><br /></p>\n\n<p>This finishes the mathematical induction and concludes the proof.</p>\n\n<p><br /></p>\n\n<p>Note that the entries of the first column and the entries of the first row of $H^{\\otimes {n}}$ have exactly the same value, $\\frac{1}{\\sqrt{2^{n}}}$. This is because</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}}[\\mathbf{0}, \\mathbf{j}] &amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{\\langle \\mathbf{0}, \\mathbf{j} \\rangle} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{\\langle \\mathbf{0}, \\mathbf{j} \\rangle} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{0} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\nH^{\\otimes {n}}[\\mathbf{i}, \\mathbf{0}] &amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{0} \\rangle} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{\\langle \\mathbf{i}, \\mathbf{0} \\rangle} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} (-1)^{0} \\\\\n&amp;= \\frac{1}{\\sqrt{2^{n}}} \\\\\n\\end{align}\\]\n\n<p>Equivalently, we might write, $H^{\\otimes {n}}_{0,:} = \\frac{1}{\\sqrt{2^{n}}} \\mathbf{1}$ and $H^{\\otimes {n}}_{:,0} = \\frac{1}{\\sqrt{2^{n}}} \\mathbf{1}$.</p>\n\n<p><br /></p>\n\n<p>To extract an arbitrary column $j$ from $H^{\\otimes {n}}$, we prepared a one-hot quantum system basic state vector $| \\mathbf{y} \\rangle = [y_0, y_1, \\cdots, y_{2^n-1}]^{\\top}$, where $y_j = 1$ and $y_k = 0$ for $k \\neq j$.</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}}_{:,j} &amp;= H^{\\otimes {n}} | \\mathbf{y} \\rangle \\\\\n&amp;= H^{\\otimes n}[\\mathbf{0}, \\mathbf{j}] | \\mathbf{x}_0 \\rangle + H^{\\otimes n}[\\mathbf{1}, \\mathbf{j}] | \\mathbf{x}_1 \\rangle + \\cdots + H^{\\otimes n}[\\mathbf{2^n-1}, \\mathbf{j}] | \\mathbf{x}_{2^{n}-1} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{0}, \\mathbf{j} \\rangle} | \\mathbf{x}_0 \\rangle + \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{1}, \\mathbf{j} \\rangle} | \\mathbf{x}_1 \\rangle + \\cdots + \\frac{1}{\\sqrt{2^n}} (-1)^{\\langle \\mathbf{2^n-1}, \\mathbf{j} \\rangle} | \\mathbf{x}_{2^{n}-1} \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle} | \\mathbf{x}_i \\rangle\\\\\n\\end{align}\\]\n\n<p>where $| \\mathbf{x}_i \\rangle$ is a quantum system one-hot basic state vector,  $|\\mathbf{x}_i\\rangle = [x_0, x_1, \\cdots, x_{2^{n}-1}]^{\\top}$, where $x_i = 1$ and $x_k = 0$ for $k \\neq i$.</p>\n\n<p><br /></p>\n\n<p>Since $H^{\\otimes {n}}$ is unitary and $(H^{\\otimes {n}})^{-1} = H^{\\otimes {n}}$as we have discussed above,</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{j} \\rangle} | \\mathbf{x}_i \\rangle \\Big) &amp;= H^{\\otimes {n}} H^{\\otimes {n}} | \\mathbf{y} \\rangle \\\\\n&amp;= I | \\mathbf{y} \\rangle \\\\\n&amp;= | \\mathbf{y} \\rangle \\\\\n\\end{align}\\]\n\n<p>For example, if $j = 0$, $| \\mathbf{y} \\rangle = [\\underbrace{1, 0, 0, \\cdots, 0}_{2^n} ]^{\\top} = | \\mathbf{0} \\rangle$,</p>\n\n\\[\\begin{align}\nH^{\\otimes {n}} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} | \\mathbf{x}_i \\rangle \\Big) &amp;=\nH^{\\otimes {n}} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{0} | \\mathbf{x}_i \\rangle \\Big) \\\\\n&amp;= H^{\\otimes {n}} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{0} \\rangle} | \\mathbf{x}_i \\rangle \\Big) \\\\ \n&amp;= H^{\\otimes {n}} H^{\\otimes {n}} | \\mathbf{0} \\rangle \\\\ \n&amp;= I | \\mathbf{0} \\rangle \\\\ \n&amp;= | \\mathbf{0} \\rangle \\\\\n\\end{align}\\]\n\n<h3 id="deutsch-jozsa-algorithm">Deutsch-Jozsa Algorithm</h3>\n\n<p>The black-box $f(\\mathbf{x})$ is represented using a quantum gate $U_f$. Our job is to determine whether the $f(\\mathbf{x})$ corresponding to the $U_f$ is constant or balanced.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-03-Deutsch-Jozsa-Algorithm/Uf.png" style="width: 50%; height: 50%" />\n    <figcaption>$U_f$</figcaption>\n</figure>\n</div>\n\n<p>The quantum gate $U_f$ is a unitary matrix which maps from $| \\mathbf{x} \\rangle \\otimes | y \\rangle$ to $| \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\oplus y \\rangle$, namely $U_f (| \\mathbf{x} \\rangle \\otimes | y \\rangle) = | \\mathbf{x} \\rangle \\otimes | f(\\mathbf{x}) \\oplus y \\rangle$, for $\\mathbf{x} \\in \\{0, 1\\}^n$ and $y \\in \\{0, 1\\}$. When $y = 0$, $| f(\\mathbf{x}) \\oplus y \\rangle = | f(\\mathbf{x}) \\oplus 0 \\rangle = | f(\\mathbf{x}) \\rangle $, $| y \\oplus f(\\mathbf{x}) \\rangle$ is just $| f(\\mathbf{x}) \\rangle$.</p>\n\n<p><br /></p>\n\n<p>Note that the above mapping is not necessarily valid when $| \\mathbf{x} \\rangle$ and $| y \\rangle$ are superpositions.</p>\n\n<p><br /></p>\n\n<p>Let’s further check when $| \\mathbf{x} \\rangle$ and $| y \\rangle$ are superpositions, what the outputs from $U_f$ will be. Perhaps we could achieve fewer runs with superpositions.</p>\n\n<h4 id="first-attempt">First Attempt</h4>\n\n<p>In the first attempt, we made the second input to $U_f$ a superposition, which is achieved by applying a Hadamard operator to the second input $|1\\rangle$. This is almost the same as what we did in the second attempt in the <a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch algorithm</a>. The superposition is</p>\n\n\\[\\begin{align}\nH|1\\rangle &amp;= \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-03-Deutsch-Jozsa-Algorithm/attempt-1.png" style="width: 75%; height: 75%" />\n    <figcaption>First Attempt</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |\\mathbf{x}\\rangle \\otimes |1\\rangle\\\\\n&amp;= |\\mathbf{x}, 1\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (I \\otimes H) |\\varphi_0\\rangle \\\\\n&amp;= (I \\otimes H) (|\\mathbf{x}\\rangle \\otimes |1\\rangle) \\\\\n&amp;= I|\\mathbf{x}\\rangle \\otimes H |1\\rangle \\\\\n&amp;= |\\mathbf{x}\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|\\mathbf{x}, 0\\rangle - |\\mathbf{x}, 1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= U_f \\frac{|\\mathbf{x}, 0\\rangle - |\\mathbf{x}, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f |\\mathbf{x}, 0\\rangle - U_f |\\mathbf{x}, 1\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{U_f (|\\mathbf{x}\\rangle \\otimes |0\\rangle) - U_f (|\\mathbf{x}\\rangle \\otimes |1\\rangle)}{\\sqrt{2}} \\\\\n&amp;= \\frac{|\\mathbf{x}\\rangle \\otimes |0 \\oplus f(x)\\rangle - |\\mathbf{x}\\rangle \\otimes |1 \\oplus f(\\mathbf{x})\\rangle}{\\sqrt{2}} \\\\\n&amp;= \\frac{|\\mathbf{x}\\rangle \\otimes |f(\\mathbf{x})\\rangle - |\\mathbf{x}\\rangle \\otimes |\\overline{f(\\mathbf{x})}\\rangle}{\\sqrt{2}} \\\\\n&amp;= |\\mathbf{x}\\rangle \\otimes \\frac{|f(\\mathbf{x})\\rangle - |\\overline{f(\\mathbf{x})}\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>Because $\\frac{|f(\\mathbf{x})\\rangle - |\\overline{f(\\mathbf{x})}\\rangle}{\\sqrt{2}}$ is either $\\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}}$ or $\\frac{|1\\rangle - |0\\rangle}{\\sqrt{2}}$, $|\\varphi_2\\rangle $ could be further simplified as</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= (-1)^{f(\\mathbf{x})} |\\mathbf{x}\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>The observation from the first output is always the same to the first input, whereas there are 50-50 percent chance observing 0 or 1 for the second input, which is a single qubit.</p>\n\n<p><br /></p>\n\n<p>This provides no information of determining whether $f(\\mathbf{x})$ is constant or balanced either.</p>\n\n<h4 id="second-attempt">Second Attempt</h4>\n\n<p>In the second attempt, we made the both inputs to $U_f$ superpositions, which is achieved by applying $H^{\\otimes n}$ to the first input $|\\mathbf{0}\\rangle = |0^n\\rangle$ and applying $H$ to the second input $|1\\rangle$. The superpositions for the first input and the second input are $H^{\\otimes n}|\\mathbf{0}\\rangle$ and $H|1\\rangle$, respectively.</p>\n\n\\[\\begin{align}\nH|1\\rangle &amp;= \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\\\\n\\end{align}\\]\n\n<p>$H^{\\otimes n}|\\mathbf{0}\\rangle$ is actually just the first column of $H^{\\otimes n}$, because $|\\mathbf{0}\\rangle_0 = 1$. Based on the derivation we have in the prerequisite for Hadamard operator, we have</p>\n\n\\[\\begin{align}\nH^{\\otimes n}|\\mathbf{0}\\rangle &amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{\\langle \\mathbf{i}, \\mathbf{0} \\rangle} | \\mathbf{x}_i \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{0} | \\mathbf{x}_i \\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} | \\mathbf{x}_i \\rangle \\\\\n\\end{align}\\]\n\n<p>Therefore, $H^{\\otimes n}|\\mathbf{0}\\rangle$ is a superposition of all the basic states with equal probabilities.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-03-Deutsch-Jozsa-Algorithm/deutsch-jozsa-algorithm.png" style="width: 75%; height: 75%" />\n    <figcaption>Deutsch-Jozsa Algorithm</figcaption>\n</figure>\n</div>\n\n\\[\\begin{align}\n|\\varphi_0\\rangle &amp;= |\\mathbf{0}\\rangle \\otimes |1\\rangle\\\\\n&amp;= |\\mathbf{0}, 1\\rangle \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_1\\rangle &amp;= (H^{\\otimes n} \\otimes H) |\\varphi_0\\rangle \\\\\n&amp;= (H^{\\otimes n} \\otimes H) (|\\mathbf{0}\\rangle \\otimes |1\\rangle) \\\\\n&amp;= H^{\\otimes n}|\\mathbf{0}\\rangle \\otimes H |1\\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} | \\mathbf{x}_i \\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}}\\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= U_f |\\varphi_1\\rangle \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} U_f \\Big( | \\mathbf{x}_i \\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n&amp;= \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} \\Big( (-1)^{f(\\mathbf{x}_i)} |\\mathbf{x}_i\\rangle \\otimes \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n&amp;= \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n\\end{align}\\]\n\n<p>We could see that all the useful information about $f(\\mathbf{x}_i)$ for $i \\in [0, 2^n)$ is encoded in the phase of the first output. How could we extract these useful information?</p>\n\n<p><br /></p>\n\n<p>If $f(\\mathbf{x})$ is constant and $f(\\mathbf{x}_i) = 0$ for $i \\in [0, 2^n)$,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{0} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n&amp;= \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n\\end{align}\\]\n\n<p>If $f(\\mathbf{x})$ is constant and $f(\\mathbf{x}_i) = 1$ for $i \\in [0, 2^n)$,</p>\n\n\\[\\begin{align}\n|\\varphi_2\\rangle &amp;= \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{1} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n&amp;= -\\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\\\\n\\end{align}\\]\n\n<p>The first output remind us the last example we discussed in the prerequisites for Hadamard operator. If we apply $H^{\\otimes {n}}$ to the qubits, it would result in $|\\mathbf{0}\\rangle$ or $-|\\mathbf{0}\\rangle$, which means the first output state is deterministic and it is $|\\mathbf{0}\\rangle$ or $-|\\mathbf{0}\\rangle$. After measurement, the first output will be $\\mathbf{0}$, i.e, $n$ $0$s.</p>\n\n<p><br /></p>\n\n<p>If $f(\\mathbf{x})$ is constant and $f(\\mathbf{x}_i) = 0$ for $i \\in [0, 2^n)$,</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle &amp;= (H^{\\otimes n} \\otimes I) |\\varphi_2\\rangle \\\\\n&amp;= \\bigg( H^{\\otimes n} \\otimes I \\bigg) \\bigg( \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\bigg) \\\\\n&amp;= \\bigg( H^{\\otimes n} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} |\\mathbf{x}_i\\rangle \\Big) \\bigg) \\otimes \\bigg( I \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= | \\mathbf{0} \\rangle \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n\\end{align}\\]\n\n<p>If $f(\\mathbf{x})$ is constant and $f(\\mathbf{x}_i) = 1$ for $i \\in [0, 2^n)$, similarly,</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle &amp;= - | \\mathbf{0} \\rangle \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n\\end{align}\\]\n\n<p>Let’s further examine if there is a chance for the first output state to be $|\\mathbf{0}\\rangle$ or $-|\\mathbf{0}\\rangle$ when $f(\\mathbf{x})$ is balanced.</p>\n\n<p><br /></p>\n\n<p>If $f(\\mathbf{x})$ is balanced,</p>\n\n\\[\\begin{align}\n|\\varphi_3\\rangle &amp;= (H^{\\otimes n} \\otimes I) |\\varphi_2\\rangle \\\\\n&amp;= \\bigg( H^{\\otimes n} \\otimes I \\bigg) \\bigg( \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} |\\mathbf{x}_i\\rangle \\Big) \\otimes \\Big( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\Big) \\bigg) \\\\\n&amp;= \\bigg( H^{\\otimes n} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} |\\mathbf{x}_i\\rangle \\Big) \\bigg) \\otimes \\bigg( I \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\bigg( H^{\\otimes n} \\Big( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} |\\mathbf{x}_i\\rangle \\Big) \\bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} H^{\\otimes n} |\\mathbf{x}_i\\rangle \\bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\Bigg( \\frac{1}{\\sqrt{2^n}} \\sum_{i=0}^{2^n-1} \\bigg( (-1)^{f(\\mathbf{x}_i)} \\frac{1}{\\sqrt{2^n}} \\sum_{k=0}^{2^n-1}  (-1)^{\\langle \\mathbf{k}, \\mathbf{i} \\rangle} | z_k \\rangle \\bigg) \\Bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\bigg( \\frac{1}{2^n} \\sum_{i=0}^{2^n-1} \\sum_{k=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)}  (-1)^{\\langle \\mathbf{k}, \\mathbf{i} \\rangle} | z_k \\rangle \\bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\bigg( \\frac{1}{2^n} \\sum_{i=0}^{2^n-1} \\sum_{k=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i) + \\langle \\mathbf{k}, \\mathbf{i} \\rangle}| z_k \\rangle \\bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\bigg( \\frac{1}{2^n} \\sum_{i=0}^{2^n-1} \\sum_{k=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{k}, \\mathbf{i} \\rangle}| z_k \\rangle \\bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n&amp;= \\Bigg( \\frac{1}{2^n} \\sum_{k=0}^{2^n-1} \\bigg( \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{k}, \\mathbf{i} \\rangle} \\bigg) | z_k \\rangle \\Bigg) \\otimes \\bigg( \\frac{|0\\rangle - |1\\rangle}{\\sqrt{2}} \\bigg) \\\\\n\\end{align}\\]\n\n<p>where $| \\mathbf{z}_k \\rangle$ is a quantum system one-hot basic state vector, $|\\mathbf{z}_k\\rangle = [z_0, z_1, \\cdots, z_{2^{n}-1}]^{\\top}$, where $z_k = 1$ and $z_{k^{\\prime}} = 0$ for $k^{\\prime} \\neq k$.</p>\n\n<p><br /></p>\n\n<p>So the probability of collapsing to $\\mathbf{0}$ for the first output is, according to the <a href="https://leimao.github.io/blog/Quantum-System-States/">basic quantum state theory</a>,</p>\n\n\\[\\begin{align}\np(\\mathbf{0}) &amp;= \\frac{ | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{0}, \\mathbf{i} \\rangle} |^2 }{ \\sum_{k=0}^{2^n-1} | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{k}, \\mathbf{i} \\rangle} |^2 } \\\\\n&amp;= \\frac{ | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus 0} |^2 }{ \\sum_{k=0}^{2^n-1} | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{k}, \\mathbf{i} \\rangle} |^2 } \\\\\n&amp;= \\frac{ | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) } |^2 }{ \\sum_{k=0}^{2^n-1} | \\sum_{i=0}^{2^n-1}  (-1)^{f(\\mathbf{x}_i) \\oplus \\langle \\mathbf{k}, \\mathbf{i} \\rangle} |^2 } \\\\\n\\end{align}\\]\n\n<p>Let’s check what value $\\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i) }$ is. Because $f(\\mathbf{x})$ is balanced</p>\n\n\\[\\begin{align}\n\\sum_{i=0}^{2^n-1} (-1)^{f(\\mathbf{x}_i)} &amp;= 2^{n-1} (-1)^0 + 2^{n-1} (-1)^1 \\\\\n&amp;= 2^{n-1} - 2^{n-1} \\\\\n&amp;= 0 \\\\\n\\end{align}\\]\n\n<p>Therefore, if $f(\\mathbf{x})$ is balanced, it is impossible to observe $\\mathbf{0}$ for the first output.</p>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>By running the above circuit for Deutsch-Jozsa algorithm once, we were able to determine whether $f(\\mathbf{x})$ is constant or balanced.</p>\n\n<h3 id="final-remarks">Final Remarks</h3>\n\n<p>As I mentioned, in principle, $f(\\mathbf{x})$ could be neither constant nor balanced. What will happen if $f(\\mathbf{x})$ could be neither constant nor balanced in the Deutsch-Jozsa algorithm. Based on the probability of collapsing to $\\mathbf{0}$ we computed above, if $f(\\mathbf{x})$ is very close to constant but it is not exact, there will be chance collapsing to $\\mathbf{0}$, but the chance is very small. As $f(\\mathbf{x})$ becomes more close to balanced, the chance of observing $\\mathbf{0}$ should not be considered negligible.</p>\n\n<h3 id="quiz">Quiz</h3>\n\n<p>We did not compute the denominator for $p(\\mathbf{0})$ since it is not helpful for solving our particular problem. However, I would still like to ask what the value is for the denominator when $f(\\mathbf{x})$ is constant and when $f(\\mathbf{x})$ is balanced.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Deutsch-Algorithm/">Deutsch Algorithm</a></li>\n  <li><a href="https://leimao.github.io/blog/Inner-Product/">Inner Product and Inner Product Space</a></li>\n  <li><a href="https://leimao.github.io/blog/Kronecker-Product-In-Circuits/">Kronecker Product In Circuits</a></li>\n  <li><a href="https://leimao.github.io/blog/Quantum-System-States/">Quantum System States</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Deutsch-Jozsa-Algorithm/">Deutsch-Jozsa Algorithm</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 03, 2020.</p>	d8ee1f72ecbe1c07269ac1ca0361f079cc42c502	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.441641	0			'-1':166,331,347,373,385,404,492,566,569,573,576,1019,1030,1067,1071,1076,1140,1151,1172,1176,1258,1262,1267,1304,1308,1312,1317,1349,1353,1357,1362,1380,1384,1406,1411,1539,1644,1673,1675,1678,1701,1707,1708,1710,1715,1716,1722,1723,1754,1831,1862,1872,1873,1887,1913,1923,1930,1940,1944,1948,1952,1962,1967,1971,1979,1986,2003,2015,2071,2075,2090,2094,2107,2111,2122,2126,2150,2163,2170,2176,2185,2202,2214,2270,2274,2289,2293,2306,2310,2321,2325,2349,2361,2370,2377,2383,2402,2414,2470,2474,2489,2493,2506,2510,2521,2525,2549,2562,2568,2576,2584,2603,2615,2671,2675,2690,2694,2707,2711,2749,2756,2767,2777,2801,2813,2821,2841,2919,2931,2943,2966,2978,2990,3058,3113,3120,3127,3143,3160,3165,3173,3185,3186,3226,3250,3275,3276,3342,3362,3363,3384,3385,3888,4086,4087,4108,4109,4125,4215,4250,4277,4279,4308,4309,4400,4401,4429,4481,4482,4510,4645,4677,4816,4817,4853,4854,4891,4892,4924,4925,4959,4961,4976,4977,5009,5015,5016,5021,5052,5058,5059,5094,5100,5101,5137,5144,5145,5201,5248,5249,5267,5273,5274,5293,5294,5307,5313,5314,5333,5334,5345,5351,5352,5377,5378,5397,5398,5405,5406,5410,5411,5415,5418 '-50':3923 '0':43,48,128,134,161,195,337,379,392,425,560,614,856,869,986,990,994,1007,1013,1024,1052,1055,1074,1128,1134,1145,1160,1163,1205,1231,1234,1238,1271,1274,1277,1281,1320,1323,1326,1330,1365,1368,1389,1393,1460,1462,1463,1465,1467,1475,1479,1484,1486,1553,1556,1566,1578,1584,1588,1842,1851,1884,1894,1976,1983,2041,2042,2045,2046,2056,2059,2076,2078,2095,2160,2167,2182,2240,2244,2245,2255,2258,2277,2294,2367,2374,2440,2441,2444,2455,2458,2475,2494,2559,2641,2645,2656,2659,2852,2861,2911,2922,2934,2944,2960,2971,2983,2991,3006,3018,3051,3067,3088,3093,3130,3136,3182,3219,3235,3272,3310,3316,3317,3319,3324,3339,3359,3364,3381,3390,3404,3408,3411,3507,3513,3517,3528,3649,3662,3685,3709,3718,3743,3756,3773,3790,3861,3871,3897,3927,3982,3984,4011,4024,4036,4050,4052,4074,4083,4092,4105,4110,4122,4137,4157,4160,4166,4182,4190,4199,4212,4222,4247,4260,4274,4290,4305,4322,4347,4377,4381,4397,4402,4411,4426,4438,4462,4478,4492,4507,4519,4558,4562,4576,4580,4590,4593,4606,4610,4642,4654,4674,4688,4696,4701,4725,4735,4740,4766,4770,4813,4830,4850,4869,4888,4906,4921,4941,4956,4973,4992,5006,5012,5035,5049,5055,5077,5091,5097,5120,5134,5141,5165,5194,5211,5224,5241,5245,5257,5264,5270,5290,5300,5304,5310,5330,5342,5348,5374,5394,5407,5419,5435,5508,5533 '03':5642 '1':44,49,129,135,176,204,262,341,348,386,405,411,427,493,561,615,987,991,995,1008,1015,1026,1058,1061,1129,1136,1147,1165,1168,1206,1243,1246,1250,1286,1289,1292,1296,1333,1336,1339,1343,1371,1374,1396,1400,1513,1517,1521,1525,1531,1536,1537,1538,1558,1563,1568,1580,1590,1594,1750,1812,1821,1827,1830,1844,1852,1853,1858,1868,1895,1897,1915,1920,1921,1922,1932,1997,2011,2032,2039,2062,2065,2081,2084,2098,2101,2113,2116,2146,2196,2210,2231,2238,2241,2261,2264,2275,2280,2283,2297,2300,2312,2315,2345,2396,2410,2431,2438,2445,2461,2464,2477,2480,2483,2497,2500,2512,2515,2545,2597,2611,2632,2639,2642,2646,2662,2665,2676,2678,2681,2684,2695,2698,2701,2712,2722,2757,2768,2797,2837,2862,2898,2915,2927,2939,2946,2962,2974,2986,2993,3008,3013,3020,3025,3053,3063,3099,3104,3123,3139,3146,3152,3156,3176,3221,3231,3266,3315,3333,3353,3375,3508,3514,3621,3646,3651,3668,3672,3679,3694,3702,3711,3722,3736,3747,3762,3781,3799,3863,3869,3899,3929,3994,4015,4021,4026,4053,4077,4099,4116,4163,4167,4174,4193,4203,4206,4224,4238,4241,4262,4268,4292,4299,4324,4391,4413,4420,4440,4458,4472,4483,4494,4501,4521,4636,4656,4668,4690,4703,4721,4742,4807,4832,4844,4871,4882,4908,4915,4943,4950,4967,4994,5001,5037,5044,5079,5086,5122,5129,5167,5196,5206,5412 '2':146,164,305,329,345,371,383,402,490,590,1515,1519,1523,1527,1533,1561,1571,1583,1593,1752,1829,1843,1870,1885,1917,1934,1965,1969,1977,1984,1999,2013,2148,2161,2168,2174,2177,2183,2198,2212,2347,2359,2362,2368,2375,2381,2384,2398,2412,2547,2560,2566,2569,2574,2577,2582,2585,2599,2613,2799,2811,2814,2819,2822,2839,2853,2900,2917,2929,2941,2948,2964,2976,2988,2995,3010,3022,3056,3111,3118,3125,3141,3158,3163,3171,3178,3183,3224,3268,3273,3320,3335,3340,3355,3360,3377,3382,3654,3714,3725,3731,3750,3765,3784,3806,3826,3842,3857,3866,3874,3876,3886,3902,4029,4079,4084,4101,4106,4118,4123,4208,4213,4227,4233,4243,4248,4265,4270,4275,4295,4301,4306,4327,4348,4382,4387,4393,4398,4416,4422,4427,4443,4463,4468,4474,4479,4497,4503,4508,4524,4611,4624,4638,4643,4659,4670,4675,4693,4706,4726,4745,4795,4809,4814,4835,4846,4851,4874,4884,4889,4911,4917,4922,4946,4952,4957,4969,4974,4997,5002,5007,5013,5040,5045,5050,5056,5082,5087,5092,5098,5125,5130,5135,5142,5170,5199,5246,5261,5265,5271,5286,5291,5301,5305,5311,5326,5331,5339,5343,5349,5364,5375,5395,5403,5408,5413,5416 '2020':5643 '3':4616,4732,4787 '50':3922 'abl':56,5454 'accord':5230 'achiev':3588,3611,3971 'actual':4039 'addit':588 'algebra':661,699 'algorithm':4,16,255,271,463,469,517,531,3418,3639,4153,5450,5499,5610,5627 'align':565,581,619,633,672,694,703,753,755,915,918,932,983,997,1044,1083,1153,1178,1218,1428,1431,1457,1472,1488,1508,1543,1551,1573,1575,1597,1669,1680,1697,1729,1904,1956,1988,2025,2048,2136,2187,2224,2247,2335,2387,2424,2447,2535,2588,2625,2648,2733,2748,2787,2906,2951,2953,2998,3073,3198,3260,3305,3327,3414,3644,3656,3660,3675,3677,3727,3729,3844,3884,3904,4019,4031,4069,4131,4155,4170,4172,4229,4231,4330,4385,4446,4466,4527,4614,4709,4730,4748,4785,5173,5238,5366,5391,5421 'almost':3625 'also':969,1105 'although':533 'alway':3912 'appli':3613,3973,3988,4546 'arbitrari':3029 'ask':5587 'assum':224,1854 'asymptot':496 'attempt':3594,3598,3635,3658,3955,3959 'b':1654,1664,1672,1677 'balanc':25,65,156,215,235,300,363,417,440,3452,3952,4777,4783,5389,5428,5464,5480,5493,5548,5607 'base':1186,1808,2734,4054,5500 'basic':697,3044,3211,4145,5186,5233 'becom':5544 'begin':564,618,671,702,754,917,982,1043,1152,1217,1430,1471,1507,1510,1534,1550,1574,1668,1696,1903,1918,1935,1987,2047,2186,2246,2386,2446,2587,2647,2747,2905,2952,3072,3259,3326,3643,3659,3676,3728,3883,4018,4068,4154,4171,4230,4384,4465,4613,4729,4784,5237,5390 'best':420 'better':447,454 'big':709,719,722,729,731,738,763,772,774,783,784,794,796,806,807,808,815,817,824,825,827,828,835,837,844,845,846,847,854,857,859,860,867,870,871,878,880,887,1229,1239,1241,1251,1255,1268,1269,1282,1284,1297,1301,1318,1363,1385,1387,1412,3264,3287,3331,3347,3351,3369,3373,3396,4253,4266,4278,4296,4297,4318,4320,4328,4389,4407,4409,4417,4418,4434,4436,4444,4470,4488,4490,4498,4499,4515,4517,4525,4634,4650,4652,4660,4666,4682,4805,4826,4828,4836,4842,4863,4880,4901 'bigg':4626,4632,4633,4661,4662,4683,4685,4694,4699,4707,4738,4746,4797,4803,4804,4837,4838,4864,4866,4875,4876,4902,4904,4912,4913,4937,4939,4947,4948,4960,4987,4988,4990,4998,4999,5031,5033,5041,5042,5073,5075,5083,5084,5116,5118,5126,5127,5138,5157,5161,5163,5171 'bigoplus':1072 'binari':313,555,587,608,944,979,1000,1108,1121,1766,1778 'bit':108,117,654 'bitwis':1098 'black':3421 'black-box':3420 'blog':9,506,528,535,950 'bmatrix':1511,1529,1535,1541,1919,1925,1936,1954 'book':5639 'boolean':549,660,698,2742 'box':3422 'call':149,184 'case':248,484,1809 'cdot':1016,1027,1063,1137,1148,1169,1253,1299,1345,1376,1402,1464,1605,1724,2067,2086,2103,2118,2266,2285,2302,2317,2466,2485,2502,2517,2667,2686,2703,3054,3106,3154,3222,3318,5197 'chanc':3925,4757,5529,5536,5550 'chang':92 'check':3567,5369 'circuit':35,53,278,443,487,5445,5620 'classic':52,277,486 'classif':314 'close':5518,5546 'collaps':5221,5505,5530 'column':1782,2880,3030,4043 'compar':480 'complex':963 'complic':655 'comput':5510,5564 'conclud':934,2870 'conclus':5440 'consid':5558 'constant':27,67,190,217,237,302,365,398,3450,3950,4371,4452,4600,4715,5462,5478,5491,5520,5600 'contain':542 'correspond':3444 'could':212,321,360,525,592,968,1499,3587,3878,4332,4360,5475,5488 'dagger':1624,1626,1631 'decay':264 'defin':954,970,1041,1106 'definit':1092,1192 'denomin':5566,5594 'denot':1599 'deriv':465,645,1215,1799,2745,4057 'determin':18,58,289,3438,3944,5456 'determinist':4571 'deutsch':2,14,254,270,461,468,515,530,3416,3638,4151,5448,5497,5609,5625 'deutsch-jozsa':1,460,514,3415,4150,5447,5496,5624 'differ':139,170,198,207,307,547,2740 'discuss':12,512,3257,4537 'distribut':599,1212 'easi':664,1546,1614,1683,1815 'easili':594 'either':234,299,3859,3953 'encod':4351 'end':580,632,693,752,914,931,996,1082,1177,1427,1456,1487,1528,1540,1542,1572,1596,1679,1728,1924,1953,1955,2024,2135,2223,2334,2423,2534,2624,2732,2786,2950,2997,3197,3304,3413,3655,3674,3726,3843,3903,4030,4130,4169,4228,4329,4445,4526,4708,4747,5172,5365,5420 'entri':2876,2883 'equal':4148 'equival':2999 'exact':163,475,2893,5525 'examin':4752 'exampl':367,3307,4535 'exclus':1100 'exclusive-or':1099 'extract':3027,4362 'f':22,30,37,62,70,111,121,142,153,158,173,187,192,201,209,226,291,357,394,413,436,3423,3433,3441,3448,3454,3459,3478,3486,3497,3518,3524,3530,3536,3542,3582,3606,3734,3739,3753,3759,3768,3776,3792,3801,3812,3821,3832,3837,3847,3852,3889,3946,3967,4236,4252,4280,4310,4340,4367,4373,4448,4454,4596,4602,4711,4717,4773,4779,4818,4855,4893,4926,4962,5017,5060,5102,5146,5250,5275,5295,5315,5335,5353,5379,5385,5399,5424,5458,5472,5485,5513,5541,5596,5603 'fact':456,1634 'faster':495 'fewer':3589 'final':5465 'find':637,1789 'finish':2865 'first':328,370,430,532,2879,2886,3593,3597,3657,3909,3917,3979,4000,4042,4357,4529,4567,4585,4760,5227,5438 'follow':1180,1504,1738 'frac':1512,1516,1520,1524,1530,1555,1565,1577,1587,1749,1826,1867,1914,1931,1996,2010,2145,2195,2209,2344,2395,2409,2544,2596,2610,2796,2836,2897,2914,2926,2938,2945,2961,2973,2985,2992,3007,3019,3122,3138,3155,3175,3265,3332,3352,3374,3648,3708,3715,3740,3751,3766,3785,3807,3831,3846,3860,3868,3896,4023,4076,4098,4115,4205,4221,4240,4259,4267,4289,4298,4321,4390,4410,4419,4437,4471,4491,4500,4518,4635,4653,4667,4687,4700,4739,4806,4829,4843,4868,4881,4905,4914,4940,4949,4966,4991,5000,5034,5043,5076,5085,5119,5128,5164,5242,5287,5327 'function':21,61,152,186 'gate':3431,3457 'general':247 'given':998,1119,1193 'got':423 'h':1509,1552,1562,1576,1586,1601,1603,1607,1609,1618,1622,1623,1625,1627,1630,1632,1635,1641,1645,1698,1702,1704,1709,1712,1717,1719,1725,1735,1742,1819,1859,1905,1908,1910,1927,1937,1941,1945,1949,1959,1989,2000,2138,2188,2199,2337,2388,2399,2537,2589,2600,2789,2829,2889,2907,2954,3003,3015,3033,3074,3078,3084,3095,3107,3241,3247,3251,3261,3288,3291,3328,3348,3370,3397,3400,3645,3683,3689,3701,3974,3989,4007,4014,4020,4032,4045,4070,4133,4176,4180,4184,4188,4195,4202,4547,4618,4627,4663,4789,4798,4839,4877,4930 'hadamard':1489,3615,4064,4542 'happen':5483 'hardmard':1491 'help':5575 'hot':3041,3210,5185 'howev':50,5581 'i.e':1621,1845,1888,2855,4591 'immedi':434 'imposs':5431 'improv':81 'induct':1805,2868 'inform':3942,4338,4365 'inner':937,940,956,959,972,975,1032,1090,1181,1190,5611,5614 'input':110,119,140,171,182,199,208,308,332,350,374,388,407,3603,3620,3918,3933,3964,3980,3993,4001,4005 'instead':103 'internet':642,1794 'introduct':5 'invert':1656,1666 'investig':231,296 'j':1748,1759,1775,1784,1825,1836,1840,1849,1866,1878,1882,1892,1981,1995,2008,2021,2035,2038,2044,2053,2058,2064,2073,2083,2092,2100,2109,2115,2124,2132,2144,2155,2165,2180,2194,2207,2220,2234,2237,2243,2252,2257,2263,2272,2282,2291,2299,2308,2314,2323,2331,2343,2354,2365,2379,2394,2407,2420,2434,2437,2443,2452,2457,2463,2472,2482,2491,2499,2508,2514,2523,2531,2543,2554,2564,2580,2595,2608,2621,2635,2638,2644,2653,2658,2664,2673,2683,2692,2700,2709,2719,2729,2754,2764,2774,2783,2795,2806,2817,2835,2846,2850,2859,2913,2924,2936,3031,3062,3071,3077,3090,3101,3115,3132,3148,3167,3191,3281,3309 'job':3435 'jozsa':3,462,516,3417,4152,5449,5498,5626 'juli':5641 'k':1857,1861,1871,1886,1896,1900,1907,1912,1929,1939,1943,1947,1951,1961,1966,1970,1978,1985,1991,2002,2014,2140,2149,2162,2169,2175,2178,2184,2190,2201,2213,2339,2348,2360,2363,2369,2376,2382,2385,2390,2401,2413,2539,2548,2561,2567,2570,2575,2578,2583,2586,2591,2602,2614,2791,2800,2812,2815,2820,2823,2828,2831,2840,2854,2863,3066,3069,3234,3237,4972,4980,4985,5011,5024,5029,5054,5066,5071,5096,5109,5114,5133,5153,5159,5177,5191,5205,5209,5213,5216,5263,5282,5303,5322,5341,5360 'know':435 'kroneck':1649,1689,5617 'langl':984,1045,1219,1413,1420,1432,1442,1449,1473,1480,1755,1832,1874,2016,2049,2127,2151,2215,2248,2326,2350,2415,2448,2526,2550,2616,2649,2714,2724,2750,2759,2769,2778,2802,2842,2920,2932,2967,2979,3128,3144,3161,3187,3277,3386,4088,4978,5022,5064,5107,5151,5255,5280,5320,5358 'larg':503 'last':4534 'lei':5632,5635 'length':1118 'let':90,1458,3564,4749,5367 'like':510,1797,5585 'littl':653 'log':5638 'made':3600,3961 'mao':5633,5636 'map':39,124,3465,3550 'mathbf':112,122,143,154,159,174,188,193,202,210,227,292,358,395,414,437,1002,1004,1010,1021,1035,1038,1046,1048,1110,1113,1123,1125,1131,1142,1154,1157,1194,1196,1199,1201,1220,1223,1226,1414,1416,1421,1424,1433,1435,1438,1443,1445,1450,1452,1459,1474,1476,1481,1483,1745,1747,1756,1758,1762,1774,1822,1824,1833,1835,1846,1848,1863,1865,1875,1877,1889,1891,1992,1994,2004,2007,2017,2020,2027,2030,2034,2037,2050,2052,2128,2131,2141,2143,2152,2154,2191,2193,2203,2206,2216,2219,2226,2229,2233,2236,2249,2251,2327,2330,2340,2342,2351,2353,2391,2393,2403,2406,2416,2419,2426,2429,2433,2436,2449,2451,2527,2530,2540,2542,2551,2553,2592,2594,2604,2607,2617,2620,2627,2630,2634,2637,2650,2652,2715,2718,2725,2728,2751,2753,2760,2763,2770,2773,2779,2782,2792,2794,2803,2805,2832,2834,2843,2845,2856,2858,2910,2912,2921,2923,2933,2935,2957,2959,2968,2970,2980,2982,3012,3024,3047,3081,3087,3089,3091,3098,3100,3102,3110,3114,3116,3129,3131,3134,3145,3147,3150,3162,3166,3169,3188,3190,3193,3200,3214,3278,3280,3283,3294,3298,3301,3311,3323,3343,3365,3387,3389,3392,3403,3407,3410,3424,3442,3467,3474,3479,3487,3493,3498,3504,3519,3525,3531,3537,3543,3556,3569,3664,3670,3690,3697,3704,3716,3720,3741,3745,3754,3760,3769,3777,3786,3795,3802,3808,3813,3816,3822,3827,3833,3838 'mathemat':1804,2867 'matrix':1506,1734,1972,3463 'maximum':284 'mean':4565 'measur':4583 'mention':5469 'might':74,3001 'minimum':282 'mix':1692 'mixed-product':1691 'modulo':589 'most':539 'much':450 'must':232,297,353 'n':116,130,147,165,261,306,330,346,372,384,403,491,501,988,992,1009,1018,1029,1066,1070,1075,1130,1139,1150,1171,1175,1207,1257,1261,1266,1303,1307,1311,1316,1348,1352,1356,1361,1379,1383,1405,1410,1466,1468,1608,1611,1637,1643,1647,1700,1706,1714,1721,1727,1737,1744,1753,1811,1856,1899,2070,2074,2089,2093,2106,2110,2121,2125,2269,2273,2288,2292,2305,2309,2320,2324,2469,2473,2488,2492,2505,2509,2520,2524,2670,2674,2689,2693,2706,2710,2827,2891,2901,2909,2918,2930,2942,2949,2956,2965,2977,2989,2996,3005,3011,3017,3023,3035,3057,3076,3080,3086,3097,3109,3112,3119,3126,3142,3159,3164,3172,3179,3184,3225,3243,3249,3253,3263,3269,3274,3290,3293,3321,3330,3336,3341,3350,3356,3361,3372,3378,3383,3399,3402,3509,3976,3985,4009,4034,4047,4072,4080,4085,4102,4107,4119,4124,4135,4178,4186,4197,4209,4214,4244,4249,4271,4276,4302,4307,4349,4383,4394,4399,4423,4428,4464,4475,4480,4504,4509,4549,4592,4612,4620,4629,4639,4644,4665,4671,4676,4727,4791,4800,4810,4815,4841,4847,4852,4879,4885,4890,4918,4923,4932,4953,4958,4970,4975,5003,5008,5014,5046,5051,5057,5088,5093,5099,5131,5136,5143,5200,5247,5266,5272,5292,5306,5312,5332,5344,5350,5376,5396,5404,5409,5414,5417 'name':3484 'necessarili':3553 'neg':680,686,689,712,715,725,732,741,746,768,775,789,792,797,800,813,822,829,838,852,861,876,881,892,895,903,908 'neglig':5559 'neither':214,362,5477,5490 'neq':3070,3238,5215 'note':241,1957,2873,3546 'number':137,285,1771,1783 'observ':3906,3926,5433,5552 'one':102,106,476,3040,3209,5184 'one-hot':3039,3208,5183 'oper':1102,1490,1492,1497,3616,4065,4543 'oplus':571,578,583,621,628,674,705,759,920,927,1056,1062,1064,1103,1156,1161,1166,1173,1222,1232,1240,1244,1252,1254,1259,1275,1283,1290,1298,1300,1309,1324,1331,1337,1344,1346,1354,1369,1375,1377,1386,1394,1401,1403,1419,1437,1448,2060,2066,2068,2079,2085,2087,2096,2102,2104,2117,2119,2259,2265,2267,2278,2284,2286,2295,2301,2303,2316,2318,2459,2465,2467,2478,2484,2486,2495,2501,2503,2516,2518,2660,2666,2668,2679,2685,2687,2696,2702,2704,2713,2723,2758,3481,3500,3521,3527,3535,3791,3800,5106,5150,5254,5279,5299,5319,5357 'origin':5629 'otim':1602,1604,1606,1610,1636,1642,1646,1653,1671,1676,1699,1703,1705,1711,1713,1718,1720,1726,1736,1743,1820,1860,1906,1909,1911,1926,1928,1938,1942,1946,1950,1960,1990,2001,2139,2189,2200,2338,2389,2400,2538,2590,2601,2790,2830,2890,2908,2955,3004,3016,3034,3075,3079,3085,3096,3108,3242,3248,3252,3262,3289,3292,3329,3349,3371,3398,3401,3470,3477,3490,3496,3667,3682,3688,3693,3700,3707,3772,3780,3789,3798,3811,3819,3830,3895,3975,4008,4033,4046,4071,4134,4162,4177,4179,4185,4187,4192,4196,4201,4220,4258,4288,4319,4408,4435,4489,4516,4548,4619,4621,4628,4630,4651,4664,4684,4698,4737,4790,4792,4799,4801,4827,4840,4865,4878,4903,4931,4938,4989,5032,5074,5117,5162 'output':3579,3910,4358,4530,4568,4586,4761,5228,5439 'overlin':3820,3836,3851 'p':5239,5568 'particular':87,221,5579 'pattern':1740 'peopl':78 'percent':3924 'perhap':3585 'phase':4354 'post':10,507,536,951 'prepar':3037 'prerequisit':543,4062,4540 'previous':8,949 'prime':1198,1203,1225,1235,1247,1263,1278,1293,1313,1327,1340,1358,1390,1397,1407,1423,1440,1454,2006,2009,2019,2022,2029,2036,2130,2133,2205,2208,2218,2221,2228,2235,2329,2332,2405,2408,2418,2421,2428,2435,2529,2532,2606,2609,2619,2622,2629,2636,2717,2720,2727,2730,2762,2765,2772,2775,2781,2784,5210,5214 'principl':5471 'probabl':4149,5219,5503 'problem':89,94,222,251,267,315,473,5580 'produc':335,377,391,410 'product':938,941,957,960,973,976,1033,1091,1182,1191,1650,1690,1693,5612,5615,5618 'proof':639,647,650,936,1791,1802,2872 'properti':1183,1213,1694,2743 'provid':3940 'publish':5630 'quantum':34,442,1496,3042,3206,3430,3456,5181,5234,5621 'qubit':3938,4552 'quiz':5560 'rangl':985,1050,1228,1418,1426,1441,1447,1455,1478,1485,1554,1557,1559,1564,1567,1569,1579,1581,1585,1589,1591,1595,1760,1837,1879,2023,2054,2134,2156,2222,2253,2333,2355,2422,2453,2533,2555,2623,2654,2721,2731,2755,2766,2776,2785,2807,2847,2925,2937,2972,2984,3049,3083,3094,3105,3121,3133,3137,3149,3153,3168,3174,3192,3196,3203,3217,3282,3286,3296,3300,3303,3313,3325,3346,3368,3391,3395,3405,3409,3412,3469,3472,3476,3483,3489,3492,3495,3502,3523,3529,3533,3539,3545,3558,3561,3571,3574,3622,3647,3650,3652,3663,3666,3669,3673,3680,3686,3692,3695,3699,3703,3706,3710,3712,3719,3723,3732,3737,3744,3748,3757,3763,3771,3774,3779,3782,3788,3794,3797,3804,3810,3815,3818,3824,3829,3835,3840,3850,3855,3862,3864,3870,3872,3877,3887,3894,3898,3900,3983,3986,3995,4012,4016,4022,4025,4027,4037,4051,4075,4093,4097,4114,4129,4138,4158,4161,4164,4168,4175,4183,4191,4194,4200,4204,4219,4223,4225,4234,4239,4257,4261,4263,4287,4291,4293,4317,4323,4325,4388,4406,4412,4414,4433,4439,4441,4469,4487,4493,4495,4514,4520,4522,4559,4563,4577,4581,4617,4625,4649,4655,4657,4681,4689,4691,4697,4702,4704,4733,4736,4741,4743,4767,4771,4788,4796,4825,4831,4833,4862,4870,4872,4900,4907,4909,4936,4942,4944,4983,4986,4993,4995,5027,5030,5036,5038,5069,5072,5078,5080,5112,5115,5121,5123,5156,5160 'read':526 'reader':524 'real':1094 'recommend':521 'reduc':544,2737 'refer':5608 'remark':5466 'remind':4531 'repres':1501,3427 'represent':1768,1780 'requir':657 'respect':4017 'rest':179 'result':4555 'rightarrow':993 'row':1770,2887 'run':29,69,287,322,432,477,3590,5442 'satisfi':1185 'scenario':319,421 'second':3602,3619,3634,3932,3954,3958,3992,4004 'see':1548,1616,4333 'seem':75 'self':541 'self-contain':540 'set':42,47,95,127,133 'signific':84,499 'similar':98,966,1087,1429,4728 'simpl':88,1801 'simplifi':3881 'sinc':1785,3240,5571 'singl':107,3937 'situat':325 'small':5539 'solv':259,275,471,5577 'somewhat':1086 'sophist':101 'space':942,946,961,965,977,981,1096,5616 'special':1495 'specif':1739,1741 'sqrt':1514,1518,1522,1526,1532,1560,1570,1582,1592,1751,1828,1869,1916,1933,1998,2012,2147,2197,2211,2346,2397,2411,2546,2598,2612,2798,2838,2899,2916,2928,2940,2947,2963,2975,2987,2994,3009,3021,3124,3140,3157,3177,3267,3334,3354,3376,3653,3713,3724,3749,3764,3783,3805,3825,3841,3856,3865,3873,3901,4028,4078,4100,4117,4207,4226,4242,4264,4269,4294,4300,4326,4392,4415,4421,4442,4473,4496,4502,4523,4637,4658,4669,4692,4705,4744,4808,4834,4845,4873,4883,4910,4916,4945,4951,4968,4996,5039,5081,5124,5169 'state':3045,3212,4146,4569,4762,5187,5235,5623 'still':5584 'sum':545,2738,3180,3270,3337,3357,3379,4081,4103,4120,4210,4245,4272,4303,4395,4424,4476,4505,4640,4672,4811,4848,4886,4919,4954,4971,5004,5010,5047,5053,5089,5095,5132,5139,5243,5262,5268,5288,5302,5308,5328,5340,5346,5372,5392 'superposit':3563,3576,3592,3608,3641,3968,3997,4141 'system':3043,3207,5182,5622 'tabl':598,669 'take':105,115 'taken':2824 'tell':354 'test':310,334,352,376,390,409 'text':585,1210 'th':349,387,406 'theori':5236 'therefor':916,1695,2137,2336,2536,2788,4132,5422 'time':494,989 'togeth':2825 'top':3059,3227,3322,5202 'tri':257,273 'truth':597,668 'twice':72 'two':431,999,1120 'u':3432,3447,3453,3458,3485,3581,3605,3733,3738,3752,3758,3767,3775,3966,4235,4251 'underbrac':1461,1600,3314 'unitari':1505,1620,1639,3245,3462 'us':355,4532 'use':33,51,474,485,596,659,667,695,1208,1502,1687,1803,3428,4337,4364 'valid':3554 'valu':556,609,1731,2896,5371,5590 'varphi':3661,3678,3684,3730,3735,3875,3885,4156,4173,4181,4232,4237,4386,4467,4615,4623,4731,4786,4794 'vector':945,964,980,1001,1095,1109,1122,1767,1779,3046,3213,5188 'vee':677,688,714,730,745,773,791,795,799,816,826,836,855,858,868,879,894,907 'verifi':595,666,1685,1817 'wedg':623,626,630,679,682,685,691,707,711,717,720,724,727,734,736,740,743,748,750,757,761,765,767,770,777,779,781,786,788,802,804,810,812,819,821,831,833,840,842,849,851,863,865,873,875,883,885,889,891,897,899,902,905,910,912,922,925,929,1053,1059,1068,1079,1236,1248,1264,1272,1279,1287,1294,1305,1314,1321,1328,1334,1341,1350,1359,1366,1372,1381,1391,1398,1408,2057,2063,2072,2077,2082,2091,2099,2108,2114,2123,2256,2262,2271,2276,2281,2290,2298,2307,2313,2322,2456,2462,2471,2476,2481,2490,2498,2507,2513,2522,2657,2663,2672,2677,2682,2691,2699,2708 'wherea':3919 'whether':19,59,290,356,3439,3945,5457 'worst':318,483 'would':509,519,1796,4554,5583 'write':3002 'x':23,31,38,63,71,113,123,144,155,160,175,189,194,203,211,228,293,359,396,415,438,551,557,567,570,574,577,603,610,620,625,673,676,681,684,690,704,710,716,723,733,739,747,756,764,776,785,798,809,818,830,848,862,872,882,888,896,901,909,919,924,1003,1011,1012,1014,1017,1036,1047,1051,1057,1065,1077,1111,1124,1132,1133,1135,1138,1155,1159,1164,1170,1195,1197,1221,1224,1230,1233,1242,1245,1256,1260,1270,1276,1285,1291,1302,1310,1319,1325,1332,1338,1347,1355,1364,1370,1378,1388,1395,1404,1415,1422,1434,1444,1451,1482,3092,3103,3117,3135,3151,3170,3194,3201,3215,3218,3220,3223,3229,3233,3284,3344,3366,3393,3425,3443,3468,3475,3480,3488,3494,3499,3505,3520,3526,3532,3538,3544,3557,3570,3665,3671,3691,3698,3705,3717,3721,3742,3746,3755,3761,3770,3778,3787,3793,3796,3803,3809,3814,3817,3823,3828,3834,3839,3849,3854,3891,3893,3948,4095,4112,4127,4217,4255,4282,4285,4312,4315,4342,4369,4375,4404,4431,4450,4456,4485,4512,4598,4604,4647,4679,4713,4719,4775,4781,4820,4823,4857,4860,4895,4898,4928,4934,4964,5019,5062,5104,5148,5252,5277,5297,5317,5337,5355,5381,5387,5401,5426,5460,5474,5487,5515,5543,5598,5605 'xor':586,601,1211 'y':553,558,568,572,575,579,604,611,622,629,675,678,683,687,692,706,713,718,726,735,742,749,760,769,780,790,803,814,832,841,853,864,877,884,893,898,904,911,921,928,1005,1022,1023,1025,1028,1039,1049,1054,1060,1069,1080,1114,1126,1143,1144,1146,1149,1158,1162,1167,1174,1200,1202,1227,1237,1249,1265,1273,1280,1288,1295,1306,1315,1322,1329,1335,1342,1351,1360,1367,1373,1382,1392,1399,1409,1417,1425,1436,1439,1446,1453,1477,3048,3050,3052,3055,3061,3065,3082,3295,3299,3302,3312,3471,3482,3491,3501,3511,3516,3522,3534,3560,3573 'z':606,612,624,627,631,708,721,728,737,744,751,758,762,766,771,778,782,787,793,801,805,811,820,823,834,839,843,850,866,874,886,890,900,906,913,923,926,930,4984,5028,5070,5113,5158,5176,5190,5193,5195,5198,5204,5208	en	Lei Mao
788	高效掌握新技能的 “树型思维”	{"ver":2,"uid":1,"hash":"SHA1:d92fa266a1acbc1f5f969335d70480f39bc45421"}	https://toutiao.io/k/4lxnpx9	2020-08-31 04:10:08	高效掌握新技能的 “树型思维”	fa2b91685c84e9a5075328586a5eec299888e090	\N	f	2020-08-31 04:10:00	2020-08-31 23:10:10.438723	0			'树型思维':2,4 '高效掌握新技能的':1,3	zh	
786	在 Kotlin 的 data class 中使用 MapStruct	{"ver":2,"uid":1,"hash":"SHA1:e54da5ce18c854803a6ba6bc7954ec53b1d2dc33"}	https://toutiao.io/k/oqy0ow8	2020-08-31 04:10:08	在 Kotlin 的 data class 中使用 MapStruct	d5e1986c6e8a3825a8cf7c95eee23b50d2a09ace	\N	f	2020-08-31 04:10:00	2020-08-31 23:10:10.442975	0			'class':5,12 'data':4,11 'kotlin':2,9 'mapstruct':7,14 '中使用':6,13 '在':1,8 '的':3,10	zh	
787	RSA 加密算法主要公式	{"ver":2,"uid":1,"hash":"SHA1:a3c9e73eaa9ba4572bf72834fbbdc2640ffb26a0"}	https://toutiao.io/k/88tl7vl	2020-08-31 04:10:08	RSA 加密算法主要公式	8780c919fbfffaa725d948746fc5e81eb39582f9	\N	f	2020-08-31 04:10:00	2020-08-31 23:10:10.44513	0			'rsa':1,3 '加密算法主要公式':2,4	zh	
46	Running X Client Using Virtual X Server Xvfb	{"ver":2,"uid":1,"hash":"SHA1:a5ce7846fc14e1337d2eeb649c3f4d8bc52347a4"}	https://leimao.github.io/blog/Running-X-Client-Using-Virtual-X-Server-Xvfb/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Sometimes, when I run some programs, which normally run on a local computer with a graphical display, in Docker container, they would somehow fail. Sometimes, I need to run many simulations that have GUIs simultaneously, and I don’t want to see those GUIs at all. Is there any virtual display which allows me to put the graphics into? The answer is yes and we could use X virtual framebuffer, Xvfb.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to take you to glimpse the X server-client architecture for displaying graphics, and discuss how to use Xvfb.</p>\n\n<h3 id="x-server-client">X Server-Client</h3>\n\n<p>In computing, the X Window System, commonly known as X11 or X, is a network-transparent windowing system for bitmap displays. X uses a client-server model. An X server program runs on a computer with a graphical display and communicates with various client programs.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-07-01-Running-X-Client-Using-Virtual-X-Server-Xvfb/2000px-X_client_server_example.svg.png" style="width: 40%; height: 40%" />\n    <figcaption>X Server-Client Architecture</figcaption>\n</figure>\n</div>\n\n<p>Any application that requires GUI and interacts with X server program is called X client. X client typically includes applications such as OS GUI, web browser, most of the games, and so on. Without X server, some of those programs would fail to run.</p>\n\n<p><br /></p>\n\n<p>X server requires a graphical display. Without a graphical display, X server will not start and thus all the X clients that must run on a X server would fail.</p>\n\n<p><br /></p>\n\n<p>In some scenarios where X server is not started or there is no display, we would still like to run X clients, we should use a virtual X server to host the X clients. Instead of outputting signals to screen, the virtual X server outputs signals to memory. This will be very useful for running programs, especially those whose display graphics are not important, in Docker container or on remote servers. For example, if you would like to watch a live streaming on a remote server without graphical display and take some snapshots routinely every 5 minutes, virtual X server will be very helpful. In fact, some libraries, such as Matplotlib (without using agg backend) and TikZ requires to be hosted on X server. If there is no display, say in a Docker container, running the programs that use those libraries will fail.</p>\n\n<h3 id="x-virtual-framebuffer-xvfb">X Virtual Framebuffer (Xvfb)</h3>\n\n<p>Xvfb or X virtual framebuffer is a display server implementing the X11 display server protocol. In contrast to other display servers, Xvfb performs all graphical operations in virtual memory without showing any screen output.</p>\n\n<p><br /></p>\n\n<p>To install Xvfb, please run the following commands in the terminal.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update\n<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>xvfb ghostscript\n</code></pre></div></div>\n\n<p><br /></p>\n\n<p>Once the <code class="language-plaintext highlighter-rouge">xvfb</code> and <code class="language-plaintext highlighter-rouge">ghostscript</code> are installed, we could start any X client in the terminal using <code class="language-plaintext highlighter-rouge">xvfb-run</code>.</p>\n\n<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>xvfb-run firefox\n<span class="nv">$ </span>xvfb-run python plot.py\n</code></pre></div></div>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>Xvfb would be very useful for a lot of GUI based simulations running in Docker container or remote server.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://en.wikipedia.org/wiki/Xvfb">Wikipedia - Xvfb</a></li>\n  <li><a href="https://en.wikipedia.org/wiki/Xvfb">Wikipedia - X Window System Protocols and Architecture</a></li>\n  <li><a href="http://manpages.ubuntu.com/manpages/trusty/man1/xvfb-run.1.html">xvfb-run</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Running-X-Client-Using-Virtual-X-Server-Xvfb/">Running X Client Using Virtual X Server Xvfb</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 01, 2020.</p>	37b6b6c4b3bb9496c4fd7bf79e3a63fda358dde2	\N	f	2020-08-14 05:06:00	2020-09-09 18:10:09.991331	0			'01':522 '2020':523 '5':333 'agg':351 'allow':62 'answer':70 'applic':165,183 'apt':431,434 'architectur':98,163,496 'backend':352 'base':478 'bitmap':132 'blog':83 'book':519 'browser':189 'call':176 'client':3,97,111,138,157,162,178,180,228,259,271,450,502 'client-serv':137 'command':426 'common':118 'communic':154 'comput':22,113,148 'conclus':467 'contain':29,304,371,483 'contrast':401 'could':75,446 'discuss':103 'display':26,60,100,133,152,213,217,251,297,326,366,392,397,404 'docker':28,303,370,482 'especi':294 'everi':332 'exampl':310 'fact':343 'fail':33,205,237,380 'firefox':461 'follow':425 'framebuff':79,383,389 'game':193 'ghostscript':437,442 'glimps':92 'graphic':25,67,101,151,212,216,298,325,409 'gui':43,53,168,187,477 'help':341 'host':268,358 'implement':394 'import':301 'includ':182 'instal':420,435,444 'instead':272 'interact':170 'introduct':9 'juli':521 'known':119 'lei':512,515 'librari':345,378 'like':87,255,314 'live':318 'local':21 'log':518 'lot':475 'mani':39 'mao':513,516 'matplotlib':348 'memori':285,413 'minut':334 'model':140 'must':230 'need':36 'network':127 'network-transpar':126 'normal':17 'oper':410 'origin':509 'os':186 'output':274,282,418 'perform':407 'pleas':422 'plot.py':466 'post':84 'program':15,144,158,174,203,293,374 'protocol':399,494 'publish':510 'put':65 'python':465 'refer':487 'remot':307,322,485 'requir':167,210,355 'routin':331 'run':1,13,18,38,145,207,231,257,292,372,423,457,460,464,480,499,500 'say':367 'scenario':240 'screen':277,417 'see':51 'server':7,96,110,139,143,161,173,199,209,219,235,243,266,281,308,323,337,361,393,398,405,486,506 'server-cli':95,109,160 'show':415 'signal':275,283 'simul':40,479 'simultan':44 'snapshot':330 'somehow':32 'sometim':10,34 'start':222,246,447 'still':254 'stream':319 'sudo':430,433 'system':117,130,493 'take':89,328 'termin':429,453 'thus':224 'tikz':354 'transpar':128 'typic':181 'updat':432 'use':4,76,106,135,262,290,350,376,454,472,503 'various':156 'virtual':5,59,78,264,279,335,382,388,412,504 'want':49 'watch':316 'web':188 'whose':296 'wikipedia':488,490 'window':116,129,492 'without':197,214,324,349,414 'would':31,86,204,236,253,313,469 'x':2,6,77,94,108,115,123,134,142,159,172,177,179,198,208,218,227,234,242,258,265,270,280,336,360,381,387,449,491,501,505 'x11':121,396 'xvfb':8,80,107,384,385,406,421,436,440,456,459,463,468,489,498,507 'xvfb-run':455,458,462,497 'yes':72	en	Lei Mao
1010	Discrete Fourier Transform	{"ver":2,"uid":1,"hash":"SHA1:f10933944cfe48784d4f8513ec11f2c3a498fb8f"}	https://leimao.github.io/blog/Discrete-Fourier-Transform/	2020-09-07 02:10:11	<h3 id="introduction">Introduction</h3>\n\n<p>Discrete Fourier transform is one of the most important linear transformation for signal processing. Although I have learned discrete Fourier transformation in college and graduate school, it was not systematic at that time. Because I did not have too much chance to actually use it without having to be dependent on third-party library or software, I only remember it is a transfomration between the time domain and the frequency domain without being able to tell too much mathmatical details.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss some of the details of discrete Fourier transform and its relationship with Fourier transform.</p>\n\n<h3 id="fourier-transform">Fourier Transform</h3>\n\n<p>In mathematics, a Fourier transform (FT) is a mathematical transform that decomposes a function (often a function of time, or a signal) into its constituent frequencies, which is sometimes called frequency spectrum. The constituent frequencies could also be used to reconstruct the function back.</p>\n\n<p><br /></p>\n\n<p>To decompose a function $f(x)$ to its frequency spectrum function $F(\\xi)$ or $F(\\omega)$, we use Fourier transform.</p>\n\n\\[F(\\xi) = \\int_{-\\infty}^{\\infty} f(x) e^{-2\\pi i \\xi x} dx\\]\n\n<p>where $\\xi$ is any real-valued frequency.</p>\n\n<p><br /></p>\n\n<p>Sometimes, if we define the radian-frequency $\\omega = 2\\pi \\xi$,</p>\n\n\\[F(\\omega) = \\int_{-\\infty}^{\\infty} f(x) e^{-i \\omega x} dx\\]\n\n<p><br /></p>\n\n<p>To reconstruct the function $f(x)$ from its frequency spectrum function $F(\\xi)$ or $F(\\omega)$, we use inverse Fourier transform.</p>\n\n\\[f(x) = \\int_{-\\infty}^{\\infty} F(\\xi) e^{2\\pi i \\xi x} d\\xi\\]\n\n<p>or equivalently,</p>\n\n\\[f(x) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} F(\\omega) e^{i \\omega x} d\\omega\\]\n\n<h3 id="discrete-fourier-transform">Discrete Fourier Transform</h3>\n\n<p>Discrete Fourier transform replaces the infinite integral in the Fourier transform with a finite sum. Given a signal sequence $\\{f(x_0), f(x_1), \\cdots, f(x_{n-1})\\}$, where the sampling interval between $x_i$ and $x_{i+1}$ is a constant, we defined the discrete Fourier transform, and got a frequency sequence $\\{F(\\omega_0), F(\\omega_1), \\cdots, F(\\omega_{n-1})\\}$.</p>\n\n\\[F(\\omega_k) = \\sum_{n = 0}^{N-1} f(x_n) e^{-i \\omega_k x_n}\\]\n\n<p>where</p>\n\n<p><br /></p>\n\n<p>$k = 0, 1, 2, \\cdots, N-1$.</p>\n\n<p>$N$ is the number of samples from $f$ and $F$.</p>\n\n<p>$f(x_n)$ is the signal amplitude at $x_n$. It could be real or complex value.</p>\n\n<p>$T$ is the sampling interval and $T = x_{i+1} - x_{i}$.</p>\n\n<p>$x_n = nT$.</p>\n\n<p>$F(\\omega_k)$ is the spectrum of $f$ at radian-frequency $\\omega_k$.</p>\n\n<p>$f_0 = \\frac{1}{NT}$ is the <a href="https://en.wikipedia.org/wiki/Fundamental_frequency">fundamental frequency</a>, because we treat the $N$ signal examples as if they are from one period.</p>\n\n<p>$\\Omega = \\frac{2\\pi}{NT}$ is the radian-frequency sampling interval.</p>\n\n<p>$\\omega_k = k\\Omega = \\frac{2\\pi k}{NT}$ is the $k$th radian-frequency sample.</p>\n\n<p>$f_s = \\frac{1}{T}$ is the sampling rate.</p>\n\n<p><br /></p>\n\n<p>Similarly, the inverse discrete Fourier transform could be derived based on the definition of discrete Fourier transform.</p>\n\n\\[f(x_n) = \\frac{1}{N} \\sum_{k = 0}^{N-1} F(\\omega_k) e^{i \\omega_k x_n}\\]\n\n<p>Sometimes, the sampling interval $T$ is not important and we are interested in the magnitude of the signal and frequency samples. Given a signal sequence $\\{f[0], f[1], \\cdots, f[N-1]\\}$ and we got a frequency sequence $\\{F[0], F[1], \\cdots, F[N-1]\\}$ after fourier transformation. We have the more general form of discrete Fourier transform.</p>\n\n\\[\\begin{align}\nF[k] &amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\omega_k x_n} \\\\\n&amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi k}{NT} nT} \\\\\n&amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi k n}{N}} \\\\\n\\end{align}\\]\n\n<p>Similarly, we have the inverse discrete Fourier transform.</p>\n\n\\[\\begin{align}\nf[n] &amp;= \\frac{1}{N} \\sum_{k = 0}^{N-1} F[k] e^{i \\omega_k x_n} \\\\\n&amp;= \\frac{1}{N} \\sum_{k = 0}^{N-1} F[k] e^{i \\frac{2\\pi k}{NT} nT} \\\\\n&amp;= \\frac{1}{N} \\sum_{k = 0}^{N-1} F[k] e^{i \\frac{2\\pi k n}{N}} \\\\\n\\end{align}\\]\n\n<p>The reason why we only need $N$ frequency samples becomes obvious here. Because</p>\n\n\\[\\begin{align}\nF[k+N] &amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi (k+N) n}{N}} \\\\\n&amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi k n}{N}} e^{-i 2\\pi n} \\\\\n&amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi k n}{N}} \\times 1\\\\\n&amp;= \\sum_{n = 0}^{N-1} f[n] e^{-i \\frac{2\\pi k n}{N}}\\\\\n&amp;= F[k] \\\\ \n\\end{align}\\]\n\n<p>Because the frequency has a “period” of $N$, only $N$ frequency examples are required.</p>\n\n<p><br /></p>\n\n<p>The frequencies corresponding to the frequency samples $F[k]$ is $k f_0$, i.e., the frequencies are $0, \\frac{1}{NT}, \\frac{2}{NT}, \\cdots, \\frac{N-1}{NT}$ for $F[0], F[1], F[2], \\cdots, F[n]$, respectively. Similarly the radient frequency corresponding to the frequency samples $F[k]$ is $2 \\pi k f_0$.</p>\n\n<h3 id="unitary-discrete-fourier-transform">Unitary Discrete Fourier Transform</h3>\n\n<p>Because discrete Fourier transform is a linear transformation, we could express such transformation using matrix multiplications.</p>\n\n<p><br /></p>\n\n<p>Surprisingly, the $e^{i \\frac{2\\pi k}{N}}$ for $k \\in [0,N-1]$ in the inverse discrete Fourier transform are actually the <a href="https://leimao.github.io/blog/Complex-Number-Representations/">$N$th root of unity</a>, $\\omega_N^{0}, \\omega_N^{1}, \\cdots, \\omega_N^{N-1}$.</p>\n\n<p><br /></p>\n\n<p>So we could write the inverse discrete Fourier transform using the following expression.</p>\n\n<p><br /></p>\n\n<p>We define the inverse discrete Fourier transform <a href="https://en.wikipedia.org/wiki/Vandermonde_matrix">Vandermonde matrix</a> $\\mathbf{DFT}^{\\ast\\dagger}$ as</p>\n\n\\[\\begin{align}\n\\mathbf{DFT}^{\\ast\\dagger} &amp;= \n\\begin{bmatrix} \n    \\omega_N^{0 \\cdot 0} &amp; \\omega_N^{0 \\cdot 1} &amp; \\cdots &amp; \\omega_N^{0 \\cdot N-1} \\\\\n    \\omega_N^{1 \\cdot 0} &amp; \\omega_N^{1 \\cdot 1} &amp; \\cdots &amp; \\omega_N^{1 \\cdot N-1} \\\\\n    \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n    \\omega_N^{N-1 \\cdot 0} &amp; \\omega_N^{N-1 \\cdot 1} &amp; \\cdots &amp; \\omega_N^{N-1 \\cdot N-1} \\\\\n\\end{bmatrix}\n\\end{align}\\]\n\n<p>where $\\omega_N^{i \\cdot j} = (\\omega_N^{i})^j = \\omega_N^{ij}$.</p>\n\n<p><br /></p>\n\n<p>We further arrange the signal and frequency samples as column vectors.</p>\n\n\\[F_N = \n\\begin{bmatrix} \n    F[0] \\\\\n    F[1] \\\\\n    \\vdots \\\\\n    F[N-1] \\\\\n\\end{bmatrix}\\]\n\n<p>and</p>\n\n\\[f_N = \n\\begin{bmatrix} \n    f[0] \\\\\n    f[1] \\\\\n    \\vdots \\\\\n    f[N-1] \\\\\n\\end{bmatrix}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\nf_N &amp;= \\frac{1}{N} \\mathbf{DFT}^{\\ast\\dagger} F_N \\\\\nF_N &amp;= \\mathbf{DFT}^{\\ast} f_N \\\\\n\\end{align}\\]\n\n<p>However, $\\mathbf{DFT}^{\\ast\\dagger}$ is not unitary.</p>\n\n\\[\\mathbf{DFT}^{\\ast\\dagger}_{j,k} = \\omega_N^{jk}\\]\n\n\\[\\mathbf{DFT}^{\\ast}_{j,k} = \\omega_N^{-kj}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n(\\mathbf{DFT}^{\\ast} \\mathbf{DFT}^{\\ast\\dagger})_{j,k} &amp;= \\sum_{i=0}^{N-1} \\omega_N^{ji} \\omega_N^{-ik} \\\\\n&amp;= \\sum_{i=0}^{N-1} \\omega_N^{-i(k-j)} \\\\\n&amp;= \n\\begin{cases}\n    \\sum_{i=0}^{N-1} 1 &amp; \\text{when $k = j$}\\\\\n    \\omega_N^{j-k} \\sum_{i=0}^{N-1} \\omega_N^{i} &amp; \\text{when $k \\neq j$}\\\\\n\\end{cases} \\\\\n&amp;= \n\\begin{cases}\n    N &amp; \\text{when $k = j$}\\\\\n    \\omega_N^{j-k} \\frac{1 (1 - \\omega_N^N)}{1-\\omega_N^1} &amp; \\text{when $k \\neq j$}\\\\\n\\end{cases} \\\\\n&amp;= \n\\begin{cases}\n    N &amp; \\text{when $k = j$}\\\\\n    \\omega_N^{j-k} \\frac{1 (1 - 1)}{1-\\omega_N^1} &amp; \\text{when $k \\neq j$}\\\\\n\\end{cases} \\\\\n&amp;= \n\\begin{cases}\n    N &amp; \\text{when $k = j$}\\\\\n    0 &amp; \\text{when $k \\neq j$}\\\\\n\\end{cases} \\\\\n\\end{align}\\]\n\n<p>It is not unitary, but we are close. We define a new matrix</p>\n\n\\[\\mathbf{DFT}^{\\dagger} = \\frac{1}{\\sqrt{N}} \\mathbf{DFT}^{\\ast\\dagger}\\]\n\n<p>This time, it is easy to show that this time $\\mathbf{DFT}^{\\dagger}$ is a unitary matrix.</p>\n\n<p><br /></p>\n\n<p>To conduct discrete Fourier transform and inverse discrete Fourier transform, we have</p>\n\n\\[\\begin{align}\nf_N &amp;= \\frac{1}{\\sqrt{N}} \\mathbf{DFT}^{\\dagger} F_N \\\\\nF_N &amp;= \\sqrt{N} \\mathbf{DFT}^{} f_N \\\\\n\\end{align}\\]\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Complex-Number-Representations/">Complex Number Representations</a></li>\n  <li><a href="https://ccrma.stanford.edu/~jos/mdft/Introduction_DFT.html">Introduction to the DFT</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Discrete-Fourier-Transform/">Discrete Fourier Transform</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on September 06, 2020.</p>	f07d9426fe607f817ef7ef1254bac0ebd48ff0fa	\N	f	2020-09-07 02:10:00	2020-09-10 05:10:13.39425	0			'+1':319,406 '-1':308,344,352,369,514,556,570,592,605,620,652,668,686,721,737,757,774,830,894,919,971,988,996,1002,1009,1012,1052,1067,1134,1145,1158,1173 '-2':183 '0':300,336,350,364,427,512,550,564,590,603,618,650,666,684,719,735,755,772,815,820,834,859,892,911,957,959,962,968,976,998,1046,1061,1132,1143,1156,1171,1247 '06':1358 '1':262,303,339,365,429,481,508,552,566,646,662,680,769,822,836,914,964,974,979,981,985,1004,1048,1063,1076,1159,1197,1198,1202,1205,1226,1227,1228,1229,1232,1274,1315 '2':206,250,263,366,451,466,611,626,674,692,727,743,750,763,780,825,838,855,885 '2020':1359 'abl':79 'actual':47,902 'align':585,632,642,698,713,788,948,1016,1072,1092,1120,1256,1311,1332 'also':147 'although':19 'amplitud':386 'arrang':1032 'ast':944,951,1080,1088,1096,1103,1112,1123,1126,1279 'back':154 'base':496 'becom':708 'begin':584,641,712,947,953,1043,1058,1071,1119,1152,1184,1213,1240,1310 'blog':88 'bmatrix':954,1014,1044,1054,1059,1069 'book':1355 'call':140 'case':1153,1183,1185,1212,1214,1239,1241,1254 'cdot':304,340,367,553,567,827,839,915,958,963,965,969,975,980,982,986,997,1003,1005,1010,1021 'chanc':45 'close':1264 'colleg':27 'column':1039 'complex':395,1334 'conduct':1299 'constant':322 'constitu':135,144 'correspond':805,847 'could':146,391,493,873,922 'd':255,274 'dagger':945,952,1081,1097,1104,1127,1272,1280,1293,1320 'ddot':991 'decompos':122,156 'defin':200,324,934,1266 'definit':499 'depend':54 'deriv':495 'detail':85,98 'dft':943,950,1079,1087,1095,1102,1111,1122,1125,1271,1278,1292,1319,1328,1340 'discret':1,5,23,100,276,279,326,490,501,581,638,861,865,898,926,937,1300,1305,1341 'discuss':94 'domain':72,76 'dx':188,220 'e':182,216,249,270,356,518,595,608,623,655,671,689,724,740,748,760,777,882 'easi':1285 'end':631,697,787,1013,1015,1053,1068,1091,1182,1211,1238,1253,1255,1331 'equival':258 'exampl':441,800 'express':874,932 'f':159,166,169,175,180,209,214,225,232,235,242,247,259,268,298,301,305,334,337,341,345,353,377,379,380,412,419,426,478,504,515,549,551,554,563,565,568,586,593,606,621,643,653,669,687,714,722,738,758,775,785,810,814,833,835,837,840,852,858,1041,1045,1047,1050,1056,1060,1062,1065,1073,1082,1084,1089,1312,1321,1323,1329 'finit':292 'follow':931 'form':579 'fourier':2,6,24,101,107,109,114,173,240,277,280,288,327,491,502,572,582,639,862,866,899,927,938,1301,1306,1342 'frac':261,428,450,465,480,507,610,625,645,661,673,679,691,726,742,762,779,821,824,828,884,1075,1196,1225,1273,1314 'frequenc':75,136,141,145,163,196,204,229,332,423,434,458,476,543,561,706,791,799,804,808,818,846,850,1036 'ft':116 'function':124,127,153,158,165,224,231 'fundament':433 'general':578 'given':294,545 'got':330,559 'graduat':29 'howev':1093 'i.e':816 'ij':1029 'ik':1140 'import':13,531 'infinit':284 'infti':178,179,212,213,245,246,266,267 'int':177,211,244,265 'integr':285 'interest':535 'interv':312,401,460,527 'introduct':4,1337 'invers':239,489,637,897,925,936,1304 'j':1022,1026,1105,1113,1128,1151,1163,1167,1181,1190,1194,1210,1219,1223,1237,1246,1252 'j-k':1166,1193,1222 'ji':1137 'jk':1109 'k':347,359,363,414,425,462,463,468,472,511,517,521,587,598,613,628,649,654,658,665,670,676,683,688,694,715,729,745,765,782,786,811,813,853,857,887,890,1106,1114,1129,1150,1162,1168,1179,1189,1195,1208,1218,1224,1235,1245,1250 'k-j':1149 'kj':1117 'learn':22 'lei':1348,1351 'librari':59 'like':92 'linear':14,870 'log':1354 'magnitud':538 'mao':1349,1352 'mathbf':942,949,1078,1086,1094,1101,1110,1121,1124,1270,1277,1291,1318,1327 'mathemat':112,119 'mathmat':84 'matrix':878,941,1269,1297 'much':44,83 'multipl':879 'n':307,343,349,351,355,361,368,370,382,389,410,439,506,509,513,523,555,569,589,591,594,600,602,604,607,617,619,622,629,630,644,647,651,660,663,667,681,685,695,696,705,716,718,720,723,730,731,732,734,736,739,746,747,752,754,756,759,766,767,771,773,776,783,784,796,798,829,841,888,893,904,910,913,917,918,956,961,967,970,973,978,984,987,994,995,1000,1001,1007,1008,1011,1019,1024,1028,1042,1051,1057,1066,1074,1077,1083,1085,1090,1108,1116,1133,1136,1139,1144,1147,1157,1165,1172,1175,1186,1192,1200,1201,1204,1215,1221,1231,1242,1276,1313,1317,1322,1324,1326,1330 'need':704 'neq':1180,1209,1236,1251 'new':1268 'nt':411,430,453,469,614,615,677,678,823,826,831 'number':373,1335 'obvious':709 'often':125 'omega':170,205,210,218,236,269,272,275,335,338,342,346,358,413,424,449,461,464,516,520,597,657,909,912,916,955,960,966,972,977,983,993,999,1006,1018,1023,1027,1107,1115,1135,1138,1146,1164,1174,1191,1199,1203,1220,1230 'one':9,447 'origin':1345 'parti':58 'period':448,794 'pi':184,207,251,264,452,467,612,627,675,693,728,744,751,764,781,856,886 'post':89 'process':18 'publish':1346 'radian':203,422,457,475 'radian-frequ':202,421,456,474 'radient':845 'rate':486 'real':194,393 'real-valu':193 'reason':700 'reconstruct':151,222 'refer':1333 'relationship':105 'rememb':64 'replac':282 'represent':1336 'requir':802 'respect':842 'root':906 'sampl':311,375,400,459,477,485,526,544,707,809,851,1037 'school':30 'septemb':1357 'sequenc':297,333,548,562 'show':1287 'signal':17,132,296,385,440,541,547,1034 'similar':487,633,843 'softwar':61 'sometim':139,197,524 'spectrum':142,164,230,417 'sqrt':1275,1316,1325 'sum':293,348,510,588,601,616,648,664,682,717,733,753,770,1130,1141,1154,1169 'surpris':880 'systemat':34 'tell':81 'text':1160,1177,1187,1206,1216,1233,1243,1248 'th':473,905 'therefor':1070,1118 'third':57 'third-parti':56 'time':37,71,129,768,1282,1290 'transfomr':68 'transform':3,7,15,25,102,108,110,115,120,174,241,278,281,289,328,492,503,573,583,640,863,867,871,876,900,928,939,1302,1307,1343 'treat':437 'unitari':860,1100,1260,1296 'uniti':908 'use':48,149,172,238,877,929 'valu':195,396 'vandermond':940 'vdot':989,990,992,1049,1064 'vector':1040 'without':50,77 'would':91 'write':923 'x':160,181,187,215,219,226,243,254,260,273,299,302,306,314,317,354,360,381,388,404,407,409,505,522,599,659 'xi':167,176,186,190,208,233,248,253,256	en	Lei Mao
987	老年痴呆症之一	{"ver":2,"uid":1,"hash":"SHA1:625aafb1ead83b5735b62ce8b1a3a4e747cd8183"}	https://rustcc.cn/article?id=c5670db9-2090-4518-b074-8cde463927dc	2020-06-24 15:39:07	<p>看一个范例 xxx\n很简单\n标准Cargo.toml 没有其他认识依赖\nxxx\nsrc下lib.rs 和 main.rs</p>\n<p>main.rs</p>\n<pre><code>main(){\n   xxx::p(n);\n} \n</code></pre>\n<p>lib.rs</p>\n<pre><code>pub p(n:...){}\n  let xxx=...\n}\n</code></pre>\n<p>心说rust还能直接用函数里的变量来调用函数么</p>\n<p>脑子晕乎乎的 突然家里的喵过来咣当一口咬脚上\n站起来追过去 打屁股</p>\n<p>回来再一想 明明这个项目 就是xxx 用项目名来调用函数不是正常的么</p>\n<p>下次起名字也能用重复的就尽量重复</p>\n	4bbb23c6d2736dda6f090df20c0b4cafa0b0109c	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.211039	0			'let':22 'lib.rs':18 'main':14 'main.rs':12,13 'n':17,21 'p':16,20 'pub':19 'rs':10 'src下lib':9 'toml':6 'xxx':3,8,15,23 '下次起名字也能用重复的就尽量重复':33 '和':11 '回来再一想':29 '就是xxx':31 '很简单':4 '心说rust还能直接用函数里的变量来调用函数么':24 '打屁股':28 '明明这个项目':30 '标准cargo':5 '没有其他认识依赖':7 '用项目名来调用函数不是正常的么':32 '看一个范例':2 '突然家里的喵过来咣当一口咬脚上':26 '站起来追过去':27 '老年痴呆症之一':1 '脑子晕乎乎的':25		
132	Docker Images : Part I - Reducing Image Size	{"ver":2,"uid":1,"hash":"SHA1:2bba98a4c9b1fe132c97c19a60035c90456cc40f"}	https://www.ardanlabs.com/blog/2020/02/docker-images-part1-reducing-image-size.html	2020-02-04 00:00:00	Series Index Reducing Image Size\nDetails Specific To Different Languages\nGoing Farther To Reduce Image Size\nIntroduction When getting started with containers, it&rsquo;s pretty easy to be shocked by the size of the images that we build. We&rsquo;re going to review a number of techniques to reduce image size, without sacrificing developers&rsquo; and ops&rsquo; convenience. In this first part, we will talk about multi-stage builds, because that&rsquo;s where anyone should start if they want to reduce the size of their images.	c68a6575244febd84d9b7f81e9ddcd2508a46e3b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.409014	0			'anyon':81 'build':45,76 'contain':29 'conveni':64 'detail':13 'develop':61 'differ':16 'docker':1 'easi':33 'farther':19 'first':67 'get':26 'go':18,48 'imag':2,6,11,22,42,57,93 'index':9 'introduct':24 'languag':17 'multi':74 'multi-stag':73 'number':52 'op':63 'part':3,68 'pretti':32 're':47 'reduc':5,10,21,56,88 'review':50 'sacrif':60 'seri':8 'shock':36 'size':7,12,23,39,58,90 'specif':14 'stage':75 'start':27,83 'talk':71 'techniqu':54 'want':86 'without':59	en	
138	Context Package Semantics In Go	{"ver":2,"uid":1,"hash":"SHA1:cc7ca7816551097583d958e44eac403d9cda87a7"}	https://www.ardanlabs.com/blog/2019/09/context-package-semantics-in-go.html	2019-09-04 00:00:00	Introduction The Go programming language has the built-in keyword go to create goroutines, but has no keywords or direct support for terminating goroutines. In a real world service, the ability to time-out and terminate goroutines is critical for maintaining the health and operation of a service. No request or task can be allowed to run forever so identifying and managing latency is a responsibility every programmer has.\nA solution provided by the Go team to solve this problem is the Context package.	cda4aebe853451858532135b919009a5cfd3dfc4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.421014	0			'abil':37 'allow':62 'built':14 'built-in':13 'context':1,90 'creat':19 'critic':46 'direct':26 'everi':74 'forev':65 'go':5,8,17,82 'goroutin':20,30,44 'health':50 'identifi':67 'introduct':6 'keyword':16,24 'languag':10 'latenc':70 'maintain':48 'manag':69 'oper':52 'packag':2,91 'problem':87 'program':9 'programm':75 'provid':79 'real':33 'request':57 'respons':73 'run':64 'semant':3 'servic':35,55 'solut':78 'solv':85 'support':27 'task':59 'team':83 'termin':29,43 'time':40 'time-out':39 'world':34	en	
120	Python and Go : Part III - Packaging Python Code	{"ver":2,"uid":1,"hash":"SHA1:1b9eb15e979469dc92e0dc0da806c90b6ed9cfff"}	https://www.ardanlabs.com/blog/2020/08/packaging-python-code.html	2020-08-11 00:00:00	Series Index Python and Go: Part I - gRPC\nPython and Go: Part II - Extending Python With Go\nPython and Go: Part III - Packaging Python Code\nIntroduction In the previous post we compiled Go code to a shared library and used it from the Python interactive shell. In this post we&rsquo;re going to finish the development process by writing a Python module that hides the low level details of working with a shared library and then package this code as a Python package.	01b00dc8eeb27f225c67a8717e0a70df32c04308	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.380227	0			'code':8,33,42,87 'compil':40 'detail':76 'develop':64 'extend':22 'finish':62 'go':3,13,19,25,28,41,60 'grpc':16 'hide':72 'ii':21 'iii':5,30 'index':10 'interact':53 'introduct':34 'level':75 'librari':46,82 'low':74 'modul':70 'packag':6,31,85,91 'part':4,14,20,29 'post':38,57 'previous':37 'process':65 'python':1,7,11,17,23,26,32,52,69,90 're':59 'seri':9 'share':45,81 'shell':54 'use':48 'work':78 'write':67	en	
154	Bounds Check Elimination In Go	{"ver":2,"uid":1,"hash":"SHA1:6763a3e0f97d287b138bc7259204ef464d075691"}	https://www.ardanlabs.com/blog/2018/04/bounds-check-elimination-in-go.html	2018-04-28 00:00:00	Introduction One day I was talking to Damian Gryski in Slack about some performance improvements he made to his go-metro package. When I first looked at the changes I was completely confused how this could have any effect on the performance of the code. I felt the code was more readable, but more performant? I didn’t see it.\nThen Damian started to talk to me about a compiler optimization called Bounds Check Elimination or BCE.	9f3bca8f42c45f40773ef2ee1a9622adc26e1da2	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.453363	0			'bce':83 'bound':1,79 'call':78 'chang':35 'check':2,80 'code':51,55 'compil':76 'complet':38 'confus':39 'could':42 'damian':13,68 'day':8 'didn':63 'effect':45 'elimin':3,81 'felt':53 'first':31 'go':5,26 'go-metro':25 'gryski':14 'improv':20 'introduct':6 'look':32 'made':22 'metro':27 'one':7 'optim':77 'packag':28 'perform':19,48,61 'readabl':58 'see':65 'slack':16 'start':69 'talk':11,71	en	
164	Language Mechanics On Stacks And Pointers	{"ver":2,"uid":1,"hash":"SHA1:3c2735f787bf791ae17690bab21799d7249d1f44"}	https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html	2017-05-18 00:00:00	Prelude This is the first post in a four part series that will provide an understanding of the mechanics and design behind pointers, stacks, heaps, escape analysis and value/pointer semantics in Go. This post focuses on stacks and pointers.\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics	322e650a98e6f4e934445d4e01f5c07445a11568	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.472866	0			'1':52 '2':59 '3':65 '4':71 'analysi':33,64 'behind':28 'data':75 'design':27,72 'escap':32,63 'first':11 'focus':41 'four':15,49 'go':38 'heap':31 'index':46 'languag':1,53,60,66 'mechan':2,25,54,61,67 'memori':69 'part':16,50 'philosophi':73 'pointer':6,29,45,58 'post':12,40 'prelud':7 'profil':70 'provid':20 'semant':36,77 'seri':17,51 'stack':4,30,43,56 'understand':22 'value/pointer':35	en	
206	Using XSLT With Go	{"ver":2,"uid":1,"hash":"SHA1:8cbd04f0bd597d1ec9de5d9ca99da8d9ae33f4b0"}	https://www.ardanlabs.com/blog/2013/11/using-xslt-with-go.html	2013-11-03 00:00:00	I am working on a project that requires pulling and processing different XML feeds from the web and storing the data into MongoDB as JSON. Since new feeds come up everyday, changing the Go program to process and publish new feeds is out of the question. A second constraint is that processing has to work in Iron.io or any other linux cloud based environment.\nWhat I needed was a Go program that could take an XML document and XSLT stylesheet at runtime, transform the XML into JSON and then store the JSON to MongoDB.	21bac1044aad2dd89d13610b55fd5ef6f02e006a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.554099	0			'base':67 'chang':36 'cloud':66 'come':33 'constraint':53 'could':77 'data':25 'differ':16 'document':81 'environ':68 'everyday':35 'feed':18,32,45 'go':4,38,74 'iron.io':61 'json':29,91,96 'linux':65 'mongodb':27,98 'need':71 'new':31,44 'process':15,41,56 'program':39,75 'project':10 'publish':43 'pull':13 'question':50 'requir':12 'runtim':86 'second':52 'sinc':30 'store':23,94 'stylesheet':84 'take':78 'transform':87 'use':1 'web':21 'work':7,59 'xml':17,80,89 'xslt':2,83	en	
203	Write Your Go Programs Using GEdit	{"ver":2,"uid":1,"hash":"SHA1:1feea9f7cb9c48c51e5c12eb820ae0bdf14535bc"}	https://www.ardanlabs.com/blog/2013/11/write-your-go-programs-using-gedit.html	2013-11-23 00:00:00	This is a guest post from Tad Vizbaras from&nbsp;Etasoft&nbsp;in South Florida. There are a number of editors and IDEs for Go development. LiteIde, Vim, Emacs and GEdit just to name a few. Each developer has their own favorite editor for each language they work with. Some like full featured IDE environments while others prefer speed over features. My personal&nbsp;favorite&nbsp;editors for Go development at the moment are Vim and GEdit.\nGEdit comes as part of many Linux distros.	74a92906ec7b85f0e2bf769748cea83bd7c6228a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.548593	0			'come':81 'develop':30,42,72 'distro':87 'editor':25,47,69 'emac':33 'environ':59 'etasoft':16 'favorit':46,68 'featur':57,65 'florida':19 'full':56 'gedit':6,35,79,80 'go':3,29,71 'guest':10 'ide':27,58 'languag':50 'like':55 'linux':86 'liteid':31 'mani':85 'moment':75 'name':38 'number':23 'other':61 'part':83 'person':67 'post':11 'prefer':62 'program':4 'south':18 'speed':63 'tad':13 'use':5 'vim':32,77 'vizbara':14 'work':52 'write':1	en	
178	Scheduler Tracing In Go	{"ver":2,"uid":1,"hash":"SHA1:d7d6443f3dc4eb2d5301587c95b8192890a00cba"}	https://www.ardanlabs.com/blog/2015/02/scheduler-tracing-in-go.html	2015-02-23 00:00:00	Introduction One of the things I love about Go is the profiling and debug information you can generate. There is a special environmental variable named GODEBUG that will emit debugging information about the runtime as your program executes. You can request summary and detailed information for both the garbage collector and the scheduler. What’s great is you don&rsquo;t need to build your program with any special switches for it to work.	f377dee499545073ea60a761d2431f5061f7392a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.499566	0			'build':67 'collector':54 'debug':18,34 'detail':48 'emit':33 'environment':27 'execut':42 'garbag':53 'generat':22 'go':4,13 'godebug':30 'great':60 'inform':19,35,49 'introduct':5 'love':11 'name':29 'need':65 'one':6 'profil':16 'program':41,69 'request':45 'runtim':38 'schedul':1,57 'special':26,72 'summari':46 'switch':73 'thing':9 'trace':2 'variabl':28 'work':77	en	
1012	接口调度者：API 网关	{"ver":2,"uid":1,"hash":"SHA1:9f1ee9980eb465d87112c6d3aa9b7cbd968e5667"}	https://toutiao.io/k/qec4gvf	2020-09-07 02:10:16	接口调度者：API 网关	c9e4e0217313708ef8a5c3b5921fefe3028dd92c	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:09.99431	0			'api':2,5 '接口调度者':1,4 '网关':3,6	zh	
1013	要编写优秀代码，请从设计模式始	{"ver":2,"uid":1,"hash":"SHA1:2918fcdc723f87139d0e685c8873d82ce73f1f58"}	https://toutiao.io/k/0dyhstb	2020-09-07 02:10:16	要编写优秀代码，请从设计模式始	038d4535e5f771bb341f0442e5d6f44dc7b41152	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.001374	0			'要编写优秀代码':1,3 '请从设计模式始':2,4	zh	
167	Design Philosophy On Packaging	{"ver":2,"uid":1,"hash":"SHA1:4e39522de42dc64625f5069a6e36257dc3cde07b"}	https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-packaging.html	2017-02-20 00:00:00	Prelude This post is part of a series of posts designed to make you think about your own design philosophy on different topics. If you haven’t read this post yet, please do so first:\nDevelop Your Design Philosophy\nAfter this post, read this next one:\nPackage Oriented Design\nIntroduction In an interview given to Brian Kernighan by Mihai Budiu in the year 2000, Brian was asked the following question:	5720237eebb6c2cb43c59f1149ba13793c38f2bb	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.478332	0			'2000':68 'ask':71 'brian':60,69 'budiu':64 'design':1,15,23,42,53 'develop':40 'differ':26 'first':39 'follow':73 'given':58 'haven':30 'interview':57 'introduct':54 'kernighan':61 'make':17 'mihai':63 'next':49 'one':50 'orient':52 'packag':4,51 'part':9 'philosophi':2,24,43 'pleas':36 'post':7,14,34,46 'prelud':5 'question':74 'read':32,47 'seri':12 'think':19 'topic':27 'year':67 'yet':35	en	
41	Cross Entropy Loss VS Log Loss VS Sum of Log Loss	{"ver":2,"uid":1,"hash":"SHA1:cdd84033edfbe339532004225162998bfb69df13"}	https://leimao.github.io/blog/Conventional-Classification-Loss-Functions/	2020-08-14 07:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>In one of my previous blog posts on <a href="https://leimao.github.io/blog/Cross-Entropy-KL-Divergence-MLE/">cross entropy, KL divergence, and maximum likelihood estimation</a>, I have shown the “equivalence” of these three things in optimization. Cross entropy loss has been widely used in most of the state-of-the-art machine learning classification models, mainly because optimizing it is equivalent to maximum likelihood estimation. However, there could be other losses used for classification problems.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discussed the log loss used for logistic regression, the cross entropy loss used for multi-class classification, and the sum of log loss  used for multi-class classification.</p>\n\n<h3 id="prerequisites">Prerequisites</h3>\n\n<p>The prerequisites of this blog post have been discussed heavily in my other blog posts. For completeness, I made a copy of them here.</p>\n\n<h4 id="leibniz-integral-rule">Leibniz Integral Rule</h4>\n\n<p>Leibniz integral rule allows swapping positions of derivatives under certain circumstances.</p>\n\n\\[\\frac{d}{dx} \\int_{a}^{b} f(x,t) dt = \\int_{a}^{b} \\frac{\\partial}{\\partial x} f(x,t) dt\\]\n\n<p>To check the quick proof of Leibniz integral rule, please check one my blog posts on <a href="https://leimao.github.io/blog/RL-Policy-Gradient-Unbiase-Estimate/">this</a>.</p>\n\n<h4 id="derivatives-of-expected-value">Derivatives of Expected Value</h4>\n\n<p>Based on Leibniz integral rule, we could also move the positions of derivatives inside the expected value or outside the expected value. For instance,</p>\n\n\\[\\begin{aligned}\n\\frac{\\partial}{\\partial \\theta} \\mathbb{E}_{(x,y) \\sim P(x,y)}\\big[ \\mathscr{L}_{\\theta}(x,y) \\big] &amp;= \\frac{\\partial}{\\partial \\theta} \\int\\limits_{(x,y)} P(x, y) \\mathscr{L}_{\\theta}(x, y) d(xy) \\\\\n&amp;= \\int\\limits_{(x,y)} P(x, y) \\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x, y) d(xy) \\\\\n&amp;= \\mathbb{E}_{(x,y) \\sim P(x, y)}\\big[ \\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x, y) \\big]\n\\end{aligned}\\]\n\n<p>If $\\mathbb{E}_{(x,y) \\sim P(x,y)}\\big[ \\mathscr{L}_{\\theta}(x,y) \\big]$ is the loss function, to compute the derivative of the entire loss with respect to the parameter $\\theta$, it is equivalent to computing the derivatives of the losses contributed by each data point $\\mathscr{L}_{\\theta}(x, y)$ with respect to the parameter $\\theta$ and followed by computing its expected value, $\\mathbb{E}_{(x,y) \\sim P(x, y)}\\big[ \\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x, y) \\big]$. Assuming all the data $(x, y)$ are uniformly distributed, it is simply just computing the derivative of the losses contributed by each data point $\\mathscr{L}_{\\theta}(x, y)$ with respect to the parameter $\\theta$ and followed by taking their average. This is also how modern deep learning framework, such as TensorFlow and PyTorch, works.</p>\n\n<h3 id="log-loss-for-logistic-regression">Log Loss for Logistic Regression</h3>\n\n<p>Log loss has been used for logistic regression for a long time. Given $(x, y)$, where $x$ is the input, $y$ is the label for $x$, our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters. such that $\\tilde{y} = f_{\\theta}(x)$ is as close to $y$ as possible. For logistic regression, usually $y = 0$ or $1$. $y = 1$ means $x$ belongs to certain class, whereas $y = 0$ means $x$ does not belong to certain class.</p>\n\n<p><br /></p>\n\n<p>Usually, logistic regression will compute the logit $z$ for the input $x$, where $z = g_{\\theta}(x)$ followed by computing the sigmoid activation for $z$ to get the estimate of $y$, $\\tilde{y}$, in the range of $(0,1)$. Concretely,</p>\n\n\\[\\begin{align}\nP(y = 1| x) &amp;= \\tilde{y} \\\\ \n&amp;= \\sigma(z) \\\\\n&amp;= \\frac{e^{z}}{e^{z} + 1} \\\\\n&amp;= \\frac{1}{1 + e^{-z}} \\\\\n\\end{align}\\]\n\n<p>The loss function used for fitting is called log loss, which we would see later that it is actually binary cross entropy loss.</p>\n\n\\[\\begin{align}\n\\mathscr{L}_{\\theta}(x,y) = -y \\log(\\tilde{y}) - (1-y) \\log(1 - \\tilde{y}) \\\\\n\\end{align}\\]\n\n<p>We further compute the derivative of this log loss with respect to the logit $z$.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\tilde{y}} \\mathscr{L}_{\\theta}(x,y) &amp;= \\frac{\\partial}{\\partial \\tilde{y}} \\big[ -y \\log(\\tilde{y}) - (1-y) \\log(1 - \\tilde{y}) \\big] \\\\\n&amp;= -\\frac{y}{\\tilde{y}} - \\frac{1-y}{1 - \\tilde{y}} (-1)  \\\\\n&amp;= -\\frac{y}{\\tilde{y}} + \\frac{1-y}{1 - \\tilde{y}}  \\\\\n&amp;= \\frac{\\tilde{y} - y}{\\tilde{y}(1 - \\tilde{y})} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial z} \\tilde{y} &amp;= \\frac{\\partial}{\\partial z} \\frac{1}{1 + e^{-z}} \\\\\n&amp;= (-1) (1 + e^{-z})^{-2} e^{-z} (-1) \\\\\n&amp;= \\frac{1}{1 + e^{-z}} \\frac{e^{-z}}{1 + e^{-z}} \\\\\n&amp;= \\frac{1}{1 + e^{-z}} \\big( 1- \\frac{1}{1 + e^{-z}} \\big) \\\\\n&amp;= \\tilde{y} (1 - \\tilde{y}) \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y) &amp;= \\frac{\\partial}{\\partial \\tilde{y}} \\mathscr{L}_{\\theta}(x,y) \\frac{\\partial}{\\partial z} \\tilde{y} \\\\\n&amp;= \\frac{\\tilde{y} - y}{\\tilde{y}(1 - \\tilde{y})} \\tilde{y} (1 - \\tilde{y}) \\\\\n&amp;= \\tilde{y} - y\n\\end{align}\\]\n\n<p>The interpretation is very simple. If $\\tilde{y} &gt; y$, $\\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y) &gt; 0$, the gradient descent wants to make $z$ smaller. Once $z$ is smaller, $\\tilde{y}$ will be smaller and its deviation from $y$ will become smaller. Similarly, If $\\tilde{y} &lt; y$, $\\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y) &lt; 0$, the gradient descent wants to make $z$ larger. Once $z$ is larger, $\\tilde{y}$ will be larger and its deviation from $y$ will become smaller.</p>\n\n<p><br /></p>\n\n<p>To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x,y) &amp;= \\frac{\\partial}{\\partial z} \\mathscr{L}_{\\theta}(x,y)  \\frac{\\partial}{\\partial \\theta} z \\\\\n&amp;= (\\tilde{y} - y) \\frac{\\partial}{\\partial \\theta} z\n\\end{align}\\]\n\n<h3 id="cross-entropy-loss-for-multi-class-classification">Cross Entropy Loss for Multi-Class Classification</h3>\n\n<p>Cross entropy loss has been widely used for classification problems in deep learning. Given $(x, \\mathbf{y})$, where $x$ is the input, $\\mathbf{y}$ is the label for $x$. If $\\mathbf{y}$ is an one-hot vector of size $n$, and $\\mathbf{y}_i = 1$, our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters, such that $\\tilde{\\mathbf{y}}_i = f_{\\theta}(x)$ is as close to $\\mathbf{y}_i$ as possible. Note that the motivation of using cross entropy loss behind is maximum likelihood estimation which might not be obvious to see. But I have discussed in my previous blog <a href="https://leimao.github.io/blog/Cross-Entropy-KL-Divergence-MLE/">post</a>.</p>\n\n<p><br /></p>\n\n<p>Usually, multi-class classification will compute the logits $\\mathbf{z}$ for the input $x$, where $\\mathbf{z} = g_{\\theta}(x)$ followed by computing the softmax activation for $\\mathbf{z}$ to get the estimate of $\\mathbf{y}$, $\\tilde{\\mathbf{y}}$, where $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i = 1$ and $\\tilde{\\mathbf{y}}_i \\in [0, 1]$ for $i \\in [1, n]$. Concretely,</p>\n\n\\[\\begin{align}\nP(\\mathbf{y}_i = 1| x) &amp;= \\tilde{\\mathbf{y}}_i \\\\ \n&amp;= \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\\\\n\\end{align}\\]\n\n<p>The loss function used for fitting is called softmax loss.</p>\n\n\\[\\begin{align}\n\\mathscr{L}_{\\theta}(x,\\mathbf{y}) = \\sum_{i=1}^{n} - \\mathbf{y}_i \\log(\\tilde{\\mathbf{y}}_i) \\\\\n\\end{align}\\]\n\n<p>We further compute the derivative of this cross entropy loss with respect to the logits $\\mathbf{z}$.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &amp;= \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\sum_{j=1}^{n} - \\mathbf{y}_j \\log(\\tilde{\\mathbf{y}}_j) \\\\\n&amp;= -\\frac{\\mathbf{y}_i}{\\tilde{\\mathbf{y}}_i} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\mathbf{z}_i} \\tilde{\\mathbf{y}}_i &amp;= \\frac{\\partial}{\\partial \\mathbf{z}_i} \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\\\\n&amp;= \\frac{e^{\\mathbf{z}_i} \\sum_{j=1}^{n} e^{\\mathbf{z}_j} - e^{\\mathbf{z}_i} e^{\\mathbf{z}_i} }{\\big(\\sum_{j=1}^{n} e^{\\mathbf{z}_j}\\big)^2} \\\\\n&amp;= \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\frac{\\sum_{j=1}^{n} e^{\\mathbf{z}_j} - e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\\\\n&amp;= \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\bigg(1- \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\bigg) \\\\\n&amp;= \\tilde{\\mathbf{y}}_i (1- \\tilde{\\mathbf{y}}_i) \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\mathbf{z}_k} \\tilde{\\mathbf{y}}_i &amp;= \\frac{\\partial}{\\partial \\mathbf{z}_k} \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\\\\n&amp;= e^{\\mathbf{z}_i} (-1) \\big( \\sum_{j=1}^{n} e^{\\mathbf{z}_j} \\big)^{-2} e^{\\mathbf{z}_k} \\\\\n&amp;= - \\frac{e^{\\mathbf{z}_i}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\frac{e^{\\mathbf{z}_k}}{\\sum_{j=1}^{n} e^{\\mathbf{z}_j}} \\\\\n&amp;= - \\tilde{\\mathbf{y}}_i \\tilde{\\mathbf{y}}_k \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &amp;= \\sum_{i=1}^{n} \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\mathbf{z}_k} \\tilde{\\mathbf{y}}_i \\\\\n&amp;= \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\mathbf{z}_k} \\tilde{\\mathbf{y}}_k +  \\sum_{i \\neq k}^{} \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\mathbf{z}_k} \\tilde{\\mathbf{y}}_i \\\\\n&amp;= -\\frac{\\mathbf{y}_k}{\\tilde{\\mathbf{y}}_k} \\tilde{\\mathbf{y}}_k (1- \\tilde{\\mathbf{y}}_k) + \\sum_{i \\neq k}^{} \\big( -\\frac{\\mathbf{y}_i}{\\tilde{\\mathbf{y}}_i} \\big) \\big( - \\tilde{\\mathbf{y}}_i \\tilde{\\mathbf{y}}_k \\big) \\\\\n&amp;= -\\mathbf{y}_k ( 1- \\tilde{\\mathbf{y}}_k ) + \\sum_{i \\neq k}^{} \\big( -\\frac{\\mathbf{y}_i}{\\tilde{\\mathbf{y}}_i} \\big) \\big( - \\tilde{\\mathbf{y}}_i \\tilde{\\mathbf{y}}_k \\big) \\\\\n&amp;= \\tilde{\\mathbf{y}}_k \\mathbf{y}_k - \\mathbf{y}_k + \\sum_{i \\neq k}^{} \\mathbf{y}_i \\tilde{\\mathbf{y}}_k \\\\\n&amp;= \\tilde{\\mathbf{y}}_k \\mathbf{y}_k - \\mathbf{y}_k + \\tilde{\\mathbf{y}}_k \\sum_{i \\neq k}^{} \\mathbf{y}_i  \\\\\n&amp;= \\tilde{\\mathbf{y}}_k \\mathbf{y}_k - \\mathbf{y}_k + \\tilde{\\mathbf{y}}_k (1 - \\mathbf{y}_k)  \\\\\n&amp;= \\tilde{\\mathbf{y}}_k - \\mathbf{y}_k \\\\\n\\end{align}\\]\n\n<p>The interpretation is also very simple. If $\\tilde{\\mathbf{y}}_k &gt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &gt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ smaller. Once $\\mathbf{z}_k$ is smaller, $\\tilde{\\mathbf{y}}_k$ will be smaller and its deviation from $\\mathbf{y}_k$ will become smaller. Similarly, If $\\tilde{\\mathbf{y}}_k &lt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &lt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ larger. Once $\\mathbf{z}_k$ is larger, $\\tilde{\\mathbf{y}}_k$ will be larger and its deviation from $\\mathbf{y}_k$ will become smaller.</p>\n\n<p><br /></p>\n\n<p>To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x,\\mathbf{y})  &amp;= \\sum_{k=1}^{n} \\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\theta} \\mathbf{z}_k \\\\\n&amp;= \\sum_{k=1}^{n} (\\tilde{\\mathbf{y}}_k - \\mathbf{y}_k) \\frac{\\partial}{\\partial \\theta} \\mathbf{z}_k \\\\\n\\end{align}\\]\n\n<h3 id="cross-entropy-loss-for-multi-class-classification-vs-log-loss-for-logistic-regression">Cross Entropy Loss for Multi-Class Classification VS Log Loss for Logistic Regression</h3>\n\n<p>If we have $n = 2$ for cross entropy loss and compare it with log loss, we would immediately see that the form of log loss is exactly the same to binary cross entropy loss, and log loss for logistic regression is a special case for cross entropy loss for multi-class classification where $n = 2$ and the logit $z$ for the negative class ($y = 0$) is a fixed value $0$.</p>\n\n<p><br /></p>\n\n<p>So if we have a binary classification problem, what is the difference between modeling it using log loss for logistic regression and cross entropy loss for binary classification, assuming the learning rate and other hyperparameters are the same? We could see that the gradients with respect to the positive logit $z$ for both models are always the same. However, when it comes to updating the model parameters $\\theta$, the gradients for the two models would be different, because one model has only one logit whereas the other model has two logits. Therefore, although the two models are analogous, it is incorrect to say these two models are exactly the same.</p>\n\n<p><br /></p>\n\n<p>One may ask which model is better for a binary classification problem. It is hard to say. But one thing that is for sure is that the binary cross entropy model is relatively easy to overfit. The reasons are the followings:</p>\n\n<ul>\n  <li>The binary cross entropy model has more parameters compared to the logistic regression.</li>\n  <li>The binary cross entropy model would try to adjust the positive and negative logits simultaneously whereas the logistic regression would only adjust one logit and the other hidden logit is always $0$, resulting the difference between two logits larger in the binary cross entropy model much larger than that in the logistic regression model.</li>\n</ul>\n\n<p>To prevent overfitting, we could use <a href="https://leimao.github.io/blog/Label-Smoothing/">label smoothing</a> for cross entropy loss. I have discussed it previously and I am not going to elaborate it here.</p>\n\n<h3 id="sum-of-log-loss-for-multi-class-classification">Sum of Log Loss for Multi-Class Classification</h3>\n\n<p>While it might be rare, we could treat a multi-class classification problem as multiple one-vs-all classifications, each of which is a logistic regression. Given $(x, \\mathbf{y})$, where $x$ is the input, $\\mathbf{y}$ is the label for $x$. Our goal is to develop a model $f_{\\theta}$, where $\\theta$ are the model parameters, such that $\\tilde{\\mathbf{y}}_j = f_{\\theta}(x)$ is as close to $\\mathbf{y}_j$ as possible, for all $j \\in [1, n]$. Note that this is different from cross entropy loss for multi-class classification.</p>\n\n<p><br /></p>\n\n<p>Usually, multi-class classification will compute the logits $\\mathbf{z}$ for the input $x$, where $\\mathbf{z} = g_{\\theta}(x)$ followed by computing the sigmoid activation for each logit of $\\mathbf{z}$ to get the estimate of $\\mathbf{y}$, $\\tilde{\\mathbf{y}}$, where notably $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i$ and $\\sum_{i=1}^{n} \\mathbf{y}_i$ do not have to equal to 1, and $\\tilde{\\mathbf{y}}_i \\in [0, 1]$ for $i \\in [1, n]$. Concretely,</p>\n\n\\[\\begin{align}\nP(\\mathbf{y}_i = 1| x) &amp;= \\tilde{\\mathbf{y}}_i \\\\ \n&amp;= \\sigma(\\mathbf{z}_i) \\\\\n&amp;= \\frac{e^{\\mathbf{z}_i}}{e^{\\mathbf{z}_i} + 1} \\\\\n&amp;= \\frac{1}{1 + e^{-\\mathbf{z}_i}} \\\\\n\\end{align}\\]\n\n<p>The loss function used for fitting is called the sum of log loss. The classification of each class could be seen as mutually exclusive. TensorFlow has an implementation for this loss, which they call it <a href="https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_entropy_with_logits">tf.nn.sigmoid_cross_entropy_with_logits</a>, as well.</p>\n\n\\[\\begin{align}\n\\mathscr{L}_{\\theta}(x,\\mathbf{y}) = \\sum_{i=1}^{n} - \\mathbf{y}_i \\log(\\tilde{\\mathbf{y}}_i) - (1-\\mathbf{y}_i) \\log(1 - \\tilde{\\mathbf{y}}_i) \\\\\n\\end{align}\\]\n\n<p>We further compute the derivative of this sum of log loss with respect to the logits $\\mathbf{z}$. Because it is almost exactly the same to the derivative of log loss with respect to the logits $z$, we skipped some details.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &amp;= \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_i} \\sum_{i=1}^{n} - \\mathbf{y}_i \\log(\\tilde{\\mathbf{y}}_i) - (1-\\mathbf{y}_i) \\log(1 - \\tilde{\\mathbf{y}}_i) \\\\\n&amp;= \\frac{\\tilde{\\mathbf{y}}_i - \\mathbf{y}_i}{\\tilde{\\mathbf{y}}_i(1 - \\tilde{\\mathbf{y}}_i)} \\\\\n\\end{align}\\]\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\mathbf{z}_i} \\tilde{\\mathbf{y}}_i &amp;= \\frac{\\partial}{\\partial \\mathbf{z}_i} \\frac{1}{1 + e^{-\\mathbf{z}_i}} \\\\\n&amp;= \\tilde{\\mathbf{y}}_i(1 - \\tilde{\\mathbf{y}}_i) \\\\\n\\end{align}\\]\n\n<p>Therefore,</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &amp;=  \\frac{\\partial}{\\partial \\tilde{\\mathbf{y}}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\mathbf{z}_k} \\tilde{\\mathbf{y}}_k \\\\\n&amp;= \\tilde{\\mathbf{y}}_k - \\mathbf{y}_k \\\\\n\\end{align}\\]\n\n<p>The interpretation is the same as cross entropy loss for multi-class classification. If $\\tilde{\\mathbf{y}}_k &gt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &gt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ smaller. Once $\\mathbf{z}_k$ is smaller, $\\tilde{\\mathbf{y}}_k$ will be smaller and its deviation from $\\mathbf{y}_k$ will become smaller. Similarly, If $\\tilde{\\mathbf{y}}_k &lt; \\mathbf{y}_k$, $\\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) &lt; 0$, the gradient descent wants to make $\\mathbf{z}_k$ larger. Once $\\mathbf{z}_k$ is larger, $\\tilde{\\mathbf{y}}_k$ will be larger and its deviation from $\\mathbf{y}_k$ will become smaller.</p>\n\n<p><br /></p>\n\n<p>To update the model parameters $\\theta$, we would need to compute the derivatives with respect to $\\theta$.</p>\n\n\\[\\begin{align}\n\\frac{\\partial}{\\partial \\theta} \\mathscr{L}_{\\theta}(x,\\mathbf{y})  &amp;= \\sum_{k=1}^{n} \\frac{\\partial}{\\partial \\mathbf{z}_k} \\mathscr{L}_{\\theta}(x,\\mathbf{y}) \\frac{\\partial}{\\partial \\theta} \\mathbf{z}_k \\\\\n&amp;= \\sum_{k=1}^{n} (\\tilde{\\mathbf{y}}_k - \\mathbf{y}_k) \\frac{\\partial}{\\partial \\theta} \\mathbf{z}_k \\\\\n\\end{align}\\]\n\n<p>The formula is exactly the same as the one used for cross entropy loss for multi-class classification.</p>\n\n<h3 id="cross-entropy-loss-for-multi-class-classification-vs-sum-of-log-loss-for-multi-class-classification">Cross Entropy Loss for Multi-Class Classification VS Sum of Log Loss for Multi-Class Classification</h3>\n\n<p>Because we have seen that the gradient formula of cross entropy loss and sum of log loss are exactly the same, we wonder if there is any difference between the two.</p>\n\n<p><br /></p>\n\n<p>The answer is there is difference between the two, even if both models are doing multi-class classifications that there is only one label for one input. The clues lie in the values of $\\tilde{\\mathbf{y}}$.</p>\n\n<p><br /></p>\n\n<p>Assuming $\\mathbf{y}$ is an one-hot encoded vector, so $\\sum_{i=1}^{n} \\mathbf{y}_i = 1$. In cross entropy loss, $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i = 1$, whereas in sum of log loss, $\\sum_{i=1}^{n} \\tilde{\\mathbf{y}}_i \\neq 1$.</p>\n\n<p><br /></p>\n\n<p>We further assume $\\mathbf{z}$ is the same for both models. When $\\mathbf{z}_i &gt; \\log{\\frac{1}{n-1}}$ for $i \\in [1, n]$, it is easy to see that the $\\tilde{\\mathbf{y}}_i$ in the cross entropy loss model is smaller than the $\\tilde{\\mathbf{y}}_i$ in the sum of log loss model, for $i \\in [1, n]$.</p>\n\n<p><br /></p>\n\n<p>This means the gradient update gets more incentives from the sum of log loss model than the cross entropy loss model. What does it further mean? When the input has only one label as we already assumed that $\\mathbf{y}$ is an one-hot encoded vector, assuming $n$ is large, the sum of log loss model got more incentives from the negative classes than the cross entropy loss model, which will weaken the learning of positive class.</p>\n\n<p><br /></p>\n\n<p>Therefore, if all the assumptions above are true, we should use cross entropy loss for learning a single-label multi-class classification, instead of using sum of log loss.</p>\n\n<h3 id="multiple-labels-for-multi-class-classification">Multiple Labels for Multi-Class Classification</h3>\n\n<p>What if there are multiple labels for the multi-class classification. In the sum of log loss model, we could prepare labels $\\mathbf{y}_i = 1$, where $i$ belongs to the label classes. In the cross entropy loss model, due to the limitation of cross entropy model, an intuitive approach is to, assuming there are $k$ labels for one input, make the labels $\\mathbf{y}_i = \\frac{1}{k}$, where $i$ belongs to the label classes, and $\\sum_{i=1}^{n}\\mathbf{y}_i = 1$ is not changed.</p>\n\n<p><br /></p>\n\n<p>This time, the cross entropy loss is inferior compared to the sum of log loss model, because the model will not learn predicting confidently, especially when the number of labels $k$ is large. This is mainly restricted by the softmax activation function. In the sum of log loss model, the incentives of learn a positive class does not change as if it is still learning a single-label classification problem.</p>\n\n<p><br /></p>\n\n<p>OK, how about this. Given an input that has $k$ labels, instead of using one data point, we prepare $k$ data points whose inputs are exactly the same and the labels are one-hot labels representing each of the $k$ labels. It is actually equivalent to have one data point whose labels $\\mathbf{y}_i = \\frac{1}{k}$, where $i$ belongs to the label classes. I would leave it the user to find it out why this is the case. The hint is to use the expected value of the derivatives.</p>\n\n<p><br /></p>\n\n<p>Therefore, we should use sum of log loss for learning a multi-label multi-class classification, instead of using cross entropy loss.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://leimao.github.io/blog/Cross-Entropy-KL-Divergence-MLE/">Cross Entropy, KL Divergence, and Maximum Likelihood Estimation</a></li>\n</ul>\n\n\n  <p><a href="https://leimao.github.io/blog/Conventional-Classification-Loss-Functions/">Cross Entropy Loss VS Log Loss VS Sum of Log Loss</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on July 18, 2020.</p>	b92a7add7d986e0d78bc3bc1267311db4f663025	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:13.431808	0			'-1':688,727,734,1422,3076 '-2':731,1433 '0':507,520,566,831,871,1122,1734,1789,1974,1979,2175,2404,2742,2797 '1':509,511,567,573,584,586,587,626,629,671,674,683,685,694,696,705,723,724,728,736,737,743,747,748,752,754,755,761,800,805,1002,1109,1115,1123,1127,1136,1149,1177,1230,1275,1288,1305,1320,1329,1341,1354,1361,1369,1380,1412,1426,1445,1458,1491,1578,1610,1695,1854,1877,2314,2377,2386,2397,2405,2409,2418,2437,2439,2440,2499,2509,2514,2586,2596,2601,2618,2644,2645,2654,2862,2885,3022,3027,3034,3040,3049,3056,3074,3080,3117,3261,3303,3315,3320,3452 '18':3545 '2':1312,1913,1964 '2020':3546 'activ':551,1092,2356,3364 'actual':610,3439 'adjust':2152,2165 'align':224,300,570,591,616,633,650,709,711,765,768,812,915,948,1131,1156,1168,1188,1207,1249,1251,1386,1388,1473,1476,1707,1841,1894,2413,2446,2490,2520,2563,2624,2626,2660,2663,2707,2849,2902 'allow':149 'almost':2542 'alreadi':3154 'also':206,430,1711 'although':2072 'alway':2035,2174 'analog':2077 'answer':2972 'approach':3285 'art':55 'ask':2092 'assum':387,2008,3009,3059,3155,3166,3288 'assumpt':3201 'averag':427 'b':162,169 'base':199 'becom':855,895,1766,1821,2774,2829 'begin':223,569,615,649,710,767,914,1130,1167,1206,1250,1387,1475,1840,2412,2489,2562,2625,2662,2848 'behind':1045 'belong':514,525,3264,3307,3456 'better':2096 'big':237,243,288,298,310,316,376,386,666,677,751,758,1302,1311,1423,1432,1587,1596,1597,1606,1619,1628,1629,1638 'bigg':1360,1375 'binari':611,1939,1985,2006,2099,2117,2132,2145,2185 'blog':18,82,123,132,191,1064 'book':3542 'call':599,1164,2454,2480 'case':1952,3475 'certain':155,516,527 'chang':3323,3382 'check':179,188 'circumst':156 'class':104,116,517,528,955,1069,1901,1960,1972,2231,2244,2328,2333,2464,2720,2920,2928,2938,2988,3182,3196,3219,3233,3245,3268,3311,3379,3460,3503 'classif':58,78,105,117,956,965,1070,1902,1961,1986,2007,2100,2232,2245,2253,2329,2334,2461,2721,2921,2929,2939,2989,3220,3234,3246,3393,3504 'close':497,1029,2303 'clue':3000 'come':2041 'compar':1919,2139,3332 'complet':135 'comput':322,339,364,400,533,548,636,907,1072,1089,1191,1833,2336,2353,2523,2841 'concret':568,1129,2411 'confid':3347 'contribut':345,406 'copi':139 'could':72,205,2019,2202,2239,2465,3255 'cross':1,21,40,97,612,949,957,1042,1196,1895,1915,1940,1954,2002,2118,2133,2146,2186,2207,2322,2483,2714,2914,2922,2949,3029,3095,3136,3185,3208,3271,3280,3327,3508,3512,3520 'd':158,260,278 'data':348,390,409,3410,3415,3444 'deep':433,968 'deriv':153,195,211,324,341,402,638,909,1193,1835,2525,2548,2843,3486 'descent':834,874,1737,1792,2745,2800 'detail':2561 'develop':477,1007,2281 'deviat':851,891,1760,1815,2768,2823 'differ':1991,2056,2178,2320,2967,2976 'discuss':88,127,1060,2212 'distribut':395 'diverg':24,3515 'dt':166,177 'due':3275 'dx':159 'e':230,281,303,369,580,582,588,725,729,732,738,741,744,749,756,1143,1151,1269,1277,1282,1290,1294,1298,1307,1314,1322,1331,1335,1343,1348,1356,1363,1371,1406,1414,1418,1428,1434,1439,1447,1452,1460,2429,2433,2441,2646 'easi':2123,3084 'elabor':2221 'encod':3017,3164 'end':299,590,632,708,764,811,947,1155,1187,1248,1385,1472,1706,1893,2445,2519,2623,2659,2706,2901 'entir':327 'entropi':2,22,41,98,613,950,958,1043,1197,1896,1916,1941,1955,2003,2119,2134,2147,2187,2208,2323,2484,2715,2915,2923,2950,3030,3096,3137,3186,3209,3272,3281,3328,3509,3513,3521 'equal':2395 'equival':33,65,337,3440 'especi':3348 'estim':28,69,557,1049,1099,2366,3519 'even':2980 'exact':1935,2087,2543,2906,2958,3420 'exclus':2470 'expect':197,214,219,366,3482 'f':163,174,480,492,1010,1024,2284,2298 'find':3468 'fit':597,1162,2452 'fix':1977 'follow':362,423,546,1087,2130,2351 'form':1930 'formula':2904,2947 'frac':157,170,225,244,269,289,377,579,585,651,661,678,682,689,693,699,712,718,722,735,740,746,753,769,778,788,794,822,862,916,925,934,942,1142,1208,1221,1240,1252,1262,1268,1281,1313,1326,1347,1362,1389,1399,1405,1438,1451,1477,1493,1506,1516,1529,1543,1556,1566,1588,1620,1722,1777,1842,1856,1868,1886,2428,2438,2564,2577,2606,2627,2637,2643,2664,2676,2689,2730,2785,2850,2864,2876,2894,3073,3302,3451 'framework':435 'function':320,594,1159,2449,3365 'g':543,1084,2348 'get':555,1097,2364,3124 'given':459,970,2261,3399 'go':2219 'goal':474,1004,2278 'got':3176 'gradient':833,873,1736,1791,2023,2049,2744,2799,2946,3122 'hard':2104 'heavili':128 'hidden':2171 'hint':3477 'hot':993,3016,3163,3429 'howev':70,2038 'hyperparamet':2014 'immedi':1926 'implement':2474 'incent':3126,3178,3374 'incorrect':2080 'inferior':3331 'input':466,539,978,1079,2269,2343,2998,3147,3295,3401,3418 'insid':212 'instanc':222 'instead':3221,3406,3505 'int':160,167,248,262 'integr':144,147,185,202 'interpret':814,1709,2709 'introduct':12 'intuit':3284 'j':1148,1154,1229,1234,1239,1274,1280,1287,1293,1304,1310,1319,1325,1328,1334,1340,1346,1353,1359,1368,1374,1411,1417,1425,1431,1444,1450,1457,1463,2297,2307,2312 'juli':3544 'k':1394,1404,1437,1455,1471,1482,1511,1522,1534,1538,1542,1561,1569,1573,1577,1582,1586,1605,1609,1614,1618,1637,1642,1645,1648,1652,1659,1663,1666,1669,1673,1677,1684,1687,1690,1694,1698,1702,1705,1718,1721,1727,1743,1748,1754,1764,1773,1776,1782,1798,1803,1809,1819,1853,1861,1874,1876,1882,1885,1892,2669,2682,2694,2698,2702,2705,2726,2729,2735,2751,2756,2762,2772,2781,2784,2790,2806,2811,2817,2827,2861,2869,2882,2884,2890,2893,2900,3291,3304,3354,3404,3414,3435,3453 'kl':23,3514 'l':239,256,274,294,312,351,382,412,618,657,774,784,827,867,921,930,1170,1216,1484,1501,1524,1551,1729,1784,1847,1863,2492,2572,2671,2684,2737,2792,2855,2871 'label':470,983,2204,2274,2995,3151,3216,3229,3240,3257,3267,3292,3298,3310,3353,3392,3405,3425,3430,3436,3447,3459,3500 'larg':3169,3356 'larger':879,883,888,1799,1805,1812,2182,2190,2807,2813,2820 'later':606 'learn':57,434,969,2010,3193,3212,3345,3376,3388,3496 'leav':3463 'lei':3535,3538 'leibniz':143,146,184,201 'lie':3001 'like':86 'likelihood':27,68,1048,3518 'limit':249,263,3278 'log':5,10,90,110,442,447,600,623,628,641,668,673,1182,1235,1904,1922,1932,1944,1996,2226,2458,2504,2513,2530,2550,2591,2600,2933,2955,3045,3072,3111,3131,3173,3226,3251,3337,3370,3493,3524,3529,3541 'logist':94,445,453,503,530,1907,1947,1999,2142,2161,2195,2259 'logit':535,647,1074,1203,1967,2029,2063,2070,2157,2167,2172,2181,2338,2359,2486,2536,2556 'long':457 'loss':3,6,11,42,75,91,99,111,319,328,344,405,443,448,593,601,614,642,951,959,1044,1158,1166,1198,1897,1905,1917,1923,1933,1942,1945,1956,1997,2004,2209,2227,2324,2448,2459,2477,2531,2551,2716,2916,2924,2934,2951,2956,3031,3046,3097,3112,3132,3138,3174,3187,3210,3227,3252,3273,3329,3338,3371,3494,3510,3522,3525,3530 'machin':56 'made':137 'main':60,3359 'make':837,877,1740,1795,2748,2803,3296 'mao':3536,3539 'mathbb':229,280,302,368 'mathbf':972,979,987,999,1021,1031,1075,1082,1094,1101,1104,1112,1118,1133,1139,1144,1152,1173,1179,1184,1204,1212,1219,1225,1232,1237,1241,1245,1255,1259,1265,1270,1278,1283,1291,1295,1299,1308,1315,1323,1332,1336,1344,1349,1357,1364,1372,1377,1382,1392,1396,1402,1407,1415,1419,1429,1435,1440,1448,1453,1461,1465,1469,1480,1487,1497,1504,1509,1513,1520,1527,1532,1536,1547,1554,1559,1563,1567,1571,1575,1580,1589,1593,1599,1603,1607,1612,1621,1625,1631,1635,1640,1643,1646,1653,1657,1661,1664,1667,1671,1678,1682,1685,1688,1692,1696,1700,1703,1716,1719,1725,1732,1741,1746,1752,1762,1771,1774,1780,1787,1796,1801,1807,1817,1850,1859,1866,1872,1880,1883,1890,2263,2270,2295,2305,2339,2346,2361,2368,2371,2380,2388,2400,2415,2421,2425,2430,2434,2442,2495,2501,2506,2510,2516,2537,2568,2575,2581,2588,2593,2597,2603,2608,2611,2615,2620,2630,2634,2640,2647,2651,2656,2667,2674,2680,2687,2692,2696,2700,2703,2724,2727,2733,2740,2749,2754,2760,2770,2779,2782,2788,2795,2804,2809,2815,2825,2858,2867,2874,2880,2888,2891,2898,3007,3010,3024,3037,3052,3060,3069,3090,3104,3157,3258,3299,3317,3448 'mathscr':238,255,273,293,311,350,381,411,617,656,773,783,826,866,920,929,1169,1215,1483,1500,1523,1550,1728,1783,1846,1862,2491,2571,2670,2683,2736,2791,2854,2870 'maximum':26,67,1047,3517 'may':2091 'mean':512,521,3120,3144 'might':1051,2235 'model':59,479,486,900,1009,1016,1826,1993,2033,2045,2053,2059,2067,2075,2085,2094,2120,2135,2148,2188,2197,2283,2290,2834,2983,3067,3098,3113,3133,3139,3175,3188,3253,3274,3282,3339,3342,3372 'modern':432 'motiv':1039 'move':207 'much':2189 'multi':103,115,954,1068,1900,1959,2230,2243,2327,2332,2719,2919,2927,2937,2987,3218,3232,3244,3499,3502 'multi-class':102,114,953,1067,1899,1958,2229,2242,2326,2331,2718,2918,2926,2936,2986,3217,3231,3243,3501 'multi-label':3498 'multipl':2248,3228,3239 'mutual':2469 'n':997,1110,1128,1150,1178,1231,1276,1289,1306,1321,1330,1342,1355,1370,1413,1427,1446,1459,1492,1855,1878,1912,1963,2315,2378,2387,2410,2500,2587,2863,2886,3023,3035,3050,3075,3081,3118,3167,3316 'need':905,1831,2839 'negat':1971,2156,3181 'neq':1541,1585,1617,1651,1676,3055 'notabl':2374 'note':1036,2316 'number':3351 'obvious':1054 'ok':3395 'one':14,189,992,2058,2062,2090,2108,2166,2250,2911,2994,2997,3015,3150,3162,3294,3409,3428,3443 'one-hot':991,3014,3161,3427 'one-vs-al':2249 'optim':39,62 'origin':3532 'outsid':217 'overfit':2125,2200 'p':234,252,266,285,307,373,571,1132,2414 'paramet':333,359,420,487,901,1017,1827,2046,2138,2291,2835 'partial':171,172,226,227,245,246,270,271,290,291,378,379,652,653,662,663,713,714,719,720,770,771,779,780,789,790,823,824,863,864,917,918,926,927,935,936,943,944,1209,1210,1222,1223,1253,1254,1263,1264,1390,1391,1400,1401,1478,1479,1494,1495,1507,1508,1517,1518,1530,1531,1544,1545,1557,1558,1723,1724,1778,1779,1843,1844,1857,1858,1869,1870,1887,1888,2565,2566,2578,2579,2628,2629,2638,2639,2665,2666,2677,2678,2690,2691,2731,2732,2786,2787,2851,2852,2865,2866,2877,2878,2895,2896 'pleas':187 'point':349,410,3411,3416,3445 'posit':151,209,2028,2154,3195,3378 'possibl':501,1035,2309 'post':19,83,124,133,192,1065 'predict':3346 'prepar':3256,3413 'prerequisit':118,120 'prevent':2199 'previous':17,1063,2214 'problem':79,966,1987,2101,2246,3394 'proof':182 'publish':3533 'pytorch':440 'quick':181 'rang':564 'rare':2237 'rate':2011 'reason':2127 'refer':3511 'regress':95,446,454,504,531,1908,1948,2000,2143,2162,2196,2260 'relat':2122 'repres':3431 'respect':330,356,417,644,911,1200,1837,2025,2533,2553,2845 'restrict':3360 'result':2176 'rule':145,148,186,203 'say':2082,2106 'see':605,1056,1927,2020,3086 'seen':2467,2943 'shown':31 'sigma':577,2424 'sigmoid':550,2355 'sim':233,284,306,372 'similar':857,1768,2776 'simpl':817,1713 'simpli':398 'simultan':2158 'singl':3215,3391 'single-label':3214,3390 'size':996 'skip':2559 'smaller':839,843,848,856,896,1744,1750,1757,1767,1822,2752,2758,2765,2775,2830,3100 'smooth':2205 'softmax':1091,1165,3363 'special':1951 'state':52 'state-of-the-art':51 'still':3387 'sum':8,108,1107,1147,1175,1228,1273,1286,1303,1318,1327,1339,1352,1367,1410,1424,1443,1456,1489,1539,1583,1615,1649,1674,1852,1875,2224,2375,2384,2456,2497,2528,2584,2860,2883,2931,2953,3020,3032,3043,3047,3109,3129,3171,3224,3249,3313,3335,3368,3491,3527 'sure':2113 'swap':150 'take':425 'tensorflow':438,2471 'tf.nn.sigmoid':2482 'therefor':766,1474,2071,2661,3197,3487 'theta':228,240,247,257,272,275,292,295,313,334,352,360,380,383,413,421,481,483,493,544,619,658,775,785,828,868,902,913,919,922,931,937,945,1011,1013,1025,1085,1171,1217,1485,1502,1525,1552,1730,1785,1828,1839,1845,1848,1864,1871,1889,2047,2285,2287,2299,2349,2493,2573,2672,2685,2738,2793,2836,2847,2853,2856,2872,2879,2897 'thing':37,2109 'three':36 'tild':490,560,575,624,630,654,664,669,675,680,686,691,697,700,703,706,716,759,762,781,792,795,798,801,803,806,808,819,844,859,884,939,1020,1103,1111,1117,1138,1183,1211,1224,1236,1244,1258,1376,1381,1395,1464,1468,1496,1512,1519,1535,1546,1562,1570,1574,1579,1592,1598,1602,1611,1624,1630,1634,1639,1656,1660,1670,1681,1691,1699,1715,1751,1770,1806,1879,2294,2370,2379,2399,2420,2505,2515,2567,2580,2592,2602,2607,2614,2619,2633,2650,2655,2679,2695,2699,2723,2759,2778,2814,2887,3006,3036,3051,3089,3103 'time':458,3325 'treat':2240 'tri':2150 'true':3204 'two':2052,2069,2074,2084,2180,2970,2979 'uniform':394 'updat':898,1824,2043,2832,3123 'use':46,76,92,100,112,451,595,963,1041,1160,1995,2203,2450,2912,3207,3223,3408,3480,3490,3507 'user':3466 'usual':505,529,1066,2330 'valu':198,215,220,367,1978,3004,3483 'vector':994,3018,3165 'vs':4,7,1903,2251,2930,3523,3526 'want':835,875,1738,1793,2746,2801 'weaken':3191 'well':2488 'wherea':518,2064,2159,3041 'whose':3417,3446 'wide':45,962 'wonder':2962 'work':441 'would':85,604,904,1830,1925,2054,2149,2163,2838,3462 'x':164,173,175,231,235,241,250,253,258,264,267,276,282,286,296,304,308,314,353,370,374,384,391,414,460,463,472,494,513,522,540,545,574,620,659,776,786,829,869,923,932,971,975,985,1026,1080,1086,1137,1172,1218,1486,1503,1526,1553,1731,1786,1849,1865,2262,2266,2276,2300,2344,2350,2419,2494,2574,2673,2686,2739,2794,2857,2873 'xy':261,279 'y':232,236,242,251,254,259,265,268,277,283,287,297,305,309,315,354,371,375,385,392,415,461,467,491,499,506,510,519,559,561,572,576,621,622,625,627,631,655,660,665,667,670,672,676,679,681,684,687,690,692,695,698,701,702,704,707,717,760,763,777,782,787,793,796,797,799,802,804,807,809,810,820,821,830,845,853,860,861,870,885,893,924,933,940,941,973,980,988,1000,1022,1032,1102,1105,1113,1119,1134,1140,1174,1180,1185,1213,1220,1226,1233,1238,1242,1246,1260,1378,1383,1397,1466,1470,1488,1498,1505,1514,1521,1528,1537,1548,1555,1564,1568,1572,1576,1581,1590,1594,1600,1604,1608,1613,1622,1626,1632,1636,1641,1644,1647,1654,1658,1662,1665,1668,1672,1679,1683,1686,1689,1693,1697,1701,1704,1717,1720,1733,1753,1763,1772,1775,1788,1808,1818,1851,1867,1881,1884,1973,2264,2271,2296,2306,2369,2372,2381,2389,2401,2416,2422,2496,2502,2507,2511,2517,2569,2576,2582,2589,2594,2598,2604,2609,2612,2616,2621,2635,2652,2657,2675,2681,2688,2697,2701,2704,2725,2728,2741,2761,2771,2780,2783,2796,2816,2826,2859,2875,2889,2892,3008,3011,3025,3038,3053,3091,3105,3158,3259,3300,3318,3449 'z':536,542,553,578,581,583,589,648,715,721,726,730,733,739,742,745,750,757,772,791,825,838,841,865,878,881,928,938,946,1076,1083,1095,1145,1153,1205,1256,1266,1271,1279,1284,1292,1296,1300,1309,1316,1324,1333,1337,1345,1350,1358,1365,1373,1393,1403,1408,1416,1420,1430,1436,1441,1449,1454,1462,1481,1510,1533,1560,1726,1742,1747,1781,1797,1802,1860,1873,1891,1968,2030,2340,2347,2362,2426,2431,2435,2443,2538,2557,2631,2641,2648,2668,2693,2734,2750,2755,2789,2805,2810,2868,2881,2899,3061,3070	en	Lei Mao
835	Htop 3.0	{"ver":2,"uid":1,"hash":"SHA1:7194e31b07aca587a6725ccbcb3e71dd4fa20781"}	https://github.com/htop-dev/htop/blob/master/ChangeLog	2020-09-01 18:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24341867"> https://news.ycombinator.com/item?id=24341867 </a>	a21f89967f249228fd7ed876d5f9a9a5b4f2cbe0	\N	f	2020-09-01 18:10:00	2020-09-03 18:10:09.054	0			'/item?id=24341867':6 '3.0':2 'comment':3 'htop':1 'news.ycombinator.com':5 'news.ycombinator.com/item?id=24341867':4	zh	DINKDINK
171	Application Focused API Design	{"ver":2,"uid":1,"hash":"SHA1:3c4a3de7e5f9c3a85f3515d67e36e4d1205b6b4f"}	https://www.ardanlabs.com/blog/2016/11/application-focused-api-design.html	2016-11-03 00:00:00	“I think it&rsquo;s ok to do heinous stuff to test an API if it makes it more usable by others.” - Nate Finch\nPrelude If you are new to Go, it might help to read these posts first before continuing on with this post.\nhttps://ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html\nhttps://ardanlabs.com/blog/2015/09/composition-with-go.html\nhttps://ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html\nhttps://ardanlabs.com/blog/2016/10/avoid-interface-pollution.html\nIntroduction Packages exists to help provide support for specific problems that are commonly found in the different applications we are building. A package API should be intuitive and simple to use so application developers can focus on their concerns and hopefully develop their applications faster.	608fac8a41a6d2117df8b5815998017ec8af7549	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.485954	0			'/blog/2014/05/methods-interfaces-and-embedded-types.html':51 '/blog/2015/09/composition-with-go.html':54 '/blog/2016/10/avoid-interface-pollution.html':60 '/blog/2016/10/reducing-type-hierarchies.html':57 'api':3,17,84 'applic':1,78,93,104 'ardanlabs.com':50,53,56,59 'ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html':49 'ardanlabs.com/blog/2015/09/composition-with-go.html':52 'ardanlabs.com/blog/2016/10/avoid-interface-pollution.html':58 'ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html':55 'build':81 'common':73 'concern':99 'continu':44 'design':4 'develop':94,102 'differ':77 'exist':63 'faster':105 'finch':27 'first':42 'focus':2,96 'found':74 'go':34 'heinous':12 'help':37,65 'hope':101 'introduct':61 'intuit':87 'make':20 'might':36 'nate':26 'new':32 'ok':9 'other':25 'packag':62,83 'post':41,48 'prelud':28 'problem':70 'provid':66 'read':39 'simpl':89 'specif':69 'stuff':13 'support':67 'test':15 'think':6 'usabl':23 'use':91	en	
868	Russia opposition leader poisoned with Novichok	{"ver":2,"uid":1,"hash":"SHA1:035702bd236200c3e5adf14c6dd34210e6ea9a47"}	https://www.bbc.com/news/world-europe-54002880	2020-09-02 18:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24354265"> https://news.ycombinator.com/item?id=24354265 </a>	8272d98eff4467d583cfe6f3741ddfc2c5201811	\N	f	2020-09-02 18:10:00	2020-09-06 22:10:10.340227	0			'/item?id=24354265':10 'comment':7 'leader':3 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24354265':8 'novichok':6 'opposit':2 'poison':4 'russia':1	zh	amai
867	Most-favorited Hacker News posts	{"ver":2,"uid":1,"hash":"SHA1:927715d0ef5522e3e83b19bfc41e38a22e914bb5"}	https://observablehq.com/@tomlarkworthy/hacker-favourites-analysis	2020-09-02 20:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24351073"> https://news.ycombinator.com/item?id=24351073 </a>	0b58addced3ef646d31df946af13178be05e2c6f	\N	f	2020-09-02 16:10:00	2020-09-04 19:10:08.972217	0			'/item?id=24351073':10 'comment':7 'favorit':3 'hacker':4 'most-favorit':1 'news':5 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24351073':8 'post':6	zh	tlarkworthy
1017	面试：为了进阿里，重新翻阅了 Volatile 与 Synchronized	{"ver":2,"uid":1,"hash":"SHA1:bd65da9400df184f0398b43cb2808f0dfe0dc59e"}	https://toutiao.io/k/mk7xzsn	2020-09-07 02:10:16	面试：为了进阿里，重新翻阅了 Volatile 与 Synchronized	498727b2b32cfe32518da38290d6b049841ce983	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:09.991827	0			'synchronized':6,12 'volatile':4,10 '与':5,11 '为了进阿里':2,8 '重新翻阅了':3,9 '面试':1,7	zh	
1022	网络安全逐渐成为程序员的必备技能	{"ver":2,"uid":1,"hash":"SHA1:68f9f53e6c0bcd910e50dbf934a6b524bd07afd9"}	https://toutiao.io/k/9rtsqxv	2020-09-07 02:10:16	网络安全逐渐成为程序员的必备技能	300d37731dcac86cff50e6873d169a7a2867de3d	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:09.996748	0			'网络安全逐渐成为程序员的必备技能':1,2	zh	
1018	ClickHouse 权限控制与资源隔离	{"ver":2,"uid":1,"hash":"SHA1:469a59ecf1431f7a5cf7f74280c0477126bf0e83"}	https://toutiao.io/k/287bztx	2020-09-07 02:10:16	ClickHouse 权限控制与资源隔离	bff54331d3f7bbcd4d0055e816680751000d6a81	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.009988	0			'clickhouse':1,3 '权限控制与资源隔离':2,4	zh	
1014	领域驱动设计框架 Axon 实践	{"ver":2,"uid":1,"hash":"SHA1:4558022a7ab8bf36f30b032652251e9b71bf860c"}	https://toutiao.io/k/bt4aqb4	2020-09-07 02:10:16	领域驱动设计框架 Axon 实践	fbce88e46b3ddc101f1c1f4b408ad6721e7f36e4	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:09.999025	0			'axon':2,5 '实践':3,6 '领域驱动设计框架':1,4	zh	
1015	[译] 在 Vue 组件中分离 UI 和业务逻辑	{"ver":2,"uid":1,"hash":"SHA1:cabad7f3730f2876a65b4ae517bdee36655051d8"}	https://toutiao.io/k/jyc9f3g	2020-09-07 02:10:16	[译] 在 Vue 组件中分离 UI 和业务逻辑	893438b1203acfc80431c4e20ce5d1577ba8c211	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.003462	0			'ui':5,11 'vue':3,9 '和业务逻辑':6,12 '在':2,8 '组件中分离':4,10 '译':1,7	zh	
1019	又踩到 Dubbo 的坑，但是这次我笑不出来	{"ver":2,"uid":1,"hash":"SHA1:505632e601705b6a9fab90a97f170210486ba80b"}	https://toutiao.io/k/99gskfi	2020-09-07 02:10:16	又踩到 Dubbo 的坑，但是这次我笑不出来	3dd09eabb37640ac2e82c5f617bcb18b9258e85d	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.00575	0			'dubbo':2,6 '但是这次我笑不出来':4,8 '又踩到':1,5 '的坑':3,7	zh	
1016	两个流程链路问题的排查和总结	{"ver":2,"uid":1,"hash":"SHA1:fb8e0710ddc43554065520c70630b1a3b502b6e5"}	https://toutiao.io/k/vqqtl71	2020-09-07 02:10:16	两个流程链路问题的排查和总结	4ce71b7ce030a69ea80c96250c2f95de99ee76a7	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.007777	0			'两个流程链路问题的排查和总结':1,2	zh	
1020	[译] ​Python 中的数字到底是什么？	{"ver":2,"uid":1,"hash":"SHA1:494f71e457e8b1182288a8bf0a3d44c620f28ce0"}	https://toutiao.io/k/h8f33ey	2020-09-07 02:10:16	[译] ​Python 中的数字到底是什么？	52d87a50e1457ab58793a37b9a1fdbd3ba15be00	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.014197	0			'python':2,5 '中的数字到底是什么':3,6 '译':1,4	zh	
1021	Kotlin 1.4 中的语法改动	{"ver":2,"uid":1,"hash":"SHA1:0ac5e4b58d40c94360a9ec653c6e362bdb69f208"}	https://toutiao.io/k/x4cevzl	2020-09-07 02:10:16	Kotlin 1.4 中的语法改动	09838413d65d0928f56a228a7cd59b5ed0cd7c5c	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.02037	0			'1.4':2,5 'kotlin':1,4 '中的语法改动':3,6	zh	
185	Ice Cream Makers and Data Races Part II	{"ver":2,"uid":1,"hash":"SHA1:0f396527c5ef1f89da5ce4d58e5dd5e92750bfe6"}	https://www.ardanlabs.com/blog/2014/06/ice-cream-makers-and-data-races-part-ii.html	2014-06-27 00:00:00	Introduction\nDave Cheney published a post called Ice Cream Makers and Data Races. The post showed an example of an interesting data race that can occur when using an interface typed variable to make a method call. If you have not read the post yet please do. Once you read the post you will discover that the problem lies with the fact that an interface value is implemented internally using a two word header and that the Go memory model states only writes to a single word are atomic.	bb561538d28376df347fc018444d112edc002589	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.513088	0			'atom':97 'call':15,45 'cheney':11 'cream':2,17 'data':5,20,30 'dave':10 'discov':63 'exampl':26 'fact':70 'go':86 'header':82 'ice':1,16 'ii':8 'implement':76 'interest':29 'interfac':38,73 'intern':77 'introduct':9 'lie':67 'make':42 'maker':3,18 'memori':87 'method':44 'model':88 'occur':34 'part':7 'pleas':54 'post':14,23,52,60 'problem':66 'publish':12 'race':6,21,31 'read':50,58 'show':24 'singl':94 'state':89 'two':80 'type':39 'use':36,78 'valu':74 'variabl':40 'word':81,95 'write':91 'yet':53	en	
198	Macro View of Map Internals In Go	{"ver":2,"uid":1,"hash":"SHA1:bdad64a7572bfcc7cf69947499ccbdf86bbda21f"}	https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html	2013-12-31 00:00:00	Introduction\nThere are lots of posts that talk about the internals of slices, but when it comes to maps, we are left in the dark. I was wondering why and then I found the code for maps and it all made sense.\nhttps://golang.org/src/runtime/hashmap.go\nAt least for me, this code is complicated. That being said, I think we can create a macro view of how maps are structured and grow. This should explain why they are unordered, efficient and fast.	03b0f8f499173b5047422f96f019c1a2fea242ba	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.538485	0			'/src/runtime/hashmap.go':52 'code':42,58 'come':24 'complic':60 'creat':68 'dark':32 'effici':86 'explain':81 'fast':88 'found':40 'go':7 'golang.org':51 'golang.org/src/runtime/hashmap.go':50 'grow':78 'intern':5,18 'introduct':8 'least':54 'left':29 'lot':11 'macro':1,70 'made':48 'map':4,26,44,74 'post':13 'said':63 'sens':49 'slice':20 'structur':76 'talk':15 'think':65 'unord':85 'view':2,71 'wonder':35	en	
1024	[译] 深入理解 Cilium 的 eBPF 收发包路径 (datapath) (KubeCon, 2019)	{"ver":2,"uid":1,"hash":"SHA1:bba2a1aa0d9d6f35a2867774b5a55a315c8f6e80"}	https://toutiao.io/k/p6kmth2	2020-09-07 02:10:16	[译] 深入理解 Cilium 的 eBPF 收发包路径 (datapath) (KubeCon, 2019)	8c70350fecbe1ed05a6e78e6bb9a27627d9bfbf0	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.016265	0			'2019':9,18 'cilium':3,12 'datapath':7,16 'ebpf':5,14 'kubecon':8,17 '收发包路径':6,15 '深入理解':2,11 '的':4,13 '译':1,10	zh	
1025	在 React 中实现 keep alive	{"ver":2,"uid":1,"hash":"SHA1:134ad360f9329bcc6681dcc2e8aadf95848ef8a5"}	https://toutiao.io/k/hc1mxsu	2020-09-07 02:10:16	在 React 中实现 keep alive	2408f9de73a930b241e5104f14550ddc02f76725	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.022356	0			'alive':5,10 'keep':4,9 'react':2,7 '中实现':3,8 '在':1,6	zh	
784	Python AsyncIO: Asynchronous IO	{"ver":2,"uid":1,"hash":"SHA1:5e621a89ac31b504a91d0b7dcd282f61b1a78cf1"}	https://leimao.github.io/blog/Python-AsyncIO-Asynchronous-IO/	2020-09-02 17:10:09	<h3 id="introduction">Introduction</h3>\n\n<p>Because breaking tasks into pieces and scheduling to run them asynchronously introduce runtime overheads, if the asynchronous program does not have too much I/O time to be saved from <code class="language-plaintext highlighter-rouge">asyncio</code>, the performance of executing those tasks asynchronously will be worse than executing those tasks synchronously. This means asynchronous I/O is the most important part of single-thread asynchronous application.</p>\n\n<p><br /></p>\n\n<p>The question is how does <code class="language-plaintext highlighter-rouge">asyncio</code> save I/O time? A quick metaphor will be as follows. I have a candy factory and there are three production lines producing candies one by one. The candies from the production line will drop to the ground at the end of the production line, but dropping the candies to the ground will contaminate the candies. Unfortunately, I only got one worker to collect candies into the box. What’s his best strategy to collect as many candies as possible? Typically, he could have two strategies.</p>\n\n<ul>\n  <li>Collecting candies at one production line at one time.</li>\n  <li>Placing a box at the end of each production line. Rotating between the production lines from time to time and collecting the candies from the boxes.</li>\n</ul>\n\n<p>Obviously, smart people will choose the second strategy. Basically, this first strategy is the single-thread synchronous application, and the second strategy is the single-thread asynchronous application.</p>\n\n<p><br /></p>\n\n<p>In this blog post, I would like to discuss the asynchronous of IO for Python asynchronous programming using <code class="language-plaintext highlighter-rouge">asyncio</code>.</p>\n\n<h3 id="asynchronous-sleep">Asynchronous Sleep</h3>\n\n<p>A common I/O-bound task includes the <code class="language-plaintext highlighter-rouge">sleep</code> function. Using the synchronous and blocking <code class="language-plaintext highlighter-rouge">time.sleep</code>, we would have to wait and be blocked for whatever seconds we specified before it is returned.</p>\n\n<p><br /></p>\n\n<p>In <code class="language-plaintext highlighter-rouge">asyncio</code>, we also have an asynchronous version of the <code class="language-plaintext highlighter-rouge">sleep</code> coroutine function, <code class="language-plaintext highlighter-rouge">asyncio.sleep</code>. By scheduling the coroutine to the event loop, during the sleep duration, we are not blocked from doing something else. Here is how <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/tasks.py#L638"><code class="language-plaintext highlighter-rouge">asyncio.sleep</code></a> is implemented.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">,</span> <span class="n">result</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n    <span class="s">"""Coroutine that completes after a given time (in seconds)."""</span>\n    <span class="k">if</span> <span class="n">delay</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>\n        <span class="k">await</span> <span class="n">__sleep0</span><span class="p">()</span>\n        <span class="k">return</span> <span class="n">result</span>\n\n    <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n        <span class="n">loop</span> <span class="o">=</span> <span class="n">events</span><span class="p">.</span><span class="n">get_running_loop</span><span class="p">()</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="n">warnings</span><span class="p">.</span><span class="n">warn</span><span class="p">(</span><span class="s">"The loop argument is deprecated since Python 3.8, "</span>\n                      <span class="s">"and scheduled for removal in Python 3.10."</span><span class="p">,</span>\n                      <span class="nb">DeprecationWarning</span><span class="p">,</span> <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>\n\n    <span class="n">future</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="n">create_future</span><span class="p">()</span>\n    <span class="n">h</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="n">call_later</span><span class="p">(</span><span class="n">delay</span><span class="p">,</span>\n                        <span class="n">futures</span><span class="p">.</span><span class="n">_set_result_unless_cancelled</span><span class="p">,</span>\n                        <span class="n">future</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>\n    <span class="k">try</span><span class="p">:</span>\n        <span class="k">return</span> <span class="k">await</span> <span class="n">future</span>\n    <span class="k">finally</span><span class="p">:</span>\n        <span class="n">h</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>\n</code></pre></div></div>\n\n<p>Surprisingly, it is very simple. We create a <code class="language-plaintext highlighter-rouge">Future</code> and use a <code class="language-plaintext highlighter-rouge">callback</code> to set the value for this <code class="language-plaintext highlighter-rouge">Future</code> after some sleep duration <code class="language-plaintext highlighter-rouge">delay</code>. Once the result of <code class="language-plaintext highlighter-rouge">Future</code> got set, the sleep is over. During the the sleep duration <code class="language-plaintext highlighter-rouge">delay</code>, the event loop could schedule some other <code class="language-plaintext highlighter-rouge">callbacks</code> to do other tasks. It should be noted that such sleep duration is not precise in practice, due to the nature of event loop scheduling. For instance, if somehow the event loop scheduled a <code class="language-plaintext highlighter-rouge">callback</code> that takes extremely long to finish during the sleep duration, the actual sleep time would be much longer than what we were expecting. For example,</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n<span class="kn">import</span> <span class="nn">time</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">block_func</span><span class="p">(</span><span class="n">block_duration</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>\n\n    <span class="c1"># Blocking the event loop for 5 seconds\n</span>    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">block_duration</span><span class="p">)</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">sleep_func</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>\n\n    <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>\n    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="o">=</span><span class="n">sleep_duration</span><span class="p">)</span>\n    <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>\n    <span class="n">elapsed_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>\n\n    <span class="k">print</span><span class="p">(</span><span class="s">"Expected asynchronous sleep duration: {:.2f}s."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">))</span>\n    <span class="k">print</span><span class="p">(</span><span class="s">"Actual asynchronous sleep duration: {:.2f}s."</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">elapsed_time</span><span class="p">))</span>\n\n<span class="n">block_duration</span> <span class="o">=</span> <span class="mi">5</span>\n<span class="n">sleep_duration</span> <span class="o">=</span> <span class="mi">1</span>\n\n<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n\n<span class="k">print</span><span class="p">(</span><span class="s">"="</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"Scheduled blocking first..."</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"-"</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>\n<span class="n">loop</span><span class="p">.</span><span class="n">run_until_complete</span><span class="p">(</span>\n    <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span>\n        <span class="n">block_func</span><span class="p">(</span><span class="n">block_duration</span><span class="p">),</span>\n        <span class="n">sleep_func</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">),</span>\n    <span class="p">)</span>\n<span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"="</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"Scheduled sleeping first..."</span><span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"-"</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>\n<span class="n">loop</span><span class="p">.</span><span class="n">run_until_complete</span><span class="p">(</span>\n    <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span>\n        <span class="n">sleep_func</span><span class="p">(</span><span class="n">sleep_duration</span><span class="p">),</span>\n        <span class="n">block_func</span><span class="p">(</span><span class="n">block_duration</span><span class="p">),</span>\n    <span class="p">)</span>\n<span class="p">)</span>\n<span class="k">print</span><span class="p">(</span><span class="s">"="</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>\n</code></pre></div></div>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python long_sleep.py \n==================================================\nScheduled blocking first...\n--------------------------------------------------\nExpected asynchronous sleep duration: 1.00s.\nActual asynchronous sleep duration: 1.00s.\n==================================================\nScheduled sleeping first...\n--------------------------------------------------\nExpected asynchronous sleep duration: 1.00s.\nActual asynchronous sleep duration: 5.00s.\n==================================================\n</code></pre></div></div>\n\n<p>In this particular example, if we first schedule asynchronous sleep and then schedule a block execution, the finish of sleep has to wait until the the block execution finishes. This is also because the callback scheduling is sophisticated and not smart. Not sure if it is theoretically possible to have a smart event loop implementation.</p>\n\n<h3 id="asynchronous-read">Asynchronous Read</h3>\n\n<p>Although we have seen how <code class="language-plaintext highlighter-rouge">sleep</code> is scheduled asynchronously in the event loop, this does not help us understand how other IO-bounded tasks were scheduled very much. For example, if a server receives messages from multiple clients, how does it schedule the <code class="language-plaintext highlighter-rouge">callback</code>s asynchronously?</p>\n\n<p><br /></p>\n\n<p>This is a simple server that could asynchronously reading messages from and sending messages to multiple clients asynchronously.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">handle_connection</span><span class="p">(</span><span class="n">reader</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">StreamReader</span><span class="p">,</span> <span class="n">writer</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>\n    <span class="n">addr</span> <span class="o">=</span> <span class="n">writer</span><span class="p">.</span><span class="n">get_extra_info</span><span class="p">(</span><span class="s">"peername"</span><span class="p">)</span>\n    <span class="k">while</span> <span class="n">message</span> <span class="p">:</span><span class="o">=</span> <span class="k">await</span> <span class="n">reader</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>\n        <span class="n">text</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">decode</span><span class="p">()</span>\n        <span class="k">print</span><span class="p">(</span><span class="s">f"Received </span><span class="si">{</span><span class="n">text</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s"> from </span><span class="si">{</span><span class="n">addr</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>\n        <span class="k">print</span><span class="p">(</span><span class="s">f"Sending </span><span class="si">{</span><span class="n">text</span><span class="err">!</span><span class="n">r</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>\n        <span class="n">writer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>\n        <span class="k">await</span> <span class="n">writer</span><span class="p">.</span><span class="n">drain</span><span class="p">()</span>\n        <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="s">"quit</span><span class="se">\\n</span><span class="s">"</span><span class="p">:</span>\n            <span class="k">break</span>\n    \n    <span class="k">print</span><span class="p">(</span><span class="s">"Closing the connection"</span><span class="p">)</span>\n    <span class="n">writer</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>\n\n<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>\n    <span class="n">server</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">start_server</span><span class="p">(</span><span class="n">handle_connection</span><span class="p">,</span> <span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="mi">8888</span><span class="p">)</span>\n    <span class="n">addr</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">sockets</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">getsockname</span><span class="p">()</span> <span class="k">if</span> <span class="n">server</span><span class="p">.</span><span class="n">sockets</span> <span class="k">else</span> <span class="s">"unknown"</span>\n    <span class="k">print</span><span class="p">(</span><span class="s">f"Serving on </span><span class="si">{</span><span class="n">addr</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>\n    <span class="k">async</span> <span class="k">with</span> <span class="n">server</span><span class="p">:</span>\n        <span class="k">await</span> <span class="n">server</span><span class="p">.</span><span class="n">serve_forever</span><span class="p">()</span>\n\n<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>\n    \n    <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>\n</code></pre></div></div>\n\n<p>The documentation of <code class="language-plaintext highlighter-rouge">asyncio.start_server</code> says “The <code class="language-plaintext highlighter-rouge">client_connected_cb</code> callback is called whenever a new client connection is established. It receives a (reader, writer) pair as two arguments, instances of the <code class="language-plaintext highlighter-rouge">StreamReader</code> and <code class="language-plaintext highlighter-rouge">StreamWriter</code> classes.” Therefore, the connection to the server is not blocking, allowing multiple clients connecting to the sever. If the connection were synchronous and blocking, only one connection could be established.</p>\n\n<p><br /></p>\n\n<p>The data reading and writing to the streams have to be asynchronous as well. Different clients use different sockets in the same port. Each file from the client sent to the server socket will have an <code class="language-plaintext highlighter-rouge">EOF</code> (end-of-file), which is an indication of the end of transfer. If the data reading and writing is synchronous, the network connection between the server and one client is poor, even if the file being transferred is small, it might take a long time to receive the <code class="language-plaintext highlighter-rouge">EOF</code>, thus blocking the entire thread.</p>\n\n<p><br /></p>\n\n<p>Using the asynchronous <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L643"><code class="language-plaintext highlighter-rouge">StreamReader.read</code></a> method, we could switch between the multiple connections to the clients. Let’s check how it is achieved.</p>\n\n<p><br /></p>\n\n<p>When we start an server, a <code class="language-plaintext highlighter-rouge">StreamReader</code> will be created and a <code class="language-plaintext highlighter-rouge">StreamReaderProtocol</code> will wrap the the <code class="language-plaintext highlighter-rouge">StreamReader</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">start_server</span><span class="p">(</span><span class="n">client_connected_cb</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span>\n                       <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">limit</span><span class="o">=</span><span class="n">_DEFAULT_LIMIT</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>\n    <span class="s">"""Start a socket server, call back for each client connected.\n    The first parameter, `client_connected_cb`, takes two parameters:\n    client_reader, client_writer.  client_reader is a StreamReader\n    object, while client_writer is a StreamWriter object.  This\n    parameter can either be a plain callback function or a coroutine;\n    if it is a coroutine, it will be automatically converted into a\n    Task.\n    The rest of the arguments are all the usual arguments to\n    loop.create_server() except protocol_factory; most common are\n    positional host and port, with various optional keyword arguments\n    following.  The return value is the same as loop.create_server().\n    Additional optional keyword arguments are loop (to set the event loop\n    instance to use) and limit (to set the buffer limit passed to the\n    StreamReader).\n    The return value is the same as loop.create_server(), i.e. a\n    Server object which can be used to stop the service.\n    """</span>\n    <span class="k">if</span> <span class="n">loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>\n        <span class="n">loop</span> <span class="o">=</span> <span class="n">events</span><span class="p">.</span><span class="n">get_event_loop</span><span class="p">()</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="n">warnings</span><span class="p">.</span><span class="n">warn</span><span class="p">(</span><span class="s">"The loop argument is deprecated since Python 3.8, "</span>\n                      <span class="s">"and scheduled for removal in Python 3.10."</span><span class="p">,</span>\n                      <span class="nb">DeprecationWarning</span><span class="p">,</span> <span class="n">stacklevel</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>\n\n    <span class="k">def</span> <span class="nf">factory</span><span class="p">():</span>\n        <span class="n">reader</span> <span class="o">=</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">limit</span><span class="o">=</span><span class="n">limit</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n        <span class="n">protocol</span> <span class="o">=</span> <span class="n">StreamReaderProtocol</span><span class="p">(</span><span class="n">reader</span><span class="p">,</span> <span class="n">client_connected_cb</span><span class="p">,</span>\n                                        <span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n        <span class="k">return</span> <span class="n">protocol</span>\n\n    <span class="k">return</span> <span class="k">await</span> <span class="n">loop</span><span class="p">.</span><span class="n">create_server</span><span class="p">(</span><span class="n">factory</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>The <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L643"><code class="language-plaintext highlighter-rouge">StreamReader.read</code></a> method is implemented as follows. What it does basically is wait until the some data have been received via <code class="language-plaintext highlighter-rouge">self._wait_for_data</code> and the return at most <code class="language-plaintext highlighter-rouge">n</code> bytes of the data.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">async</span> <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>\n        <span class="s">"""Read up to `n` bytes from the stream.\n        If n is not provided, or set to -1, read until EOF and return all read\n        bytes. If the EOF was received and the internal buffer is empty, return\n        an empty bytes object.\n        If n is zero, return empty bytes object immediately.\n        If n is positive, this function try to read `n` bytes, and may return\n        less or equal bytes than requested, but at least one byte. If EOF was\n        received before any byte is read, this function returns empty byte\n        object.\n        Returned value is not limited with limit, configured at stream\n        creation.\n        If stream was paused, this function will automatically resume it if\n        needed.\n        """</span>\n\n        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_exception</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="k">raise</span> <span class="bp">self</span><span class="p">.</span><span class="n">_exception</span>\n\n        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>\n            <span class="k">return</span> <span class="s">b''</span>\n\n        <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>\n            <span class="c1"># This used to just loop creating a new waiter hoping to\n</span>            <span class="c1"># collect everything in self._buffer, but that would\n</span>            <span class="c1"># deadlock if the subprocess sends more than self.limit\n</span>            <span class="c1"># bytes.  So just call self.read(self._limit) until EOF.\n</span>            <span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>\n            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>\n                <span class="n">block</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_limit</span><span class="p">)</span>\n                <span class="k">if</span> <span class="ow">not</span> <span class="n">block</span><span class="p">:</span>\n                    <span class="k">break</span>\n                <span class="n">blocks</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>\n            <span class="k">return</span> <span class="s">b''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">blocks</span><span class="p">)</span>\n\n        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_buffer</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_eof</span><span class="p">:</span>\n            <span class="k">await</span> <span class="bp">self</span><span class="p">.</span><span class="n">_wait_for_data</span><span class="p">(</span><span class="s">'read'</span><span class="p">)</span>\n\n        <span class="c1"># This will work right even if buffer is less than n bytes\n</span>        <span class="n">data</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_buffer</span><span class="p">[:</span><span class="n">n</span><span class="p">])</span>\n        <span class="k">del</span> <span class="bp">self</span><span class="p">.</span><span class="n">_buffer</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_maybe_resume_transport</span><span class="p">()</span>\n        <span class="k">return</span> <span class="n">data</span>\n</code></pre></div></div>\n\n<p>The <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L493"><code class="language-plaintext highlighter-rouge">StreamReader._wait_for_data</code></a> coroutine is basically waiting for a <code class="language-plaintext highlighter-rouge">Future</code> <code class="language-plaintext highlighter-rouge">self._waiter</code> to be set.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func_name</span><span class="p">):</span>\n        <span class="s">"""Wait until feed_data() or feed_eof() is called.\n        If stream was paused, automatically resume it.\n        """</span>\n        <span class="c1"># StreamReader uses a future to link the protocol feed_data() method\n</span>        <span class="c1"># to a read coroutine. Running two read coroutines at the same time\n</span>        <span class="c1"># would have an unexpected behaviour. It would not possible to know\n</span>        <span class="c1"># which coroutine would get the next data.\n</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="k">raise</span> <span class="nb">RuntimeError</span><span class="p">(</span>\n                <span class="s">f'</span><span class="si">{</span><span class="n">func_name</span><span class="si">}</span><span class="s">() called while another coroutine is '</span>\n                <span class="s">f'already waiting for incoming data'</span><span class="p">)</span>\n\n        <span class="k">assert</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_eof</span><span class="p">,</span> <span class="s">'_wait_for_data after EOF'</span>\n\n        <span class="c1"># Waiting for data while paused will make deadlock, so prevent it.\n</span>        <span class="c1"># This is essential for readexactly(n) for case when n &gt; self._limit.\n</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_paused</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_paused</span> <span class="o">=</span> <span class="bp">False</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_transport</span><span class="p">.</span><span class="n">resume_reading</span><span class="p">()</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">create_future</span><span class="p">()</span>\n        <span class="k">try</span><span class="p">:</span>\n            <span class="k">await</span> <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span>\n        <span class="k">finally</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span> <span class="o">=</span> <span class="bp">None</span>\n</code></pre></div></div>\n\n<p>So who is going to set the value for <code class="language-plaintext highlighter-rouge">self._waiter</code>? It is <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L471"><code class="language-plaintext highlighter-rouge">StreamReader.feed_data</code></a> which calls <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L446"><code class="language-plaintext highlighter-rouge">StreamReader._wakeup_waiter</code></a> to set the value for <code class="language-plaintext highlighter-rouge">self._waiter</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">feed_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>\n        <span class="k">assert</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_eof</span><span class="p">,</span> <span class="s">'feed_data after feed_eof'</span>\n\n        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>\n            <span class="k">return</span>\n\n        <span class="bp">self</span><span class="p">.</span><span class="n">_buffer</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_wakeup_waiter</span><span class="p">()</span>\n\n        <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_transport</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span>\n                <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">_paused</span> <span class="ow">and</span>\n                <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_buffer</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">_limit</span><span class="p">):</span>\n            <span class="k">try</span><span class="p">:</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_transport</span><span class="p">.</span><span class="n">pause_reading</span><span class="p">()</span>\n            <span class="k">except</span> <span class="nb">NotImplementedError</span><span class="p">:</span>\n                <span class="c1"># The transport can't be paused.\n</span>                <span class="c1"># We'll just have to buffer all data.\n</span>                <span class="c1"># Forget the transport so we don't keep trying.\n</span>                <span class="bp">self</span><span class="p">.</span><span class="n">_transport</span> <span class="o">=</span> <span class="bp">None</span>\n            <span class="k">else</span><span class="p">:</span>\n                <span class="bp">self</span><span class="p">.</span><span class="n">_paused</span> <span class="o">=</span> <span class="bp">True</span>\n</code></pre></div></div>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">_wakeup_waiter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>\n        <span class="s">"""Wakeup read*() functions waiting for data or EOF."""</span>\n        <span class="n">waiter</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span>\n        <span class="k">if</span> <span class="n">waiter</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_waiter</span> <span class="o">=</span> <span class="bp">None</span>\n            <span class="k">if</span> <span class="ow">not</span> <span class="n">waiter</span><span class="p">.</span><span class="n">cancelled</span><span class="p">():</span>\n                <span class="n">waiter</span><span class="p">.</span><span class="n">set_result</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>Before the value of <code class="language-plaintext highlighter-rouge">self._waiter</code> is set, the data has been extended to <code class="language-plaintext highlighter-rouge">self._buffer</code> so that <code class="language-plaintext highlighter-rouge">StreamReader.read</code> could safely read the buffer.</p>\n\n<p><br /></p>\n\n<p>So the final question is who will call <code class="language-plaintext highlighter-rouge">StreamReader.feed_data</code>? Remember the <code class="language-plaintext highlighter-rouge">StreamReader</code> is wrapped in a <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L203"><code class="language-plaintext highlighter-rouge">StreamReaderProtocol</code></a>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">StreamReaderProtocol</span><span class="p">(</span><span class="n">FlowControlMixin</span><span class="p">,</span> <span class="n">protocols</span><span class="p">.</span><span class="n">Protocol</span><span class="p">):</span>\n    <span class="s">"""Helper class to adapt between Protocol and StreamReader.\n    (This is a helper class instead of making StreamReader itself a\n    Protocol subclass, because the StreamReader has other potential\n    uses, and to prevent the user of the StreamReader to accidentally\n    call inappropriate methods of the protocol.)\n    """</span>\n\n    <span class="n">_source_traceback</span> <span class="o">=</span> <span class="bp">None</span>\n\n    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stream_reader</span><span class="p">,</span> <span class="n">client_connected_cb</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>\n        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">)</span>\n        <span class="k">if</span> <span class="n">stream_reader</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_stream_reader_wr</span> <span class="o">=</span> <span class="n">weakref</span><span class="p">.</span><span class="n">ref</span><span class="p">(</span><span class="n">stream_reader</span><span class="p">)</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_source_traceback</span> <span class="o">=</span> <span class="n">stream_reader</span><span class="p">.</span><span class="n">_source_traceback</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="bp">self</span><span class="p">.</span><span class="n">_stream_reader_wr</span> <span class="o">=</span> <span class="bp">None</span>\n        <span class="k">if</span> <span class="n">client_connected_cb</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="c1"># This is a stream created by the `create_server()` function.\n</span>            <span class="c1"># Keep a strong reference to the reader until a connection\n</span>            <span class="c1"># is established.\n</span>            <span class="bp">self</span><span class="p">.</span><span class="n">_strong_reader</span> <span class="o">=</span> <span class="n">stream_reader</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_reject_connection</span> <span class="o">=</span> <span class="bp">False</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_stream_writer</span> <span class="o">=</span> <span class="bp">None</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_transport</span> <span class="o">=</span> <span class="bp">None</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_client_connected_cb</span> <span class="o">=</span> <span class="n">client_connected_cb</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_over_ssl</span> <span class="o">=</span> <span class="bp">False</span>\n        <span class="bp">self</span><span class="p">.</span><span class="n">_closed</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_loop</span><span class="p">.</span><span class="n">create_future</span><span class="p">()</span>\n</code></pre></div></div>\n\n<p>When <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/streams.py#L283"><code class="language-plaintext highlighter-rouge">StreamReaderProtocol.data_received</code></a> is called, it actually calls <code class="language-plaintext highlighter-rouge">StreamReader.feed_data</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">data_received</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>\n        <span class="n">reader</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_stream_reader</span>\n        <span class="k">if</span> <span class="n">reader</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>\n            <span class="n">reader</span><span class="p">.</span><span class="n">feed_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>\n</code></pre></div></div>\n\n<p>But who is calling <code class="language-plaintext highlighter-rouge">StreamReaderProtocol.data_received</code>? According to the base class <a href="https://github.com/python/cpython/blob/3.8/Lib/asyncio/protocols.py#L66"><code class="language-plaintext highlighter-rouge">protocols.Protocol</code></a> for <code class="language-plaintext highlighter-rouge">StreamReaderProtocol</code>.</p>\n\n<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Protocol</span><span class="p">(</span><span class="n">BaseProtocol</span><span class="p">):</span>\n    <span class="s">"""Interface for stream protocol.\n    The user should implement this interface.  They can inherit from\n    this class but don't need to.  The implementations here do\n    nothing (they don't raise exceptions).\n    When the user wants to requests a transport, they pass a protocol\n    factory to a utility function (e.g., EventLoop.create_connection()).\n    When the connection is made successfully, connection_made() is\n    called with a suitable transport object.  Then data_received()\n    will be called 0 or more times with data (bytes) received from the\n    transport; finally, connection_lost() will be called exactly once\n    with either an exception object or None as an argument.\n    State machine of calls:\n      start -&gt; CM [-&gt; DR*] [-&gt; ER?] -&gt; CL -&gt; end\n    * CM: connection_made()\n    * DR: data_received()\n    * ER: eof_received()\n    * CL: connection_lost()\n    """</span>\n</code></pre></div></div>\n\n<p>Essentially the state machine is</p>\n\n<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start -&gt; connection_made\n    [-&gt; data_received]*\n    [-&gt; eof_received]?\n-&gt; connection_lost -&gt; end\n</code></pre></div></div>\n\n<p>The data got received for one or more than one times, it could be less, equal, or larger than the number of bytes the user wanted. Once the user want to wait for the data via <code class="language-plaintext highlighter-rouge">StreamReader.read</code>, most likely the most recent data collected from <code class="language-plaintext highlighter-rouge">StreamReaderProtocol.data_received</code> will be the data returned. The <code class="language-plaintext highlighter-rouge">StreamReaderProtocol.data_received</code> is called at certain rate and the buffer got extended accordingly, it is how asynchronous read becomes possible.</p>\n\n<h3 id="conclusions">Conclusions</h3>\n\n<p>The fundamentals of asynchronous IO in asynchronous programming are sometimes trivial if we understand the system we are working on very well. However, it could still be complicated to implement at the low-level.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="https://stackoverflow.com/questions/152457/what-is-the-difference-between-a-port-and-a-socket">Port VS Socket</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Python-AsyncIO-Asynchronous-IO/">Python AsyncIO: Asynchronous IO</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 30, 2020.</p>	c154b5d769239f0c083bd5de662c7de5d9faccc0	\N	f	2020-08-31 03:10:00	2020-09-10 05:10:13.397001	0			'-1':1302,1319 '0':333,830,1425,1430,2052 '1':522,566 '1.00':622,628,637 '100':786 '127.0.0.1':826 '2':365,1238,1709 '2020':2250 '2f':546,556 '3.10':362,1235 '3.8':355,1228 '30':2249 '5':503,510,563 '5.00':643 '50':572,578,592,598,612 '8888':827 'accident':1851 'accord':1969,2183 'achiev':1030 'actual':478,552,624,639,1944 'adapt':1817 'addit':1165 'addr':777,795,828,840 'allow':897 'alreadi':1607 'also':277,676 'although':702 'anoth':1603 'applic':65,210,221 'argument':350,880,1131,1136,1154,1168,1223,2080 'assert':1612,1683 'async':314,496,515,768,816,841,1049,1297,1526 'asynchron':3,16,22,42,53,64,220,232,237,241,280,543,553,619,625,634,640,653,700,710,747,755,765,928,1011,2187,2195,2198,2233 'asyncio':2,35,71,240,275,493,767,2232 'asyncio.gather':582,602 'asyncio.get':568 'asyncio.run':850 'asyncio.sleep':287,311,528 'asyncio.start':822,855 'asyncio.streamreader':773 'asyncio.streamwriter':775 'august':2248 'automat':1122,1411,1547 'await':334,378,527,784,804,821,844,1258,1469,1488,1650 'b':1427,1479 'back':1071 'base':1972 'baseprotocol':1979 'basic':200,1275,1517 'becom':2189 'behaviour':1577 'best':142 'block':255,264,303,498,500,505,513,561,575,583,585,607,609,616,659,671,896,910,1005,1465,1468,1474,1477,1481 'blocks.append':1476 'blog':224 'book':2246 'bound':725 'box':138,168,191 'break':7,810,1475 'buffer':1184,1336,1497,1726,1791,2180 'byte':1293,1307,1327,1342,1350,1363,1370,1377,1384,1391,1457,1502,1504,2058,2140 'call':864,1070,1460,1542,1601,1670,1799,1852,1942,1945,1966,2040,2051,2068,2084,2174 'callback':394,431,466,679,746,862,1109 'candi':85,94,99,119,126,135,148,158,188 'case':1638 'cb':861,1055,1081,1252,1868,1895,1933 'certain':2176 'check':1026 'choos':196 'cl':2089,2100 'class':887,1810,1815,1826,1973,1977,1995 'client':740,764,859,868,899,932,944,983,1023,1053,1074,1079,1085,1087,1089,1096,1250,1866,1893,1931 'close':812 'cm':2086,2091 'collect':134,145,157,186,1442,2161 'common':244,1144 'complet':324,581,601 'complic':2219 'conclus':2191 'configur':1400 'connect':771,814,825,860,869,890,900,906,913,977,1020,1054,1075,1080,1251,1867,1894,1918,1932,2030,2033,2037,2064,2092,2101,2109,2115 'contamin':124 'convert':1123 'coroutin':285,291,322,1113,1118,1515,1564,1568,1585,1604 'could':153,427,754,914,1015,1787,2130,2216 'creat':388,1040,1436,1903,1906 'creation':1403 'data':918,969,1281,1296,1503,1512,1530,1537,1559,1590,1611,1617,1622,1668,1680,1682,1687,1693,1696,1728,1752,1778,1801,1947,1949,1952,1961,1962,2047,2057,2095,2111,2119,2152,2160,2168 'deadlock':1449,1627 'def':315,497,516,769,817,1050,1239,1298,1527,1678,1743,1861,1948 'default':1063 'del':1507 'delay':317,332,372,406,423,529 'deprec':352,1225 'deprecationwarn':363,1236 'differ':931,934 'discuss':230 'document':853 'dr':2087,2094 'drop':105,117 'due':449 'durat':299,405,422,443,476,501,514,520,531,545,550,555,562,565,586,590,606,610,621,627,636,642 'e.g':2028 'either':1105,2072 'elaps':535,559 'els':307,346,834,1219,1740,1889 'empti':1338,1341,1349,1390 'end':111,171,532,537,955,964,2090,2117 'end-of-fil':954 'entir':1007 'eof':953,1003,1322,1330,1379,1464,1540,1619,1690,1754,2098,2113 'equal':1369,2133 'er':2088,2097 'essenti':1633,2103 'establish':871,916,1920 'even':986,1495 'event':294,425,454,462,507,569,697,713,1174,1217 'eventloop.create':2029 'events.get':343,1216 'everyth':1443 'exact':2069 'exampl':491,648,732 'except':1140,1713,2010,2074 'execut':39,47,660,672 'expect':489,542,618,633 'extend':1781,2182 'extra':779 'extrem':469 'f':790,798,837,1598,1606 'factori':86,1142,1240,1261,2023 'fals':1645,1925,1935 'feed':1536,1539,1558,1679,1686,1689 'file':941,957,989 'final':380,1652,1794,2063 'finish':472,662,673 'first':202,576,596,617,632,651,1077 'float':502,521 'flowcontrolmixin':1812 'follow':81,1155,1271 'forev':846 'forget':1729 'format':548,558 'func':499,518,584,588,604,608,1532,1599 'function':250,286,1110,1358,1388,1409,1749,1908,2027 'fundament':2193 'futur':366,368,374,379,390,401,411,1521,1553 'futures._set_result_unless_cancelled':373 'get':1587 'getsocknam':831 'given':327 'go':1658 'got':130,412,2120,2181 'ground':108,122 'h':369 'h.cancel':381 'handl':770,824 'help':718 'helper':1814,1825 'hope':1440 'host':1056,1147,1262 'howev':2214 'i.e':1199 'i/o':29,54,73 'i/o-bound':245 'immedi':1352 'implement':313,699,1269,1987,2002,2221 'import':58,492,494,766 'inappropri':1853 'includ':247 'incom':1610 'indic':961 'info':780 'inherit':1992 'init':1862,1873 'instanc':458,881,1176 'instead':1827 'interfac':1980,1989 'intern':1335 'introduc':17 'introduct':5 'io':4,234,724,2196,2234 'io-bound':723 'join':1480 'keep':1736,1909 'keyword':1153,1167 'know':1583 'kwds':1065,1264 'larger':2135 'later':371 'least':1375 'lei':2239,2242 'len':1707 'less':1367,1499,2132 'let':1024 'level':2226 'like':228,2156 'limit':1062,1064,1180,1185,1243,1244,1397,1399 'line':92,103,115,162,175,180 'link':1555 'll':1722 'log':2245 'long':470,998 'long_sleep.py':614 'longer':484 'loop':295,320,339,342,345,349,426,455,463,508,567,570,698,714,1060,1170,1175,1212,1215,1218,1222,1245,1246,1253,1254,1435,1870,1874,1875 'loop.call':370 'loop.create':367,1138,1163,1197,1259 'loop.run':579,599 'lost':2065,2102,2116 'low':2225 'low-level':2224 'machin':2082,2106 'made':2035,2038,2093,2110 'main':818,849,851 'make':1626,1829 'mani':147 'mao':2240,2243 'may':1365 'mean':52 'messag':737,757,761,783,803 'message.decode':788 'metaphor':77 'method':1013,1267,1560,1854 'might':995 'much':28,483,730 'multipl':739,763,898,1019 'n':809,1292,1301,1306,1312,1345,1354,1362,1424,1429,1501,1506,1509,1636,1640 'name':848,1533,1600 'natur':452 'need':1415,1999 'network':976 'new':867,1438 'next':1589 'none':319,321,341,504,523,776,819,1057,1059,1061,1214,1420,1595,1654,1702,1739,1761,1763,1769,1860,1869,1871,1881,1891,1898,1927,1929,1959,2077 'note':439 'noth':2005 'notimplementederror':1714 'number':2138 'object':1094,1101,1202,1343,1351,1392,2045,2075 'obvious':192 'one':95,97,131,160,164,912,982,1376,2123,2127 'option':1152,1166 'origin':2236 'overhead':19 'pair':877 'paramet':1078,1084,1103 'part':59 'particular':647 'pass':1186,2020 'paus':1407,1546,1624,1720 'peernam':781 'peopl':194 'perform':37 'piec':10 'place':166 'plain':1108 'poor':985 'port':939,1058,1149,1263,2228 'posit':1146,1356 'possibl':150,692,1581,2190 'post':225 'potenti':1840 'practic':448 'precis':446 'prevent':1629,1844 'print':541,551,571,573,577,591,593,597,611,789,797,811,836 'produc':93 'product':91,102,114,161,174,179 'program':23,238,2199 'protocol':1141,1247,1256,1557,1819,1833,1857,1978,1983,2022 'protocols.protocol':1813,1974 'provid':1315 'publish':2237 'python':1,236,354,361,613,1227,1234,2231 'question':67,1795 'quick':76 'quit':808 'r':793,796,801 'rais':1421,1596,2009 'rate':2177 'read':701,756,919,970,1299,1303,1320,1326,1361,1386,1490,1563,1567,1748,1789,2188 'reader':772,875,1086,1090,1241,1249,1865,1878,1885,1915,1923,1953,1956 'reader._source_traceback':1888 'reader.feed':1960 'reader.read':785 'readexact':1635 'receiv':736,791,873,1001,1284,1332,1381,1940,1950,1968,2048,2059,2096,2099,2112,2114,2121,2164,2172 'recent':2159 'refer':1912,2227 'rememb':1802 'remov':359,1232 'request':1372,2016 'rest':1128 'result':318,337,375,409,1768 'resum':1412,1548 'return':273,336,377,1157,1191,1255,1257,1289,1324,1339,1348,1366,1389,1393,1426,1478,1511,1694,2169 'right':1494 'rotat':176 'run':14,344,1565 'runtim':18 'runtimeerror':1597 'safe':1788 'save':33,72 'say':857 'schedul':12,289,357,428,456,464,574,594,615,630,652,657,680,709,728,744,1230 'second':198,213,267,330,511 'seen':705 'self':1300,1531,1681,1746,1863,1951 'self._buffer':1445,1484,1505,1508,1708,1783 'self._buffer.extend':1695 'self._client_connected_cb':1930 'self._closed':1936 'self._eof':1487,1614,1685 'self._exception':1417,1422 'self._limit':1462,1471,1641,1710 'self._loop.create_future':1648,1937 'self._maybe_resume_transport':1510 'self._over_ssl':1934 'self._paused':1643,1644,1705,1741 'self._reject_connection':1924 'self._source_traceback':1886 'self._stream_reader':1954 'self._stream_reader_wr':1882,1890 'self._stream_writer':1926 'self._strong_reader':1921 'self._transport':1699,1738,1928 'self._transport.pause_reading':1712 'self._transport.resume_reading':1646 'self._wait_for_data':1286,1489 'self._waiter':1522,1592,1647,1651,1653,1664,1677,1756,1762,1774 'self._wakeup_waiter':1697 'self.limit':1456 'self.read':1461,1470 'send':760,799,1453 'sent':945 'serv':838 'server':735,752,820,823,843,856,893,948,980,1035,1052,1069,1139,1164,1198,1201,1260,1907 'server.serve':845 'server.sockets':829,833 'servic':1210 'set':396,413,1172,1182,1317,1525,1660,1673,1776 'sever':903 'simpl':386,751 'sinc':353,1226 'singl':62,207,218 'single-thread':61,206,217 'sleep':242,249,284,298,316,404,415,421,442,475,479,517,519,530,544,549,554,564,587,589,595,603,605,620,626,631,635,641,654,664,707 'sleep0':335 'small':993 'smart':193,685,696 'socket':935,949,1068,2230 'somehow':460 'someth':306 'sometim':2201 'sophist':682 'sourc':1858 'specifi':269 'stacklevel':364,1237 'start':524,539,1033,1051,1066,2085,2108 'state':2081,2105 'still':2217 'stop':1208 'strategi':143,156,199,203,214 'stream':924,1310,1402,1405,1544,1864,1877,1884,1887,1902,1922,1982 'streamread':884,1037,1048,1093,1189,1242,1550,1804,1821,1830,1837,1849 'streamreader._wait_for_data':1514 'streamreader._wakeup_waiter':1671 'streamreader.feed':1667,1800,1946 'streamreader.read':1012,1266,1786,2154 'streamreaderprotocol':1043,1248,1809,1811,1976 'streamreaderprotocol.data':1939,1967,2163,2171 'streamwrit':886,1100 'strong':1911 'subclass':1834 'subprocess':1452 'success':2036 'suitabl':2043 'super':1872 'sure':687 'surpris':382 'switch':1016 'synchron':50,209,253,908,974 'system':2207 'take':468,996,1082 'task':8,41,49,246,435,726,1126 'text':787,792,800,807 'theoret':691 'therefor':888 'thread':63,208,219,1008 'three':90 'thus':1004 'time':30,74,165,182,184,328,480,495,525,533,536,538,540,560,999,1572,2055,2128 'time.sleep':256,512 'time.time':526,534 'traceback':1859 'transfer':966,991 'transport':1716,1731,2018,2044,2062 'tri':376,1359,1649,1711,1737 'trivial':2202 'true':1467,1742 'two':155,879,1083,1566 'typic':151 'understand':720,2205 'unexpect':1576 'unfortun':127 'unknown':835 'us':719 'use':239,251,392,933,1009,1178,1206,1432,1551,1841 'user':1846,1985,2013,2142,2146 'usual':1135 'util':2026 'valu':398,1158,1192,1394,1662,1675,1772 'various':1151 'version':281 'via':1285,2153 'vs':2229 'wait':261,667,1277,1518,1528,1534,1608,1615,1620,1750,2149 'waiter':1439,1745,1755,1758 'waiter.cancelled':1766 'waiter.set':1767 'wakeup':1744,1747 'want':2014,2143,2147 'warnings.warn':347,1220 'weakref.ref':1883 'well':930,2213 'whatev':266 'whenev':865 'work':1493,2210 'worker':132 'wors':45 'would':227,258,481,1448,1573,1579,1586 'wrap':1045,1806 'write':921,972 'writer':774,876,1088,1097 'writer.close':815 'writer.drain':805 'writer.get':778 'writer.write':802 'zero':1347	en	Lei Mao
1065	为什么列式存储广泛应用于 OLAP 领域？	{"ver":2,"uid":1,"hash":"SHA1:dfe425ac4eb70dea06d9dbfb60630fab32f4cfd9"}	https://toutiao.io/k/mjb7o88	2020-09-08 04:10:09	为什么列式存储广泛应用于 OLAP 领域？	3ae6b8eafb5f24c22a37410cd8a90940e14c30b6	\N	f	2020-09-08 04:10:00	2020-09-08 23:10:11.52319	0			'olap':2,5 '为什么列式存储广泛应用于':1,4 '领域':3,6	zh	
1026	目标检测入门学习笔记	{"ver":2,"uid":1,"hash":"SHA1:8257d85ecd69ea7d44bd26728ca37c1555ad05e9"}	https://toutiao.io/k/a46hm3i	2020-09-07 02:10:16	目标检测入门学习笔记	06527f1dff21f7f806eda9e0a5258732936c85d1	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.018317	0			'目标检测入门学习笔记':1,2	zh	
312	Drawing Quantum Circuit Using Q-Circuit	{"ver":2,"uid":1,"hash":"SHA1:a678885a30daa6c627addd144b2e9269a77e0a5b"}	https://leimao.github.io/blog/Drawing-Quantum-Circuit-Using-Q-Circuit/	2020-08-16 05:10:08	<h3 id="introduction">Introduction</h3>\n\n<p>Q-circuit is a macro package for drawing quantum circuit diagrams in $\\rm\\LaTeX$. In this blog post, I would present a simple example of quantum circuit drawn using Q-circuit.</p>\n\n<h3 id="example">Example</h3>\n\n<p>In this particular example, there is a <a href="https://docs.microsoft.com/en-us/quantum/concepts/oracles">quantum oracle</a> $U_f$ in the circuit. We wrote the following $\\rm\\LaTeX$ code for drawing the quantum circuits. It should be noted that <code class="language-plaintext highlighter-rouge">mathptmx</code> makes the math symbol font Times and it looks much better.</p>\n\n<div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\\documentclass</span><span class="p">{</span>article<span class="p">}</span>\n<span class="k">\\usepackage</span><span class="na">[braket, qm]</span><span class="p">{</span>qcircuit<span class="p">}</span>\n<span class="k">\\usepackage</span><span class="p">{</span>mathptmx<span class="p">}</span>\n<span class="k">\\usepackage</span><span class="p">{</span>amsmath<span class="p">}</span>\n\n<span class="nt">\\begin{document}</span>\n<span class="p">\\[</span><span class="nb"> \n</span><span class="nv">\\Qcircuit</span><span class="nb"> @C</span><span class="o">=</span><span class="m">2</span><span class="nb">.</span><span class="m">75</span><span class="nb">em @R</span><span class="o">=</span><span class="m">3</span><span class="nb">em </span><span class="p">{</span><span class="nb">\n</span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ustick</span><span class="p">{</span><span class="nv">\\ket</span><span class="p">{</span><span class="nv">\\mathbf</span><span class="p">{</span><span class="m">0</span><span class="p">}}}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="o">/</span><span class="p">^{</span><span class="nb">n</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\gate</span><span class="p">{</span><span class="nb">H</span><span class="p">^{</span><span class="nv">\\otimes</span><span class="nb"> n</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="o">/</span><span class="p">^{</span><span class="nb">n</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\multigate</span><span class="p">{</span><span class="m">1</span><span class="p">}{</span><span class="nv">\\hspace</span><span class="p">{</span><span class="m">2</span><span class="nb">em</span><span class="p">}</span><span class="nb"> U</span><span class="p">_</span><span class="nb">f </span><span class="nv">\\hspace</span><span class="p">{</span><span class="m">2</span><span class="nb">em</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="o">/</span><span class="p">^{</span><span class="nb">n</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\meter\\\\</span><span class="nb">\n</span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ustick</span><span class="p">{</span><span class="nv">\\ket</span><span class="p">{</span><span class="m">0</span><span class="p">}}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\dstick</span><span class="p">{</span><span class="nv">\\Uparrow</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\dstick</span><span class="p">{</span><span class="nv">\\Uparrow</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ghost</span><span class="p">{</span><span class="nv">\\hspace</span><span class="p">{</span><span class="m">2</span><span class="nb">em</span><span class="p">}</span><span class="nb"> U</span><span class="p">_</span><span class="nb">f </span><span class="nv">\\hspace</span><span class="p">{</span><span class="m">2</span><span class="nb">em</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\dstick</span><span class="p">{</span><span class="nv">\\Uparrow</span><span class="p">}</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\qw</span><span class="nb"> </span><span class="nv">\\\\</span><span class="nb">\n</span><span class="p">&amp;</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ustick</span><span class="p">{</span><span class="nv">\\ket</span><span class="p">{</span><span class="nv">\\varphi</span><span class="p">_</span><span class="m">0</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ustick</span><span class="p">{</span><span class="nv">\\ket</span><span class="p">{</span><span class="nv">\\varphi</span><span class="p">_</span><span class="m">1</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\ustick</span><span class="p">{</span><span class="nv">\\ket</span><span class="p">{</span><span class="nv">\\varphi</span><span class="p">_</span><span class="m">2</span><span class="p">}}</span><span class="nb"> </span><span class="p">&amp;</span><span class="nb"> </span><span class="nv">\\\\</span><span class="nb">\n</span><span class="p">}</span><span class="nb"> \n</span><span class="p">\\]</span>\n<span class="nt">\\end{document}</span>\n</code></pre></div></div>\n\n<p>The quantum circuit diagram created is as follows.</p>\n\n<div class="titled-image">\n<figure class="titled-image">\n    <img src="https://leimao.github.io/images/blog/2020-08-16-Drawing-Quantum-Circuit-Using-Q-Circuit/q-circuit.png" style="width: 100%; height: 100%" />\n    <figcaption>Quantum Circuit Drawn Using Q-Circuit</figcaption>\n</figure>\n</div>\n\n<h3 id="resources">Resources</h3>\n\n<p>More examples and resources could be found in the Q-circuit tutorial in the references.</p>\n\n<h3 id="references">References</h3>\n\n<ul>\n  <li><a href="http://physics.unm.edu/CQuIC/Qcircuit/">Q-circuit</a></li>\n  <li><a href="https://github.com/CQuIC/qcircuit">Q-circuit GitHub</a></li>\n  <li><a href="https://leimao.github.io/downloads/tools/Latex-Guidance/Qtutorial.pdf">Q-circuit Tutorial</a></li>\n</ul>\n\n  <p><a href="https://leimao.github.io/blog/Drawing-Quantum-Circuit-Using-Q-Circuit/">Drawing Quantum Circuit Using Q-Circuit</a> was originally published by Lei Mao at <a href="https://leimao.github.io">Lei Mao's Log Book</a> on August 16, 2020.</p>	aef5825c513f6321f1758b171812dbffc0073f72	\N	f	2020-08-16 05:10:00	2020-09-10 05:10:13.411372	0			'0':107,130,153 '1':118,157 '16':229 '2':161 '2.75':100 '2020':230 '2em':120,124,141,145 '3em':103 'amsmath':95 'articl':87 'august':228 'begin':96 'better':85 'blog':26 'book':226 'braket':89 'c':99 'circuit':3,7,11,19,36,41,56,68,166,173,178,191,199,202,206,210,214 'code':63 'could':184 'creat':168 'diagram':20,167 'document':97,163 'documentclass':86 'draw':1,17,65,208 'drawn':37,174 'dstick':132,136,146 'em':101 'end':162 'exampl':33,42,46,181 'f':53,122,143 'follow':60,171 'font':79 'found':186 'gate':111 'ghost':139 'github':203 'h':112 'hspace':119,123,140,144 'introduct':8 'ket':105,129,151,155,159 'latex':23,62 'lei':219,222 'log':225 'look':83 'macro':14 'make':75 'mao':220,223 'math':77 'mathbf':106 'mathptmx':74,93 'meter':127 'much':84 'multig':117 'n':109,114,115,125 'note':72 'oracl':51 'origin':216 'otim':113 'packag':15 'particular':45 'post':27 'present':30 'publish':217 'q':6,10,40,177,190,198,201,205,213 'q-circuit':5,9,39,176,189,197,200,204,212 'qcircuit':91,98 'qm':90 'quantum':2,18,35,50,67,165,172,209 'qw':108,110,116,126,131,134,135,138,148,149 'r':102 'refer':195,196 'resourc':179,183 'rm':22,61 'simpl':32 'symbol':78 'time':80 'tutori':192,207 'u':52,121,142 'uparrow':133,137,147 'use':4,38,175,211 'usepackag':88,92,94 'ustick':104,128,150,154,158 'varphi':152,156,160 'would':29 'wrote':58	en	Lei Mao
917	[推荐] 你还在手撕微服务？快试试 go-zero 的微服务自动生成	{"ver":2,"uid":1,"hash":"SHA1:98bcc5b310465fa5bc2c735e24087218e910f910"}	https://toutiao.io/k/xwcsap9	2020-09-07 16:10:11	[推荐] 你还在手撕微服务？快试试 go-zero 的微服务自动生成	10f8f86b5d4b04c211af15c9cd4d4a30a747a6df	\N	f	2020-09-04 01:10:00	2020-09-10 05:10:14.660193	0			'go':5,12 'go-zero':4,11 'zero':6,13 '你还在手撕微服务':2,9 '快试试':3,10 '推荐':1,8 '的微服务自动生成':7,14	zh	
184	ALS Ice Bucket Challenge - Go Style	{"ver":2,"uid":1,"hash":"SHA1:ad9cde7bdbb7a6b151475e06d88fe68144f39238"}	https://www.ardanlabs.com/blog/2014/08/als-ice-bucket-challenge-go-style.html	2014-08-30 00:00:00	If you have not heard about the ALS Ice Bucket Challenge I would be surprised. It&rsquo;s everywhere nowadays, being done by celebrities alike. After being challenged by my children there was only one person, or should I say Gopher, I knew I needed to nominate. The Gopher took to the challenge and here it is:\nI would like to thank my daughter for spending time today filming and editing the video.	3994eb9c65d9c70db6bce77dac6088068c1a68c7	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.511168	0			'al':1,14 'alik':30 'bucket':3,16 'celebr':29 'challeng':4,17,33,58 'children':36 'daughter':69 'done':27 'edit':76 'everywher':24 'film':74 'go':5 'gopher':46,54 'heard':11 'ice':2,15 'knew':48 'like':65 'need':50 'nomin':52 'nowaday':25 'one':40 'person':41 'say':45 'spend':71 'style':6 'surpris':21 'thank':67 'time':72 'today':73 'took':55 'video':78 'would':19,64	en	
884	Go 设计模式（三）：建造者模式	{"ver":2,"uid":1,"hash":"SHA1:8c4476caa110405ffddf43d772496c27e65b72b5"}	https://toutiao.io/k/v2src7x	2020-09-03 03:10:09	Go 设计模式（三）：建造者模式	2bfffba21ace008fe707a68a32082aeb69deaa11	\N	f	2020-09-03 03:10:00	2020-09-03 23:10:09.934698	0			'go':1,5 '三':3,7 '建造者模式':4,8 '设计模式':2,6	zh	
886	关于 AI 的数百个问题，清华男神刘云浩教授的 3 万字回复给整得明明白白	{"ver":2,"uid":1,"hash":"SHA1:8d63eab52c4932498f75bf909a5e70f8712dcd0c"}	https://toutiao.io/k/mhtjnhq	2020-09-03 03:10:09	关于 AI 的数百个问题，清华男神刘云浩教授的 3 万字回复给整得明明白白	a7484bbcaf805ffd00cad366d1a4ef45e6cdbb87	\N	f	2020-09-03 03:10:00	2020-09-03 23:10:09.950402	0			'3':5,11 'ai':2,8 '万字回复给整得明明白白':6,12 '关于':1,7 '清华男神刘云浩教授的':4,10 '的数百个问题':3,9	zh	
887	​GODNSLOG：开源一个新鲜的 DNSLOG	{"ver":2,"uid":1,"hash":"SHA1:3b66643c85bd8c10ff4be3d390464e2adf804b6d"}	https://toutiao.io/k/4atum0t	2020-09-03 03:10:09	​GODNSLOG：开源一个新鲜的 DNSLOG	bc0599e0b89f56537d243215617833172c69198b	\N	f	2020-09-03 03:10:00	2020-09-03 23:10:09.953998	0			'dnslog':3,6 'godnslog':1,4 '开源一个新鲜的':2,5	zh	
873	Ninth Circuit rules NSA's bulk collection of Americans' call records was illegal	{"ver":2,"uid":1,"hash":"SHA1:7d685105857730c93181bb7a21dc49a9517c5625"}	https://www.politico.com/news/2020/09/02/court-rules-nsa-phone-snooping-illegal-407727	2020-09-03 01:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24356741"> https://news.ycombinator.com/item?id=24356741 </a>	443625bd1d959700652e86619eac0f063c22a413	\N	f	2020-09-03 01:10:00	2020-09-06 22:10:10.306178	0			'/item?id=24356741':17 'american':9 'bulk':6 'call':10 'circuit':2 'collect':7 'comment':14 'illeg':13 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24356741':15 'ninth':1 'nsa':4 'record':11 'rule':3	zh	AndrewBissell
885	[推荐] 开发者效率神器，工作 = 干半天 + 玩半天，香	{"ver":2,"uid":1,"hash":"SHA1:02320396322a09289e33ac5c00b36873350d0769"}	https://toutiao.io/k/lsclo7b	2020-09-06 21:10:09	[推荐] 开发者效率神器，工作 = 干半天 + 玩半天，香	b76868b71106f0db73e382314dfa12ae044c506d	\N	f	2020-09-03 03:10:00	2020-09-10 04:10:09.706011	0			'工作':3,9 '干半天':4,10 '开发者效率神器':2,8 '推荐':1,7 '玩半天':5,11 '香':6,12	zh	
888	vivo 悟空活动中台：栅格布局方案	{"ver":2,"uid":1,"hash":"SHA1:066476a6bdddaebb69cfd0a6b11d13a4de9d7b02"}	https://toutiao.io/k/e3k0p0j	2020-09-03 03:10:09	vivo 悟空活动中台：栅格布局方案	924b776c167a39673cee7004a44f29bd46c32bc3	\N	f	2020-09-03 03:10:00	2020-09-03 23:10:09.955869	0			'vivo':1,4 '悟空活动中台':2,5 '栅格布局方案':3,6	zh	
240	Documenting Go Code With Godoc	{"ver":2,"uid":1,"hash":"SHA1:89c665c3d2ab5a4c4113b6045adcf58db17833e0"}	https://www.ardanlabs.com/blog/2013/06/documenting-go-code-with-godoc.html	2013-06-05 00:00:00	As you know if you read my blog, I have been building a set of new utility packages so I can start developing an application server I need for a new project. I am brand new to Go and the Mac OS. Needless to say it has been one hell of an education over the past month. But I don&rsquo;t miss Windows or C# at all.\nI made some progress in my coding and wanted to build documentation for the code.	e40b1b9ed9846f179a5f64035e2acfd4785cf10b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.619844	0			'applic':30 'blog':13 'brand':40 'build':17,83 'c':70 'code':3,79,87 'develop':28 'document':1,84 'educ':58 'go':2,43 'godoc':5 'hell':55 'know':8 'mac':46 'made':74 'miss':67 'month':62 'need':33 'needless':48 'new':21,36,41 'one':54 'os':47 'packag':23 'past':61 'progress':76 'project':37 'read':11 'say':50 'server':31 'set':19 'start':27 'util':22 'want':81 'window':68	en	
146	Integration Testing in Go: Part I - Executing Tests with Docker	{"ver":2,"uid":1,"hash":"SHA1:d2545bff0b46cf863915f06f8b63d9dd3a0b8205"}	https://www.ardanlabs.com/blog/2019/03/integration-testing-in-go-executing-tests-with-docker.html	2019-03-18 00:00:00	Introduction “Testing leads to failure, and failure leads to understanding.” - Burt Rutan\nBurt Rutan is an aerospace engineer who designed Voyager, the first plane to fly around the world without stopping or refueling. Although Rutan was not a software engineer, his words speak volumes to the importance of testing, even testing software. Testing software in all forms is extremely important, whether it be unit, integration, system, or acceptance testing.	777a971dad7b5661d8da46707421a8e9e871e050	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.437767	0			'accept':78 'aerospac':27 'although':44 'around':37 'burt':21,23 'design':30 'docker':10 'engin':28,50 'even':60 'execut':7 'extrem':69 'failur':15,17 'first':33 'fli':36 'form':67 'go':4 'import':57,70 'integr':1,75 'introduct':11 'lead':13,18 'part':5 'plane':34 'refuel':43 'rutan':22,24,45 'softwar':49,62,64 'speak':53 'stop':41 'system':76 'test':2,8,12,59,61,63,79 'understand':20 'unit':74 'volum':54 'voyag':31 'whether':71 'without':40 'word':52 'world':39	en	
188	Methods, Interfaces and Embedded Types in Go	{"ver":2,"uid":1,"hash":"SHA1:9c02749e86da15c0989224805bc47478bd10a45a"}	https://www.ardanlabs.com/blog/2014/05/methods-interfaces-and-embedded-types.html	2014-05-03 00:00:00	Introduction\nMy business partner Ed asked me what would happen if a struct and an embedded field both implemented the same interface. We asked ourselves two questions:\nWould the compiler throw an error because we now had two implementations of the interface? If the compiler accepted the type declaration, how does the compiler determine which implementation to use for interface calls? We hacked out some code to answer the questions and then I dug into the specification.	273a372d96d93a2798276cec1ceca9677274004b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.518901	0			'accept':53 'answer':75 'ask':13,31 'busi':10 'call':68 'code':73 'compil':37,52,60 'declar':56 'determin':61 'dug':81 'ed':12 'embed':4,23 'error':40 'field':24 'go':7 'hack':70 'happen':17 'implement':26,46,63 'interfac':2,29,49,67 'introduct':8 'method':1 'partner':11 'question':34,77 'specif':84 'struct':20 'throw':38 'two':33,45 'type':5,55 'use':65 'would':16,35	en	
1066	Arm Announces Cortex-R82: First 64-Bit Real Time Processor	{"ver":2,"uid":1,"hash":"SHA1:77d3122e08dcabe9e8738392d0a4f2bc58e6a36a"}	https://www.anandtech.com/show/16056/arm-announces-cortexr82-first-64bit-real-time-processor	2020-09-08 05:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24401439"> https://news.ycombinator.com/item?id=24401439 </a>	e169818e8f1685b708b0d9d153bd69a9b0abfc79	\N	f	2020-09-08 05:10:00	2020-09-09 17:10:10.35492	0			'/item?id=24401439':15 '64':7 'announc':2 'arm':1 'bit':8 'comment':12 'cortex':4 'cortex-r82':3 'first':6 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24401439':13 'processor':11 'r82':5 'real':9 'time':10	zh	rbanffy
197	Go Package Management For 2014	{"ver":2,"uid":1,"hash":"SHA1:4932ca617d818827d35f16748c72bda6fbd02cb3"}	https://www.ardanlabs.com/blog/2014/01/go-package-management-for-2014.html	2014-01-16 00:00:00	Introduction\nIn October 2013 I sent out a call to action to the Go community. I wanted to form a group of Gophers that would come together and help write a specification and build a working implementation of a package management tool. We are not there yet, but the group did accomplish a few things:\nWe started a mailing list called Go package management [go-pm] where people could discuss ideas and get feedback on existing and new tools.	4657283783e9a96ba6ef95625e9191edacfda6a3	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.536483	0			'2013':9 '2014':5 'accomplish':57 'action':16 'build':39 'call':14,66 'come':31 'communiti':20 'could':75 'discuss':76 'exist':82 'feedback':80 'form':24 'get':79 'go':1,19,67,71 'go-pm':70 'gopher':28 'group':26,55 'help':34 'idea':77 'implement':42 'introduct':6 'list':65 'mail':64 'manag':3,46,69 'new':84 'octob':8 'packag':2,45,68 'peopl':74 'pm':72 'sent':11 'specif':37 'start':62 'thing':60 'togeth':32 'tool':47,85 'want':22 'work':41 'would':30 'write':35 'yet':52	en	
936	Reddit app got 50M downloads by making mobile web experience miserable	{"ver":2,"uid":1,"hash":"SHA1:796c2d113e4cd2fdae159ee0c5c742a689d86421"}	https://www.androidpolice.com/2020/09/02/reddit-gets-its-app-to-50-million-play-store-downloads-mostly-by-making-the-mobile-web-experience-miserable/	2020-09-04 20:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24372584"> https://news.ycombinator.com/item?id=24372584 </a>	fc8fe0d37706e83923ba6734b6b12294ebc2f65c	\N	f	2020-09-04 13:10:00	2020-09-07 17:10:10.024982	0			'/item?id=24372584':15 '50m':4 'app':2 'comment':12 'download':5 'experi':10 'got':3 'make':7 'miser':11 'mobil':8 'news.ycombinator.com':14 'news.ycombinator.com/item?id=24372584':13 'reddit':1 'web':9	zh	alborzb
204	Label Breaks In Go	{"ver":2,"uid":1,"hash":"SHA1:c9287b1d62add515f4611b98bda49f8778f88812"}	https://www.ardanlabs.com/blog/2013/11/label-breaks-in-go.html	2013-11-21 00:00:00	Have you ever found yourself in this situation. You have a case statement inside of a for loop and you would like to break from both the case and for statements in a single call?\nvar err error\ntimeout := time.After(30 &#42; time.Second)\nsigChan := make(chan os.Signal, 1)\nsignal.Notify(sigChan, os.Interrupt)\ncomplete := make(chan error)\ngo launchProcessor(complete)\nfor {\n&nbsp; &nbsp; select {\n&nbsp; &nbsp; case &lt;-sigChan:\n&nbsp; &nbsp; &nbsp; &nbsp;atomic.StoreInt32(&amp;shutdownFlag, 1)	7c3df1f84ee0fd911894c79f2587d8dc8c054235	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.550402	0			'1':51,68 '30':45 'atomic.storeint32':66 'break':2,28 'call':39 'case':16,32,64 'chan':49,57 'complet':55,61 'err':41 'error':42,58 'ever':7 'found':8 'go':4,59 'insid':18 'label':1 'launchprocessor':60 'like':26 'loop':22 'make':48,56 'os.interrupt':54 'os.signal':50 'select':63 'shutdownflag':67 'sigchan':47,53,65 'signal.notify':52 'singl':38 'situat':12 'statement':17,35 'time.after':44 'time.second':46 'timeout':43 'var':40 'would':25	en	
935	A music video coded in Go	{"ver":2,"uid":1,"hash":"SHA1:fddd2ae86ec3473b885138ac90a9622578daeb58"}	https://golangweekly.com/issues/328	2020-09-04 00:00:00	\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align="center" border="0">\n  <tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <div>    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr>\n<td align="left" style="padding-left: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p>#328 — September 4, 2020</p></td>\n<td align="right" style="padding-right: 4px; font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "><p><a href="https://golangweekly.com/link/94634/rss" style=" color: #0099b4;">Unsubscribe</a>  |  <a href="https://golangweekly.com/link/94635/rss" style=" color: #0099b4;">Read on the Web</a></p></td>\n</tr></table>\n    \n    <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0 12px;"><p>Go<span style="color: #56a7b5;  font-weight: 500;">lang</span> Weekly</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94636/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/xrnlx2pdsjzanq5z5sab.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94636/rss" title="gorm.io" style=" color: #0099b4;    font-size: 1.1em; line-height: 1.4em;">GORM 2.0 Released: A 'Fantastic ORM' for Go</a></span> — With version 2, <a href="https://golangweekly.com/link/94637/rss" style=" color: #0099b4;   ">GORM</a> has been rewritten from scratch and boasts improved performance and modularity. It’s a huge upgrade (nested transactions, batch processing, dry runs, context support..) so updating existing GORM code may take a little work, but if you haven’t used it before, it’s well worth checking out. <a href="https://golangweekly.com/link/94638/rss" style=" color: #0099b4;   ">GitHub repo.</a></p>\n  <p>Jinzhu </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94639/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">An Update on the Proposal for Embedding Files in Go Binaries</a></span> — While there are plenty of tools for embedding files in Go binaries already, the Go team has been discussing the potential of making it an official feature built into <code>cmd/go</code> itself. Here’s the latest discussion on the topic.</p>\n  <p>Russ Cox </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  <a href="https://golangweekly.com/link/94640/rss" style=" color: #0099b4;   "><img src="https://copm.s3.amazonaws.com/87e97607.png" width="110" height="110" style="padding-top: 12px; padding-left: 12px;     line-height: 100%; "></a>\n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94640/rss" title="www.ardanlabs.com" style=" color: #0099b4;    font-size: 1.05em;">Remote Instructor-Led Go, Docker, Kubernetes, &amp; Python Training</a></span> — We offer live-streaming remote training sessions for individual engineers and companies that want to augment their knowledge in Go, Docker, Kubernetes, and Python. We’ve trained over 5,000 engineers via our carefully crafted classes.</p>\n  <p>Ardan Labs <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94641/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Some Examples of Using Generics by the Go Team</a></span> — <code>go2go</code> is a translation tool for experimenting with generics in Go and these examples follow the current generics design draft complete with square brackets.</p>\n  <p>The Go Team </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94642/rss" title="utcc.utoronto.ca" style=" color: #0099b4;    font-size: 1.05em;">Even in Go, Concurrency Is Still Not Easy (With An Example)</a></span> — Goroutines and channels are not all there is to concurrency and you can still make mistakes. Chris shows one such example to prove it’s still on the programmer to use the tools properly.</p>\n  <p>Chris Siebenmann </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94643/rss" title="groups.google.com" style=" color: #0099b4;    font-size: 1.05em;">Go 1.15.1 and 1.14.8 Released</a></span> — Two releases that fix a recently reported security issue when you don’t explicitly set a Content-Type in an HTTP handler (when using <code>net/http/cgi</code> or <code>net/http/fcgi</code>). More <a href="https://golangweekly.com/link/94644/rss" style=" color: #0099b4;   ">about that issue here</a> or hit the <a href="https://golangweekly.com/link/94645/rss" style=" color: #0099b4;   ">downloads page.</a></p>\n  <p>Filippo Valsorda et al. </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>💻 Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94646/rss" title="getstream.io" style=" color: #0099b4;    font-size: 1.05em;">Stream Provides APIs for Building Activity Feeds and Chat</a></span> — Stream is looking for a full time Backend Software Engineer to join our development team. If you are interested in becoming a part of what we do, <a href="https://golangweekly.com/link/94646/rss" style=" color: #0099b4;   ">apply now</a>.</p>\n  <p>Stream </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94647/rss" title="x-team.com" style=" color: #0099b4;    font-size: 1.05em;">Golang Developer at X-Team (Remote)</a></span> — Join the most energizing community for developers and work on projects for Riot Games, FOX, Sony, Coinbase, and more.</p>\n  <p>X-Team </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94648/rss" title="www.vettery.com" style=" color: #0099b4;    font-size: 1.05em;">Find a Job Through Vettery</a></span> — Create a profile on Vettery to connect with hiring managers at startups and Fortune 500 companies. It's free for job-seekers.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>📘 Tutorials</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94649/rss" title="www.thenewdynamic.com" style=" color: #0099b4;    font-size: 1.05em;">Hugo Modules: Everything You Need to Know</a></span> — Hugo, Go’s favorite static site generator, introduced a module system in 0.56.0. This allows you to mount any Hugo project and use some or all of its files.</p>\n  <p>The New Dynamic </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94650/rss" title="threedots.tech" style=" color: #0099b4;    font-size: 1.05em;">Introducing Clean Architecture by Refactoring a Go Project</a></span> — Three Dots Labs has a series of posts building a real microservices project in Go. This post starts a refactoring toward <a href="https://golangweekly.com/link/94651/rss" style=" color: #0099b4;   ">Clean Architecture</a>, an idea around defining clear boundaries within a system.</p>\n  <p>Miłosz Smółka </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94652/rss" title="www.elastic.co" style=" color: #0099b4;    font-size: 1.05em;">An Introduction to the Go Client for Elasticsearch</a></span> — If you’ve got a large amount of data you want to run full text search over, Elasticsearch has probably turned up on your radar. The <a href="https://golangweekly.com/link/94653/rss" style=" color: #0099b4;   ">official Go client</a> now includes features such as retrying requests and discovering cluster nodes and this post digs into how it works.</p>\n  <p>Karel Minarik </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94654/rss" title="commaok.xyz" style=" color: #0099b4;    font-size: 1.05em;">Discovering Alloc Size Classes in Go</a></span> — Go 1.15 changed the way bytes are allocated for an object, rounding up to the nearest “size class.” Read on to find out what that means.</p>\n  <p>Josh Bleecher Snyder </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94655/rss" title="www.bitmovin.com" style=" color: #0099b4;    font-size: 1.05em;">Bitmovin Live IBC Edition - Focused on Innovative Ways to Reduce Costs</a></span></p>\n  <p>Bitmovin Inc. <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94656/rss" title="hasura.io" style=" color: #0099b4;    font-size: 1.05em;">Turn a Go REST API to GraphQL using Hasura Actions</a></span> — How to convert an existing REST API to GraphQL by just defining types and configuring endpoints.</p>\n  <p>Gavin Ray </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🛠 Code &amp; Tools</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94657/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/fksiestdaievg74j0aja.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94657/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Echelon: Hierarchical Progress Bars in Terminal on Overdrive</a></span> — A cross-platform library (yes, even on Windows) to organize progress bars in a hierarchical structure and that can be used from multiple goroutines.</p>\n  <p>Cirrus Labs </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94658/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Apache Pulsar Go Client Library</a></span> — <a href="https://golangweekly.com/link/94659/rss" style=" color: #0099b4;   ">Apache Pulsar</a> is a distributed messaging and streaming platform originally built at Yahoo, and it now has a pure-Go client library.</p>\n  <p>The Apache Software Foundation </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94660/rss" title="www.datadoghq.com" style=" color: #0099b4;    font-size: 1.05em;">Get Instant Insights into Go App Performance with Distributed Tracing</a></span> — Trace requests across service boundaries and optimize bottlenecks by drilling into individual traces end-to-end with flame graphs.</p>\n  <p>Datadog APM <span style="text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #885 !important; padding: 1px 4px; ">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94661/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">gomplate: A Flexible CLI Tool for Template Rendering</a></span> — A template renderer that supports a growing list of sources, such as: JSON, YAML, AWS EC2 metadata, BoltDB, Hashicorp Consul and Hashicorp Vault secrets. Worth looking at the examples here.</p>\n  <p>Dave Henderson </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94662/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/aili1dkktdv3ripzmmws.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94662/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">gookit/color: Terminal Color Rendering Tool Library</a></span> — No dependencies. Supports rich color output at 16-color, 256-color, or even true color (24-bit, RGB) levels.</p>\n  <p>Gookit </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94663/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">db: A Productive Data Access Layer for Different Data Sources</a></span> — db is ORM-‘like’ and provides an agnostic way to work with numerous databases like Postgres, SQLite, MySQL, MongoDB, and SQL Server. There’s <a href="https://golangweekly.com/link/94664/rss" style=" color: #0099b4;   ">a neat online tour</a> stepping through how it works too.</p>\n  <p>upper.io </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94665/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">pgzip 1.2.5: Parallel <code>gzip</code> Compression and Decompression</a></span> — A drop in replacement for <code>compress/gzip</code> with added parallelism.</p>\n  <p>Klaus Post </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94666/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Go Stripe: The Official Library for the Stripe API</a></span> — For when you’re using Stripe for your billing. <a href="https://golangweekly.com/link/94667/rss" style=" color: #0099b4;   ">v72</a> is out now – they certainly like their releases at Stripe :-)</p>\n  <p>Stripe </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94668/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">Zap 1.16: Fast, Structured, Leveled Logging in Go</a></span></p>\n  <p>Uber </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;"><a href="https://golangweekly.com/link/94669/rss" title="github.com" style=" color: #0099b4;    font-size: 1.05em;">httpx 1.0: A Multi-Purpose HTTP Toolkit for Probing Servers</a></span> — A command line tool, written in Go, for running numerous HTTP ‘probers’ at the same time using the <a href="https://golangweekly.com/link/94670/rss" style=" color: #0099b4;   ">retryablehttp library</a> under the hood.</p>\n  <p>Project Discovery </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;"><p>🎲 Fun and Side Projects</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   ">\n  <a href="https://golangweekly.com/link/94671/rss" style=" color: #0099b4;"><img src="https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/mnxftddehfsxt3r04ejy.jpg" width="640" style="    line-height: 100%;  "></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style="font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;">\n  \n  <p><span style="font-weight: 600; font-size: 1.2em !important; color: #000;">▶  <a href="https://golangweekly.com/link/94671/rss" title="www.youtube.com" style=" color: #0099b4;    font-size: 1.05em;">A Music Video Coded with Go</a></span> — It’s all text-based but a neat experiment all the same. <a href="https://golangweekly.com/link/94672/rss" style=" color: #0099b4;   ">Here’s the source code.</a></p>\n  <p>ENAE </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   "></td></tr></table>\n</div>\n  </td></tr>\n</table>\n\n\n\n\n<img src="https://golangweekly.com/open/328/rss" width="1" height="1" />	34db7247ddd3de5592c5b6685018190002a60ccd	\N	f	2020-09-04 13:10:00	2020-09-10 05:10:12.738364	0			'0.56.0':430 '000':172 '1.0':898 '1.14.8':268 '1.15':557 '1.15.1':266 '1.16':889 '1.2.5':841 '16':782 '2':28 '2.0':19 '2020':10 '24':790 '256':784 '328':7 '4':9 '5':171 '500':400 'a':1,21,43,61,193,274,285,326,343,382,387,426,455,462,467,476,488,504,600,637,651,672,686,730,737,742,796,829,847,899,908,937,950 'about':299 'access':799 'across':708 'actions':608 'activity':318 'added':854 'agnostic':812 'al':311 'all':234,443,945,953 'alloc':551 'allocated':563 'allows':432 'already':104 'amount':506 'an':81,116,227,290,481,492,565,612,811 'and':35,39,153,165,202,230,239,267,320,366,376,398,439,536,540,622,654,675,682,711,757,809,824,845,934 'any':436 'apache':664,669,693 'api':603,615,866 'apis':315 'apm':727 'app':701 'apply':349 'architecture':452,480 'ardan':179 'are':94,232,339,562 'around':483 'as':533,748 'at':354,396,680,763,781,885,920 'augment':158 'aws':751 'backend':329 'bars':632,649 'based':948 'batch':48 'be':657 'becoming':342 'been':31,109 'before':71 'billing':875 'binaries':91,103 'bit':791 'bitmovin':585,596 'bleecher':583 'boasts':36 'boltdb':754 'bottlenecks':713 'boundaries':486,710 'brackets':214 'building':317,466 'built':119,679 'but':64,949 'by':187,453,618,714 'bytes':561 'can':241,656 'carefully':176 'certainly':881 'changed':558 'channels':231 'chat':321 'checking':76 'chris':245,263 'cirrus':662 'class':573 'classes':178,553 'clean':451,479 'clear':485 'cli':732 'client':497,528,667,690 'cluster':538 'cmd/go':121 'code':58,627,960 'coded':4,940 'coinbase':375 'color':771,779,783,785,789 'command':909 'community':363 'companies':154,401 'complete':211 'compress/gzip':852 'compression':844 'concurrency':221,238 'configuring':623 'connect':392 'consul':756 'content':287 'content-type':286 'context':52 'convert':611 'costs':595 'cox':132 'crafted':177 'create':386 'cross':639 'cross-platform':638 'current':207 'data':508,798,803 'databases':818 'datadog':726 'dave':767 'db':795,805 'decompression':846 'defining':484,620 'dependencies':776 'design':209 'developer':353 'developers':365 'development':335 'different':802 'digs':543 'discovering':537,550 'discovery':932 'discussing':110 'discussion':127 'distributed':673,704 'do':348 'docker':138,163 'don':281 'dots':459 'downloads':306 'draft':210 'drilling':715 'drop':848 'dry':50 'dynamic':449 'easy':225 'ec2':752 'echelon':629 'edition':588 'elasticsearch':499,517 'embedding':87,99 'enae':961 'end':720,722 'end-to-end':719 'endpoints':624 'energizing':362 'engineer':331 'engineers':152,173 'et':310 'even':218,643,787 'everything':413 'example':228,249 'examples':183,204,765 'existing':56,613 'experiment':952 'experimenting':197 'explicitly':283 'fantastic':22 'fast':890 'favorite':421 'feature':118 'features':531 'feeds':319 'files':88,100,446 'filippo':308 'find':381,577 'fix':273 'flame':724 'flexible':731 'focused':589 'follow':205 'for':24,86,98,150,196,316,325,364,370,405,498,564,734,801,851,863,867,873,905,915 'fortune':399 'foundation':695 'fox':373 'free':404 'from':33,659 'full':327,513 'fun':933 'games':372 'gavin':625 'generator':424 'generics':186,199,208 'get':696 'github':78 'go':6,25,90,102,106,137,162,189,201,216,220,265,419,456,472,496,527,555,556,601,666,689,700,858,895,914,942 'go2go':191 'golang':16,352 'gomplate':729 'gookit':794 'gookit/color':769 'gorm':18,29,57 'goroutines':229,661 'got':503 'graphql':605,617 'graphs':725 'growing':743 'gzip':843 'handler':292 'has':30,108,461,518,685 'hashicorp':755,758 'hasura':607 'haven':67 'henderson':768 'here':123,302,766,956 'hierarchical':630,652 'hiring':394 'hit':304 'hood':930 'how':545,609,835 'http':291,903,918 'httpx':897 'huge':44 'hugo':411,418,437 'ibc':587 'idea':482 'if':65,337,500 'improved':37 'in':5,89,101,161,200,219,289,341,429,471,554,633,650,849,894,913 'inc':597 'includes':530 'individual':151,717 'innovative':591 'insights':698 'instant':697 'instructor':135 'instructor-led':134 'interested':340 'into':120,544,699,716 'introduced':425 'introducing':450 'introduction':493 'is':192,222,236,323,671,806,877 'issue':278,301 'it':41,70,72,115,252,402,546,683,836,943 'its':445 'itself':122 'jinzhu':80 'job':383,407 'job-seekers':406 'jobs':312 'join':333,359 'josh':582 'json':749 'just':619 'karel':548 'klaus':856 'know':417 'knowledge':160 'kubernetes':139,164 'labs':180,460,663 'large':505 'latest':126 'layer':800 'led':136 'leveled':892 'levels':793 'library':641,668,691,774,862,927 'like':808,819,882 'line':910 'list':744 'little':62 'live':145,586 'live-streaming':144 'logging':893 'looking':324,762 'make':243 'making':114 'managers':395 'may':59 'means':581 'messaging':674 'metadata':753 'microservices':469 'minarik':549 'mistakes':244 'miłosz':490 'modularity':40 'module':427 'modules':412 'mongodb':823 'more':298,377 'most':361 'mount':435 'multi':901 'multi-purpose':900 'multiple':660 'music':2,938 'mysql':822 'nearest':571 'neat':830,951 'need':415 'nested':46 'net/http/cgi':295 'net/http/fcgi':297 'new':448 'no':775 'nodes':539 'not':224,233 'now':350,529,684,879 'numerous':817,917 'object':566 'of':96,113,184,345,444,464,507,745 'offer':143 'official':117,526,861 'on':13,83,128,255,368,389,522,575,590,635,644 'one':247 'online':831 'optimize':712 'or':296,303,442,786 'organize':647 'originally':678 'orm':23,807 'our':175,334 'out':77,578,878 'output':780 'over':170,516 'overdrive':636 'page':307 'parallel':842 'parallelism':855 'part':344 'performance':38,702 'pgzip':840 'platform':640,677 'plenty':95 'post':474,542,857 'postgres':820 'posts':465 'potential':112 'probably':519 'probers':919 'probing':906 'processing':49 'productive':797 'profile':388 'programmer':257 'progress':631,648 'project':438,457,470,931 'projects':369,936 'properly':262 'proposal':85 'prove':251 'provides':314,810 'pulsar':665,670 'pure':688 'pure-go':687 'purpose':902 'python':140,166 'radar':524 'ray':626 're':870 'read':12,574 'real':468 'recently':275 'reduce':594 'refactoring':454,477 'released':20,269 'releases':271,884 'remote':133,147,358 'renderer':739 'rendering':736,772 'replacement':850 'repo':79 'reported':276 'requests':535,707 'rest':602,614 'retryablehttp':926 'retrying':534 'rewritten':32 'rgb':792 'rich':778 'riot':371 'rounding':567 'run':512 'running':916 'runs':51 'russ':131 's':42,73,124,253,403,420,828,944,957 'same':922,955 'scratch':34 'search':515 'secrets':760 'security':277 'seekers':408 'september':8 'series':463 'server':826 'servers':907 'service':709 'sessions':149 'set':284 'shows':246 'side':935 'siebenmann':264 'site':423 'size':552,572 'smółka':491 'snyder':584 'so':54 'software':330,694 'some':182,441 'sony':374 'source':959 'sources':746,804 'sponsor':181,598,728 'sql':825 'sqlite':821 'square':213 'starts':475 'startups':397 'static':422 'stepping':833 'still':223,242,254 'stream':313,322,351 'streaming':146,676 'stripe':859,865,872,886,887 'structure':653 'structured':891 'such':248,532,747 'support':53 'supports':741,777 'system':428,489 't':68,282 'take':60 'team':107,190,217,336,357,380 'template':735,738 'terminal':634,770 'text':514,947 'text-based':946 'that':155,272,300,580,655,740 'the':14,84,105,111,125,129,188,206,215,256,260,305,360,447,495,525,559,570,692,764,860,864,921,925,929,954,958 'their':159,883 'there':93,235,827 'these':203 'they':880 'this':431,473,541 'three':458 'through':384,834 'time':328,923 'to':157,237,250,258,332,391,416,434,494,511,569,576,593,604,610,616,646,721,814 'too':838 'tool':195,733,773,911 'toolkit':904 'tools':97,261,628 'topic':130 'tour':832 'toward':478 'trace':706 'traces':718 'tracing':705 'trained':169 'training':141,148 'transactions':47 'translation':194 'true':788 'turn':599 'turned':520 'tutorials':410 'two':270 'type':288 'types':621 'uber':896 'under':928 'unsubscribe':11 'up':521,568 'update':82 'updating':55 'upgrade':45 'upper.io':839 'use':259,440 'used':69,658 'using':185,294,606,871,924 'v72':876 'valsorda':309 'vault':759 've':168,502 'version':27 'vettery':385,390,409 'via':174 'video':3,939 'want':156,510 'way':560,813 'ways':592 'we':142,167,347 'web':15 'weekly':17 'well':74 'what':346,579 'when':279,293,868 'while':92 'windows':645 'with':26,198,212,226,393,703,723,816,853,941 'within':487 'work':63,367,815 'works':547,837 'worth':75,761 'written':912 'x':356,379 'x-team':355,378 'yahoo':681 'yaml':750 'yes':642 'you':66,240,280,338,414,433,501,509,869 'your':523,874 'zap':888		
1023	边缘计算是什么，和云计算的区别是什么？	{"ver":2,"uid":1,"hash":"SHA1:2d33580c06cb1bf7a4bebbd78572bdf09f76c070"}	https://toutiao.io/k/hxgxwxq	2020-09-07 02:10:16	边缘计算是什么，和云计算的区别是什么？	bd9a8e500d3ddded73742d110092e3cab17c8772	\N	f	2020-09-07 02:10:00	2020-09-08 00:10:10.012102	0			'和云计算的区别是什么':2,4 '边缘计算是什么':1,3	zh	
896	Bardcore	{"ver":2,"uid":1,"hash":"SHA1:caeaff2491a0cf74767884df0c4f9b0113d4c949"}	https://en.wikipedia.org/wiki/Bardcore	2020-09-03 08:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24356309"> https://news.ycombinator.com/item?id=24356309 </a>	29a38fbee6dd552792556c1f7024bf7464e216b3	\N	f	2020-09-03 08:10:00	2020-09-06 22:10:10.349995	0			'/item?id=24356309':5 'bardcor':1 'comment':2 'news.ycombinator.com':4 'news.ycombinator.com/item?id=24356309':3	zh	ogogmad
212	Detecting Race Conditions With Go	{"ver":2,"uid":1,"hash":"SHA1:2a5d76ce2e76adb7bb72c940b0538caafebf668f"}	https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html	2013-09-26 00:00:00	I always find it interesting when I realize that something I have been practicing or dealing with for a long time has a name. This time it happens to be race conditions. This is something you can&rsquo;t avoid thinking about as soon as you have more than one routine sharing any kind of resource. If you&rsquo;re not thinking about race conditions in your code, now is the time.\nA race condition is when two or more routines have access to the same resource, such as a variable or data structure and attempt to read and write to that resource without any regard to the other routines.	d1d63ff27bf4506eacbef13cb1092916c0c0ad6b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.56575	0			'access':86 'alway':7 'attempt':99 'avoid':44 'code':71 'condit':3,37,68,78 'data':96 'deal':21 'detect':1 'find':8 'go':5 'happen':33 'interest':10 'kind':58 'long':25 'name':29 'one':54 'practic':19 'race':2,36,67,77 're':63 'read':101 'realiz':13 'regard':109 'resourc':60,90,106 'routin':55,84,113 'share':56 'someth':15,40 'soon':48 'structur':97 'think':45,65 'time':26,31,75 'two':81 'variabl':94 'without':107 'write':103	en	
1027	Noita – roguelite where every pixel is simulated	{"ver":2,"uid":1,"hash":"SHA1:a84105294879cbb1ee67282da4a0dc4e79a276c2"}	https://noitagame.com/	2020-09-07 04:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24394259"> https://news.ycombinator.com/item?id=24394259 </a>	3b1db464f586537c3f8093e62116bb3587c068c4	\N	f	2020-09-07 04:10:00	2020-09-10 05:10:14.183751	0			'/item?id=24394259':11 'comment':8 'everi':4 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24394259':9 'noita':1 'pixel':5 'roguelit':2 'simul':7	zh	ducaale
953	从两周发布上线到一周发布上线，如何做到高效稳定？	{"ver":2,"uid":1,"hash":"SHA1:8a270f49357bdbe98725b0dc49991c6eb0f40865"}	https://toutiao.io/k/7kgclu1	2020-09-05 04:10:09	从两周发布上线到一周发布上线，如何做到高效稳定？	be71bc5a363c2d7f697d28b65004705cce6e8d84	\N	f	2020-09-05 04:10:00	2020-09-06 00:10:10.392166	0			'从两周发布上线到一周发布上线':1,3 '如何做到高效稳定':2,4	zh	
891	创业那些坑很难避免，要磨练在坑里吸取营养的能力	{"ver":2,"uid":1,"hash":"SHA1:a777d6fcfcb7dade73d9dcb7563ab27644062d61"}	https://toutiao.io/k/okhhm2p	2020-09-03 06:10:09	创业那些坑很难避免，要磨练在坑里吸取营养的能力	1cc2a168ae0f458063f08228261a056b01cfb2f9	\N	f	2020-09-03 06:10:00	2020-09-03 23:10:09.957681	0			'创业那些坑很难避免':1,3 '要磨练在坑里吸取营养的能力':2,4	zh	
1011	Hard to discover tips and apps for macOS	{"ver":2,"uid":1,"hash":"SHA1:564b31279e2d97c4a9fd00757ad689e2f6abab6b"}	https://thume.ca/2020/09/04/macos-tips/	2020-09-07 02:10:14	Comments: <a href="https://news.ycombinator.com/item?id=24391899"> https://news.ycombinator.com/item?id=24391899 </a>	c397149463ae6cccf0c16ddd50c777f306e12908	\N	f	2020-09-07 02:10:00	2020-09-10 05:10:14.214	0			'/item?id=24391899':12 'app':6 'comment':9 'discov':3 'hard':1 'maco':8 'news.ycombinator.com':11 'news.ycombinator.com/item?id=24391899':10 'tip':4	zh	trishume
660	[推荐] 消息队列之推还是拉，RocketMQ 和 Kafka 是如何做的？	{"ver":2,"uid":1,"hash":"SHA1:81aa86cd78d623a942e11f875e84c24c235aa9f5"}	https://toutiao.io/k/749snp6	2020-08-30 18:10:08	[推荐] 消息队列之推还是拉，RocketMQ 和 Kafka 是如何做的？	c819fcab40a830d69b8edb1d630d8d7c957e6151	\N	f	2020-08-27 02:10:00	2020-09-10 05:10:14.644693	0			'kafka':5,11 'rocketmq':3,9 '和':4,10 '推荐':1,7 '是如何做的':6,12 '消息队列之推还是拉':2,8	zh	
949	「码农周刊 VIP 会员专属邮件周报」今晚发送，赶紧上车吧！	{"ver":2,"uid":1,"hash":"SHA1:878e68c9aac4a08a8635306ad38bfe848d6dab42"}	https://toutiao.io/k/309i83k	2020-09-05 02:10:10	「码农周刊 VIP 会员专属邮件周报」今晚发送，赶紧上车吧！	e3d0410eefa8d3e52ece19b8dacdeba9c472bf90	\N	f	2020-09-05 02:10:00	2020-09-07 00:10:14.527895	0			'vip':2,7 '今晚发送':4,9 '会员专属邮件周报':3,8 '码农周刊':1,6 '赶紧上车吧':5,10	zh	
1032	[译] Jetpack Compose Alpha 版现已发布	{"ver":2,"uid":1,"hash":"SHA1:51857b2d06ca56e63cebb26753b605a05908d479"}	https://toutiao.io/k/tfsglqj	2020-09-07 05:10:10	[译] Jetpack Compose Alpha 版现已发布	28ed49c3afb9bb454eb29b2e59cbf3771a4ed028	\N	f	2020-09-07 05:10:00	2020-09-08 00:10:10.02664	0			'alpha':4,9 'compose':3,8 'jetpack':2,7 '版现已发布':5,10 '译':1,6	zh	
1030	App 使用 HTTP 2 协议的一点小收获	{"ver":2,"uid":1,"hash":"SHA1:ab89535e114123a6454c8debe7a49740bcbe545c"}	https://toutiao.io/k/1jjx19e	2020-09-07 05:10:10	App 使用 HTTP 2 协议的一点小收获	d8336e007ffb2016ab7de8eb84a7401cf771fb64	\N	f	2020-09-07 05:10:00	2020-09-08 00:10:10.032488	0			'2':4,9 'app':1,6 'http':3,8 '使用':2,7 '协议的一点小收获':5,10	zh	
219	Using CGO with Pkg-Config And Custom Dynamic Library Locations	{"ver":2,"uid":1,"hash":"SHA1:86126975e5181cb7f2828fb8291e5462f1533294"}	https://www.ardanlabs.com/blog/2013/08/using-cgo-with-pkg-config-and-custom.html	2013-08-31 00:00:00	Earlier in the month I wrote a post about using C Dynamic Libraries in Go Programs. The article built a dynamic library in C and created a Go program that used it. The program worked but only if the dynamic library was in the same folder as the program.\nThis constraint does not allow for the use of the go get command to download, build and install a working version of the program.	67084972e58cb125600ff79cbbf34f78fb2fcb67	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.579031	0			'allow':65 'articl':29 'build':76 'built':30 'c':22,35 'cgo':2 'command':73 'config':6 'constraint':62 'creat':37 'custom':8 'download':75 'dynam':9,23,32,51 'earlier':12 'folder':57 'get':72 'go':26,39,71 'instal':78 'librari':10,24,33,52 'locat':11 'month':15 'pkg':5 'pkg-config':4 'post':19 'program':27,40,45,60,84 'use':1,21,42,68 'version':81 'work':46,80 'wrote':17	en	
948	《Midway Serverless 的基础展示以及原理》文字版	{"ver":2,"uid":1,"hash":"SHA1:052a44fd29241932da18ab51f9d7cd6579420ab3"}	https://toutiao.io/k/4oantsg	2020-09-05 02:10:10	《Midway Serverless 的基础展示以及原理》文字版	3616c851c58fd65472b3471527bc56c411905828	\N	f	2020-09-05 02:10:00	2020-09-06 00:10:10.383175	0			'midway':1,5 'serverless':2,6 '文字版':4,8 '的基础展示以及原理':3,7	zh	
950	client-go 之 DeltaFIFO 实现原理	{"ver":2,"uid":1,"hash":"SHA1:a5e42801a238cb3696cc0cbee1b343dec89ea120"}	https://toutiao.io/k/hd1n3bc	2020-09-05 02:10:10	client-go 之 DeltaFIFO 实现原理	6e145f26089a570471cf9e843589c1c21d2bed95	\N	f	2020-09-05 02:10:00	2020-09-06 00:10:10.39805	0			'client':2,8 'client-go':1,7 'deltafifo':5,11 'go':3,9 '之':4,10 '实现原理':6,12	zh	
1031	玩转 VS Code 之你可能不知道的一些技巧	{"ver":2,"uid":1,"hash":"SHA1:3980100b89b7aeefd4dd8aa2857152026f9b62a2"}	https://toutiao.io/k/viwz9rw	2020-09-07 05:10:10	玩转 VS Code 之你可能不知道的一些技巧	9db673b1c98ed57f1f990451588468988eccfbfe	\N	f	2020-09-07 05:10:00	2020-09-08 00:10:10.024453	0			'code':3,7 'vs':2,6 '之你可能不知道的一些技巧':4,8 '玩转':1,5	zh	
1028	编程体系结构：Java 异常体系	{"ver":2,"uid":1,"hash":"SHA1:c4a3844f632eb9d859cfd65777d076884df3878a"}	https://toutiao.io/k/0iadppl	2020-09-07 05:10:10	编程体系结构：Java 异常体系	e43d5b6f5677be68b47ec59f18c15f6168a6dd82	\N	f	2020-09-07 05:10:00	2020-09-08 00:10:10.028621	0			'java':2,5 '异常体系':3,6 '编程体系结构':1,4	zh	
1029	Kerberos 和 Apache Sentry 干货实践（下）	{"ver":2,"uid":1,"hash":"SHA1:550f42ddfb701791e912107e418b6d9227c1d841"}	https://toutiao.io/k/cpkzhfh	2020-09-07 05:10:10	Kerberos 和 Apache Sentry 干货实践（下）	4fdfdd6b1279b194efc4e26939ecd64080bc945b	\N	f	2020-09-07 05:10:00	2020-09-08 00:10:10.030575	0			'apache':3,9 'kerberos':1,7 'sentry':4,10 '下':6,12 '和':2,8 '干货实践':5,11	zh	
222	Using C Dynamic Libraries In Go Programs	{"ver":2,"uid":1,"hash":"SHA1:e6bc26834627755159cf62360cc28dfef6618f2c"}	https://www.ardanlabs.com/blog/2013/08/using-c-dynamic-libraries-in-go-programs.html	2013-08-20 00:00:00	My son and I were having fun last weekend building a console based game in Go. I was recreating a game from my youth, back when I was programming on a Kaypro II.\nI loved this computer. I would write games in BASIC on it all day and night. Did I mention it was portable. The keyboard would strap in and you could carry it around. LOL.\nBut I digress, back to my Go program.	abf6e155af4871c8f4adc14e0986694fc23500fb	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.584822	0			'around':73 'back':32,78 'base':20 'basic':50 'build':17 'c':2 'carri':71 'comput':44 'consol':19 'could':70 'day':54 'digress':77 'dynam':3 'fun':14 'game':21,28,48 'go':6,23,81 'ii':40 'kaypro':39 'keyboard':64 'last':15 'librari':4 'lol':74 'love':42 'mention':59 'night':56 'portabl':62 'program':7,36,82 'recreat':26 'son':9 'strap':66 'use':1 'weekend':16 'would':46,65 'write':47 'youth':31	en	
983	test	{"ver":2,"uid":1,"hash":"SHA1:fa1a57e6a5553459384af885b7b5a4287b86f853"}	https://rustcc.cn/article?id=63583f31-3016-4a39-b737-fdc39cb07551	2020-07-25 10:28:04	<p>test</p>\n	664743b5019bedf6f56441de8a23039ecda7cb64	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.201582	0			'test':1,2		
984	持续提高优质rust语言框架	{"ver":2,"uid":1,"hash":"SHA1:38f345c2fb50ea1f5dc4ee571c34c81f90613a6f"}	https://rustcc.cn/article?id=4a045817-7980-4c90-830b-8a240d4bafcf	2020-07-13 15:26:32	<p>我的github链接  https://github.com/zhuxiujia</p>\n<p>持续提高优质rust语言框架</p>\n	07adb659c5b459f0b64f0fdbd08834f306702c04	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.204032	0			'/zhuxiujia':5 'github.com':4 'github.com/zhuxiujia':3 '我的github链接':2 '持续提高优质rust语言框架':1,6		
1079	Assange Hearing Day 6	{"ver":2,"uid":1,"hash":"SHA1:d9a5cc7513fe91a0a1399ed8f0bb50b03610af0d"}	https://www.craigmurray.org.uk/archives/2020/09/your-man-in-the-public-gallery-the-assange-hearing-day-6	2020-09-08 17:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24406276"> https://news.ycombinator.com/item?id=24406276 </a>	07d12a7a7a1b30f61400686db17e9139d54d3667	\N	f	2020-09-08 17:10:00	2020-09-10 05:10:14.212148	0			'/item?id=24406276':8 '6':4 'assang':1 'comment':5 'day':3 'hear':2 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24406276':6	zh	k1m
947	[推荐] 有赞零售移动 CI/CD 实践	{"ver":2,"uid":1,"hash":"SHA1:9da6b1d60e6771335ccddd9006f60235b43a0bfb"}	https://toutiao.io/k/w7nj4wa	2020-09-08 17:10:10	[推荐] 有赞零售移动 CI/CD 实践	087777b5b23df19c5137a9ad701a7714c2ed681f	\N	f	2020-09-05 02:10:00	2020-09-10 05:10:14.667141	0			'ci/cd':3,7 '实践':4,8 '推荐':1,5 '有赞零售移动':2,6	zh	
231	Understanding Type in Go	{"ver":2,"uid":1,"hash":"SHA1:3a99d0457e566af6d2b29c2a0b940e0605ee6171"}	https://www.ardanlabs.com/blog/2013/07/understanding-type-in-go.html	2013-07-12 00:00:00	When I was coding in C/C++ it was&nbsp;imperative to understand type. If you didn&rsquo;t, you would get into a lot of trouble with both the compiler and running your code. Regardless of the language, type touches every aspect of programming syntax. A good understand of types and pointers is critical to good programming. This post will focus on type.\nTake these bytes of memory for starters:\nFFE4 FFE3 FFE2 FFE1 00000000 11001011 01100101 00001010	4cc3d3b3f32af1e1bcb04652bc7a3a724d1c7dec	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.602783	0			'00000000':77 '00001010':80 '01100101':79 '11001011':78 'aspect':44 'byte':68 'c/c':10 'code':8,36 'compil':32 'critic':56 'didn':19 'everi':43 'ffe1':76 'ffe2':75 'ffe3':74 'ffe4':73 'focus':63 'get':23 'go':4 'good':49,58 'imper':13 'languag':40 'lot':26 'memori':70 'pointer':54 'post':61 'program':46,59 'regardless':37 'run':34 'starter':72 'syntax':47 'take':66 'touch':42 'troubl':28 'type':2,16,41,52,65 'understand':1,15,50 'would':22	en	
979	【Rust日报】2020-09-02「AWS」 Bottlerocket – 专为运行容器而打造的基于 Linux 的全新开源操作系统	{"ver":2,"uid":1,"hash":"SHA1:97390c0c127fac44b714378f5dcab77062324bcc"}	https://rustcc.cn/article?id=a6fc81fe-44f1-41d5-be6a-bab10d09fa14	2020-09-02 14:56:26	<h3>「AWS」 Bottlerocket – 专为运行容器而打造的基于 Linux 的全新开源操作系统</h3>\n<p>今天，Amazon Web Services (AWS) 宣布全面推出 <a href="https://github.com/bottlerocket-os/bottlerocket" rel="noopener noreferrer">Bottlerocket</a>，这是一种专为运行容器而打造的基于 Linux 的全新开源操作系统 (OS)。Bottlerocket 仅包括运行容器所需的软件，并且附带事务更新机制。这些属性使客户能够使用容器协调器以最小的中断来管理操作系统更新，从而提高容器化应用程序的安全性并降低运营成本。AWS 提供的 Bottlerocket 映像适用于 Amazon EKS (GA) 和 Amazon ECS（预览版）。Bottlerocket 是作为 <a href="https://github.com/bottlerocket-os/bottlerocket" rel="noopener noreferrer">GitHub 上的开源项目</a>开发的。</p>\n<p>详情请见-aws-china:<a href="https://amazonaws-china.com/cn/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/" rel="noopener noreferrer">https://amazonaws-china.com/cn/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/</a></p>\n<p>详情请见-Github:<a href="https://github.com/bottlerocket-os/bottlerocket" rel="noopener noreferrer">https://github.com/bottlerocket-os/bottlerocket</a></p>\n<h3>关于 1.46.0 stable 的 "const fn"</h3>\n<p>关于<code>const fn</code>已经有很多讨论了,这篇文章只是作者个人对问题的所答</p>\n<p>那为什么<code>const fn</code>有用呢？一个简单的例子</p>\n<pre><code>    // a normal function\n    fn foo(n: usize) -&gt; usize {\n        n + 1\n    }\n\n    fn main() {\n        const BAR: usize = foo(5);\n        let array = [0_u8; foo(7)];\n    }\n</code></pre>\n<pre><code>   // a constant function\n    const fn foo(n: usize) -&gt; usize {\n        n + 1\n    }\n\n</code></pre>\n<p>更多关于<code>const fn</code>的讨论:<a href="https://old.reddit.com/r/rust/comments/ihnnnz/announcing_rust_1460_rust_blog/" rel="noopener noreferrer">https://old.reddit.com/r/rust/comments/ihnnnz/announcing_rust_1460_rust_blog/</a></p>\n<p>详情请见:<a href="https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/" rel="noopener noreferrer">https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/</a></p>\n<hr>\n<p>From 日报小组 冰山上的 mook</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	c35beab3b2d38ff65182e3420f2af8d84f8cedac	\N	f	2020-09-06 06:10:00	2020-09-07 09:10:03.6447	0			'-02':4 '-09':3 '/bottlerocket-os/bottlerocket':58 '/cn/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/':52 '/r/rust/comments/ihnnnz/announcing_rust_1460_rust_blog/':109 '/r/rust/comments/iksmgk/psa_what_is_const_fn/':113 '0':90 '1':80,104 '1.46.0':60 '2020':2 '5':87 '7':93 'a':71,94 'amazon':16,35,39 'amazonaws-china.com':51 'amazonaws-china.com/cn/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/':50 'array':89 'aws':5,10,19,31,48 'bar':84 'bottlerocket':6,11,21,26,33,42 'china':49 'const':63,83,97 'constant':95 'ecs':40 'eks':36 'fn':64,74,81,98 'fn已经有很多讨论了':66 'fn有用呢':69 'fn的讨论':106 'foo':75,86,92,99 'from':114 'function':73,96 'ga':37 'github':44,55 'github.com':57 'github.com/bottlerocket-os/bottlerocket':56 'let':88 'linux':8,13,23 'main':82 'mook':117 'n':76,79,100,103 'normal':72 'old.reddit.com':108 'old.reddit.com/r/rust/comments/ihnnnz/announcing_rust_1460_rust_blog/':107 'os':25 'rustcc论坛':119 'rust日报':1 'rust语言中文社区':122 'services':18 'stable':61 'u8':91 'usize':77,78,85,101,102 'web':17 'www.reddit.com':112 'www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/':111 '一个简单的例子':70 '上的开源项目开发的':45 '专为运行容器而打造的基于':7,12 '仅包括运行容器所需的软件':27 '今天':15 '从而提高容器化应用程序的安全性并降低运营成本':30 '关于':59 '关于const':65 '冰山上的':116 '和':38 '宣布全面推出':20 '并且附带事务更新机制':28 '微信公众号':121 '提供的':32 '支持rss':120 '日报小组':115 '映像适用于':34 '是作为':43 '更多关于const':105 '的':62 '的全新开源操作系统':9,14,24 '社区学习交流平台订阅':118 '详情请见':47,54,110 '详情请见-aws-china':46 '详情请见-github':53 '这些属性使客户能够使用容器协调器以最小的中断来管理操作系统更新':29 '这是一种专为运行容器而打造的基于':22 '这篇文章只是作者个人对问题的所答':67 '那为什么const':68 '预览版':41		
989	Tetra-examples	{"ver":2,"uid":1,"hash":"SHA1:548bb748293007b42a199ae9f36cd95694c9375e"}	https://rustcc.cn/article?id=0f1be934-d46b-42d9-8ede-4e58ffa9e109	2020-06-20 10:01:25	<h1>Examples 范例</h1>\n<p>Tetra has a fairly large suite of examples - to try them out, clone the repository and run:<br>\nTetra 项目包含许多的示例 - 可以克隆下来直接试用：</p>\n<pre><code>cargo run --example example_name\n\n</code></pre>\n<p>You can also click on the name of the example below to view the source code.</p>\n<p>可以点击下面示例名称，直接查看源代码。</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="left">Category</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">名称</td>\n<td align="left">类别</td>\n<td align="left">说明</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/hello_world.rs" rel="noopener noreferrer"><code>hello_world</code></a></td>\n<td align="left">Basic</td>\n<td align="left">Opens a window and clears it with a solid color.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/hello_world.rs" rel="noopener noreferrer"><code>hello_world</code></a></td>\n<td align="left">基础</td>\n<td align="left">一个纯色的Hello World 窗口</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/texture.rs" rel="noopener noreferrer"><code>texture</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Loads and displays a texture.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/texture.rs" rel="noopener noreferrer"><code>texture</code></a></td>\n<td align="left">图形</td>\n<td align="left">显示纹理的窗口</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/animation.rs" rel="noopener noreferrer"><code>animation</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Displays an animation, made up of regions from a texture.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/animation.rs" rel="noopener noreferrer"><code>animation</code></a></td>\n<td align="left">图形</td>\n<td align="left">纹理组成的动画窗口</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/text.rs" rel="noopener noreferrer"><code>text</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Displays text using a TTF font.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/text.rs" rel="noopener noreferrer"><code>text</code></a></td>\n<td align="left">图形</td>\n<td align="left">示范采用TTF字体显示文本的窗口</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/nineslice.rs" rel="noopener noreferrer"><code>nineslice</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Slices a texture into nine segments to display a dialog box.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/nineslice.rs" rel="noopener noreferrer"><code>nineslice</code></a></td>\n<td align="left">图形</td>\n<td align="left">示范九宫格对话框</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/scaling.rs" rel="noopener noreferrer"><code>scaling</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Demonstrates the different screen scaling algorithms.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/scaling.rs" rel="noopener noreferrer"><code>scaling</code></a></td>\n<td align="left">图形</td>\n<td align="left">示范演示屏幕缩放算法</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/shaders.rs" rel="noopener noreferrer"><code>shaders</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Uses a custom shader to render a texture.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/shaders.rs" rel="noopener noreferrer"><code>shaders</code></a></td>\n<td align="left">图形</td>\n<td align="left">使用自定义纹理渲染</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/canvas.rs" rel="noopener noreferrer"><code>canvas</code></a></td>\n<td align="left"></td>\n<td align="left">Graphics</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/canvas.rs" rel="noopener noreferrer"><code>canvas</code></a></td>\n<td align="left">图形</td>\n<td align="left">示范使用自定义纹理渲染后的效果</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/camera.rs" rel="noopener noreferrer"><code>camera</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Demonstrates how to use a camera to transform the scene.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/camera.rs" rel="noopener noreferrer"><code>camera</code></a></td>\n<td align="left">图形</td>\n<td align="left">演示如何转换场景。</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/interpolation.rs" rel="noopener noreferrer"><code>interpolation</code></a></td>\n<td align="left">Graphics</td>\n<td align="left">Demonstrates how to interpolate between updates.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/interpolation.rs" rel="noopener noreferrer"><code>interpolation</code></a></td>\n<td align="left">图形</td>\n<td align="left">演示如何添加部件<em><strong>需要看代码 没太明白</strong></em></td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/audio.rs" rel="noopener noreferrer"><code>audio</code></a></td>\n<td align="left">Audio</td>\n<td align="left">Plays back an audio file.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/audio.rs" rel="noopener noreferrer"><code>audio</code></a></td>\n<td align="left">音频</td>\n<td align="left">播放音频</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/keyboard.rs" rel="noopener noreferrer"><code>keyboard</code></a></td>\n<td align="left">Input</td>\n<td align="left">Moves a texture around based on keyboard input.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/keyboard.rs" rel="noopener noreferrer"><code>keyboard</code></a></td>\n<td align="left">图形</td>\n<td align="left">演示用键盘控制移动</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/animation_controller.rs" rel="noopener noreferrer"><code>animation_controller</code></a></td>\n<td align="left">Input</td>\n<td align="left">Moves a sprite around, with the animation changing based on keyboard input.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/animation_controller.rs" rel="noopener noreferrer"><code>animation_controller</code></a></td>\n<td align="left">输入</td>\n<td align="left">演示键盘控制移动目标</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/mouse.rs" rel="noopener noreferrer"><code>mouse</code></a></td>\n<td align="left">Input</td>\n<td align="left">Moves a texture around based on mouse input.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/mouse.rs" rel="noopener noreferrer"><code>mouse</code></a></td>\n<td align="left">输入</td>\n<td align="left">演示鼠标控制移动目标</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/gamepad.rs" rel="noopener noreferrer"><code>gamepad</code></a></td>\n<td align="left">Input</td>\n<td align="left">Displays the input from a connected gamepad.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/gamepad.rs" rel="noopener noreferrer"><code>gamepad</code></a></td>\n<td align="left">输入</td>\n<td align="left">演示用游戏杆控制</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/text_input.rs" rel="noopener noreferrer"><code>text_input</code></a></td>\n<td align="left">Input</td>\n<td align="left">Displays text as it is typed in by the player.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/text_input.rs" rel="noopener noreferrer"><code>text_input</code></a></td>\n<td align="left">输入</td>\n<td align="left">演示文本输入</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/file_drop.rs" rel="noopener noreferrer"><code>file_drop</code></a></td>\n<td align="left">Input</td>\n<td align="left">Loads a file that the user drags and drops into the window.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/file_drop.rs" rel="noopener noreferrer"><code>file_drop</code></a></td>\n<td align="left">输入</td>\n<td align="left">加载用户拖入窗口的文件。</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/events.rs" rel="noopener noreferrer"><code>events</code></a></td>\n<td align="left">Input</td>\n<td align="left">Shows what events can be fired by the engine.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/events.rs" rel="noopener noreferrer"><code>events</code></a></td>\n<td align="left">输入</td>\n<td align="left">显示触发的事件。</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/bunnymark.rs" rel="noopener noreferrer"><code>bunnymark</code></a></td>\n<td align="left">Benchmark</td>\n<td align="left">Benchmarks rendering performance by rendering lots of bunnies.</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/bunnymark.rs" rel="noopener noreferrer"><code>bunnymark</code></a></td>\n<td align="left">测试</td>\n<td align="left">演示渲染性能。</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/tetras.rs" rel="noopener noreferrer"><code>tetras</code></a></td>\n<td align="left">Game</td>\n<td align="left">A full example game (which is entirely legally distinct from a certain other block-based puzzle game  <em>cough</em>).</td>\n</tr>\n<tr>\n<td align="center"><a href="https://github.com/17cupsofcoffee/tetra/blob/main/examples/tetras.rs" rel="noopener noreferrer"><code>tetras</code></a></td>\n<td align="left">游戏</td>\n<td align="left">一个完整的示例游戏</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>LICENSE</p>\n<p>Copyright 2020 Joe Clay</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n	4ee1ad0a4dc193eccfba9248851d1cc196a2be72	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.215853	0			'2020':338 'a':8,59,65,79,94,104,113,120,140,145,161,195,209,227,243,270,314,324,352,452 'above':408 'action':478 'algorithms':133 'all':419 'also':33 'an':87,186,477 'and':21,61,77,276,357,389,411,455 'and/or':383 'animation':84,88,96,205,214,220 'any':349,436,469 'arising':484 'around':197,211,229 'as':254,431 'associated':358 'audio':182,183,187,189 'authors':462 'back':185 'based':198,216,230,329 'basic':57 'be':291,416,466 'below':41 'benchmark':300 'benchmarks':301 'between':176 'block':328 'block-based':327 'box':122 'bunnies':308 'bunnymark':299,309 'but':442 'by':259,293,304 'camera':155,162,167 'can':32,290 'canvas':150,152 'cargo':26 'category':50 'certain':325 'changing':215 'charge':347 'claim':470 'clay':340 'clears':62 'click':34 'clone':18 'code':46 'color':67 'conditions':406 'connected':244 'connection':490 'contract':480 'controller':206,221 'copies':385,420 'copy':353,377 'copyright':337,409,464 'cough':332 'custom':141 'damages':471 'deal':364 'dealings':499 'demonstrates':128,157,172 'description':51 'dialog':121 'different':130 'display':119 'displays':78,86,101,239,252 'distinct':322 'distribute':381 'do':400 'documentation':359 'drags':275 'drop':267,282 'drops':277 'engine':295 'entirely':320 'event':459 'events':285,289,296 'example':28,29,40,316 'examples':3,4,13 'express':438 'fairly':9 'file':188,266,271,281 'files':360 'fired':292 'fitness':450 'following':405 'font':106 'for':451,468 'free':345 'from':93,242,323,485 'full':315 'furnished':398 'game':313,317,331 'gamepad':237,245,246 'granted':344 'graphics':75,85,100,111,127,138,151,156,171 'has':7 'hello':55,68 'hereby':343 'holders':465 'how':158,173 'implied':440 'in':258,365,418,457,476,489,500 'included':417 'including':370,441 'input':193,201,207,219,225,233,238,241,250,251,263,268,286 'interpolate':175 'interpolation':170,178 'into':115,278 'is':256,319,342,397,429,432 'it':63,255 'joe':339 'keyboard':192,200,202,218 'kind':437 'large':10 'legally':321 'liability':474 'liable':467 'license':336 'limitation':372 'limited':444 'loads':76,269 'lots':306 'made':89 'merchantability':449 'merge':379 'modify':378 'mouse':224,232,234 'moves':194,208,226 'name':30,37,49 'nine':116 'nineslice':110,123 'no':458 'noninfringement':456 'not':443 'notice':410,414 'obtaining':351 'of':12,38,91,307,346,354,386,424,435,448,479,487 'on':35,199,217,231 'opens':58 'or':421,439,463,472,482,488,494,497 'other':326,473,498 'otherwise':483 'out':17,486 'particular':453 'performance':303 'permission':341,413 'permit':391 'person':350 'persons':392 'player':261 'plays':184 'portions':423 'provided':430 'publish':380 'purpose':454 'puzzle':330 'regions':92 'render':144 'rendering':302,305 'repository':20 'restriction':369 'rights':374 'run':22,27 'scaling':126,132,134 'scene':166 'screen':131 'segments':117 'sell':384 'shader':142 'shaders':137,147 'shall':415,460 'shows':287 'slices':112 'so':401 'software':356,362,367,388,396,426,428,493,502 'solid':66 'source':45 'sprite':210 'subject':402 'sublicense':382 'substantial':422 'suite':11 'tetra':2,6,23 'tetra-examples':1 'tetras':312,333 'text':99,102,107,249,253,262 'texture':74,80,81,95,114,146,196,228 'that':272 'the':19,36,39,44,129,165,213,240,260,273,279,294,361,366,373,387,395,404,407,425,427,446,461,492,495,501 'them':16 'this':355,412 'to':14,42,118,143,159,163,174,348,363,375,390,393,399,403,445 'tort':481 'transform':164 'try':15 'ttf':105 'typed':257 'up':90 'updates':177 'use':160,376,496 'user':274 'uses':139 'using':103 'view':43 'warranties':447 'warranty':434 'what':288 'whether':475 'which':318 'whom':394 'window':60,280 'with':64,212,491 'without':368,371,433 'world':56,69,72 'you':31 '一个完整的示例游戏':335 '一个纯色的hello':71 '使用自定义纹理渲染':149 '加载用户拖入窗口的文件':284 '可以克隆下来直接试用':25 '可以点击下面示例名称':47 '名称':52 '图形':82,97,108,124,135,148,153,168,179,203 '基础':70 '播放音频':191 '显示纹理的窗口':83 '显示触发的事件':298 '没太明白':181 '测试':310 '游戏':334 '演示如何添加部件需要看代码':180 '演示如何转换场景':169 '演示文本输入':265 '演示渲染性能':311 '演示用游戏杆控制':248 '演示用键盘控制移动':204 '演示键盘控制移动目标':223 '演示鼠标控制移动目标':236 '直接查看源代码':48 '示范九宫格对话框':125 '示范使用自定义纹理渲染后的效果':154 '示范演示屏幕缩放算法':136 '示范采用ttf字体显示文本的窗口':109 '窗口':73 '类别':53 '纹理组成的动画窗口':98 '范例':5 '说明':54 '输入':222,235,247,264,283,297 '音频':190 '项目包含许多的示例':24		
990	Tetra-install	{"ver":2,"uid":1,"hash":"SHA1:00b1fe07877b08e6d056e08e7575ff920124948a"}	https://rustcc.cn/article?id=9f662886-9c1b-46bd-b464-1494b0f9f979	2020-06-20 09:55:56	<h1>Installation 安装</h1>\n<p>To get started with Tetra, you'll need a couple of things installed:\n首先在采用Tetra之前，你需要做的一些准备。</p>\n<ul>\n<li>The latest stable version of Rust<br>\n最新版本的Rust稳定版</li>\n<li>The SDL 2.0 development libraries<br>\nSDL 2.0 开发包</li>\n<li>The ALSA development libraries (only required on Linux)<br>\n如果是Linux环境，还应该安装 ALSA 开发包</li>\n</ul>\n<h2><a href="https://tetra.seventeencups.net/installation/#installing-rust" rel="noopener noreferrer">#</a>Installing Rust 安装Rust</h2>\n<p>Installing Rust is pretty simple - just go to  <a href="https://www.rust-lang.org/tools/install" rel="noopener noreferrer">the website</a>  and download the Rustup toolchain manager.<br>\n安装Rust很简单，只需要去 Rust 网站 下载 Rustup 交叉编译工具链管理软件 <a href="https://www.rust-lang.org/tools/install" rel="noopener noreferrer">网站</a></p>\n<p>Note that if you're developing on Windows with the default toolchain, you'll also need to install the  <a href="https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017" rel="noopener noreferrer">Microsoft Visual C++ Build Tools</a>, as Rust uses the MSVC linker when building.\n提醒一下Windows环境下的开发者，如果你选择MSVC Rust工具链，你需要一点特殊准备：安装visual-studio-2017 <a href="https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017" rel="noopener noreferrer">网站</a></p>\n<h2><a href="https://tetra.seventeencups.net/installation/#installing-sdl-2-0" rel="noopener noreferrer">#</a>Installing SDL 2.0</h2>\n<p>Tetra uses SDL for windowing and input, so you will need to have both the runtime and development libraries installed.<br>\nWindows环境下的Tetra配置 需要同时安装SDL 的开发包和运行库。</p>\n<p>INFO 相关信息</p>\n<p>The instructions below are adapted from the README of the  <a href="https://github.com/Rust-SDL2/rust-sdl2" rel="noopener noreferrer">sdl2</a>  crate - further information can be found there.<br>\n下面的说明来自于Rust SDL开发包 参见：<a href="https://github.com/Rust-SDL2/rust-sdl2" rel="noopener noreferrer">sdl2</a></p>\n<h3><a href="https://tetra.seventeencups.net/installation/#windows" rel="noopener noreferrer">#</a>Windows  Windows</h3>\n<p>If you're using the default MSVC Rust toolchain:<br>\n如果你选择MSVC Rust 开发环境：</p>\n<ol>\n<li>Go to  <a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">the SDL website</a>  and download the Visual C++ version of the development libraries.<br>\n首先去<a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">SDL 网站</a> 下载相关支持 并且安装 Visual C++ 开发包</li>\n<li>Copy the  <code>.lib</code>  files from the  <code>SDL2-2.0.x/lib/x64</code>  folder of the zip to the  <code>%USERPROFILE/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib</code>  folder on your machine. If you are building on a beta/nightly toolchain, adjust the location accordingly.<br>\n之后，从解压缩后的<code>SDL2-2.0.x/lib/x64</code>目录下拷贝所有文件到本地的<code>%USERPROFILE/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib</code>目录下。 注意一下开发版本 nightly和稳定版目录的差异。</li>\n</ol>\n<p>If you're using the GNU-based Rust toolchain:<br>\nGNU环境：</p>\n<ol>\n<li>Go to  <a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">the SDL website</a>  and download the MinGW version of the development libraries.<br>\n首先去<a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">SDL 网站</a> 下载相关支持</li>\n<li>Copy the  <code>.lib</code>  files from the  <code>SDL2-2.0.x/x86_64-w64-mingw32/lib</code>  folder of the zip to the  <code>%USERPROFILE/.rustup/toolchains/stable-x86_64-pc-windows-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib</code>  folder on your machine. If you are building on a beta/nightly toolchain, adjust the location accordingly.<br>\n同样，从解压缩后的<code>SDL2-2.0.x/x86_64-w64-mingw32/lib</code>目录下拷贝所有文件到本地的<code>%USERPROFILE/.rustup/toolchains/stable-x86_64-pc-windows-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib</code>目录下。 注意一下开发版本 nightly和稳定版目录的差异。</li>\n</ol>\n<p>When starting a new Tetra project, you will also need to make sure that SDL2.dll is present in the root of your project (i.e. the directory where you  <code>cargo run</code>). You will also need to provide it alongside your game's executable when distributing it to players.  <strong>Your game will not start if it is missing!</strong><br>\n开发一个新的Tetra项目时候，需要确保SDL2.dll工程目录下，并且当发布的时候也需要一起打包。</p>\n<p>You can download SDL2.dll from the  <a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">'Runtime Binaries' section of the SDL website</a>  - pick the version that corresponds to your system architecture.<br>\nSDL2.dll可以从 <a href="https://www.libsdl.org/download-2.0.php" rel="noopener noreferrer">'Runtime Binaries' section of the SDL website</a> 网站下载， 注意保持版本一致。</p>\n<h3><a href="https://tetra.seventeencups.net/installation/#mac" rel="noopener noreferrer">#</a>Mac 苹果环境</h3>\n<p>The easiest way to install SDL is via  <a href="http://brew.sh/" rel="noopener noreferrer">Homebrew</a>:<br>\n通过<a href="http://brew.sh/" rel="noopener noreferrer">Homebrew</a> 直接安装：</p>\n<pre><code>brew install sdl2\n\n</code></pre>\n<p>You will also need to add the following to your  <code>~/.bash_profile</code>, if it is not already present.<br>\n<code>~/.bash_profile</code>文件里加入下面内容， 如果文件不存在就创建一个。</p>\n<pre><code>export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/lib"\n\n</code></pre>\n<h3><a href="https://tetra.seventeencups.net/installation/#linux" rel="noopener noreferrer">#</a>Linux Linux</h3>\n<p>The SDL development libraries are distributed through most Linux package managers - here are a few examples:<br>\nSDL开发包可以通过Linux 软件包管理工具安装 例：</p>\n<pre><code># Ubuntu/Debian\nsudo apt install libsdl2-dev\n\n# Fedora/CentOS\nsudo yum install SDL2-devel\n\n# Arch Linux\nsudo pacman -S sdl2\n\n</code></pre>\n<h2><a href="https://tetra.seventeencups.net/installation/#installing-alsa-linux-only" rel="noopener noreferrer">#</a>Installing ALSA (Linux only) Linux环境下的特殊要求</h2>\n<p>On Linux, ALSA is used as the audio backend, so you will also need the ALSA development libraries installed. Similar to SDL, you can find these libraries on most Linux package managers:<br>\n在 Linux 上，采用ALSA作音频后端，因此您还需要安装 ALSA 开发库。与 SDL 类似，您可以在大多数 Linux 包管理器中找到这些库：</p>\n<pre><code># Ubuntu/Debian\nsudo apt install libasound2-dev\n\n# Fedora/CentOS\nsudo yum install alsa-lib-devel\n\n# Arch Linux\nsudo pacman -S alsa-lib\n\n</code></pre>\n<hr>\n<p>LICENSE</p>\n<p>Copyright 2020 Joe Clay</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n	973a95c0df158854e30ae05ec8a195cbfbfd2fe0	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.218297	0			'-2.0':209,236,278,305 '/.bash_profile':431,438 '/usr/local/lib':446 '2.0':30,34,118 '2017':114 '2020':563 'a':14,227,296,314,462,577,677 'above':633 'accordingly':233,302 'action':703 'adapted':148 'add':426 'adjust':230,299 'all':644 'alongside':349 'already':436 'alsa':37,46,489,495,508,530,550,559 'alsa-lib':558 'alsa-lib-devel':549 'also':89,320,344,423,505 'an':702 'and':61,124,135,185,259,582,614,636,680 'and/or':608 'any':574,661,694 'apt':470,540 'arch':482,553 'architecture':393 'are':147,224,293,453,461 'arising':709 'as':99,498,656 'associated':583 'audio':500 'authors':687 'backend':501 'based':250 'be':159,641,691 'below':146 'beta/nightly':228,297 'binaries':379,397 'both':132 'brew':418 'build':97 'building':106,225,294 'but':667 'c':96,189,200 'can':158,373,516 'cargo':340 'charge':572 'claim':695 'clay':565 'conditions':631 'connection':715 'contract':705 'copies':610,645 'copy':202,271,578,602 'copyright':562,634,689 'corresponds':389 'couple':15 'crate':155 'damages':696 'deal':589 'dealings':724 'default':85,173 'dev':474,544 'devel':481,552 'developing':80 'development':31,38,136,193,266,451,509 'directory':337 'distribute':606 'distributed':454 'distributing':355 'do':625 'documentation':584 'download':62,186,260,374 'easiest':408 'event':684 'examples':464 'executable':353 'export':441 'express':663 'fedora/centos':475,545 'few':463 'files':205,274,585 'find':517 'fitness':675 'folder':211,218,280,287 'following':428,630 'for':122,676,693 'found':160 'free':570 'from':149,206,275,376,710 'furnished':623 'further':156 'game':351,360 'get':7 'gnu':249 'gnu-based':248 'gnu环境':253 'go':57,180,254 'granted':569 'have':131 'here':460 'hereby':568 'holders':690 'homebrew':415 'i.e':335 'if':77,168,222,243,291,364,432 'implied':665 'in':329,590,643,682,701,714,725 'included':642 'including':595,666 'info':142 'information':157 'input':125 'install':3,92,411,419,471,478,541,548 'installation':4 'installed':18,138,511 'installing':48,51,116,488 'instructions':145 'is':53,327,366,413,434,496,567,622,654,657 'it':348,356,365,433 'joe':564 'just':56 'kind':662 'latest':22 'liability':699 'liable':692 'lib':204,273,551,560 'libasound2':543 'libasound2-dev':542 'libraries':32,39,137,194,267,452,510,519 'library':442,444 'libsdl2':473 'libsdl2-dev':472 'license':561 'limitation':597 'limited':669 'linker':104 'linux':43,447,448,457,483,490,494,522,526,536,554 'linux环境下的特殊要求':492 'll':12,88 'location':232,301 'mac':405 'machine':221,290 'make':323 'manager':66 'managers':459,524 'merchantability':674 'merge':604 'microsoft':94 'mingw':262 'missing':367 'modify':603 'most':456,521 'msvc':103,174 'need':13,90,129,321,345,424,506 'new':315 'nightly和稳定版目录的差异':242,311 'no':683 'noninfringement':681 'not':362,435,668 'note':75 'notice':635,639 'obtaining':576 'of':16,25,152,191,212,264,281,332,381,399,571,579,611,649,660,673,704,712 'on':42,81,219,226,288,295,493,520 'only':40,491 'or':646,664,688,697,707,713,719,722 'other':698,723 'otherwise':708 'out':711 'package':458,523 'pacman':485,556 'particular':678 'path':443,445 'permission':566,638 'permit':616 'person':575 'persons':617 'pick':385 'players':358 'portions':648 'present':328,437 'pretty':54 'project':317,334 'provide':347 'provided':655 'publish':605 'purpose':679 're':79,170,245 'readme':151 'required':41 'restriction':594 'rights':599 'root':331 'run':341 'runtime':134,378,396 'rust':26,49,52,69,100,175,178,251 'rustup':64,72 'rust工具链':109 's':352,486,557 'sdl':29,33,117,121,183,257,383,401,412,450,514,533 'sdl2':154,165,208,277,420,480,487 'sdl2-devel':479 'sdl2.dll':326,375,394 'sdl开发包':163 'sdl开发包可以通过linux':465 'section':380,398 'sell':609 'shall':640,685 'similar':512 'simple':55 'so':126,502,626 'software':581,587,592,613,621,651,653,718,727 'stable':23 'start':363 'started':8 'starting':313 'studio':113 'subject':627 'sublicense':607 'substantial':647 'sudo':469,476,484,539,546,555 'sure':324 'system':392 'tetra':2,10,119,316 'tetra-install':1 'that':76,325,388 'the':21,28,36,59,63,84,93,102,133,144,150,153,172,182,187,192,203,207,213,216,231,247,256,261,265,272,276,282,285,300,330,336,377,382,386,400,407,427,449,499,507,586,591,598,612,620,629,632,650,652,671,686,717,720,726 'there':161 'these':518 'things':17 'this':580,637 'through':455 'to':6,58,91,130,181,215,255,284,322,346,357,390,410,425,429,513,573,588,600,615,618,624,628,670 'toolchain':65,86,176,229,252,298 'tools':98 'tort':706 'ubuntu/debian':468,538 'use':601,721 'used':497 'userprofile/.rustup/toolchains/stable-x86_64-pc-windows-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib':286,308 'userprofile/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib':217,239 'uses':101,120 'using':171,246 'version':24,190,263,387 'via':414 'visual':95,188,199 'warranties':672 'warranty':659 'way':409 'website':60,184,258,384,402 'when':105,312,354 'where':338 'whether':700 'whom':619 'will':128,319,343,361,422,504 'windowing':123 'windows':82,166,167 'windows环境下的tetra配置':139 'with':9,83,716 'without':593,596,658 'x/lib/x64':210,237 'x/x86_64-w64-mingw32/lib':279,306 'you':11,78,87,127,169,223,244,292,318,339,342,372,421,503,515 'your':220,289,333,350,359,391,430 'yum':477,547 'zip':214,283 '上':527 '下载':71 '下载相关支持':197,270 '下面的说明来自于rust':162 '与':532 '之后':234 '交叉编译工具链管理软件':73 '从解压缩后的sdl2':235,304 '你需要一点特殊准备':110 '你需要做的一些准备':20 '例':467 '包管理器中找到这些库':537 '参见':164 '只需要去':68 '可以从':395 '同样':303 '因此您还需要安装':529 '在':525 '如果你选择msvc':108,177 '如果文件不存在就创建一个':440 '如果是linux环境':44 '安装':5 '安装rust':50 '安装rust很简单':67 '安装visual':112 '安装visual-studio':111 '工程目录下':370 '并且安装':198 '并且当发布的时候也需要一起打包':371 '开发一个新的tetra项目时候':368 '开发包':35,47,201 '开发库':531 '开发环境':179 '您可以在大多数':535 '提醒一下windows环境下的开发者':107 '文件里加入下面内容':439 '最新版本的rust稳定版':27 '注意一下开发版本':241,310 '注意保持版本一致':404 '的开发包和运行库':141 '目录下':240,309 '目录下拷贝所有文件到本地的':238,307 '直接安装':417 '相关信息':143 '类似':534 '网站':70,74,115,196,269 '网站下载':403 '苹果环境':406 '软件包管理工具安装':466 '还应该安装':45 '通过homebrew':416 '采用alsa作音频后端':528 '需要同时安装sdl':140 '需要确保sdl2.dll':369 '首先去sdl':195,268 '首先在采用tetra之前':19		
141	Garbage Collection In Go : Part III - GC Pacing	{"ver":2,"uid":1,"hash":"SHA1:cec1e2f9d5a800505eb5430659c9eb49ae504cd6"}	https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html	2019-07-18 00:00:00	Prelude This is the third post in a three part series that will provide an understanding of the mechanics and semantics behind the garbage collector in Go. This post focuses on how the GC paces itself.\nIndex of the three part series:\n1) Garbage Collection In Go : Part I - Semantics\n2) Garbage Collection In Go : Part II - GC Traces\n2) Garbage Collection In Go : Part III - GC Pacing	58e645a2ce93603654e2c45b457752e4483261fd	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.427096	0			'1':51 '2':59,68 'behind':30 'collect':2,53,61,70 'collector':33 'focus':38 'garbag':1,32,52,60,69 'gc':7,42,66,75 'go':4,35,55,63,72 'ii':65 'iii':6,74 'index':45 'mechan':27 'pace':8,43,76 'part':5,18,49,56,64,73 'post':14,37 'prelud':9 'provid':22 'semant':29,58 'seri':19,50 'third':13 'three':17,48 'trace':67 'understand':24	en	
1067	The US Army spent millions developing giant, six-legged walking trucks in 1980s	{"ver":2,"uid":1,"hash":"SHA1:9d9f50d5a7d8a2932d0c7f5f9812bae8569cbc44"}	https://www.thedrive.com/news/36157/the-us-army-spent-millions-developing-giant-six-legged-walking-trucks-in-the-1980s	2020-09-08 07:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24401664"> https://news.ycombinator.com/item?id=24401664 </a>	66e9d8de97ad7fac753acda1746d4838fdc5c9cf	\N	f	2020-09-08 07:10:00	2020-09-09 21:10:12.328955	0			'/item?id=24401664':18 '1980s':14 'armi':3 'comment':15 'develop':6 'giant':7 'leg':10 'million':5 'news.ycombinator.com':17 'news.ycombinator.com/item?id=24401664':16 'six':9 'six-leg':8 'spent':4 'truck':12 'us':2 'walk':11	zh	tomohawk
889	India bans PUBG, Baidu and more than 100 apps linked to China	{"ver":2,"uid":1,"hash":"SHA1:ab2fea0186a67b694739c707f95c4afa56c2b8fd"}	https://www.bbc.com/news/technology-53998205	2020-09-03 05:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24353830"> https://news.ycombinator.com/item?id=24353830 </a>	bc05b1e3016254423ff0d33ab75ca6d26de08fb9	\N	f	2020-09-03 05:10:00	2020-09-06 22:10:10.369676	0			'/item?id=24353830':16 '100':8 'app':9 'baidu':4 'ban':2 'china':12 'comment':13 'india':1 'link':10 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24353830':14 'pubg':3	zh	sameer_hacker
988	坛子小升级 20200621	{"ver":2,"uid":1,"hash":"SHA1:6b16e6a2dff07e2a27978e7070bb525ffb22bce0"}	https://rustcc.cn/article?id=5d523dcd-39b7-4451-a43e-a9938efc9a92	2020-06-21 03:56:24	<ol>\n<li>优化了一点表格样式，在表头和body之间加了一根线</li>\n<li>尝试解决回复带内容的bug（标签被安全检查器干掉了）。现在想了个新办法。效果如下。</li>\n<li>被引用的回复内容前面加了人名，效果更理想了。</li>\n</ol>\n	fa4050cf56b2b1dc205ffb3ec101a1fb7d468bd2	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.213553	0			'20200621':2 '优化了一点表格样式':3 '在表头和body之间加了一根线':4 '坛子小升级':1 '尝试解决回复带内容的bug':5 '效果如下':8 '效果更理想了':10 '标签被安全检查器干掉了':6 '现在想了个新办法':7 '被引用的回复内容前面加了人名':9		
144	Garbage Collection In Go : Part I - Semantics	{"ver":2,"uid":1,"hash":"SHA1:5d47df2f20738f7ed207992d399faeef748ccef4"}	https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html	2019-05-03 00:00:00	Prelude This is the first post in a three part series that will provide an understanding of the mechanics and semantics behind the garbage collector in Go. This post focuses on the foundation material on the collector&rsquo;s semantics.\nIndex of the three part series:\n1) Garbage Collection In Go : Part I - Semantics\n2) Garbage Collection In Go : Part II - GC Traces\n2) Garbage Collection In Go : Part III - GC Pacing	900805333fbcf6c8a1add1975a7093259d9c49ac	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.433885	0			'1':53 '2':61,70 'behind':29 'collect':2,55,63,72 'collector':32,44 'first':12 'focus':37 'foundat':40 'garbag':1,31,54,62,71 'gc':68,77 'go':4,34,57,65,74 'ii':67 'iii':76 'index':47 'materi':41 'mechan':26 'pace':78 'part':5,17,51,58,66,75 'post':13,36 'prelud':8 'provid':21 'semant':7,28,46,60 'seri':18,52 'three':16,50 'trace':69 'understand':23	en	
158	The Behavior Of Channels	{"ver":2,"uid":1,"hash":"SHA1:87029c217a7ad8eb966608d712f7bc60f0a34d4c"}	https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html	2017-10-24 00:00:00	Introduction When I started to work with Go’s channels for the first time, I made the mistake of thinking about channels as a data structure. I saw channels as a queue that provided automatic synchronized access between goroutines. This structural understanding caused me to write a lot of bad and complicated concurrent code.\nI learned over time that it’s best to forget about how channels are structured and focus on how they behave.	8e1f0ff215063bc17d17b3fe50cea2177b8ec4d8	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.461401	0			'access':41 'automat':39 'bad':54 'behav':79 'behavior':2 'best':66 'caus':47 'channel':4,14,26,33,71 'code':58 'complic':56 'concurr':57 'data':29 'first':17 'focus':75 'forget':68 'go':12 'goroutin':43 'introduct':5 'learn':60 'lot':52 'made':20 'mistak':22 'provid':38 'queue':36 'saw':32 'start':8 'structur':30,45,73 'synchron':40 'think':24 'time':18,62 'understand':46 'work':10 'write':50	en	
179	Stack Traces In Go	{"ver":2,"uid":1,"hash":"SHA1:395407d4ec4da9f48f38c710251996e1e2d378e7"}	https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html	2015-01-11 00:00:00	Introduction\nHaving some basic skills in debugging Go programs can save any programmer a good amount of time trying to identify problems. I believe in logging as much information as you can, but sometimes a panic occurs and what you logged is not enough. Understanding the information in a stack trace can sometimes mean the difference between finding the bug now or needing to add more logging and waiting for it to happen again.	060054659ad9cc9b13ed390a454386f21cd6fed6	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.501548	0			'add':69 'amount':20 'basic':8 'believ':28 'bug':64 'debug':11 'differ':60 'enough':48 'find':62 'go':4,12 'good':19 'happen':77 'identifi':25 'inform':33,51 'introduct':5 'log':30,45,71 'mean':58 'much':32 'need':67 'occur':41 'panic':40 'problem':26 'program':13 'programm':17 'save':15 'skill':9 'sometim':38,57 'stack':1,54 'time':22 'trace':2,55 'tri':23 'understand':49 'wait':73	en	
18	Are large slices more expensive than smaller ones?	{"ver":2,"uid":1,"hash":"SHA1:adac1257c8964b41915066697dd88b0f418ab5fa"}	https://dave.cheney.net/2020/03/01/are-large-slices-more-expensive-than-smaller-ones	2020-03-01 10:15:07	\n<p>Programmers have a tendency to be superstitious. Particularly, when a programmer hears that copies are expensive, they start to see them everywhere, especially when they learn that, in Go, <em>every</em> assignment is a copy.</p>\n\n\n\n<p>Consider this code; <code>x</code> is three orders of magnitude larger than <code>y</code>, is the assignment of <code>x</code> to <code>a</code> more expensive than the assignment of <code>y</code> to <code>b</code>?</p>\n\n\n\n<pre class="wp-block-preformatted">func f() {\n       x, y := make([]byte, 9000), make([]byte, 9)\n       a := x\n       b := y\n       // ...\n } </pre>\n\n\n\n<p>The answer is; no. <code>x</code> and <code>y</code> have the same type, <code>[]byte</code>, that is, a slice of bytes. As both variables have the same type, their assignment involves copying the same amount of data. Both assignments have the same cost.</p>\n\n\n\n<p>All slices are the same size; three machine words (three <code>uintptrs</code>). The first word in the slice is a pointer to the slice&#8217;s backing array, the storage for the slice, the second word is the slice&#8217;s length, and the third is the capacity. Assigning one slice variable to another copies just three machine words. </p>\n\n\n\n<p><em>Further reading: </em><a href="https://blog.golang.org/go-slices-usage-and-internals">Go slices: usage and internals</a> (blog.golang.org)</p>\n	82a307dd058e80b0222b543a536aed701d187b81	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.223371	0			'9':80 '9000':77 'a':11,18,41,61,81,99,143 'all':125 'amount':116 'and':90,164,186 'another':175 'answer':86 'are':1,23,127 'array':150 'as':103 'assigning':170 'assignment':39,57,66,111 'assignments':120 'b':70,83 'backing':149 'be':14 'blog.golang.org':188 'both':104,119 'byte':76,79,96 'bytes':102 'capacity':169 'code':45 'consider':43 'copies':22,176 'copy':42 'copying':113 'cost':124 'data':118 'especially':31 'every':38 'everywhere':30 'expensive':5,24,63 'f':72 'first':137 'for':153 'func':71 'further':181 'go':37,183 'have':10,92,106,121 'hears':20 'in':36,139 'internals':187 'involves':112 'is':40,47,55,87,98,142,159,167 'just':177 'large':2 'larger':52 'learn':34 'length':163 'machine':132,179 'magnitude':51 'make':75,78 'more':4,62 'no':88 'of':50,58,67,101,117 'one':171 'ones':8 'orders':49 'particularly':16 'pointer':144 'programmer':19 'programmers':9 'reading':182 's':148,162 'same':94,108,115,123,129 'second':157 'see':28 'size':130 'slice':100,141,147,155,161,172 'slices':3,126,184 'smaller':7 'start':26 'storage':152 'superstitious':15 'tendency':12 'than':6,53,64 'that':21,35,97 'the':56,65,85,93,107,114,122,128,136,140,146,151,154,156,160,165,168 'their':110 'them':29 'they':25,33 'third':166 'this':44 'three':48,131,134,178 'to':13,27,60,69,145,174 'type':95,109 'uintptrs':135 'usage':185 'variable':173 'variables':105 'when':17,32 'word':138,158 'words':133,180 'x':46,59,73,82,89 'y':54,68,74,84,91	en	Dave Cheney
215	Pool Go Routines To Process Task Oriented Work	{"ver":2,"uid":1,"hash":"SHA1:2a335c1ad2efb488b180479d19e662b1ce98791b"}	https://www.ardanlabs.com/blog/2013/09/pool-go-routines-to-process-task.html	2013-09-14 00:00:00	After working in Go for some time now, I learned how to use an unbuffered channel to build a pool of goroutines. I like this implementation better than what is implemented in this post. &nbsp;That being said, this post still has value in what it describes.\nhttps://github.com/goinggo/work\nOn more than one occasion I have been asked why I use the Work Pool pattern. Why not just start as many Go routines as needed at any given time to get the work done?	1e7418c15c79585d2be2efb39284ea0c717ef207	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.571582	0			'/goinggo/work':57 'ask':66 'better':35 'build':26 'channel':24 'describ':54 'done':92 'get':89 'github.com':56 'github.com/goinggo/work':55 'given':86 'go':2,12,80 'goroutin':30 'implement':34,39 'learn':18 'like':32 'mani':79 'need':83 'occas':62 'one':61 'orient':7 'pattern':73 'pool':1,28,72 'post':42,47 'process':5 'routin':3,81 'said':45 'start':77 'still':48 'task':6 'time':15,87 'unbuff':23 'use':21,69 'valu':50 'work':8,10,71,91	en	
1068	How to speed up the Rust compiler one last time	{"ver":2,"uid":1,"hash":"SHA1:c0c9d7c5031309ecb1ec182d3e23f3ae9f458e3f"}	https://blog.mozilla.org/nnethercote/2020/09/08/how-to-speed-up-the-rust-compiler-one-last-time/	2020-09-08 09:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24403351"> https://news.ycombinator.com/item?id=24403351 </a>	d8067cf5ba897285821446d8400621dda4d1f9b3	\N	f	2020-09-08 09:10:00	2020-09-09 23:10:22.829559	0			'/item?id=24403351':14 'comment':11 'compil':7 'last':9 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24403351':12 'one':8 'rust':6 'speed':3 'time':10	zh	nnethercote
1035	Pregnancy Test Doom: Doom running on a pregnancy test	{"ver":2,"uid":1,"hash":"SHA1:45accefac61fd294c93c58e1794a0c91d4918656"}	https://twitter.com/Foone/status/1302820468819288066	2020-09-07 15:10:13	Comments: <a href="https://news.ycombinator.com/item?id=24396780"> https://news.ycombinator.com/item?id=24396780 </a>	2f123ecba57cb5969f43a040c78efec662b90a55	\N	f	2020-09-07 15:10:00	2020-09-10 05:10:14.195751	0			'/item?id=24396780':13 'comment':10 'doom':3,4 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24396780':11 'pregnanc':1,8 'run':5 'test':2,9	zh	boyter
1033	Elixir Is Erlang, not Ruby	{"ver":2,"uid":1,"hash":"SHA1:deb69b7b9289d4353deb92b9bd1ee39bf7e838e9"}	https://preslav.me/2020/09/06/elixir-is-not-ruby-elixir-is-erlang/	2020-09-07 08:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24395695"> https://news.ycombinator.com/item?id=24395695 </a>	5b3204a9c0edb173a2203016f9d21f9373f28429	\N	f	2020-09-07 08:10:00	2020-09-10 05:10:14.199902	0			'/item?id=24395695':9 'comment':6 'elixir':1 'erlang':3 'news.ycombinator.com':8 'news.ycombinator.com/item?id=24395695':7 'rubi':5	zh	stanislavb
991	Show HN: Talk – A free group video call app with screen sharing	{"ver":2,"uid":1,"hash":"SHA1:b43a6ce6b766f808aa122b44908c8375e014b58c"}	https://github.com/vasanthv/talk	2020-09-06 08:10:12	Comments: <a href="https://news.ycombinator.com/item?id=24381700"> https://news.ycombinator.com/item?id=24381700 </a>	801961540d4c00f5ec42ad48e3b073d08cfb9520	\N	f	2020-09-06 08:10:00	2020-09-08 17:10:10.465495	0			'/item?id=24381700':16 'app':9 'call':8 'comment':13 'free':5 'group':6 'hn':2 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24381700':14 'screen':11 'share':12 'show':1 'talk':3 'video':7	zh	vasanthv
1069	Desolate English path has killed more than 100 people (2017)	{"ver":2,"uid":1,"hash":"SHA1:25a14534e9bc8c6dc1b23ce8118034e9247a6741"}	http://www.bbc.com/travel/story/20170110-why-the-broomway-is-the-most-dangerous-path-in-britain	2020-09-08 09:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24390353"> https://news.ycombinator.com/item?id=24390353 </a>	ee9cbd8dd817e05f581a87d2291647e8a2ae1029	\N	f	2020-09-08 09:10:00	2020-09-08 23:10:11.20485	0			'/item?id=24390353':14 '100':8 '2017':10 'comment':11 'desol':1 'english':2 'kill':5 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24390353':12 'path':3 'peopl':9	zh	twoodfin
1036	Introduction to Computational Thinking	{"ver":2,"uid":1,"hash":"SHA1:8a163a60072290d9f425f817db278f20090654eb"}	https://mitmath.github.io/18S191/Fall20/	2020-09-07 15:10:13	Comments: <a href="https://news.ycombinator.com/item?id=24395700"> https://news.ycombinator.com/item?id=24395700 </a>	817a57239e964878e0489d78694becf0963b98bc	\N	f	2020-09-07 15:10:00	2020-09-10 05:10:14.219728	0			'/item?id=24395700':8 'comment':5 'comput':3 'introduct':1 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24395700':6 'think':4	zh	guiambros
1037	At 31, I have just weeks to live. Here's what I want to pass on	{"ver":2,"uid":1,"hash":"SHA1:2d1ac2fad59c3ebb4eac5c30882963b5244abdb1"}	https://www.theguardian.com/commentisfree/2020/sep/07/terminal-cancer-live-cancer-life-death	2020-09-07 19:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24397651"> https://news.ycombinator.com/item?id=24397651 </a>	f7ec7d389768c63ea0ed1f25adb3782fe3911b4b	\N	f	2020-09-07 17:10:00	2020-09-10 05:10:14.189831	0			'/item?id=24397651':20 '31':2 'comment':17 'live':8 'news.ycombinator.com':19 'news.ycombinator.com/item?id=24397651':18 'pass':15 'want':13 'week':6	zh	asp_net
980	区块链rust开发工程师	{"ver":2,"uid":1,"hash":"SHA1:422ed931c973dd2ec30338c2ddb06e86da3154a8"}	https://rustcc.cn/article?id=88b86cad-c417-4cf3-a045-e41da5100235	2020-09-02 03:11:42	<p>区块链rust开发工程师：\n负责区块链技术公链的架构和算法研究以及核心代码开发；\n对分布式系统架构和运行机制进行研究、比较和改进；\n本科及以上学历，计算机相关专业优先；\n熟悉RUST语言，一年以上RUST语言开发经验，有一定的Golang/C++语言基础；\n在密码学、加密算法或编译原理等某个领域有研究基础；\n了解过zcash、filecoin项目，熟悉SDR算法最优。\n工作地点：杭州江干区</p>\n<p>薪资20-35K可谈</p>\n<p>有意向的请加我QQ哈，联系方式：1905775275@qq.com</p>\n	48c5f56981d0f06b15e80cdbd3bff907f6b6474a	\N	f	2020-09-06 06:10:00	2020-09-06 12:10:03.036326	0			'/c':11 '1905775275@qq.com':25 '35k可谈':22 'filecoin项目':16 '一年以上rust语言开发经验':9 '了解过zcash':15 '加密算法或编译原理等某个领域有研究基础':14 '区块链rust开发工程师':1,2 '在密码学':13 '对分布式系统架构和运行机制进行研究':4 '工作地点':18 '有一定的golang':10 '有意向的请加我qq哈':23 '本科及以上学历':6 '杭州江干区':19 '比较和改进':5 '熟悉rust语言':8 '熟悉sdr算法最优':17 '联系方式':24 '薪资20':21 '薪资20-35k可谈':20 '计算机相关专业优先':7 '语言基础':12 '负责区块链技术公链的架构和算法研究以及核心代码开发':3		
975	Rust有什么crate能实现ssh的jump host功能	{"ver":2,"uid":1,"hash":"SHA1:c9f930abd4c96abda252e81a3bddd7b0a233c063"}	https://rustcc.cn/article?id=efa8fb37-564a-412c-a26b-f16467bf8dab	2020-09-04 02:20:25	<p>请问用什么库实现ssh的jump host比较方便快速的crate，实现的需求如下：</p>\n<pre><code>+--------+     +--------+     +--------+\n| client | --&gt; | host a | --&gt; | target |\n+--------+     +--------+     +--------+\n</code></pre>\n<p>通过host a作跳板机，然后登录到target机器，我试了一下<code>ssh2</code>，有一个<code>channel_direct_tcpip</code>函数可以转发，但是后面不知道怎么通过channel连到target上面。</p>\n	06365b9ea2a50f595a42cd55f64a9670dfee4a30	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.193868	0			'a':8 'a作跳板机':11 'client':6 'direct':15 'host':7 'host功能':2 'host比较方便快速的crate':4 'rust有什么crate能实现ssh的jump':1 'target':9 'tcpip函数可以转发':16 '但是后面不知道怎么通过channel连到target上面':17 '实现的需求如下':5 '我试了一下ssh2':13 '有一个channel':14 '然后登录到target机器':12 '请问用什么库实现ssh的jump':3 '通过host':10		
182	Error Handling In Go, Part I	{"ver":2,"uid":1,"hash":"SHA1:b52daf84a8738b4d8f1c4dcaecc3f404829a0f00"}	https://www.ardanlabs.com/blog/2014/10/error-handling-in-go-part-i.html	2014-10-13 00:00:00	Introduction\nIt is idiomatic in Go to use the error interface type as the return type for any error that is going to be returned from a function or method. This interface is used by all the functions and methods in the standard library that return errors. For example, here is the declaration for the Get method from the http package: &nbsp; Listing 1.1 &nbsp;\nhttp://golang.org/pkg/net/http/#Client.Get\nfunc (c &#42;Client) Get(url string) (resp &#42;Response, err error) Listing 1.	3bbb1a5950b567a5ed338098759a4d39549204da	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.507353	0			'/pkg/net/http/#client.get':72 '1':84 '1.1':69 'c':74 'client':75 'declar':59 'err':81 'error':1,16,25,53,82 'exampl':55 'func':73 'function':34,44 'get':62,76 'go':4,12,28 'golang.org':71 'golang.org/pkg/net/http/#client.get':70 'handl':2 'http':66 'idiomat':10 'interfac':17,38 'introduct':7 'librari':50 'list':68,83 'method':36,46,63 'packag':67 'part':5 'resp':79 'respons':80 'return':21,31,52 'standard':49 'string':78 'type':18,22 'url':77 'use':14,40	en	
192	Running MongoDB Queries Concurrently With Go	{"ver":2,"uid":1,"hash":"SHA1:a850ae0e40ee370a39d370396d00fcb5e84341d7"}	https://www.ardanlabs.com/blog/2014/02/running-queries-concurrently-against.html	2014-02-25 00:00:00	If you are attending GopherCon 2014 or plan to watch the videos once they are released, this article will prepare you for the talk by Gustavo Niemeyer and Steve Francia. It provides a&nbsp;beginners view for using the Go mgo driver against a MongoDB database.&nbsp;\nIntroduction\nMongoDB supports many different programming languages thanks to a great set of drivers. One such driver is the MongoDB Go driver which is called mgo. This driver has been externally developed by Gustavo Niemeyer from Canonical, and eventually Steve Francia, the head of the drivers team at MongoDB Inc, took notice and offered support.	25b50e49dbe82622c7ba6e4315107833e8e3d04d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.52665	0			'2014':12 'articl':24 'attend':10 'beginn':40 'call':76 'canon':88 'concurr':4 'databas':51 'develop':83 'differ':56 'driver':47,65,68,73,79,97 'eventu':90 'extern':82 'francia':36,92 'go':6,45,72 'gophercon':11 'great':62 'gustavo':32,85 'head':94 'inc':101 'introduct':52 'languag':58 'mani':55 'mgo':46,77 'mongodb':2,50,53,71,100 'niemey':33,86 'notic':103 'offer':105 'one':66 'plan':14 'prepar':26 'program':57 'provid':38 'queri':3 'releas':22 'run':1 'set':63 'steve':35,91 'support':54,106 'talk':30 'team':98 'thank':59 'took':102 'use':43 'video':18 'view':41 'watch':16	en	
201	Sample Web Application Using Beego and Mgo	{"ver":2,"uid":1,"hash":"SHA1:a56c7aba5d8d88df58944aca8d2278d385f21304"}	https://www.ardanlabs.com/blog/2013/12/sample-web-application-using-beego-and.html	2013-12-11 00:00:00	Introduction\nI am very excited about the Beego web framework. I wanted to share with you how I use the framework to build real world web sites and web services. Here is a picture of the sample website the post is going to showcase:\nThe sample web application:\nImplements a traditional grid view of data calling into MongoDB Provides a modal dialog box to view details using a partial view to generate the HTML Implements a web service that returns a JSON document Takes configuration parameters from the environment using envconfig Implements tests via goconvey Leverages my logging package The code for the sample can be found in the GoingGo repository up on Github:	bfce25abd399b7de42f206125e4be2ecc92fcc44	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.544805	0			'applic':3,55 'beego':5,15 'box':70 'build':30 'call':63 'code':108 'configur':92 'data':62 'detail':73 'dialog':69 'document':90 'envconfig':98 'environ':96 'excit':12 'found':114 'framework':17,28 'generat':79 'github':121 'go':49 'goconvey':102 'goinggo':117 'grid':59 'html':81 'implement':56,82,99 'introduct':8 'json':89 'leverag':103 'log':105 'mgo':7 'modal':68 'mongodb':65 'packag':106 'paramet':93 'partial':76 'pictur':41 'post':47 'provid':66 'real':31 'repositori':118 'return':87 'sampl':1,44,53,111 'servic':37,85 'share':21 'showcas':51 'site':34 'take':91 'test':100 'tradit':58 'use':4,26,74,97 'via':101 'view':60,72,77 'want':19 'web':2,16,33,36,54,84 'websit':45 'world':32	en	
236	Reading XML Documents in Go	{"ver":2,"uid":1,"hash":"SHA1:a284518cf9ccf6fe100102a9e323e0a886c54c37"}	https://www.ardanlabs.com/blog/2013/06/reading-xml-documents-in-go.html	2013-06-17 00:00:00	I was really surprised how easy it was to read an XML document using the encoding/xml package that comes with the standard library. The package works by defining structs that map the XML document. If you need more flexibility then use Gustavo Niemeyer&rsquo;s xmlpath package (found here).\nHere is the XML document we are going to read and de-serialize:\n&lt;straps&gt;\n&nbsp; &nbsp; &lt;strap key=&quot;CompanyName&quot; value=&quot;NEWCO&quot; /&gt;\n&nbsp; &nbsp; &lt;strap key=&quot;UseEmail&quot; value=&quot;true&quot; /&gt;	df58dc30102767cb1ad79a65d208905e51b70053	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.612613	0			'come':24 'companynam':71 'de':66 'de-seri':65 'defin':33 'document':3,18,39,58 'easi':11 'encoding/xml':21 'flexibl':44 'found':52 'go':5,61 'gustavo':47 'key':70,75 'librari':28 'map':36 'need':42 'newco':73 'niemey':48 'packag':22,30,51 'read':1,15,63 'realli':8 'serial':67 'standard':27 'strap':68,69,74 'struct':34 'surpris':9 'true':78 'use':19,46 'useemail':76 'valu':72,77 'work':31 'xml':2,17,38,57 'xmlpath':50	en	
140	Caddy Partnership With Light Code Labs	{"ver":2,"uid":1,"hash":"SHA1:b42e649186acbceefd278b3aa32e1a15189b2a2a"}	https://www.ardanlabs.com/blog/2019/07/caddy-partnership-light-code-labs.html	2019-07-22 00:00:00	Ardan Labs (a leader in building Go enterprise software) is excited to announce that we have partnered with Light Code Labs and Matt Holt to bring Caddy into the Ardan Labs family of products and services. Caddy is a lightweight ingress service written in Go that provides automated security features and a plugin environment for extensibility. With the service being free open source (FOSS), small and large Go engineering teams finally have the ability to own and maintain their ingress and load balancing software with ease.	01628e4290ab6aedd4040ac47bda5dd91d88c83b	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.424837	0			'abil':80 'announc':19 'ardan':7,36 'autom':54 'balanc':89 'bring':32 'build':12 'caddi':1,33,43 'code':5,26 'eas':92 'engin':75 'enterpris':14 'environ':60 'excit':17 'extens':62 'famili':38 'featur':56 'final':77 'foss':70 'free':67 'go':13,51,74 'holt':30 'ingress':47,86 'lab':6,8,27,37 'larg':73 'leader':10 'light':4,25 'lightweight':46 'load':88 'maintain':84 'matt':29 'open':68 'partner':23 'partnership':2 'plugin':59 'product':40 'provid':53 'secur':55 'servic':42,48,65 'small':71 'softwar':15,90 'sourc':69 'team':76 'written':49	en	
157	Escape-Analysis Flaws	{"ver":2,"uid":1,"hash":"SHA1:8c3e989381ba9445181699fb29acfea007cde9f5"}	https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html	2018-01-22 00:00:00	Prelude It will be helpful to read this four-part series first on escape analysis and data semantics. Details on how to read an escape analysis report and pprof output have been outlined here.\nhttps://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html\nIntroduction Even after working with Go for 4 years, I am continually amazed by the language. Thanks to the static code analysis the compiler performs, the compiler can apply interesting optimizations to the code it produces.	a7f668b880924bbe71d076424c2b60d6658263c6	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.459514	0			'/blog/2017/05/language-mechanics-on-stacks-and-pointers.html':42 '4':50 'amaz':55 'analysi':3,20,31,64 'appli':71 'code':63,76 'compil':66,69 'continu':54 'data':22 'detail':24 'escap':2,19,30 'escape-analysi':1 'even':44 'first':17 'flaw':4 'four':14 'four-part':13 'go':48 'help':9 'interest':72 'introduct':43 'languag':58 'optim':73 'outlin':38 'output':35 'part':15 'perform':67 'pprof':34 'prelud':5 'produc':78 'read':11,28 'report':32 'semant':23 'seri':16 'static':62 'thank':59 'work':46 'www.ardanlabs.com':41 'www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html':40 'year':51	en	
127	Modules Part 06: Vendoring	{"ver":2,"uid":1,"hash":"SHA1:19f408a87d6ea2dd7888247dec317e5854423b9f"}	https://www.ardanlabs.com/blog/2020/04/modules-06-vendoring.html	2020-04-13 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nIntroduction It’s no secret that I am a fan of vendoring when it’s reasonable and practical to use it for your application projects. I believe vendoring gives your application projects the most durability since the project owns every line of source code it needs to build the applications. If you want a reproducible build without needing to rely on external services (like module mirrors) and being connected to the network, vendoring is the solution.	f67dd7428a6cbaf4ba77fb5289b6dc65b4d4641e	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.397782	0			'06':3 'applic':47,54,73 'athen':20 'believ':50 'build':71,79 'checksum':18 'code':67 'connect':92 'depend':11 'durabl':58 'everi':63 'extern':85 'fan':33 'give':52 'gopl':13,21 'improv':22 'index':6 'introduct':24 'like':87 'line':64 'minim':14 'mirror':17,89 'modul':1,88 'need':69,81 'network':95 'own':62 'part':2 'practic':41 'project':10,48,55,61 'reason':39 'reli':83 'reproduc':78 'secret':28 'select':16 'seri':5 'servic':86 'sinc':59 'solut':99 'sourc':66 'use':43 'vendor':4,23,35,51,96 'version':15 'want':76 'without':80	en	
136	Modules Part 01: Why And What	{"ver":2,"uid":1,"hash":"SHA1:387a7de5ec79cac8e7eded159fdb189ea80dfb55"}	https://www.ardanlabs.com/blog/2019/10/modules-01-why-and-what.html	2019-10-10 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nIntroduction Modules provide an integrated solution for three key problems that have been a pain point for developers since Go’s initial release:\nAbility to work with Go code outside of the GOPATH workspace. Ability to version a dependency and identify the most compatible version to use. Ability to manage dependencies natively using the Go tooling.	e6817909f3a194e0d5931743bc48c6233c3956f0	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.417236	0			'01':3 'abil':49,60,73 'athen':22 'checksum':20 'code':54 'compat':69 'depend':13,64,76 'develop':43 'go':45,53,80 'gopath':58 'gopl':15,23 'identifi':66 'improv':24 'index':8 'initi':47 'integr':30 'introduct':26 'key':34 'manag':75 'minim':16 'mirror':19 'modul':1,27 'nativ':77 'outsid':55 'pain':40 'part':2 'point':41 'problem':35 'project':12 'provid':28 'releas':48 'select':18 'seri':7 'sinc':44 'solut':31 'three':33 'tool':81 'use':72,78 'vendor':25 'version':17,62,70 'work':51 'workspac':59	en	
237	Send an email in Go with smtp.SendMail	{"ver":2,"uid":1,"hash":"SHA1:4ed754ccb8bc1dbaf2c6fa0f569362195f9aa6b5"}	https://www.ardanlabs.com/blog/2013/06/send-email-in-go-with-smtpsendmail.html	2013-06-13 00:00:00	I wanted to send an email from my TraceLog package when a critical exception occurred. Fortunately Go&rsquo;s standard library has a package called smpt which can be found inside the net package. When you look at the documentation you are left wanting.\nI spent 20 minutes researching how to use this package. After fighting through the parameters and bugs, I came up with this sample code:\npackage main\nimport (	70b80f1073510fd88030cac8247a1a51338c8160	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.614395	0			'20':53 'bug':67 'call':31 'came':69 'code':74 'critic':20 'document':46 'email':3,13 'except':21 'fight':62 'fortun':23 'found':36 'go':5,24 'import':77 'insid':37 'left':49 'librari':27 'look':43 'main':76 'minut':54 'net':39 'occur':22 'packag':17,30,40,60,75 'paramet':65 'research':55 'sampl':73 'send':1,11 'smpt':32 'smtp.sendmail':7 'spent':52 'standard':26 'tracelog':16 'use':58 'want':9,50	en	
2	An early end of term	{"ver":2,"uid":1,"hash":"SHA1:8a88c6df2bb3a713737e8b87b0a4292a4018e316"}	https://blog.acolyer.org/2020/03/23/an-early-end-of-term/	2020-03-23 06:00:39	\n<div class="wp-block-jetpack-markdown"><p>The last few weeks have been anything but normal for many of us. I do hope that you and your loved ones are managing to stay safe. My routines have been disrupted too, and with the closure of schools last week it&#8217;s essentially the Easter holidays one week earlier than expected for my children. At the moment my priority is to help any family, friends, and neighbours in need. So I&#8217;m pressing pause on The Morning Paper for a few weeks and calling an early &#8216;end of term&#8217; there too.</p>\n<p>It&#8217;s hard to know exactly what&#8217;s going to happen, but my expectation is that you&#8217;ll see somewhat more sporadic posting in a few weeks time &#8211; or maybe even more posting than usual if I&#8217;m locked indoors for weeks on end!!</p>\n<p>Until then, my thoughts are with you &#8211; stay safe!</p>\n<p>Adrian.</p>\n<h3>In case you missed it&#8230;</h3>\n<p>A few selections from the term so far:</p>\n<ul>\n<li><a href="https://blog.acolyer.org/2020/03/04/millions-of-tiny-databases/">Millions of tiny databases</a></li>\n<li><a href="https://blog.acolyer.org/2020/02/26/meaningful-availability/">Meaningful availability</a></li>\n<li><a href="https://blog.acolyer.org/2020/02/19/ten-year-egml-predictions/">Cloudy with a high chance of DBMS</a></li>\n<li><a href="https://blog.acolyer.org/2020/01/20/stella-coping-with-complexity-2/">STELLA: report from the SNAFU-catchers workshop on coping with complexity</a></li>\n<li><a href="https://blog.acolyer.org/2020/01/08/ironies-of-automation/">Ironies of automation</a></li>\n</ul>\n</div>\n	01e862638a25c327ae81c3712943a8e76a2576ca	\N	f	2020-08-14 05:06:00	2020-09-10 01:10:07.114202	8	https://blog.acolyer.org/2020/03/23/an-early-end-of-term/#comments		'adrian':151 'anyth':12 'autom':192 'avail':170 'call':90 'case':153 'catcher':184 'chanc':175 'children':60 'closur':42 'cloudi':171 'complex':189 'cope':187 'databas':168 'dbms':177 'disrupt':37 'earli':2,92 'earlier':55 'easter':51 'end':3,93,141 'essenti':49 'even':128 'exact':103 'expect':57,111 'famili':70 'far':164 'friend':71 'go':106 'happen':108 'hard':100 'help':68 'high':174 'holiday':52 'hope':21 'indoor':137 'ironi':190 'know':102 'last':7,45 'll':115 'lock':136 'love':26 'm':78,135 'manag':29 'mani':16 'mayb':127 'meaning':169 'million':165 'miss':155 'moment':63 'morn':83 'need':75 'neighbour':73 'normal':14 'one':27,53 'paper':84 'paus':80 'post':120,130 'press':79 'prioriti':65 'report':179 'routin':34 'safe':32,150 'school':44 'see':116 'select':159 'snafu':183 'snafu-catch':182 'somewhat':117 'sporad':119 'stay':31,149 'stella':178 'term':5,95,162 'thought':145 'time':125 'tini':167 'us':18 'usual':132 'week':9,46,54,88,124,139 'workshop':185	en	Adrian Colyer
214	Iterating Over Slices In Go	{"ver":2,"uid":1,"hash":"SHA1:5f977be0ed2f0a11a102ced0d26cce65aaf96e9b"}	https://www.ardanlabs.com/blog/2013/09/iterating-over-slices-in-go.html	2013-09-23 00:00:00	Slices are used everywhere in my code. If I am working with data from MongoDB, it is stored in a slice. If I need to keep track of a collection of problems after running an operation, it is stored in a slice. If you don&rsquo;t understand how slices work yet or have been avoiding them like I did when I started, read these two posts to learn more.\nZero vs.	80f39a87fc47fff34030d8806b2951eade7342f3	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.569618	0			'avoid':60 'code':12 'collect':35 'data':18 'everywher':9 'go':5 'iter':1 'keep':31 'learn':73 'like':62 'mongodb':20 'need':29 'oper':41 'post':71 'problem':37 'read':68 'run':39 'slice':3,6,26,47,54 'start':67 'store':23,44 'track':32 'two':70 'understand':52 'use':8 'vs':76 'work':16,55 'yet':56 'zero':75	en	
202	Building A Weather App Using Go	{"ver":2,"uid":1,"hash":"SHA1:bc46948ccd676dd2d7f96ad945d6b46b3cd6fd53"}	https://www.ardanlabs.com/blog/2013/12/building-weather-app-using-go.html	2013-12-10 00:00:00	At Ardan Studios we have spent the last 6 months, in our spare time and on weekends, building a consumer based mobile application called OutCast. The mobile application is tailored towards those who like spending time outdoors, whether that be fishing, hunting or any other type of activity.\nThis first release of OutCast shows the conditions for the buoy stations and marine forecasts areas within the United States. All this information is updated every 10 minutes and there are map views with traditional grids and search.	5475704abe37214999e756d8ea997dee62a7ba47	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.546668	0			'10':81 '6':15 'activ':54 'app':4 'applic':29,34 'ardan':8 'area':70 'base':27 'build':1,24 'buoy':65 'call':30 'condit':62 'consum':26 'everi':80 'first':56 'fish':47 'forecast':69 'go':6 'grid':90 'hunt':48 'inform':77 'last':14 'like':40 'map':86 'marin':68 'minut':82 'mobil':28,33 'month':16 'outcast':31,59 'outdoor':43 'releas':57 'search':92 'show':60 'spare':19 'spend':41 'spent':12 'state':74 'station':66 'studio':9 'tailor':36 'time':20,42 'toward':37 'tradit':89 'type':52 'unit':73 'updat':79 'use':5 'view':87 'weather':3 'weekend':23 'whether':44 'within':71	en	
220	Organizing Code to Support Go Get	{"ver":2,"uid":1,"hash":"SHA1:4d1d7ce3e838a7012d39aa17a2b41bbef8b3711e"}	https://www.ardanlabs.com/blog/2013/08/organizing-code-to-support-go-get.html	2013-08-28 00:00:00	For those of you who are like me, trying to learn the Mac and Linux operating systems, Golang programming and deployment constructs all at the same time, I feel your pain. I have been building a Go application for a couple of months on my Mac and it was time to deploy the code on a local Ubuntu server. I was having a really tough time and it was turning into a disaster.	51581519bbc0207dbf523a7232c1cbe01dc2d2f2	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.581031	0			'applic':44 'build':41 'code':2,60 'construct':28 'coupl':47 'deploy':27,58 'disast':79 'feel':35 'get':6 'go':5,43 'golang':24 'learn':17 'like':13 'linux':21 'local':63 'mac':19,52 'month':49 'oper':22 'organ':1 'pain':37 'program':25 'realli':70 'server':65 'support':4 'system':23 'time':33,56,72 'tough':71 'tri':15 'turn':76 'ubuntu':64	en	
1074	No more zero days	{"ver":2,"uid":1,"hash":"SHA1:f2a3c67c36b0c36531f1efc065d3fa72939f99ba"}	https://vishnubharathi.codes/blog/no-more-zero-days/	2020-08-22 21:04:43	<p>When I was feeling down and less productive towards the end of 2018, I used to search the web for motivation. In that process I happened to discover one of the golds of the internet. </p><p>It is this amazing comment on redit by <a href="https://www.reddit.com/user/ryans01/" target="_blank" rel="noopener">u/ryans01</a>. (A million thanks to this human)</p><p><a class="embedly-card" href="https://www.reddit.com/r/getdisciplined/comments/1q96b5/i_just_dont_care_about_myself/cdah4af" target="_blank" rel="noopener">Card</a></p><script async src="//embed.redditmedia.com/widgets/platform.js" charset="UTF-8"></script><p>A little graphic that is linked in that comment to summarize the idea of zero days.</p><p><img src="https://i.imgur.com/7xsp7hJ.png" alt=""></p><p>It gave a great momentum - I read books followed by books everynight, practiced a lot of coding, and even got very active on this blog at that time only. The last 2 months of 2018 were very productive. At that time, I was able to crack the interview of one of my dream companies and wrote a very successful blog post that went on to the top of Hackernews (which completely proved the point that people really find some of my writings useful).</p><p>After that, I just went on to being normal. In short, a lot happened. A lot of zero days.</p><p>After losing my job, these days I am trying to be productive everyday. But even then, I am hitting zero days. That’s weird! No work, but how did the day turn zero? I am feeling anxious all the time with questions like “Will I get a job that I love?”, “What if I fail an interview at a dream company after applying?” (this is totally making me to not apply in the first place), “What do I learn now?”….</p><p>hmmmm, after being stuck like this, I re-opened ryan’s comment once again today morning, just before writing this blog post and re-read it!</p><p>Well, it seems like, I just have to forgive my past self and concentrate on having a non-zero day! (a gift for future from the present)</p>	8efa21d3515bfcab3591e5f2777e4bd6dc29c147	\N	f	2020-09-08 12:10:00	2020-09-10 03:10:01.567695	0			'2':101 '2018':17,104 'a':49,72,83,126,164,167,217,229,295,300 'able':113 'active':91 'after':153,232,252 'again':265 'all':208 'am':178,188,205 'amazing':43 'an':226 'and':10,87,124,274,291 'anxious':207 'apply':241 'applying':233 'at':95,108,228 'be':181 'before':269 'being':160,253 'blog':94,129,272 'books':77,80 'but':184,197 'by':47,79 'carda':55 'coding':86 'comment':44,63,263 'companies':123 'company':231 'completely':140 'concentrate':292 'crack':115 'day':201,299 'days':4,176,191 'days.after':171 'days.it':70 'did':199 'discover':32 'do':247 'down':9 'dream':122,230 'end':15 'even':88,185 'everyday':183 'everynight':81 'fail':225 'feeling':8,206 'find':147 'first':244 'followed':78 'for':24,302 'forgive':287 'from':304 'future':303 'gave':71 'get':216 'gift':301 'golds':36 'got':89 'graphic':57 'great':73 'hackernews':138 'happened':30,166 'have':285 'having':294 'hitting':189 'hmmmm':251 'how':198 'human':54 'i':6,18,29,75,111,155,177,187,204,215,220,224,248,257,283 'idea':67 'if':223 'in':26,61,162,242 'internet':39 'interview':117,227 'is':41,59,235 'it':40,278,280 'job':174,218 'just':156,268,284 'last':100 'learn':249 'less':11 'like':213,255,282 'linked':60 'little':56 'losing':172 'lot':84,165,168 'love':221 'making':237 'me':238 'million':50 'momentum':74 'months':102 'more':2 'morning':267 'motivation':25 'my':121,150,173,288 'no':1,195 'non':297 'non-zero':296 'normal':161 'not':240 'now':250 'of':16,34,37,68,85,103,118,120,137,149,169 'on':45,92,133,158,293 'once':264 'one':33,119 'only':98 'opened':260 'past':289 'people':145 'place':245 'point':143 'post':130,273 'practiced':82 'present':306 'process':28 'productive':12,107,182 'proved':141 'questions':212 're':259,276 're-opened':258 're-read':275 'read':76,277 'really':146 'redit':46 'ryan':261 's':193,262 'search':21 'seems':281 'self':290 'short':163 'some':148 'stuck':254 'successful':128 'summarize':65 'thanks':51 'that':27,58,62,96,109,131,144,154,192,219 'the':14,22,35,38,66,99,116,135,142,200,209,243,305 'then':186 'these':175 'this':42,53,93,234,256,271 'time':97,110,210 'to':20,31,52,64,114,134,159,180,239,286 'today':266 'top':136 'totally':236 'towards':13 'trying':179 'turn':202 'u/ryans01':48 'used':19 'useful':152 'very':90,106,127 'was':7,112 'web':23 'weird':194 'well':279 'went':132,157 'were':105 'what':222,246 'when':5 'which':139 'will':214 'with':211 'work':196 'writing':270 'writings':151 'wrote':125 'zero':3,69,170,190,203,298		
1108	【Rust 日报】2020-09-09  引入“auditable”：审计Rust二进制文件中的已知错误或生产中的漏洞	{"ver":2,"uid":1,"hash":"SHA1:b28f2ff48e99edace3ec1b61b4a67138c9dc2f2d"}	https://rustcc.cn/article?id=912caa6c-6d8b-443e-ab5b-c275371706d5	2020-09-09 12:32:43	<h3>用 Rust 创建一门编程语言</h3>\n<p>系列教程：用 Rust 开发一个名叫 Eldiro 的编程语言</p>\n<p><a href="https://arzg.github.io/lang/" rel="noopener noreferrer">https://arzg.github.io/lang/</a></p>\n<h3>是什么让 Actix 比其他框架更快？</h3>\n<p>reddit 提问，蹲回答\n<a href="https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/" rel="noopener noreferrer">https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/</a></p>\n<h3>作为一个 Rust 业余爱好者，我不想考虑太多错误处理</h3>\n<p>作者给 2021 roadmap 提的建议</p>\n<p><a href="https://mbuffett.com/posts/rust-less-error-handling/" rel="noopener noreferrer">https://mbuffett.com/posts/rust-less-error-handling/</a></p>\n<h3>inline_tweak: 在项目运行中改变源代码中的数字或布尔值</h3>\n<p>例如下列代码可以在代码运行时，改变打印的值</p>\n<pre><code>use inline_tweak::*;\n\nfn main() {\n    loop {\n        println!("{}", tweak!(3.14)); // Try changing the value while the application is running\n    }\n}\n</code></pre>\n<p><a href="https://crates.io/crates/inline_tweak" rel="noopener noreferrer">https://crates.io/crates/inline_tweak</a></p>\n<h3>引入“auditable”：审计Rust二进制文件中的已知错误或生产中的漏洞</h3>\n<p>由于具有内存安全保证，Rust 在对安全性要求较高的应用程序开发中比较有前景。但是，尽管Rust crates 中的漏洞很少见，但它们仍然存在，Rust当前缺少处理它们的工具。</p>\n<p>例如，如果您正在运行易受攻击的版本，则Linux发行版会警告您，甚至可以选择自动安全更新。Cargo不仅没有安全更新基础结构，甚至都不知道编译某个二进制文件时要使用哪个库或库版本，因此无法检查您的系统是否易受攻击。</p>\n<p><a href="https://github.com/Shnatsel/rust-audit" rel="noopener noreferrer">rust-audit</a> 这个仓库已经在着手解决这个问题</p>\n<p><a href="https://github.com/Shnatsel/rust-audit" rel="noopener noreferrer">https://github.com/Shnatsel/rust-audit</a></p>\n<hr>\n<p>From 日报小组 @挺肥</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	075b0f53c7a917f2eb5a23f0ed8ad86fb6f5992f	\N	f	2020-09-09 13:10:00	2020-09-10 05:10:03.17337	0			'-09':4,5 '/crates/inline_tweak':66 '/lang/':20 '/posts/rust-less-error-handling/':40 '/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/':29 '/shnatsel/rust-audit':92 '2020':3 '2021':35 '3.14':54 'actix':22 'application':61 'arzg.github.io':19 'arzg.github.io/lang/':18 'audit':88 'auditable':7,68 'cargo不仅没有安全更新基础结构':83 'changing':56 'crates':75 'crates.io':65 'crates.io/crates/inline_tweak':64 'eldiro':16 'fn':49 'from':93 'github.com':91 'github.com/shnatsel/rust-audit':90 'inline':41,47 'is':62 'loop':51 'main':50 'mbuffett.com':39 'mbuffett.com/posts/rust-less-error-handling/':38 'println':52 'reddit':24 'roadmap':36 'running':63 'rust':1,10,14,31,71,87 'rust-audit':86 'rustcc论坛':97 'rust当前缺少处理它们的工具':78 'rust语言中文社区':100 'the':57,60 'try':55 'tweak':42,48,53 'use':46 'value':58 'while':59 'www.reddit.com':28 'www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/':27 '业余爱好者':32 '中的漏洞很少见':76 '但它们仍然存在':77 '但是':73 '作为一个':30 '作者给':34 '例如':79 '例如下列代码可以在代码运行时':44 '则linux发行版会警告您':81 '创建一门编程语言':11 '因此无法检查您的系统是否易受攻击':85 '在对安全性要求较高的应用程序开发中比较有前景':72 '在项目运行中改变源代码中的数字或布尔值':43 '如果您正在运行易受攻击的版本':80 '审计rust二进制文件中的已知错误或生产中的漏洞':8,69 '尽管rust':74 '开发一个名叫':15 '引入':6,67 '微信公众号':99 '我不想考虑太多错误处理':33 '挺肥':95 '提的建议':37 '提问':25 '支持rss':98 '改变打印的值':45 '日报':2 '日报小组':94 '是什么让':21 '比其他框架更快':23 '甚至可以选择自动安全更新':82 '甚至都不知道编译某个二进制文件时要使用哪个库或库版本':84 '用':9,13 '由于具有内存安全保证':70 '的编程语言':17 '社区学习交流平台订阅':96 '系列教程':12 '蹲回答':26 '这个仓库已经在着手解决这个问题':89		
1034	【Rust日报】2020-09-07 Linus 同款电脑 Rust 编译的凶猛体验,隔壁的小孩馋哭了	{"ver":2,"uid":1,"hash":"SHA1:386b9239dc485bd6a05154a792517d95257bff8b"}	https://rustcc.cn/article?id=3eb9e73d-4ed2-424c-a33b-05e4a78cd3ee	2020-09-07 09:36:07	<h2>Rune,一个Rust的可嵌入的支持aysnc的动态语言</h2>\n<p><code>Rune</code>是一个 Rust 可以嵌入的动态语言. 使用 Rust 编写, 基于 <code>Runestick</code> VM. 你可以认为他是 Rust 中的 Luna,但是语法是类 Rust 的.</p>\n<p>具有以下特性:</p>\n<ul>\n<li>非常干净的 Rust 集成</li>\n<li>内存安全的(通过引用计数)</li>\n<li>模板字符串</li>\n<li><code>?</code> opearator</li>\n<li>Pattern matching</li>\n<li>Structs 和 enums, 支持 associated data和funcitons</li>\n<li>动态的 <code>vectors</code>, <code>objects</code>, <code>tuples</code> 和内置 <code>serde</code> 支持.</li>\n<li>First-class 的 <code>async</code>支持.</li>\n<li>Generators</li>\n<li>Dynamic instance functions</li>\n<li>Stack isolation between function calls.</li>\n<li>Stack-based C FFI, like Lua's (TBD)</li>\n</ul>\n<p><code>The Rune Programing Language</code>: <a href="https://rune-rs.github.io/rune/foreword.html" rel="noopener noreferrer">https://rune-rs.github.io/rune/foreword.html</a></p>\n<p><code>Rune github</code>: <a href="https://github.com/rune-rs/rune" rel="noopener noreferrer">https://github.com/rune-rs/rune</a></p>\n<h2>vopono 项目回顾</h2>\n<p>vopono 是文章作者自己的第一个有用的 Rust 项目. vopono 是一个linux 的 VPN 工具, 可以让不同的程序在临时的 network namespace 上启动, 以便每个程序都使用各自独立的 VPN 连接,而不影响系统上的其他程序.</p>\n<p>作者从 项目背景, Rust带来的好处, 困难点, 目前存在的问题 这几方面来回顾这个项目的开发,这一篇干货满满的分享,下面为部分节选:</p>\n<p>Rust 带来的益处:</p>\n<ol>\n<li>\n<p><code>Enums</code></p>\n<p>Rust对 enum 的原生支持,让推导和 debug 更加的简单和方便(例如在为OpenVPN协议上选择 TCP 还是 UDP), Rust 编译器会强制我们处理 enum 的所有可能情况来减少 bug.</p>\n</li>\n<li>\n<p><code>StructOpt</code></p>\n<p>StructOpt是一个通过 <code>derive</code>宏来处理命令行参数 非常棒的 crate.</p>\n</li>\n<li>\n<p><code>Result</code>和<code>anyhow</code></p>\n<p>Rust 的 <code>Result</code> 和 <code>?</code> 操作符让我们可以非常优雅的处理错误. 结合 <code>anyhow</code> 这个 crate 会非常容易的处理错误.</p>\n</li>\n<li>\n<p><code>Serde</code></p>\n<p><code>Serde</code> 可以让你非常方便的序列化和反序列化你的结构体.</p>\n</li>\n<li>\n<p><code>Drop</code></p>\n<p><code>Drop</code> trait可以允许我们再在 struct 失去作用范围的时候运行desctructor. 当程序退出的时候, vopono用他来自动销毁一些临时的 network namespace.</p>\n</li>\n<li>\n<p><code>Cargo</code></p>\n<p>Cargo 作为 crate 管理器, 本身就是使用 Rust 的一大好处.</p>\n</li>\n<li>\n<p><code>include_str</code>宏</p>\n<p><code>include_str</code>宏可以在编译期间将硬盘上的文件作为静态 string 加载编译到 binary 中.</p>\n</li>\n<li>\n<p><code>Rustls</code></p>\n<p><code>Rustls</code>是一个TLS库,可以用来替代 OpenSSL.</p>\n</li>\n<li>\n<p><code>musl</code>和静态链接</p>\n<p><code>x86_64-unknown-linux-musl</code> target可以用来做(交叉)编译,静态的连接到<code>musl</code>而不是默认的<code>glibc</code>.</p>\n</li>\n</ol>\n<p>原文链接: <a href="http://jamesmcm.github.io/blog/2020/09/05/vopono/#en" rel="noopener noreferrer">http://jamesmcm.github.io/blog/2020/09/05/vopono/#en</a></p>\n<h2>Linus 同款电脑编译 Rust 的体验</h2>\n<p>作者把自己的 ThinkPad 升级为 Threadripper (<code>Linus Torvalds</code>也有这么一台)了.</p>\n<ul>\n<li>CPU AMD Ryzen Threadripper 32核/64线程(3.7GHz - 4.5GHz, 147MB cache)</li>\n<li>Motherboard: Asus Prime TRX40-PRO</li>\n<li>RAM: 128GB Corsair Vengeance DDR4 3200MHz (8 x 16GB)</li>\n<li>HDD: 2x (RAID 0) 1TB Seagate Firecuda 520 Gen 4 PCIe NVMe (up to 5000MB/R, 4400MB/W)</li>\n</ul>\n<p>体会一下这凶猛的编译速度,隔壁的小孩都馋哭了:</p>\n<table>\n<thead>\n<tr>\n<th>编译的项目以及SHA</th>\n<th>Thinkpad</th>\n<th>Threadripper</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alacritty @ 5ee7ae8</td>\n<td>82s</td>\n<td>22s</td>\n</tr>\n<tr>\n<td>rav1e @ 0fb9209b</td>\n<td>104s</td>\n<td>26s</td>\n</tr>\n<tr>\n<td>Nannou @ 11ccd5b</td>\n<td>183s</td>\n<td>34s</td>\n</tr>\n<tr>\n<td>FFmpeg @ 4e012fc8af</td>\n<td><code>210s</code></td>\n<td><code>23s</code></td>\n</tr>\n<tr>\n<td>Servo @ a5a21a59ad</td>\n<td>833s</td>\n<td>194s</td>\n</tr>\n<tr>\n<td>Rust @ 7d289aeade4</td>\n<td><code>2,640s</code></td>\n<td><code>213s</code></td>\n</tr>\n</tbody>\n</table>\n<p>文章连接: <a href="https://bobweb.co/article/threadripper-meets-rustc" rel="noopener noreferrer">https://bobweb.co/article/threadripper-meets-rustc</a></p>\n<h2>serde_query</h2>\n<p>serde_query是一个 <code>Serde</code> 数据模型下的一个 query language.</p>\n<pre><code>use serde_query::{DeserializeQuery, Query};\n\n#[derive(DeserializeQuery)]\nstruct Data {\n    #[query(".commit.authors.[0]")] // query 部分数据\n    first_author: String,\n    #[query(".hash")]\n    hash_value: u64,\n}\n\nlet document = serde_json::to_string(&amp;serde_json::json!({\n    "commit": {\n        "authors": ["Kou", "Kasumi", "Masaru"],\n        "date": "2020-09-10",\n    },\n    "hash": 0xabcd,\n}))?;\n\nlet data: Data = serde_json::from_str::&lt;Query&lt;Data&gt;&gt;(&amp;document)?.into();\n\nassert_eq!(data.first_author, "Kou");\nassert_eq!(data.hash_value, 0xabcd);\n</code></pre>\n<p><a href="https://github.com/pandaman64/serde-query/" rel="noopener noreferrer">https://github.com/pandaman64/serde-query/</a></p>\n<p>--</p>\n<p>From 日报小组 BobQin，FBI小白</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	76bd78d5473ed0d894aed154ea1193ca2deb7234	\N	f	2020-09-07 10:10:00	2020-09-10 05:10:03.178876	0			'-07':4 '-09':3,329 '-10':330 '/article/threadripper-meets-rustc':282 '/blog/2020/09/05/vopono/#en':193 '/pandaman64/serde-query/':356 '/rune-rs/rune':85 '/rune/foreword.html':80 '0':235,302 '0fb9209b':258 '0xabcd':332,353 '104s':259 '11ccd5b':262 '128gb':224 '147mb':215 '16gb':231 '183s':263 '194s':273 '1tb':236 '2':276 '2020':2,328 '210s':268 '213s':278 '22s':256 '23s':269 '26s':260 '2x':233 '3.7':211 '3200mhz':228 '32核/64':209 '34s':264 '4':241 '4.5':213 '4400mb/w':247 '4e012':266 '5000mb/r':246 '520':239 '5ee7ae8':254 '64':181 '640s':277 '7d289aeade4':275 '8':229 '82s':255 '833s':272 'a5a21a59ad':271 'alacritty':253 'amd':206 'anyhow':143 'assert':344,349 'associated':42 'asus':218 'async支持':55 'author':306,347 'authors':323 'based':67 'between':62 'binary':173 'bobqin':359 'bobweb.co':281 'bobweb.co/article/threadripper-meets-rustc':280 'bug':130 'c':68 'cache':216 'calls':64 'cargo':159,160 'class':53 'commit':322 'commit.authors':301 'corsair':225 'cpu':205 'crate':135,145,162 'data':299,334,335,341 'data.first':346 'data.hash':351 'data和funcitons':43 'date':327 'ddr4':227 'debug':120 'derive':296 'derive宏来处理命令行参数':133 'deserializequery':294,297 'document':314,342 'drop':150,151 'dynamic':57 'enum':117,128 'enums':40,115 'eq':345,350 'fbi小白':360 'fc8af':267 'ffi':69 'ffmpeg':265 'firecuda':238 'first':52,305 'first-class':51 'from':338,357 'function':63 'functions':59 'gen':240 'generators':56 'ghz':212,214 'github':82 'github.com':84,355 'github.com/pandaman64/serde-query/':354 'github.com/rune-rs/rune':83 'hash':309,310,331 'hdd':232 'include':167,169 'instance':58 'into':343 'isolation':61 'jamesmcm.github.io':192 'jamesmcm.github.io/blog/2020/09/05/vopono/#en':191 'json':316,320,321,337 'kasumi':325 'kou':324,348 'language':77,290 'let':313,333 'like':70 'linus':5,194,202 'linux':184 'lua':71 'luna':24 'masaru':326 'matching':37 'motherboard':217 'musl':185 'musl和静态链接':179 'namespace':99,158 'nannou':261 'network':98,157 'nvme':243 'objects':46 'opearator':35 'openssl':178 'pattern':36 'pcie':242 'prime':219 'pro':222 'programing':76 'query':284,289,293,295,300,303,308,340 'query是一个':286 'raid':234 'ram':223 'rav1e':257 'result':139 'result和anyhow':136 'rune':10,75,81 'rune-rs.github.io':79 'rune-rs.github.io/rune/foreword.html':78 'runestick':19 'rune是一个':12 'rust':7,13,16,22,26,30,90,113,126,137,165,196,274 'rustcc论坛':362 'rustls':175 'rustls是一个tls库':176 'rust对':116 'rust带来的好处':107 'rust日报':1 'rust语言中文社区':365 'ryzen':207 's':72 'seagate':237 'serde':49,147,148,283,285,287,292,315,319,336 'servo':270 'stack':60,66 'stack-based':65 'str':339 'string':171,307,318 'struct':153,298 'structopt':131 'structopt是一个通过':132 'structs':38 'str宏':168 'str宏可以在编译期间将硬盘上的文件作为静态':170 'target可以用来做':186 'tbd':73 'tcp':123 'the':74 'thinkpad':199,251 'threadripper':201,208,252 'to':245,317 'torvalds也有这么一台':203 'trait可以允许我们再在':152 'trx40':221 'trx40-pro':220 'tuples':47 'u64':312 'udp':125 'unknown':183 'unknown-linux-musl':182 'up':244 'use':291 'value':311,352 'vectors':45 'vengeance':226 'vm':20 'vopono':86,88,92 'vopono用他来自动销毁一些临时的':156 'vpn':95,102 'x':230 'x86':180 '一个rust的可嵌入的支持aysnc的动态语言':11 '上启动':100 '下面为部分节选':112 '中':174 '中的':23 '了':204 '交叉':187 '以便每个程序都使用各自独立的':101 '会非常容易的处理错误':146 '但是语法是类':25 '体会一下这凶猛的编译速度':248 '作为':161 '作者从':105 '作者把自己的':198 '你可以认为他是':21 '使用':15 '例如在为openvpn协议上选择':122 '具有以下特性':28 '内存安全的':32 '加载编译到':172 '动态的':44 '升级为':200 '原文链接':190 '可以嵌入的动态语言':14 '可以用来替代':177 '可以让不同的程序在临时的':97 '可以让你非常方便的序列化和反序列化你的结构体':149 '同款电脑':6 '同款电脑编译':195 '和':39,140 '和内置':48 '困难点':108 '基于':18 '失去作用范围的时候运行desctructor':154 '工具':96 '带来的益处':114 '当程序退出的时候':155 '微信公众号':364 '操作符让我们可以非常优雅的处理错误':141 '支持':41,50 '支持rss':363 '数据模型下的一个':288 '文章连接':279 '日报小组':358 '是一个linux':93 '是文章作者自己的第一个有用的':89 '更加的简单和方便':121 '本身就是使用':164 '模板字符串':34 '的':27,54,94,138 '的一大好处':166 '的体验':197 '的原生支持':118 '的所有可能情况来减少':129 '目前存在的问题':109 '社区学习交流平台订阅':361 '管理器':163 '线程':210 '结合':142 '编写':17 '编译':188 '编译器会强制我们处理':127 '编译的凶猛体验':8 '编译的项目以及sha':250 '而不影响系统上的其他程序':104 '让推导和':119 '还是':124 '这一篇干货满满的分享':111 '这个':144 '这几方面来回顾这个项目的开发':110 '连接':103 '通过引用计数':33 '部分数据':304 '隔壁的小孩都馋哭了':249 '隔壁的小孩馋哭了':9 '集成':31 '静态的连接到musl而不是默认的glibc':189 '非常干净的':29 '非常棒的':134 '项目':91 '项目回顾':87 '项目背景':106		
1109	【Rust 日报】2020-09-09  引入“auditable”：审计Rust二进制文件中的已知错误或生产中的漏洞	{"ver":2,"uid":1,"hash":"SHA1:24a26a8f536fdb664f2cbcda56b35d57e0725856"}	https://rustcc.cn/article?id=dab528b5-f2cd-480c-9691-7a3aeeae7962	2020-09-09 12:32:36	<h3>用 Rust 创建一门编程语言</h3>\n<p>系列教程：用 Rust 开发一个名叫 Eldiro 的编程语言</p>\n<p><a href="https://arzg.github.io/lang/" rel="noopener noreferrer">https://arzg.github.io/lang/</a></p>\n<h3>是什么让 Actix 比其他框架更快？</h3>\n<p>reddit 提问，蹲回答\n<a href="https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/" rel="noopener noreferrer">https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/</a></p>\n<h3>作为一个 Rust 业余爱好者，我不想考虑太多错误处理</h3>\n<p>作者给 2021 roadmap 提的建议</p>\n<p><a href="https://mbuffett.com/posts/rust-less-error-handling/" rel="noopener noreferrer">https://mbuffett.com/posts/rust-less-error-handling/</a></p>\n<h3>inline_tweak: 在项目运行中改变源代码中的数字或布尔值</h3>\n<p>例如下列代码可以在代码运行时，改变打印的值</p>\n<pre><code>use inline_tweak::*;\n\nfn main() {\n    loop {\n        println!("{}", tweak!(3.14)); // Try changing the value while the application is running\n    }\n}\n</code></pre>\n<p><a href="https://crates.io/crates/inline_tweak" rel="noopener noreferrer">https://crates.io/crates/inline_tweak</a></p>\n<h3>引入“auditable”：审计Rust二进制文件中的已知错误或生产中的漏洞</h3>\n<p>由于具有内存安全保证，Rust 在对安全性要求较高的应用程序开发中比较有前景。但是，尽管Rust crates 中的漏洞很少见，但它们仍然存在，Rust当前缺少处理它们的工具。</p>\n<p>例如，如果您正在运行易受攻击的版本，则Linux发行版会警告您，甚至可以选择自动安全更新。Cargo不仅没有安全更新基础结构，甚至都不知道编译某个二进制文件时要使用哪个库或库版本，因此无法检查您的系统是否易受攻击。</p>\n<p><a href="https://github.com/Shnatsel/rust-audit" rel="noopener noreferrer">rust-audit</a> 这个仓库已经在着手解决这个问题</p>\n<p><a href="https://github.com/Shnatsel/rust-audit" rel="noopener noreferrer">https://github.com/Shnatsel/rust-audit</a></p>\n<hr>\n<p>From 日报小组 @挺肥</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	4bed12094e29208f5332fafb23ee84fa43a7b351	\N	f	2020-09-09 13:10:00	2020-09-09 14:10:04.108718	0			'-09':4,5 '/crates/inline_tweak':66 '/lang/':20 '/posts/rust-less-error-handling/':40 '/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/':29 '/shnatsel/rust-audit':92 '2020':3 '2021':35 '3.14':54 'actix':22 'application':61 'arzg.github.io':19 'arzg.github.io/lang/':18 'audit':88 'auditable':7,68 'cargo不仅没有安全更新基础结构':83 'changing':56 'crates':75 'crates.io':65 'crates.io/crates/inline_tweak':64 'eldiro':16 'fn':49 'from':93 'github.com':91 'github.com/shnatsel/rust-audit':90 'inline':41,47 'is':62 'loop':51 'main':50 'mbuffett.com':39 'mbuffett.com/posts/rust-less-error-handling/':38 'println':52 'reddit':24 'roadmap':36 'running':63 'rust':1,10,14,31,71,87 'rust-audit':86 'rustcc论坛':97 'rust当前缺少处理它们的工具':78 'rust语言中文社区':100 'the':57,60 'try':55 'tweak':42,48,53 'use':46 'value':58 'while':59 'www.reddit.com':28 'www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/':27 '业余爱好者':32 '中的漏洞很少见':76 '但它们仍然存在':77 '但是':73 '作为一个':30 '作者给':34 '例如':79 '例如下列代码可以在代码运行时':44 '则linux发行版会警告您':81 '创建一门编程语言':11 '因此无法检查您的系统是否易受攻击':85 '在对安全性要求较高的应用程序开发中比较有前景':72 '在项目运行中改变源代码中的数字或布尔值':43 '如果您正在运行易受攻击的版本':80 '审计rust二进制文件中的已知错误或生产中的漏洞':8,69 '尽管rust':74 '开发一个名叫':15 '引入':6,67 '微信公众号':99 '我不想考虑太多错误处理':33 '挺肥':95 '提的建议':37 '提问':25 '支持rss':98 '改变打印的值':45 '日报':2 '日报小组':94 '是什么让':21 '比其他框架更快':23 '甚至可以选择自动安全更新':82 '甚至都不知道编译某个二进制文件时要使用哪个库或库版本':84 '用':9,13 '由于具有内存安全保证':70 '的编程语言':17 '社区学习交流平台订阅':96 '系列教程':12 '蹲回答':26 '这个仓库已经在着手解决这个问题':89		
1070	The Levenshtein distance in production	{"ver":2,"uid":1,"hash":"SHA1:25985b3b6918993416edcff8e1cd61ba5bf0741f"}	https://vishnubharathi.codes/blog/levenshtein-distance/	2020-08-22 21:04:43	<p>You might have heard about the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="noopener">Levenshtein distance</a> while in college or while preparing for tech interviews. It is the famous <a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="noopener">edit distance problem</a>. It is one of those must-try <a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Dynamic Programming</a> challenges.</p><p>You still there? even after I said the words “Dynamic Programming”? haha. Good! Because unlike you, I am good at running away from it; most of the time. But I am kind of sitting down to learn + practice this stuff now.</p><p><a href="https://www.manning.com/books/grokking-algorithms" target="_blank" rel="noopener">This amazing book</a> played a major role in making this topic a little less scary for me. What intrigued me the most is the spot where the author tries to explain some practical applications for dynamic programming.</p><p>Among all the applications I read there, two of them were practical and in-fact something that I use almost every day. One is in diff tools like <code>git diff</code> to compare text and another one is in spell checkers to figure out the closest matching words to the spelling we typed.</p><p>That’s great! Those are some “open up and read the source code” kind of things. Guess what, I love those kinds of things. Instead of sinking into interview prep materials one after another, I might take this as a fun chance to learn some code that is used in the wild!</p><p><img src="https://media.giphy.com/media/xT1R9YSHqTHAuD9FyU/giphy.gif" alt="missed hi5"></p><p>So let us learn about the problem, the way it is implemented in some open-source software (which are used by a lot of people - like a really really big number).</p><h2 id="Problem-statement"><a href="#Problem-statement" class="headerlink" title="Problem statement"></a>Problem statement</h2><p>I am going to copy-paste from Wikipedia to help me here.</p><blockquote><p> the Levenshtein distance is a string metric for measuring the difference between two sequences</p></blockquote><p>Basically, it is a way of comparing two strings.</p><blockquote><p>Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.</p></blockquote><p>Consider spell checkers. When you type something, the spell checking software should suggest you which is often a valid English word with a minimal Levenshtein distance.</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Here is the cool thing: <a href="https://github.com/git/git" target="_blank" rel="noopener">Git</a> uses dynamic programming. Apart from the mention in that book regarding <code>git diff</code>, I found an elegant use-case of Levenshtein distance in some other part of git.</p><p>Here is how I found this out. I usually end up typing the git sub-commands wrongly at least once per day. Git would intelligently understand what I am trying to type and output a suggestion like this</p><p><img src="/images/git-status.png" alt="git-status"></p><p>So, what is git doing here? It is just spell-checking the sub-command I typed in by comparing it against all the valid git sub-commands. Cool, at that point in time I was like “I think git might be using the Levenshtein distance to do this”.</p><p>Then I started <a href="https://github.com/git/git/search?q=The+most+similar+commands+are&amp;unscoped_q=The+most+similar+commands+are" target="_blank" rel="noopener">greping “The most similar commands are”</a> in the git source code to dig deep into the source code.</p><p>Bingo! Of course it uses the Levenshtein distance :)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> swap_penalty, <span class="keyword">int</span> substitution_penalty,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> insertion_penalty, <span class="keyword">int</span> deletion_penalty)</span></span>;</span><br></pre></td></tr></table></figure><p>Here is the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.h" target="_blank" rel="noopener">header file</a> that declares the function and the <a href="https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/levenshtein.c" target="_blank" rel="noopener">c implementation of the logic</a>.</p><p>It gets called in <a href="https://github.com/git/git/blob/4f0a8be78499454eac3985b6e7e144b8376ab0a5/help.c#L514-L623" target="_blank" rel="noopener">help.c</a>, the source file responsible for showing help message in git.</p><p>The function first loads all the valid sub-commands of git (including the aliases we have - just knew this fact while digging the source).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">load_command_list(<span class="string">"git-"</span>, &amp;main_cmds, &amp;other_cmds);</span><br><span class="line"></span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;aliases);</span><br><span class="line">add_cmd_list(&amp;main_cmds, &amp;other_cmds);</span><br><span class="line">QSORT(main_cmds.names, main_cmds.cnt, cmdname_compare);</span><br><span class="line">uniq(&amp;main_cmds);</span><br></pre></td></tr></table></figure><p>After that, it computes the Levenshtein distance and decides which command to suggest.</p><p>One interesting thing that I noted is how <em>practical</em> the code is. If we just see it as an interview prep thing, we might just write a recursive implementation and be done with it (which is usually simpler than writing an iterative approach). But in real-world a recursive approach might result in a stack overflow. Hence, an iterative approach to solving this problem is much more desirable.</p><p>Also, see the level of optimization, they do! A comment from the source below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* The idea is to build a distance matrix for the substrings of both</span><br><span class="line">* strings.  To avoid a large space complexity, only the last three rows</span><br><span class="line">* are kept in memory (if swaps had the same or higher cost as one deletion</span><br><span class="line">* plus one insertion, only two rows would be needed).</span><br></pre></td></tr></table></figure><p> At any given point of time, they are just using 3 rows of the memo table to figure out the answer, instead of keeping the entire memo table in memory.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">levenshtein</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *string1, <span class="keyword">const</span> <span class="keyword">char</span> *string2,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> w, <span class="keyword">int</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(string1), len2 = <span class="built_in">strlen</span>(string2);</span><br><span class="line"><span class="keyword">int</span> *row0, *row1, *row2;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">ALLOC_ARRAY(row0, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row1, len2 + <span class="number">1</span>);</span><br><span class="line">ALLOC_ARRAY(row2, len2 + <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...........</span></span><br><span class="line"><span class="comment">//...........</span></span><br><span class="line"></span><br><span class="line">i = row1[len2];</span><br><span class="line"><span class="built_in">free</span>(row0);</span><br><span class="line"><span class="built_in">free</span>(row1);</span><br><span class="line"><span class="built_in">free</span>(row2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Where-else"><a href="#Where-else" class="headerlink" title="Where else?"></a>Where else?</h2><p>After a while of staring at git source code today with a little bit of struggle reading C and getting into all the details of the solution, I wanted to read the implementation in some other programs as well. There are lot of command-line tools and I have noticed a lot of the good ones support this spell check feature.</p><p>In fact this kind of functionality should typically be provided by the sub-command parsing cli library so that it is available more easily to cli writers. I was right again! Since I am into Go recently, I tried searching through a famous command line parser library for Go called <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">Cobra</a>.</p><blockquote><p>Cobra is used in many Go projects such as Kubernetes, Hugo, and Github CLI to name a few</p></blockquote><h2 id="Cobra"><a href="#Cobra" class="headerlink" title="Cobra"></a>Cobra</h2><p><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">Cobra</a> contains a reference to Levenshtein distance in the <a href="https://github.com/spf13/cobra#suggestions-when-unknown-command-happens" target="_blank" rel="noopener">README file</a>.</p><p><img src="/images/edit-distance-readme.png" alt="edit-distance-readme"></p><p>Cool, it even has the configuration to choose the distance based on which the suggestions should be picked.</p><p>Now, on to the source code. It is written as <a href="https://github.com/spf13/cobra/blob/993cc5372a05240dfd59e3ba952748b36b2cd117/cobra.go#L164" target="_blank" rel="noopener">a simple function</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ld compares two strings and returns the levenshtein distance between them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ld</span><span class="params">(s, t <span class="keyword">string</span>, ignoreCase <span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is an iterative solution. To understand it better, I copy-pasted the function onto the <a href="https://play.golang.org/" target="_blank" rel="noopener">Go playground</a> and started playing around with it.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Edit distance = %d"</span>, ld(<span class="string">"abc"</span>, <span class="string">"ac"</span>, <span class="literal">true</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The answer correctly came up as 1. (just 1 deletion operation of b)</p><p>Now let me try to go line by line and try to figure out what is happening.</p><p>We accept two input strings <code>s</code> and <code>t</code>. We ignore the cases if the flag is set.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ignoreCase &#123;</span><br><span class="line">s = strings.ToLower(s)</span><br><span class="line">t = strings.ToLower(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, we create a two-dimensional array called <code>d</code> to act as the memo table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now to visualize things, I am adding a little function that prints the memo table.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  0  0  0 </span><br><span class="line">b  0  0  0 </span><br><span class="line">c  0  0  0</span><br></pre></td></tr></table></figure><p> Next, we initialize the first column of every row with the value of the row index.</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> d &#123;</span><br><span class="line">d[i][<span class="number">0</span>] = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the table becomes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  0  0 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0</span><br></pre></td></tr></table></figure><p>After that, we initialize the first row of every column to the value of the column index.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> d[<span class="number">0</span>] &#123;</span><br><span class="line">d[<span class="number">0</span>][j] = j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That yields</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  0 </span><br><span class="line">b  2  0  0 </span><br><span class="line">c  3  0  0</span><br></pre></td></tr></table></figure><p>That completes the base case: “When you start with an empty string and start building the strings, the operation count would just increase by one as it involves only one insertion operation.</p><p>Now, we start filling the inner parts of the table.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(t); j++ &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="comment">// logic</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ah nice, that felt so easy. If the row and column alphabet value are the same, then we don’t need to perform any operation and hence we get to use the last counted operation value by looking at the diagonal.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>] &#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example: Here is the final table. Notice how <code>(a,a)</code> is filled up with looking at the diagonal <code>(&quot;,&quot;)</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &quot;  a  c That is because, when the resulting string is already `a` there is no need to perform any </span><br><span class="line">&quot;  0  1  2 </span><br><span class="line">a  1  0  1 </span><br><span class="line">b  2  1  1 </span><br><span class="line">c  3  2  1</span><br></pre></td></tr></table></figure><p>If the alphabets differ, then we need to perform one of the operations (insert, remove, replace) to arrive at the desired alphabet. It seems like the way we figure out this is by finding the minimum of the adjacent cells (that are already filled) and adding 1 to it (to effectively say that we need to perform one more operation)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min := d[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> d[i][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d[i<span class="number">-1</span>][j<span class="number">-1</span>] &lt; min &#123;</span><br><span class="line">min = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">d[i][j] = min + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>So, at last, we return the last cell of the matrix.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> d[<span class="built_in">len</span>(s)][<span class="built_in">len</span>(t)]</span><br></pre></td></tr></table></figure><p>It may not be obvious of what is going on especially in the last part of the code explanation above (apologies for not trying to explain that here). The recommendation for it is to watch/read some tutorial on how the memo table is filled up like this. The point of this explanation is to share how cleanly those ideas behind filling up the memo table is implemented in the library code.</p><h2 id="Closing"><a href="#Closing" class="headerlink" title="Closing"></a>Closing</h2><p>The main difficulty I feel here is the arrival of the idea behind the memo table. What should be the columns and rows? What should be the values that should be filled up in the cells? How do we compute the value of each cell?</p><p>Apart from the interview prep point of view, knowing these techniques (just knowing that these kinds of techniques exist in the world) can be a nice addition to one’s problem-solving toolbox. The next time you are working on a cli app or some other app that needs spell check like suggestions, you know what to do!</p>	bed68cefb1eea2951a22a10e6aa146265ff65195	\N	f	2020-09-08 12:10:00	2020-09-10 03:10:01.558372	0			'+1':1025,1036,1232,1243 '-1':1071,1074,1080,1082,1087,1093,1099,1103,1105,1110,1112,1461,1464,1470,1472,1590,1596,1602,1606,1608,1613,1615 '0':1043,1049,1051,1261,1262,1263,1265,1266,1267,1269,1270,1271,1273,1274,1275,1298,1306,1307,1308,1311,1312,1315,1316,1319,1340,1342,1349,1354,1355,1358,1359,1362,1513,1518 '0after':1320 '0that':1363 '1':801,806,811,1056,1063,1117,1164,1166,1310,1350,1353,1405,1412,1514,1517,1519,1522,1523,1573 '1234':687 '12345':1493 '123456789101112131415161718192021int':767 '12345678min':1587 '123456load':564 '123for':1292 '123int':490 '1if':1527 '1so':1620 '2':1314,1351,1357,1515,1521,1526 '3':747,1318,1361,1525 'a':84,91,207,242,247,270,282,331,336,408,631,653,659,681,693,704,780,826,836,876,928,953,956,991,1215,1251,1259,1264,1304,1309,1347,1352,1483,1484,1494,1505,1516,1775,1792 'abc':1155 'about':10,224 'above':1655 'ac':1156 'accept':1188 'act':1223 'add':572,578 'adding':1250,1572 'addition':1777 'adjacent':1565 'after':44,200,593,825,1211 'again':917 'against':433 'ah':1418 'aliases':553,577 'all':117,434,543,846 'alloc':797,802,807 'almost':136 'alphabet':1429,1548 'alphabets':1529 'already':1504,1569 'am':57,70,254,402,920,1249 'amazing':81 'an':360,623,645,663,1126,1372 'and':128,150,176,406,519,600,634,843,872,948,998,1143,1180,1193,1375,1427,1443,1571,1727 'another':151,201 'answer':757,1159 'any':738,1441,1512 'apart':348,1751 'apologies':1656 'app':1794,1798 'applications':113,119 'approach':647,655,665 'are':172,239,470,713,744,865,1431,1568,1789 'around':1146 'array':798,803,808,1219 'arrival':1714 'arrive':1544 'as':206,622,725,862,945,990,1163,1224,1388 'at':59,391,442,737,830,1456,1490,1545,1621 'author':107 'available':908 'avoid':703 'away':61 'b':1170,1268,1313,1356,1520 'base':1366 'based':974 'be':454,635,735,894,980,1639,1724,1731,1736,1774 'because':53,1498 'becomes12345':1303 'behind':1695,1718 'below':686 'better':1132 'between':277,291,1003 'big':250 'bit':838 'book':82,354 'bool':1010 'both':700 'build':692 'building':1377 'but':68,648 'by':241,430,896,1178,1386,1454,1559 'c':521,842,1260,1272,1305,1317,1348,1360,1495,1524 'called':527,936,1220 'came':1161 'can':1773 'case':364,1367 'cases':1198 'cell':1627,1750 'cells':1566,1741 'challenges.you':40 'chance':209 'change':309 'char':493,496,770,773 'character':301 'check':885,1802 'checkers':156,316 'checking':323,422 'choose':971 'cleanly':1692 'cli':902,912,950,1793 'closest':161 'cmd':573,579 'cmdname':588 'cmds':569,571,576,582,584,592 'cobra.cobra':937 'code':180,213,475,615,833,986,1653 'code.bingo':482 'code.closingthe':1706 'college':16 'column':1281,1329,1335,1428 'columns':1726 'command':426,565,603,869,900,930 'command-line':868 'commands':389,440,469,548 'comment':682 'compare':148,589 'compares':995 'comparing':285,431 'completes':1364 'complexity':707 'compute':1745 'computes':596 'configuration':969 'const':492,495,769,772 'contains':955 'cool':342,441 'copy':258,1135 'copy-paste':257 'copy-pasted':1134 'correctly':1160 'cost':724 'count':1382 'counted':1451 'course':484 'create':1214 'd':782,1020,1029,1030,1040,1041,1048,1050,1075,1078,1085,1090,1096,1101,1108,1113,1119,1153,1221,1236,1237,1295,1296,1339,1341,1465,1468,1588,1593,1599,1604,1611,1616,1631 'day':138,395 'decides':601 'declares':516 'deep':478 'deletion':508,727,1167 'deletions':304 'desirable.also':673 'desired':1547 'details':848 'diagonal':1492 'diagonal.12345if':1458 'diff':142,146,357 'differ':1530 'difference':276 'difficulty':1708 'dig':477 'digging':561 'dimensional':1218 'distance':3,13,28,268,290,367,458,489,599,694,960,973,1002,1152 'distance.githere':339 'do':460,680,1743,1809 'doing':415 'don':1436 'done':636 'down':74 'dynamic':38,49,115,346 'each':1749 'easily':910 'easy':1423 'edit':27,1151 'edits':302 'effectively':1577 'elegant':361 'else':824,1083,1473 'empty':1373 'end':382 'english':333 'entire':762 'especially':1646 'even':43,966 'every':137,1283,1328 'example':1475 'exist':1769 'explain':110,1661 'explanation':1654,1687 'fact':131,559,887 'famous':26,929 'feature.in':886 'feel':1710 'felt':1421 'fewcobracobra':954 'figure':158,754,1183,1555 'file':514,532 'file.cool':964 'filled':1486,1570,1679,1737 'filling':1397,1696 'final':1479 'finding':1560 'first':541,1280,1325 'flag':1201 'fmt.printf':1150 'for':20,95,114,273,534,696,934,1026,1037,1045,1054,1061,1233,1410,1474,1657,1666 'found':359,377 'free':815,817,819 'from':62,260,349,683,1752 'fun':208 'function':518,540,1138,1253 'function.1234567891011121314151617181920212223242526272829303132333435':993 'functionality':891 'get':1446 'gets':526 'getting':844 'git':145,344,356,386,396,414,437,452,473,550,567,831 'git.here':373 'git.the':539 'github':949 'given':739 'go':922,935,942,1141,1176 'going':255,1644 'good':52,58,880 'great':170 'greping':465 'guess':184 'had':719 'haha':51 'happening.we':1187 'has':967 'have':8,555,874 'header':513 'heard':9 'help':263,536 'help.c':529 'hence':662,1444 'here':265,416,510,1476,1663,1711 'higher':723 'how':375,612,1482,1674,1691,1742 'hugo':947 'i':45,56,69,120,134,186,202,358,376,380,401,427,447,450,463,609,795,812,822,852,873,914,919,924,1027,1031,1038,1042,1044,1062,1064,1067,1070,1076,1079,1086,1091,1097,1102,1109,1114,1133,1234,1238,1248,1293,1297,1299,1411,1413,1416,1460,1466,1469,1589,1594,1600,1605,1612,1617,1709 'idea':689,1717 'ideas':1694 'if':617,717,1012,1068,1089,1100,1199,1424,1592,1603 'ignore':1196 'ignorecase':1009,1013,1204 'implementation':522,633,857 'implemented':231,1702 'in':4,15,87,130,141,154,217,232,352,368,429,445,471,528,538,649,658,715,765,858,940,961,1647,1703,1739,1770 'in-fact':129 'including':551 'increase':1385 'index':1291 'index.123for':1336 'initialize':1278,1323 'inner':1399 'input':1190 'insert':1540 'insertion':505,730,1393 'insertions':303 'instead':192,758 'int':498,501,504,507,775,777,779,781,783,790,794,1011,1022,1033,1229,1240 'intelligently':398 'interesting':606 'interview':196,624,1754 'interviews':22 'into':195,312,479,845,921 'intrigued':98 'involves':1390 'is':24,31,102,140,153,215,230,269,281,294,329,340,374,413,418,511,611,616,640,670,690,907,938,988,1125,1186,1202,1477,1485,1497,1503,1507,1558,1643,1668,1678,1688,1701,1712 'it':23,30,63,229,280,417,432,485,595,621,638,906,965,987,1124,1131,1389,1549,1575,1636,1667 'it.123func':1148 'iterative':646,664,1127 'j':796,1046,1052,1053,1055,1057,1060,1073,1077,1081,1088,1092,1098,1104,1111,1115,1337,1343,1344,1404,1406,1409,1463,1467,1471,1591,1595,1601,1607,1614,1618 'just':419,556,619,629,745,1165,1384,1762 'keeping':760 'kept':714 'kind':71,181,889 'kinds':189,1766 'knew':557 'know':1806 'knowing':1759,1763 'kubernetes':946 'large':705 'last':710,1450,1622,1626,1649 'ld':994,1005,1154 'learn':76,211,223 'least':392 'len':1023,1034,1058,1065,1120,1122,1230,1241,1407,1414,1632,1634 'len1':784 'len2':787,800,805,810,814 'less':93 'let':221,1172 'level':676 'levenshtein':2,12,267,289,338,366,457,488,491,598,768,959,1001 'library':903,933,1705 'like':144,246,410,449,1551,1681,1803 'line':870,931,1177,1179 'list':566,574,580 'little':92,837,1252 'loads':542 'logic':1417 'logic.it':525 'looking':1455,1489 'lot':243,866,877 'love':187 'main':568,575,581,591,1149,1707 'main_cmds.cnt':587 'main_cmds.names':586 'major':85 'make':1021,1032,1228,1239 'making':88 'many':941 'matching':162 'materials':198 'matrix':695 'matrix.1return':1630 'may':1637 'me':96,99,264,1173 'measuring':274 'memo':751,763,1226,1257,1676,1699,1720 'memory':716,766 'mention':351 'message':537 'metric':272 'might':7,203,453,628,656 'min':1084,1094,1095,1106,1107,1116,1597,1598,1609,1610,1619 'minimal':337 'minimum':296,1562 'more':672,909,1585 'most':64,101,467 'much':671 'must':36 'must-try':35 'name':952 'need':1438,1509,1533,1581 'needed':736 'needs':1800 'next':1276,1786 'nice':1419,1776 'no':1508 'not':1638,1658 'noted':610 'notice':1481 'noticed':875 'now':1171,1244,1300 'now.this':80 'number':251,297 'obvious':1640 'of':33,65,72,124,182,190,193,244,284,298,365,372,483,523,549,677,699,741,749,759,828,839,849,867,878,890,1169,1282,1288,1327,1333,1401,1537,1563,1628,1641,1651,1685,1715,1748,1757,1767 'often':330 'on':975,982,1645,1673,1791 'once':393 'one':32,139,152,199,310,726,729,1387,1392,1536,1584,1779 'ones':881 'only':708,731,1391 'onto':1139 'open':174,235 'open-source':234 'operation':1168,1381,1442,1452,1586 'operation.now':1394 'operations':1539 'optimization':678 'or':17,305,722,1795 'other':370,570,583,860,1797 'other.consider':314 'out':159,379,755,1184,1556 'output':407 'overflow':661 'parser':932 'parsing':901 'part':371,1650 'parts':1400 'paste':259 'pasted':1136 'penalty':500,503,506,509 'people':245 'per':394 'perform':1440,1511,1535,1583 'picked.now':981 'played':83 'playground':1142 'playing':1145 'plus':728 'point':444,740,1684,1756 'practical':112,127,613 'practice':77 'prep':197,625,1755 'preparing':19 'prints':1255 'problem':29,226,252,669,1782 'problem-solving':1781 'production':5 'programming':39,50,347 'programming.among':116 'programs':861 'projects':943 'provided':895 'qsort':585 'range':1028,1039,1047,1235,1294,1338 'read':121,177,855 'reading':841 'readme':963 'real':651 'real-world':650 'really':248,249 'recently':923 'recommendation':1665 'recursive':632,654 'reference':957 'regarding':355 'remove':1541 'replace':1542 'required':307 'responsible':533 'result':657 'resulting':1501 'return':821,1118,1624 'returns':999 'right':916 'role':86 'row':1284,1290,1326,1426 'row0':791,799,816 'row1':792,804,813,818 'row2':793,809,820 'rows':712,733,748,1728 'running':60 's':169,778,1006,1014,1016,1024,1066,1069,1121,1192,1205,1207,1231,1415,1459,1633,1780 'said':46 'same':721,1433 'say':1578 'scary':94 'searching':926 'see':620,674 'seems':1550 'sequencesbasically':279 'set.1234if':1203 'share':1690 'should':325,892,979,1723,1730,1735 'showing':535 'similar':468 'simple':992 'simpler':642 'since':918 'single':300 'single-character':299 'sinking':194 'sitting':73 'so':220,904,1422 'software':237,324 'solution':851,1128 'solving':667,1783 'some':111,173,212,233,369,859,1671,1796 'something':132,320 'source':179,236,474,481,531,563,685,832,985 'space':706 'spell':155,315,322,421,884,1801 'spell-checking':420 'spelling':166 'spot':104 'stack':660 'staring':829 'start':1370,1376,1396 'started':464,1144 'statementi':253 'still':41 'string':271,1008,1374,1502 'string1':494,771,786 'string2':497,774,789 'strings':701,997,1191,1379 'strings.informally':287 'strings.tolower':1015,1018,1206,1209 'strlen':785,788 'struggle':840 'stuff':79 'sub':388,425,439,547,899 'sub-command':424,898 'sub-commands':387,438,546 'substitution':502 'substitutions':306 'substrings':698 'such':944 'suggest':326 'suggest.one':605 'suggestion':409 'suggestions':978,1804 'support':882 'swap':499 'swaps':718 't':1007,1017,1019,1035,1059,1072,1123,1194,1208,1210,1242,1408,1437,1462,1635 'table':752,764,1302,1480,1677,1700,1721 'table.12345':1258 'table.12345for':1403 'table.1234d':1227 'take':204 'tech':21 'techniques':1761,1768 'text':149 'than':643 'that':133,214,353,443,515,594,608,905,1212,1254,1321,1345,1420,1496,1567,1579,1662,1734,1764,1799 'the':1,11,25,47,66,100,103,106,118,160,165,178,218,225,227,266,275,288,295,313,321,341,350,385,423,435,456,466,472,480,487,512,517,520,524,530,544,552,562,597,614,675,684,688,697,709,720,750,756,761,847,850,856,879,897,962,968,972,977,984,1000,1137,1140,1158,1197,1200,1225,1256,1279,1286,1289,1301,1324,1331,1334,1365,1378,1380,1398,1402,1425,1432,1449,1457,1478,1491,1500,1528,1538,1546,1552,1561,1564,1625,1629,1648,1652,1664,1675,1683,1698,1704,1713,1716,1719,1725,1732,1740,1746,1753,1771,1785 'them':125 'them.func':1004 'then':462,1434,1531 'there':42,122,864,1506 'these':1760,1765 'they':679,743 'thing':343,607,626 'things':183,191,1247 'think':451 'this':78,89,205,378,461,558,668,883,888,1557,1682,1686 'thisso':411 'those':34,171,188,1693 'three':711 'through':927 'time':67,446,742,1787 'to':75,109,147,157,164,210,256,262,308,404,459,476,604,666,691,702,753,854,911,951,958,970,983,1129,1175,1182,1222,1245,1330,1439,1447,1510,1534,1543,1574,1576,1582,1660,1669,1689,1778,1808 'today':834 'toolbox':1784 'tools':143,871 'topic':90 'tried':925 'tries':108 'true':1157 'try':37,1174,1181 'trying':403,1659 'tutorial':1672 'two':123,278,286,292,732,996,1189,1217 'two-dimensional':1216 'type':319,405 'typed':428 'typed.that':168 'typically':893 'typing':384 'understand':399,1130 'uniq':590 'unlike':54 'up':175,383,1162,1487,1680,1697,1738 'us':222 'use':135,363,1448 'use-case':362 'used':216,240,939 'uses':345,486 'using':455,746 'usually':381,641 'valid':332,436,545 'value':1287,1332,1430,1453,1747 'values':1733 'view':1758 'visualize':1246 'w':776 'wanted':853 'was':448,915 'watch/read':1670 'way':228,283,1553 'we':167,554,618,627,1195,1213,1277,1322,1395,1435,1445,1532,1554,1580,1623,1744 'well':863 'were':126 'what':97,185,400,412,1185,1642,1722,1729,1807 'when':317,1368,1499 'where':105,823 'which':238,328,602,639,976 'while':14,18,560,827 'wikipedia':261 'wild':219 'with':335,637,835,1147,1285,1371,1488 'word':311,334 'words':48,163,293 'working':1790 'world':652,1772 'would':397,734,1383 'write':630 'writers':913 'writing':644 'written':989 'wrongly':390 'yields12345':1346 'you':6,55,318,327,1369,1788,1805		
1071	Learning to sort	{"ver":2,"uid":1,"hash":"SHA1:b4309e020e63fe84d8b118fe0cc02a09f297d98d"}	https://vishnubharathi.codes/blog/learning-to-sort/	2020-08-22 21:04:43	<p>I kind of procrastinate over starting to learn about sorting whenever I am preparing for interviews. Mainly because we need to memorize the working of various sorting algorithms. But over time, I have realized that each sorting algorithm is based on some intuition and if we can understand those intuitions, then it becomes easy to remember how they work.</p><p>A fair-warning: This blog post doesn’t contain many images, animations, etc. Just a bunch of text, math, and code - the minimum things just enough for me to get ideas about sorting whenever I feel like!</p><p>One of my earliest attempts at learning about sorting algorithms is by writing <a href="http://node-machine.org/machinepack-sort" target="_blank" rel="noopener">machinepack-sort</a></p><p>I am going to do a similar effort here, but this time I am planning to do these steps.</p><ol><li>Understand and visualize how a sorting algorithm works. (by reading blogs, seeing video tutorials and lectures)</li><li>Come up with the time and space complexity for each of them.</li><li>Write code and test the implementation using <a href="https://leetcode.com/problems/sort-an-array/" target="_blank" rel="noopener">this leetcode puzzle</a></li><li>Try to find practical use cases for each algorithm. (in the retrospect, wasn’t able to concentrate on this much. Maybe I will update this post, as I discover a usage in a practical use case)</li></ol><p>There are just a lot of different sorting algorithms. This blog contains the most common ones at first and is open to get updated with some more sorting algorithms as I learn/discover them.</p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I will try to collect information that might clarify details for understanding the sorting algorithms in this section.</p><h3 id="Trade-off"><a href="#Trade-off" class="headerlink" title="Trade-off"></a>Trade-off</h3><p>I heavily recommend taking a look at <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts" target="_blank" rel="noopener">this comparison table</a> to understand the trade-offs of different kinds of sorting algorithms.</p><p>Pasting a screenshot of the table here. One could use this table to compare and contrast different algorithms and reason about which one to use!</p><p><img src="/images/sorting.png" alt="sorting"></p><h3 id="0-1"><a href="#0-1" class="headerlink" title="0,1"></a>0,1</h3><p>I think it is good to think about the very basic cases first and handle them at first. The very basic case is</p><p>When the list to be sorted has only one or zero elements, we just have to return the list itself (because it is already sorted)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// implement sorting for n elements here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think that some implementations try to embed this logic in the core logic itself, but anyway I would just like to make things simple and take one thing off from our table right away!</p><h3 id="Stable-Sorting"><a href="#Stable-Sorting" class="headerlink" title="Stable Sorting"></a>Stable Sorting</h3><p>When sorting a collection, what if two items with the same value exist.</p><p>[5 2 1 1 6]</p><p>Notice how 1 is repeated. While sorting, should we leave their relative order the same or should we shift them?</p><p>Well, it is up to you. If your sorting implementation maintains the relative order of equal elements, then it is said to be stable sorting.</p><p>Here is a more practical example. Consider an array of JSON objects that need to be sorted based on marks of students.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>If the above array is to be sorted using stable sorting, we would get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In case of an unstable sort, we might get</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personC"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personB"</span>, <span class="attr">"mark"</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personA"</span>, <span class="attr">"mark"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"name"</span>: <span class="string">"personD"</span>, <span class="attr">"mark"</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Notice how the relative order of two persons with the same mark is disrupted for an unstable sort.</p><p>Further reading: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sorting_algorithm#Stability</a></p><h3 id="Comparison-and-non-comparison-sorts"><a href="#Comparison-and-non-comparison-sorts" class="headerlink" title="Comparison and non-comparison sorts"></a>Comparison and non-comparison sorts</h3><p>Woah, just discovered this type of categorization of sorting algorithms: <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms</a></p><p>I think for most of the post here we will focus on Comparison sorts but would like to explore this topic as we explore various algorithms.</p><h2 id="Sorting-Algorithms"><a href="#Sorting-Algorithms" class="headerlink" title="Sorting Algorithms"></a>Sorting Algorithms</h2><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><p>A very simple sorting technique. The reason it is called a selection sort is that we will <strong>select</strong> the lowest/highest element at a time and place it in a sorted manner.</p><p>I think this example from <a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">Wikipedia</a> makes it clear</p><table><thead><tr><th>Sorted sublist</th><th>Unsorted sublist</th><th>Least element in unsorted list</th></tr></thead><tbody><tr><td>()</td><td>(11, 25, 12, 22, 64)</td><td>11</td></tr><tr><td>(11)</td><td>(25, 12, 22, 64)</td><td>12</td></tr><tr><td>(11, 12)</td><td>(25, 22, 64)</td><td>22</td></tr><tr><td>(11, 12, 22)</td><td>(25, 64)</td><td>25</td></tr><tr><td>(11, 12, 22, 25)</td><td>(64)</td><td>64</td></tr><tr><td>(11, 12, 22, 25, 64)</td><td>()    </td></tr></tbody></table><h4 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h4><p>So the intuition here is to <strong>select</strong> the lowest/highest number from the unsorted sublist and move it to sorted sublist.</p><h4 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>Finding the the lowest/highest element takes O(n). This search needs to be done n times in-order to get the final answer.</p><p>The number of items to be searched decreases by one each time. First we search n items, then (n-1) items:</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Now it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-complexity"><a href="#Space-complexity" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>We move the lowest/highest element each time to a sorted sublist. The space complexity really depends on the way we allocate this sorted sublist.</p><p>If we create a new list and append the lowest/highest each time, then we will end up with n allocations. So <strong>O(n)</strong>.</p><p>But if we implement our code in a way to just swap the (n-1)<sup>th</sup> index for the n<sup>th</sup> lowest/highest element, we would end up doing everything in-place. So <strong>O(1)</strong>.</p><h4 id="Step-by-step-code"><a href="#Step-by-step-code" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we try to write down the logic for finding the lowest number (assume we need to do ascending order sort).</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[<span class="number">0</span>]</span><br><span class="line">    smallestIdx := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we execute this n times, we will get back the same index. Our idea here is to reduce the length of the unsorted sublist being passed into the array, so that we get back the index of n<sup>th</sup> lowest item. So building up on that.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just call the <code>findSmallest</code> procedure n times and do a swap everytime to construct the sorted sublist.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h4><p>Now, we have a Space = O(1) and Time = O(n<sup>2</sup>) implementation here!</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        smallestIdx := findSmallest(nums, i)</span><br><span class="line">        nums[i], nums[smallestIdx] = nums[smallestIdx], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSmallest</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    smallest := nums[start]</span><br><span class="line">    smallestIdx := start</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; smallest &#123;</span><br><span class="line">            smallest = nums[i]</span><br><span class="line">            smallestIdx = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIdx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">Wikipedia</a></li><li><a href="https://learning.oreilly.com/library/view/grokking-algorithms-an/9781617292231/kindle_split_008.html" target="_blank" rel="noopener">Book: Grokking Algorithms: An illustrated guide for programmers and other curious people</a></li></ul><h3 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h3><p>Values are bubbled up while sorting using Bubble sort. Lets see what we mean by “bubbling up”.</p><p>The way bubble sort works is, we compare i and i+1 elements and swap them if i<sup>th</sup> element is greater than (i+1)<sup>th</sup> element. If we do this repeatedly for ~n times, the greater elements would start bubbling up at the end of the list and the list will be sorted at the end.</p><p>Consider the example of sorting: [5, 4, 6, 2, 1] (into an ascending order list)</p><p><code>i=0</code>; First we compare 5 and 4. Since <code>5 &gt; 4</code>, we swap.</p><p>4 5 6 2 1</p><p><code>i=1</code>; We compare 5 and 6. Since <code>5 &lt; 6</code>, no swap.</p><p>4 5 6 2 1</p><p><code>i=2</code>; We compare 6 and 2. Since <code>6 &gt; 2</code>, we swap.</p><p>4 5 2 6 1</p><p><code>i=3</code>; We compare 6 and 1. Since <code>6 &gt; 1</code>, we swap.</p><p>4 5 2 1 6</p><p>That’s it! Notice how 6 (the highest number) got <strong>bubbled up</strong> at the end of the list.</p><p>If we perform the same procedure n times, we will end up bubbling all the n highest numbers, thus resulting in sorted order.</p><h4 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h4><p>Bubble up the highest number to the last and build up the sorted list from backwards.</p><h4 id="Time-Complexity-1"><a href="#Time-Complexity-1" class="headerlink" title="Time Complexity"></a>Time Complexity</h4><p>We are performing in-memory swaps upto the n-1<sup>th</sup> index in the first iteration. At this point, the highest number is bubbled up at the <code>n-1</code><sup>th</sup> index.</p><p>In the second iteration, we perform swapping upto the n-2<sup>th</sup> index. At this point, the highest number is bubbled up at the <code>n-2</code><sup>th</sup> index.</p><p>This iteration happens n times and for each iteration the length of the unsorted list goes down by one.</p><p>n + (n-1) + (n-2) + …. + 1 </p><p>Again it boils to simple math, “Sum of first n natural numbers” = (n*(n+1))/2 = (n<sup>2</sup> + n) / 2</p><p>Now omitting the constants and lower degree, we arrive at the time complexity.</p><p><strong>O(n<sup>2</sup>)</strong></p><h4 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h4><p>This is easy to figure out because we are not allocating any new structures during the process. We are just doing a bunch of in-memory swaps.</p><p>So, <strong>O(1)</strong></p><h4 id="Step-by-step-code-1"><a href="#Step-by-step-code-1" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we will handle for the case where array is of size 0 or 1. In that case, we just need to return back the same array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we will try to get the “bubble up” code done. This part of the code will just bubble the highest element. Once we have this logic, we just perform the logic for n times to bubble up all the elements.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">        nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cool, we will wrap up the bubble up code with a loop running n times.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= (<span class="built_in">len</span>(nums)<span class="number">-2</span>); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it, we should now have nums sorted in-memory. We can try to do one optimisation here. Since we bubble up the highest element, we can avoid trying the swapping logic on already bubbled up values. So, instead of iterating up to <code>len(nums)-2</code> index, we will iterate up to <code>(len(nums)-2)-n)</code> index, so that we avoid the index of already bubbled up values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">            nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-1"><a href="#Full-code-1" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="built_in">len</span>(nums); n++ &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= ((<span class="built_in">len</span>(nums)<span class="number">-2</span>)-n) ; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">                nums[i], nums[i+<span class="number">1</span>] = nums[i+<span class="number">1</span>], nums[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-1"><a href="#Resources-1" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=6Gv8vg0kcHc" target="_blank" rel="noopener">Hackerrank Youtube</a></li></ul><h3 id="Insertion-sort"><a href="#Insertion-sort" class="headerlink" title="Insertion sort"></a>Insertion sort</h3><p>At first, it felt similar to selection sort and made me wonder what actually is the difference between them.</p><p>I would say that insertion sort is little bit intelligent than both of the above algorithms: selection sort and bubble sort. This is because when we feed an already sorted array or an <em>almost</em> sorted array to those algorithms, they don’t understand that it is an already/almost sorted array and run for O(n<sup>2</sup>) time, no matter what.</p><p>But in that case, insertion sort seem to run just for O(n) time. <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE" target="_blank" rel="noopener">This video</a> gave an example of where we might get an already/almost sorted database: think of a database where keys are already sorted.</p><h4 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h4><p>Given an array, consider the first element to be sorted already. Start from the next element and <em>insert</em> it at the right position in the sorted array. If the element is already in the right position of the sorted array, we just move to the next position.</p><p>(I recommend you to watch the video resources below to get more idea about this technique)</p><h4 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Worst and Average case: O(n<sup>2</sup>) because it would take (n(n+1))/2 swaps in these cases.</p><p>Best case: When the array is already sorted, insertion sort just takes O(n) times. If you compare this with selection sort and bubble sort, they both take O(n<sup>2</sup>). Hence insertion sort is a better choice.</p><h4 id="Space-complexity-1"><a href="#Space-complexity-1" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>Swaps are done in-place.</p><p>So <strong>O(n)</strong></p><h4 id="Step-by-step-code-2"><a href="#Step-by-step-code-2" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First we start with the second item in the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="comment">// take i-th element and insert it in the right position of the sorted sub-array</span></span><br><span class="line">    <span class="comment">// and index in sorted sub-array obeys 0 &lt;= idx &lt; i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we just insert the i-th element at the right place of the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">        nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-2"><a href="#Full-code-2" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i; (j &gt; <span class="number">0</span>) &amp;&amp; (nums[j] &lt; nums[j<span class="number">-1</span>]); j-- &#123;</span><br><span class="line">            nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-2"><a href="#Resources-2" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=O0VbBkUvriI" target="_blank" rel="noopener">CS50 Insertion sort</a></li><li>:star: <a href="https://www.youtube.com/watch?v=eTvQIbB-AuE" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Insertion Sort</a></li><li><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">Insertion Sort Wikipedia</a></li></ul><h3 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h3><p>Merge sort is a good example for divide and conquer algorithm. It is easy to solve this problem by thinking in recursion. To give a mental model of what a merge sort looks like, I am going to use a nice picture that I found in <a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">Wikipedia</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e6/Merge_sort_algorithm_diagram.svg" alt="mergesort"></p><p>Found this insight in <a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual book</a>,</p><blockquote><p>Mergesort is a great algorithm for sorting linked lists, because it does not rely on random access to elements as does heapsort or quicksort.</p></blockquote><h4 id="Intution"><a href="#Intution" class="headerlink" title="Intution"></a>Intution</h4><p>Split the array to be sorted into two, sort those individually, and merge them back together. Repeatedly apply this on the divided arrays. When the divided array has only one element, it is already sorted. (That’s the point where we stop splitting and merging back starts!)</p><h4 id="Time-complexity-1"><a href="#Time-complexity-1" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>Recommending the <a href="https://youtu.be/Kg4bqzAqRBM?t=1487" target="_blank" rel="noopener">MIT 6.006 Merge Sort video</a> to figure out how this is done.</p><p>At each level of splitted arrays, we access <code>n</code> items and we would have a total of <code>log n</code> levels. Hence, time complexity is <strong>O(n log n)</strong></p><h4 id="Space-complexity-2"><a href="#Space-complexity-2" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>I tried implementing merge sort with the help of “Top Down Split Merge” + “Two queues” like mentioned in <a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual book</a>. I think the space for this method is also <strong>O(n log n)</strong>.</p><p>But if we follow the algorithm where we use a temporary array instead of allocating two queues everytime , we can get an <strong>O(n)</strong> space complexity.</p><h4 id="Step-by-step-code-3"><a href="#Step-by-step-code-3" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We will try to code the temp array method here! Two queue method is relatively easy. You should try doing the two queue method first if you are not sure. (I have provided the two queue technique in the full code section below.</p><p>Prepare for a recursive ride! haha. Merge sort has two parts: Split and Merge (remember the diagram).</p><p>first, we make a temporary array (which we use to merge) and call merge sort procedure from index <code>0</code> to <code>n-1</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>ms</code> call does the split. then we call a merge function to perform the merge.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the merge part:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thing that I miss out is the last section of the merge where we copy the temp array to the source array.</p><h4 id="Full-code-3"><a href="#Full-code-3" class="headerlink" title="Full code"></a>Full code</h4><h5 id="Two-queues"><a href="#Two-queues" class="headerlink" title="Two queues"></a>Two queues</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ms(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, low, mid)</span><br><span class="line">        ms(nums, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue <span class="keyword">struct</span> &#123;</span><br><span class="line">    qList *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQueue</span><span class="params">()</span> *<span class="title">Queue</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Queue&#123;</span><br><span class="line">        qList: list.New(),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Enqueue</span><span class="params">(item <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    q.qList.PushBack(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Dequeue</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Remove(q.qList.Front()).(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Len() == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> q.qList.Front().Value.(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> q1 = NewQueue()</span><br><span class="line">    <span class="keyword">var</span> q2 = NewQueue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= mid; i++ &#123;</span><br><span class="line">        q1.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := mid+<span class="number">1</span>; i &lt;= high; i++ &#123;</span><br><span class="line">        q2.Enqueue(nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i := low</span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &amp;&amp; !q2.Empty() &#123;</span><br><span class="line">        <span class="keyword">if</span> q1.Top() &lt; q2.Top() &#123;</span><br><span class="line">            nums[i] = q1.Dequeue()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[i] = q2.Dequeue()</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> !q1.Empty() &#123;</span><br><span class="line">        nums[i] = q1.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> !q2.Empty() &#123;</span><br><span class="line">        nums[i] = q2.Dequeue()</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Temporary-array"><a href="#Temporary-array" class="headerlink" title="Temporary array"></a>Temporary array</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    ms(nums, temp, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ms</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        mid := (low + high) / <span class="number">2</span></span><br><span class="line">        ms(nums, temp, low, mid)</span><br><span class="line">        ms(nums, temp, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(nums, temp, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums, temp []<span class="keyword">int</span>, low, mid, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i1 := low</span><br><span class="line">    i2 := mid+<span class="number">1</span></span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i1 &lt;= mid) &amp;&amp; (i2 &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i1] &lt;= nums[i2] &#123;</span><br><span class="line">            temp[i] = nums[i1]</span><br><span class="line">            i1++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i] = nums[i2]</span><br><span class="line">            i2++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i1 &lt;= mid &#123;</span><br><span class="line">        temp[i] = nums[i1]</span><br><span class="line">        i++</span><br><span class="line">        i1++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i2 &lt;= high &#123;</span><br><span class="line">        temp[i] = nums[i2]</span><br><span class="line">        i++</span><br><span class="line">        i2++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := low; i &lt;= high; i++ &#123;</span><br><span class="line">        nums[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-3"><a href="#Resources-3" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">Merge Sort Wikipedia</a></li><li><a href="https://youtu.be/Kg4bqzAqRBM?t=1487" target="_blank" rel="noopener">MIT 6.006 Merge Sort</a></li><li><a href="http://www.algorist.com/" target="_blank" rel="noopener">The Algorithm Design Manual Book</a></li><li>:star: <a href="https://www.youtube.com/watch?v=jr10xrAFSEg" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Merge Sort</a> (Despite the black screen problem in the video, I still think the video did a good job of explaining the merge part)</li></ul><h3 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h3><p>Quicksort is one of the sorting algorithms that I have noticed in practice often. For example, I remember noticing <code>QSORT</code> while reading <a href="https://github.com/git/git/search?q=QSORT&amp;unscoped_q=QSORT" target="_blank" rel="noopener">git’s source code</a> on how git suggests commands when we make a mistake while typing a git command.</p><p>Also, I have read that quick sort seems to be a choice for standard library implementation of sorting in some programming languages. Example: <a href="https://golang.org/src/sort/sort.go?s=8174:8200#L183" target="_blank" rel="noopener">Go’s sort package</a></p><p>There are different flavors of qsort and one needs to consider the tradeoffs to choose the one that suits their needs. For example, <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Lomuto Partition Scheme</a> chooses the pivot point as the last element of the array and performs qsort, whereas </p><h4 id="Intuition-3"><a href="#Intuition-3" class="headerlink" title="Intuition"></a>Intuition</h4><p>Choose a pivot point (probably the last element of the array) and partition lesser and higher elements based on the pivot. Perform the pivot and partition logic recursively for the partitions.</p><h4 id="Time-complexity-2"><a href="#Time-complexity-2" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>If the pivot point we choose is approximately the middle of the sorted list, then the list is divided equally (like merge sort). So quick sort has a time complexity of <strong>O(n log n)</strong> for the best and average case.</p><p>For the worst case, (where we choose the pivot point as the first or last element of the sorted array as the first pivot), the algorithm performs O(n<sup>2</sup>).</p><h4 id="Space-complexity-3"><a href="#Space-complexity-3" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>For the best and average case, the space complexity would be <strong>(log n)</strong> (because of the call stack used for recursion). In the worst case, that would become <strong>O(n)</strong></p><h4 id="Step-by-step-code-4"><a href="#Step-by-step-code-4" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>First, we write the recursive logic of partition and qsort.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we implement the partitioning logic. I am using the <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Lomuto Partition Scheme</a> here.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-4"><a href="#Full-code-4" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    qsort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">qsort</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">        p := part(nums, low, high)</span><br><span class="line">        qsort(nums, low, p<span class="number">-1</span>)</span><br><span class="line">        qsort(nums, p+<span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">part</span><span class="params">(nums []<span class="keyword">int</span>, low, high <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    pivot := nums[high]</span><br><span class="line">    i := low</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j := low; j &lt;= high; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] &lt; pivot &#123;</span><br><span class="line">            nums[j], nums[i] = nums[i], nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nums[i], nums[high] = nums[high], nums[i]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-4"><a href="#Resources-4" class="headerlink" title="Resources"></a>Resources</h4><ul><li>:star: <a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme" target="_blank" rel="noopener">Quick sort Wikipedia</a></li><li><a href="https://www.youtube.com/watch?v=ZHVk2blR45Q" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quick sort</a></li><li><a href="https://www.youtube.com/watch?v=auclbmnm4iA" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quick sort worst case</a></li><li><a href="https://www.youtube.com/watch?v=4IE3wIXFVPc" target="_blank" rel="noopener">San Diego State University - Rob Edwards - Quicksort code</a></li></ul><h3 id="Heap-sort"><a href="#Heap-sort" class="headerlink" title="Heap sort"></a>Heap sort</h3><p>The most important idea behind heap sort is to first build a heap out of the given array. A heap is just a common way of implementing a priority queue. A priority queue is just a data-structure, where we could request for an element with either the largest or smallest priority at a given point of time.</p><p>With that Intuition, the implementation could be pretty simple. Consider a language with a priority queue implementation built into the standard library like C++. In this case, we could write something like,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="comment">// build a min-heap</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            q.push(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            result.push_back(q.top());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We just create a min-heap and extract the minimum element each time and append it to a list. While this approach involves allocating space, there is a way to achieve this in-memory if the input is an array.</p><h4 id="Intuition-4"><a href="#Intuition-4" class="headerlink" title="Intuition"></a>Intuition</h4><p>Construct a max-heap and pick the largest element using it, one at a time to fill it at the end of the sorted list.</p><h4 id="Time-complexity-3"><a href="#Time-complexity-3" class="headerlink" title="Time complexity"></a>Time complexity</h4><p>I recommend watching the <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a> lecture for deriving the time complexity. It seems like building a heap from scratch is O(n) and extracting a min/max element seems to be O(log n) since we extract the min/max n times, the time complexity would be <strong>O(n log n)</strong></p><h4 id="Space-complexity-4"><a href="#Space-complexity-4" class="headerlink" title="Space complexity"></a>Space complexity</h4><p>A naive implementation of constructing a priority queue from scratch (like with standard library code or any other library) might lead to O(n).</p><p>But we will be using a binary heap (just represented in-place in the given array), there is no extra space allocated. So the space complexity would be <strong>O(1)</strong>.</p><p>This might seem to be the best algorithm so far, but there should be something that we are losing, right? It is the stableness. Seems like heap sort is not stable.</p><h4 id="Step-by-step-code-5"><a href="#Step-by-step-code-5" class="headerlink" title="Step by step code"></a>Step by step code</h4><p>We need to learn and remember about a few array-tree math before trying to code it. First binary heaps are array representation of a binary tree.</p><p>[0 1 2 3 4]</p><p>Value at 0 is the root node. values at 1 and 2 are children of the root node (0). The children of 1 would be 3 and 4.</p><p>This leads to arriving at the following formulae.</p><p>the left child of a node at index i is given by <code>(2 * i) + 1</code> and right child of a node at index i is given by <code>(2 * i) + 2</code>.</p><p>If there are n nodes, <code>(n/2) - 1</code>th index will give the node whose children will all be leaf nodes. This is a very useful insight that I got from <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a>. This means that, since its children are leaf nodes, they already satisfy the heap property and it might be the right place to start recursion procedure for building up the heap from bottom up.</p><p>Ok, let’s start writing this! First, we call the <code>heapify</code> procedure from <code>(n/2)-1</code>th index to <code>0</code>th index</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this, the root node is guaranteed to have the largest element. So, we start filling up the array from back by extracting the max element. Every time we extract the max element, the heap becomes dirty. So we could just call heapify for only the unsorted sub-array at the beginning.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">    nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">    heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, now we start implementing the heapify function.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Full-code-5"><a href="#Full-code-5" class="headerlink" title="Full code"></a>Full code</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := (<span class="built_in">len</span>(nums)/<span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        heapify(nums, <span class="built_in">len</span>(nums), i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        heapify(nums, i, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(nums []<span class="keyword">int</span>, n, idx <span class="keyword">int</span>)</span></span> &#123;    </span><br><span class="line">    largest := idx</span><br><span class="line">    left := (<span class="number">2</span> * idx) + <span class="number">1</span></span><br><span class="line">    right := (<span class="number">2</span> * idx) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n &amp;&amp; nums[largest] &lt; nums[left] &#123;</span><br><span class="line">        largest = left</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n &amp;&amp; nums[largest] &lt; nums[right] &#123;</span><br><span class="line">        largest = right</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != idx &#123;</span><br><span class="line">        nums[idx], nums[largest] = nums[largest], nums[idx]</span><br><span class="line">        </span><br><span class="line">        heapify(nums, n, largest)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resources-5"><a href="#Resources-5" class="headerlink" title="Resources"></a>Resources</h4><ul><li><a href="https://www.youtube.com/watch?v=B7hVxCmfPtM" target="_blank" rel="noopener">MIT 6.006 Heaps and Heap sort</a></li><li><a href="https://www.geeksforgeeks.org/heap-sort/" target="_blank" rel="noopener">GeeksForGeeks solution</a> (this closely follows the ideas behind the MIT 6.006 lecture)</li></ul><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>Leaving the space for this blog post to get updated. Some interesting sorting algorithms to watch out for are</p><ul><li>BST sort</li><li>AVL sort</li><li>Shell sort</li><li>Counting sort</li><li>Radix sort</li></ul><p>( you <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">tell me</a> )</p>	5dc97c861a2b8a64738e662ad1ce73f868a0ec89	\N	f	2020-09-08 12:10:00	2020-09-10 03:10:01.562418	0			'+1':786,1166,1178,1437,1579,1584,1587,1624,1629,1632,1725,1730,1733,1769,1774,1777,1972,2532,2557,2668,2747,2826,2847,3215,3309 '-1':764,768,865,1419,2099,2105,2108,2133,2139,2142,2490,2644,2799,3211,3283,3305,3900,3975,4072 '-1.12345':2473 '-2':770,1421,1572,1617,1682,1691,1717,1761 '/2':787,1438,1973,3909,4058 '/wiki/sorting_algorithm#comparison_of_algorithmsi':595 '/wiki/sorting_algorithm#stabilitycomparison':578 '0':301,916,918,1037,1077,1226,1501,1568,1606,1613,1706,1713,1750,1757,2065,2094,2128,2470,2487,2641,2711,2796,3280,3750,3757,3773,3912,3977,3982,3984,3990,4061,4074,4079,4081,4087 '0th':3904 '1':417,418,422,771,884,921,1063,1219,1242,1277,1280,1285,1422,1485,1503,2034,2085,2119,3688,3751,3764,3777,3803,3910,4010,4059,4102 '11':667,672,673,679,685,691,697 '12':669,675,678,680,686,692,698 '12345678910111213141516171819202122232425262728293031func':2544 '12345678910111213141516171819202122func':1070 '12345678910111213141516171819class':3471 '12345678910111213func':909 '1234567func':349 '1i':302,1241,1256,1271 '1th':1352,1371,3824 '2':357,416,1218,1240,1255,1257,1262,1265,1269,1284,1523,1745,2522,2660,2816,3752,3766,3801,3816,4008,4012,4014,4100,4104,4106 '2.if':3818 '22':670,676,682,684,687,693,699 '25':668,674,681,688,690,694,700 '2now':790,1441 '2th':1383,1398 '3':1272,3753,3780 '4':1216,1232,1235,3754 '4.this':3782 '40':493,497,519,523,544,548 '5':415,1215,1230,1234,1238,1245,1249,1253,1268,1283 '50':489,527,552 '6':419,1217,1239,1247,1250,1254,1260,1264,1270,1275,1279,1291 '6.006':2290,2903,3584,3848,4141,4155 '64':671,677,683,689,695,696,701 '6that':1286 '80':501,531,556 'a':77,120,137,198,201,208,259,277,404,466,632,644,650,813,831,858,1023,1060,1477,1600,1890,2011,2164,2185,2190,2200,2218,2314,2374,2437,2455,2502,2933,2976,2980,2992,3050,3107,3392,3399,3403,3408,3411,3416,3435,3449,3452,3485,3515,3530,3540,3554,3567,3599,3608,3639,3663,3729,3747,3793,3808,3839 'able':183 'about':12,94,107,296,309,1956,3728 'above':504,1816 'access':2232,2307 'achieve':3543 'actually':1797 'again':1423 'algorithm':41,139,177,2171,2212,2220,2348,2370,2906,3145,3696 'algorithms':31,109,213,233,251,293,592,1128,1817,1840,2948,4170 'algorithms.pasting':276 'algorithms.sorting':620 'algorithmsselection':621 'all':1316,1564,3833 'allocate':825 'allocated':3680 'allocating':1466,2379,3536 'allocations':847 'almost':1835 'already':347,1670,1701,1830,1895,1906,1927,1983,2272,3863 'already/almost':1849,1885 'also':2360 'am':16,116,128,2196,3224 'an':471,535,572,1129,1221,1829,1834,1848,1877,1884,1897,2386,3425,3552 'and':47,82,134,147,154,162,223,290,294,315,391,579,646,716,794,834,1021,1064,1134,1164,1168,1202,1231,1246,1261,1276,1333,1404,1445,1792,1820,1852,1912,1961,1999,2044,2057,2169,2250,2282,2310,2447,2463,3014,3045,3060,3063,3073,3118,3153,3191,3519,3526,3558,3586,3606,3726,3765,3781,3804,3850,3868,4143 'animations':74 'answer.the':745 'any':1467,3650 'anyway':382 'append':835,3527 'apply':2256 'approach':3534 'approximately':3087 'are':206,1139,1342,1464,1474,1894,2015,2420,3009,3706,3743,3767,3820,3859 'arebst':4175 'array':472,505,966,1497,1832,1837,1851,1898,1922,1935,1981,2056,2063,2241,2265,2376,2400,2457,2628,3044,3059,3139,3398,3674,3732,3744,3937,3968 'array-tree':3731 'array.12345for':2083 'array.12345func':1515 'array.1234for':2032 'array.full':2632 'array.intuitionconstruct':3553 'array12345678910111213141516171819202122232425262728293031323334353637383940414243444546func':2783 'arrays':2261,2305 'arrive':798,1449 'arriving':3785 'as':195,234,616,2235,3038,3130,3140 'ascending':906,1222 'assume':901 'at':105,221,261,318,643,799,1196,1208,1298,1358,1367,1385,1394,1450,1915,2077,3434,3566,3572,3756,3763,3786,3795,3810,3969 'attempts':104 'average':1962,3119,3154 'avoid':1664,1697 'away':400 'back':946,971,1512,2253,2284,3507,3939 'backwards.time':1340 'based':43,481,3066 'basic':312,322 'be':328,462,479,508,734,750,1206,1904,2243,2991,3160,3445,3613,3628,3661,3686,3693,3702,3779,3834,3871 'because':21,344,1462,1825,1966,2225,3163 'become':3177 'becomes':56,3954 'before':3735 'beginning.1234for':3971 'behind':3385,4152 'being':962 'below':1951 'below.prepare':2435 'best':3117,3152,3695 'better':2012 'between':1801 'binary':3664,3741,3748 'bit':1810 'black':2921 'blog':67,215,4162 'blogs':143 'boils':774,1425 'book':2215,2351,2909 'bool':2708 'both':1813,2003 'bottom':3885 'bubble':1145,1157,1533,1544,1562,1596,1657,1821,2000 'bubbled':1140,1296,1365,1392,1671,1702 'bubbling':1153,1194,1315 'build':1334,3391,3484 'building':979,3598,3880 'built':3456 'bunch':78,1478 'but':32,124,381,609,851,2365,3658,3699 'by':111,141,753,886,1152,1416,1487,2021,2179,2391,3181,3720,3800,3815,3940 'c':3462 'call':1015,2464,2495,2501,3166,3894,3960 'called':631 'can':50,1648,1663,2384 'case':204,323,533,1495,1506,1863,1963,1978,3123,3155,3174,3465 'case.for':3120 'cases':174,313 'cases.best':1977 'casesan':3373 'categorization':589 'child':3791,3806 'children':3768,3775,3831,3858 'choice':2993 'choice.space':2013 'choose':3022,3085,3126 'chooses':3034 'clarify':245 'clearsorted':660 'closely':4148 'code':83,161,856,1535,1541,1598,2397,2433,2967,3648,3738 'code1234567891011121314151617181920212223242526272829303132func':4049 'code12345678910111213141516171819202122232425262728func':3273 'code123456789101112131415func':1737 'code12345678func':2112 'codefirst':888,1489,2023,3183 'codeheap':3380 'codenow':1057 'codetwo':2633 'codewe':2393,3722 'collect':241 'collection':405 'come':149 'command.also':2982 'commands':2972 'common':219,3404 'compare':289,1162,1229,1244,1259,1274,1994 'comparison':263,582,607 'complexity':156,818,2322,3109,3158,3594,3626,3684 'complexity.o':802,1453 'complexity.step':2390 'complexitya':3634 'complexityfinding':722 'complexityfor':3150 'complexityi':2329,3579 'complexityif':3080 'complexityrecommending':2287 'complexityswaps':2014 'complexitythis':1456 'complexitywe':805,1341 'complexityworst':1960 'concentrate':185 'conquer':2170 'consider':470,1899,3018,3448 'constants':793,1444 'construct':1027 'constructing':3638 'contain':71 'contains':216 'contrast':291 'cool':1590 'copy':2625 'core':378 'could':284,3422,3444,3467,3958 'create':830,3514 'curious':1136 'data':3418 'data-structure':3417 'database':1887,1891 'decreases':752 'degree':796,1447 'depends':820 'dequeue':2698 'deriving':3591 'design':2213,2349,2907 'despite':2919 'details':246 'diagram':2451 'did':2932 'diego':2152,2912,3358,3365,3374 'difference':1800 'different':211,272,292,3010 'dirty':3955 'discover':197 'discovered':585 'disrupted':570 'divide':2168 'divided':2260,2264,3098 'do':119,131,905,1022,1183,1651 'does':2227,2236,2496 'doesn':69 'doing':877,1476,2412 'don':1842 'done':735,1536,2016 'done.at':2300 'down':893,1415,2339 'during':1470 'each':39,158,176,755,810,838,1406,2301,3524 'earliest':103 'easy':57,1458,2174,2408 'edwards':2156,2916,3362,3369,3378 'effort':122 'either':3428 'element':642,663,726,809,872,1173,1180,1547,1661,1902,1911,1925,2043,2076,2269,3041,3056,3135,3426,3523,3562,3610,3930,3944,3951 'elements':335,364,456,1167,1191,2234,3065 'elements.12345for':1566 'else':2575,2765,2865 'embed':373 'empty':2707 'en.wikipedia.org':577,594 'en.wikipedia.org/wiki/sorting_algorithm#comparison_of_algorithmsi':593 'en.wikipedia.org/wiki/sorting_algorithm#stabilitycomparison':576 'end':843,875,1198,1300,1313,3574 'end.consider':1210 'enough':88 'enqueue':2690 'equal':455 'equally':3099 'etc':75 'every':3945 'everything':878 'everytime':1025,2382 'example':469,655,1212,1878,2166,2957,3004,3030 'execute':939 'exist':414 'explaining':2937 'explore':613,618 'extra':3678 'extract':3520,3619,3948 'extracting':3607,3941 'fair':64 'fair-warning':63 'far':3698 'feed':1828 'feel':98 'felt':1787 'few':3730 'figure':1460,2295 'fill':3570 'filling':3934 'final':744 'find':171 'finding':897 'findsmallest':910,983,1017,1043,1083,1097 'first':222,314,319,757,780,1227,1356,1431,1785,1901,2417,2452,3132,3142,3390,3740,3892 'flavors':3011 'focus':605 'follow':2368 'following':3788 'follows':4149 'for':18,89,157,175,247,362,571,597,868,896,919,994,1035,1075,1108,1132,1186,1405,1493,1558,1611,1711,1748,1755,1854,1870,2090,2117,2124,2167,2221,2356,2436,2560,2582,2591,2600,2735,2744,2756,2770,2776,2850,2872,2881,2890,2956,2994,3029,3077,3115,3169,3243,3324,3424,3498,3590,3879,3962,4054,4068,4160,4174 'formulae.the':3789 'found':2205 'from':396,656,712,1339,1908,2468,3601,3642,3846,3884,3898,3938 'full':1056,1736,2111,2432,3272,4048 'func':1096,2474,2647,2680,2687,2695,2704,2712,2721,2802,2834,3286,3311,4090 'function':2504 'function.12345678910111213141516171819func':3998 'gave':1876 'get':92,227,742,945,970,1531,1883,1953,2385,4165 'get123456':515,540 'git':2964,2970,2981 'give':2184,3827 'given':3397,3436,3673,3799,3814 'go':3005 'goes':1414 'going':117,2197 'good':306,2165,2934 'got':1295,3845 'great':2219 'greater':1175,1190,3495 'grokking':1127 'guaranteed':3925 'guide':1131 'haha':2440 'handle':316,1492 'happens':1401 'has':330,2266,2443,3106 'have':36,338,1059,1550,1641,2313,2424,2951,2984,3927 'heap':3386,3393,3400,3488,3518,3557,3587,3600,3665,3715,3851,3866,3883,3953,4144 'heapify':3896,3914,3961,3987,3997,3999,4044,4063,4084,4091,4136 'heaps':3585,3742,3849,4142 'heapsort':2237 'heavily':256 'help':2336 'hence':2007,2320 'here':123,282,365,602,705,952,1069,1654,2402 'here.1234567891011121314func':3230 'high':2514,2518,2521,2533,2539,2551,2564,2593,2604,2652,2656,2659,2669,2674,2727,2749,2808,2812,2815,2827,2833,2841,2854,2883,2894,3197,3201,3206,3216,3235,3240,3247,3265,3267,3291,3295,3300,3310,3316,3321,3328,3346,3348 'higher':3064 'highest':1293,1319,1328,1362,1389,1546,1660 'how':60,136,421,558,1290,2297,2969 'i':4,15,35,97,127,190,196,235,366,383,920,922,925,928,932,934,995,997,1000,1003,1007,1009,1036,1038,1041,1045,1047,1053,1076,1078,1081,1085,1087,1093,1109,1111,1114,1117,1121,1123,1163,1165,1177,1225,1567,1569,1573,1576,1578,1581,1583,1586,1589,1612,1614,1618,1621,1623,1626,1628,1631,1634,1712,1714,1719,1722,1724,1727,1729,1732,1735,1756,1758,1763,1766,1768,1771,1773,1776,1779,1943,2033,2035,2038,2041,2067,2074,2084,2086,2089,2092,2118,2120,2123,2126,2195,2204,2352,2423,2558,2571,2577,2581,2586,2589,2595,2598,2601,2603,2605,2607,2609,2613,2736,2738,2740,2743,2745,2748,2750,2753,2754,2763,2767,2769,2773,2775,2779,2781,2848,2861,2867,2871,2876,2879,2885,2888,2891,2893,2895,2897,2899,2927,2950,2958,2983,3223,3241,3256,3258,3261,3263,3269,3271,3322,3337,3339,3342,3344,3350,3352,3797,3802,3812,3817,3844,3906,3911,3913,3918,3972,3976,3978,3980,3986,3989,4055,4060,4062,4067,4069,4073,4075,4077,4083,4086 'i-th':2040,2073 'i1':2553,2561,2567,2573,2574,2583,2588,2590,2843,2851,2857,2863,2864,2873,2878,2880 'i2':2555,2563,2569,2579,2580,2592,2597,2599,2845,2853,2859,2869,2870,2882,2887,2889 'idea':951,1955,3384 'ideas':93,4151 'idx':2066,4003,4006,4009,4013,4035,4037,4043,4095,4098,4101,4105,4127,4129,4135 'if':48,354,407,446,502,852,926,937,1001,1115,1171,1181,1520,1574,1619,1720,1742,1764,1923,1992,2366,2418,2516,2565,2654,2759,2810,2855,3199,3249,3293,3330,3548,4015,4024,4033,4107,4116,4125 'illustrated':1130 'images':73 'implement':360,854,3219 'implementation':165,449,1068,2997,3443,3455,3636 'implementations':370 'implementing':2331,3407,3995 'important':3383 'in':178,200,252,376,532,649,664,739,857,880,1323,1345,1354,1481,1504,1645,1861,1919,1928,1975,2030,2047,2059,2181,2206,2210,2346,2430,2924,2953,3000,3171,3463,3546,3669,3671 'in-memory':1344,1480,1644,3545 'in-order':738 'in-place':879,3668 'in-place.so':2017 'index':867,949,973,1353,1384,1683,1693,1699,2058,2469,3796,3811,3825,3902 'index.in':1372 'index.this':1399 'index123for':3905 'individually':2249 'information':242 'input':3550 'insert':1913,2045,2071 'insertion':1806,1864,1985,2008,2148,2157 'insight':2209,3842 'instead':1675,2377 'int':352,353,912,913,985,987,988,1033,1034,1073,1074,1099,1101,1102,1518,1519,1740,1741,2115,2116,2477,2478,2481,2512,2515,2548,2552,2637,2638,2650,2653,2692,2699,2703,2716,2720,2724,2728,2786,2787,2790,2806,2809,2838,2842,3195,3198,3233,3236,3237,3276,3277,3289,3292,3314,3317,3318,3475,3478,3482,3491,3493,3496,3499,4001,4004,4052,4053,4093,4096 'intelligent':1811 'interesting':4168 'interviews':19 'into':964,1220,2245,3457 'intuition':46,704,3441 'intuitionchoose':3049 'intuitions':53 'intuitionso':702 'involves':3535 'is':42,110,224,305,346,423,442,459,465,506,569,630,635,706,953,1160,1174,1364,1391,1457,1498,1798,1808,1824,1847,1926,1982,2010,2163,2173,2217,2271,2299,2323,2359,2406,2616,2943,3086,3097,3388,3401,3414,3539,3551,3603,3676,3710,3717,3758,3798,3813,3838,3924 'iswhen':324 'it':55,304,345,441,458,629,648,659,718,773,1288,1424,1637,1786,1846,1914,1967,2046,2172,2226,2270,3528,3564,3571,3595,3709,3739,3869 'item':977,2029,2691,2694 'items':409,748,761,765,2309 'iterate':1686 'iterating':1677 'iteration':1357,1375,1400,1407 'ith':1172 'its':3857 'itself':343,380 'j':2091,2093,2096,2098,2100,2102,2104,2107,2110,2125,2127,2130,2132,2134,2136,2138,2141,2144,3244,3246,3248,3251,3254,3260,3325,3327,3329,3332,3335,3341 'job':2935 'json':474 'just':76,87,207,337,385,584,861,1014,1475,1508,1543,1554,1869,1937,1987,2070,3402,3415,3513,3666,3959 'keys':1893 'kind':5 'kinds':273 'language':3450 'languages':3003 'largest':3430,3561,3929,4005,4019,4022,4028,4031,4034,4039,4041,4047,4097,4111,4114,4120,4123,4126,4131,4133,4139 'last':1332,2618,3040,3055,3134 'lead':3654 'leads':3783 'leaf':3835,3860 'learn':11,3725 'learn/discover':236 'learning':1,106 'leave':429 'lecture':3589,4156 'lectures':148 'leetcode':168 'left':3790,4007,4016,4021,4023,4099,4108,4113,4115 'len':355,923,998,1039,1079,1112,1521,1570,1608,1615,1680,1689,1708,1715,1743,1752,1759,2036,2087,2121,2482,2488,2642,2791,2797,3281,3907,3916,3973,4056,4065,4070 'length':957,1409 'lesser':3062 'let':3887 'lets':1147 'level':2302 'levels':2319 'library':2996,3460,3647,3652 'like':99,386,611,2194,2344,3100,3461,3470,3597,3644,3714 'linked':2223 'list':326,342,666,833,1201,1204,1224,1338,1413,3093,3096,3531 'list.if':1303 'list.list':2679 'list.new':2686 'list.time':3578 'lists':2224 'little':1809 'log':2317,2326,2363,3113,3161,3615,3631 'logic':375,379,895,1552,1557,1668,3075,3188,3222 'lomuto':3031,3227 'look':260 'looks':2193 'loop':1601 'losing':3707 'lot':209 'low':2513,2517,2520,2526,2537,2549,2554,2559,2602,2651,2655,2658,2663,2672,2725,2737,2755,2807,2811,2814,2820,2831,2839,2844,2849,2892,3196,3200,3205,3209,3234,3242,3245,3290,3294,3299,3303,3315,3323,3326 'lower':795,1446 'lowest':899,976 'lowest/highest':641,710,725,808,837,871 'machinepack':114 'machinepack-sorti':113 'made':1793 'mainly':20 'maintains':450 'make':388,2454,2480,2789,2975 'makes':658 'manner.i':652 'manual':2214,2350,2908 'many':72 'mark':488,492,496,500,518,522,526,530,543,547,551,555,568 'marks':483 'math':81,777,1428,3734 'matter':1859 'max':3556,3943,3950 'max-heap':3555 'maybe':189 'me':90,1794,4183 'mean':1151 'means':3854 'memorize':25 'memory':1346,1482,1646,3547 'mental':2186 'mentioned':2345 'merge':2191,2251,2291,2332,2341,2441,2448,2462,2465,2503,2534,2542,2545,2622,2670,2722,2828,2835,2904,2917,2939,3101 'merge.12345678func':2508 'mergesort':2216 'merging':2283 'method':2358,2401,2405,2416 'mid':2519,2527,2531,2538,2550,2556,2562,2584,2657,2664,2667,2673,2726,2739,2746,2813,2821,2825,2832,2840,2846,2852,2874 'middle':3089 'might':244,539,1882,3653,3690,3870 'min':3487,3517 'min-heap':3486,3516 'min/max':3609,3621 'minimum':85,3522 'miss':2614 'mistake':2977 'mit':2289,3583,3847,4154 'model':2187 'more':231,467,1954 'moreleaving':4157 'most':218,598,3382 'move':717,806,1938 'ms':2484,2494,2509,2523,2528,2639,2648,2661,2665,2793,2803,2817,2822 'much':188 'my':102 'n':363,729,736,760,763,766,767,769,781,784,785,789,846,850,864,941,1019,1187,1309,1318,1351,1370,1382,1397,1402,1418,1420,1432,1435,1436,1440,1559,1603,1605,1607,1610,1692,1705,1707,1710,1718,1749,1751,1754,1762,1872,1970,1971,1990,2019,2308,2318,2325,2327,2362,2364,2388,2472,3112,3114,3162,3179,3500,3503,3605,3616,3622,3630,3632,3657,3821,4002,4017,4026,4046,4094,4109,4118,4138 'n-1th':1350,1369 'n-2th':1381,1396 'n/2':3823,3899 'n2':788,803,1067,1439,1454,1856,1965,2006,3148 'naive':3635 'name':486,490,494,498,516,520,524,528,541,545,549,553 'natural':782,1433 'need':23,477,903,1509,3723 'needs':732,3016,3028 'new':832,1468 'newqueue':2681,2731,2734 'next':1910,1941,3217 'nice':2201 'no':1251,1858,3677 'node':3761,3772,3794,3809,3829,3923 'nodes':3822,3836,3861 'non':581 'non-comparison':580 'not':1465,2228,2421,3718 'notice':420,557,1289 'noticed':2952 'noticing':2960 'now':772,1012,1526,1640,2068,2540,3992 'nth':870,975 'number':711,746,900,1294,1329,1363,1390 'numbers':783,1320,1434 'nums':351,356,359,911,915,924,927,931,984,990,999,1002,1006,1032,1040,1044,1046,1048,1050,1052,1055,1072,1080,1084,1086,1088,1090,1092,1095,1098,1104,1113,1116,1120,1517,1522,1525,1571,1575,1577,1580,1582,1585,1588,1609,1616,1620,1622,1625,1627,1630,1633,1642,1681,1690,1709,1716,1721,1723,1726,1728,1731,1734,1739,1744,1747,1753,1760,1765,1767,1770,1772,1775,1778,1781,2037,2088,2095,2097,2101,2103,2106,2109,2114,2122,2129,2131,2135,2137,2140,2143,2146,2476,2483,2485,2489,2492,2510,2524,2529,2535,2546,2566,2568,2572,2578,2587,2596,2606,2636,2640,2643,2646,2649,2662,2666,2671,2723,2742,2752,2762,2766,2772,2778,2785,2792,2794,2798,2801,2804,2818,2823,2829,2836,2856,2858,2862,2868,2877,2886,2896,3194,3204,3208,3213,3232,3239,3250,3253,3255,3257,3259,3262,3264,3266,3268,3275,3279,3282,3285,3288,3298,3302,3307,3313,3320,3331,3334,3336,3338,3340,3343,3345,3347,3349,3479,3501,3908,3915,3917,3974,3979,3981,3983,3985,3988,4000,4018,4020,4027,4029,4036,4038,4040,4042,4045,4051,4057,4064,4066,4071,4076,4078,4080,4082,4085,4089,4092,4110,4112,4119,4121,4128,4130,4132,4134,4137 'o':728,849,883,1062,1066,1484,1855,1871,1964,1989,2005,2018,2324,2361,2387,3111,3147,3178,3604,3614,3629,3656,3687 'obeys':2064 'objects':475 'of':6,28,79,101,159,210,271,274,279,454,473,484,534,562,588,590,599,747,779,958,974,1199,1213,1301,1410,1430,1479,1499,1539,1676,1700,1814,1879,1889,1932,2051,2081,2188,2303,2316,2337,2378,2620,2936,2945,2998,3012,3042,3057,3090,3110,3136,3164,3189,3395,3406,3438,3575,3637,3746,3769,3776,3792,3807 'off':395 'offi':255 'offs':270 'often':2955 'ok':3991 'omitting':791,1442 'on':44,186,482,606,821,981,1669,2230,2258,2968,3067 'once':1548 'one':100,283,298,332,393,754,1652,2268,2944,3015,3024,3565 'one.n':1417 'ones':220 'only':331,2267,3963 'open':225 'optimisation':1653 'or':333,435,1502,1833,2238,3133,3431,3649 'order':432,453,561,740,907,1223 'order.intuitionbubble':1325 'other':1135,3651 'our':397,855,950 'out':1461,2296,2615,3394,4173 'over':8,33 'p':3202,3210,3214,3296,3304,3308 'packagethere':3008 'part':1538,2543,2940,3203,3231,3297,3312 'partition':3032,3061,3074,3190,3228 'partitioning':3221 'partitions.time':3079 'parts':2445 'passed':963 'peoplebubble':1137 'perform':1305,1377,1555,2506,3070 'performing':1343 'performs':3046,3146 'persona':487,525,550 'personb':491,517,546 'personc':495,521,542 'persond':499,529,554 'persons':564 'pick':3559 'picture':2202 'pivot':3036,3051,3069,3072,3082,3128,3143,3238,3252,3319,3333 'place':647,881,2080,3670,3874 'planning':129 'point':1360,1387,2277,3037,3052,3083,3129,3437 'position':1918,1931,1942,2050 'post':68,194,601,4163 'practical':172,202,468 'practice':2954 'preparing':17 'pretty':3446 'priority':3409,3412,3433,3453,3489,3640 'probably':3053 'problem':2178,2923 'procedure':1018,1308,2467,3878,3897 'process':1472 'procrastinate':7 'programmers':1133 'programming':3002 'property':3867 'provided':2425 'public':3473 'puzzletry':169 'q':2688,2696,2705,2713,3497 'q.empty':3505 'q.pop':3509 'q.push':3502 'q.qlist.front':2702,2718 'q.qlist.len':2710 'q.qlist.pushback':2693 'q.qlist.remove':2701 'q.top':3508 'q1':2730 'q1.dequeue':2764,2774 'q1.empty':2757,2771 'q1.enqueue':2741 'q1.top':2760 'q2':2733 'q2.dequeue':2768,2780 'q2.empty':2758,2777 'q2.enqueue':2751 'q2.top':2761 'qlist':2678,2685 'qsort':2961,3013,3047,3193,3207,3212,3278,3287,3301,3306 'qsort.1234567func':3192 'queue':2404,2415,2428,2676,2682,2684,2689,2697,2706,2714,3410,3413,3454,3490,3641 'queues':2343,2381 'queues12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970func':2634 'quick':2941,2987,3104,3355,3363,3370 'quicksort':3379 'quicksort.intutionsplit':2239 'random':2231 'read':2985 'reading':142,575,2963 'realized':37 'really':819 'reason':295,628 'recommend':257,1944,3580 'recursion':2182,3170,3877 'recursive':2438,3187 'recursively':3076 'reduce':955 'relative':431,452,560 'relatively':2407 'rely':2229 'remember':59,2449,2959,3727 'repeated':424 'repeatedly':1185,2255 'representation':3745 'represented':3667 'request':3423 'resources':1950,3353 'resourcescs50':2147 'resourceshackerrank':1782 'resourcesmerge':2900 'resourcesmit':4140 'resourceswikipediabook':1126 'result':3483,3511 'result.push':3506 'resulting':1322 'retrospect':180 'return':340,358,935,1010,1054,1094,1124,1511,1524,1746,1780,2145,2491,2645,2683,2700,2709,2717,2800,3270,3284,3351,3510,4088 'ride':2439 'right':399,1917,1930,2049,2079,3708,3805,3873,4011,4025,4030,4032,4103,4117,4122,4124 'rob':2155,2915,3361,3368,3377 'root':3760,3771,3922 'run':1853,1868 'running':1602 's':1287,1636,2275,2965,3006,3888 'said':460 'same':412,434,567,948,1307,1514 'san':2151,2911 'satisfy':3864 'say':1804 'scheme':3033,3229 'scratch':3602,3643 'screen':2922 'screenshot':278 'search':731,759 'searched':751 'second':1374,2028 'section':2434,2619 'section.trade':254 'see':1148 'seeing':144 'seem':1866,3691 'seems':2989,3596,3611,3713 'select':639,708 'selection':633,1790,1818,1997 'shift':438 'should':427,436,1639,2410,3701 'similar':121,1788 'simple':390,624,776,1427,3447 'since':1233,1248,1263,1278,1655,3617,3856 'size':1500 'smallest':914,929,930,989,1004,1005,1103,1118,1119,3432 'smallestidx':917,933,936,992,1008,1011,1042,1049,1051,1082,1089,1091,1106,1122,1125 'so':848,882,967,978,1674,1694,3103,3681,3697,3931,3956 'solution':3472,4146 'solve':2176 'some':45,230,369,3001,4167 'something':3469,3703 'sort':3,537,634,908,1146,1158,1791,1807,1819,1822,1865,1986,1998,2001,2009,2149,2159,2162,2192,2247,2292,2333,2442,2466,2901,2918,2988,3007,3102,3105,3356,3371,3387,3588,3716,3852,4180 'sort.further':574 'sorta':622 'sortarray':350,1031,1071,1516,1738,2113,2475,2635,2784,3274,3476,4050 'sortat':1784 'sortavl':4176 'sortcounting':4178 'sorted':329,348,480,509,651,720,814,827,1029,1207,1324,1337,1643,1831,1836,1850,1886,1905,1921,1934,1984,2053,2060,2244,2273,3092,3138,3577 'sorted.intuitiongiven':1896 'sortgeeksforgeeks':4145 'sorti':115 'sorting':13,30,40,95,108,138,212,232,250,275,361,403,426,448,512,591,625,1143,1214,2222,2947,2999,4169 'sorting.here':464 'sortingwhen':402 'sortinsertion':2158 'sortmerge':2161 'sortquicksort':2942 'sortradix':4179 'sorts':608 'sortsan':3364 'sortshell':4177 'sortswoah':583 'sortthe':2905,3381 'sortvalues':1138 'source':2631,2966 'space':155,804,817,1061,1455,2328,2355,2389,3149,3157,3537,3633,3679,3683,4159 'split':2340,2446,2498 'splitted':2304 'splitting':2281 'stable':401,463,511 'stable.step':3719 'stableness':3712 'stack':3167 'standard':2995,3459,3646 'star':2150,2910,3354 'start':986,991,993,996,1100,1105,1107,1110,1193,1907,2025,3876,3889,3933,3994 'starting':9 'starts':2285 'state':2153,2913,3359,3366,3375 'std':3480,3494 'step':885,887,1486,1488,2020,2022,2392,3180,3182,3721 'steps.understand':133 'still':2928 'stop':2280 'struct':2677 'structure':3419 'structures':1469 'students.123456':485 'sub':2055,2062,3967 'sub-array':2054,2061,3966 'sublist':715,815,961 'sublist.12345678func':1030 'sublist.if':828 'sublist.time':721 'sublistleast':662 'sublistunsorted':661 'suggests':2971 'suits':3026 'sum':778,1429 'sure':2422 'swap':862,1024,1169 'swap.4':1237,1252,1267,1282 'swapping':1378,1667 'swaps':1347,1974 'swaps.so':1483 't':70,182,1843 'table':264,281,287,398 'take':392,1969,2004,2039 'takes':727,1988 'taking':258 'technique':626,1958,2429 'tell':4182 'temp':2399,2479,2486,2511,2525,2530,2536,2547,2570,2576,2585,2594,2608,2627,2788,2795,2805,2819,2824,2830,2837,2860,2866,2875,2884,2898 'temporary':2375,2456,2782 'test':163 'text':80 'th':866,1179,2042,2075,3901 'than':1176,1812 'that':38,243,368,476,636,968,1505,1635,1695,1805,1845,1862,2203,2274,2612,2949,2986,3025,3175,3440,3704,3843,3855 'that.12345678910111213func':982 'the':26,84,152,164,179,217,249,267,280,310,320,325,341,377,411,433,451,503,559,566,600,627,640,703,709,713,723,724,743,792,800,807,816,822,836,863,869,894,898,947,956,959,965,972,1016,1028,1155,1189,1197,1200,1203,1209,1211,1292,1299,1302,1306,1317,1327,1331,1336,1349,1355,1361,1368,1373,1380,1388,1395,1408,1411,1443,1451,1471,1494,1513,1532,1540,1545,1556,1565,1595,1659,1666,1698,1799,1815,1900,1909,1916,1920,1924,1929,1933,1940,1948,1980,2027,2031,2048,2052,2072,2078,2082,2211,2240,2259,2263,2276,2288,2335,2347,2354,2369,2398,2413,2426,2431,2450,2493,2497,2507,2541,2610,2617,2621,2626,2630,2920,2925,2930,2938,2946,3019,3023,3035,3039,3043,3054,3058,3068,3071,3078,3081,3088,3091,3095,3116,3121,3127,3131,3137,3141,3144,3151,3156,3165,3172,3186,3220,3226,3396,3429,3442,3458,3521,3549,3560,3573,3576,3582,3592,3620,3624,3672,3682,3694,3711,3759,3770,3774,3787,3828,3865,3872,3882,3895,3921,3928,3936,3942,3949,3952,3964,3970,3996,4150,4153,4158 'their':430,3027 'them':317,439,1170,2252 'them.i':1802 'them.prefacei':237 'them.write':160 'then':54,457,762,840,2499,3094 'there':205,3538,3675,3700,3819 'these':132,1976 'they':61,1841,2002,3862 'thing':394,2611 'things':86,389 'think':303,308,367,596,653,1888,2353,2929 'thinking':2180 'this':66,125,167,187,193,214,253,262,286,374,586,614,654,730,826,940,1184,1359,1386,1537,1551,1823,1874,1957,1995,2177,2208,2257,2298,2357,3464,3533,3544,3689,3837,3853,3891,3920,4147,4161 'those':52,1839,2248 'thus':1321 'time':34,126,153,645,756,801,811,839,1065,1452,1857,1873,1959,2286,2321,3108,3525,3568,3593,3625,3946 'time.with':3439 'times':737,942,1020,1188,1310,1403,1560,1991,3623 'times.1234567for':1604 'to':2,10,24,58,91,118,130,170,184,226,240,265,288,299,307,327,339,372,387,444,461,478,507,612,707,719,733,741,749,775,812,860,891,904,954,1026,1330,1426,1459,1510,1530,1561,1650,1679,1688,1789,1838,1867,1903,1939,1946,1952,2175,2183,2198,2233,2242,2294,2396,2461,2471,2505,2629,2990,3017,3021,3389,3529,3542,3569,3612,3655,3692,3724,3737,3784,3875,3903,3926,4164,4171 'together':2254 'top':2338,2715 'topic':615 'total':2315 'trade':269 'trade-offs':268 'tradeoffs':3020 'tree':3733,3749 'tried':2330 'try':239,371,890,1529,1649,2395,2411 'trying':1665,3736 'tutorials':146 'two':408,563,2246,2342,2380,2403,2414,2427,2444 'type':587,2675 'typing':2979 'understand':51,266,1844 'understanding':248 'university':2154,2914,3360,3367,3376 'unsorted':665,714,960,1412,3965 'unstable':536,573 'up':150,443,844,876,980,1141,1154,1195,1297,1314,1326,1335,1366,1393,1534,1563,1594,1597,1658,1672,1678,1687,1703,3881,3935 'up.ok':3886 'update':192 'updated':228,4166 'upto':1348,1379 'usage':199 'use':173,203,285,300,2199,2373,2460 'used':3168 'useful':3841 'using':166,510,1144,3225,3563,3662 'value':413,2719,3755 'values':1673,3762 'values.1234567for':1704 'var':2729,2732 'various':29,619 'vector':3474,3477,3481,3492 'very':311,321,623,3840 'video':145,1875,1949,2293,2926,2931 'visualize':135 'warning':65 'wasn':181 'watch':1947,4172 'watching':3581 'way':823,859,1156,3405,3541 'we':22,49,336,428,437,513,538,603,617,637,758,797,824,829,841,853,873,889,902,938,943,969,1013,1058,1150,1161,1182,1228,1236,1243,1258,1266,1273,1281,1304,1311,1376,1448,1463,1473,1490,1507,1527,1549,1553,1591,1638,1647,1656,1662,1684,1696,1827,1881,1936,2024,2069,2279,2306,2311,2367,2372,2383,2453,2459,2500,2624,2974,3084,3125,3184,3218,3421,3466,3512,3618,3659,3705,3893,3932,3947,3957,3993 'well':440 'what':406,1149,1796,2189 'what.but':1860 'when':1826,1979,2262,2973 'whenever':14,96 'where':1496,1880,1892,2278,2371,2623,3124,3420 'whereas':3048 'which':297,2458 'while':425,1142,2962,2978,3504,3532 'whose':3830 'wikipedia':657 'wikipediafound':2207 'wikipediamerge':2160 'wikipediamit':2902 'wikipediasan':3357 'will':191,238,604,638,842,944,1205,1312,1491,1528,1542,1592,1685,2394,3660,3826,3832 'with':151,229,410,565,845,1599,1996,2026,2334,3427,3451,3645,3919 'wonder':1795 'work.a':62 'working':27 'works':140,1159 'worst':3122,3173,3372 'would':384,514,610,874,1192,1803,1968,2312,3159,3176,3627,3685,3778 'wrap':1593 'write':892,3185,3468 'writing':112,3890 'you':445,1945,1993,2409,2419,4181 'your':447 'youtubeinsertion':1783 'zero':334		
1072	Paper notes: Key-Value Storage Engines	{"ver":2,"uid":1,"hash":"SHA1:13d6fc3a9f5ab7af5ae366c81669b5f72d8ba11e"}	https://vishnubharathi.codes/blog/paper-notes-key-value-storage-engines/	2020-08-22 21:04:43	<p>These are my notes and thoughts that came up while reading this research paper called <a href="https://stratos.seas.harvard.edu/files/stratos/files/keyvaluestorageengines.pdf" target="_blank" rel="noopener">Key-Value Storage Engines</a>.</p><p>I first came across this paper in <a href="https://tikv-wg.slack.com/archives/CGQ6VFATU/p1589836557016600" target="_blank" rel="noopener">TiKV’s slack</a>. I have been wanting to read it ever since! (and pulled it off early morning yesterday). I think the paper is a short one compared to any of the papers that I have read. It was published recently and so it contains notes about the latest key-value stores.</p><blockquote><p>we survey the state-of-the-art approaches on how the core storage engine of a key-value store system is designed.</p></blockquote><p>On the side: I was wondering how to discover new research papers to read about in topics of interest. My current interest is in databases (more specifically key-value stores and hybrid stores). Seems like one efficient way is to take on an introductory paper (like the one we are going to discuss here), read it, and see how it aligns with the goals. If you got what you want, go and check the other works of the author(s) of the paper. I did the same for this and ended up amazed by the work <a href="https://stratos.seas.harvard.edu/" target="_blank" rel="noopener">the authors</a> of this paper.</p><p>Speaking of authors, let me put up the ACM reference format here to give credit to the authors and the paper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stratos Idreos and Mark Callaghan. 2020. Key-Value Storage En-</span><br><span class="line">gines. In Proceedings of the 2020 ACM SIGMOD International Con-</span><br><span class="line">ference on Management of Data (SIGMOD’20), June 14–19, 2020,</span><br><span class="line">Portland, OR, USA. ACM, New York, NY, USA, 6 pages. https://doi.</span><br><span class="line">org/10.1145/3318464.3383133</span><br></pre></td></tr></table></figure><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>The main contents of the paper are divided into three parts</p><ol><li>Key-value storage engines and applications</li><li>State of art engine design</li><li>Self-Designing NoSQL storage</li></ol><h2 id="Key-value-storage-engines-and-applications"><a href="#Key-value-storage-engines-and-applications" class="headerlink" title="Key-value storage engines and applications"></a>Key-value storage engines and applications</h2><p>Key-value stores could be used in a lot of places.</p><blockquote><p>graph processing in social media [9, 14], to event log processing in cybersecurity [15], application data caching [51], NoSQL stores [57], flash translation layer design [21], time-series management [42, 43], and online transaction processing [26].</p></blockquote><p>One interesting take in this section: <strong>Key Value Stores are used in SQL systems</strong></p><p>I have mostly viewed tables in SQL systems as “tables” (you get me!). This paper lays the base work of thinking about SQL tables in terms of key-value stores.</p><blockquote><p>FoundationDB is a core part of Snowflake, while My-Rocks integrates RockDB in MySQL as its back-end storage.</p></blockquote><p>It seems like modern databases seem to use a distributed key-value store as a building block. I have noticed this pattern recently in “TiKV being used as the underlying store as TiDB”.</p><p>Apart from the applications, the section introduces properties like read, update, and memory amplification. Each key-value store has different properties and it is up to the users to choose a store based on their workloads.</p><p>By reading this section, I mostly understood this:</p><blockquote><p>There is no Perfect Design.</p></blockquote><p>If we are trying to build a key-value store from scratch, we must first understand and accept the trade-offs. Ask questions and arrive at answers like</p><p>Q: What kind of workload will be suited the most for the store?</p><p>A: It suits the most for frequent reads and in-frequent bulk inserts.</p><p>An example mentioned in this paper is <a href="https://github.com/spotify/sparkey" target="_blank" rel="noopener">sparkey</a>, a key-value storage library from Spotify which does that tradeoff.</p><h2 id="State-of-art-engine-design"><a href="#State-of-art-engine-design" class="headerlink" title="State of art engine design"></a>State of art engine design</h2><p>Before this paper, I usually took the time to think about the outer-most layers of key-value stores like the communication protocols, how are we going to store data in-memory. This paper jumps right into the core - how data is stored on the disk? How data is first stored in memory and moved to disk afterward?</p><h3 id="Big-three"><a href="#Big-three" class="headerlink" title="Big three"></a>Big three</h3><p>The paper introduces about three data-structures to be at the core of the state of art storage designs.</p><ol><li>B+ tree</li><li>Log-structures merge-tree (LSM tree)</li><li>Log and Index (LSH table)</li></ol><p>That’s it! If I just learn about them, then I should have a basic idea about what’s going on in most databases.</p><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h4><blockquote><p>B+ tree is the backbone design of the BerkeleyDB key-value store [53], now owned by Oracle, and the backbone of the WiredTiger key-value store [66], now used as the primary storage engine in MongoDB [52]. FoundationDB [8] also relies on a B+ tree.</p></blockquote><h4 id="LSM-tree"><a href="#LSM-tree" class="headerlink" title="LSM tree"></a>LSM tree</h4><p>This is usually augmented with some-other things like:</p><blockquote><p>In-memory structures such as Bloom filters, fence pointers and Tries help filter queries to avoid disk I/O [19, 67].</p></blockquote><p>In practice: </p><blockquote><p> This design has been adopted in numerous industrial settings including LevelDB [30] and BigTable [17] at Google, RocksDB [27] at Facebook, Cassandra [45], HBase [33] and Accumulo [7] at Apache, Voldemort [47] at LinkedIn, Dynamo [24] at Amazon, WiredTiger [66] at MongoDB, and bLSM [61] and cLSM [29] at Yahoo, and more designs in research such as SlimDB [58], WiscKey [49], Monkey [19, 20], Dostoevsky [22], and LSM-bush [23].</p></blockquote><h4 id="Log-and-index"><a href="#Log-and-index" class="headerlink" title="Log and index"></a>Log and index</h4><blockquote><p>This Log and Index design is employed by BitCask [62] at Riak, Sparkey [64] at Spotify, FASTER [16] at Microsoft, and many more systems in research [2, 46, 59].</p></blockquote><p>I guess that the concrete implementation of this technique is called Log-Structured Hash tables.</p><blockquote><p>Most systems use a hash table as the index over the log.</p></blockquote><h3 id="Design-Descisions"><a href="#Design-Descisions" class="headerlink" title="Design Descisions"></a>Design Descisions</h3><p>The remainder of this section deals with various design considerations that we need to be aware of while building a key-value store. </p><ol><li>Memory management</li><li>Compactions and Splits</li><li>Concurrency control</li><li>Time travel queries</li><li>CPU vs I/O Cost</li><li>Adaptive Indexing and layouts</li></ol><h4 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h4><blockquote><p>One of the most critical decisions in key-value stores is how to distribute the available bits across the various in-memory components. For example, in an LSM-tree like design, it is common to have numerous Bloom-filters in memory and other helper structures to help skip disk reads.</p></blockquote><h4 id="Compaction-and-Splits"><a href="#Compaction-and-Splits" class="headerlink" title="Compaction and Splits"></a>Compaction and Splits</h4><blockquote><p>Depending on the exact design a NoSQL engine will need to frequently reorganize data such as to maintain certain performance invariants. For example, an LSM-tree like design needs to perform compactions as new data arrives such as to maintain order and remove past invalid values that have been updated out of place.</p></blockquote><p>Compactions can happen in two ways: in-place and out-of-place compactions. Out-of-place compaction allows queries to be served while the compaction is happening. The way it does it is by having a duplicated in-memory copy from which the query could be served while the actual data is undergoing compaction. For in-place compactions, the query will block.</p><p>So, we know one new thing about LSM trees from this section: They don’t block queries while undergoing compactions.</p><h4 id="Concurrency-control"><a href="#Concurrency-control" class="headerlink" title="Concurrency control"></a>Concurrency control</h4><blockquote><p>LSM-trees are inherently more able to process concurrent requests compared to a typical B-tree design because they update data out of place. Similarly, a log-structured hash table design goes a step further by performing much fewer compactions and thus creating fewer conflicts for reads and writes (at the expense of read cost). B-tree designs can also adopt an out of place approach by stacking updates in leaf nodes like BW-tree or across any node like Bε tree.)</p></blockquote><h4 id="Time-travel-queries"><a href="#Time-travel-queries" class="headerlink" title="Time travel queries"></a>Time travel queries</h4><p>Key-value stores might be designed to store timestamps along with key-value pairs. This choice opens up the possibility for implementation of features like</p><ol><li>Multiple versions of the same key could be stored</li><li>TTL (Ability to automatically remove the key-value pair after certain amount of time)</li></ol><blockquote><p>if timestamps are stored inline with the base date, then this can lead to significant overheads for all queries (since timestamps will need to be read along with the base data).</p></blockquote><h4 id="CPU-vs-I-O-Cost"><a href="#CPU-vs-I-O-Cost" class="headerlink" title="CPU vs I/O Cost"></a>CPU vs I/O Cost</h4><blockquote><p>using compression leads to increased CPU costs and the exact form of compression used defines the balance of I/O saved versus CPU sacrificed.</p></blockquote><p>So if we are trying to build a database, we need to decide whether if we are going to support compression of data and have to get an idea about various types of compression.</p><h4 id="Adaptive-Indexing-and-Layouts"><a href="#Adaptive-Indexing-and-Layouts" class="headerlink" title="Adaptive Indexing and Layouts"></a>Adaptive Indexing and Layouts</h4><blockquote><p>Adaptive indexing [36] is a lightweight approach in self-tuning databases. Adaptive indexing addresses the limitations of offline and online indexing for dynamic workloads; it reacts to workload changes by building or refining indices partially and incrementally as part of query processing.</p></blockquote><p>Before going on to adaptive indexing, we need to think about just “indexing”. How are we going to store the index of keys in-memory? What if there are a lot of keys? Is it possible to index only a partial set of keys and swap out the partial to load the parts that we need? Things like these!</p><p>Now we are allowed to get excited about newer research on adaptive indexing - what if the key-value store automatically figures out what to index based on the access patterns of the workload? - exciting, huh?</p><h2 id="Self-Designing-NoSQL-storage"><a href="#Self-Designing-NoSQL-storage" class="headerlink" title="Self-Designing NoSQL storage"></a>Self-Designing NoSQL storage</h2><p>This section of the paper mostly deals with the special interest of the authors - Self-tuning databases. You can read up this section of the paper if you are interested. I didn’t understand much, but in simple terms, they are trying to describe data systems that self-tune it’s configuration <em>near instantly</em> (ah, interesting!) on live workloads.</p><p>That leads me to a project written by one of the authors of this paper called CrimsonDB - <a href="https://demosubmitter.github.io/" target="_blank" rel="noopener">https://demosubmitter.github.io/</a></p><p>If this sounds exciting, the next step for this is exploring the <a href="https://stratos.seas.harvard.edu/files/stratos/files/datacalculator.pdf" target="_blank" rel="noopener">Data Calculator</a> paper which gives an idea about “how we can synthesize more data structures than stars on the sky to pick the right one for a given problem”.</p><h2 id="Questions-to-work-on"><a href="#Questions-to-work-on" class="headerlink" title="Questions to work on"></a>Questions to work on</h2><p>Arrived at a list of questions by reading this paper: </p><p>(I believe each one has the potential to become a blog post on its own)</p><ol><li>What is a B+ tree?</li><li>What is an LSM tree?</li><li>What is an LSH table?</li><li>What is a B<sup>ε</sup> tree?</li><li>What is a BW-tree?</li><li>What is a Bloom filter? (probabilistic data structure)</li><li>What is a fence pointer? (I think it is something that supports an LSM tree)</li><li>What other ways of storing timestamps for KV pairs are there? (apart from storing it inline with the kv-pair itself)</li><li>What kind of compression techniques are employed by various key-value stores?</li></ol><p>~ ~ ~</p><p>If you want to discuss about any of the above things, feel free to <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">say hi</a> to me!</p>	537eef80f1e129a8141a55e51fa2ce1983bbe403	\N	f	2020-09-08 12:10:00	2020-09-10 03:10:01.564526	0			'/10.1145/3318464.3383133contentsthe':276 '/if':1587 '14':261,323 '15':330 '16':866 '17':790 '19':262,772,838 '2':875 '20':259,839 '2020':235,247,263 '21':342 '22':841 '23':846 '24':811 '26':353 '27':794 '29':823 '30':787 '33':800 '36':1368 '42':347 '43':348 '45':798 '46':876 '47':807 '49':836 '51':334 '52':734 '53':709 '57':337 '58':834 '59':877 '6':272 '61':820 '62':858 '64':862 '66':724,815 '67':773 '7':803 '8':736 '9':322 'a':58,102,314,399,425,432,482,505,541,562,685,740,896,924,1002,1088,1149,1163,1171,1337,1370,1438,1448,1572,1625,1633,1650,1658,1673,1678,1684,1692 'ability':1260 'able':1142 'about':80,123,388,587,642,679,688,1122,1359,1418,1475,1606,1745 'above':1749 'accept':517 'access':1497 'accumulo':802 'acm':218,248,267 'across':30,960,1217 'actual':1103 'adaptive':1378,1412,1479 'addresses':1380 'adopt':1200 'adopted':780 'after':1269 'afterward':637 'ah':1564 'aligns':170 'all':1291 'allowed':1471 'allows':1070 'along':1235,1300 'also':737,1199 'amazed':202 'amazon':813 'amount':1271 'amplification':464 'an':152,970,1020,1201,1357,1604,1663,1668,1702 'and':12,46,75,140,166,181,199,228,232,291,305,349,462,473,516,524,549,633,668,714,763,788,801,818,821,826,842,848,851,869,931,940,987,996,1039,1059,1179,1186,1315,1353,1365,1385,1402,1453 'answers':527 'any':63,1218,1746 'apache':805 'apart':451,1716 'application':331 'applications':454 'applicationskey':307 'applicationskey-value':306 'applicationsstate':292 'approach':1205,1372 'approaches':94 'are':9,159,282,363,501,603,1139,1276,1333,1346,1422,1437,1470,1537,1549,1714,1732 'arrive':525 'arrives':1033 'art':93,294,575,656 'as':375,412,431,445,449,727,758,832,899,1012,1030,1035,1404 'ask':522 'at':526,649,791,795,804,808,812,816,824,859,863,867,1188,1632 'augmented':746 'author':188 'authors':207,212,227,1521,1579 'automatically':1262,1488 'available':958 'avoid':769 'aware':920 'b':741,1152,1195,1659 'b-tree':1151,1194 'back':415 'back-end':414 'backbone':700,716 'balance':1324 'base':384,1281,1303 'based':484,1494 'basic':686 'be':311,534,648,919,1073,1099,1230,1258,1298 'because':1155 'become':1649 'been':39,779,1046 'being':443 'believe':1642 'berkeleydb':704 'big':638 'bigtable':789 'bitcask':857 'bits':959 'block':434,1131 'block.so':1116 'blog':1651 'bloom':759,983,1685 'bloom-filters':982 'blsm':819 'build':504,1336 'building':433,923,1397 'bulk':553 'bush':845 'but':1544 'bw':1214,1680 'bw-tree':1213,1679 'by':203,712,856,1086,1174,1206,1396,1575,1637,1734 'bε':1221,1674 'caching':333 'calculator':1600 'callaghan':234 'called':22,888,1583 'came':15,29 'can':1051,1198,1285,1527,1609 'cassandra':797 'certain':1015,1270 'changes':1395 'check':182 'choice':1242 'choose':481 'clsm':822 'common':978 'communication':600 'compaction':1069,1077,1107 'compactions':1029,1064,1112,1178 'compactions.concurrency':1135 'compared':61,1147 'components':966 'compression':1309,1320,1350,1730 'compression.adaptive':1363 'con':252 'con-ference':251 'concrete':882 'concurrent':1145 'configuration':1561 'conflicts':1183 'considerations':914 'contains':78 'contents':278 'controllsm':1137 'controllsm-trees':1136 'controltime':933 'copy':1093 'core':98,400,618,651 'cost':1193 'costadaptive':938 'costs':1314 'costusing':1308 'could':310,1098,1257 'cpu':1305,1313,1329 'creating':1181 'credit':224 'crimsondb':1584 'critical':946 'current':129 'cybersecurity':329 'data':257,332,608,620,627,645,1010,1032,1104,1158,1304,1352,1553,1599,1612,1688 'data-structures':644 'database':1338 'databases':133,421,1377,1525 'databases.b':695 'date':1282 'deals':910,1514 'decide':1342 'decisions':947 'defines':1322 'demosubmitter.github.io':1586 'demosubmitter.github.io/if':1585 'descisionsthe':905 'describe':1552 'design':341,701,777,853,913,975,1001,1025,1154,1169 'design.if':499 'designbefore':577 'designed':1231 'designed.on':109 'designing':298,1506 'designs':828,1197 'designs.b':658 'designself':297 'designself-designing':296 'did':194 'didn':1540 'different':471 'discover':117 'discuss':162,1744 'disk':625,636,770,994 'distribute':956 'distributed':426 'divided':283 'does':571,1083 'doi.org':275 'doi.org/10.1145/3318464.3383133contentsthe':274 'don':1129 'dostoevsky':840 'duplicated':1089 'dynamic':1389 'dynamo':810 'each':465,1643 'early':50 'efficient':146 'employed':855,1733 'en':241 'en-gines':240 'end':416 'ended':200 'engine':100,295,576,731,1004 'engines':7,290,304 'engines.i':27 'event':325 'ever':44 'exact':1000,1317 'example':555,968,1019 'excited':1474 'exciting':1502,1590 'expense':1190 'exploring':1597 'facebook':796 'faster':865 'features':1250 'feel':1751 'fence':761,1693 'ference':253 'fewer':1177,1182 'figures':1489 'filter':766,1686 'filters':760,984 'first':28,514,629 'flash':338 'for':197,538,546,967,1018,1108,1184,1247,1290,1388,1594,1624,1711 'form':1318 'format':220 'foundationdb':735 'free':1752 'frequent':547,552 'frequently':1008 'from':452,510,568,1094,1125,1717 'further':1173 'get':378,1356,1473 'gines':242 'give':223 'given':1626 'gives':1603 'go':180 'goals':173 'goes':1170 'going':160,605,691,1347,1409,1424 'google':792 'got':176 'guess':879 'happen':1052 'happening':1079 'has':470,778,1645 'hash':892,897,1167 'have':38,69,368,436,684,980,1045,1354 'having':1087 'hbase':799 'help':765,992 'helper':989 'here':163,221 'hi':1755 'how':96,115,168,602,619,626,954,1421,1607 'huh':1503 'hybrid':141 'i':37,53,68,112,193,435,491,580,676,682,878,1539,1641,1695 'i/o':771,937,1307,1326 'idea':687,1358,1605 'idreos':231 'if':174,675,1274,1331,1344,1435,1482,1535,1740 'implementation':883,1248 'in':33,124,132,243,313,319,328,357,365,372,391,410,441,551,557,610,631,693,732,754,774,781,829,873,948,964,969,985,1053,1057,1091,1110,1209,1373,1432,1545 'in-frequent':550 'in-memory':609,753,963,1090,1431 'in-place':1056,1109 'including':785 'increased':1312 'incrementally':1403 'index':669,852,901,1428,1446,1493 'indexing':939,1364,1367,1379,1387,1413,1420,1480 'indexthis':849 'indices':1400 'industrial':783 'inherently':1140 'inline':1278,1720 'inserts.an':554 'instantly':1563 'integrates':408 'interest':127,130,1518 'interested':1538 'interesting':355,1565 'international':250 'into':284,616 'introduces':457,641 'introductory':153 'invalid':1042 'invariants':1017 'is':57,108,131,148,398,475,496,560,621,628,698,744,854,887,953,977,1078,1085,1105,1369,1442,1596,1657,1662,1667,1672,1677,1683,1691,1698 'it':43,48,71,77,165,169,474,542,674,976,1082,1084,1391,1443,1559,1697,1719 'its':413,1654 'itself':1726 'jumps':614 'june':260 'just':677,1419 'key':4,24,84,104,137,237,360,395,428,467,507,564,595,706,721,926,950,1238,1256,1266,1485,1737 'key-value':3,23,83,103,136,236,394,427,466,506,563,594,705,720,925,949,1237,1265,1484,1736 'keys':1430,1441,1452 'kind':530,1728 'know':1118 'kv':1712,1724 'kv-pair':1723 'latest':82 'layer':340 'layers':592 'layoutsadaptive':1366 'layoutsmemory':941 'lays':382 'lead':1286 'leads':1310,1569 'leaf':1210 'learn':678 'let':213 'leveldb':786 'library':567 'lightweight':1371 'like':144,155,419,459,598,752,974,1024,1212,1220,1466 'likemultiple':1251 'likeq':528 'limitations':1382 'linkedin':809 'list':1634 'live':1567 'load':1459 'log':326,667,847,850,890,1165 'log-structured':889,1164 'log.design':904 'lot':315,1439 'lsh':670,1669 'lsm':665,844,972,1022,1123,1664,1703 'lsm-bush':843 'lsm-tree':971,1021 'main':277 'maintain':1014,1037 'management':255,346 'managementcompactions':930 'managementone':942 'many':870 'mark':233 'me':214,379,1570,1757 'media':321 'memory':463,611,632,755,929,965,986,1092,1433 'mentioned':556 'merge':663 'merge-tree':662 'microsoft':868 'might':1229 'modern':420 'mongodb':733,817 'monkey':837 'more':134,827,871,1141,1611 'morning':51 'most':537,545,591,694,945 'mostly':369,492,1513 'moved':634 'much':1176,1543 'must':513 'my':10,128,406 'my-rocks':405 'mysql':411 'near':1562 'need':917,1006,1296,1340,1415,1464 'needs':1026 'new':118,268,1031,1120 'newer':1476 'next':1592 'no':497 'node':1219 'nodes':1211 'nosql':299,335,1003,1507 'notes':2,11,79 'noticed':437 'now':710,725,1468 'numerous':782,981 'ny':270 'of':64,91,101,126,186,190,208,211,245,256,279,293,316,386,393,402,531,574,593,652,655,702,717,884,907,921,943,1049,1062,1067,1160,1191,1203,1249,1253,1272,1319,1325,1351,1362,1383,1406,1429,1440,1451,1499,1510,1519,1532,1577,1580,1635,1708,1729,1747 'off':49 'offline':1384 'offs':521 'on':95,151,254,485,623,692,739,998,1410,1478,1495,1566,1616,1653 'onarrived':1631 'one':60,145,157,354,1119,1576,1623,1644 'online':350,1386 'only':1447 'opens':1243 'or':265,1216,1398 'oracle':713 'order':1038 'other':184,750,988,1706 'out':1048,1061,1066,1159,1202,1455,1490 'out-of-place':1060,1065 'outer':590 'outer-most':589 'over':902 'overheads':1289 'own':1655 'owned':711 'pages':273 'pair':1268,1725 'pairs':1240,1713 'paper':1,21,32,56,154,192,281,381,559,579,613,640,1512,1534,1582,1601,1640 'paper.speaking':210 'paper12345stratos':230 'papers':66,120 'part':401,1405 'partial':1449,1457 'partially':1401 'parts':1461 'partskey':287 'partskey-value':286 'past':1041 'pattern':439 'patterns':1498 'perfect':498 'perform':1028 'performance':1016 'performing':1175 'pick':1620 'place':1058,1063,1068,1111,1161,1204 'place.compactions':1050 'places.graph':317 'pointer':1694 'pointers':762 'portland':264 'possibility':1246 'possible':1444 'post':1652 'potential':1647 'practice':775 'primary':729 'probabilistic':1687 'problem':1627 'proceedings':244 'process':1144 'processing':318,327,352 'processing.before':1408 'project':1573 'properties':458,472 'protocols':601 'published':73 'pulled':47 'put':215 'queries':767,1071,1132,1292 'queriescpu':935 'querieskey':1226 'querieskey-value':1225 'query':1097,1114,1407 'questions':523,1628,1636 'reacts':1392 'read':42,70,122,164,460,1192,1299,1528 'reading':18,488,1638 'reads':548,1185 'reads.compaction':995 'recently':74,440 'reference':219 'refining':1399 'relies':738 'remainder':906 'remove':1040,1263 'reorganize':1009 'requests':1146 'research':20,119,830,874,1477 'riak':860 'right':615,1622 'rockdb':409 'rocks':407 'rocksdb':793 's':35,189,673,690,1560 'sacrificed.so':1330 'same':196,1255 'saved':1327 'say':1754 'scratch':511 'section':359,456,490,909,1127,1509,1531 'see':167 'seem':422 'seems':143,418 'self':1375,1505,1523,1557 'self-designing':1504 'self-tune':1556 'self-tuning':1374,1522 'series':345 'served':1074,1100 'set':1450 'settings':784 'short':59 'should':683 'side':111 'sigmod':249,258 'significant':1288 'similarly':1162 'simple':1546 'since':45,1293 'skip':993 'sky':1618 'slack':36 'slimdb':833 'snowflake':403 'so':76 'social':320 'some':749 'some-other':748 'something':1699 'sounds':1589 'sparkey':561,861 'special':1517 'specifically':135 'splitsconcurrency':932 'splitsdepending':997 'spotify':569,864 'sql':366,373,389 'stacking':1207 'stars':1615 'state':90,654 'state-of-the-art':89 'step':1172,1593 'storage':6,26,99,239,289,303,566,657,730 'storage.it':417 'storagekey':301 'storagekey-value':300 'storagethis':1508 'store':106,430,448,469,483,509,540,607,708,723,928,1233,1426,1487 'stored':622,630,1277 'storedttl':1259 'stores':139,142,309,336,362,597,952,1228,1739 'stores.foundationdb':397 'stores.we':86 'storing':1709,1718 'structure':1689 'structured':891,1166 'structures':646,661,756,990,1613 'such':757,831,1011,1034 'suited':535 'suits':543 'support':1349 'supports':1701 'survey':87 'swap':1454 'synthesize':1610 'system':107 'systems':374,872,894,1554 'systemsi':367 't':1130,1541 'table':671,898,1168,1670 'tables':371,376,390 'tables.most':893 'take':150,356 'technique':886 'techniques':1731 'terms':392,1547 'than':1614 'that':14,67,572,672,880,915,1044,1462,1555,1700 'the':55,65,81,88,92,97,110,156,172,183,187,191,195,204,206,217,226,229,246,280,383,446,453,455,478,518,536,539,544,583,588,599,617,624,650,653,699,703,715,718,728,881,900,903,944,957,961,999,1076,1080,1096,1102,1113,1189,1245,1254,1264,1280,1302,1316,1323,1381,1427,1456,1460,1483,1496,1500,1511,1516,1520,1533,1578,1591,1598,1617,1621,1646,1722,1748 'their':486 'them':680 'then':681,1283 'there':495,1436,1715 'these':8,1467 'they':1128,1156,1548 'thing':1121 'things':751,1465,1750 'think':54,586,1417,1696 'thinking':387 'this':19,31,198,209,358,380,438,489,494,558,578,612,776,885,908,1126,1241,1284,1530,1581,1588,1595,1639 'thoughts':13 'three':285,643 'threethe':639 'thus':1180 'tidb':450 'tikv':34,442 'time':344,584,1223,1273 'time-series':343 'timestamps':1234,1275,1294,1710 'to':41,62,116,121,149,161,222,225,324,423,477,480,503,585,606,635,647,768,918,955,979,991,1007,1013,1027,1036,1072,1143,1148,1232,1261,1287,1297,1311,1335,1341,1348,1355,1393,1411,1416,1425,1445,1458,1472,1492,1551,1571,1619,1629,1648,1743,1753,1756 'took':582 'topics':125 'trade':520 'trade-offs':519 'tradeoff.state':573 'transaction':351 'translation':339 'travel':934,1224 'tree':664,666,697,973,1023,1153,1196,1215,1222,1660,1665,1675,1681,1704 'tree.lsm':742 'treeb':696 'treelog':660 'treelog-structures':659 'trees':1124,1138 'treethis':743 'tries':764 'trying':502,1334,1550 'tune':1558 'tuning':1376,1524 'two':1054 'types':1361 'typical':1150 'undergoing':1106,1134 'underlying':447 'understand':515,1542 'understood':493 'up':16,201,216,476,1244,1529 'update':461,1157 'updated':1047 'updates':1208 'usa':266,271 'use':424,895 'used':312,364,444,726,1321 'users':479 'usually':581,745 'value':5,25,85,105,138,238,288,302,308,361,396,429,468,508,565,596,707,722,927,951,1227,1239,1267,1486,1738 'values':1043 'various':912,962,1360,1735 'versions':1252 'versus':1328 'viewed':370 'voldemort':806 'vs':936,1306 'want':179,1742 'wanting':40 'was':72,113 'way':147,1081 'ways':1055,1707 'we':158,500,512,604,916,1117,1332,1339,1345,1414,1423,1463,1469,1608 'what':177,529,689,1434,1481,1491,1656,1661,1666,1671,1676,1682,1690,1705,1727 'whether':1343 'which':570,1095,1602 'while':17,404,922,1075,1101,1133 'will':533,1005,1115,1295 'wiredtiger':719,814 'wisckey':835 'with':171,747,911,1236,1279,1301,1515,1721 'wondering':114 'work':205,385,1630 'workload':532,1394,1501 'workloads':1390 'workloads.by':487 'workloads.that':1568 'works':185 'writes':1187 'written':1574 'yahoo':825 'yesterday':52 'york':269 'you':175,178,377,1526,1536,1741		
1073	Recurse	{"ver":2,"uid":1,"hash":"SHA1:e9f96e8a4821534d02d281042bcdb9edde9c703f"}	https://vishnubharathi.codes/blog/recurse/	2020-08-22 21:04:43	<p>I am happy to announce that I got accepted into <a href="https://www.recurse.com/" target="_blank" rel="noopener">The Recurse Center</a> center for the Fall 1 ‘20 batch. It’s quite a life event because attending RC was one of my dreams for about a year and a half now.</p><p>Trying to share a few things about my journey.</p><h2 id="What-is-RC"><a href="#What-is-RC" class="headerlink" title="What is RC?"></a>What is RC?</h2><p>For those who haven’t heard of it yet:</p><blockquote><p>The Recurse Center is a self-directed, community-driven educational retreat for programmers based in New York City and currently operating online.</p></blockquote><p>Retreats happen in batches and the batches run for varying length: Full (12 weeks), Half (6 weeks) and Mini (1 week). It is self-directed, so we pick what to learn during that time. We will be working along-side a <a href="https://www.recurse.com/diversity" target="_blank" rel="noopener">diverse</a> group of people, so there is much to learn from them.</p><p>I won’t steal the fun of knowing about RC for the first time from you! haha, When I heard of RC for the first time - I spent like an hour reading all their contents at <a href="https://www.recurse.com" target="_blank" rel="noopener">https://www.recurse.com</a> - so go ahead and enjoy the link!</p><h2 id="Why-is-it-a-dream"><a href="#Why-is-it-a-dream" class="headerlink" title="Why is it a dream?"></a>Why is it a dream?</h2><p>I mentioned earlier that it has been a dream of mine to attend the RC. Why so?</p><p>RC has a nice application/interview process (you should apply if you are in doubt). Even though I cleared the interviews, there were still uncertainties lurking in, and the odds of me getting a chance to attend it was very low. I will tell you why!</p><p>The first one is financial situations: Had been a software engineer for the past 5 years and always committed to going to work! With the <a href="https://en.wikipedia.org/wiki/Coronavirus_disease_2019" target="_blank" rel="noopener">current pandemic situation</a>, I lost my job 2 months back and got moratorium for EMIs of loan repayment. So the stress about “have to go to work to pay loans” is not there for months. Which means I can do whatever I like to do right now! Just have to make sure that I figure out a way to make money before I spend all the money I have.</p><p>Apart from that, I have very little chances of affording travel + accommodation in the USA. Flight tickets, cost of living there for 12 weeks. Probably I would have to get a loan or sponsorship to be able to afford it or at least have to save up for year(s) to be able to do it! (Just see the conversion rate of INR to USD). Now that the batches are online, it is totally affordable!</p><p>The next uncertainty is a travel visa - I don’t know much about it, because I haven’t traveled much! (know what I have never visited North India itself, haha). In one of my previous jobs, most of my team people flew from Bangalore to Delhi for getting a travel visa to a place for attending the annual meetup of the company, guess what - not a single person got the visa (except the ones who had already visited some countries). I remember reading that Daniel (the creator of curl) has a live timer counting the time since he applied for a visa; if you are wondering, the timer <a href="https://daniel.haxx.se/us-visa.html" target="_blank" rel="noopener">is still running</a>. Since we have people already attend RC from India before, so it is not a complete impossibility but I guess it could still be a roadblock. Now that RC is running online, the visa I need is here - my internet connection, haha.</p><p>Clearing the interview and overcoming all these uncertainties should happen in an aligned timeline. (not trying to scare you off from applying, but these are just some things that I thought might be a problem for me personally. Despite that, I was hoping to attend RC somehow even when they were running only physical batches. Hope is a beautiful thing - have it!)</p><p>So that makes it seem like attending RC is almost a dream for me and as <a href="https://twitter.com/riturajcse" target="_blank" rel="noopener">my friend</a> said over a Whatsapp text</p><blockquote><p>Dreams do come true</p></blockquote><h2 id="First-attempt"><a href="#First-attempt" class="headerlink" title="First attempt"></a>First attempt</h2><p>My first attempt to apply to RC dates back to the end of 2018. I got so excited to apply for it that I started writing a lisp parse ( <a href="https://github.com/scriptnull/yali" target="_blank" rel="noopener">https://github.com/scriptnull/yali</a> ) inspired by a task in their <a href="https://www.recurse.com/pairing-tasks" target="_blank" rel="noopener">pair programming tasks</a>. I had started filling <a href="https://www.recurse.com/apply/retreat" target="_blank" rel="noopener">the written application for RC</a> a couple of times and I would stop right after “Code CracklePop”. When I want to get back to it, life happened - like one of my employers getting acquired by another company and there is no way to take a sabbatical right after it.</p><h2 id="Inspiration"><a href="#Inspiration" class="headerlink" title="Inspiration"></a>Inspiration</h2><p>I should say that two people inspired me a lot to attend the Recurse Center.</p><ul><li><a href="https://jvns.ca/" target="_blank" rel="noopener">Julia Evans</a> : I often end up reading her amazing blog posts and it kind of fostered me to blog more.</li><li><a href="https://andrewkelley.me/" target="_blank" rel="noopener">Andrew Kelley</a> : Reason is these three little letters “Zig”. It was super interesting to see his presentation in RC’s <a href="https://www.recurse.com/events/localhost-andrew-kelley" target="_blank" rel="noopener">localhost</a></li></ul><p>Both of them are alums of RC who have done cool stuff! Apart from that, there is a lot of cool stuff that people (who have attended and are attending) seem to do. I follow those updates usually on twitter and <a href="https://joy.recurse.com/" target="_blank" rel="noopener">Joy of Computing</a>.</p><h2 id="How-I-applied-now"><a href="#How-I-applied-now" class="headerlink" title="How I applied now?"></a>How I applied now?</h2><p>hmm, well after losing my job I was taking that long-needed break and preparing for my next adventure. I was learning and learning most of the time - with the fear of not passing interviews, etc. These are uncertain times and it has been a little rough. I was slowly starting to get out of the fear zone and become productive.</p><p>The thing with me is I don’t usually apply for a lot of jobs. I apply selectively to the jobs that I really like to have because even if it is a rejection it has to mean something and I don’t want to waste the time of the people who are giving an interview chance to me! In these two months, I just applied and attended only one interview. Earlier I blogged about the interview and the <a href="/blog/first-feedback/">feedback</a> I got out of it. I was gradually making my steps to get better by acting on the feedback.</p><p>At the same time, I was trying to explore the latest trends that I haven’t been able to catch up like paying a little visit to the frontend ecosystem - React &amp; Redux. During one such day, <a href="https://twitter.com/theonlynabarun" target="_blank" rel="noopener">Nabarun</a> (we used to work together) messaged me on twitter asking what I am up to these days. I said that I was mostly learning and experimenting with things to figure out if I should be trying out for backend or full-stack roles. Then he said,</p><blockquote><p>It is nice to experiment and identify what one really likes. If you want to experiment more for some time, try Recurse Center. They are doing all cohorts online this year.</p></blockquote><p>It was good to hear it! I was actually thinking of applying to Recurse Center in these 2 months and as usual, wrote CracklePop one more time and never made it to the end, haha. I went on to think about what he told over the next few days and worked on the pair programming task (Database server) over a weekend. Then there I was writing my application for one full Sunday. The next day, I reviewed and submitted my application.</p><h2 id="The-interviews"><a href="#The-interviews" class="headerlink" title="The interviews"></a>The interviews</h2><p>The entire process took up to 2 weeks. The interviewers were super helpful in having a good conversation. The conversational interview was more of a technical chat with a friend. I watched a <a href="https://www.ted.com/playlists/352/talks_to_watch_before_a_job_in" target="_blank" rel="noopener">few TED talks</a> earlier that day to kind of get me into the zone. Because the last time I had a technical interview before that interview, I completely panicked in the middle. So I wanted to improve myself by just talking with new people without any fear or stress. Those videos did help me and I recommend them if you are trying to overcome interview fears.</p><p>For the pair programming interview, I have never pair programmed in a formal setup. It seems like there shouldn’t be a formal setup after all, haha. In my previous workplaces, I have paired with engineers, in a way that we don’t even know that we were pairing - just two people sitting together and discussing and coding a part of microservice. So, with less formal knowledge on pair programming, I decided to just understand what it is about. So the first preparation I did was just reading through this <a href="https://martinfowler.com/articles/on-pair-programming.html" target="_blank" rel="noopener">article on pair programming</a>. During the pair programming interview, the interviewer followed me through the coding and gave helpful feedback at the right spots.</p><p>Overall, the interview experience is smooth and I encourage anyone wanting to apply for it to give it a go!</p><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><p>Now that I am attending the RC, you might ask what am I planning to do there? So, I will try to answer that here.</p><p>Get better with distributed systems and databases in general. Trying to read up the internals of databases and build a distributed key-value store from scratch. I would like to read research papers, books, and source code. Write blogs to solidify my understanding and write code to improve my coding skills. Example: What is the difference between a B+ tree and an LSM tree? How does Postgres do row-level locking? What are the different protocols used by different datastores for communication between server and client?</p><p>I am building the project in the hope that it might become production-ready someday! There are already a lot of innovations going on in this space and it would be great if we end up building something in the sweet spot!</p><p>Apart from that, I plan on just having more conversations with people in the RC community. Being a non-native speaker of English, it would greatly help me in just getting my thought and speech up to speed. Also, it is fun getting to know people.</p><p>Next one: prepare for my interviews. This involves data-structure and algorithm stuff + system design.</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>I hope this post gave you an idea about my journey to the Recurse Center. You can follow up on the rest of my journey here in this blog and on <a href="https://twitter.com/scriptnull" target="_blank" rel="noopener">my twitter</a>. If you are thinking to attend it, I encourage you to apply!</p><p>By the way, my batch starts tomorrow. (yay! excited!) </p><p>Looking forward to recursing!</p>	5882de10d27286498b15a5e93200f4e3bf92c414	\N	f	2020-09-08 12:10:00	2020-09-10 03:10:01.566217	0			'/scriptnull/yali':690 '1':19,105 '12':98,366 '2':283,1142,1212 '20':20 '2018':672 '5':265 '6':101 'a':25,38,41,46,67,128,187,196,208,238,259,332,374,423,467,471,484,509,519,544,554,604,628,643,653,685,693,709,748,760,822,897,924,945,1034,1184,1221,1230,1234,1238,1259,1315,1325,1341,1362,1435,1480,1519,1568,1609 'able':380,396,1028 'about':37,49,148,297,431,987,1165,1382,1661 'accepted':10 'accommodation':355 'acquired':737 'acting':1008 'actually':1133 'adventure':871 'afford':382 'affordable':418 'affording':353 'after':718,751,854,1328 'ahead':179 'algorithm':1650 'aligned':583 'all':172,340,576,1121,1329 'almost':642 'along':126 'along-side':125 'already':495,534,1567 'also':1631 'alums':809 'always':268 'am':3,1060,1440,1448,1550 'amazing':774 'an':169,582,967,1523,1659 'and':40,83,90,103,180,232,267,286,574,647,713,741,777,832,845,866,875,893,911,952,979,990,1072,1100,1144,1152,1174,1202,1293,1358,1360,1410,1423,1466,1478,1496,1505,1522,1547,1577,1626,1649,1682 'announce':6 'annual':476 'another':739 'answer':1459 'any':1284 'anyone':1426 'apart':817,1592 'application':706,1192 'application.the':1205 'application/interview':210 'applied':517,850,978 'apply':214,663,678,922,929,1429,1697 'applying':592,1136 'are':217,413,523,595,808,833,890,965,1119,1299,1535,1566,1688 'article':1394 'as':648,1145 'ask':1446 'asking':1057 'at':175,385,1414 'attempt':661 'attemptmy':659 'attend':201,241,535,615,763,1691 'attended':831,980 'attending':29,474,639,834,1441 'b':1520 'back':285,667,726 'backend':1086 'bangalore':462 'based':78 'batch':21,1702 'batches':89,92,412,625 'be':123,379,395,553,603,1082,1324,1580 'beautiful':629 'because':28,433,940,1253 'become':912,1560 'been':195,258,896,1027 'before':337,539,1262 'being':1608 'better':1006,1462 'between':1518,1545 'blog':775,784,1681 'blogged':986 'blogs':1500 'books':1495 'break':865 'build':1479 'building':1551,1586 'but':547,593 'by':692,738,1007,1277,1540,1698 'can':314,1669 'catch':1030 'center':14,15,65,1117,1139,1667 'center.julia':766 'chance':239,969 'chances':351 'chat':1232 'city':82 'cleared':223 'client':1548 'code':719,1498,1507 'coding':1361,1409,1511 'cohorts':1122 'come':657 'committed':269 'communication':1544 'community':72,1607 'community-driven':71 'company':480,740 'complete':545 'completely':1266 'computing.how':848 'connection':570 'contents':174 'conversation':1223 'conversational':1225 'conversations':1601 'conversion':403 'cool':815,825 'cost':361 'could':551 'counting':512 'countries':498 'couple':710 'cracklepop':720,1148 'creator':505 'curl':507 'current':276 'currently':84 'daniel':503 'data':1647 'data-structure':1646 'database':1181 'databases':1467,1477 'datastores':1542 'dates':666 'day':1046,1199,1244 'days':1064,1173 'decided':1375 'delhi':464 'design.starti':1653 'despite':609 'did':1290,1388 'difference':1517 'different':1537,1541 'directed':70,111 'discussing':1359 'distributed':1464,1481 'diverse':129 'do':315,320,398,656,837,1452,1529 'does':1527 'doing':1120 'don':427,919,954,1345 'done':814 'doubt':219 'dream':188,197,644 'dreams':35 'driven':73 'during':118,1043,1398 'earlier':191,984,1242 'ecosystem':1040 'educational':74 'emis':290 'employers':735 'encourage':1425,1694 'end':670,770,1158,1584 'engineer':261 'engineers':1339 'english':1615 'enjoy':181 'entire':1207 'etc':888 'evans':767 'even':220,618,941,1347 'event':27 'example':1513 'except':490 'excited':676,1706 'experience':1420 'experiment':1099,1110 'experimenting':1073 'explore':1019 'fall':18 'fear':883,909,1285 'fears.for':1304 'feedback':992,1413 'feedback.at':1011 'few':47,1172,1239 'figure':330,1077 'filling':703 'financial':255 'first':152,164,252,660,1385 'flew':460 'flight':359 'follow':839,1670 'followed':1405 'for':16,36,54,76,94,150,162,262,289,309,365,391,465,473,518,606,645,679,707,868,923,1085,1112,1193,1430,1543,1641 'formal':1316,1326,1369 'forward':1708 'fostered':781 'friend':650,1235 'from':139,154,345,461,537,591,818,1486,1593 'frontend':1039 'full':97,1089,1195 'full-stack':1088 'fun':145,1634 'gave':1411,1657 'general':1469 'get':373,725,905,1005,1248 'getting':237,466,736,1623,1635 'github.com':689 'github.com/scriptnull/yali':688 'give':1433 'giving':966 'go':178,300,1436 'going':271,1572 'good':1127,1222 'got':9,287,487,674,994 'gradually':1000 'great':1581 'greatly':1618 'group':130 'guess':481,549 'had':257,494,701,1258 'haha':156,448,1159,1330 'haha.clearing':571 'half':42,100 'happen':87,580 'happened':730 'happy':4 'has':194,207,508,895,948 'have':298,324,348,371,387,442,532,631,813,830,939,1310,1336 'have.apart':344 'haven':57,435,1025 'having':1220,1599 'he':516,1093,1167 'hear':1129 'heard':59,159 'help':1291,1619 'helpful':1218,1412 'her':773 'here':567,1678 'here.get':1461 'his':800 'hmm':852 'hope':626,1556,1654 'hoping':613 'hour':170 'how':1526 'i':2,8,158,166,189,222,246,279,313,317,329,338,343,347,369,426,434,441,499,548,564,600,611,673,682,700,714,722,768,838,849,858,872,900,918,928,935,953,976,985,993,998,1015,1024,1059,1065,1068,1080,1131,1160,1188,1200,1236,1257,1265,1272,1294,1309,1335,1374,1387,1424,1439,1449,1455,1488,1549,1595,1693 'idea':1660 'identify':1101 'if':215,521,942,1079,1106,1297,1582,1686 'impossibility':546 'improve':1275,1509 'in':79,88,218,231,356,449,581,695,802,972,1140,1219,1268,1314,1331,1340,1468,1554,1574,1588,1604,1621,1679 'india':446,538 'innovations':1571 'inr':406 'inspired':691,758 'interesting':797 'internals':1475 'internet':569 'interview':573,968,983,989,1226,1261,1264,1303,1308,1402,1419 'interviewer':1404 'interviewers':1215 'interviews':225,887,1643 'interviewsthe':1206 'into':11,1250 'involves':1645 'is':52,66,108,135,185,254,306,416,422,527,542,559,566,627,641,743,788,821,917,944,1096,1381,1421,1515,1633 'it':22,61,107,186,193,242,383,399,415,432,541,550,632,636,680,728,778,794,894,943,947,997,1095,1130,1155,1318,1380,1431,1434,1558,1578,1616,1632,1692 'it.inspirationi':752 'itself':447 'job':282,857 'jobs':454,927,933 'journey':1663,1677 'journey.what':51 'joy':846 'just':323,400,596,977,1278,1353,1377,1390,1598,1622 'kelley':786 'key':1483 'key-value':1482 'kind':779,1246 'know':429,439,1348,1637 'knowing':147 'knowledge':1370 'last':1255 'latest':1021 'learn':117,138 'learning':874,876,1071 'least':386 'length':96 'less':1368 'letters':792 'level':1532 'life':26,729 'like':168,318,638,731,937,1032,1320,1490 'likes':1105 'link':183 'lisp':686 'little':350,791,898,1035 'live':510 'living':363 'loan':292,375 'loans':305 'localhostboth':805 'locking':1533 'long':863 'long-needed':862 'looking':1707 'losing':855 'lost':280 'lot':761,823,925,1569 'low':245 'lsm':1524 'lurking':230 'made':1154 'make':326,335 'makes':635 'making':1001 'me':236,607,646,759,782,916,971,1054,1249,1292,1406,1620 'mean':950 'means':312 'meetup':477 'mentioned':190 'messaged':1053 'microservice':1365 'middle':1270 'might':602,1445,1559 'mine':199 'mini':104 'money':336,342 'months':284,310,975,1143 'moratorium':288 'more':1111,1150,1228,1600 'more.andrew':785 'most':455,877 'mostly':1070 'much':136,430,438 'my':34,50,281,452,457,568,649,734,856,869,1002,1191,1204,1332,1503,1510,1624,1642,1662,1676,1684,1701 'myself':1276 'nabarun':1047 'native':1612 'need':565 'needed':864 'never':443,1153,1311 'new':80,1281 'next':420,870,1171,1198 'nice':209,1097 'no':744 'non':1611 'non-native':1610 'north':445 'not':307,483,543,585,885 'now':322,409,556,851 'now.trying':43 'odds':234 'of':33,60,131,146,160,198,235,291,352,362,405,451,456,478,506,671,711,733,780,806,810,824,847,878,884,907,926,961,996,1135,1229,1247,1364,1476,1570,1614,1675 'off':590 'often':769 'on':843,1009,1055,1162,1176,1371,1395,1573,1597,1672,1683 'one':32,253,450,732,982,1044,1103,1149,1194,1639 'ones':492 'online':414,561,1123 'online.retreats':86 'only':623,981 'operating':85 'or':376,384,1087,1286 'out':331,906,995,1078,1084 'over':652,1169,1183 'overcome':1302 'overcoming':575 'pair':697,1178,1306,1312,1372,1396,1400 'paired':1337 'pairing':1352 'pandemic':277 'panicked':1267 'papers':1494 'parse':687 'part':1363 'passing':886 'past':264 'pay':304 'paying':1033 'people':132,459,533,757,828,963,1282,1355,1603 'people.next':1638 'person':486 'personally':608 'physical':624 'pick':114 'place':472 'plan':1596 'planning':1450 'post':1656 'postgres':1528 'posts':776 'preparation':1386 'prepare':1640 'preparing':867 'presentation':801 'previous':453,1333 'probably':368 'problem':605 'process':211,1208 'production':1562 'production-ready':1561 'productive.the':913 'programmed':1313 'programmers':77 'programming':698,1179,1307,1373,1397,1401 'project':1553 'protocols':1538 'quite':24 'rate':404 'rc':30,53,149,161,203,206,536,558,616,640,665,708,803,811,1443,1606 'react':1041 'read':1472,1492 'reading':171,501,772,1391 'ready':1563 'really':936,1104 'reason':787 'recommend':1295 'recurse':1,13,64,765,1116,1138,1666 'recursing':1710 'redux':1042 'rejection':946 'remember':500 'repayment':293 'research':1493 'rest':1674 'retreat':75 'reviewed':1201 'right':321,717,750,1416 'roadblock':555 'roles':1091 'rough':899 'row':1531 'row-level':1530 'run':93 'running':529,560,622 's':23,393,804 'sabbatical':749 'said':651,1066,1094 'same':1013 'save':389 'say':754 'scare':588 'scratch':1487 'see':401,799 'seem':637,835 'seems':1319 'selectively':930 'self':69,110 'self-directed':68,109 'server':1182,1546 'setup':1317,1327 'share':45 'should':213,579,753,1081 'shouldn':1322 'side':127 'since':515,530 'single':485 'sitting':1356 'situation':278 'situations':256 'skills':1512 'slowly':902 'smooth':1422 'so':112,133,177,205,294,540,633,675,1271,1366,1383,1454 'software':260 'solidify':1502 'some':497,597,1113 'someday':1564 'somehow':617 'something':951,1587 'source':1497 'space':1576 'speaker':1613 'speech':1627 'speed':1630 'spend':339 'spent':167 'sponsorship':377 'spot':1591 'spots.overall':1417 'stack':1090 'started':683,702 'starting':903 'starts':1703 'steal':143 'steps':1003 'still':228,528,552 'stop':716 'store':1485 'stress':296,1287 'structure':1648 'stuff':816,826,1651 'submitted':1203 'such':1045 'sunday':1196 'super':796,1217 'sure':327 'sweet':1590 'system':1652 'systems':1465 't':58,142,428,436,920,955,1026,1323,1346 'take':747 'taking':860 'talking':1279 'talks':1241 'task':694,1180 'tasks':699 'team':458 'technical':1231,1260 'ted':1240 'tell':248 'textdreams':655 'that':7,119,192,328,346,410,502,557,599,610,634,681,755,819,827,861,934,1023,1067,1243,1263,1343,1349,1438,1460,1557,1594 'the':12,17,63,91,144,151,163,182,202,224,233,251,263,275,295,341,357,402,411,419,475,479,488,491,504,513,525,562,572,669,704,764,879,882,908,932,959,962,988,991,1010,1012,1020,1038,1157,1170,1177,1197,1214,1224,1251,1254,1269,1305,1384,1399,1403,1408,1415,1418,1442,1474,1516,1536,1552,1555,1589,1605,1665,1673,1699 'their':173,696 'them':807,1296 'them.i':140 'then':1092,1186 'there':134,226,308,364,742,820,1187,1321,1453,1565 'these':577,594,789,889,973,1063,1141 'they':620,1118 'thing':630,914 'things':48,598,1075 'think':1164 'thinking':1134,1689 'this':1124,1393,1575,1644,1655,1680 'those':55,840,1288 'though':221 'thought':601,1625 'three':790 'through':1392,1407 'tickets':360 'time':120,153,165,514,880,960,1014,1114,1151,1256 'timeline':584 'timer':511,526 'times':712,892 'to':5,44,116,137,200,240,270,272,299,301,303,319,325,334,372,378,381,388,394,397,407,463,470,587,614,662,664,668,677,724,727,746,762,783,798,836,904,931,938,949,957,970,1004,1018,1029,1037,1050,1062,1076,1098,1109,1128,1137,1156,1163,1211,1245,1274,1301,1376,1428,1432,1451,1458,1471,1491,1501,1508,1629,1636,1664,1690,1696,1709 'together':1052,1357 'told':1168 'tomorrow':1704 'took':1209 'totally':417 'travel':354,424,468 'traveled':437 'tree':1521,1525 'trends':1022 'truefirst':658 'try':1115,1457 'trying':586,1017,1083,1300,1470 'twitter':844,1056,1685 'two':756,974,1354 'uncertain':891 'uncertainties':229,578 'uncertainty':421 'understand':1378 'understanding':1504 'up':390,771,1031,1061,1210,1473,1585,1628,1671 'updates':841 'usa':358 'usd':408 'used':1049,1539 'usual':1146 'usually':842,921 'value':1484 'varying':95 'very':244,349 'videos':1289 'visa':425,469,489,520,563 'visit':1036 'visited':444,496 'want':723,956,1108 'wanted':1273 'wanting':1427 'was':31,243,612,795,859,873,901,999,1016,1069,1126,1132,1189,1227,1389 'waste':958 'watched':1237 'way':333,745,1342,1700 'we':113,121,531,1048,1344,1350,1583 'week':106 'weekend':1185 'weeks':99,102,367,1213 'well':853 'went':1161 'were':227,621,1216,1351 'what':115,440,482,1058,1102,1166,1379,1447,1514,1534 'whatever':316 'whatsapp':654 'when':157,619,721 'which':311 'who':56,493,812,829,964 'why':184,204,250 'will':122,247,1456 'with':274,881,915,1074,1233,1280,1338,1367,1463,1602 'without':1283 'won':141 'wondering':524 'work':273,302,1051 'worked':1175 'working':124 'worknow':1437 'workplaces':1334 'would':370,715,1489,1579,1617 'write':1499,1506 'writing':684,1190 'written':705 'wrote':1147 'www.recurse.com':176 'yay':1705 'year':39,392 'year.it':1125 'years':266 'yet':62 'york':81 'you':155,212,216,249,522,589,1107,1298,1444,1658,1668,1687,1695 'zig':793 'zone':910,1252		
1080	PandaDoc employees arrested in Belarus after founders protest against violence	{"ver":2,"uid":1,"hash":"SHA1:7749a72dac48093e9357d4d79fe6d28aa10a555e"}	https://savepandadoc.org/en/	2020-09-08 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24406366"> https://news.ycombinator.com/item?id=24406366 </a>	7e4d55a00d0b6643fb8bafa64aedbe722eb3cd72	\N	f	2020-09-08 19:10:00	2020-09-10 05:10:14.197839	0			'/item?id=24406366':14 'arrest':3 'belarus':5 'comment':11 'employe':2 'founder':7 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24406366':12 'pandadoc':1 'protest':8 'violenc':10	zh	perch56
1075	Controllable Video Sprites That Appear Like Professional Tennis Players	{"ver":2,"uid":1,"hash":"SHA1:915f170f0b0cc450f0fdb19cd865fd00cf44709d"}	https://cs.stanford.edu/~haotianz/research/vid2player/	2020-09-08 13:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24398474"> https://news.ycombinator.com/item?id=24398474 </a>	29cfa2eb7c76c85b8a6c570141c3e0937cc1cae2	\N	f	2020-09-08 13:10:00	2020-09-10 05:10:14.215898	0			'/item?id=24398474':13 'appear':5 'comment':10 'control':1 'like':6 'news.ycombinator.com':12 'news.ycombinator.com/item?id=24398474':11 'player':9 'profession':7 'sprite':3 'tenni':8 'video':2	zh	tosh
755	[推荐] 爱奇艺数据中台建设组合拳：日志投递、统一数仓、大数据平台	{"ver":2,"uid":1,"hash":"SHA1:1797a9f482bfb4fe88be24fc6cadb99a1f8db906"}	https://toutiao.io/k/yk3b77w	2020-09-02 20:10:09	[推荐] 爱奇艺数据中台建设组合拳：日志投递、统一数仓、大数据平台	7cea8f536533727939e9ca68e36d3f65320d28b0	\N	f	2020-08-30 02:10:00	2020-09-10 05:10:14.639798	0			'大数据平台':5,10 '推荐':1,6 '日志投递':3,8 '爱奇艺数据中台建设组合拳':2,7 '统一数仓':4,9	zh	
1081	Ad Fraud on LinkedIn	{"ver":2,"uid":1,"hash":"SHA1:1e377265e97d7b0fd87550b35fa16483cf022749"}	https://www.samueljscott.com/2020/09/08/linkedin-ad-fraud/	2020-09-08 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24407432"> https://news.ycombinator.com/item?id=24407432 </a>	81fac7cbebbd984c01444e22e9525c001718b0a8	\N	f	2020-09-08 19:10:00	2020-09-10 05:10:14.185879	0			'/item?id=24407432':8 'ad':1 'comment':5 'fraud':2 'linkedin':4 'news.ycombinator.com':7 'news.ycombinator.com/item?id=24407432':6	zh	sbachman
1110	I still use WordPerfect 6.2 for DOS	{"ver":2,"uid":1,"hash":"SHA1:90838aa777ea1580bd24e5559b210c5794436dea"}	https://news.ycombinator.com/item?id=24411333	2020-09-09 13:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24413394"> https://news.ycombinator.com/item?id=24413394 </a>	fd2a966715c8c8c8b4491b5efd2431879bc1268c	\N	f	2020-09-09 13:10:00	2020-09-10 05:10:14.20385	0			'/item?id=24413394':11 '6.2':5 'comment':8 'dos':7 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24413394':9 'still':2 'use':3 'wordperfect':4	zh	newducks
1111	AMD PSB Vendor Locks EPYC CPUs for Enhanced Security at a Cost	{"ver":2,"uid":1,"hash":"SHA1:781f2c51b84d9ff5bc5091d39295c5f4f7f40f63"}	https://www.servethehome.com/amd-psb-vendor-locks-epyc-cpus-for-enhanced-security-at-a-cost/	2020-09-09 13:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24416005"> https://news.ycombinator.com/item?id=24416005 </a>	47f3af2a8e5d8a32255e237c88ffd9603d500c26	\N	f	2020-09-09 13:10:00	2020-09-10 05:10:14.217912	0			'/item?id=24416005':16 'amd':1 'comment':13 'cost':12 'cpus':6 'enhanc':8 'epyc':5 'lock':4 'news.ycombinator.com':15 'news.ycombinator.com/item?id=24416005':14 'psb':2 'secur':9 'vendor':3	zh	virgulino
217	Running Go Programs In IronWorker	{"ver":2,"uid":1,"hash":"SHA1:715b150ff784696d2ba7de318263d87c754226d3"}	https://www.ardanlabs.com/blog/2013/09/running-go-programs-in-ironworker.html	2013-09-07 00:00:00	Introduction\nIron.io has a product called IronWorker which provides a task oriented Linux container that you can run your programs inside. If you are not sure what I mean, think of this as having a temporary Linux virtual machine instantly available for your personal but short term use. IronWorker allows you to load your binaries, code files, support files, shells scripts and just about anything else you may need to run your program in the container.	00efe34d18893e410e6e8cb2856ca159eff7e22f	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.57536	0			'allow':55 'anyth':70 'avail':46 'binari':60 'call':11 'code':61 'contain':19,81 'els':71 'file':62,64 'go':2 'insid':26 'instant':45 'introduct':6 'iron.io':7 'ironwork':5,12,54 'linux':18,42 'load':58 'machin':44 'may':73 'mean':34 'need':74 'orient':17 'person':49 'product':10 'program':3,25,78 'provid':14 'run':1,23,76 'script':66 'shell':65 'short':51 'support':63 'sure':31 'task':16 'temporari':41 'term':52 'think':35 'use':53 'virtual':43	en	
1084	Vitamin D, part 3 – The Evidence	{"ver":2,"uid":1,"hash":"SHA1:fa7be14e972b7b97c79a7d51eceeae6e1631ac92"}	https://www.devaboone.com/post/vitamin-d-part-3-the-evidence?postId=5f4e8bf673d853002ded6cd3	2020-09-08 19:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24408511"> https://news.ycombinator.com/item?id=24408511 </a>	4d352d38e3c8a193949687adf84bc6b6c00b4502	\N	f	2020-09-08 19:10:00	2020-09-09 11:10:12.869419	0			'/item?id=24408511':10 '3':4 'comment':7 'd':2 'evid':6 'news.ycombinator.com':9 'news.ycombinator.com/item?id=24408511':8 'part':3 'vitamin':1	zh	usefulcat
1082	GDPR Violation: Scribd acquires PII on 500M users in a deal with LinkedIn	{"ver":2,"uid":1,"hash":"SHA1:59300d05cd7846b4c408bca1b96504dab6effad9"}	https://thehftguy.com/2020/09/01/gdpr-violation-scribd-acquires-pii-on-500m-users-in-a-deal-with-linkedin/	2020-09-08 19:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24406611"> https://news.ycombinator.com/item?id=24406611 </a>	9acedbdd8a5a9af22e03b55624a58fbb31479f0b	\N	f	2020-09-08 19:10:00	2020-09-10 05:10:14.221892	0			'/item?id=24406611':17 '500m':7 'acquir':4 'comment':14 'deal':11 'gdpr':1 'linkedin':13 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24406611':15 'pii':5 'scribd':3 'user':8 'violat':2	zh	user5994461
1083	On finally learning to program at the age of 40	{"ver":2,"uid":1,"hash":"SHA1:bf71838889761632af09d76c51325ff3be28881f"}	https://github.com/Dhghomon/programming_at_40/blob/master/README.md	2020-09-08 19:10:11	Comments: <a href="https://news.ycombinator.com/item?id=24404628"> https://news.ycombinator.com/item?id=24404628 </a>	c63bdf55c6350e7e2681117bfd6cc011f989ce38	\N	f	2020-09-08 19:10:00	2020-09-09 15:10:13.882524	0			'/item?id=24404628':14 '40':10 'age':8 'comment':11 'final':2 'learn':3 'news.ycombinator.com':13 'news.ycombinator.com/item?id=24404628':12 'program':5	zh	Stratoscope
221	Collections Of Unknown Length in Go	{"ver":2,"uid":1,"hash":"SHA1:5397808d5557e59be44af1dc6dc350bea6439867"}	https://www.ardanlabs.com/blog/2013/08/collections-of-unknown-length-in-go.html	2013-08-26 00:00:00	If you are coming to Go after using a programming language like C# or Java, the first thing you will discover is that there are no traditional collection types like List and Dictionary. That really threw me off for months. I found a package called container/list and gravitated to using it for almost everything.\nSomething in the back of my head kept nagging me. It didn&rsquo;t make any sense that the language designers would not directly support managing a collection of unknown length.	6b9d0b8dfafc4e1aa70508a85443211a4a045e17	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.582922	0			'almost':59 'back':64 'c':19 'call':51 'collect':1,34,87 'come':10 'container/list':52 'design':80 'dictionari':39 'didn':72 'direct':83 'discov':27 'everyth':60 'first':23 'found':48 'go':6,12 'gravit':54 'head':67 'java':21 'kept':68 'languag':17,79 'length':4,90 'like':18,36 'list':37 'make':74 'manag':85 'month':46 'nag':69 'packag':50 'program':16 'realli':41 'sens':76 'someth':61 'support':84 'thing':24 'threw':42 'tradit':33 'type':35 'unknown':3,89 'use':14,56 'would':81	en	
224	Using Time, Timezones and Location in Go	{"ver":2,"uid":1,"hash":"SHA1:dc6ca6a428bbe5bbd797b2d3923619ac6c5e4aca"}	https://www.ardanlabs.com/blog/2013/08/using-time-timezones-and-location-in-go.html	2013-08-08 00:00:00	I ran into a problem today. I was building code to consume NOAA&rsquo;s tide station XML document and quickly realized I was in trouble. Here is a small piece of that XML document:\n&lt;timezone&gt;LST/LDT&lt;/timezone&gt;\n&lt;item&gt;\n&lt;date&gt;2013/01/01&lt;/date&gt;\n&lt;day&gt;Tue&lt;/day&gt;\n&lt;time&gt;02:06 AM&lt;/time&gt;\n&lt;predictions_in_ft&gt;19.7&lt;/predictions_in_ft&gt;\n&lt;predictions_in_cm&gt;600&lt;/predictions_in_cm&gt;\n&lt;highlow&gt;H&lt;/highlow&gt;\n&lt;/item&gt; If you notice the timezone tag, it states the time is in Local Standard Time / Local Daylight Time. This is a real problem because I need to store this data in UTC.	17c7adb730d10dd47babcc5ee6273d35f41f8f05	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.588642	0			'/date':48 '/day':51 '/highlow':69 '/item':70 '/predictions_in_cm':66 '/predictions_in_ft':61 '/time':56 '/timezone':44 '02':53 '06':54 '19.7':60 '2013/01/01':47 '600':65 'build':16 'cm':64 'code':17 'consum':19 'data':100 'date':46 'day':49 'daylight':87 'document':25,41 'ft':59 'go':7 'h':68 'highlow':67 'item':45 'local':83,86 'locat':5 'lst/ldt':43 'need':96 'noaa':20 'notic':73 'piec':37 'predict':57,62 'problem':12,93 'quick':27 'ran':9 'real':92 'realiz':28 'small':36 'standard':84 'state':78 'station':23 'store':98 'tag':76 'tide':22 'time':2,52,80,85,88 'timezon':3,42,75 'today':13 'troubl':32 'tue':50 'use':1 'utc':102 'xml':24,40	en	
985	One day once content	{"ver":2,"uid":1,"hash":"SHA1:36f01ecbec98c820bfeb6879b7acea964ca2f964"}	https://rustcc.cn/article?id=073ba1e1-7b84-4b55-a837-1ca94c1c5b15	2020-07-10 13:23:08	<h1>Cargo</h1>\n<p><code>main.rs   lib.rs  other.rs  another.rs</code></p>\n<p>-lib.rs</p>\n<pre><code>pub mod other;\npub mod another; \n</code></pre>\n<p>-main.rs</p>\n<pre><code>// Cargo.toml name="xxx"\nuse xxx::{...*...};\n</code></pre>\n<p>other.rs</p>\n<pre><code>//if use another.rs\nuse super::another...\n\n</code></pre>\n<h2>about test</h2>\n<p>/test/test.rs</p>\n<pre><code>use xxx::...\n</code></pre>\n<p><em><strong>The  <code>lib.rs</code>  and  <code>main.rs</code>  files are two independent entry points for your package.</strong></em></p>\n<p><a href="https://stackoverflow.com/questions/57756927/rust-modules-confusion-when-there-is-main-rs-and-lib-rs" rel="noopener noreferrer">more</a></p>\n<p><a href="http://www.sheshbabu.com/posts/rust-module-system/" rel="noopener noreferrer">Read more: Clear explanation of Rust’s module system </a></p>\n	7b9ee39d50dcb66287e370d25786fef5b21e5bae	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.206323	0			'/if':24 '/test/test.rs':32 'about':30 'and':37 'another':16,29 'another.rs':9,26 'are':40 'cargo':5 'cargo.toml':18 'clear':51 'content':4 'day':2 'entry':43 'explanation':52 'files':39 'for':45 'independent':42 'lib.rs':7,10,36 'main.rs':6,17,38 'mod':12,15 'module':56 'more':48,50 'name':19 'of':53 'once':3 'one':1 'other':13 'other.rs':8,23 'package':47 'points':44 'pub':11,14 'read':49 'rust':54 's':55 'super':28 'system':57 'test':31 'the':35 'two':41 'use':21,25,27,33 'xxx':20,22,34 'your':46		
1085	FTC Is Investigating Intuit over TurboTax Practices	{"ver":2,"uid":1,"hash":"SHA1:b71ec47ba8dd22cf19a7ac5d1a1e87e340911c25"}	https://www.propublica.org/article/the-ftc-is-investigating-intuit-over-turbotax-practices	2020-09-08 21:10:09	Comments: <a href="https://news.ycombinator.com/item?id=24409093"> https://news.ycombinator.com/item?id=24409093 </a>	cca6c4a295816ef6759049262f2d893b28cc8f85	\N	f	2020-09-08 21:10:00	2020-09-10 05:10:14.191768	0			'/item?id=24409093':11 'comment':8 'ftc':1 'intuit':4 'investig':3 'news.ycombinator.com':10 'news.ycombinator.com/item?id=24409093':9 'practic':7 'turbotax':6	zh	justinpropub
225	Gustavo's IEEE-754 Brain Teaser	{"ver":2,"uid":1,"hash":"SHA1:f40b85967849e37acfde5f9cdd4b16cbbf639737"}	https://www.ardanlabs.com/blog/2013/08/gustavos-ieee-754-brain-teaser.html	2013-08-05 00:00:00	Back in June, Gustavo Niemeyer posted the following question on his Labix.org blog:\nAssume uf is an unsigned integer with 64 bits that holds the IEEE-754 representation for a binary floating point number of that size.\nHow can you tell if uf represents an integer number?\nI can&rsquo;t talk for you, but I write business applications. I just don&rsquo;t have the background to quickly knock out an answer for a question like this.	08a56158c85052fbf05babef75cb52da11230b5d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.590613	0			'-754':4,33 '64':27 'answer':77 'applic':64 'assum':20 'back':7 'background':71 'binari':37 'bit':28 'blog':19 'brain':5 'busi':63 'float':38 'follow':14 'gustavo':1,10 'hold':30 'ieee':3,32 'integ':25,52 'june':9 'knock':74 'labix.org':18 'like':81 'niemey':11 'number':40,53 'point':39 'post':12 'question':15,80 'quick':73 'repres':50 'represent':34 'size':43 'talk':57 'teaser':6 'tell':47 'uf':21,49 'unsign':24 'write':62	en	
26	Be wary of functions which take several parameters of the same type	{"ver":2,"uid":1,"hash":"SHA1:22a4be5aeef08c3e97787d5f1b633d65bce56e55"}	https://dave.cheney.net/2019/09/24/be-wary-of-functions-which-take-several-parameters-of-the-same-type	2019-09-24 10:20:40	\n<blockquote class="wp-block-quote is-style-large"><p>APIs should be easy to use and hard to misuse.</p><cite>— Josh Bloch</cite></blockquote>\n\n\n\n<p>A good example of a simple looking, but hard to use correctly, API is one which takes two or more parameters of the same type. Let’s compare two function signatures:</p>\n\n\n\n<pre class="wp-block-code"><code>func Max(a, b int) int\nfunc CopyFile(to, from string) error</code></pre>\n\n\n\n<p>What’s the difference between these functions? Obviously one returns the maximum of two numbers, the other copies a file, but that’s not the important thing.</p>\n\n\n\n<pre class="wp-block-code"><code>Max(8, 10) // 10\nMax(10, 8) // 10</code></pre>\n\n\n\n<p><code>Max</code> is&nbsp;<em>commutative</em>; the order of its parameters does not matter. The maximum of eight and ten is ten regardless of if I compare eight and ten or ten and eight.</p>\n\n\n\n<p>However, this property does not hold true for&nbsp;<code>CopyFile</code>.</p>\n\n\n\n<pre class="wp-block-code"><code>CopyFile("/tmp/backup", "presentation.md")\nCopyFile("presentation.md", "/tmp/backup")</code></pre>\n\n\n\n<p>Which one of these statements made a backup of your presentation and which one overwrite your presentation with last week’s version? You can’t tell without consulting the documentation. A code reviewer cannot know if you’ve got the order correct without consulting the documentation.</p>\n\n\n\n<p>The general advice is to try to avoid this situation. Just like long parameter lists, indistinct parameter lists are a design smell.</p>\n\n\n\n<h2>A challenge</h2>\n\n\n\n<p>When this situation is unavoidable my solution to this class of problem is to introduce a helper type which will be responsible for calling <code>CopyFile</code> correctly.</p>\n\n\n\n<pre class="wp-block-code"><code>type Source string\n\nfunc (src Source) CopyTo(dest string) error {\n\treturn CopyFile(dest, string(src))\n}\n\nfunc main() {\n\tvar from Source = "presentation.md"\n\tfrom.CopyTo("/tmp/backup")\n}</code></pre>\n\n\n\n<p>In this way <code>CopyFile</code> is always called correctly and, given its poor API can possibly be made private, further reducing the likelihood of misuse.</p>\n\n\n\n<p>Can you suggest a better solution?</p>\n	f41c2d9a50e0b9617a5f712763eb04ac57ff10e2	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:09.238172	0			'/tmp/backup':144,148,267 '10':97,98,100,102 '8':96,101 'a':25,29,58,86,155,179,214,217,234,295 'advice':197 'always':273 'and':19,118,128,132,160,276 'api':37,280 'apis':13 'are':213 'avoid':202 'b':59 'backup':156 'be':1,15,239,283 'better':296 'between':72 'bloch':24 'but':32,88 'called':274 'calling':242 'can':172,281,292 'cannot':182 'challenge':218 'class':228 'code':180 'commutative':105 'compare':52,126 'consulting':176,192 'copies':85 'copyfile':63,142,143,146,243,256,271 'copyto':251 'correct':190 'correctly':36,244,275 'design':215 'dest':252,257 'difference':71 'documentation':178,194 'does':111,137 'easy':16 'eight':117,127,133 'error':67,254 'example':27 'file':87 'for':141,241 'from':65,263 'from.copyto':266 'func':56,62,248,260 'function':54 'functions':4,74 'further':286 'general':196 'given':277 'good':26 'got':187 'hard':20,33 'helper':235 'hold':139 'however':134 'i':125 'if':124,184 'important':93 'in':268 'indistinct':210 'int':60,61 'introduce':233 'is':38,104,120,198,222,231,272 'its':109,278 'josh':23 'just':205 'know':183 'last':167 'let':50 'like':206 'likelihood':289 'lists':209,212 'long':207 'looking':31 'made':154,284 'main':261 'matter':113 'max':57,95,99,103 'maximum':79,115 'misuse':22,291 'more':44 'my':224 'not':91,112,138 'numbers':82 'obviously':75 'of':3,9,28,46,80,108,116,123,151,157,229,290 'one':39,76,150,162 'or':43,130 'order':107,189 'other':84 'overwrite':163 'parameter':208,211 'parameters':8,45,110 'poor':279 'possibly':282 'presentation':159,165 'presentation.md':145,147,265 'private':285 'problem':230 'property':136 'reducing':287 'regardless':122 'responsible':240 'return':255 'returns':77 'reviewer':181 's':51,69,90,169 'same':11,48 'several':7 'should':14 'signatures':55 'simple':30 'situation':204,221 'smell':216 'solution':225,297 'source':246,250,264 'src':249,259 'statements':153 'string':66,247,253,258 'suggest':294 't':173 'take':6 'takes':41 'tell':174 'ten':119,121,129,131 'that':89 'the':10,47,70,78,83,92,106,114,177,188,193,195,288 'these':73,152 'thing':94 'this':135,203,220,227,269 'to':17,21,34,64,199,201,226,232 'true':140 'try':200 'two':42,53,81 'type':12,49,236,245 'unavoidable':223 'use':18,35 'var':262 've':186 'version':170 'wary':2 'way':270 'week':168 'what':68 'when':219 'which':5,40,149,161,237 'will':238 'with':166 'without':175,191 'you':171,185,293 'your':158,164	en	Dave Cheney
241	Installing Go, Gocode, GDB and LiteIDE	{"ver":2,"uid":1,"hash":"SHA1:ab4d613becec70b2f5347c930a5d41ed158998d2"}	https://www.ardanlabs.com/blog/2013/06/installing-go-gocode-gdb-and-liteide.html	2013-06-02 00:00:00	Check out my new installtion document:\nhttps://ardanlabs.com/blog/2016/05/installing-go-and-your-workspace.html\nI removed the sections about gocode and GDB. These are not necessary any longer. I also added links for more editors.\nWindows\nThis is a great post by Wade Wegner for installing Go on your Windows Machine:\nhttp://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/\nMac OS XThe following instructions will guide you through installing Go on your Mac.\nStep 1: Download Go Open your favorite browser and go to the following website:	ff073d54c1e305fe02b996fca9dfd0e0f9cdd35c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.621656	0			'/2014/12/easy-go-programming-setup-for-windows/':55 '/blog/2016/05/installing-go-and-your-workspace.html':15 '1':71 'ad':32 'also':31 'ardanlabs.com':14 'ardanlabs.com/blog/2016/05/installing-go-and-your-workspace.html':13 'browser':77 'check':7 'document':12 'download':72 'editor':36 'favorit':76 'follow':59,82 'gdb':4,23 'go':2,48,66,73,79 'gocod':3,21 'great':41 'guid':62 'instal':1,47,65 'installt':11 'instruct':60 'link':33 'liteid':6 'longer':29 'mac':56,69 'machin':52 'necessari':27 'new':10 'open':74 'os':57 'post':42 'remov':17 'section':19 'step':70 'wade':44 'websit':83 'wegner':45 'window':37,51 'www.wadewegner.com':54 'www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/':53 'xthe':58	en	
982	【Rust日报】2020-07-25 - Rust 新闻/聚合	{"ver":2,"uid":1,"hash":"SHA1:a4eeca75371ee8c010764927e9db9a23f38ee1dc"}	https://rustcc.cn/article?id=e89fe8c8-77ef-46ea-8864-9b0ea0586fcc	2020-07-25 10:29:56	<h3>用rust重写web博客</h3>\n<p>你正在阅读的这篇文章就是这个web站点用rust重新实现的结果，这归功于大量的努力、调研和咨询。如果有人想要引用go的原始代码实现，也可以从这里得到。</p>\n<p>如果你发现关于<code>RSSFeed</code>、<code>AtomFeed</code>和<code>JSONFeed</code>的任何问题，请尽快告诉我让我可以修复这些。</p>\n<p><a href="https://christine.website/blog/site-update-2020-07-16" rel="noopener noreferrer">文章链接</a></p>\n<h3>从LLVM IR编译《我的世界》数据包</h3>\n<p>Langcraft是一个针对Minecraft数据包的代码生成器。目前Langcraft可以没有问题的运行相当多的位码文件,该项目有一个内置支持断点(ish)和检查寄存器/内存值的命令解释器用于调试。</p>\n<p>所有生成的数据包可以在低于五分钟的时间内，运行在一个真正的Minecraft Java 1.16+世界中。</p>\n<p><a href="https://github.com/SuperTails/langcraft" rel="noopener noreferrer">github链接</a></p>\n<h3>响应式IDE的三种架构</h3>\n<p><code>rust-analyzer</code>是Rust编程语言的一个新IDE后端。在这篇文章中，我们将用三种方式学习如何制作一个简洁的IDE。</p>\n<p>它的灵感来自于一篇关于使用<code>datalog</code>进行语义分析的优秀文章。这篇文章只描述了最高级别的架构，要实现一个成熟的IDE还需要做更多的工作。</p>\n<p><a href="https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html" rel="noopener noreferrer">文章链接</a></p>\n<h3>RustScan:一个Rust实现的更快的Nmap</h3>\n<p>将17分钟的nmap扫描变为19秒。使用Rustscan快速找到所有打开的端口，自动将它们导入Nmap。</p>\n<p><a href="https://github.com/brandonskerritt/RustScan" rel="noopener noreferrer">github链接</a></p>\n<p>From 日报小组 <a href="https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" rel="noopener noreferrer">TOM</a></p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>\n<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>\n</ul>\n	bbb498549f16e5a87fc4481b939a9e5fff1c8501	\N	f	2020-09-06 06:10:00	2020-09-10 05:10:03.199007	0			'-07':3 '-25':4 '1.16':31 '2020':2 'analyzer是rust编程语言的一个新ide后端':37 'atomfeed和jsonfeed的任何问题':15 'from':50 'github链接':33,49 'ir编译':19 'ish':25 'java':30 'langcraft是一个针对minecraft数据包的代码生成器':22 'rust':5,36 'rust-analyzer是rust编程语言的一个新ide后端':35 'rustcc论坛':54 'rustscan':44 'rust日报':1 'rust语言中文社区':57 'tom':52 '一个rust实现的更快的nmap':45 '世界中':32 '也可以从这里得到':13 '从llvm':18 '你正在阅读的这篇文章就是这个web站点用rust重新实现的结果':9 '使用rustscan快速找到所有打开的端口':47 '内存值的命令解释器用于调试':27 '和检查寄存器':26 '响应式ide的三种架构':34 '在这篇文章中':38 '如果你发现关于rssfeed':14 '如果有人想要引用go的原始代码实现':12 '它的灵感来自于一篇关于使用datalog进行语义分析的优秀文章':40 '将17分钟的nmap扫描变为19秒':46 '微信公众号':56 '我们将用三种方式学习如何制作一个简洁的ide':39 '我的世界':20 '所有生成的数据包可以在低于五分钟的时间内':28 '支持rss':55 '数据包':21 '文章链接':17,43 '新闻':6 '日报小组':51 '用rust重写web博客':8 '目前langcraft可以没有问题的运行相当多的位码文件':23 '社区学习交流平台订阅':53 '聚合':7 '自动将它们导入nmap':48 '要实现一个成熟的ide还需要做更多的工作':42 '该项目有一个内置支持断点':24 '请尽快告诉我让我可以修复这些':16 '调研和咨询':11 '运行在一个真正的minecraft':29 '这归功于大量的努力':10 '这篇文章只描述了最高级别的架构':41		
1113	Amazon demands we correct an article refering to an Echo as a “microphone”	{"ver":2,"uid":1,"hash":"SHA1:cdef9ff85fbd5782de4867a25374d13f10e0ade6"}	https://nitter.net/jason_koebler/status/1303383712160190469#m	2020-09-09 19:10:10	Comments: <a href="https://news.ycombinator.com/item?id=24418854"> https://news.ycombinator.com/item?id=24418854 </a>	df596a68b17d04714a543b0f5fe115fddf466532	\N	f	2020-09-09 19:10:00	2020-09-10 05:10:14.225641	0			'/item?id=24418854':17 'amazon':1 'articl':6 'comment':14 'correct':4 'demand':2 'echo':10 'microphon':13 'news.ycombinator.com':16 'news.ycombinator.com/item?id=24418854':15 'refer':7	zh	DyslexicAtheist
159	Interface Semantics	{"ver":2,"uid":1,"hash":"SHA1:fade56c27edd00159a4f9ec1b77738ae27fb5d45"}	https://www.ardanlabs.com/blog/2017/07/interface-semantics.html	2017-07-15 00:00:00	Prelude If you want to put this post in some better context, I suggest reading the following series of posts, which lay out some other fundamental and relevant design principles:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics\nIn particular, the idea of value and pointer semantics is everywhere in the Go programming language.	8f7bbfbb4f9adebe1a05d08ff6ccdce11e01f0ab	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.463287	0			'1':33 '2':40 '3':46 '4':52 'analysi':45 'better':13 'context':14 'data':56 'design':31,53 'escap':44 'everywher':69 'follow':19 'fundament':28 'go':72 'idea':62 'interfac':1 'languag':34,41,47,74 'lay':24 'mechan':35,42,48 'memori':50 'particular':60 'philosophi':54 'pointer':39,66 'post':10,22 'prelud':3 'principl':32 'profil':51 'program':73 'put':8 'read':17 'relev':30 'semant':2,58,67 'seri':20 'stack':37 'suggest':16 'valu':64 'want':6	en	
161	Design Philosophy On Data And Semantics	{"ver":2,"uid":1,"hash":"SHA1:e43f67a705251790d139e785ff55778210802d07"}	https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html	2017-06-08 00:00:00	Prelude This is the final post in a four part series discussing the mechanics and design behind pointers, stacks, heaps, escape analysis and value/pointer semantics in Go. This post focuses on data and the design philosophies of applying value/pointer semantics in your code.\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics	796feb252b7b869469804e45eb34523ce8096af4	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.467111	0			'1':56 '2':63 '3':69 '4':75 'analysi':28,68 'appli':44 'behind':23 'code':49 'data':4,38,79 'design':1,22,41,76 'discuss':18 'escap':27,67 'final':11 'focus':36 'four':15,53 'go':33 'heap':26 'index':50 'languag':57,64,70 'mechan':20,58,65,71 'memori':73 'part':16,54 'philosophi':2,42,77 'pointer':24,62 'post':12,35 'prelud':7 'profil':74 'semant':6,31,46,81 'seri':17,55 'stack':25,60 'value/pointer':30,45	en	
169	Develop Your Design Philosophy	{"ver":2,"uid":1,"hash":"SHA1:514f4108fcb2d07b3ccae9fc4c66b49f822264a9"}	https://www.ardanlabs.com/blog/2017/01/develop-your-design-philosophy.html	2017-01-31 00:00:00	Prelude This post is part of a series of posts designed to make you think about your own design philosophy on different topics. I will not be laying out direct examples to prove my own thoughts and ideas. It takes me two or three days in the classroom to do that and it’s why I think my classes are so special.\nMy goal is to get you and others to write the next set of blog posts to prove or disprove these ideas.	62bdde8bac4d049903ff5d352490057ac457f5c3	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.482247	0			'blog':81 'class':63 'classroom':52 'day':49 'design':3,15,23 'develop':1 'differ':26 'direct':34 'disprov':86 'exampl':35 'get':71 'goal':68 'idea':42,88 'lay':32 'make':17 'next':78 'other':74 'part':9 'philosophi':4,24 'post':7,14,82 'prelud':5 'prove':37,84 'seri':12 'set':79 'special':66 'take':44 'think':19,61 'thought':40 'three':48 'topic':27 'two':46 'write':76	en	
1114	AT&T’s current 5G is slower than 4G in nearly every city tested by PCMag	{"ver":2,"uid":1,"hash":"SHA1:1886ea9448d4f5f9fcee9327edc3193c03ac5917"}	https://arstechnica.com/information-technology/2020/09/atts-current-5g-is-slower-than-4g-in-nearly-every-city-tested-by-pcmag/	2020-09-09 23:10:22	Comments: <a href="https://news.ycombinator.com/item?id=24422472"> https://news.ycombinator.com/item?id=24422472 </a>	d0576cae49c27b0f163fcb668bacc468f621330c	\N	f	2020-09-09 23:10:00	2020-09-10 05:10:14.19376	0			'/item?id=24422472':20 '4g':9 '5g':5 'citi':13 'comment':17 'current':4 'everi':12 'near':11 'news.ycombinator.com':19 'news.ycombinator.com/item?id=24422472':18 'pcmag':16 'slower':7 'test':14	zh	LinuxBender
174	Installing Go And Your Workspace	{"ver":2,"uid":1,"hash":"SHA1:6b37476bb4232e56a0fb61b026ee21c6c9e151b6"}	https://www.ardanlabs.com/blog/2016/05/installing-go-and-your-workspace.html	2016-05-12 00:00:00	Introduction If you are new to Linux or the Mac you might find installing Go to be a bit confusing. It was for me when I started learning Go. Go was the reason I stopped using Windows, which I used for 20 years. Even if you&rsquo;re experienced with these operation systems, setting up Go might seem a bit of a mystery. With this in mind, let&rsquo;s walk through installing Go.	7576b1682466aa033cd390a7c2a10caef9c7664a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.491687	0			'20':47 'bit':24,64 'confus':25 'even':49 'experienc':53 'find':18 'go':2,20,34,35,60,77 'instal':1,19,76 'introduct':6 'learn':33 'let':72 'linux':12 'mac':15 'might':17,61 'mind':71 'mysteri':67 'new':10 'oper':56 're':52 'reason':38 'seem':62 'set':58 'start':32 'stop':40 'system':57 'use':41,45 'walk':74 'window':42 'workspac':5 'year':48	en	
180	Using Pointers In Go	{"ver":2,"uid":1,"hash":"SHA1:14ede4508e0f6553ba546529d6577d8eeda89530"}	https://www.ardanlabs.com/blog/2014/12/using-pointers-in-go.html	2014-12-16 00:00:00	Introduction\nI am asked quite a bit about when and when not to use pointers in Go. The problem most people have, is that they try to make this decision based on what they think the performance tradeoff will be. Hence the problem, don’t make coding decisions based on unfounded thoughts you may have about performance. Make coding decisions based on the code being idiomatic, simple, readable and reasonable.	b4b44ce52fd034492c1e6a58b35d9eeab3017171	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.503403	0			'ask':8 'base':35,53,65 'bit':11 'code':51,63,68 'decis':34,52,64 'go':4,21 'henc':45 'idiomat':70 'introduct':5 'make':32,50,62 'may':58 'peopl':25 'perform':41,61 'pointer':2,19 'problem':23,47 'quit':9 'readabl':72 'reason':74 'simpl':71 'think':39 'thought':56 'tradeoff':42 'tri':30 'unfound':55 'use':1,18	en	
186	Actionable Data With MongoDB and Go	{"ver":2,"uid":1,"hash":"SHA1:c32e8a1b138d751dea326be1385071134359a339"}	https://www.ardanlabs.com/blog/2014/06/actionable-data-with-mongodb-and-go.html	2014-06-25 00:00:00	Introduction\nIf you are building any kind of application for a consumer based product, it is common to have large amounts of application data being generated about your users. Running reports is a traditional use of this data, but what if you could make this data actionable? What if you could adapt the user experience by aggregating and testing this data against rules that could dictate actions or special messaging?	70732a273ebabf4c9c4558da789b28770fa6928a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.514935	0			'action':1,53,73 'adapt':58 'aggreg':63 'amount':27 'applic':15,29 'base':19 'build':11 'common':23 'consum':18 'could':49,57,71 'data':2,30,44,52,67 'dictat':72 'experi':61 'generat':32 'go':6 'introduct':7 'kind':13 'larg':26 'make':50 'messag':76 'mongodb':4 'product':20 'report':37 'rule':69 'run':36 'special':75 'test':65 'tradit':40 'use':41 'user':35,60	en	
187	Pitfalls With Closures In Go	{"ver":2,"uid":1,"hash":"SHA1:d37a9409d6a17b0465da49d4876a203cc8e213d2"}	https://www.ardanlabs.com/blog/2014/06/pitfalls-with-closures-in-go.html	2014-06-20 00:00:00	Introduction\nClosures in Go are a very powerful construct but they can also be the cause of bugs if you don’t understand how they work. In this post I am going to pull a small piece of code from Chapter 2 from the Go In Action book that discusses a pitfall you can run into when using closures. The full code example can be found in the Github repository for the book.	247a8b256bc011c46782be64a3fe2fef268aa9cf	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.516973	0			'2':47 'action':52 'also':18 'book':53,78 'bug':23 'caus':21 'chapter':46 'closur':3,7,64 'code':44,67 'construct':14 'discuss':55 'exampl':68 'found':71 'full':66 'github':74 'go':5,9,37,50 'introduct':6 'piec':42 'pitfal':1,57 'post':34 'power':13 'pull':39 'repositori':75 'run':60 'small':41 'understand':28 'use':63 'work':31	en	
190	Exported/Unexported Identifiers In Go	{"ver":2,"uid":1,"hash":"SHA1:15db1289b530f3bcbde1224f76b8cde625b69dc0"}	https://www.ardanlabs.com/blog/2014/03/exportedunexported-identifiers-in-go.html	2014-03-15 00:00:00	Introduction\nOne of the first things I learned about in Go was using an uppercase or lowercase letter as the first letter when naming a type, variable or function. It was explained that when the first letter was capitalized, the identifier was public to any piece of code that wanted to use it. When the first letter was lowercase, the identifier was private and could only be accessed within the package it was declared.	a58daf639d088d1e94b0b1b3854bb2cb82349e2a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.522782	0			'access':72 'capit':43 'code':52 'could':69 'declar':78 'explain':36 'exported/unexported':1 'first':9,25,40,60 'function':33 'go':4,15 'identifi':2,45,65 'introduct':5 'learn':12 'letter':22,26,41,61 'lowercas':21,63 'name':28 'one':6 'packag':75 'piec':50 'privat':67 'public':47 'thing':10 'type':30 'uppercas':19 'use':17,56 'variabl':31 'want':54 'within':73	en	
1078	【Rust日报】2020-09-08 那些杀死Haskell的，也能杀死 Rust	{"ver":2,"uid":1,"hash":"SHA1:c5ea969616ba5d7d9d0139c4c5975de9dbd1d4e5"}	https://rustcc.cn/article?id=035b6952-6d1c-485a-96e9-2d1ebf40a56e	2020-09-08 15:17:00	<h2>那些杀死Haskell的，也能杀死 Rust</h2>\n<p>（转自 Rust视界）</p>\n<p>这篇文章作者阐述了 Haskell 的发展历史，认为 现在 Rust 很可能也会重蹈覆辙。</p>\n<p>太长不看版：</p>\n<blockquote>\n<p>We have great tools in the Rust language. We could kill it by making a mess, we could kill it by being arrogant about it, we could kill it by ignoring the Enterprise. I suggest that we not follow that route.</p>\n<p>我们拥有Rust语言的强大工具。 我们可以通过制造混乱来杀死它，可以通过自大来杀死它，我们可以通过忽略企业来杀死它。 我建议我们不要走那条路。</p>\n</blockquote>\n<p>从结尾的这句话来看，作者似乎在批评 Haskell 社区是自负与傲慢，并且Haskell 并没有解决企业应用的问题。</p>\n<p>我想，Rust 社区应该不会有这个问题。</p>\n<p>帖子下面还有很多评论值得看看。</p>\n<p>https://gist.github.com/graninas/22ab535d2913311e47a742c70f1d2f2b</p>\n<h2>特质？ 特征？关于术语 <code>trait</code> 的翻译的讨论</h2>\n<p>尽管当前 Rust社区主要使用“特质”来翻译术语 <code>trait</code>，@upsuper 在对比常用的翻译软件以及一些场景下翻译的通顺程度，认为使用特征是一个更好的翻译。你的看法呢？ 欢迎点击原文链接查看！</p>\n<p>原文： https://github.com/rust-lang-cn/english-chinese-glossary-of-rust/pull/16</p>\n	c5d3edaa9b0fa3c3035dd68cd683e94dfdf82881	\N	f	2020-09-08 16:10:00	2020-09-10 05:10:03.17617	0			'-08':4 '-09':3 '/graninas/22ab535d2913311e47a742c70f1d2f2b':79 '/rust-lang-cn/english-chinese-glossary-of-rust/pull/16':98 '2020':2 'a':35 'about':44 'arrogant':43 'being':42 'by':33,41,50 'could':30,38,47 'enterprise':53 'follow':59 'gist.github.com':78 'gist.github.com/graninas/22ab535d2913311e47a742c70f1d2f2b':77 'github.com':97 'github.com/rust-lang-cn/english-chinese-glossary-of-rust/pull/16':96 'great':23 'haskell':14,69 'have':22 'i':54 'ignoring':51 'in':25 'it':32,40,45,49 'kill':31,39,48 'language':28 'making':34 'mess':36 'not':58 'route':61 'rust':7,10,18,27,74 'rust日报':1 'rust社区主要使用':86 'rust视界':12 'suggest':55 'that':56,60 'the':26,52 'tools':24 'trait':83,89 'upsuper':90 'we':21,29,37,46,57 '也能杀死':6,9 '从结尾的这句话来看':67 '作者似乎在批评':68 '你的看法呢':93 '关于术语':82 '原文':95 '可以通过自大来杀死它':64 '在对比常用的翻译软件以及一些场景下翻译的通顺程度':91 '太长不看版':20 '尽管当前':85 '帖子下面还有很多评论值得看看':76 '并且haskell':71 '并没有解决企业应用的问题':72 '很可能也会重蹈覆辙':19 '我们可以通过制造混乱来杀死它':63 '我们可以通过忽略企业来杀死它':65 '我们拥有rust语言的强大工具':62 '我建议我们不要走那条路':66 '我想':73 '来翻译术语':88 '欢迎点击原文链接查看':94 '特征':81 '特质':80,87 '现在':17 '的发展历史':15 '的翻译的讨论':84 '社区应该不会有这个问题':75 '社区是自负与傲慢':70 '认为':16 '认为使用特征是一个更好的翻译':92 '转自':11 '这篇文章作者阐述了':13 '那些杀死haskell的':5,8		
244	Lissajous 曲线的动画演示	{"ver":2,"uid":1,"hash":"SHA1:c5f4101ec0b4e9ff0354e011ce1f7bb7dc044360"}	http://www.matrix67.com/blog/archives/6947	2016-10-18 15:32:59	<p>随着常数 m 和 n 的变化，参数方程 x = sin(m · t), y = sin(n · t) 将会画出一系列漂亮的曲线。法国物理学家 Jules Antoine Lissajous 曾在 1857 年研究过这类曲线，因此人们把它叫做 Lissajous 曲线。我在 <a href="https://www.reddit.com/r/oddlysatisfying/comments/57iff3/the_lissajous_curve/">reddit</a> 上看到了一个 Lissajous 曲线的动画演示，觉得看起来确实非常爽；但那个动画里没有解释曲线的生成方法，很多细节也有让人不太满意的地方，于是决定自己制作一个。这个动画展示的是 m = 13, n = 18 时的 Lissajous 曲线。</p>\n<p style="text-align: center"><img src="http://www.matrix67.com/blogimage_2016/201610181.gif" alt="" /></p>\n	b26f463f4c1dcb4f2897a0ea0e31418926fb739f	\N	f	2020-08-14 06:10:00	2020-09-10 05:10:06.835577	140	http://www.matrix67.com/blog/archives/6947#comments		'13':39 '18':41 '1857':23 'antoine':20 'jules':19 'lissajous':1,21,26,31,43 'm':4,11,38 'n':6,15,40 'reddit':29 'sin':10,14 't':12,16 'x':9 'y':13 '上看到了一个':30 '于是决定自己制作一个':36 '但那个动画里没有解释曲线的生成方法':34 '参数方程':8 '和':5 '因此人们把它叫做':25 '将会画出一系列漂亮的曲线':17 '年研究过这类曲线':24 '很多细节也有让人不太满意的地方':35 '我在':28 '时的':42 '曲线':27,44 '曲线的动画演示':2,32 '曾在':22 '法国物理学家':18 '的变化':7 '觉得看起来确实非常爽':33 '这个动画展示的是':37 '随着常数':3	en	admin
1126	三个月内业务增长 30 倍：如何在疫情期间扩展 Google Meet	{"ver":2,"uid":1,"hash":"SHA1:d0e6f4ceec39c3cae9fa04019b62600c771de0a4"}	https://toutiao.io/k/xfg1ag6	2020-09-10 03:10:13	三个月内业务增长 30 倍：如何在疫情期间扩展 Google Meet	b6257d59981d012bf7653c63317c401934591444	\N	f	2020-09-10 03:10:00	2020-09-10 05:10:14.598047	0			'30':2,8 'google':5,11 'meet':6,12 '三个月内业务增长':1,7 '倍':3,9 '如何在疫情期间扩展':4,10	zh	
123	Dgraph Database Semantics	{"ver":2,"uid":1,"hash":"SHA1:5ee17b98a87cf46cd29dc5fa7d6148d2efe4308a"}	https://www.ardanlabs.com/blog/2020/06/dgraph-database-semantics.html	2020-06-26 00:00:00	Introduction In this paper written by Manish Jain (the founder of Dgraph) he describes Dgraph as:\na distributed graph database which provides horizontal scalability, distributed cluster-wide ACID transactions, low-latency arbitrary-depth joins, synchronous replication, high availability, and crash resilience.\nThere are many claims being stated here which frankly I didn’t understand the meaning of the first time I read this sentence. I decided I wanted to better understand these claims with the hope that it would help me understand Dgraph’s architecture and engineering decisions better.	a9d52047de114f31025fd1b8d3b0d30ec196b2bb	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.388221	0			'acid':32 'arbitrari':38 'arbitrary-depth':37 'architectur':91 'avail':44 'better':76,95 'claim':51,79 'cluster':30 'cluster-wid':29 'crash':46 'databas':2,23 'decid':72 'decis':94 'depth':39 'describ':17 'dgraph':1,15,18,89 'didn':58 'distribut':21,28 'engin':93 'first':65 'founder':13 'frank':56 'graph':22 'help':86 'high':43 'hope':82 'horizont':26 'introduct':4 'jain':11 'join':40 'latenc':36 'low':35 'low-lat':34 'mani':50 'manish':10 'mean':62 'paper':7 'provid':25 'read':68 'replic':42 'resili':47 'scalabl':27 'semant':3 'sentenc':70 'state':53 'synchron':41 'time':66 'transact':33 'understand':60,77,88 'want':74 'wide':31 'would':85 'written':8	en	
126	Getting Started With Dgraph and GraphQL+-	{"ver":2,"uid":1,"hash":"SHA1:b3e490bda3166dc1b07324f0e7c801456fca17d4"}	https://www.ardanlabs.com/blog/2020/04/getting-started-with-dgraph-and-graphql+-.html	2020-04-16 00:00:00	Introduction I have spent a career building business applications that work with databases, starting with SQL and then moving to No-SQL. I’ve been curious how Graph databases work and how to build applications with them. It seems the sweet spot for a Graph database is when your application needs to model the interrelationships of complex and different datasets. I’ve been using No-SQL databases for these types of applications so I am super interested in knowing how Graph databases differ.	aa6f7b5968a8e017a589ca02496c318efdad5bde	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.395555	0			'applic':15,42,57,80 'build':13,41 'busi':14 'career':12 'complex':64 'curious':33 'databas':19,36,53,75,90 'dataset':67 'dgraph':4 'differ':66,91 'get':1 'graph':35,52,89 'graphql':6 'interest':85 'interrelationship':62 'introduct':7 'know':87 'model':60 'move':25 'need':58 'no-sql':27,72 'seem':46 'spent':10 'spot':49 'sql':22,29,74 'start':2,20 'super':84 'sweet':48 'type':78 'use':71 've':31,69 'work':17,37	en	
129	Docker Images : Part III - Going Farther To Reduce Image Size	{"ver":2,"uid":1,"hash":"SHA1:82ed70a23e86a011ced654affa90fbee667b8433"}	https://www.ardanlabs.com/blog/2020/04/docker-images-part3-going-farther-reduce-image-size.html	2020-04-03 00:00:00	Series Index Reducing Image Size\nDetails Specific To Different Languages\nGoing Farther To Reduce Image Size\nIntroduction In the first two parts of this series, we covered the most common methods to optimize Docker image size. We saw how multi-stage builds, combined with Alpine-based images, and sometimes static builds, would generally give us the most dramatic savings. In this last part, we will see how to go even farther. We will talk about standardizing base images, stripping binaries, assets optimization, and other build systems or add-ons like DockerSlim or Bazel, as well as the NixOS distribution.	dbd14e3c96712a041858b53632511c58c7e3cf18	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.402022	0			'add':101 'add-on':100 'alpin':57 'alpine-bas':56 'asset':93 'base':58,89 'bazel':106 'binari':92 'build':53,63,97 'combin':54 'common':40 'cover':37 'detail':16 'differ':19 'distribut':112 'docker':1,44 'dockerslim':104 'dramat':70 'even':82 'farther':6,22,83 'first':30 'general':65 'give':66 'go':5,21,81 'iii':4 'imag':2,9,14,25,45,59,90 'index':12 'introduct':27 'languag':20 'last':74 'like':103 'method':41 'multi':51 'multi-stag':50 'nixo':111 'on':102 'optim':43,94 'part':3,32,75 'reduc':8,13,24 'save':71 'saw':48 'see':78 'seri':11,35 'size':10,15,26,46 'sometim':61 'specif':17 'stage':52 'standard':88 'static':62 'strip':91 'system':98 'talk':86 'two':31 'us':67 'well':108 'would':64	en	
131	Modules Part 04: Mirrors, Checksums and Athens	{"ver":2,"uid":1,"hash":"SHA1:1e61bd3107cbb589150c7d2e210905333616e20d"}	https://www.ardanlabs.com/blog/2020/02/modules-04-mirros-checksums-athens.html	2020-02-10 00:00:00	Series Index Why and What\nProjects, Dependencies and Gopls\nMinimal Version Selection\nMirrors, Checksums and Athens\nGopls Improvements\nVendoring\nIntroduction One of the longer standing questions I had when first learning about modules was how the module mirror, checksum database and Athens worked. The Go team has written extensively about the module mirror and checksum database, but I hope to consolidate the most important information here. In this post, I provide the purpose of these systems, the different configuration options you have, and show these systems in action using example programs.	b55d5a15024ec3c7d50d963e0ebb9b19af99001a	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.406771	0			'04':3 'action':95 'athen':7,23,49 'checksum':5,21,46,62 'configur':86 'consolid':68 'databas':47,63 'depend':14 'differ':85 'exampl':97 'extens':56 'first':37 'go':52 'gopl':16,24 'hope':66 'import':71 'improv':25 'index':9 'inform':72 'introduct':27 'learn':38 'longer':31 'minim':17 'mirror':4,20,45,60 'modul':1,40,44,59 'one':28 'option':87 'part':2 'post':76 'program':98 'project':13 'provid':78 'purpos':80 'question':33 'select':19 'seri':8 'show':91 'stand':32 'system':83,93 'team':53 'use':96 'vendor':26 'version':18 'work':50 'written':55	en	
142	An Open Letter To The Go Team About Try	{"ver":2,"uid":1,"hash":"SHA1:8147af4fa98080efc846f85608de804d5555e835"}	https://www.ardanlabs.com/blog/2019/07/an-open-letter-to-the-go-team-about-try.html	2019-07-01 00:00:00	“Once a language gets complex enough, programming in it is more like carving out a subset from an infinite sea of features, most of which we’ll never learn. Once a language feels infinite, the costs of adding further features to it are no longer apparent&rdquo;. - Mark Miller\nThe new try proposal is an addition to the language that introduces a second mechanic to handle errors. It is being introduced in response to data gathered from the 2018 Go Survey and a review of proposals that were submitted during the Go 2 proposal process.	0ae6dbebbff5d50200b77c7a3651862f24a00c9d	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.429367	0			'2':101 '2018':87 'ad':47 'addit':64 'appar':55 'carv':22 'complex':14 'cost':45 'data':83 'enough':15 'error':75 'featur':31,49 'feel':42 'gather':84 'get':13 'go':6,88,100 'handl':74 'infinit':28,43 'introduc':69,79 'languag':12,41,67 'learn':38 'letter':3 'like':21 'll':36 'longer':54 'mark':56 'mechan':72 'miller':57 'never':37 'new':59 'open':2 'process':103 'program':16 'propos':61,94,102 'respons':81 'review':92 'sea':29 'second':71 'submit':97 'subset':25 'survey':89 'team':7 'tri':9,60	en	
194	Concurrency, Goroutines and GOMAXPROCS	{"ver":2,"uid":1,"hash":"SHA1:83c1c8e4a9025e7bf963fa309e15ff4b5574bfbb"}	https://www.ardanlabs.com/blog/2014/01/concurrency-goroutines-and-gomaxprocs.html	2014-01-29 00:00:00	Introduction\nWhen new people join the Go-Miami group they always write that they want to learn more about Go&rsquo;s concurrency model. Concurrency seems to be the big buzz word around the language. It was for me when I first started hearing about Go. It was Rob Pike&rsquo;s Go Concurrency Patterns video that finally convinced me I needed to learn this language.\nTo understand how Go makes writing concurrent programs easier and less prone to errors, we first need to understand what a concurrent program is and the problems that result from such programs.	87aadf3e0981be671763d67c53dfd3b31d1d4db5	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.530446	0			'alway':16 'around':37 'big':34 'buzz':35 'concurr':1,27,29,57,76,91 'convinc':62 'easier':78 'error':83 'final':61 'first':46,85 'go':12,25,50,56,73 'go-miami':11 'gomaxproc':4 'goroutin':2 'group':14 'hear':48 'introduct':5 'join':9 'languag':39,69 'learn':22,67 'less':80 'make':74 'miami':13 'model':28 'need':65,86 'new':7 'pattern':58 'peopl':8 'pike':54 'problem':96 'program':77,92,101 'prone':81 'result':98 'rob':53 'seem':30 'start':47 'understand':71,88 'video':59 'want':20 'word':36 'write':17,75	en	
196	Be Selected To Attend GopherCon 2014	{"ver":2,"uid":1,"hash":"SHA1:e1ab17883e3b173bf5f9073306727d7eca6e59d9"}	https://www.ardanlabs.com/blog/2014/01/gophercon-2014-scholarship-for-women.html	2014-01-16 00:00:00	Gopher Academy announced a great program today.\nToday I&rsquo;d like to announce the GopherCon Scholarship Program. It&rsquo;s goal is to increase the visibility of women in the Go community through the most direct path I can imagine: sponsoring their attendance to GopherCon 2014.\nThe program works by you purchasing one of these special tickets. There will be a selection/nomination process and those woman selected will be able to attend GopherCon thanks to you.	db414d6a8a6ca15b7b775f50e4b0d9f796ea6cd6	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.53445	0			'2014':6,51 'abl':75 'academi':8 'announc':9,19 'attend':4,48,77 'communiti':37 'd':16 'direct':41 'go':36 'goal':26 'gopher':7 'gophercon':5,21,50,78 'great':11 'imagin':45 'increas':29 'like':17 'one':58 'path':42 'process':68 'program':12,23,53 'purchas':57 'scholarship':22 'select':2,72 'selection/nomination':67 'special':61 'sponsor':46 'thank':79 'ticket':62 'today':13,14 'visibl':31 'woman':71 'women':33 'work':54	en	
213	Recursion And Tail Calls In Go	{"ver":2,"uid":1,"hash":"SHA1:f044b52cc72337dd33d1c0f838d70fc95ad60c6b"}	https://www.ardanlabs.com/blog/2013/09/recursion-and-tail-calls-in-go_26.html	2013-09-26 00:00:00	This article was written for and published by Gopher Academy\nI was looking at a code sample that showed a recursive function in Go and the writer was very quick to state how Go does not optimize for recursion, even if tail calls are explicit. I had no idea what a tail call was and I really wanted to understand what he meant by Go was not optimized for recursion.	08ca8c6b3cc52ae102322f9455813b4ceb94620c	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.567535	0			'academi':16 'articl':8 'call':4,49,59 'code':22 'even':46 'explicit':51 'function':28 'go':6,30,40,71 'gopher':15 'idea':55 'look':19 'meant':69 'optim':43,74 'publish':13 'quick':36 'realli':63 'recurs':1,27,45,76 'sampl':23 'show':25 'state':38 'tail':3,48,58 'understand':66 'want':64 'writer':33 'written':10	en	
229	Analyze Data With MongoDB and Go	{"ver":2,"uid":1,"hash":"SHA1:2033ab251da7a8b81733b4d760b7c54a1e7db73c"}	https://www.ardanlabs.com/blog/2013/07/analyze-data-with-mongodb-and-go.html	2013-07-24 00:00:00	This article was written for and published by Safari Books Online\nMy company is building a mobile application called Outcast. The idea behind Outcast is to give people who love the outdoors the ability to get ahead of the weather. By analyzing real time buoy, tide, lunar and solar data with user preferences and experiences, the application can deliver relevant information and forecasts. The user helps with the forecasting by providing an experience review after their outdoor activities have ended.	eca3e6e1dd8fec0d98badd7f0a1bf6041547cae7	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.598373	0			'abil':40 'activ':84 'ahead':43 'analyz':1,48 'applic':24,63 'articl':8 'behind':29 'book':16 'build':21 'buoy':51 'call':25 'compani':19 'data':2,56 'deliv':65 'end':86 'experi':61,79 'forecast':69,75 'get':42 'give':33 'go':6 'help':72 'idea':28 'inform':67 'love':36 'lunar':53 'mobil':23 'mongodb':4 'onlin':17 'outcast':26,30 'outdoor':38,83 'peopl':34 'prefer':59 'provid':77 'publish':13 'real':49 'relev':66 'review':80 'safari':15 'solar':55 'tide':52 'time':50 'user':58,71 'weather':46 'written':10	en	
233	Singleton Design Pattern in Go	{"ver":2,"uid":1,"hash":"SHA1:061ce54f9cf85803bc1ecd819f5d564e2e26d078"}	https://www.ardanlabs.com/blog/2013/07/singleton-design-pattern-in-go.html	2013-07-06 00:00:00	Multi-threaded applications are very complicated, especially when your code is not organized and consistent with how resources are accessed, managed and maintained. If you want to minimize bugs you need philosophies and rules to live by. Here are some of mine:\nResource allocation and de-allocation should be abstracted and managed within the same type. Resource thread safeness should be abstracted and managed within the same type. A public interface should be the only means to accessing shared resources.	e9544c2e8e46450217bac6028de2bdbf308b9525	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.606615	0			'abstract':57,69 'access':26,85 'alloc':50,54 'applic':9 'bug':35 'code':16 'complic':12 'consist':21 'de':53 'de-alloc':52 'design':2 'especi':13 'go':5 'interfac':78 'live':42 'maintain':29 'manag':27,59,71 'mean':83 'mine':48 'minim':34 'multi':7 'multi-thread':6 'need':37 'organ':19 'pattern':3 'philosophi':38 'public':77 'resourc':24,49,64,87 'rule':40 'safe':66 'share':86 'singleton':1 'thread':8,65 'type':63,75 'want':32 'within':60,72	en	
238	Go's time.Duration Type Unravelled	{"ver":2,"uid":1,"hash":"SHA1:8bd9de0eac9634e06fcfb321c2419d5a59c9f96d"}	https://www.ardanlabs.com/blog/2013/06/gos-duration-type-unravelled.html	2013-06-11 00:00:00	I have been struggling with using the Time package that comes in the Go standard library. My struggles have come from two pieces of functionality. First, trying to capture the number of milliseconds between two different time periods. Second, comparing that duration in milliseconds against a pre-defined time span. It sounds like a no&nbsp;brainier but like I said, I have been struggling.\nIn the Time package there is a custom type called Duration and a set of helper constants:	df30ce0f66c1d8681c1905993a5207666c3b3faf	\N	f	2020-08-14 05:06:00	2020-09-10 05:10:15.616175	0			'brainier':62 'call':80 'captur':34 'come':16,25 'compar':45 'constant':87 'custom':78 'defin':54 'differ':41 'durat':47,81 'first':31 'function':30 'go':1,19 'helper':86 'librari':21 'like':59,64 'millisecond':38,49 'number':36 'packag':14,74 'period':43 'piec':28 'pre':53 'pre-defin':52 'said':66 'second':44 'set':84 'sound':58 'span':56 'standard':20 'struggl':9,23,70 'time':13,42,55,73 'time.duration':3 'tri':32 'two':27,40 'type':4,79 'unravel':5 'use':11	en	
\.


--
-- Data for Name: ttrss_entry_comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_entry_comments (id, ref_id, owner_uid, private, date_entered) FROM stdin;
\.


--
-- Data for Name: ttrss_error_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_error_log (id, owner_uid, errno, errstr, filename, lineno, context, created_at) FROM stdin;
\.


--
-- Data for Name: ttrss_feed_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_feed_categories (id, owner_uid, collapsed, order_id, view_settings, parent_cat, title) FROM stdin;
1	1	f	0		\N	Tech
2	1	f	0		\N	Math
\.


--
-- Data for Name: ttrss_feedbrowser_cache; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_feedbrowser_cache (feed_url, title, site_url, subscribers) FROM stdin;
\.


--
-- Data for Name: ttrss_feeds; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_feeds (id, owner_uid, title, cat_id, feed_url, icon_url, update_interval, purge_interval, last_updated, last_unconditional, last_error, last_modified, favicon_avg_color, site_url, auth_login, parent_feed, private, auth_pass, hidden, include_in_digest, rtl_content, cache_images, hide_images, cache_content, last_viewed, last_update_started, update_method, always_display_enclosures, order_id, mark_unread_on_update, update_on_checksum_change, strip_images, view_settings, pubsub_state, favicon_last_checked, feed_language, auth_pass_encrypted) FROM stdin;
5	1	Hacker News: best	1	https://rsshub.app/hackernews/best/story		0	0	2020-09-10 05:10:14.230785	2020-09-10 05:10:14.230785		Thu, 10 Sep 2020 04:57:20 GMT		https://news.ycombinator.com/best		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:13.448194	0	f	0	f	f	f		0	2020-09-10 05:10:14.164074	English	f
11	1	Rust.cc	1	https://rustcc.cn/rss		0	0	2020-09-10 05:10:03.223106	2020-09-10 05:10:03.223106				https://rust.cc		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:02.300413	0	f	0	f	f	f		0	2020-09-09 22:10:02.869403		f
10	1	Function Decomposition	1	http://blog.higashi.tech/feed.xml		0	0	2020-09-10 05:10:04.39845	2020-09-10 01:10:05.17652		Tue, 25 Aug 2020 09:00:02 GMT	\N	http://blog.higashi.tech/		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:03.225239	0	f	0	f	f	f		0	2020-09-10 01:10:05.145237		f
7	1	the morning paper	1	https://blog.acolyer.org/feed/		0	0	2020-09-10 05:10:07.914377	2020-09-10 01:10:07.131342		Wed, 08 Jul 2020 10:34:15 GMT	#3266cc	https://blog.acolyer.org		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:06.861474	0	f	0	f	f	f		0	2020-09-10 01:10:07.110827	English	f
6	1	Lei Mao's Log Book	1	https://leimao.github.io/feed.xml		0	0	2020-09-10 05:10:13.446489	2020-09-10 05:10:13.446489		Thu, 10 Sep 2020 05:03:15 GMT		https://leimao.github.io		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:12.753441	0	f	0	f	f	f		0	2020-09-09 18:10:09.942221	English	f
12	1	Vishnu Bharathi	1	https://vishnubharathi.codes/atom.xml		0	0	2020-09-10 05:10:02.298145	2020-09-10 03:10:01.5717		Sat, 22 Aug 2020 21:05:19 GMT	#cc6666	https://vishnubharathi.codes/		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:01.929184	0	f	0	f	f	f		0	2020-09-10 03:10:01.553226		f
9	1	Matrix67	2	http://www.matrix67.com/blog/feed		0	0	2020-09-10 05:10:06.859364	2020-09-10 05:10:06.859364			\N	http://www.matrix67.com/blog		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:04.401469	0	f	0	f	f	f		0	2020-09-10 05:10:06.833644	Simple	f
2	1	Dave Cheney	1	https://dave.cheney.net/feed/atom		0	0	2020-09-10 05:10:09.249933	2020-09-10 05:10:09.249933				https://dave.cheney.net		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:07.916934	0	f	0	f	f	f		0	2020-09-10 05:10:09.207586	Simple	f
4	1	Golang Weekly	1	https://golangweekly.com/rss/21ijoj33		0	0	2020-09-10 05:10:12.751952	2020-09-10 05:10:12.751952		Thu, 10 Sep 2020 05:06:30 GMT	#0098ff	https://golangweekly.com/		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:09.251598	0	f	0	f	f	f		0	2020-09-09 21:10:11.163571	Simple	f
8	1	开发者头条	1	https://rsshub.app/toutiao/today		0	0	2020-09-10 05:10:14.67471	2020-09-10 05:10:14.67471		Thu, 10 Sep 2020 04:10:15 GMT	#3299ff	https://toutiao.io		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:14.232273	0	f	0	f	f	f		0	2020-09-09 19:10:10.371178	Simple	f
3	1	Go (Golang) Programming Blog	1	https://www.ardanlabs.com/blog/index.xml		0	0	2020-09-10 05:10:15.630102	2020-09-10 05:10:15.630102		Thu, 27 Aug 2020 20:47:46 GMT	#ff6532	https://www.ardanlabs.com/blog/		\N	f		f	t	f	f	f	f	\N	2020-09-10 05:10:14.676382	0	f	0	f	f	f		0	2020-09-10 05:10:15.375899	English	f
\.


--
-- Data for Name: ttrss_filter_actions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_filter_actions (id, name, description) FROM stdin;
1	filter	Delete article
2	catchup	Mark as read
3	mark	Set starred
4	tag	Assign tags
5	publish	Publish article
6	score	Modify score
7	label	Assign label
8	stop	Stop / Do nothing
9	plugin	Invoke plugin
\.


--
-- Data for Name: ttrss_filter_types; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_filter_types (id, name, description) FROM stdin;
1	title	Title
2	content	Content
3	both	Title or Content
4	link	Link
5	date	Article Date
6	author	Author
7	tag	Article Tags
\.


--
-- Data for Name: ttrss_filters2; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_filters2 (id, owner_uid, match_any_rule, inverse, title, order_id, last_triggered, enabled) FROM stdin;
\.


--
-- Data for Name: ttrss_filters2_actions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_filters2_actions (id, filter_id, action_id, action_param) FROM stdin;
\.


--
-- Data for Name: ttrss_filters2_rules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_filters2_rules (id, filter_id, reg_exp, inverse, filter_type, feed_id, cat_id, match_on, cat_filter) FROM stdin;
\.


--
-- Data for Name: ttrss_labels2; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_labels2 (id, owner_uid, fg_color, bg_color, caption) FROM stdin;
1	1			Database
2	1			Java
3	1			Go
4	1			Rust
5	1			OS
6	1			Compiler
\.


--
-- Data for Name: ttrss_linked_feeds; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_linked_feeds (feed_url, site_url, title, created, updated, instance_id, subscribers) FROM stdin;
\.


--
-- Data for Name: ttrss_linked_instances; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_linked_instances (id, last_connected, last_status_in, last_status_out, access_key, access_url) FROM stdin;
\.


--
-- Data for Name: ttrss_plugin_storage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_plugin_storage (id, name, owner_uid, content) FROM stdin;
1	Fever	1	a:1:{s:8:"password";s:32:"06827b57da04dd72f68a139c94a6ec62";}
\.


--
-- Data for Name: ttrss_prefs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_prefs (pref_name, type_id, section_id, access_level, def_value) FROM stdin;
PURGE_OLD_DAYS	3	1	0	60
DEFAULT_UPDATE_INTERVAL	3	1	0	30
DEFAULT_ARTICLE_LIMIT	3	2	0	30
ALLOW_DUPLICATE_POSTS	1	1	0	false
ENABLE_FEED_CATS	1	2	0	true
SHORT_DATE_FORMAT	2	3	0	M d, G:i
LONG_DATE_FORMAT	2	3	0	D, M d Y - G:i
COMBINED_DISPLAY_MODE	1	2	0	true
HIDE_READ_FEEDS	1	2	0	false
FEEDS_SORT_BY_UNREAD	1	2	0	false
REVERSE_HEADLINES	1	2	0	false
DIGEST_ENABLE	1	4	0	false
CONFIRM_FEED_CATCHUP	1	2	0	true
CDM_AUTO_CATCHUP	1	2	0	false
_DEFAULT_VIEW_MODE	2	1	0	adaptive
_DEFAULT_VIEW_LIMIT	3	1	0	30
_PREFS_ACTIVE_TAB	2	1	0	
STRIP_UNSAFE_TAGS	1	3	0	true
BLACKLISTED_TAGS	2	3	0	main, generic, misc, uncategorized, blog, blogroll, general, news
DIGEST_CATCHUP	1	4	0	false
PURGE_UNREAD_ARTICLES	1	3	0	true
STRIP_IMAGES	1	2	0	false
_DEFAULT_VIEW_ORDER_BY	2	1	0	default
ENABLE_API_ACCESS	1	1	0	false
_COLLAPSED_SPECIAL	1	1	0	false
_COLLAPSED_LABELS	1	1	0	false
_COLLAPSED_UNCAT	1	1	0	false
_COLLAPSED_FEEDLIST	1	1	0	false
_MOBILE_ENABLE_CATS	1	1	0	false
_MOBILE_SHOW_IMAGES	1	1	0	false
_MOBILE_HIDE_READ	1	1	0	false
_MOBILE_SORT_FEEDS_UNREAD	1	1	0	false
_THEME_ID	2	1	0	0
USER_TIMEZONE	2	1	0	Automatic
USER_STYLESHEET	2	2	0	
_MOBILE_BROWSE_CATS	1	1	0	true
SSL_CERT_SERIAL	2	3	0	
DIGEST_PREFERRED_TIME	2	4	0	00:00
_PREFS_SHOW_EMPTY_CATS	1	1	0	false
_DEFAULT_INCLUDE_CHILDREN	1	1	0	false
_ENABLED_PLUGINS	2	1	0	
_MOBILE_REVERSE_HEADLINES	1	1	0	false
USER_CSS_THEME	2	2	0	
USER_LANGUAGE	2	2	0	
DEFAULT_SEARCH_LANGUAGE	2	2	0	
SHOW_CONTENT_PREVIEW	1	2	1	true
ON_CATCHUP_SHOW_NEXT_FEED	1	2	1	false
FRESH_ARTICLE_MAX_AGE	3	2	1	24
CDM_EXPANDED	1	2	1	true
HIDE_READ_SHOWS_SPECIAL	1	2	1	true
VFEED_GROUP_BY_FEED	1	2	1	false
SORT_HEADLINES_BY_FEED_DATE	1	2	1	false
AUTO_ASSIGN_LABELS	1	3	1	false
\.


--
-- Data for Name: ttrss_prefs_sections; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_prefs_sections (id, order_id, section_name) FROM stdin;
1	0	General
2	1	Interface
3	3	Advanced
4	2	Digest
\.


--
-- Data for Name: ttrss_prefs_types; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_prefs_types (id, type_name) FROM stdin;
1	bool
2	string
3	integer
\.


--
-- Data for Name: ttrss_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_sessions (id, data, expire) FROM stdin;
q059ia1ggdeso4ubin5905l3oj	dWlkfGk6MTthdXRoX21vZHVsZXxzOjEzOiJhdXRoX2ludGVybmFsIjtuYW1lfHM6NToiYWRtaW4iO2FjY2Vzc19sZXZlbHxpOjEwO2NzcmZfdG9rZW58czoxOToiOHJ6cXpxNWY1NDc3YmY0MGM1OCI7aXBfYWRkcmVzc3xzOjEzOiIxMjAuNTIuMTQ3LjQzIjt1c2VyX2FnZW50fHM6NDA6ImRhZDA1NTgyZmFjN2I0NDY5Yzc2NzgyNDc2MGI5ZmJkYjJmN2I5MDEiO3B3ZF9oYXNofHM6NzA6Ik1PREUyOmVlNDMxZWNhZjIxMDRlMDA2YmIwM2ZhZjIxNTQyNGEyZTZiM2I5M2FjZjRhOWIyZTZhYzg5ZDExNWE3NTI2N2EiO2xhbmd1YWdlfHM6NDoiYXV0byI7cmVmX3NjaGVtYV92ZXJzaW9ufGk6MTM5O2J3X2xpbWl0fGI6MDtsYXN0X2xvZ2luX3VwZGF0ZXxpOjE1OTk1NjU5ODk7aGFzQXVkaW98YjoxO2hhc1NhbmRib3h8YjoxO2hhc01wM3xiOjE7Y2xpZW50VHpPZmZzZXR8czo2OiItMjg4MDAiO3ByZWZzX29wX3Jlc3VsdHxzOjA6IiI7cHJlZnNfZmVlZF9zZWFyY2h8czowOiIiOw==	1599652406
\.


--
-- Data for Name: ttrss_settings_profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_settings_profiles (id, title, owner_uid) FROM stdin;
\.


--
-- Data for Name: ttrss_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_tags (id, tag_name, owner_uid, post_int_id) FROM stdin;
1	uncategorized	1	1
2	uncategorized	1	2
3	uncategorized	1	3
4	hardware	1	4
5	performance	1	4
6	uncategorized	1	4
7	distributed systems	1	5
8	operations	1	5
9	uncategorized	1	5
10	microsoft	1	6
11	operations	1	6
12	uncategorized	1	6
13	datastores	1	7
14	facebook	1	7
15	uncategorized	1	7
16	datastores	1	8
17	uncategorized	1	8
18	consistency	1	9
19	operations	1	9
20	uncategorized	1	9
21	containers	1	10
22	operating systems	1	10
23	uncategorized	1	10
24	compiler	1	11
25	go	1	11
26	gossafunc	1	11
27	programming	1	11
28	ssa	1	11
29	compiler	1	12
30	go	1	12
31	interfaces	1	12
32	programming	1	12
33	go	1	13
34	json	1	13
35	programming	1	13
36	go	1	14
37	programming	1	14
38	go	1	15
39	inlining	1	15
40	optimisation	1	15
41	performance	1	15
42	programming	1	15
43	go	1	16
44	inlining	1	16
45	optimisation	1	16
46	performance	1	16
47	programming	1	16
48	go	1	17
49	programming	1	17
50	testing	1	17
51	unit test	1	17
52	go	1	18
53	performance	1	18
54	slices	1	18
55	design	1	19
56	go	1	19
57	small ideas	1	19
58	go	1	20
59	small ideas	1	20
60	testing	1	20
61	internets of interest	1	21
62	small ideas	1	22
63	history	1	23
64	internets of interest	1	23
65	internets of interest	1	24
66	go	1	25
67	pkg	1	25
68	programming	1	25
69	project layout	1	25
70	go	1	26
71	programming	1	26
72	go	1	27
73	performance	1	27
74	programming	1	27
75	go	1	28
76	go	1	29
77	programming	1	29
78	small ideas	1	29
79	go	1	30
80	high performance go	1	30
81	training	1	30
82	workshop	1	30
83	uncategorized	1	244
84	动画	1	244
85	惊奇数学事实	1	244
86	uncategorized	1	245
87	动画	1	245
88	同余	1	245
89	游戏	1	245
90	组合数学	1	245
91	视频	1	245
92	证明	1	245
93	uncategorized	1	246
94	图论	1	246
95	惊奇数学事实	1	246
96	组合数学	1	246
97	趣题	1	246
98	uncategorized	1	247
99	动画	1	247
100	惊奇数学事实	1	247
101	算法	1	247
102	组合数学	1	247
103	虚数	1	247
104	证明	1	247
105	趣题	1	247
106	uncategorized	1	248
107	动画	1	248
108	组合数学	1	248
109	证明	1	248
110	趣题	1	248
111	uncategorized	1	249
112	博弈	1	249
113	惊奇数学事实	1	249
114	数列	1	249
115	游戏	1	249
116	算法	1	249
117	组合数学	1	249
118	证明	1	249
119	递归	1	249
120	uncategorized	1	250
121	数论	1	250
122	证明	1	250
123	uncategorized	1	251
124	动画	1	251
125	趣题	1	251
126	uncategorized	1	252
127	惊奇数学事实	1	252
128	概率	1	252
129	证明	1	252
130	趣题	1	252
131	uncategorized	1	253
132	图论	1	253
133	惊奇数学事实	1	253
134	算法	1	253
135	趣题	1	253
136	algorithms	1	1070
137	open source	1	1070
138	programming	1	1070
139	algorithms	1	1071
140	data structures	1	1071
141	go	1	1071
142	programming	1	1071
143	tech interviews	1	1071
144	databases	1	1072
145	recurse center	1	1072
146	research papers	1	1072
147	life	1	1073
148	recurse center	1	1073
149	career advice	1	1074
\.


--
-- Data for Name: ttrss_user_entries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_user_entries (int_id, ref_id, uuid, feed_id, orig_feed_id, owner_uid, marked, published, tag_cache, label_cache, last_read, score, last_marked, last_published, note, unread) FROM stdin;
74	74		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:13:34.082362	0	\N	\N	\N	f
866	866		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:10:04.522036	0	\N	\N	\N	f
69	69		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:07.081076	0	\N	\N	\N	f
41	41		6	\N	1	f	f		{"no-labels":1}	2020-08-14 10:53:05.981725	0	\N	\N	\N	f
92	92		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:41:58.826386	0	\N	\N	\N	f
73	73		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:28.182278	0	\N	\N	\N	f
6	6		7	\N	1	f	f	microsoft,operations,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
58	58		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:49.70879	0	\N	\N	\N	f
7	7		7	\N	1	f	f	datastores,facebook,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
8	8		7	\N	1	f	f	datastores,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
9	9		7	\N	1	f	f	consistency,operations,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
85	85		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:23:26.839726	0	\N	\N	\N	f
10	10		7	\N	1	f	f	containers,operating systems,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
42	42		6	\N	1	f	f		{"no-labels":1}	2020-08-16 14:03:44.600305	0	\N	\N	\N	f
76	76		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:13:35.952291	0	\N	\N	\N	f
843	843		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:19:11.873398	0	\N	\N	\N	f
265	265		5	\N	1	f	f		{"no-labels":1}	2020-08-14 10:52:57.668676	0	\N	\N	\N	f
681	681		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:27:59.802582	0	\N	2020-08-27 14:27:23.913196	\N	f
55	55		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:31.416243	0	\N	\N	\N	f
314	314		5	\N	1	f	f		{"no-labels":1}	2020-08-16 08:07:57.520853	0	\N	\N	\N	t
56	56		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:29.724537	0	\N	\N	\N	f
77	77		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:15:35.626404	0	\N	\N	\N	f
53	53		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:04:11.127262	0	\N	\N	\N	f
140	140		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:29.297993	0	\N	\N	\N	f
61	61		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:45.370469	0	\N	\N	\N	f
52	52		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:01:49.527606	0	\N	\N	\N	f
63	63		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:52.91282	0	\N	\N	\N	f
86	86		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:18:10.879512	0	\N	\N	\N	f
49	49		6	\N	1	f	f		{"no-labels":1}	2020-08-16 12:59:45.783797	0	\N	\N	\N	f
90	90		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:50:24.637136	0	\N	\N	\N	f
79	79		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:38:01.21217	0	\N	\N	\N	f
422	422		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:42.505962	0	\N	\N	\N	f
94	94		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:22:16.546964	0	\N	\N	\N	f
54	54		6	\N	1	f	f			2020-08-16 03:27:27.404181	0	\N	\N	\N	f
96	96		8	\N	1	f	f		{"no-labels":1}	2020-08-14 10:53:22.748585	0	\N	\N	\N	f
33	33		4	\N	1	f	f		{"no-labels":1}	2020-08-14 06:18:01.047878	0	\N	\N	\N	f
81	81		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:58.622281	0	\N	\N	\N	f
60	60		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:35.795554	0	\N	\N	\N	f
83	83		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:15:39.18953	0	\N	\N	\N	f
65	65		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:32.537368	0	\N	\N	\N	f
315	315		5	\N	1	f	f			2020-08-16 08:07:58.546015	0	\N	\N	\N	f
66	66		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:41.886012	0	\N	\N	\N	f
50	50		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:01:32.267671	0	\N	\N	\N	f
67	67		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:01.762048	0	\N	\N	\N	f
48	48		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:19.304938	0	\N	\N	\N	f
1024	1024		8	\N	1	f	f		{"no-labels":1}	2020-09-08 15:20:16.587447	0	\N	\N	\N	t
71	71		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:05.229562	0	\N	\N	\N	f
38	38		6	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:17.080589	0	\N	\N	\N	f
93	93		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:19.457123	0	\N	\N	\N	f
43	43		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:58:48.248194	0	\N	\N	\N	f
57	57		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:30.467637	0	\N	\N	\N	f
569	569		10	\N	1	f	f		{"no-labels":1}	2020-08-28 13:05:53.882872	0	\N	\N	\N	t
91	91		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:15.696574	0	\N	\N	\N	f
98	98		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:22:15.21093	0	\N	\N	\N	f
97	97		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:24.184201	0	\N	\N	\N	f
68	68		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:16:53.031333	0	\N	\N	\N	f
89	89		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:25:02.81909	0	\N	\N	\N	f
34	34		4	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:38.139884	0	\N	\N	\N	f
3	3		7	\N	1	f	f	uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
84	84		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:40.84036	0	\N	\N	\N	f
64	64		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:54.817316	0	\N	\N	\N	f
82	82		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:37.933366	0	\N	\N	\N	f
17	17		2	\N	1	f	f	go,programming,testing,unit test	{"no-labels":1}	2020-08-14 05:36:53.729513	0	\N	\N	\N	f
13	13		2	\N	1	f	f	go,json,programming	{"no-labels":1}	2020-08-14 05:36:51.057484	0	\N	\N	\N	f
14	14		2	\N	1	f	f	go,programming	{"no-labels":1}	2020-08-14 05:36:52.226478	0	\N	\N	\N	f
18	18		2	\N	1	f	f	go,performance,slices	{"no-labels":1}	2020-08-14 05:36:55.464982	0	\N	\N	\N	f
19	19		2	\N	1	f	f	design,go,small ideas	{"no-labels":1}	2020-08-14 05:36:54.718507	0	\N	\N	\N	f
20	20		2	\N	1	f	f	go,small ideas,testing	{"no-labels":1}	2020-08-14 05:36:57.012517	0	\N	\N	\N	f
21	21		2	\N	1	f	f	internets of interest	{"no-labels":1}	2020-08-14 05:36:57.517917	0	\N	\N	\N	f
22	22		2	\N	1	f	f	small ideas	{"no-labels":1}	2020-08-14 05:36:58.074416	0	\N	\N	\N	f
24	24		2	\N	1	f	f	internets of interest	{"no-labels":1}	2020-08-14 05:36:59.678567	0	\N	\N	\N	f
25	25		2	\N	1	f	f	go,pkg,programming,project layout	{"no-labels":1}	2020-08-14 05:37:00.162298	0	\N	\N	\N	f
26	26		2	\N	1	f	f	go,programming	{"no-labels":1}	2020-08-14 05:37:01.216306	0	\N	\N	\N	f
27	27		2	\N	1	f	f	go,performance,programming	{"no-labels":1}	2020-08-14 05:37:01.712165	0	\N	\N	\N	f
28	28		2	\N	1	f	f	go	{"no-labels":1}	2020-08-14 05:37:02.778431	0	\N	\N	\N	f
29	29		2	\N	1	f	f	go,programming,small ideas	{"no-labels":1}	2020-08-14 05:37:03.261546	0	\N	\N	\N	f
109	109		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:41:18.830085	0	\N	\N	\N	t
116	116		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:26:50.233235	0	\N	\N	\N	f
104	104		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:21:20.80266	0	\N	\N	\N	f
117	117		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:26:52.171571	0	\N	\N	\N	f
115	115		8	\N	1	f	f		{"no-labels":1}	2020-08-14 10:53:46.126561	0	\N	\N	\N	f
267	267		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:20:17.552943	0	\N	\N	\N	f
188	188		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:57:15.712132	0	\N	\N	\N	f
103	103		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:21:21.903165	0	\N	\N	\N	f
185	185		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:57:10.902981	0	\N	\N	\N	f
107	107		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:31.840314	0	\N	\N	\N	f
192	192		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:52.160366	0	\N	\N	\N	f
193	193		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
194	194		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
195	195		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:56.104968	0	\N	\N	\N	f
197	197		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:56:13.614083	0	\N	\N	\N	f
199	199		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:56:19.170203	0	\N	\N	\N	f
200	200		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:07.758055	0	\N	\N	\N	f
202	202		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:15.655536	0	\N	\N	\N	f
203	203		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:17.262367	0	\N	\N	\N	f
204	204		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:18.614525	0	\N	\N	\N	f
164	164		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
165	165		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:05:48.666072	0	\N	\N	\N	f
207	207		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:33.715931	0	\N	\N	\N	f
167	167		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:48:27.347257	0	\N	\N	\N	f
210	210		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:38.964195	0	\N	\N	\N	f
168	168		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:48:14.894864	0	\N	\N	\N	f
155	155		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
124	124		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:58.407366	0	\N	\N	\N	f
125	125		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:56.456227	0	\N	\N	\N	f
169	169		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:38:27.944205	0	\N	\N	\N	f
129	129		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:51.55453	0	\N	\N	\N	f
170	170		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:38:27.099232	0	\N	\N	\N	f
1067	1067		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:46.581528	0	\N	\N	\N	f
172	172		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:07.263117	0	\N	\N	\N	f
173	173		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
132	132		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:35.325896	0	\N	\N	\N	f
133	133		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:40.205531	0	\N	\N	\N	f
174	174		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:16:59.895746	0	\N	\N	\N	f
175	175		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
157	157		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:16:19.941425	0	\N	\N	\N	t
177	177		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:09:24.746133	0	\N	\N	\N	f
113	113		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:25:14.097623	0	\N	\N	\N	f
833	833		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:48:21.510055	0	\N	\N	\N	f
139	139		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:27.009618	0	\N	\N	\N	f
142	142		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:38.945828	0	\N	\N	\N	f
178	178		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
179	179		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
180	180		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
182	182		3	\N	1	f	f		{"no-labels":1}	2020-08-16 08:37:31.294368	0	\N	\N	\N	f
148	148		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
152	152		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
183	183		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:12:37.474644	0	\N	\N	\N	t
158	158		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
147	147		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
160	160		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
184	184		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:56:56.093728	0	\N	\N	\N	f
187	187		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
189	189		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:12:50.601863	0	\N	\N	\N	f
190	190		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:59:51.107453	0	\N	\N	\N	f
114	114		8	\N	1	f	f		{"no-labels":1}	2020-08-16 08:08:09.541892	0	\N	\N	\N	f
110	110		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:21:07.292507	0	\N	\N	\N	f
313	313		5	\N	1	f	f		{"no-labels":1}	2020-08-16 08:07:06.999006	0	\N	\N	\N	f
244	244		9	\N	1	f	f	uncategorized,动画,惊奇数学事实	{"no-labels":1}	\N	0	\N	\N	\N	t
198	198		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
205	205		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:31.807148	0	\N	\N	\N	f
130	130		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:50.98057	0	\N	\N	\N	f
105	105		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:41:20.930548	0	\N	\N	\N	f
145	145		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
134	134		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:39.511939	0	\N	\N	\N	f
137	137		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:42.75826	0	\N	\N	\N	f
149	149		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
150	150		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
153	153		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
154	154		3	\N	1	f	f		{"no-labels":1}	2020-08-16 14:04:39.252706	0	\N	\N	\N	f
159	159		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
162	162		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
163	163		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
128	128		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:52.761773	0	\N	\N	\N	f
135	135		3	\N	1	f	f		{"no-labels":1}	2020-08-16 13:49:41.081749	0	\N	\N	\N	f
138	138		3	\N	1	f	f		{"no-labels":1}	2020-09-08 11:12:03.572608	0	\N	\N	\N	f
143	143		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
144	144		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
111	111		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:41:41.27327	0	\N	\N	\N	f
108	108		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:32.863217	0	\N	\N	\N	f
70	70		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:13:44.284356	0	\N	\N	\N	f
215	215		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
239	239		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
216	216		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
255	255		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:39:07.106133	0	\N	\N	\N	f
35	35		6	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:23.290377	0	\N	\N	\N	f
46	46		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:14.59113	0	\N	\N	\N	f
217	217		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:15.565761	0	\N	\N	\N	f
235	235		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
574	574		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
226	226		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:14:48.024592	0	\N	\N	\N	f
784	784		6	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
220	220		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:19.817891	0	\N	\N	\N	f
127	127		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:53.553357	0	\N	\N	\N	f
51	51		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:04:09.521144	0	\N	\N	\N	f
224	224		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
230	230		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:44.113959	0	\N	\N	\N	f
236	236		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:51.719402	0	\N	\N	\N	f
266	266		4	\N	1	f	f		{"no-labels":1}	2020-08-16 02:39:16.432513	0	\N	\N	\N	f
258	258		8	\N	1	f	f		{"no-labels":1}	2020-08-17 07:31:19.478487	0	\N	\N	\N	f
241	241		3	\N	1	f	f		{"no-labels":1}	2020-08-16 14:04:02.604501	0	\N	\N	\N	f
119	119		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:21:14.440936	0	\N	\N	\N	f
36	36		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:06.903193	0	\N	\N	\N	f
264	264		5	\N	1	f	f		{"no-labels":1}	2020-08-14 10:52:56.396434	0	\N	\N	\N	f
31	31		4	\N	1	f	f		{"no-labels":1}	2020-08-14 06:18:01.959873	0	\N	\N	\N	f
326	326		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:48.866821	0	\N	\N	\N	f
261	261		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:34:04.871953	0	\N	\N	\N	f
219	219		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:53:42.975002	0	\N	\N	\N	f
262	262		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:23:11.493248	0	\N	\N	\N	f
259	259		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:34:02.854883	0	\N	\N	\N	f
725	725		5	\N	1	f	f		{"no-labels":1}	2020-08-28 23:04:18.681496	0	\N	\N	\N	f
427	427		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:58.357214	0	\N	\N	\N	f
101	101		8	\N	1	f	f		{"no-labels":1}	2020-08-14 07:39:13.197489	0	\N	\N	\N	f
100	100		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:24:57.795664	0	\N	\N	\N	f
80	80		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:36.090921	0	\N	\N	\N	f
112	112		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:46.941182	0	\N	\N	\N	f
221	221		3	\N	1	f	f		{"no-labels":1}	2020-09-08 11:10:33.078709	0	\N	\N	\N	f
260	260		8	\N	1	f	f		{"no-labels":1}	2020-08-16 07:11:04.890791	0	\N	\N	\N	f
59	59		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:38.53288	0	\N	\N	\N	f
231	231		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
2	2		7	\N	1	f	f	uncategorized	{"no-labels":1}	2020-08-16 03:41:42.249031	0	\N	\N	\N	f
232	232		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:15:02.006268	0	\N	\N	\N	f
729	729		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:47.133142	0	\N	\N	\N	f
240	240		3	\N	1	f	f		{"no-labels":1}	2020-08-16 14:04:00.655312	0	\N	\N	\N	f
257	257		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:01.593254	0	\N	\N	\N	f
263	263		8	\N	1	f	f		{"no-labels":1}	2020-08-14 10:52:03.21806	0	\N	\N	\N	f
229	229		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:42.950324	0	\N	\N	\N	f
99	99		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:24:59.541624	0	\N	\N	\N	f
11	11		2	\N	1	f	f	compiler,go,gossafunc,programming,ssa	{"no-labels":1}	\N	0	\N	\N	\N	t
12	12		2	\N	1	f	f	compiler,go,interfaces,programming	{"no-labels":1}	2020-08-14 05:36:50.284205	0	\N	\N	\N	f
15	15		2	\N	1	f	f	go,inlining,optimisation,performance,programming	{"no-labels":1}	\N	0	\N	\N	\N	t
78	78		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:13:38.088104	0	\N	\N	\N	f
247	247		9	\N	1	f	f	uncategorized,动画,惊奇数学事实,算法,组合数学,虚数,证明,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
16	16		2	\N	1	f	f	go,inlining,optimisation,performance,programming	{"no-labels":1}	2020-08-14 05:36:53.122324	0	\N	\N	\N	f
23	23		2	\N	1	f	f	history,internets of interest	{"no-labels":1}	2020-08-14 05:36:58.614921	0	\N	\N	\N	f
39	39		6	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:19.28642	0	\N	\N	\N	f
248	248		9	\N	1	f	f	uncategorized,动画,组合数学,证明,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
30	30		2	\N	1	f	f	go,high performance go,training,workshop	{"no-labels":1}	2020-08-14 05:37:03.763626	0	\N	\N	\N	f
118	118		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
72	72		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:30.888751	0	\N	\N	\N	f
249	249		9	\N	1	f	f	uncategorized,博弈,惊奇数学事实,数列,游戏,算法,组合数学,证明,递归	{"no-labels":1}	\N	0	\N	\N	\N	t
250	250		9	\N	1	f	f	uncategorized,数论,证明	{"no-labels":1}	\N	0	\N	\N	\N	t
251	251		9	\N	1	f	f	uncategorized,动画,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
252	252		9	\N	1	f	f	uncategorized,惊奇数学事实,概率,证明,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
253	253		9	\N	1	f	f	uncategorized,图论,惊奇数学事实,算法,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
62	62		5	\N	1	f	f		{"no-labels":1}	2020-08-14 05:37:50.863434	0	\N	\N	\N	f
242	242		3	\N	1	f	f		{"no-labels":1}	2020-08-16 14:04:04.411474	0	\N	\N	\N	f
225	225		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:31.500295	0	\N	\N	\N	f
75	75		5	\N	1	f	f		{"no-labels":1}	2020-08-14 06:17:24.558526	0	\N	\N	\N	f
234	234		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
95	95		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:21.545764	0	\N	\N	\N	f
256	256		8	\N	1	f	f		{"no-labels":1}	2020-08-19 06:09:11.458793	0	\N	\N	\N	f
227	227		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:38.903544	0	\N	\N	\N	f
102	102		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:24:38.120616	0	\N	\N	\N	f
87	87		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:41:53.399389	0	\N	\N	\N	f
1	1		7	\N	1	f	f	uncategorized	{"no-labels":1}	2020-08-14 10:52:11.731148	0	\N	\N	\N	f
4	4		7	\N	1	f	f	hardware,performance,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
5	5		7	\N	1	f	f	distributed systems,operations,uncategorized	{"no-labels":1}	\N	0	\N	\N	\N	t
318	318		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:13.978992	0	\N	\N	\N	f
212	212		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:42.563371	0	\N	\N	\N	f
285	285		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:32:26.252567	0	\N	\N	\N	f
131	131		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:34.209187	0	\N	\N	\N	f
243	243		3	\N	1	f	f		{"no-labels":1}	2020-08-16 14:04:18.456752	0	\N	\N	\N	f
151	151		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:14:41.688137	0	\N	\N	\N	f
156	156		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:14:47.701811	0	\N	\N	\N	f
270	270		5	\N	1	f	f		{"no-labels":1}	2020-08-15 09:30:02.351247	0	\N	\N	\N	f
166	166		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:05.30739	0	\N	\N	\N	f
161	161		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:59:42.932591	0	\N	\N	\N	f
171	171		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:16:31.948724	0	\N	\N	\N	f
176	176		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:17:04.396129	0	\N	\N	\N	f
282	282		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:20:38.254966	0	\N	\N	\N	f
233	233		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:15:45.767203	0	\N	\N	\N	f
186	186		3	\N	1	f	f		{"no-labels":1}	2020-08-27 15:12:42.558564	0	\N	\N	\N	f
201	201		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:13.963688	0	\N	\N	\N	f
206	206		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:30.372848	0	\N	\N	\N	f
726	726		5	\N	1	f	f		{"no-labels":1}	2020-08-28 23:04:23.704755	0	\N	\N	\N	f
238	238		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
299	299		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:12.63805	0	\N	\N	\N	f
213	213		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:43.913722	0	\N	\N	\N	f
309	309		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:40.092865	0	\N	\N	\N	f
297	297		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:24.187796	0	\N	\N	\N	f
295	295		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:04.793633	0	\N	\N	\N	f
283	283		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:20:46.009878	0	\N	\N	\N	f
278	278		8	\N	1	f	f		{"no-labels":1}	2020-08-15 11:12:19.645959	0	\N	\N	\N	f
305	305		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:32:27.495738	0	\N	\N	\N	f
324	324		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:35.168412	0	\N	\N	\N	f
308	308		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:21.893986	0	\N	\N	\N	f
310	310		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:41.307171	0	\N	\N	\N	f
280	280		8	\N	1	f	f		{"no-labels":1}	2020-08-15 11:12:07.288584	0	\N	\N	\N	f
303	303		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:11.645601	0	\N	\N	\N	f
307	307		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:23.445319	0	\N	\N	\N	f
304	304		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:20.029227	0	\N	\N	\N	f
218	218		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
306	306		8	\N	1	f	f		{"no-labels":1}	2020-08-16 04:28:18.332181	0	\N	\N	\N	f
287	287		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:17:54.734347	0	\N	\N	\N	f
288	288		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:50.586333	0	\N	\N	\N	f
317	317		5	\N	1	f	f		{"no-labels":1}	2020-08-16 12:59:41.877541	0	\N	\N	\N	f
268	268		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:24.335624	0	\N	\N	\N	f
222	222		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:53:38.004977	0	\N	\N	\N	f
275	275		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:32:20.573599	0	\N	\N	\N	f
223	223		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
32	32		4	\N	1	f	f		{"no-labels":1}	2020-08-14 06:18:01.504337	0	\N	\N	\N	f
279	279		8	\N	1	f	f		{"no-labels":1}	2020-08-15 09:01:52.547958	0	\N	\N	\N	f
323	323		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:27:52.355206	0	\N	\N	\N	f
272	272		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:20:52.789461	0	\N	\N	\N	f
284	284		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:52.938781	0	\N	\N	\N	f
311	311		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:41.952982	0	\N	\N	\N	f
274	274		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:21:39.437608	0	\N	\N	\N	f
228	228		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
136	136		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:41.260517	0	\N	\N	\N	f
1075	1075		5	\N	1	f	f		{"no-labels":1}	2020-09-08 15:17:36.214923	0	\N	\N	\N	f
273	273		8	\N	1	f	f		{"no-labels":1}	2020-08-16 03:21:55.094381	0	\N	\N	\N	f
300	300		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:54.042668	0	\N	\N	\N	f
286	286		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:16:18.827588	0	\N	\N	\N	f
271	271		5	\N	1	f	f		{"no-labels":1}	2020-08-15 09:30:06.722461	0	\N	\N	\N	f
181	181		3	\N	1	f	f		{"no-labels":1}	2020-08-16 12:48:02.171257	0	\N	\N	\N	f
293	293		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:02.262331	0	\N	\N	\N	f
294	294		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:00.045548	0	\N	\N	\N	f
290	290		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:43.935577	0	\N	\N	\N	f
291	291		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:45.353717	0	\N	\N	\N	f
316	316		5	\N	1	f	f		{"no-labels":1}	2020-08-16 12:59:40.782422	0	\N	\N	\N	f
276	276		8	\N	1	f	f		{"no-labels":1}	2020-08-15 09:04:49.794169	0	\N	\N	\N	f
302	302		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:31:19.168601	0	\N	\N	\N	f
281	281		8	\N	1	f	f		{"no-labels":1}	2020-08-15 11:12:06.442927	0	\N	\N	\N	f
319	319		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:31.085126	0	\N	\N	\N	f
269	269		8	\N	1	f	f		{"no-labels":1}	2020-08-15 11:11:57.534063	0	\N	\N	\N	f
191	191		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:55:50.958351	0	\N	\N	\N	f
322	322		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:27:49.293081	0	\N	\N	\N	f
277	277		8	\N	1	f	f		{"no-labels":1}	2020-08-16 04:27:50.298984	0	\N	\N	\N	f
423	423		5	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
196	196		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:56:12.458372	0	\N	\N	\N	f
146	146		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:46.20745	0	\N	\N	\N	f
426	426		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:48.31352	0	\N	\N	\N	f
141	141		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
296	296		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:06.243815	0	\N	\N	\N	f
289	289		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:41.437213	0	\N	\N	\N	f
292	292		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:19:28.044676	0	\N	\N	\N	f
298	298		5	\N	1	f	f		{"no-labels":1}	2020-08-16 03:18:17.840631	0	\N	\N	\N	f
360	360		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:49.616553	0	\N	\N	\N	f
358	358		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:01.186428	0	\N	\N	\N	f
385	385		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:59.933313	0	\N	\N	\N	f
373	373		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:18.329093	0	\N	\N	\N	f
349	349		5	\N	1	f	f		{"no-labels":1}	2020-08-17 15:19:55.389897	0	\N	\N	\N	f
572	572		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
379	379		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:40:46.868979	0	\N	\N	\N	f
396	396		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:47.546059	0	\N	\N	\N	f
350	350		5	\N	1	f	f		{"no-labels":1}	2020-08-17 15:18:48.006456	0	\N	\N	\N	f
390	390		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:33.28661	0	\N	\N	\N	f
351	351		5	\N	1	f	f		{"no-labels":1}	2020-08-17 15:18:50.231639	0	\N	\N	\N	f
370	370		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:44.214223	0	\N	\N	\N	f
352	352		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:28.070359	0	\N	\N	\N	f
354	354		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:30:24.233749	0	\N	\N	\N	f
384	384		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:27.431644	0	\N	\N	\N	f
331	331		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:30:46.500491	0	2020-08-17 04:54:25.669486	\N	\N	f
327	327		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:51.301975	0	\N	\N	\N	f
356	356		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:25.525682	0	\N	\N	\N	f
340	340		8	\N	1	f	f		{"no-labels":1}	2020-08-17 04:54:39.458459	0	\N	\N	\N	f
332	332		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:43.561842	0	\N	\N	\N	f
329	329		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:54.282175	0	\N	\N	\N	f
333	333		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:44.252306	0	\N	\N	\N	f
335	335		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:46.257714	0	\N	\N	\N	f
382	382		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:03.459911	0	\N	\N	\N	f
336	336		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:59.586528	0	\N	\N	\N	f
88	88		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:20:12.062624	0	\N	\N	\N	f
339	339		8	\N	1	f	f		{"no-labels":1}	2020-08-17 05:07:56.870525	0	\N	\N	\N	f
330	330		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:42.158926	0	\N	\N	\N	f
353	353		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:29.760669	0	\N	\N	\N	f
338	338		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:44.480893	0	\N	\N	\N	f
343	343		8	\N	1	f	f		{"no-labels":1}	2020-08-17 06:33:09.641704	0	\N	\N	\N	f
347	347		8	\N	1	f	f		{"no-labels":1}	2020-08-17 06:42:30.197528	0	\N	\N	\N	f
345	345		8	\N	1	f	f		{"no-labels":1}	2020-08-17 06:33:08.983663	0	\N	\N	\N	f
346	346		8	\N	1	f	f		{"no-labels":1}	2020-08-17 06:41:43.356118	0	\N	\N	\N	f
374	374		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:17.494626	0	\N	\N	\N	f
393	393		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:42.743789	0	\N	\N	\N	f
392	392		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:40.080811	0	\N	\N	\N	f
407	407		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:41:31.813581	0	\N	\N	\N	f
834	834		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:25:08.549921	0	\N	\N	\N	f
364	364		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:37.942577	0	\N	\N	\N	f
404	404		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:20.391591	0	\N	\N	\N	f
405	405		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:22.689323	0	\N	\N	\N	f
344	344		8	\N	1	f	f		{"no-labels":1}	2020-08-17 06:33:07.742794	0	\N	\N	\N	f
348	348		5	\N	1	f	f		{"no-labels":1}	2020-08-17 15:18:58.243767	0	\N	\N	\N	f
328	328		8	\N	1	f	f		{"no-labels":1}	2020-08-17 04:12:56.188514	0	\N	\N	\N	f
386	386		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:02.040034	0	\N	\N	\N	f
394	394		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:43.943287	0	\N	\N	\N	f
391	391		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:35.586022	0	\N	\N	\N	f
408	408		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:25.491025	0	\N	\N	\N	f
106	106		8	\N	1	f	f		{"no-labels":1}	2020-08-14 06:22:50.837941	0	\N	\N	\N	f
378	378		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:30.490707	0	\N	\N	\N	f
401	401		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:19.38763	0	\N	\N	\N	f
355	355		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:24.9708	0	\N	\N	\N	f
389	389		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:31.291982	0	\N	\N	\N	f
377	377		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:52:34.094614	0	\N	\N	\N	f
362	362		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:49.018657	0	\N	\N	\N	f
341	341		8	\N	1	f	f		{"no-labels":1}	2020-08-17 15:18:39.086021	0	\N	\N	\N	t
372	372		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:18.762224	0	\N	\N	\N	f
342	342		5	\N	1	f	f		{"no-labels":1}	2020-08-17 06:41:19.694046	0	\N	\N	\N	f
388	388		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:21.39267	0	\N	\N	\N	f
365	365		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:47.962285	0	\N	\N	\N	f
395	395		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:46.181195	0	\N	\N	\N	f
357	357		5	\N	1	f	f		{"no-labels":1}	2020-08-18 03:30:27.543889	0	\N	\N	\N	f
369	369		8	\N	1	f	f		{"no-labels":1}	2020-08-18 06:03:53.371624	0	\N	\N	\N	f
312	312		6	\N	1	f	f		{"no-labels":1}	2020-08-16 08:08:00.938586	0	\N	\N	\N	f
214	214		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:45.568218	0	\N	\N	\N	f
367	367		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:40.829419	0	\N	\N	\N	f
376	376		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:52:33.490417	0	\N	\N	\N	f
366	366		8	\N	1	f	f		{"no-labels":1}	2020-08-18 06:03:36.779571	0	\N	\N	\N	f
368	368		8	\N	1	f	f		{"no-labels":1}	2020-08-18 06:03:52.326135	0	\N	\N	\N	f
371	371		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:45.934428	0	\N	\N	\N	f
380	380		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:41:27.190787	0	\N	\N	\N	f
337	337		5	\N	1	f	f		{"no-labels":1}	2020-08-17 02:27:39.464826	0	\N	\N	\N	f
399	399		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:56.73798	0	\N	\N	\N	f
381	381		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:52:35.016461	0	\N	\N	\N	f
359	359		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:32:51.006298	0	\N	\N	\N	f
363	363		8	\N	1	f	f		{"no-labels":1}	2020-08-18 06:02:59.235451	0	\N	\N	\N	f
361	361		8	\N	1	f	f		{"no-labels":1}	2020-08-18 03:31:34.709742	0	\N	\N	\N	f
375	375		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:27.540138	0	\N	\N	\N	f
397	397		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:52.239014	0	\N	\N	\N	f
406	406		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:41:32.739523	0	\N	\N	\N	f
478	478		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:29:56.73263	0	\N	\N	\N	f
254	254		8	\N	1	f	f		{"no-labels":1}	2020-08-16 04:30:03.209962	0	\N	\N	\N	f
480	480		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:31.883737	0	\N	\N	\N	f
459	459		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:41.098394	0	\N	\N	\N	f
433	433		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:32.589915	0	\N	\N	\N	f
445	445		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:29:23.748535	0	\N	\N	\N	f
403	403		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:52:23.441308	0	\N	\N	\N	f
437	437		8	\N	1	f	f		{"no-labels":1}	2020-08-20 11:34:45.116083	0	\N	\N	\N	f
428	428		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:57.605779	0	\N	\N	\N	f
434	434		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:29:26.299509	0	\N	\N	\N	f
486	486		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:06.677843	0	\N	\N	\N	f
325	325		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:28:48.130884	0	\N	\N	\N	f
461	461		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:08.238014	0	\N	\N	\N	f
463	463		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:16:46.101273	0	\N	\N	\N	f
438	438		8	\N	1	f	f		{"no-labels":1}	2020-08-20 06:26:17.81377	0	\N	\N	\N	f
447	447		8	\N	1	f	f		{"no-labels":1}	2020-08-20 11:34:33.285544	0	\N	\N	\N	f
464	464		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:16:46.976513	0	\N	\N	\N	f
449	449		8	\N	1	f	f		{"no-labels":1}	2020-08-20 06:03:52.254185	0	\N	\N	\N	f
482	482		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:16:44.183015	0	\N	\N	\N	f
1082	1082		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:28:01.985929	0	\N	\N	\N	f
466	466		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:16:48.861808	0	\N	\N	\N	f
450	450		8	\N	1	f	f		{"no-labels":1}	2020-08-20 11:35:19.339525	0	\N	\N	\N	f
467	467		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:53.132247	0	\N	\N	\N	f
471	471		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:17:09.144743	0	\N	\N	\N	f
444	444		8	\N	1	f	f		{"no-labels":1}	2020-08-20 06:29:02.549064	0	\N	\N	\N	f
442	442		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:31:06.389116	0	\N	\N	\N	t
398	398		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:55.712637	0	\N	\N	\N	f
469	469		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:53.983934	0	\N	\N	\N	f
462	462		8	\N	1	f	f		{"no-labels":1}	2020-08-28 12:13:31.10637	0	\N	\N	\N	f
440	440		8	\N	1	f	f		{"no-labels":1}	2020-08-20 11:21:17.91556	0	\N	\N	\N	f
470	470		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:17:00.059897	0	\N	\N	\N	f
476	476		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:04.726496	0	\N	\N	\N	f
472	472		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:54.740284	0	\N	\N	\N	f
415	415		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:35:31.378571	0	\N	\N	\N	f
475	475		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:03.791439	0	\N	\N	\N	f
473	473		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:22:58.147936	0	\N	\N	\N	f
429	429		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:56.100263	0	\N	\N	\N	f
439	439		8	\N	1	f	f		{"no-labels":1}	2020-08-20 10:07:52.142542	0	\N	\N	\N	f
474	474		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:03.034266	0	\N	\N	\N	f
458	458		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:41.802034	0	\N	\N	\N	f
416	416		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:38:52.920751	0	\N	\N	\N	f
414	414		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:43:33.191648	0	\N	\N	\N	f
409	409		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:49:43.838343	0	\N	\N	\N	f
418	418		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:38:54.68826	0	\N	\N	\N	f
485	485		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:03.597118	0	\N	\N	\N	f
412	412		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:49:00.567825	0	\N	\N	\N	f
417	417		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:38:53.738441	0	\N	\N	\N	f
413	413		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:48:59.230758	0	\N	\N	\N	f
420	420		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:04.749475	0	\N	\N	\N	f
419	419		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:07.537398	0	\N	\N	\N	f
421	421		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:49:02.402988	0	\N	\N	\N	f
425	425		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:51.708393	0	\N	\N	\N	f
431	431		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:52.900422	0	\N	\N	\N	f
477	477		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:05.279497	0	\N	\N	\N	f
577	577		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
457	457		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:45.051167	0	\N	\N	\N	f
481	481		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:36.831238	0	\N	\N	\N	f
430	430		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:31:01.898777	0	\N	\N	\N	f
460	460		5	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:39.19565	0	\N	\N	\N	f
424	424		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:34:37.555748	0	\N	\N	\N	f
446	446		5	\N	1	f	f		{"no-labels":1}	2020-08-20 06:29:07.702842	0	\N	\N	\N	f
848	848		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:22:09.769325	0	\N	\N	\N	f
432	432		5	\N	1	f	f		{"no-labels":1}	2020-08-24 15:14:14.195127	0	\N	\N	\N	t
441	441		8	\N	1	f	f		{"no-labels":1}	2020-08-20 11:34:27.485083	0	\N	\N	\N	f
479	479		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:07.0062	0	\N	\N	\N	f
126	126		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:55.161244	0	\N	\N	\N	f
451	451		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:22:09.787055	0	\N	\N	\N	f
37	37		6	\N	1	f	f		{"no-labels":1}	2020-08-14 06:08:16.001963	0	\N	\N	\N	f
211	211		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:40.755534	0	\N	\N	\N	f
448	448		8	\N	1	f	f		{"no-labels":1}	2020-08-20 06:28:52.758776	0	\N	\N	\N	f
455	455		8	\N	1	f	f		{"no-labels":1}	2020-08-20 14:16:43.338098	0	\N	\N	\N	f
443	443		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:22:04.604705	0	\N	\N	\N	f
400	400		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:15.943146	0	\N	\N	\N	f
576	576		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
453	453		8	\N	1	f	f		{"no-labels":1}	2020-08-20 14:16:59.520986	0	\N	\N	\N	f
456	456		8	\N	1	f	f		{"no-labels":1}	2020-08-20 14:17:02.703051	0	\N	\N	\N	f
454	454		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:21:10.784436	0	\N	\N	\N	f
334	334		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:31:08.484507	0	\N	\N	\N	t
452	452		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:31:11.001627	0	\N	\N	\N	f
383	383		5	\N	1	f	f		{"no-labels":1}	2020-08-19 05:42:24.405024	0	\N	\N	\N	f
513	513		8	\N	1	f	f		{"no-labels":1}	2020-08-22 12:26:07.288615	0	\N	\N	\N	f
500	500		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:21.041355	0	\N	\N	\N	f
552	552		8	\N	1	f	f		{"no-labels":1}	2020-08-24 03:06:38.653772	0	\N	\N	\N	f
566	566		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:25:47.229132	0	\N	\N	\N	f
522	522		5	\N	1	f	f		{"no-labels":1}	2020-08-23 05:20:09.06694	0	\N	\N	\N	f
245	245		9	\N	1	f	f	uncategorized,动画,同余,游戏,组合数学,视频,证明	{"no-labels":1}	\N	0	\N	\N	\N	t
502	502		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:18.511592	0	\N	\N	\N	f
521	521		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:25:44.397731	0	\N	\N	\N	f
120	120		3	\N	1	f	f		{"no-labels":1}	2020-08-28 00:53:10.314573	0	\N	\N	\N	f
525	525		5	\N	1	f	f		{"no-labels":1}	2020-08-23 05:20:10.453695	0	\N	\N	\N	f
547	547		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:46.952733	0	\N	\N	\N	f
505	505		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:15.946291	0	\N	\N	\N	f
495	495		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:10:03.818481	0	\N	\N	\N	f
509	509		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:25:56.477992	0	\N	\N	\N	f
537	537		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:53.025759	0	\N	\N	\N	f
535	535		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:50.189479	0	\N	\N	\N	f
538	538		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:55.322157	0	\N	\N	\N	f
503	503		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:11.987228	0	\N	\N	\N	f
487	487		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:07.949231	0	\N	\N	\N	f
546	546		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:45.13239	0	\N	\N	\N	f
541	541		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:49.48689	0	\N	\N	\N	f
536	536		6	\N	1	f	f		{"no-labels":1}	2020-08-23 05:43:45.10256	0	\N	\N	\N	f
483	483		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:06:31.061707	0	\N	\N	\N	f
540	540		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:50.033509	0	\N	\N	\N	f
523	523		5	\N	1	f	f		{"no-labels":1}	2020-08-23 05:20:09.544983	0	\N	\N	\N	f
868	868		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:40.136028	0	\N	\N	\N	f
488	488		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:29.019436	0	\N	\N	\N	f
497	497		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:13.498908	0	\N	\N	\N	f
543	543		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:29:16.017949	0	\N	\N	\N	f
550	550		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:25:33.526304	0	\N	\N	\N	f
504	504		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:14.696724	0	\N	\N	\N	f
508	508		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:06.177206	0	\N	\N	\N	f
556	556		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:29:05.284435	0	\N	\N	\N	f
237	237		3	\N	1	f	f		{"no-labels":1}	2020-08-21 14:00:52.912849	0	\N	\N	\N	f
549	549		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:48.983262	0	\N	\N	\N	f
491	491		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:32.797686	0	\N	\N	\N	f
554	554		8	\N	1	f	f		{"no-labels":1}	2020-08-24 03:06:49.001538	0	\N	\N	\N	f
555	555		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:27:01.01025	0	\N	\N	\N	f
553	553		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:26:59.777101	0	\N	\N	\N	f
544	544		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:29:07.48099	0	\N	\N	\N	f
410	410		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:52:24.943295	0	\N	\N	\N	t
558	558		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:29:01.803034	0	\N	\N	\N	f
539	539		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:52.172133	0	\N	\N	\N	f
515	515		8	\N	1	f	f		{"no-labels":1}	2020-08-22 12:26:09.795746	0	\N	\N	\N	f
484	484		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:06:31.654912	0	\N	\N	\N	f
530	530		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:45.039568	0	\N	\N	\N	f
517	517		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
496	496		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:12:08.605434	0	\N	\N	\N	f
246	246		9	\N	1	f	f	uncategorized,图论,惊奇数学事实,组合数学,趣题	{"no-labels":1}	\N	0	\N	\N	\N	t
489	489		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:29.696802	0	\N	\N	\N	f
516	516		8	\N	1	f	f		{"no-labels":1}	2020-08-22 12:26:11.66333	0	\N	\N	\N	f
494	494		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:09:59.108508	0	\N	\N	\N	f
528	528		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
493	493		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:36.464164	0	\N	\N	\N	f
520	520		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:25:53.899321	0	\N	\N	\N	f
40	40		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:02:08.829665	0	\N	\N	\N	f
402	402		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:39:18.538636	0	\N	\N	\N	f
498	498		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:02:51.530989	0	\N	\N	\N	f
545	545		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
565	565		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:25:02.728481	0	\N	\N	\N	f
524	524		5	\N	1	f	f		{"no-labels":1}	2020-08-23 05:20:09.982951	0	\N	\N	\N	f
506	506		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:06.967621	0	\N	\N	\N	f
121	121		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
122	122		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:53:01.281105	0	\N	\N	\N	f
532	532		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:33.706534	0	\N	\N	\N	f
527	527		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:38.2026	0	\N	\N	\N	f
727	727		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:33:15.684986	0	\N	\N	\N	f
529	529		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:40.408562	0	\N	\N	\N	f
534	534		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:49.503106	0	\N	\N	\N	f
501	501		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:27:09.512494	0	\N	\N	\N	f
557	557		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:29:02.821988	0	\N	\N	\N	f
519	519		5	\N	1	f	f		{"no-labels":1}	2020-08-22 12:25:57.700376	0	\N	\N	\N	f
526	526		5	\N	1	f	f		{"no-labels":1}	2020-08-23 05:20:10.895556	0	\N	\N	\N	f
512	512		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:41:04.840464	0	\N	\N	\N	f
208	208		3	\N	1	f	f		{"no-labels":1}	2020-09-08 11:10:26.808522	0	\N	\N	\N	t
531	531		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:44.1874	0	\N	\N	\N	f
533	533		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:19:47.596419	0	\N	\N	\N	f
435	435		8	\N	1	f	f		{"no-labels":1}	2020-08-20 14:17:05.031851	0	\N	\N	\N	f
387	387		3	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
490	490		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:30.324768	0	\N	\N	\N	f
492	492		5	\N	1	f	f		{"no-labels":1}	2020-08-21 13:07:34.88188	0	\N	\N	\N	f
1068	1068		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:25.466902	0	\N	\N	\N	f
514	514		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:43:29.685507	0	\N	\N	\N	t
696	696		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:50:54.391293	0	\N	\N	\N	f
599	599		8	\N	1	f	f		{"no-labels":1}	2020-08-25 08:43:08.363413	0	\N	\N	\N	f
598	598		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:29:01.552466	0	\N	\N	\N	f
652	652		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:10:03.472975	0	\N	\N	\N	f
600	600		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:29:23.501419	0	\N	\N	\N	f
559	559		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:05:30.507209	0	\N	\N	\N	f
656	656		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:09:37.854242	0	\N	\N	\N	f
624	624		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:47.089299	0	\N	\N	\N	f
639	639		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:31.594744	0	\N	\N	\N	f
718	718		5	\N	1	f	f		{"no-labels":1}	2020-08-28 11:44:16.735747	0	\N	\N	\N	f
560	560		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:25:38.866882	0	\N	\N	\N	f
563	563		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:33:03.329155	0	\N	\N	\N	f
564	564		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:25:41.646457	0	\N	\N	\N	f
562	562		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:25:02.17861	0	\N	\N	\N	f
561	561		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:25:39.371645	0	\N	\N	\N	f
605	605		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:29.000386	0	\N	\N	\N	f
660	660		8	\N	1	f	f		{"no-labels":1}	2020-08-28 12:05:44.202201	0	\N	\N	\N	f
510	510		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:27:58.707178	0	\N	\N	\N	f
708	708		8	\N	1	f	f		{"no-labels":1}	2020-08-28 03:59:15.309532	0	\N	\N	\N	f
707	707		8	\N	1	f	f		{"no-labels":1}	2020-08-28 03:59:37.768254	0	\N	\N	\N	f
709	709		8	\N	1	f	f		{"no-labels":1}	2020-08-28 03:59:14.398528	0	\N	\N	\N	f
710	710		8	\N	1	f	f		{"no-labels":1}	2020-08-28 03:58:47.201907	0	\N	\N	\N	f
711	711		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
716	716		8	\N	1	f	f		{"no-labels":1}	2020-08-28 04:30:40.385119	0	\N	\N	\N	f
717	717		8	\N	1	f	f		{"no-labels":1}	2020-08-28 04:30:41.78769	0	\N	\N	\N	t
665	665		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:19:10.864694	0	\N	\N	\N	f
712	712		8	\N	1	f	f		{"no-labels":1}	2020-08-28 03:59:25.510878	0	\N	\N	\N	f
715	715		8	\N	1	f	f		{"no-labels":1}	2020-08-28 04:30:40.284099	0	\N	\N	\N	f
411	411		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:49:03.066093	0	\N	\N	\N	f
654	654		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:09:59.390342	0	\N	\N	\N	f
728	728		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:49.491675	0	\N	\N	\N	f
596	596		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:58.232635	0	\N	\N	\N	f
669	669		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:19:51.885988	0	\N	\N	\N	f
714	714		8	\N	1	f	f		{"no-labels":1}	2020-08-28 04:30:42.564887	0	\N	\N	\N	f
663	663		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:02:40.101698	0	\N	\N	\N	f
719	719		5	\N	1	f	f		{"no-labels":1}	2020-08-28 11:43:27.540121	0	\N	\N	\N	f
667	667		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:21:43.761352	0	\N	\N	\N	f
621	621		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:13.385468	0	\N	\N	\N	f
658	658		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:42:03.203136	0	\N	\N	\N	f
616	616		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:52.380304	0	\N	\N	\N	f
697	697		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:01.199117	0	\N	\N	\N	f
698	698		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:21.164915	0	\N	\N	\N	f
613	613		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:38.675583	0	\N	\N	\N	f
643	643		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:43.731488	0	\N	\N	\N	f
679	679		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:59.180758	0	\N	\N	\N	f
683	683		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:52:21.133795	0	\N	\N	\N	f
720	720		6	\N	1	f	f		{"no-labels":1}	2020-08-30 00:47:29.779492	0	\N	\N	\N	f
436	436		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:33:26.836978	0	\N	\N	\N	t
604	604		10	\N	1	f	f		{"no-labels":1}	2020-08-27 15:17:40.754009	0	\N	\N	\N	t
623	623		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:11.551099	0	\N	\N	\N	f
668	668		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:21:56.904514	0	\N	\N	\N	f
617	617		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:56.17283	0	\N	\N	\N	f
625	625		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:45.981988	0	\N	\N	\N	f
595	595		8	\N	1	f	f		{"no-labels":1}	2020-08-25 08:43:13.533362	0	\N	\N	\N	f
619	619		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:00.699788	0	\N	\N	\N	f
670	670		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:21:57.626864	0	\N	\N	\N	f
620	620		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:03.900576	0	\N	\N	\N	f
618	618		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:58.625305	0	\N	\N	\N	f
626	626		5	\N	1	f	f			2020-08-26 05:27:44.949239	0	\N	\N	\N	f
672	672		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:19:48.287823	0	\N	\N	\N	f
648	648		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
659	659		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:56.135796	0	\N	\N	\N	f
640	640		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:21.186954	0	\N	\N	\N	f
642	642		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:42.625474	0	\N	\N	\N	f
641	641		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:03.936916	0	\N	\N	\N	f
622	622		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:12.72447	0	\N	\N	\N	f
615	615		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:49.043252	0	\N	\N	\N	f
645	645		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:41:45.12444	0	\N	\N	\N	f
646	646		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:41:47.384369	0	\N	\N	\N	f
647	647		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:41:49.485314	0	\N	\N	\N	f
614	614		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:26:43.012281	0	\N	\N	\N	f
606	606		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:29.72699	0	\N	\N	\N	f
580	580		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:24:40.916444	0	\N	\N	\N	f
611	611		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:41.725799	0	\N	\N	\N	f
583	583		5	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:07.094963	0	\N	\N	\N	f
662	662		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:58.28727	0	\N	\N	\N	f
661	661		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:57.835772	0	\N	\N	\N	f
597	597		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:03:58.505563	0	\N	\N	\N	f
664	664		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:58.794077	0	\N	\N	\N	f
655	655		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:09:38.004975	0	\N	\N	\N	f
713	713		8	\N	1	f	f		{"no-labels":1}	2020-08-28 04:30:02.679673	0	\N	\N	\N	f
702	702		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:16:41.680241	0	\N	\N	\N	f
627	627		5	\N	1	f	f		{"no-labels":1}	2020-08-26 02:26:49.534832	0	\N	\N	\N	f
610	610		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:51.982615	0	\N	\N	\N	f
590	590		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:23.851004	0	\N	\N	\N	f
701	701		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:19:05.946434	0	\N	\N	\N	f
591	591		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:24.857108	0	\N	\N	\N	f
567	567		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:25:47.820479	0	\N	\N	\N	f
579	579		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:24:42.547555	0	\N	\N	\N	f
589	589		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:28.099419	0	\N	\N	\N	f
594	594		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:22.911819	0	\N	\N	\N	f
593	593		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:21.394308	0	\N	\N	\N	f
587	587		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:29:19.6538	0	\N	\N	\N	f
592	592		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:20.259012	0	\N	\N	\N	f
602	602		8	\N	1	f	f		{"no-labels":1}	2020-08-25 08:43:12.114819	0	\N	\N	\N	f
601	601		8	\N	1	f	f		{"no-labels":1}	2020-08-25 08:43:11.079554	0	\N	\N	\N	f
657	657		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:09:36.991878	0	\N	\N	\N	f
608	608		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:26.291669	0	\N	\N	\N	f
633	633		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:02:58.672458	0	\N	\N	\N	f
673	673		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:09:02.97232	0	\N	\N	\N	f
603	603		8	\N	1	f	f		{"no-labels":1}	2020-08-25 08:43:00.84426	0	\N	\N	\N	f
699	699		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:14:51.053648	0	\N	\N	\N	f
706	706		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:14:41.344479	0	\N	\N	\N	f
575	575		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
644	644		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:10:05.821235	0	\N	\N	\N	f
835	835		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:21:14.880598	0	\N	\N	\N	f
588	588		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:07:32.697835	0	\N	\N	\N	t
637	637		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:24:01.254663	0	\N	\N	\N	f
705	705		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:18:46.65386	0	\N	\N	\N	f
548	548		5	\N	1	f	f		{"no-labels":1}	2020-08-24 07:32:47.663906	0	\N	\N	\N	f
704	704		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:14:36.400856	0	\N	\N	\N	f
551	551		8	\N	1	f	f		{"no-labels":1}	2020-08-24 03:05:27.15244	0	\N	\N	\N	f
570	570		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
686	686		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:25.78413	0	\N	\N	\N	f
650	650		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:10:04.863332	0	\N	\N	\N	f
703	703		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:14:44.203885	0	\N	\N	\N	f
688	688		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:43.462574	0	\N	\N	\N	f
649	649		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:10:04.302889	0	\N	\N	\N	f
680	680		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:40:11.211641	0	\N	\N	\N	f
628	628		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:53.493171	0	\N	\N	\N	f
684	684		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:30.861365	0	\N	\N	\N	f
573	573		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
571	571		10	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
682	682		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:52:34.272185	0	\N	\N	\N	f
685	685		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:24.532221	0	\N	\N	\N	f
700	700		8	\N	1	f	f		{"no-labels":1}	2020-08-28 02:14:11.474299	0	\N	\N	\N	f
585	585		8	\N	1	f	f		{"no-labels":1}	2020-08-27 15:04:09.088387	0	\N	\N	\N	f
586	586		8	\N	1	f	f		{"no-labels":1}	2020-08-25 06:29:20.602186	0	\N	\N	\N	f
581	581		5	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:09.298096	0	\N	\N	\N	f
671	671		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:19:33.22955	0	\N	\N	\N	f
568	568		10	\N	1	f	f		{"no-labels":1}	2020-08-27 15:17:37.287588	0	\N	\N	\N	t
321	321		8	\N	1	f	f		{"no-labels":1}	2020-08-19 05:56:35.892612	0	\N	\N	\N	f
320	320		8	\N	1	f	f		{"no-labels":1}	2020-08-17 02:29:49.20015	0	\N	\N	\N	f
607	607		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:25.73125	0	\N	\N	\N	f
578	578		5	\N	1	f	f		{"no-labels":1}	2020-08-24 14:24:44.863794	0	\N	\N	\N	f
630	630		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:51.436551	0	\N	\N	\N	f
635	635		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:57.614462	0	\N	\N	\N	f
631	631		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:47.562113	0	\N	\N	\N	f
634	634		8	\N	1	f	f		{"no-labels":1}	2020-08-26 05:28:45.252123	0	\N	\N	\N	f
636	636		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:59.241568	0	\N	\N	\N	f
687	687		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:46.580843	0	\N	\N	\N	f
609	609		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:48.44618	0	\N	\N	\N	f
693	693		5	\N	1	f	f			2020-08-28 00:52:11.974428	0	\N	\N	\N	f
638	638		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:24:02.403173	0	\N	\N	\N	f
582	582		5	\N	1	f	f		{"no-labels":1}	2020-08-25 06:30:11.516847	0	\N	\N	\N	f
694	694		5	\N	1	f	f			2020-08-28 00:52:13.31811	0	\N	\N	\N	f
584	584		5	\N	1	f	f		{"no-labels":1}	2020-08-25 06:29:59.800659	0	\N	\N	\N	f
653	653		5	\N	1	f	f		{"no-labels":1}	2020-08-27 14:10:01.140957	0	\N	\N	\N	f
632	632		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:48.802825	0	\N	\N	\N	f
651	651		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:41:42.975507	0	\N	\N	\N	f
612	612		5	\N	1	f	f		{"no-labels":1}	2020-08-26 05:27:42.229081	0	\N	\N	\N	f
695	695		5	\N	1	f	f			2020-08-28 00:52:15.529851	0	\N	\N	\N	f
692	692		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:53.512716	0	\N	\N	\N	f
690	690		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:39.994859	0	\N	\N	\N	f
674	674		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:40:46.938955	0	\N	\N	\N	f
676	676		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:15.764793	0	\N	\N	\N	f
675	675		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:17.026626	0	\N	\N	\N	f
677	677		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:51.216833	0	\N	\N	\N	f
678	678		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:08:33.796837	0	\N	\N	\N	f
689	689		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:36.667522	0	\N	\N	\N	f
691	691		5	\N	1	f	f		{"no-labels":1}	2020-08-28 00:51:50.133634	0	\N	\N	\N	f
779	779		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
750	750		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:25:14.453222	0	\N	\N	\N	f
792	792		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:38:55.893138	0	\N	\N	\N	f
765	765		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:12.876542	0	\N	\N	\N	f
803	803		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:49.103943	0	\N	\N	\N	f
754	754		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:37:00.827781	0	\N	\N	\N	f
511	511		8	\N	1	f	f		{"no-labels":1}	2020-08-23 05:33:05.860495	0	\N	\N	\N	f
753	753		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:25:05.666302	0	\N	\N	\N	f
799	799		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:39.233273	0	\N	\N	\N	f
802	802		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:53.406341	0	\N	\N	\N	f
763	763		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:07.779695	0	\N	\N	\N	f
776	776		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:35:50.931194	0	\N	\N	\N	f
767	767		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:07.812426	0	\N	\N	\N	f
772	772		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:35:46.759115	0	\N	\N	\N	f
793	793		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:38:17.91526	0	\N	\N	\N	f
800	800		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:41.101418	0	\N	\N	\N	f
771	771		8	\N	1	f	f		{"no-labels":1}	2020-09-07 00:05:25.102764	0	\N	\N	\N	f
752	752		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:24:58.679358	0	\N	\N	\N	f
723	723		5	\N	1	f	f		{"no-labels":1}	2020-08-28 23:05:20.893745	0	\N	\N	\N	f
796	796		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:35.633412	0	\N	\N	\N	f
879	879		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:30.171388	0	\N	\N	\N	f
786	786		8	\N	1	f	f		{"no-labels":1}	2020-09-01 15:38:19.709726	0	\N	\N	\N	f
795	795		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:50.886984	0	\N	\N	\N	f
778	778		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
756	756		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:09.826377	0	\N	\N	\N	f
791	791		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:38:03.082285	0	\N	\N	\N	f
790	790		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:22:54.008674	0	\N	\N	\N	f
47	47		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:17.446502	0	\N	\N	\N	f
757	757		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:18.484649	0	\N	\N	\N	f
746	746		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:18.143041	0	\N	\N	\N	f
769	769		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:38:28.322264	0	\N	\N	\N	f
782	782		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:58.567004	0	\N	\N	\N	f
794	794		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:58.95079	0	\N	\N	\N	f
787	787		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
797	797		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:32.649237	0	\N	\N	\N	f
44	44		6	\N	1	f	f		{"no-labels":1}	2020-08-16 03:27:09.687935	0	\N	\N	\N	f
805	805		5	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:20.056925	0	\N	\N	\N	f
768	768		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:06.394146	0	\N	\N	\N	f
766	766		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:09.461163	0	\N	\N	\N	f
301	301		8	\N	1	f	f		{"no-labels":1}	2020-08-16 02:29:47.515363	0	\N	\N	\N	f
785	785		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:38:54.715368	0	\N	\N	\N	f
45	45		6	\N	1	f	f		{"no-labels":1}	2020-08-16 13:01:52.07898	0	\N	\N	\N	f
736	736		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:28:12.972417	0	\N	\N	\N	f
880	880		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:31.390171	0	\N	\N	\N	f
788	788		8	\N	1	f	f		{"no-labels":1}	2020-09-07 00:05:03.247209	0	\N	\N	\N	f
747	747		6	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
773	773		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
760	760		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:24.619991	0	\N	\N	\N	f
758	758		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:25.165919	0	\N	\N	\N	f
737	737		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:42.79162	0	\N	\N	\N	f
822	822		8	\N	1	f	f		{"no-labels":1}	2020-09-07 01:38:58.195284	0	\N	\N	\N	f
735	735		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:44.558998	0	\N	\N	\N	f
722	722		4	\N	1	f	f		{"no-labels":1}	2020-09-08 11:50:33.109755	0	\N	\N	\N	t
733	733		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:30:56.01454	0	\N	\N	\N	f
734	734		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:33:13.726908	0	\N	\N	\N	f
731	731		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:33:19.578792	0	\N	\N	\N	f
730	730		8	\N	1	f	f		{"no-labels":1}	2020-08-30 00:33:20.992139	0	\N	\N	\N	f
721	721		5	\N	1	f	f		{"no-labels":1}	2020-08-28 11:42:20.315663	0	\N	\N	\N	f
761	761		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:32.324801	0	\N	\N	\N	f
770	770		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:53.427717	0	\N	\N	\N	f
751	751		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:25:39.411462	0	\N	\N	\N	f
745	745		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:28:15.875319	0	\N	\N	\N	f
732	732		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:54.218124	0	\N	\N	\N	t
739	739		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:13.878571	0	\N	\N	\N	f
744	744		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:40.636884	0	\N	\N	\N	f
743	743		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:27.459651	0	\N	\N	\N	f
738	738		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:11.890926	0	\N	\N	\N	f
764	764		5	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:12.359104	0	\N	\N	\N	f
748	748		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:06.877141	0	\N	\N	\N	f
780	780		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:38:00.71542	0	\N	\N	\N	f
762	762		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:13.418366	0	\N	\N	\N	f
759	759		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:36:57.36429	0	\N	\N	\N	f
789	789		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
724	724		5	\N	1	f	f		{"no-labels":1}	2020-08-28 23:04:22.408607	0	\N	\N	\N	f
741	741		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:21.467817	0	\N	\N	\N	f
749	749		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:00.113676	0	\N	\N	\N	f
740	740		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:17.120825	0	\N	\N	\N	f
742	742		5	\N	1	f	f		{"no-labels":1}	2020-08-30 00:26:24.204823	0	\N	\N	\N	f
775	775		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:35:51.526897	0	\N	\N	\N	f
783	783		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:37:40.276744	0	\N	\N	\N	f
774	774		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:38:40.161748	0	\N	\N	\N	f
984	984		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:24:54.625401	0	\N	\N	\N	f
987	987		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:19.863354	0	\N	\N	\N	f
846	846		8	\N	1	f	f		{"no-labels":1}	2020-09-03 01:10:15.393394	0	\N	\N	\N	f
933	933		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:23:36.01382	0	\N	\N	\N	f
1001	1001		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:57.938487	0	\N	\N	\N	f
892	892		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:01.163246	0	\N	\N	\N	f
975	975		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:55:39.347985	0	\N	\N	\N	f
976	976		11	\N	1	f	f		{"no-labels":1}	2020-09-07 00:04:11.712381	0	\N	\N	\N	f
989	989		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:38.591042	0	\N	\N	\N	f
971	971		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:57:17.829255	0	\N	\N	\N	f
893	893		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:01.562054	0	\N	\N	\N	f
894	894		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:03.171761	0	\N	\N	\N	f
881	881		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:33.043477	0	\N	\N	\N	f
883	883		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:36.48203	0	\N	\N	\N	f
910	910		5	\N	1	f	f		{"no-labels":1}	2020-09-04 09:05:23.826428	0	\N	\N	\N	f
981	981		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:56:44.895161	0	\N	\N	\N	f
801	801		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:44.616677	0	\N	\N	\N	f
804	804		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:27.155266	0	\N	\N	\N	f
994	994		5	\N	1	f	f		{"no-labels":1}	2020-09-06 23:54:38.186571	0	\N	\N	\N	f
798	798		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:42.217636	0	\N	\N	\N	f
842	842		8	\N	1	f	f		{"no-labels":1}	2020-09-07 01:37:37.489769	0	\N	\N	\N	f
961	961		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:04.781307	0	\N	\N	\N	f
841	841		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:19:09.718848	0	\N	\N	\N	f
911	911		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:07.469678	0	\N	\N	\N	f
1038	1038		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:06.266348	0	\N	\N	\N	f
499	499		4	\N	1	f	f		{"no-labels":1}	2020-08-23 05:43:48.573828	0	\N	\N	\N	f
857	857		8	\N	1	f	f		{"no-labels":1}	2020-09-06 05:05:08.504734	0	\N	\N	\N	f
854	854		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:03.518511	0	\N	\N	\N	f
897	897		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:58.899537	0	\N	\N	\N	f
849	849		8	\N	1	f	f		{"no-labels":1}	2020-09-02 08:16:47.197339	0	\N	\N	\N	f
856	856		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:05.045563	0	\N	\N	\N	f
847	847		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:22:10.95161	0	\N	\N	\N	f
844	844		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:10.568698	0	\N	\N	\N	f
986	986		11	\N	1	f	f		{"no-labels":1}	2020-09-10 00:07:10.557213	0	\N	\N	\N	f
855	855		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:04.368894	0	\N	\N	\N	f
845	845		8	\N	1	f	f		{"no-labels":1}	2020-09-02 02:19:13.341736	0	\N	\N	\N	f
1027	1027		5	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:52.614851	0	\N	\N	\N	f
859	859		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:08.692892	0	\N	\N	\N	f
858	858		8	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:06.931374	0	\N	\N	\N	f
836	836		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:20:33.261256	0	\N	\N	\N	f
992	992		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:54:00.433633	0	\N	\N	\N	f
1004	1004		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:10.3259	0	\N	\N	\N	f
1035	1035		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:33.324089	0	\N	\N	\N	f
982	982		11	\N	1	f	f		{"no-labels":1}	2020-09-10 00:06:28.619782	0	\N	\N	\N	f
978	978		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:14.259725	0	\N	\N	\N	f
1043	1043		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:31.858887	0	\N	\N	\N	f
1033	1033		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:39.981669	0	\N	\N	\N	f
1000	1000		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:54.067216	0	\N	\N	\N	f
1036	1036		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:37.203887	0	\N	\N	\N	f
1006	1006		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:18.122486	0	\N	\N	\N	f
979	979		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:56:00.117916	0	\N	\N	\N	f
997	997		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:43.568766	0	\N	\N	\N	f
973	973		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:54:49.245834	0	\N	\N	\N	f
851	851		5	\N	1	f	f		{"no-labels":1}	2020-09-02 04:55:56.737331	0	\N	\N	\N	f
850	850		5	\N	1	f	f		{"no-labels":1}	2020-09-02 04:55:52.427951	0	\N	\N	\N	f
1003	1003		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:05.725597	0	\N	\N	\N	f
972	972		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:04:45.812671	0	\N	\N	\N	f
977	977		11	\N	1	f	f		{"no-labels":1}	2020-09-06 23:55:49.55366	0	\N	\N	\N	f
990	990		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:43.373874	0	\N	\N	\N	f
1007	1007		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:19.646651	0	\N	\N	\N	f
853	853		5	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:02.441538	0	\N	\N	\N	f
852	852		5	\N	1	f	f		{"no-labels":1}	2020-09-02 04:56:01.391856	0	\N	\N	\N	f
985	985		11	\N	1	f	f		{"no-labels":1}	2020-09-08 12:07:07.232068	0	\N	\N	\N	f
468	468		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:20:22.863082	0	\N	\N	\N	f
983	983		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:16.167416	0	\N	\N	\N	f
666	666		8	\N	1	f	f		{"no-labels":1}	2020-08-27 14:21:44.526919	0	\N	\N	\N	f
988	988		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:34.905335	0	\N	\N	\N	f
957	957		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:13.464291	0	\N	\N	\N	f
996	996		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:44.587199	0	\N	\N	\N	f
999	999		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:51.578144	0	\N	\N	\N	f
937	937		5	\N	1	f	f		{"no-labels":1}	2020-09-06 02:42:07.089433	0	\N	\N	\N	f
912	912		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:14.41619	0	\N	\N	\N	f
932	932		5	\N	1	f	f		{"no-labels":1}	2020-09-04 06:23:32.885607	0	\N	\N	\N	f
980	980		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:51.822878	0	\N	\N	\N	f
998	998		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:32:48.122838	0	\N	\N	\N	f
946	946		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:32.325345	0	\N	\N	\N	f
542	542		8	\N	1	f	f		{"no-labels":1}	2020-08-24 07:28:59.791525	0	\N	\N	\N	f
1005	1005		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:13.954706	0	\N	\N	\N	f
1008	1008		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:24.475541	0	\N	\N	\N	f
1002	1002		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:02.011923	0	\N	\N	\N	f
962	962		8	\N	1	f	f		{"no-labels":1}	2020-09-06 02:34:18.488421	0	\N	\N	\N	f
959	959		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:11.386382	0	\N	\N	\N	f
958	958		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:09.772572	0	\N	\N	\N	f
904	904		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:27.925186	0	\N	\N	\N	f
781	781		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:35:56.278877	0	\N	\N	\N	f
919	919		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:50.043123	0	\N	\N	\N	f
811	811		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:58:53.353402	0	\N	\N	\N	f
905	905		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:28.390626	0	\N	\N	\N	f
963	963		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
917	917		8	\N	1	f	f		{"no-labels":1}	2020-09-04 14:33:53.393841	0	\N	\N	\N	f
913	913		8	\N	1	f	f		{"no-labels":1}	2020-09-06 05:02:19.551198	0	\N	\N	\N	f
947	947		8	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:23.359981	0	\N	\N	\N	f
907	907		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:36.848298	0	\N	\N	\N	f
914	914		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:41.089455	0	\N	\N	\N	f
806	806		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:31:31.321418	0	\N	\N	\N	f
807	807		5	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:00.942611	0	\N	\N	\N	f
861	861		8	\N	1	f	f		{"no-labels":1}	2020-09-02 08:16:46.036951	0	\N	\N	\N	t
863	863		8	\N	1	f	f		{"no-labels":1}	2020-09-02 08:16:21.395624	0	\N	\N	\N	f
864	864		8	\N	1	f	f		{"no-labels":1}	2020-09-02 08:15:15.829852	0	\N	\N	\N	f
860	860		8	\N	1	f	f		{"no-labels":1}	2020-09-02 08:16:34.386207	0	\N	\N	\N	f
886	886		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:06.825296	0	\N	\N	\N	f
862	862		8	\N	1	f	f		{"no-labels":1}	2020-09-03 01:10:07.090749	0	\N	\N	\N	f
1098	1098		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:03:04.208597	0	\N	\N	\N	f
755	755		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:39:08.919012	0	\N	\N	\N	f
885	885		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:41.780807	0	\N	\N	\N	f
920	920		8	\N	1	f	f		{"no-labels":1}	2020-09-04 14:33:54.463976	0	\N	\N	\N	f
814	814		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:06.438181	0	\N	\N	\N	f
918	918		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:51.010492	0	\N	\N	\N	f
808	808		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
816	816		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:09.66778	0	\N	\N	\N	f
812	812		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:03.182534	0	\N	\N	\N	f
810	810		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:58:52.937565	0	\N	\N	\N	f
867	867		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:21.208258	0	\N	\N	\N	f
837	837		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:20:28.172231	0	\N	\N	\N	f
838	838		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:20:26.587887	0	\N	\N	\N	f
819	819		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:16.232702	0	\N	\N	\N	f
813	813		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:04.44199	0	\N	\N	\N	f
815	815		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:07.895002	0	\N	\N	\N	f
817	817		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:12.379294	0	\N	\N	\N	f
820	820		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:20.853429	0	\N	\N	\N	f
818	818		8	\N	1	f	f		{"no-labels":1}	2020-09-01 01:59:14.700674	0	\N	\N	\N	f
869	869		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:41.076171	0	\N	\N	\N	f
921	921		8	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:02.877024	0	\N	\N	\N	f
922	922		8	\N	1	f	f		{"no-labels":1}	2020-09-04 09:05:20.285021	0	\N	\N	\N	f
903	903		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:24.504558	0	\N	\N	\N	f
901	901		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:18.424505	0	\N	\N	\N	f
876	876		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
902	902		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:22.275287	0	\N	\N	\N	f
966	966		8	\N	1	f	f		{"no-labels":1}	2020-09-06 02:34:20.945812	0	\N	\N	\N	f
888	888		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:12.251117	0	\N	\N	\N	f
967	967		8	\N	1	f	f		{"no-labels":1}	2020-09-06 03:50:25.276397	0	\N	\N	\N	f
939	939		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:37.445225	0	\N	\N	\N	f
899	899		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:18.976568	0	\N	\N	\N	f
875	875		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:24.456171	0	\N	\N	\N	f
877	877		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:27.591888	0	\N	\N	\N	f
878	878		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:28.700137	0	\N	\N	\N	f
884	884		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:48.062502	0	\N	\N	\N	f
887	887		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:48:03.971305	0	\N	\N	\N	f
915	915		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:45.495726	0	\N	\N	\N	f
900	900		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:47.31281	0	\N	\N	\N	t
940	940		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:40.124684	0	\N	\N	\N	f
943	943		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:49.759331	0	\N	\N	\N	f
948	948		8	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:26.138844	0	\N	\N	\N	f
916	916		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:48.49537	0	\N	\N	\N	f
906	906		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:30.368796	0	\N	\N	\N	f
970	970		8	\N	1	f	f		{"no-labels":1}	2020-09-06 02:39:57.040356	0	\N	\N	\N	f
944	944		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:51.884051	0	\N	\N	\N	f
964	964		8	\N	1	f	f		{"no-labels":1}	2020-09-06 03:50:40.874854	0	\N	\N	\N	f
908	908		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:38.707216	0	\N	\N	\N	f
968	968		8	\N	1	f	f		{"no-labels":1}	2020-09-06 02:34:38.126201	0	\N	\N	\N	f
949	949		8	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:27.318123	0	\N	\N	\N	f
945	945		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:53.557705	0	\N	\N	\N	f
938	938		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:33.329884	0	\N	\N	\N	f
950	950		8	\N	1	f	f		{"no-labels":1}	2020-09-06 04:59:07.065471	0	\N	\N	\N	f
898	898		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:17.468633	0	\N	\N	\N	f
941	941		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:44.908468	0	\N	\N	\N	f
895	895		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:59.921869	0	\N	\N	\N	f
873	873		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:15.225934	0	\N	\N	\N	f
942	942		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:46.77998	0	\N	\N	\N	f
934	934		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:45:28.443824	0	\N	\N	\N	f
952	952		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1040	1040		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:31.463557	0	\N	\N	\N	f
923	923		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:23:36.494448	0	\N	\N	\N	f
924	924		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:23:34.195734	0	\N	\N	\N	f
1050	1050		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:21:03.642943	0	\N	\N	\N	f
930	930		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:36.345358	0	\N	\N	\N	f
1048	1048		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:30.389592	0	\N	\N	\N	f
927	927		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
995	995		5	\N	1	f	f		{"no-labels":1}	2020-09-06 23:54:35.033901	0	\N	\N	\N	f
872	872		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:23.253906	0	\N	\N	\N	f
896	896		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:59.506833	0	\N	\N	\N	f
830	830		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:34:23.951669	0	\N	\N	\N	f
629	629		8	\N	1	f	f		{"no-labels":1}	2020-08-26 02:23:53.944598	0	\N	\N	\N	f
931	931		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:46:13.445461	0	\N	\N	\N	f
1023	1023		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:24:33.412103	0	\N	\N	\N	f
829	829		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:39:24.825543	0	\N	\N	\N	f
926	926		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1009	1009		5	\N	1	f	f		{"no-labels":1}	2020-09-07 01:33:26.11668	0	\N	\N	\N	f
929	929		8	\N	1	f	f		{"no-labels":1}	2020-09-04 06:25:37.437864	0	\N	\N	\N	f
840	840		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:22:07.503616	0	\N	\N	\N	f
1015	1015		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:39.990929	0	\N	\N	\N	f
889	889		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:03.812096	0	\N	\N	\N	f
1011	1011		5	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:59.778892	0	\N	\N	\N	f
1045	1045		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:49.637895	0	\N	\N	\N	f
823	823		8	\N	1	f	f		{"no-labels":1}	2020-09-08 15:22:59.249607	0	\N	\N	\N	t
936	936		5	\N	1	f	f		{"no-labels":1}	2020-09-04 15:45:23.471802	0	\N	\N	\N	f
828	828		8	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:21.849299	0	\N	\N	\N	f
826	826		8	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:18.815447	0	\N	\N	\N	f
865	865		5	\N	1	f	f		{"no-labels":1}	2020-09-02 08:16:35.040949	0	\N	\N	\N	f
827	827		8	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:20.12996	0	\N	\N	\N	f
956	956		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
821	821		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:36:07.247986	0	\N	\N	\N	f
1070	1070		12	\N	1	f	f	algorithms,open source,programming	{"no-labels":1}	2020-09-10 00:07:39.618648	0	\N	\N	\N	f
993	993		5	\N	1	f	f		{"no-labels":1}	2020-09-06 23:54:39.763142	0	\N	\N	\N	f
954	954		8	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:20.81862	0	\N	\N	\N	f
1041	1041		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:31.570776	0	\N	\N	\N	f
1022	1022		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:22.322123	0	\N	\N	\N	f
1042	1042		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:31.754995	0	\N	\N	\N	f
832	832		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:25:10.642398	0	\N	\N	\N	f
1012	1012		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:50.77794	0	\N	\N	\N	f
465	465		8	\N	1	f	f		{"no-labels":1}	2020-08-21 05:29:54.000712	0	\N	\N	\N	t
1016	1016		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:19:44.594573	0	\N	\N	\N	f
1014	1014		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:20:26.489911	0	\N	\N	\N	f
870	870		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:31.227047	0	\N	\N	\N	f
890	890		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:00.340576	0	\N	\N	\N	f
839	839		5	\N	1	f	f		{"no-labels":1}	2020-09-02 02:19:20.540466	0	\N	\N	\N	f
825	825		8	\N	1	f	f		{"no-labels":1}	2020-09-06 23:57:10.207546	0	\N	\N	\N	t
1047	1047		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:27.942137	0	\N	\N	\N	f
824	824		8	\N	1	f	f		{"no-labels":1}	2020-09-03 01:12:34.569892	0	\N	\N	\N	f
1010	1010		6	\N	1	f	f		{"no-labels":1}	2020-09-08 11:09:49.805576	0	\N	\N	\N	t
955	955		8	\N	1	f	f		{"no-labels":1}	2020-09-07 00:03:55.444124	0	\N	\N	\N	f
891	891		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:00.755257	0	\N	\N	\N	f
1017	1017		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
935	935		4	\N	1	f	f		{"no-labels":1}	2020-09-06 23:55:45.096174	0	\N	\N	\N	t
831	831		5	\N	1	f	f		{"no-labels":1}	2020-09-01 15:37:09.036899	0	\N	\N	\N	f
1051	1051		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:23:00.92084	0	\N	\N	\N	f
991	991		5	\N	1	f	f		{"no-labels":1}	2020-09-06 23:53:59.046608	0	\N	\N	\N	f
518	518		8	\N	1	f	f		{"no-labels":1}	2020-08-22 12:26:15.87066	0	\N	\N	\N	f
1037	1037		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:01.914486	0	\N	\N	\N	f
953	953		8	\N	1	f	f		{"no-labels":1}	2020-09-06 04:57:32.095912	0	\N	\N	\N	f
1020	1020		8	\N	1	f	f		{"no-labels":1}	2020-09-08 15:20:18.266819	0	\N	\N	\N	f
969	969		8	\N	1	f	f		{"no-labels":1}	2020-09-06 03:50:23.570769	0	\N	\N	\N	f
925	925		8	\N	1	f	f		{"no-labels":1}	2020-09-06 05:02:07.173341	0	\N	\N	\N	f
874	874		8	\N	1	f	f		{"no-labels":1}	2020-09-04 15:47:19.336372	0	\N	\N	\N	f
1039	1039		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:18:31.276626	0	\N	\N	\N	f
1044	1044		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:57.23124	0	\N	\N	\N	f
951	951		8	\N	1	f	f		{"no-labels":1}	2020-09-07 01:37:37.096268	0	\N	\N	\N	t
909	909		5	\N	1	f	f		{"no-labels":1}	2020-09-04 14:34:15.332609	0	\N	\N	\N	f
928	928		8	\N	1	f	f		{"no-labels":1}	2020-09-06 05:45:20.41661	0	\N	\N	\N	f
1028	1028		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
960	960		5	\N	1	f	f		{"no-labels":1}	2020-09-06 01:31:05.983534	0	\N	\N	\N	f
1029	1029		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:27.543138	0	\N	\N	\N	f
871	871		5	\N	1	f	f		{"no-labels":1}	2020-09-03 01:09:30.598248	0	\N	\N	\N	f
1021	1021		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:21.168686	0	\N	\N	\N	f
1026	1026		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:27.528819	0	\N	\N	\N	f
1031	1031		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:54.314397	0	\N	\N	\N	f
1030	1030		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:29.76902	0	\N	\N	\N	f
1019	1019		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:17.188738	0	\N	\N	\N	f
1025	1025		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:26.570036	0	\N	\N	\N	f
1018	1018		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:18.115644	0	\N	\N	\N	f
1032	1032		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:43:53.62144	0	\N	\N	\N	f
1013	1013		8	\N	1	f	f		{"no-labels":1}	2020-09-07 06:44:02.062607	0	\N	\N	\N	f
1054	1054		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:22:13.132411	0	\N	\N	\N	f
1052	1052		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:22:53.795165	0	\N	\N	\N	f
1055	1055		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1053	1053		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:34.791208	0	\N	\N	\N	f
1064	1064		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:45.638093	0	\N	\N	\N	f
1062	1062		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1056	1056		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:32.724672	0	\N	\N	\N	f
1061	1061		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:09.765422	0	\N	\N	\N	f
1057	1057		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:48.434987	0	\N	\N	\N	f
1059	1059		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:05.589311	0	\N	\N	\N	f
1060	1060		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1065	1065		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1063	1063		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:44.656905	0	\N	\N	\N	f
1089	1089		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:53:41.306685	0	\N	\N	\N	f
209	209		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:54:36.755672	0	\N	\N	\N	f
1097	1097		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:48.026648	0	\N	\N	\N	f
1073	1073		12	\N	1	f	f	life,recurse center	{"no-labels":1}	2020-09-08 15:18:42.299334	0	\N	\N	\N	f
1074	1074		12	\N	1	f	f	career advice	{"no-labels":1}	2020-09-08 15:19:12.852134	0	\N	\N	\N	f
1071	1071		12	\N	1	f	f	algorithms,data structures,go,programming,tech interviews	{"no-labels":1}	2020-09-10 00:09:24.463528	0	\N	\N	\N	f
974	974		11	\N	1	f	f		{"no-labels":1}	2020-09-06 08:10:11.314309	0	\N	\N	\N	f
1072	1072		12	\N	1	f	f	databases,recurse center,research papers	{"no-labels":1}	2020-09-10 00:12:33.362448	0	\N	\N	\N	t
1113	1113		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:37.573088	0	\N	\N	\N	f
1106	1106		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:37.39946	0	\N	\N	\N	f
1099	1099		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:52:39.578256	0	\N	\N	\N	f
1105	1105		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:39.355926	0	\N	\N	\N	f
1085	1085		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:27:57.046503	0	\N	\N	\N	f
1114	1114		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:36.033692	0	\N	\N	\N	f
1107	1107		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:41.813865	0	\N	\N	\N	f
1115	1115		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:30:47.058932	0	\N	\N	\N	f
1103	1103		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:42.916337	0	\N	\N	\N	f
123	123		3	\N	1	f	f		{"no-labels":1}	2020-08-21 13:52:59.268228	0	\N	\N	\N	f
1083	1083		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:28:06.119029	0	\N	\N	\N	f
1080	1080		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:27:53.754815	0	\N	\N	\N	f
1069	1069		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:46.069912	0	\N	\N	\N	f
1046	1046		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:14:27.337375	0	\N	\N	\N	f
1049	1049		8	\N	1	f	f		{"no-labels":1}	2020-09-08 11:52:16.263499	0	\N	\N	\N	t
1088	1088		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:53:39.676836	0	\N	\N	\N	f
1090	1090		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:54:11.107842	0	\N	\N	\N	f
1095	1095		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:54:28.992713	0	\N	\N	\N	f
1066	1066		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:28.01231	0	\N	\N	\N	f
1112	1112		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:46.228128	0	\N	\N	\N	f
1079	1079		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:28:13.837955	0	\N	\N	\N	f
1084	1084		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:28:11.038197	0	\N	\N	\N	f
1077	1077		5	\N	1	f	f		{"no-labels":1}	2020-09-08 15:17:32.862965	0	\N	\N	\N	f
1087	1087		8	\N	1	f	f		{"no-labels":1}	2020-09-09 01:28:19.693431	0	\N	\N	\N	f
1101	1101		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:53:00.000635	0	\N	\N	\N	f
1117	1117		8	\N	1	f	f		{"no-labels":1}	2020-09-10 01:30:52.156912	0	\N	\N	\N	f
1100	1100		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:52:47.289126	0	\N	\N	\N	f
1093	1093		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:55:20.554008	0	\N	\N	\N	f
1096	1096		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:55:19.721654	0	\N	\N	\N	f
1109	1109		11	\N	1	f	f		{"no-labels":1}	2020-09-10 00:06:22.497622	0	\N	\N	\N	f
1091	1091		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:54:19.827881	0	\N	\N	\N	f
1092	1092		8	\N	1	f	f		{"no-labels":1}	2020-09-09 23:54:16.726408	0	\N	\N	\N	f
1094	1094		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:13:47.240911	0	\N	\N	\N	f
507	507		6	\N	1	f	f		{"no-labels":1}	2020-08-22 12:26:18.063276	0	\N	\N	\N	f
1116	1116		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1086	1086		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:27:48.07085	0	\N	\N	\N	f
1108	1108		11	\N	1	f	f		{"no-labels":1}	2020-09-10 00:05:28.841327	0	\N	\N	\N	f
1104	1104		8	\N	1	f	f		{"no-labels":1}	2020-09-10 00:12:44.914556	0	\N	\N	\N	f
1081	1081		5	\N	1	f	f		{"no-labels":1}	2020-09-09 01:27:54.767375	0	\N	\N	\N	f
1119	1119		8	\N	1	f	f		{"no-labels":1}	2020-09-10 01:31:57.428792	0	\N	\N	\N	f
882	882		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1034	1034		11	\N	1	f	f		{"no-labels":1}	2020-09-09 01:29:27.40329	0	\N	\N	\N	f
1121	1121		8	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:35.306737	0	\N	\N	\N	f
965	965		8	\N	1	f	f		{"no-labels":1}	2020-09-06 23:57:40.62347	0	2020-09-07 00:03:50.849122	\N	\N	f
1126	1126		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1120	1120		8	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:35.092151	0	\N	\N	\N	f
777	777		8	\N	1	f	f		{"no-labels":1}	2020-08-31 02:37:07.982476	0	\N	\N	\N	f
1078	1078		11	\N	1	f	f		{"no-labels":1}	2020-09-10 00:02:40.051385	0	\N	\N	\N	f
1076	1076		5	\N	1	f	f		{"no-labels":1}	2020-09-08 15:17:34.254529	0	\N	\N	\N	f
1058	1058		5	\N	1	f	f		{"no-labels":1}	2020-09-08 11:17:31.144851	0	\N	\N	\N	f
1102	1102		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:53.16442	0	\N	\N	\N	f
1111	1111		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:49.960703	0	\N	\N	\N	f
1110	1110		5	\N	1	f	f		{"no-labels":1}	2020-09-10 01:32:49.329509	0	\N	\N	\N	f
1122	1122		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1118	1118		8	\N	1	f	f		{"no-labels":1}	2020-09-10 01:31:03.936072	0	\N	\N	\N	f
1123	1123		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
809	809		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1124	1124		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1125	1125		8	\N	1	f	f		{"no-labels":1}	2020-09-10 03:39:21.091711	0	\N	\N	\N	f
1127	1127		11	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1137	1137		6	\N	1	f	f			\N	0	\N	\N	\N	t
1128	1128		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1129	1129		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1130	1130		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1131	1131		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1132	1132		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1133	1133		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1134	1134		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1135	1135		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
1136	1136		8	\N	1	f	f		{"no-labels":1}	\N	0	\N	\N	\N	t
\.


--
-- Data for Name: ttrss_user_labels2; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_user_labels2 (label_id, article_id) FROM stdin;
\.


--
-- Data for Name: ttrss_user_prefs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_user_prefs (owner_uid, pref_name, profile, value) FROM stdin;
1	PURGE_OLD_DAYS	\N	60
1	DEFAULT_UPDATE_INTERVAL	\N	30
1	DEFAULT_ARTICLE_LIMIT	\N	30
1	ALLOW_DUPLICATE_POSTS	\N	false
1	SHORT_DATE_FORMAT	\N	M d, G:i
1	LONG_DATE_FORMAT	\N	D, M d Y - G:i
1	HIDE_READ_FEEDS	\N	false
1	FEEDS_SORT_BY_UNREAD	\N	false
1	REVERSE_HEADLINES	\N	false
1	DIGEST_ENABLE	\N	false
1	CDM_AUTO_CATCHUP	\N	false
1	_DEFAULT_VIEW_MODE	\N	adaptive
1	_DEFAULT_VIEW_LIMIT	\N	30
1	_PREFS_ACTIVE_TAB	\N	
1	STRIP_UNSAFE_TAGS	\N	true
1	BLACKLISTED_TAGS	\N	main, generic, misc, uncategorized, blog, blogroll, general, news
1	DIGEST_CATCHUP	\N	false
1	STRIP_IMAGES	\N	false
1	_DEFAULT_VIEW_ORDER_BY	\N	default
1	_COLLAPSED_SPECIAL	\N	false
1	_COLLAPSED_LABELS	\N	false
1	_COLLAPSED_UNCAT	\N	false
1	_COLLAPSED_FEEDLIST	\N	false
1	_MOBILE_ENABLE_CATS	\N	false
1	_MOBILE_SHOW_IMAGES	\N	false
1	_MOBILE_HIDE_READ	\N	false
1	_MOBILE_SORT_FEEDS_UNREAD	\N	false
1	_THEME_ID	\N	0
1	USER_STYLESHEET	\N	
1	_MOBILE_BROWSE_CATS	\N	true
1	SSL_CERT_SERIAL	\N	
1	DIGEST_PREFERRED_TIME	\N	00:00
1	_PREFS_SHOW_EMPTY_CATS	\N	false
1	_DEFAULT_INCLUDE_CHILDREN	\N	false
1	_MOBILE_REVERSE_HEADLINES	\N	false
1	ON_CATCHUP_SHOW_NEXT_FEED	\N	false
1	FRESH_ARTICLE_MAX_AGE	\N	24
1	VFEED_GROUP_BY_FEED	\N	false
1	SORT_HEADLINES_BY_FEED_DATE	\N	false
1	AUTO_ASSIGN_LABELS	\N	false
1	USER_LANGUAGE	\N	auto
1	USER_CSS_THEME	\N	night.css
1	DEFAULT_SEARCH_LANGUAGE	\N	Simple
1	USER_TIMEZONE	\N	Hongkong
1	_ENABLED_PLUGINS	\N	fever
1	ENABLE_API_ACCESS	\N	true
1	ENABLE_FEED_CATS	\N	true
1	CONFIRM_FEED_CATCHUP	\N	true
1	HIDE_READ_SHOWS_SPECIAL	\N	true
1	PURGE_UNREAD_ARTICLES	\N	true
1	COMBINED_DISPLAY_MODE	\N	true
1	CDM_EXPANDED	\N	true
1	SHOW_CONTENT_PREVIEW	\N	true
\.


--
-- Data for Name: ttrss_users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_users (id, login, pwd_hash, last_login, access_level, email, full_name, email_digest, last_digest_sent, salt, twitter_oauth, otp_enabled, resetpass_token, created) FROM stdin;
1	admin	MODE2:ee431ecaf2104e006bb03faf215424a2e6b3b93acf4a9b2e6ac89d115a75267a	2020-09-08 11:53:09.977709	10	thesedays@126.com		f	\N	b3c322373dce0b6967b5559c48ffdf58f4a0a8ee99b9cf484bdfce0cea33be572f6ee884e5abfacee94934e510a92181d6fb98b2c8fb534e09aa912c4745b1fcd81b4dcca0e0cdcd45273c990511d28b26a97d9cf9307b058c519ad6776ce8499165b135b17a2d1ad5681006c79c79096aa00ace3d629e39734e822d55	\N	f	\N	\N
\.


--
-- Data for Name: ttrss_version; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ttrss_version (schema_version) FROM stdin;
139
\.


--
-- Name: ttrss_access_keys_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_access_keys_id_seq', 4, true);


--
-- Name: ttrss_app_passwords_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_app_passwords_id_seq', 1, false);


--
-- Name: ttrss_enclosures_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_enclosures_id_seq', 4, true);


--
-- Name: ttrss_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_entries_id_seq', 1137, true);


--
-- Name: ttrss_entry_comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_entry_comments_id_seq', 1, false);


--
-- Name: ttrss_error_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_error_log_id_seq', 1, true);


--
-- Name: ttrss_feed_categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_feed_categories_id_seq', 2, true);


--
-- Name: ttrss_feeds_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_feeds_id_seq', 12, true);


--
-- Name: ttrss_filters2_actions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_filters2_actions_id_seq', 1, false);


--
-- Name: ttrss_filters2_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_filters2_id_seq', 1, false);


--
-- Name: ttrss_filters2_rules_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_filters2_rules_id_seq', 1, false);


--
-- Name: ttrss_labels2_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_labels2_id_seq', 6, true);


--
-- Name: ttrss_linked_instances_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_linked_instances_id_seq', 1, false);


--
-- Name: ttrss_plugin_storage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_plugin_storage_id_seq', 1, true);


--
-- Name: ttrss_settings_profiles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_settings_profiles_id_seq', 1, false);


--
-- Name: ttrss_tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_tags_id_seq', 149, true);


--
-- Name: ttrss_user_entries_int_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_user_entries_int_id_seq', 1137, true);


--
-- Name: ttrss_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ttrss_users_id_seq', 1, true);


--
-- Name: ttrss_access_keys ttrss_access_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_access_keys
    ADD CONSTRAINT ttrss_access_keys_pkey PRIMARY KEY (id);


--
-- Name: ttrss_app_passwords ttrss_app_passwords_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_app_passwords
    ADD CONSTRAINT ttrss_app_passwords_pkey PRIMARY KEY (id);


--
-- Name: ttrss_archived_feeds ttrss_archived_feeds_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_archived_feeds
    ADD CONSTRAINT ttrss_archived_feeds_pkey PRIMARY KEY (id);


--
-- Name: ttrss_enclosures ttrss_enclosures_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_enclosures
    ADD CONSTRAINT ttrss_enclosures_pkey PRIMARY KEY (id);


--
-- Name: ttrss_entries ttrss_entries_guid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entries
    ADD CONSTRAINT ttrss_entries_guid_key UNIQUE (guid);


--
-- Name: ttrss_entries ttrss_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entries
    ADD CONSTRAINT ttrss_entries_pkey PRIMARY KEY (id);


--
-- Name: ttrss_entry_comments ttrss_entry_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entry_comments
    ADD CONSTRAINT ttrss_entry_comments_pkey PRIMARY KEY (id);


--
-- Name: ttrss_error_log ttrss_error_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_error_log
    ADD CONSTRAINT ttrss_error_log_pkey PRIMARY KEY (id);


--
-- Name: ttrss_feed_categories ttrss_feed_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feed_categories
    ADD CONSTRAINT ttrss_feed_categories_pkey PRIMARY KEY (id);


--
-- Name: ttrss_feedbrowser_cache ttrss_feedbrowser_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feedbrowser_cache
    ADD CONSTRAINT ttrss_feedbrowser_cache_pkey PRIMARY KEY (feed_url);


--
-- Name: ttrss_feeds ttrss_feeds_feed_url_owner_uid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds
    ADD CONSTRAINT ttrss_feeds_feed_url_owner_uid_key UNIQUE (feed_url, owner_uid);


--
-- Name: ttrss_feeds ttrss_feeds_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds
    ADD CONSTRAINT ttrss_feeds_pkey PRIMARY KEY (id);


--
-- Name: ttrss_filter_actions ttrss_filter_actions_description_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_actions
    ADD CONSTRAINT ttrss_filter_actions_description_key UNIQUE (description);


--
-- Name: ttrss_filter_actions ttrss_filter_actions_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_actions
    ADD CONSTRAINT ttrss_filter_actions_name_key UNIQUE (name);


--
-- Name: ttrss_filter_actions ttrss_filter_actions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_actions
    ADD CONSTRAINT ttrss_filter_actions_pkey PRIMARY KEY (id);


--
-- Name: ttrss_filter_types ttrss_filter_types_description_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_types
    ADD CONSTRAINT ttrss_filter_types_description_key UNIQUE (description);


--
-- Name: ttrss_filter_types ttrss_filter_types_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_types
    ADD CONSTRAINT ttrss_filter_types_name_key UNIQUE (name);


--
-- Name: ttrss_filter_types ttrss_filter_types_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filter_types
    ADD CONSTRAINT ttrss_filter_types_pkey PRIMARY KEY (id);


--
-- Name: ttrss_filters2_actions ttrss_filters2_actions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_actions
    ADD CONSTRAINT ttrss_filters2_actions_pkey PRIMARY KEY (id);


--
-- Name: ttrss_filters2 ttrss_filters2_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2
    ADD CONSTRAINT ttrss_filters2_pkey PRIMARY KEY (id);


--
-- Name: ttrss_filters2_rules ttrss_filters2_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules
    ADD CONSTRAINT ttrss_filters2_rules_pkey PRIMARY KEY (id);


--
-- Name: ttrss_labels2 ttrss_labels2_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_labels2
    ADD CONSTRAINT ttrss_labels2_pkey PRIMARY KEY (id);


--
-- Name: ttrss_linked_instances ttrss_linked_instances_access_key_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_linked_instances
    ADD CONSTRAINT ttrss_linked_instances_access_key_key UNIQUE (access_key);


--
-- Name: ttrss_linked_instances ttrss_linked_instances_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_linked_instances
    ADD CONSTRAINT ttrss_linked_instances_pkey PRIMARY KEY (id);


--
-- Name: ttrss_plugin_storage ttrss_plugin_storage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_plugin_storage
    ADD CONSTRAINT ttrss_plugin_storage_pkey PRIMARY KEY (id);


--
-- Name: ttrss_prefs ttrss_prefs_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_prefs
    ADD CONSTRAINT ttrss_prefs_pkey PRIMARY KEY (pref_name);


--
-- Name: ttrss_prefs_sections ttrss_prefs_sections_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_prefs_sections
    ADD CONSTRAINT ttrss_prefs_sections_pkey PRIMARY KEY (id);


--
-- Name: ttrss_prefs_types ttrss_prefs_types_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_prefs_types
    ADD CONSTRAINT ttrss_prefs_types_pkey PRIMARY KEY (id);


--
-- Name: ttrss_sessions ttrss_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_sessions
    ADD CONSTRAINT ttrss_sessions_pkey PRIMARY KEY (id);


--
-- Name: ttrss_settings_profiles ttrss_settings_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_settings_profiles
    ADD CONSTRAINT ttrss_settings_profiles_pkey PRIMARY KEY (id);


--
-- Name: ttrss_tags ttrss_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_tags
    ADD CONSTRAINT ttrss_tags_pkey PRIMARY KEY (id);


--
-- Name: ttrss_user_entries ttrss_user_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries
    ADD CONSTRAINT ttrss_user_entries_pkey PRIMARY KEY (int_id);


--
-- Name: ttrss_users ttrss_users_login_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_users
    ADD CONSTRAINT ttrss_users_login_key UNIQUE (login);


--
-- Name: ttrss_users ttrss_users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_users
    ADD CONSTRAINT ttrss_users_pkey PRIMARY KEY (id);


--
-- Name: ttrss_cat_counters_cache_owner_uid_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_cat_counters_cache_owner_uid_idx ON public.ttrss_cat_counters_cache USING btree (owner_uid);


--
-- Name: ttrss_counters_cache_feed_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_counters_cache_feed_id_idx ON public.ttrss_counters_cache USING btree (feed_id);


--
-- Name: ttrss_counters_cache_owner_uid_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_counters_cache_owner_uid_idx ON public.ttrss_counters_cache USING btree (owner_uid);


--
-- Name: ttrss_counters_cache_value_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_counters_cache_value_idx ON public.ttrss_counters_cache USING btree (value);


--
-- Name: ttrss_enclosures_post_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_enclosures_post_id_idx ON public.ttrss_enclosures USING btree (post_id);


--
-- Name: ttrss_entries_date_entered_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_entries_date_entered_index ON public.ttrss_entries USING btree (date_entered);


--
-- Name: ttrss_entries_tsvector_combined_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_entries_tsvector_combined_idx ON public.ttrss_entries USING gin (tsvector_combined);


--
-- Name: ttrss_entries_updated_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_entries_updated_idx ON public.ttrss_entries USING btree (updated);


--
-- Name: ttrss_entry_comments_ref_id_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_entry_comments_ref_id_index ON public.ttrss_entry_comments USING btree (ref_id);


--
-- Name: ttrss_feeds_cat_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_feeds_cat_id_idx ON public.ttrss_feeds USING btree (cat_id);


--
-- Name: ttrss_feeds_owner_uid_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_feeds_owner_uid_index ON public.ttrss_feeds USING btree (owner_uid);


--
-- Name: ttrss_sessions_expire_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_sessions_expire_index ON public.ttrss_sessions USING btree (expire);


--
-- Name: ttrss_tags_owner_uid_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_tags_owner_uid_index ON public.ttrss_tags USING btree (owner_uid);


--
-- Name: ttrss_tags_post_int_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_tags_post_int_id_idx ON public.ttrss_tags USING btree (post_int_id);


--
-- Name: ttrss_user_entries_feed_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_entries_feed_id ON public.ttrss_user_entries USING btree (feed_id);


--
-- Name: ttrss_user_entries_owner_uid_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_entries_owner_uid_index ON public.ttrss_user_entries USING btree (owner_uid);


--
-- Name: ttrss_user_entries_ref_id_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_entries_ref_id_index ON public.ttrss_user_entries USING btree (ref_id);


--
-- Name: ttrss_user_entries_unread_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_entries_unread_idx ON public.ttrss_user_entries USING btree (unread);


--
-- Name: ttrss_user_prefs_owner_uid_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_prefs_owner_uid_index ON public.ttrss_user_prefs USING btree (owner_uid);


--
-- Name: ttrss_user_prefs_pref_name_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ttrss_user_prefs_pref_name_idx ON public.ttrss_user_prefs USING btree (pref_name);


--
-- Name: ttrss_access_keys ttrss_access_keys_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_access_keys
    ADD CONSTRAINT ttrss_access_keys_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_app_passwords ttrss_app_passwords_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_app_passwords
    ADD CONSTRAINT ttrss_app_passwords_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_archived_feeds ttrss_archived_feeds_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_archived_feeds
    ADD CONSTRAINT ttrss_archived_feeds_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_cat_counters_cache ttrss_cat_counters_cache_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_cat_counters_cache
    ADD CONSTRAINT ttrss_cat_counters_cache_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_counters_cache ttrss_counters_cache_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_counters_cache
    ADD CONSTRAINT ttrss_counters_cache_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_enclosures ttrss_enclosures_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_enclosures
    ADD CONSTRAINT ttrss_enclosures_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.ttrss_entries(id) ON DELETE CASCADE;


--
-- Name: ttrss_entry_comments ttrss_entry_comments_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entry_comments
    ADD CONSTRAINT ttrss_entry_comments_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_entry_comments ttrss_entry_comments_ref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_entry_comments
    ADD CONSTRAINT ttrss_entry_comments_ref_id_fkey FOREIGN KEY (ref_id) REFERENCES public.ttrss_entries(id) ON DELETE CASCADE;


--
-- Name: ttrss_error_log ttrss_error_log_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_error_log
    ADD CONSTRAINT ttrss_error_log_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE SET NULL;


--
-- Name: ttrss_feed_categories ttrss_feed_categories_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feed_categories
    ADD CONSTRAINT ttrss_feed_categories_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_feed_categories ttrss_feed_categories_parent_cat_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feed_categories
    ADD CONSTRAINT ttrss_feed_categories_parent_cat_fkey FOREIGN KEY (parent_cat) REFERENCES public.ttrss_feed_categories(id) ON DELETE SET NULL;


--
-- Name: ttrss_feeds ttrss_feeds_cat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds
    ADD CONSTRAINT ttrss_feeds_cat_id_fkey FOREIGN KEY (cat_id) REFERENCES public.ttrss_feed_categories(id) ON DELETE SET NULL;


--
-- Name: ttrss_feeds ttrss_feeds_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds
    ADD CONSTRAINT ttrss_feeds_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_feeds ttrss_feeds_parent_feed_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_feeds
    ADD CONSTRAINT ttrss_feeds_parent_feed_fkey FOREIGN KEY (parent_feed) REFERENCES public.ttrss_feeds(id) ON DELETE SET NULL;


--
-- Name: ttrss_filters2_actions ttrss_filters2_actions_action_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_actions
    ADD CONSTRAINT ttrss_filters2_actions_action_id_fkey FOREIGN KEY (action_id) REFERENCES public.ttrss_filter_actions(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2_actions ttrss_filters2_actions_filter_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_actions
    ADD CONSTRAINT ttrss_filters2_actions_filter_id_fkey FOREIGN KEY (filter_id) REFERENCES public.ttrss_filters2(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2 ttrss_filters2_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2
    ADD CONSTRAINT ttrss_filters2_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2_rules ttrss_filters2_rules_cat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules
    ADD CONSTRAINT ttrss_filters2_rules_cat_id_fkey FOREIGN KEY (cat_id) REFERENCES public.ttrss_feed_categories(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2_rules ttrss_filters2_rules_feed_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules
    ADD CONSTRAINT ttrss_filters2_rules_feed_id_fkey FOREIGN KEY (feed_id) REFERENCES public.ttrss_feeds(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2_rules ttrss_filters2_rules_filter_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules
    ADD CONSTRAINT ttrss_filters2_rules_filter_id_fkey FOREIGN KEY (filter_id) REFERENCES public.ttrss_filters2(id) ON DELETE CASCADE;


--
-- Name: ttrss_filters2_rules ttrss_filters2_rules_filter_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_filters2_rules
    ADD CONSTRAINT ttrss_filters2_rules_filter_type_fkey FOREIGN KEY (filter_type) REFERENCES public.ttrss_filter_types(id);


--
-- Name: ttrss_labels2 ttrss_labels2_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_labels2
    ADD CONSTRAINT ttrss_labels2_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_linked_feeds ttrss_linked_feeds_instance_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_linked_feeds
    ADD CONSTRAINT ttrss_linked_feeds_instance_id_fkey FOREIGN KEY (instance_id) REFERENCES public.ttrss_linked_instances(id) ON DELETE CASCADE;


--
-- Name: ttrss_plugin_storage ttrss_plugin_storage_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_plugin_storage
    ADD CONSTRAINT ttrss_plugin_storage_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_prefs ttrss_prefs_section_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_prefs
    ADD CONSTRAINT ttrss_prefs_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.ttrss_prefs_sections(id);


--
-- Name: ttrss_prefs ttrss_prefs_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_prefs
    ADD CONSTRAINT ttrss_prefs_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.ttrss_prefs_types(id);


--
-- Name: ttrss_settings_profiles ttrss_settings_profiles_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_settings_profiles
    ADD CONSTRAINT ttrss_settings_profiles_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_tags ttrss_tags_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_tags
    ADD CONSTRAINT ttrss_tags_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_tags ttrss_tags_post_int_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_tags
    ADD CONSTRAINT ttrss_tags_post_int_id_fkey FOREIGN KEY (post_int_id) REFERENCES public.ttrss_user_entries(int_id) ON DELETE CASCADE;


--
-- Name: ttrss_user_entries ttrss_user_entries_feed_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries
    ADD CONSTRAINT ttrss_user_entries_feed_id_fkey FOREIGN KEY (feed_id) REFERENCES public.ttrss_feeds(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_entries ttrss_user_entries_orig_feed_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries
    ADD CONSTRAINT ttrss_user_entries_orig_feed_id_fkey FOREIGN KEY (orig_feed_id) REFERENCES public.ttrss_archived_feeds(id) ON DELETE SET NULL;


--
-- Name: ttrss_user_entries ttrss_user_entries_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries
    ADD CONSTRAINT ttrss_user_entries_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_entries ttrss_user_entries_ref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_entries
    ADD CONSTRAINT ttrss_user_entries_ref_id_fkey FOREIGN KEY (ref_id) REFERENCES public.ttrss_entries(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_labels2 ttrss_user_labels2_article_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_labels2
    ADD CONSTRAINT ttrss_user_labels2_article_id_fkey FOREIGN KEY (article_id) REFERENCES public.ttrss_entries(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_labels2 ttrss_user_labels2_label_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_labels2
    ADD CONSTRAINT ttrss_user_labels2_label_id_fkey FOREIGN KEY (label_id) REFERENCES public.ttrss_labels2(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_prefs ttrss_user_prefs_owner_uid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_prefs
    ADD CONSTRAINT ttrss_user_prefs_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.ttrss_users(id) ON DELETE CASCADE;


--
-- Name: ttrss_user_prefs ttrss_user_prefs_pref_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_prefs
    ADD CONSTRAINT ttrss_user_prefs_pref_name_fkey FOREIGN KEY (pref_name) REFERENCES public.ttrss_prefs(pref_name) ON DELETE CASCADE;


--
-- Name: ttrss_user_prefs ttrss_user_prefs_profile_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ttrss_user_prefs
    ADD CONSTRAINT ttrss_user_prefs_profile_fkey FOREIGN KEY (profile) REFERENCES public.ttrss_settings_profiles(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

